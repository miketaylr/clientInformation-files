"use strict";
define("frontend/adapters/application", [
  "exports",
  "ember",
  "ember-data",
  "frontend/utils/ajax-error-object",
  "ember-inflector",
  "frontend/utils/http-status-codes",
], function (e, t, n, s, o, a) {
  e.default = n.default.JSONAPIAdapter.extend({
    session: t.default.inject.service(),
    logger: t.default.inject.service(),
    namespace: "api",
    handleResponse: function (e, n, o) {
      if (!t.default.isNone(n) && !t.default.isNone(o)) {
        if (e === a.UNAUTHORIZED) this.handleSessionExpired();
        else if (e === a.UNPROCESSABLE_ENTITY) return this.invalidDataError(o);
        if (e >= 400 && "OK" !== o)
          return s.default.create({ payload: o, status: e });
      }
      return this._super.apply(this, arguments);
    },
    pathForType: function (e) {
      return (0, o.pluralize)(t.default.String.underscore(e));
    },
    ajaxOptions: function (e) {
      var t = this._super.apply(this, arguments);
      return (t.url = this.get("session").urlWithAuthenticationParams(e)), t;
    },
    handleSessionExpired: function () {
      var e = this.get("session");
      t.default.isNone(e) || e.handleSessionExpired();
    },
    invalidDataError: function (e) {
      var t = [];
      return (
        e.errors.forEach(function (e) {
          e.messages.forEach(function (n) {
            t.push({
              source: { pointer: "data/attributes/" + e.field },
              detail: n,
            });
          });
        }),
        new n.default.InvalidError(t)
      );
    },
  });
}),
  define("frontend/app", [
    "exports",
    "ember",
    "frontend/resolver",
    "ember-load-initializers",
    "frontend/config/environment",
    "npm:autosize",
  ], function (e, t, n, s, o, a) {
    t.default.MODEL_FACTORY_INJECTIONS = !0;
    var i = t.default.Application.extend({
      modulePrefix: o.default.modulePrefix,
      podModulePrefix: o.default.podModulePrefix,
      Resolver: n.default,
    });
    (0, s.default)(i, o.default.modulePrefix),
      t.default.TextField.reopen({
        attributeBindings: ["required"],
        _focusIn: t.default.on("focusIn", function () {
          Modernizr.touchevents && $("body").css("cursor", "pointer");
        }),
        _focusOut: t.default.on("focusOut", function () {
          Modernizr.touchevents && $("body").css("cursor", "");
        }),
        fixAutofillBug: t.default.on("didInsertElement", function () {
          t.default.run.later(
            this,
            function () {
              this.$() && this.$().trigger("change");
            },
            200
          );
        }),
      }),
      t.default.TextArea.reopen({
        didInsertElement: function () {
          var e = this;
          this._super.apply(this, arguments),
            this.get("autosize") &&
              ((0, a.default)(this.$()),
              t.default.run.next(function () {
                e._updateAutosize();
              })),
            this.get("focusOnRender") && this.$().focus();
        },
        _focusIn: t.default.on("focusIn", function () {
          Modernizr.touchevents && $("body").css("cursor", "pointer");
        }),
        _focusOut: t.default.on("focusOut", function () {
          Modernizr.touchevents && $("body").css("cursor", "");
        }),
        valueChanged: t.default.observer("value", function () {
          this._updateAutosize();
        }),
        _updateAutosize: function () {
          var e = this;
          t.default.run.scheduleOnce("afterRender", function () {
            e.get("autosize") && a.default.update(e.$());
          });
        },
      }),
      (e.default = i);
  }),
  define("frontend/commands/approve-stories", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/commands/base",
  ], function (e, t, n, s, o) {
    e.default = o.default.extend({
      numberOfStoriesPerRequest: t.default
        .computed(function () {
          return 50;
        })
        .readOnly(),
      execute: function (e) {
        var o = this;
        return this.chunkExecuteAndRecombine(
          e,
          this.get("numberOfStoriesPerRequest"),
          function (e) {
            return new t.default.RSVP.Promise(function (t, a) {
              n.default
                .withModel(e.get("firstObject"), { action: "approve" })
                .put(s.default.approve_stories_path(), { ids: e.mapBy("id") })
                .then(function () {
                  return (
                    e.forEach(function (e) {
                      o.get("analytics").trackStoryEvent(
                        "Story Made Public",
                        e
                      );
                    }),
                    o
                      .get("store")
                      .query("story", { filter: { ids: e.mapBy("id") } })
                  );
                })
                .then(function () {
                  t(e);
                })
                .catch(function (e) {
                  a(e);
                });
            });
          }
        );
      },
    });
  }),
  define("frontend/commands/base", [
    "exports",
    "ember",
    "npm:lodash.chunk",
    "npm:lodash.flatten",
  ], function (e, t, n, s) {
    e.default = t.default.Object.extend({
      analytics: t.default.inject.service(),
      store: t.default.inject.service(),
      logger: t.default.inject.service(),
      session: t.default.inject.service(),
      execute: function () {
        return new t.default.RSVP.Promise(function (e, t) {
          t("The 'execute' method must be implemented by a command.");
        });
      },
      chunkExecuteAndRecombine: function (e, o, a) {
        var i = (0, n.default)(e, o).map(a);
        return new t.default.RSVP.Promise(function (e, n) {
          t.default.RSVP.all(i)
            .then(function (t) {
              e((0, s.default)(t));
            })
            .catch(function (e) {
              n(e);
            });
        });
      },
    });
  }),
  define("frontend/commands/copy-story", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/commands/base",
  ], function (e, t, n, s, o) {
    e.default = o.default.extend({
      execute: function (e) {
        var o = this;
        return new t.default.RSVP.Promise(function (t, a) {
          n.default
            .withModel(e, { action: "copy" })
            .post(s.default.copy_story_path(e.get("id")))
            .then(function (n) {
              o.get("store").pushPayload("story", n);
              var s = o.get("store").peekRecord("story", n.data.id);
              o
                .get("analytics")
                .trackStoryEvent("Story Creation", e, {
                  "Creation type": "copy",
                }),
                t(s);
            })
            .catch(function (t) {
              o
                .get("logger")
                .exception(
                  new Error("Could not copy the story with id=" + e.id),
                  { jqxhr: t }
                ),
                a();
            });
        });
      },
    });
  }),
  define("frontend/commands/destroy-email-subscriptions", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/commands/base",
  ], function (e, t, n, s, o) {
    e.default = o.default.extend({
      execute: function (e) {
        var o = this,
          a =
            arguments.length <= 1 || void 0 === arguments[1]
              ? null
              : arguments[1];
        return new t.default.RSVP.Promise(function (i, l) {
          if (t.default.isEmpty(e)) i([]);
          else {
            var r = { ids: e.mapBy("id") };
            o.get("session.isLoggedIn") || (r.encoded_unsubscribe_token = a),
              n.default
                .delete(s.default.email_subscriptions_path(), r)
                .then(function () {
                  e.forEach(function (e) {
                    o
                      .get("analytics")
                      .trackEvent("Mailing List Unsubscription", {
                        "List name": e.get("listName"),
                      }),
                      e.unloadRecord();
                  }),
                    i(e);
                })
                .catch(function (e) {
                  l(e);
                });
          }
        });
      },
    });
  }),
  define("frontend/commands/finish-story", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/commands/base",
  ], function (e, t, n, s, o) {
    e.default = o.default.extend({
      execute: function (e) {
        var o = this,
          a =
            arguments.length <= 1 || void 0 === arguments[1]
              ? {}
              : arguments[1];
        return new t.default.RSVP.Promise(function (t, i) {
          n.default
            .withModel(e, a)
            .put(s.default.finish_story_path(e.get("id")))
            .then(function () {
              e.reload()
                .then(function () {
                  t(e);
                })
                .catch(function (t) {
                  o
                    .get("logger")
                    .exception(
                      new Error("Could not reload the story with id=" + e.id),
                      { jqxhr: t }
                    ),
                    i(t);
                });
            })
            .catch(function (t) {
              o
                .get("logger")
                .exception(
                  new Error("Could not finish the story with id=" + e.id),
                  { jqxhr: t }
                ),
                i(t);
            });
        });
      },
    });
  }),
  define("frontend/commands/reject-stories", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/commands/base",
  ], function (e, t, n, s, o) {
    e.default = o.default.extend({
      numberOfStoriesPerRequest: t.default
        .computed(function () {
          return 50;
        })
        .readOnly(),
      execute: function (e) {
        var o = this;
        return this.chunkExecuteAndRecombine(
          e,
          this.get("numberOfStoriesPerRequest"),
          function (e) {
            return new t.default.RSVP.Promise(function (t, a) {
              n.default
                .withModel(e.get("firstObject"), { action: "reject" })
                .put(s.default.reject_stories_path(), { ids: e.mapBy("id") })
                .then(function () {
                  return (
                    e.forEach(function (e) {
                      o.get("analytics").trackStoryEvent(
                        "Story Made Private",
                        e
                      );
                    }),
                    o
                      .get("store")
                      .query("story", { filter: { ids: e.mapBy("id") } })
                  );
                })
                .then(function () {
                  t(e);
                })
                .catch(function (e) {
                  a(e);
                });
            });
          }
        );
      },
    });
  }),
  define("frontend/commands/share-stories-with-school-class", [
    "exports",
    "ember",
    "frontend/commands/base",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
  ], function (e, t, n, s, o) {
    e.default = n.default.extend({
      execute: function (e, n, s, o) {
        var a = this,
          i = [],
          l = [],
          r = [];
        e.forEach(function (e) {
          var u = a._getStoryShare(o, e, n);
          !t.default.isNone(u) || ("teacher" !== s && "school_class" !== s)
            ? (t.default.isNone(s) &&
                u.get("isCreatedByStudent") &&
                (s =
                  a.get("session.currentUser") === e.get("author")
                    ? null
                    : "teacher"),
              "teacher" === s || "school_class" === s
                ? (u.set("sharingScope", s), l.push(u))
                : (u.deleteRecord(), r.push(u)))
            : ((u = a
                .get("store")
                .createRecord("story-share", {
                  schoolClass: n,
                  story: e,
                  sharingScope: s,
                })),
              "teacher" === s && u.set("isCreatedByStudent", !0),
              i.push(u)),
            a._trackAnalytics(e, n, s);
        });
        var u = this._saveStorySharesOneAtATime([].concat(i, r)),
          c = this._saveStorySharesInBulk(l);
        return t.default.RSVP.allSettled([].concat(u, [c]));
      },
      _trackAnalytics: function (e, t, n) {
        this.get("analytics").trackStoryEvent(
          "Story Shared with School Class",
          e,
          { "Sharing scope": n, "School class id": t.get("id") }
        );
      },
      _saveStorySharesOneAtATime: function (e) {
        return e.map(function (e) {
          return e.save();
        });
      },
      _saveStorySharesInBulk: function (e) {
        return new t.default.RSVP.Promise(function (n, a) {
          t.default.isEmpty(e)
            ? n()
            : s.default
                .put(o.default.update_multiple_story_shares_path(), {
                  ids: e.mapBy("id"),
                  sharing_scope: e[0].get("sharingScope"),
                })
                .then(function () {
                  e.forEach(function (e) {
                    e.clearPendingChanges();
                  }),
                    n();
                })
                .catch(function () {
                  a();
                });
        });
      },
      _getStoryShare: function (e, t, n) {
        if ("schoolClass" === e) return n.findStoryShareByStory(t);
        if ("story" === e) return t.findStoryShareBySchoolClass(n);
        throw new Error(
          "'associationSide' must be of value 'schoolClass' or 'story'"
        );
      },
    });
  }),
  define("frontend/components/-dynamic-render", [
    "exports",
    "ember-dynamic-render/components/-dynamic-render",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/-lf-get-outlet-state", [
    "exports",
    "liquid-fire/components/-lf-get-outlet-state",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/ab-experiment/component", [
    "exports",
    "ember",
    "npm:lodash.sample",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, {
      classNames: ["ab-experiment"],
      storage: t.default.inject.service(),
      requiredInput: ["name", "variations"],
      variation: t.default
        .computed("variations", function () {
          var e = this.get("storageKey"),
            t = this.get("storage");
          return (
            t.has(e) || t.store(e, (0, n.default)(this.get("variations"))),
            t.retrieve(e)
          );
        })
        .readOnly(),
      storageKey: t.default
        .computed("name", function () {
          return "ab-experiment:" + this.get("name");
        })
        .readOnly(),
    });
  }),
  define("frontend/components/ab-experiment/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "A1pItezj",
      block:
        '{"statements":[["yield","default",[["get",["variation"]]]],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/ab-experiment/template.hbs" },
    });
  }),
  define("frontend/components/add-collaborators/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/sutori-info",
  ], function (e, t, n, s) {
    var o = 200,
      a = 6,
      i = /.*@.*/;
    e.default = t.default.Component.extend({
      classNames: ["add-collaborators"],
      classNameBindings: [
        "hasSuggestedCollaborators:suggesting-collaborators",
        "canNotAddMoreCollaborators",
        "showGoUnlimitedLink",
        "isLoading",
      ],
      session: t.default.inject.service(),
      store: t.default.inject.service(),
      suggestedCollaborators: [],
      queryFocused: !1,
      query: "",
      currentUser: t.default.computed.reads("session.currentUser"),
      hasNoCollaborators: t.default.computed.empty("collaborators"),
      hasNoInvitations: t.default.computed.empty("invitations"),
      canAddMoreCollaborators: t.default.computed(
        "currentUser.canAddUnlimitedCollaborators",
        "hasNoCollaborators",
        "hasNoInvitations",
        function () {
          return (
            !!this.get("currentUser.canAddUnlimitedCollaborators") ||
            (this.get("hasNoCollaborators") && this.get("hasNoInvitations"))
          );
        }
      ),
      canNotAddMoreCollaborators: t.default.computed.not(
        "canAddMoreCollaborators"
      ),
      showGoUnlimitedLink: t.default.computed.and(
        "canNotAddMoreCollaborators",
        "currentUser.canSubscribe"
      ),
      queryNotBlank: t.default.computed.notEmpty("query"),
      queryLooksLikeAnEmail: t.default.computed.match("query", i),
      isLoading: t.default.computed.reads("searchUsersTask.isRunning"),
      placeholder: t.default.computed(
        "queryFocused",
        "canAddMoreCollaborators",
        function () {
          if (this.get("canAddMoreCollaborators"))
            return this.get("queryFocused")
              ? "Search by name, username or email"
              : "Inviteâ¦";
          if (this.get("currentUser.isPersonal"))
            return (
              "Want to add more people? Contact us at " + s.default.EMAIL_INFO
            );
          if (this.get("currentUser.isTeacher")) return "to add more people";
          if (this.get("currentUser.isStudent"))
            return "Ask your teacher to go Unlimited to invite more people";
          throw new Error(
            "Only personal users, teachers and students are limited by the number of collaborators they can invite."
          );
        }
      ),
      showSuggestedCollaborators: t.default.computed.and(
        "hasSuggestedCollaborators"
      ),
      hasSuggestedCollaborators: t.default.computed.gt(
        "suggestedCollaborators.length",
        0
      ),
      newCollaborators: t.default.computed.setDiff(
        "suggestedCollaborators",
        "collaborators"
      ),
      excludedSuggestions: t.default.computed(
        "collaborators",
        "currentUser",
        function () {
          return []
            .concat([this.get("currentUser")], this.get("collaborators"))
            .uniq();
        }
      ),
      hasAlreadyInvitedCollaborator: t.default.computed(
        "invitations.@each.email",
        "query",
        function () {
          var e = this.get("invitations").findBy("email", this.get("query")),
            n = t.default.isPresent(e);
          return n;
        }
      ),
      suggestEmailInvitation: t.default.computed(
        "queryLooksLikeAnEmail",
        "hasSuggestedCollaborators",
        "hasAlreadyInvitedCollaborator",
        function () {
          var e = this.get("queryLooksLikeAnEmail"),
            t = this.get("hasSuggestedCollaborators"),
            n = this.get("hasAlreadyInvitedCollaborator");
          return e && !t && !n;
        }
      ),
      showSuggestions: t.default.computed.or(
        "showSuggestedCollaborators",
        "suggestEmailInvitation"
      ),
      _queryModified: t.default.observer("query", function () {
        this.get("suggestCollaboratorsFromQuery").perform();
      }),
      _resetInputQuery: function () {
        this.$(".input-collaborator").focus(), this.set("query", "");
      },
      suggestCollaboratorsFromQuery: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (((t = []), !this.get("queryNotBlank"))) {
                      e.next = 7;
                      break;
                    }
                    return (e.next = 4), (0, n.timeout)(o);
                  case 4:
                    return (e.next = 6), this.get("searchUsersTask").perform();
                  case 6:
                    t = e.sent;
                  case 7:
                    this.set("suggestedCollaborators", t);
                  case 8:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).restartable(),
      searchUsersTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = {
                        role_types: ["teacher", "student", "personal"],
                        exclude_ids: this.get("excludedSuggestions").mapBy(
                          "id"
                        ),
                      }),
                      this.get("queryLooksLikeAnEmail")
                        ? (t.login = this.get("query"))
                        : (t.query = this.get("query")),
                      (e.next = 4),
                      this.get("store").query("user", {
                        filter: t,
                        page: 1,
                        per_page: a,
                      })
                    );
                  case 4:
                    return e.abrupt("return", e.sent);
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).restartable(),
      actions: {
        focusIn: function () {
          this.set("queryFocused", !0);
        },
        focusOut: function () {
          var e = this;
          t.default.run.next(function () {
            e.get("isDestroyed") || e.set("queryFocused", !1);
          });
        },
        performSuggestion: function () {
          var e = this.$(".collaborator-card:first-child");
          e.click();
        },
        selectCollaborator: function (e) {
          this.sendAction("addCollaborator", e), this._resetInputQuery();
        },
        inviteCollaborator: function () {
          var e = this.get("query");
          this.sendAction("inviteCollaborator", e), this._resetInputQuery();
        },
      },
    });
  }),
  define("frontend/components/add-collaborators/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "cMTSesi8",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","wrapper-input-collaborator"],["flush-element"],["text","\\n  "],["append",["helper",["input"],null,[["class","placeholder","value","type","disabled","focus-in","focus-out","insert-newline"],["input-collaborator",["get",["placeholder"]],["get",["query"]],"text",["get",["canNotAddMoreCollaborators"]],["helper",["action"],[["get",[null]],"focusIn"],null],["helper",["action"],[["get",[null]],"focusOut"],null],["helper",["action"],[["get",[null]],"performSuggestion"],null]]]],false],["text","\\n\\n"],["block",["if"],[["get",["showGoUnlimitedLink"]]],null,8],["text","\\n"],["block",["if"],[["get",["isLoading"]]],null,6],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showSuggestions"]]],null,5]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["static-attr","class","collaborator-card"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"inviteCollaborator"]],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","default-avatar"],["flush-element"],["text","\\n          "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/icon-head-35c5468ae12ca5621a76d85b63575469.svg"],["static-attr","class","default-avatar-icon"],["static-attr","alt","Default avatar icon"],["flush-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","email-invitation"],["flush-element"],["text","Send an email invite to "],["append",["unknown",["query"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["suggestEmailInvitation"]]],null,0]],"locals":[]},{"statements":[["text","            "],["open-element","span",[]],["static-attr","class","school-name"],["flush-element"],["text","Â ("],["append",["unknown",["collaborator","schoolName"]],false],["text",")"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","collaborator-card"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"selectCollaborator",["get",["collaborator"]]]],["flush-element"],["text","\\n          "],["append",["helper",["user-avatar"],null,[["user"],[["get",["collaborator"]]]]],false],["text","\\n          "],["open-element","strong",[]],["static-attr","class","full-name"],["flush-element"],["append",["unknown",["collaborator","fullName"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["collaborator","hasSchoolName"]]],null,2],["text","        "],["close-element"],["text","\\n"]],"locals":["collaborator"]},{"statements":[["block",["each"],[["get",["newCollaborators"]]],null,3]],"locals":[]},{"statements":[["text","  "],["open-element","ul",[]],["static-attr","class","suggested-collaborators"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showSuggestedCollaborators"]]],null,4,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","loader"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","Go Unlimited"]],"locals":[]},{"statements":[["text","    "],["block",["link-to"],["upgrade",["helper",["query-params"],null,[["origin"],["add-collaborators"]]]],[["class"],["link-go-unlimited"]],7],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/add-collaborators/template.hbs",
      },
    });
  }),
  define("frontend/components/animated-ellipsis/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      tagName: "span",
      classNames: ["animated-ellipsis"],
    });
  }),
  define("frontend/components/animated-ellipsis/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "DD8dFz6G",
      block:
        '{"statements":[["text","."],["open-element","span",[]],["flush-element"],["text","."],["close-element"],["open-element","span",[]],["flush-element"],["text","."],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/animated-ellipsis/template.hbs",
      },
    });
  }),
  define("frontend/components/application-footer/component", [
    "exports",
    "ember",
    "frontend/mixins/responds-to-in-viewport",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      tagName: "footer",
      classNames: ["application-footer"],
      origin: "application-footer",
      session: t.default.inject.service(),
      routingProxy: t.default.inject.service(),
      didInsertElement: function () {
        this._super.apply(this, arguments);
      },
      showWebsiteMenu: t.default.computed.or(
        "routingProxy.isWebsiteRoute",
        "session.isGuestUser"
      ),
      showMenu: t.default.computed(
        "routingProxy.isRegistrationRoute",
        "session.isLoggedIn",
        function () {
          return (
            !this.get("routingProxy.isRegistrationRoute") ||
            this.get("session.isLoggedIn")
          );
        }
      ),
    });
  }),
  define("frontend/components/application-footer/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "jE637E8i",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","application-footer-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","application-footer-logo"],["flush-element"],["text","\\n"],["block",["link-to"],["index"],[["class"],["application-footer-logo__link"]],5],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","application-footer-navigation"],["flush-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","navigation"],["flush-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n        "],["block",["link-to"],["about"],[["class"],["navigation__link"]],4],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n        "],["block",["link-to"],["press"],[["class"],["navigation__link"]],3],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n        "],["block",["link-to"],["blogPosts"],[["class"],["navigation__link"]],2],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n        "],["block",["link-to"],["privacyPolicy"],[["class"],["navigation__link"]],1],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n        "],["block",["link-to"],["termsOfUse"],[["class"],["navigation__link"]],0],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Terms of use"]],"locals":[]},{"statements":[["text","Privacy policy"]],"locals":[]},{"statements":[["text","Blog"]],"locals":[]},{"statements":[["text","Press"]],"locals":[]},{"statements":[["text","About"]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","class","application-footer-logo__image"],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/logo-sutori-4fa14594018606afea134362d426af10.svg"],["static-attr","alt","Sutori"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/application-footer/template.hbs",
      },
    });
  }),
  define("frontend/components/application-header/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/api-paths",
    "frontend/utils/xhr",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend({
      tagName: "header",
      classNames: ["application-header"],
      analytics: t.default.inject.service(),
      session: t.default.inject.service(),
      environment: t.default.inject.service(),
      routingProxy: t.default.inject.service(),
      origin: "application-header",
      isLoggingOut: !1,
      currentUser: t.default.computed.reads("session.currentUser"),
      showWebsiteMenu: t.default.computed.or(
        "routingProxy.isWebsiteRoute",
        "session.isGuestUser"
      ),
      logoutTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      this.get("analytics").trackEvent("Active User Logout"),
                      (e.prev = 1),
                      (e.next = 4),
                      o.default.delete(s.default.user_logout_path())
                    );
                  case 4:
                    this.get("session").logout(),
                      this.get("environment.isTest") &&
                        this.set("session.currentUser", null);
                  case 6:
                    return (
                      (e.prev = 6),
                      this.get("environment.isTest") ||
                        (window.location = window.location.origin),
                      e.finish(6)
                    );
                  case 9:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, , 6, 9]]
          );
        })
      ).drop(),
      actions: {
        toggleMobileNavigation: function () {
          $("body").toggleClass("has-mobile-navigation");
        },
      },
    });
  }),
  define("frontend/components/application-header/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "EKO/PGMJ",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","application-header-container"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","application-header-logo"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","application-header-navigation__trigger"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"toggleMobileNavigation"]],["flush-element"],["text","\\n      "],["open-element","span",[]],["flush-element"],["text","Menu"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["block",["link-to"],["index"],[["class"],["application-header-logo__link"]],37],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","application-header-navigation"],["flush-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","navigation"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showWebsiteMenu"]]],null,36,28],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","application-header-cta"],["flush-element"],["text","\\n    "],["open-element","ul",[]],["static-attr","class","navigation"],["flush-element"],["text","\\n"],["block",["if"],[["get",["session","isLoggedIn"]]],null,9,2],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Sign up"]],"locals":[]},{"statements":[["text","Log in"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["login"],[["class"],["navigation__link"]],1],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["registration"],[["class"],["navigation__button"]],0],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                  Upgrade\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n"],["block",["call-to-action-upgrade"],null,[["origin"],["application-header"]],3],["text","              "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["unless"],[["get",["currentUser","hasOngoingSubscription"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["currentUser","canSubscribe"]]],null,5],["text","\\n"],["text","          "],["partial","menu/item-profile"],["text","\\n\\n"],["text","          "],["partial","menu/item-logout"],["text","\\n"]],"locals":[]},{"statements":[["text","Go to dashboard"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["dashboard"],[["class"],["button-go-to-dashboard navigation__button"]],7],["text","\\n          "],["close-element"],["text","\\n\\n"],["text","          "],["partial","menu/item-logout"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showWebsiteMenu"]]],null,8,6]],"locals":[]},{"statements":[["text","Help"]],"locals":[]},{"statements":[["text","Learn"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["schoolClasses"],[["class"],["navigation__link"]],11],["text","\\n          "],["close-element"],["text","\\n        "]],"locals":[]},{"statements":[["block",["if"],[["get",["session","currentUser","isStudent"]]],null,12]],"locals":[]},{"statements":[["text","Explore"]],"locals":[]},{"statements":[["text","Teach"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["schoolClasses"],[["class"],["navigation__link"]],15],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["stories.index"],[["class"],["navigation__link"]],14],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","currentUser","isTeacher"]]],null,16,13]],"locals":[]},{"statements":[["text","Explore"]],"locals":[]},{"statements":[["text","Create"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["dashboard"],[["class"],["navigation__link"]],19],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["stories.index"],[["class"],["navigation__link"]],18],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","currentUser","isPersonal"]]],null,20,17]],"locals":[]},{"statements":[["text","Stories"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["stories.index"],[["class"],["navigation__link"]],22],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","currentUser","isPublisher"]]],null,23,21]],"locals":[]},{"statements":[["text","Explore"]],"locals":[]},{"statements":[["text","Public stories"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["storiesEvaluation"],[["class"],["navigation__link"]],26],["text","\\n          "],["close-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n            "],["block",["link-to"],["stories.index"],[["class"],["navigation__link"]],25],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","currentUser","isEditor"]]],null,27,24],["text","\\n"],["text","        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["help"],[["target","class"],["_blank","navigation__link"]],10],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","Contact"]],"locals":[]},{"statements":[["text","Blog"]],"locals":[]},{"statements":[["text","About"]],"locals":[]},{"statements":[["text","Business"]],"locals":[]},{"statements":[["text","Education"]],"locals":[]},{"statements":[["text","Explore"]],"locals":[]},{"statements":[["text","Home"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["index"],[["class"],["navigation__link"]],35],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["stories"],[["class"],["navigation__link"]],34],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["education"],[["class"],["navigation__link"]],33],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n          "],["block",["link-to"],["business"],[["class"],["navigation__link"]],32],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","li",[]],["static-attr","class","navigation__item navigation-dropdown__trigger"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","navigation__link"],["flush-element"],["text","More"],["close-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","navigation-dropdown-container"],["flush-element"],["text","\\n            "],["open-element","ul",[]],["static-attr","class","navigation-dropdown"],["flush-element"],["text","\\n              "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n                "],["block",["link-to"],["about"],[["class"],["navigation__link"]],31],["text","\\n              "],["close-element"],["text","\\n              "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n                "],["block",["link-to"],["blogPosts"],[["class"],["navigation__link"]],30],["text","\\n              "],["close-element"],["text","\\n              "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n                "],["block",["link-to"],["contact"],[["class"],["navigation__link"]],29],["text","\\n              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","img",[]],["static-attr","class","application-header-logo__image"],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/logo-sutori-4fa14594018606afea134362d426af10.svg"],["static-attr","alt","Sutori"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/components/application-header/template.hbs",
      },
    });
  }),
  define("frontend/components/async-button-with-confirmation/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["async-button-with-confirmation"],
      classNameBindings: ["name"],
      requiredInput: ["name", "question", "popoverPosition"],
      disabled: !1,
      loading: !1,
      label: "",
      loadingLabel: null,
      makeButtonsFastclickable: t.default.observer(
        "showConfirmationPopover",
        function () {
          var e = this;
          this.get("showConfirmationPopover") &&
            t.default.run.scheduleOnce("afterRender", function () {
              e.makeFastclickable(e.$(".confirm")),
                e.makeFastclickable(e.$(".cancel"));
            });
        }
      ),
      actions: {
        clickedOutsideConfirmationPopover: function (e) {
          this.$(".async-button").is(e) ||
            this.set("showConfirmationPopover", !1);
        },
        showConfirmation: function () {
          this.toggleProperty("showConfirmationPopover");
        },
        confirm: function () {
          this.set("showConfirmationPopover", !1), this.sendAction();
        },
        cancel: function () {
          this.set("showConfirmationPopover", !1);
        },
      },
    });
  }),
  define("frontend/components/async-button-with-confirmation/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "44l7CtD+",
      block:
        '{"statements":[["append",["helper",["async-button"],null,[["action","name","loading","disabled","label","loadingLabel"],[["helper",["action"],[["get",[null]],"showConfirmation"],null],["get",["name"]],["get",["loading"]],["get",["disabled"]],["get",["label"]],["get",["loadingLabel"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["showConfirmationPopover"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","p",[]],["static-attr","class","question"],["flush-element"],["append",["unknown",["question"]],false],["close-element"],["text","\\n    "],["open-element","button",[]],["static-attr","class","confirm"],["modifier",["action"],[["get",[null]],"confirm"]],["flush-element"],["text","Yes I\'m sure"],["close-element"],["text","\\n    "],["open-element","button",[]],["static-attr","class","cancel"],["modifier",["action"],[["get",[null]],"cancel"]],["flush-element"],["text","Cancel"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["pop-over"],null,[["clickedOutside","position"],[["helper",["action"],[["get",[null]],"clickedOutsideConfirmationPopover"],null],["get",["popoverPosition"]]]],0]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/async-button-with-confirmation/template.hbs",
      },
    });
  }),
  define("frontend/components/async-button-with-tooltip/component", [
    "exports",
    "ember",
    "frontend/mixins/tooltipable",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["async-button-with-tooltip"],
      classNameBindings: ["name", "loading:waiting"],
      attributeBindings: [
        "emptyString:title",
        "tooltip:data-title",
        "tooltipContainer:data-container",
        "tooltipPlacement:data-placement",
        "tooltipTrigger:data-trigger",
      ],
      requiredInput: ["name", "tooltip"],
      disabled: !1,
      loading: !1,
      label: "",
      loadingLabel: null,
      emptyString: "",
      tooltipContainer: "body",
      tooltipPlacement: "top",
      tooltipTrigger: "hover",
      didInsertElement: function () {
        this._super.apply(this, arguments), this.makeTooltipable(this.$());
      },
      toggleTooltipVisibility: t.default.observer(
        "tooltipVisible",
        function () {
          this.get("isDestroyed") ||
            (this.get("tooltipVisible")
              ? this.showTooltip(this.$())
              : this.hideTooltip(this.$()));
        }
      ),
      buttonCssClass: t.default.computed("name", function () {
        return "button-" + this.get("name");
      }),
      actions: {
        buttonClicked: function () {
          this.sendAction();
        },
      },
    });
  }),
  define("frontend/components/async-button-with-tooltip/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "x7s/ETD8",
      block:
        '{"statements":[["append",["helper",["async-button"],null,[["action","name","loading","disabled","label","loadingLabel"],[["helper",["action"],[["get",[null]],"buttonClicked"],null],["get",["name"]],["get",["loading"]],["get",["disabled"]],["get",["label"]],["get",["loadingLabel"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/async-button-with-tooltip/template.hbs",
      },
    });
  }),
  define("frontend/components/async-button/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      tagName: ["button"],
      classNames: ["async-button"],
      classNameBindings: ["cssClass", "loading:is-loading"],
      attributeBindings: ["isDisabled:disabled", "type"],
      requiredInput: ["name", "label"],
      loading: !1,
      disabled: !1,
      type: "button",
      label: "",
      loadingLabel: null,
      didInsertElement: function () {
        this._super.apply(this, arguments), this.makeFastclickable(this.$());
      },
      click: function () {
        this.sendAction();
      },
      cssClass: t.default.computed("name", function () {
        return t.default.isEmpty(this.get("name"))
          ? ""
          : "button-" + this.get("name");
      }),
      isDisabled: t.default.computed.or("disabled", "loading"),
      hasLoadingLabel: t.default.computed.notEmpty("loadingLabel"),
      showLoadingLabel: t.default.computed.and("loading", "hasLoadingLabel"),
    });
  }),
  define("frontend/components/async-button/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "6jkpt9me",
      block:
        '{"statements":[["block",["if"],[["get",["showLoadingLabel"]]],null,1,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["unknown",["label"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["unknown",["loadingLabel"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/async-button/template.hbs" },
    });
  }),
  define("frontend/components/audio-player-progress-bar/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["progress"],
      progressBarStyle: t.default.computed("position", "duration", function () {
        var e = "";
        if (
          !t.default.isNone(this.get("position")) &&
          !t.default.isNone(this.get("duration"))
        ) {
          var n = parseInt(this.get("position")),
            s = parseInt(this.get("duration"));
          e = "left: " + (100 * n) / s + "%;";
        }
        return new t.default.String.htmlSafe(e);
      }),
      click: function (e) {
        var t = this.$(),
          n = t.offset().left,
          s = t.width(),
          o = (e.pageX - n) / s,
          a = Math.floor(o * this.get("duration"));
        this.sendAction("action", a);
      },
    });
  }),
  define("frontend/components/audio-player-progress-bar/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "152dGW+c",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","progress-indicator"],["dynamic-attr","style",["unknown",["progressBarStyle"]],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/audio-player-progress-bar/template.hbs",
      },
    });
  }),
  define("frontend/components/audio-player/component", [
    "exports",
    "ember",
    "frontend/mixins/lazy-loadable-media",
    "ember-concurrency",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["audio-player"],
      classNameBindings: ["isPlaying", "isLoading"],
      duration: 0,
      position: 0,
      isPlaying: !1,
      isLoading: !0,
      loadMediaTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    t.default.debug("Loading audio: " + this.get("src")),
                      this.set("showAudio", !0),
                      t.default.debug("Loaded audio: " + this.get("src"));
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _pause: function () {
        this.get("html5Audio").send("pause"), this.set("isPlaying", !1);
      },
      _play: function () {
        this.get("html5Audio").send("play"), this.set("isPlaying", !0);
      },
      _seek: function (e) {
        this.get("html5Audio").send("seek", e);
      },
      actions: {
        playPause: function () {
          this.get("isPlaying") ? this._pause() : this._play();
        },
        seek: function (e) {
          this._seek(e);
        },
        durationChange: function (e) {
          this.set("duration", e);
        },
        loadedMetadata: function () {
          this.set("isLoading", !1);
        },
        ended: function () {
          this.set("position", 0), this.set("isPlaying", !1);
        },
        timeUpdate: function (e) {
          this.set("position", e);
        },
      },
    });
  }),
  define("frontend/components/audio-player/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "5MDCPbvW",
      block:
        '{"statements":[["block",["if"],[["get",["showAudio"]]],null,3,0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","loader-overlay"],["flush-element"],["text","\\n    "],["partial","helpers/loader"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","timer"],["static-attr","dir","ltr"],["flush-element"],["append",["helper",["media-time-format"],[["get",["position"]]],null],false],["text"," / "],["append",["helper",["media-time-format"],[["get",["duration"]]],null],false],["close-element"],["text","\\n      "],["append",["helper",["audio-player-progress-bar"],null,[["position","duration","action"],[["get",["position"]],["get",["duration"]],"seek"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","p",[]],["flush-element"],["text","Loading..."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["html5-audio"],null,[["src","durationChange","loadedMetadata","ended","timeUpdate","actionReceiver"],[["get",["src"]],["helper",["action"],[["get",[null]],"durationChange"],null],["helper",["action"],[["get",[null]],"loadedMetadata"],null],["helper",["action"],[["get",[null]],"ended"],null],["helper",["action"],[["get",[null]],"timeUpdate"],null],["get",["html5Audio"]]]]],false],["text","\\n\\n  "],["yield","default"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","controls"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","play-pause-button"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"playPause"]],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","audio-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isLoading"]]],null,2,1],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/audio-player/template.hbs" },
    });
  }),
  define("frontend/components/blog-post/component", [
    "exports",
    "ember",
    "frontend/utils/date-utils",
    "frontend/components/light-box/component",
    "frontend/utils/dom",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend({
      classNames: ["blog-post"],
      classNameBindings: ["showAsTeaser"],
      session: t.default.inject.service(),
      showAsTeaser: !1,
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          t.default.run.next(function () {
            e.$(".content img")
              .not(".render-image img")
              .each(function () {
                $(this).magnificPopup({
                  type: "image",
                  items: { src: $(this).attr("src") },
                  image: { cursor: null },
                  closeOnContentClick: !0,
                  removalDelay: s.FADE_SPEED,
                  mainClass: "mfp-fade",
                  showCloseBtn: !1,
                });
              });
          }),
          this.get("session.currentUserCanShareOnSocialMedia") &&
            (0, o.injectScript)("//platform.twitter.com/widgets.js");
      },
      showContent: t.default.computed.not("showAsTeaser"),
      excerpt: t.default.computed("blogPost.excerpt", function () {
        return new t.default.String.htmlSafe(this.get("blogPost.excerpt"));
      }),
      publishedAtInTimeAgo: t.default.computed(
        "blogPost.publishedAt",
        function () {
          return n.default.fromNow(this.get("blogPost.publishedAt"));
        }
      ),
    });
  }),
  define("frontend/components/blog-post/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "x8vCD1dC",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","author-profile-picture"],["flush-element"],["text","\\n  "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy"],[["get",["blogPost","author","profileImageFile"]],"cover"]]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","body"],["flush-element"],["text","\\n  "],["open-element","header",[]],["static-attr","class","header"],["flush-element"],["text","\\n    "],["open-element","h1",[]],["static-attr","class","post-title"],["flush-element"],["text","\\n      "],["block",["link-to"],["blogPost",["get",["blogPost"]]],null,6],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","span",[]],["static-attr","class","author"],["flush-element"],["append",["unknown",["blogPost","author","fullName"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["blogPost","isPublished"]]],null,5,4],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","excerpt"],["flush-element"],["append",["unknown",["excerpt"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showContent"]]],null,3],["text","\\n  "],["open-element","footer",[]],["static-attr","class","footer"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showAsTeaser"]]],null,2],["text","\\n"],["block",["if"],[["get",["session","currentUserCanShareOnSocialMedia"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Share "],["append",["unknown",["social-media-sharing-buttons"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","Read more"]],"locals":[]},{"statements":[["text","      "],["block",["link-to"],["blogPost",["get",["blogPost"]]],[["class"],["button-read-more"]],1],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["append",["helper",["dynamic-render"],[["get",["blogPost","content"]],["get",[null]]],null],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","published-at"],["flush-element"],["text","Not yet published"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["time-tag"],null,[["time","label","class"],[["get",["blogPost","publishedAt"]],["get",["publishedAtInTimeAgo"]],"published-at"]]],false],["text","\\n"]],"locals":[]},{"statements":[["append",["unknown",["blogPost","title"]],false]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/blog-post/template.hbs" },
    });
  }),
  define("frontend/components/bread-crumbs/component", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-resize",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["bread-crumbs"],
      breadCrumbMinWidth: t.default
        .computed(function () {
          return 100;
        })
        .readOnly(),
      handlerInfos: t.default.computed(
        "applicationController.currentPath",
        function () {
          return this.get("router").router.currentHandlerInfos;
        }
      ),
      controllers: t.default.computed("handlerInfos.[]", function () {
        return this.get("handlerInfos").map(function (e) {
          return e.handler.controller;
        });
      }),
      breadCrumbs: t.default.computed(
        "controllers.@each.breadCrumbs",
        function () {
          var e = null;
          return (
            this.get("controllers").forEach(function (t) {
              var n = t.get("breadCrumbs");
              n && (e = n);
            }),
            e
          );
        }
      ),
      resizeBreadCrumbs: t.default.on(
        "didInsertElement",
        "resize",
        t.default.observer("breadCrumbs", function () {
          t.default.run.scheduleOnce(
            "afterRender",
            this,
            this._resizeBreadCrumbs
          );
        })
      ),
      _resizeBreadCrumbs: function () {
        var e = this;
        if (this.$()) {
          var t = this.$("li").toArray().reverse(),
            n = this.get("breadCrumbMinWidth"),
            s = this.$().width();
          t.forEach(function (e) {
            $(e).css("max-width", s + "px");
          }),
            t.forEach(function (t) {
              var o = e
                  .$("li")
                  .toArray()
                  .reduce(function (e, t) {
                    return e + $(t).outerWidth();
                  }, 0),
                a = o - s;
              if (a > 0) {
                var i = Math.max(n, $(t).outerWidth() - a);
                $(t).css("max-width", i + "px");
              }
            });
        }
      },
    });
  }),
  define("frontend/components/bread-crumbs/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "bT0VJ5jT",
      block:
        '{"statements":[["block",["if"],[["get",["breadCrumbs"]]],null,11]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","span",[]],["static-attr","class","overflow-container"],["flush-element"],["append",["unknown",["breadCrumb","label"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","span",[]],["static-attr","class","overflow-container"],["flush-element"],["append",["unknown",["breadCrumb","label"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],[["get",["breadCrumb","path"]]],null,1]],"locals":[]},{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","overflow-container"],["flush-element"],["append",["unknown",["breadCrumb","label"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],[["get",["breadCrumb","path"]],["get",["breadCrumb","model"]],["helper",["query-params"],null,[["schoolClassId"],["null"]]]],null,3]],"locals":[]},{"statements":[["text","                  "],["open-element","span",[]],["static-attr","class","overflow-container"],["flush-element"],["append",["unknown",["breadCrumb","label"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],[["get",["breadCrumb","path"]],["get",["breadCrumb","model"]],["helper",["query-params"],null,[["schoolClassId"],[["get",["breadCrumb","schoolClassContextId"]]]]]],null,5]],"locals":[]},{"statements":[["block",["if"],[["get",["breadCrumb","schoolClassContextId"]]],null,6,4]],"locals":[]},{"statements":[["block",["if"],[["get",["breadCrumb","model"]]],null,7,2]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["breadCrumb","path"]]],null,8,0],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["breadCrumb","label"]]],null,9]],"locals":["breadCrumb"]},{"statements":[["text","  "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["breadCrumbs"]]],null,10],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/bread-crumbs/template.hbs" },
    });
  }),
  define("frontend/components/button-create-new-story/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      tagName: "button",
      classNames: ["button-create-new-story"],
      didInsertElement: function () {
        this._super(), this.makeFastclickable(this.$());
      },
      click: function () {
        this.sendAction();
      },
    });
  }),
  define("frontend/components/button-create-new-story/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "6WArbD55",
      block:
        '{"statements":[["text","Create a story\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/button-create-new-story/template.hbs",
      },
    });
  }),
  define("frontend/components/button-edmodo-single-sign-on/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/mixins/button-single-sign-on",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Component.extend(a.default, {
      classNames: ["button-edmodo-single-sign-on"],
      loginTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var n, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2), this.getAuthorization("edmodo-connect")
                    );
                  case 2:
                    if (((n = e.sent), !t.default.isNone(n))) {
                      e.next = 5;
                      break;
                    }
                    return e.abrupt("return");
                  case 5:
                    return (
                      (e.prev = 5),
                      (e.next = 8),
                      s.default.post(o.default.edmodo_callback_path(), {
                        token: n.authorizationToken.access_token,
                        invitation_token: this.get("invitationToken"),
                      })
                    );
                  case 8:
                    (a = e.sent),
                      this.sendAction("loginSucceeded", a),
                      (e.next = 15);
                    break;
                  case 12:
                    (e.prev = 12),
                      (e.t0 = e.catch(5)),
                      this.sendAction("loginFailed", e.t0.responseJSON.errors);
                  case 15:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[5, 12]]
          );
        })
      ),
    });
  }),
  define("frontend/components/button-edmodo-single-sign-on/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Ri+sY8kV",
      block:
        '{"statements":[["partial","components/button-single-sign-on"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: {
        moduleName:
          "frontend/components/button-edmodo-single-sign-on/template.hbs",
      },
    });
  }),
  define("frontend/components/button-facebook-single-sign-on/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/mixins/button-single-sign-on",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Component.extend(a.default, {
      classNames: ["button-facebook-single-sign-on"],
      userType: null,
      loginTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var n, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2), this.getAuthorization("facebook-oauth2")
                    );
                  case 2:
                    if (((n = e.sent), !t.default.isNone(n))) {
                      e.next = 5;
                      break;
                    }
                    return e.abrupt("return");
                  case 5:
                    return (
                      (e.prev = 5),
                      (e.next = 8),
                      s.default.post(o.default.facebook_callback_path(), {
                        code: n.authorizationCode,
                        redirect_uri: n.redirectUri,
                        invitation_token: this.get("invitationToken"),
                        type: this.get("userType"),
                      })
                    );
                  case 8:
                    (a = e.sent),
                      this.sendAction("loginSucceeded", a),
                      (e.next = 15);
                    break;
                  case 12:
                    (e.prev = 12),
                      (e.t0 = e.catch(5)),
                      this.sendAction("loginFailed", e.t0.responseJSON.errors);
                  case 15:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[5, 12]]
          );
        })
      ),
    });
  }),
  define("frontend/components/button-facebook-single-sign-on/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "vkSPU26l",
      block:
        '{"statements":[["partial","components/button-single-sign-on"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: {
        moduleName:
          "frontend/components/button-facebook-single-sign-on/template.hbs",
      },
    });
  }),
  define("frontend/components/button-google-single-sign-on/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/mixins/button-single-sign-on",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Component.extend(a.default, {
      classNames: ["button-google-single-sign-on"],
      userType: null,
      loginTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var n, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this.getAuthorization("google-oauth2");
                  case 2:
                    if (((n = e.sent), !t.default.isNone(n))) {
                      e.next = 5;
                      break;
                    }
                    return e.abrupt("return");
                  case 5:
                    return (
                      (e.prev = 5),
                      (e.next = 8),
                      s.default.post(o.default.google_callback_path(), {
                        code: n.authorizationCode,
                        redirect_uri: n.redirectUri,
                        invitation_token: this.get("invitationToken"),
                        type: this.get("userType"),
                      })
                    );
                  case 8:
                    (a = e.sent),
                      this.sendAction("loginSucceeded", a),
                      (e.next = 15);
                    break;
                  case 12:
                    (e.prev = 12),
                      (e.t0 = e.catch(5)),
                      this.sendAction("loginFailed", e.t0.responseJSON.errors);
                  case 15:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[5, 12]]
          );
        })
      ),
    });
  }),
  define("frontend/components/button-google-single-sign-on/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "5lfp4wKT",
      block:
        '{"statements":[["partial","components/button-single-sign-on"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: {
        moduleName:
          "frontend/components/button-google-single-sign-on/template.hbs",
      },
    });
  }),
  define("frontend/components/button-group/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "ember-responds-to/mixins/responds-to-resize",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["button-group"],
      classNameBindings: ["hasError:error", "name"],
      hasError: t.default.computed.gte("errors.length", 1),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.makeFastclickable(this.$(".button"));
      },
      didReceiveAttrs: function (e) {
        this._super.apply(this, arguments),
          this._titleHasChanged(e) &&
            this._selectButton(e.newAttrs.value.value);
      },
      _deselectAllButtons: function () {
        this.$('input[type="radio"]').prop("checked", !1),
          this.$(".button").removeClass("selected");
      },
      _selectButton: function (e) {
        this.set("value", e),
          this.$('input[type="radio"][value="' + e + '"]').prop("checked", !0),
          this.$(".button").each(function () {
            var t = $(this);
            t.data("value") === e && t.addClass("selected");
          });
      },
      _titleHasChanged: function (e) {
        var n = e.oldAttrs,
          s = e.newAttrs;
        if (t.default.isPresent(n) && t.default.isPresent(s))
          return (
            "title" === n.name &&
            "title" === s.name &&
            n.value.value !== s.value.value
          );
      },
      actions: {
        buttonPressed: function (e) {
          this._deselectAllButtons(), this._selectButton(e);
        },
      },
    });
  }),
  define("frontend/components/button-group/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "nVL+Jr5L",
      block:
        '{"statements":[["block",["if"],[["get",["label"]]],null,4],["text","\\n"],["block",["if"],[["get",["hasError"]]],null,3],["text","\\n"],["open-element","div",[]],["static-attr","class","buttons"],["flush-element"],["text","\\n"],["block",["each"],[["get",["values"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["input"],null,[["type","name","value"],["radio",["get",["name"]],["get",["value"]]]]],false],["text","\\n    "],["open-element","button",[]],["static-attr","type","button"],["static-attr","class","button"],["dynamic-attr","data-value",["concat",[["get",["value"]]]]],["modifier",["action"],[["get",[null]],"buttonPressed",["get",["value"]]]],["flush-element"],["append",["get",["value"]],false],["close-element"],["text","\\n"]],"locals":["value"]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","error message"],["flush-element"],["append",["unknown",["errors","firstObject"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","error message"],["flush-element"],["append",["unknown",["errors","firstObject","message"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["errors","firstObject","message"]]],null,2,1]],"locals":[]},{"statements":[["text","  "],["open-element","label",[]],["flush-element"],["append",["unknown",["label"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/button-group/template.hbs" },
    });
  }),
  define("frontend/components/button-select-account-type/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["button-select-account-type"],
    });
  }),
  define("frontend/components/button-select-account-type/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "heynKxAt",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","button-select-account-type__name"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","button-select-account-type__description"],["flush-element"],["append",["unknown",["description"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/button-select-account-type/template.hbs",
      },
    });
  }),
  define("frontend/components/button-share-on-social-media/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["button-share-on-social-media"],
    });
  }),
  define("frontend/components/button-share-on-social-media/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "1c/qnkpV",
      block:
        '{"statements":[["block",["dropdown-menu"],null,[["title","eagerRender"],["Share",true]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["social-media-sharing-buttons"],null,[["url","description","title","showLinkToUrl"],[["get",["url"]],["get",["description"]],["get",["title"]],["get",["showLinkToUrl"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/button-share-on-social-media/template.hbs",
      },
    });
  }),
  define("frontend/components/button-share-story-with-classes/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
    "frontend/mixins/story-state",
    "frontend/controllers/upgrade",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["button-share-story-with-classes"],
      analytics: t.default.inject.service(),
      session: t.default.inject.service(),
      commandFactory: t.default.inject.service(),
      sortSchoolClassesBy: ["name:asc"],
      requiredInput: ["story"],
      buttonLabel: t.default
        .computed(function () {
          return "Add to my classes";
        })
        .readOnly(),
      originForPlansPage: t.default
        .computed(function () {
          return o.default.ORIGIN_SHARE_PREMIUM_SUTORI_STORY_WITH_CLASSES;
        })
        .readOnly(),
      showCallToActionToUpgrade: t.default.computed.and(
        "isNotFullyAvailable",
        "story.isSutoriStory"
      ),
      canShareWithSchoolClasses: t.default.computed.or(
        "isOwner",
        "story.authorIsStudentOfCurrentUser",
        "story.isSutoriStory"
      ),
      isOwner: t.default.computed(
        "story.author",
        "session.currentUser",
        function () {
          return this.get("story.author") === this.get("session.currentUser");
        }
      ),
      hasSchoolClassesToShareWith: t.default.computed.notEmpty(
        "shareableSchoolClasses"
      ),
      shareableSchoolClasses: t.default.computed.filterBy(
        "session.currentUser.schoolClasses",
        "isArchived",
        !1
      ),
      sortedShareableSchoolClasses: t.default.computed.sort(
        "shareableSchoolClasses",
        "sortSchoolClassesBy"
      ),
      sortedShareableSchoolClassesNames: t.default.computed.mapBy(
        "sortedShareableSchoolClasses",
        "name"
      ),
      sharedWithSchoolClassesNames: t.default.computed(
        "story.storyShares.@each.sharingScope",
        "story.storyShares.@each.schoolClassId",
        "shareableSchoolClasses.@each.name",
        function () {
          var e = this.get("story.storyShares")
            .filterBy("sharingScope", "school_class")
            .mapBy("schoolClassId");
          return this.get("shareableSchoolClasses")
            .filter(function (t) {
              return e.includes(t.get("id"));
            })
            .mapBy("name");
        }
      ),
      _copyStoryAsOwn: function (e) {
        var t = this.get("commandFactory").createCommand("copy-story");
        return t.execute(e);
      },
      actions: {
        toggleShareWithSchoolClass: function (e, n, s) {
          var o = this,
            a = this.get("shareableSchoolClasses").findBy("name", e),
            i = n ? "school_class" : null,
            l = t.default
              .getOwner(this)
              .lookup("command:share-stories-with-school-class");
          l.execute([this.get("story")], a, i, "story")
            .catch(function () {
              s.get("isDestroyed") ||
                s.send("rollback", o.get("sharedWithSchoolClassesNames"));
            })
            .finally(function () {
              s.get("isDestroyed") || s.set("disabled", !1);
            });
        },
        copyCommunityStoryAsOwn: function () {
          var e = this;
          this.set("waitingForCopyCommunityStoryAsOwn", !0),
            this._copyStoryAsOwn(this.get("story"))
              .then(function (t) {
                e.sendAction("transitionToStory", t);
              })
              .finally(function () {
                e.set("waitingForCopyCommunityStoryAsOwn", !1);
              });
        },
      },
    });
  }),
  define("frontend/components/button-share-story-with-classes/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7aC/JtQa",
      block:
        '{"statements":[["block",["if"],[["get",["showCallToActionToUpgrade"]]],null,10,8]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","p",[]],["static-attr","class","copy-information"],["flush-element"],["text","You need to make a copy before you can share this story with your classes."],["close-element"],["text","\\n      "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"copyCommunityStoryAsOwn"],null],"copy-story","Copy story",["get",["waitingForCopyCommunityStoryAsOwn"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","create a class"]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["static-attr","class","no-school-classes"],["flush-element"],["text","To share this story with your students, you must first "],["block",["link-to"],["schoolClasses"],null,1],["text","."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["check-box-group"],null,[["toggledCheckbox","labels","selectedLabels"],[["helper",["action"],[["get",[null]],"toggleShareWithSchoolClass"],null],["get",["sortedShareableSchoolClassesNames"]],["get",["sharedWithSchoolClassesNames"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["promise-block"],null,[["promise"],[["get",["story","storyShares"]]]],3]],"locals":[]},{"statements":[["block",["if"],[["get",["hasSchoolClassesToShareWith"]]],null,4,2]],"locals":[]},{"statements":[["block",["promise-block"],null,[["promise"],[["get",["session","currentUser","schoolClasses"]]]],5]],"locals":[]},{"statements":[["block",["if"],[["get",["canShareWithSchoolClasses"]]],null,6,0]],"locals":[]},{"statements":[["block",["dropdown-menu"],null,[["title","eagerRender"],[["get",["buttonLabel"]],true]],7]],"locals":[]},{"statements":[["append",["unknown",["buttonLabel"]],false]],"locals":[]},{"statements":[["text","  "],["block",["link-to"],["upgrade",["helper",["query-params"],null,[["origin"],[["get",["originForPlansPage"]]]]]],[["class"],["button-add-to-my-classes"]],9],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/button-share-story-with-classes/template.hbs",
      },
    });
  }),
  define("frontend/components/button-submit-story-to-school-class/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
    "ember-concurrency",
    "frontend/mixins/fastclickable",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, o.default, {
      tagName: ["button"],
      classNames: ["button-submit-story-to-school-class"],
      classNameBindings: ["hasStoryShare:is-pressed"],
      attributeBindings: ["isSharedWithTheWholeClass:disabled"],
      commandFactory: t.default.inject.service(),
      requiredInput: ["story", "schoolClass"],
      didInsertElement: function () {
        this._super.apply(this, arguments), this.makeFastclickable(this.$());
      },
      hasStoryShare: t.default.computed(
        "story.storyShares.@each.{schoolClass,isDeleted}",
        function () {
          return this.get("story").hasStoryShareForSchoolClass(
            this.get("schoolClass")
          );
        }
      ),
      isSharedWithTheWholeClass: t.default.computed(
        "story.storyShares.@each.schoolClass",
        function () {
          return this.get("story").isSharedWithTheWholeClass(
            this.get("schoolClass")
          );
        }
      ),
      submitToSchoolClassTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          var t, n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("commandFactory").createCommand(
                        "share-stories-with-school-class"
                      )),
                      (n = this.get("hasStoryShare") ? null : "teacher"),
                      (e.next = 4),
                      t.execute(
                        [this.get("story")],
                        this.get("schoolClass"),
                        n,
                        "story"
                      )
                    );
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      click: function () {
        this.get("submitToSchoolClassTask").perform();
      },
      actions: {
        submitToSchoolClass: function (e) {
          var t = this.get("commandFactory").createCommand(
              "share-stories-with-school-class"
            ),
            n = e ? "teacher" : null;
          return t.execute(
            [this.get("story")],
            this.get("schoolClass"),
            n,
            "story"
          );
        },
      },
    });
  }),
  define("frontend/components/button-submit-story-to-school-class/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "+qqOho7u",
      block:
        '{"statements":[["append",["unknown",["schoolClass","teacher","formalName"]],false],["text"," - "],["append",["unknown",["schoolClass","subject"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/button-submit-story-to-school-class/template.hbs",
      },
    });
  }),
  define("frontend/components/call-to-action-sign-up/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["call-to-action-sign-up"],
      session: t.default.inject.service(),
      route: "registration",
      showCallToAction: t.default.computed.reads("session.isGuestUser"),
    });
  }),
  define("frontend/components/call-to-action-sign-up/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "XbOuebcm",
      block:
        '{"statements":[["block",["if"],[["get",["showCallToAction"]]],null,1]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","    "],["yield","default"],["text","\\n"]],"locals":[]},{"statements":[["block",["call-to-action"],null,[["route"],[["get",["route"]]]],0]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/call-to-action-sign-up/template.hbs",
      },
    });
  }),
  define("frontend/components/call-to-action-upgrade/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["call-to-action-upgrade"],
      session: t.default.inject.service(),
      hasOrigin: t.default.computed.notEmpty("origin"),
      canSubscribe: t.default.computed.reads(
        "session.currentUser.canSubscribe"
      ),
      showCallToAction: t.default.computed.or(
        "canSubscribe",
        "session.isGuestUser"
      ),
      linkTarget: t.default.computed("canSubscribe", function () {
        return this.get("canSubscribe") ? "upgrade" : "registration";
      }),
      linkCssClass: t.default.computed("canSubscribe", function () {
        var e = "button-call-to-action";
        return this.get("canSubscribe") ? e + "-upgrade" : e + "-sign-up";
      }),
      queryParams: t.default.computed("origin", function () {
        var e = {};
        return this.get("hasOrigin") && (e.origin = this.get("origin")), e;
      }),
    });
  }),
  define("frontend/components/call-to-action-upgrade/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "W/9MFfaz",
      block:
        '{"statements":[["block",["if"],[["get",["showCallToAction"]]],null,3]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","      Sign up now\\n"]],"locals":[]},{"statements":[["text","      "],["yield","default"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["canSubscribe"]]],null,1,0]],"locals":[]},{"statements":[["block",["call-to-action"],null,[["route","queryParams","class"],[["get",["linkTarget"]],["get",["queryParams"]],["get",["linkCssClass"]]]],2]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/call-to-action-upgrade/template.hbs",
      },
    });
  }),
  define("frontend/components/call-to-action/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    function s(e) {
      if (Array.isArray(e)) {
        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
        return n;
      }
      return Array.from(e);
    }
    e.default = t.default.Component.extend(n.default, {
      classNames: ["call-to-action"],
      tagName: "a",
      attributeBindings: ["href"],
      routingProxy: t.default.inject.service(),
      analytics: t.default.inject.service(),
      requiredInput: ["route"],
      queryParams: {},
      router: t.default.computed.reads("routingProxy.router"),
      routeArguments: t.default.computed("route", "queryParams", function () {
        var e = [this.get("route")];
        return e.push({ queryParams: this.get("queryParams") }), e;
      }),
      href: t.default.computed("router", "routeArguments", function () {
        var e;
        return (e = this.get("router")).generate.apply(
          e,
          s(this.get("routeArguments"))
        );
      }),
      click: function (e) {
        var t;
        e.preventDefault(),
          this.get("analytics").trackCallToActionEvent(
            this.$().text().trim(),
            this.get("queryParams")
          ),
          (t = this.get("router")).transitionTo.apply(
            t,
            s(this.get("routeArguments"))
          );
      },
    });
  }),
  define("frontend/components/call-to-action/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "DTAAe6Kk",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/call-to-action/template.hbs" },
    });
  }),
  define("frontend/components/check-box-group/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["check-box-group"],
      classNameBindings: ["hasError:error"],
      selectedLabels: [],
      options: t.default.computed(
        "labels.[]",
        "selectedLabels.[]",
        function () {
          var e = this,
            n = [];
          return (
            this.get("labels").forEach(function (s) {
              n.push(
                t.default.Object.create({
                  label: s,
                  selected: (e.get("selectedLabels") || []).includes(s),
                })
              );
            }),
            n
          );
        }
      ),
      hasError: t.default.computed.notEmpty("errors"),
      actions: {
        toggled: function (e, t, n) {
          t
            ? this.get("selectedLabels").pushObject(e)
            : this.set("selectedLabels", this.get("selectedLabels").without(e)),
            this.sendAction("toggledCheckbox", e, t, n);
        },
      },
    });
  }),
  define("frontend/components/check-box-group/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "KT77T6RT",
      block:
        '{"statements":[["block",["if"],[["get",["title"]]],null,2],["text","\\n"],["block",["each"],[["get",["options"]]],null,1],["text","\\n"],["block",["each"],[["get",["errors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","error message"],["flush-element"],["append",["get",["error"]],false],["close-element"],["text","\\n"]],"locals":["error"]},{"statements":[["text","  "],["append",["helper",["check-box"],null,[["action","label","checked"],["toggled",["get",["option","label"]],["get",["option","selected"]]]]],false],["text","\\n"]],"locals":["option"]},{"statements":[["text","  "],["open-element","label",[]],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/check-box-group/template.hbs" },
    });
  }),
  define("frontend/components/check-box/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "frontend/mixins/tooltipable",
    "frontend/utils/utility",
    "frontend/utils/dom",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["component-check-box"],
      classNameBindings: [
        "name",
        "label::no-label",
        "checked",
        "disabled",
        "semiSelected",
        "toggleOnClickOnLabel",
      ],
      isWaiting: !1,
      label: "",
      disabled: !1,
      toggleOnClickOnLabel: !0,
      semiSelected: !1,
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.makeFastclickable(this.$(".checkbox")),
          this._setupTooltip();
      },
      click: function (e) {
        (!this.get("toggleOnClickOnLabel") &&
          (0, a.isInside)(e.target, this.$(".label")[0])) ||
          this.send("toggle");
      },
      hasLabel: t.default.computed.notEmpty("label"),
      setupTooltip: t.default.observer("disabled", function () {
        this._setupTooltip();
      }),
      _setupTooltip: function () {
        this.get("disabled")
          ? this.makeTooltipable(this.$(".checkbox"))
          : this.removeTooltipable(this.$(".checkbox"));
      },
      actions: {
        toggle: function () {
          this.get("disabled") ||
            this.get("isWaiting") ||
            (this.set("isWaiting", !0),
            this.toggleProperty("checked"),
            this.sendAction(
              "action",
              this.get("label"),
              this.get("checked"),
              this
            ));
        },
        rollback: function (e) {
          this.toggleProperty("checked"),
            e &&
              o.default.setElementMembershipInList(
                e,
                this.get("label"),
                this.get("checked")
              );
        },
      },
    });
  }),
  define("frontend/components/check-box/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Z3vNLsKu",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","checkbox"],["static-attr","title",""],["dynamic-attr","data-title",["concat",[["unknown",["disabledTooltip"]]]]],["static-attr","data-container","body"],["static-attr","data-placement","top"],["flush-element"],["close-element"],["text","\\n\\n"],["block",["if"],[["has-block","default"]],null,3,2],["text","\\n"],["block",["each"],[["get",["errors"]]],null,0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","message error"],["flush-element"],["append",["get",["error"]],false],["close-element"],["text","\\n"]],"locals":["error"]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","label"],["flush-element"],["append",["unknown",["label"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasLabel"]]],null,1]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","label"],["flush-element"],["yield","default"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/check-box/template.hbs" },
    });
  }),
  define("frontend/components/collaboration-lock-wrapper/component", [
    "exports",
    "ember",
  ], function (e, t) {
    var n = 140;
    e.default = t.default.Component.extend({
      classNames: ["collaboration-lock-wrapper"],
      classNameBindings: ["isLocked", "compactView"],
      compactView: !1,
      lockedByUser: null,
      lockedText: "",
      isLocked: t.default.computed.notEmpty("lockedByUser"),
      lockChanged: t.default.observer("isLocked", function () {
        var e = this.$().outerHeight();
        this.set("compactView", e < n),
          this.$().css("height", this.get("isLocked") ? e + "px" : "");
      }),
    });
  }),
  define("frontend/components/collaboration-lock-wrapper/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "DmOk27I9",
      block:
        '{"statements":[["block",["if"],[["get",["isLocked"]]],null,1,0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["user-avatar"],null,[["user"],[["get",["lockedByUser"]]]]],false],["text","\\n  "],["open-element","span",[]],["static-attr","class","name"],["flush-element"],["append",["unknown",["lockedByUser","fullName"]],false],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","user-is-editing"],["flush-element"],["append",["unknown",["lockedText"]],false],["close-element"],["text","\\n  "],["partial","helpers/loader"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName:
          "frontend/components/collaboration-lock-wrapper/template.hbs",
      },
    });
  }),
  define("frontend/components/collaborator-tag/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["collaborator-tag"],
      classNameBindings: ["isPendingInvitation:pending-invitation"],
      userIsDefined: t.default.computed.bool("user"),
      isPendingInvitation: t.default.computed.not("userIsDefined"),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.makeFastclickable(this.$(".button-remove"));
      },
      actions: {
        delete: function () {
          this.get("userIsDefined")
            ? this.sendAction("action", this.get("user"))
            : this.sendAction("action", this.get("email"));
        },
      },
    });
  }),
  define("frontend/components/collaborator-tag/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "mTnj5MG7",
      block:
        '{"statements":[["block",["if"],[["get",["userIsDefined"]]],null,0],["open-element","span",[]],["static-attr","class","collaborator-label"],["flush-element"],["append",["unknown",["label"]],false],["close-element"],["text","\\n"],["open-element","button",[]],["static-attr","class","button-remove"],["modifier",["action"],[["get",[null]],"delete"]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["user-avatar"],null,[["user"],[["get",["user"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/collaborator-tag/template.hbs" },
    });
  }),
  define("frontend/components/copyable-input-field/component", [
    "exports",
    "ember",
    "npm:clipboard",
    "ember-concurrency",
  ], function (e, t, n, s) {
    var o = 2e3;
    e.default = t.default.Component.extend({
      classNames: ["copyable-input-field"],
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments);
        var s = new n.default(this.$(".button-copy")[0], {
          target: function () {
            return e.$('input[type="text"]')[0];
          },
        });
        s.on("success", function () {
          t.default.run(function () {
            e.sendAction("copied"), e.get("displayTooltipTask").perform();
          });
        });
      },
      displayTooltipTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      this.set("tooltipVisible", !0),
                      (e.next = 3),
                      (0, s.timeout)(o)
                    );
                  case 3:
                    this.set("tooltipVisible", !1);
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).restartable(),
    });
  }),
  define("frontend/components/copyable-input-field/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4FHiFahC",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","wrapper-input-field"],["flush-element"],["text","\\n  "],["append",["helper",["input"],null,[["type","readonly","value"],["text",true,["get",["text"]]]]],false],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["async-button-with-tooltip"],null,[["name","label","tooltip","tooltipTrigger","tooltipPlacement","tooltipVisible"],["copy","Copy",["get",["tooltipWhenCopied"]],"manual","bottom",["get",["tooltipVisible"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/copyable-input-field/template.hbs",
      },
    });
  }),
  define("frontend/components/create-new-item/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "frontend/mixins/on-click-outside",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, n.default, {
      classNames: ["create-new-item"],
      didInsertElement: function () {
        this._super(),
          this.makeFastclickable(this.$(".button-create-new-item"));
      },
      dialogClass: t.default.computed("dialogCreateNewItemSide", function () {
        return "dialog-create-new-item " + this.get("dialogCreateNewItemSide");
      }),
      actions: {
        toggleDialogCreateNewItem: function () {
          var e = this;
          this.toggleProperty("showDialogCreateNewItem"),
            this.get("showDialogCreateNewItem") &&
              (t.default.run.scheduleOnce("afterRender", function () {
                e.makeFastclickable(e.$(".dialog-create-new-item li"));
              }),
              this.onClickOutside(function () {
                e.set("showDialogCreateNewItem", !1);
              }));
        },
        createNewItem: function (e) {
          this.sendAction("createNewItem", e),
            this.set("showDialogCreateNewItem", !1);
        },
      },
    });
  }),
  define("frontend/components/create-new-item/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "6uWpBJ1d",
      block:
        '{"statements":[["open-element","button",[]],["static-attr","class","button-create-new-item"],["modifier",["action"],[["get",[null]],"toggleDialogCreateNewItem"]],["flush-element"],["close-element"],["text","\\n"],["block",["liquid-if"],[["get",["showDialogCreateNewItem"]]],[["class"],[["get",["dialogClass"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","aside",[]],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","arrow-wrapper"],["flush-element"],["open-element","span",[]],["static-attr","class","arrow"],["flush-element"],["close-element"],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-quote"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","quote"]],["flush-element"],["text","Text"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-image"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","image"]],["flush-element"],["text","Image"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-video"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","video"]],["flush-element"],["text","Video"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-audio"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","audio"]],["flush-element"],["text","Audio"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-didyouknow"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","didyouknow"]],["flush-element"],["text","Did you know?"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","ul",[]],["flush-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-quiz-question-multiple-choice"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","quiz-question-multiple-choice"]],["flush-element"],["text","Multiple choice"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-quiz-question-matching"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","quiz-question-matching"]],["flush-element"],["text","Drag & drop"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-forum"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","forum"]],["flush-element"],["text","Forum"],["close-element"],["text","\\n      "],["open-element","li",[]],["static-attr","class","button-create-new-chapter-title"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"createNewItem","chapter-title"]],["flush-element"],["text","Heading"],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/create-new-item/template.hbs" },
    });
  }),
  define("frontend/components/demo-video/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["demo-video"],
      demoSources: t.default
        .computed(function () {
          return [
            "https://d1ox703z8b11rg.cloudfront.net/videos/premium-20145c5dc75b865594bd63cba6a0ea9b.webm",
            "https://d1ox703z8b11rg.cloudfront.net/videos/premium-5a5e10a1eae29d718443e5f8baa518d0.mp4",
            "https://d1ox703z8b11rg.cloudfront.net/videos/premium-de846b41f48b948facb386bf06510c61.ogg",
          ];
        })
        .readOnly(),
    });
  }),
  define("frontend/components/demo-video/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "hTCk9mFj",
      block:
        '{"statements":[["append",["helper",["html5-video"],null,[["sources","preload","autoplay","muted"],[["get",["demoSources"]],"auto",true,true]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/demo-video/template.hbs" },
    });
  }),
  define("frontend/components/dropdown-menu/component", [
    "exports",
    "ember",
    "frontend/mixins/on-click-outside",
    "frontend/mixins/fastclickable",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["dropdown-menu"],
      classNameBindings: ["dropdownActive:dropdown-open", "eagerRender"],
      withCaret: !1,
      dropdownActive: !1,
      eagerRender: !1,
      mouseEnter: !1,
      on: "hover",
      disabled: !1,
      showDropdownElement: t.default.computed(
        "eagerRender",
        "dropdownActive",
        "disabled",
        function () {
          return (
            !this.get("disabled") &&
            (this.get("eagerRender") || this.get("dropdownActive"))
          );
        }
      ),
      onHover: t.default.computed.equal("on", "hover"),
      onClick: t.default.computed.equal("on", "click"),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.makeFastclickable(this.$(".dropdown-toggler")),
          this._closeOnClickOutside(),
          this.get("onHover") && this._closeOnHoverOutside();
      },
      _closeOnClickOutside: function () {
        var e = this;
        this.onClickOutside(function () {
          e.set("dropdownActive", !1);
        });
      },
      _closeOnHoverOutside: function () {
        var e = this;
        this.$().on("mouseleave", function () {
          t.default.run(function () {
            e.set("dropdownActive", !1);
          });
        });
      },
      actions: {
        toggleDropdown: function () {
          this.set("dropdownActive", !0);
        },
      },
    });
  }),
  define("frontend/components/dropdown-menu/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "u2tx1plc",
      block:
        '{"statements":[["block",["if"],[["get",["onHover"]]],null,3,2],["text","\\n"],["block",["if"],[["get",["showDropdownElement"]]],null,0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","dropdown-element"],["flush-element"],["text","\\n    "],["yield","default"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","button",[]],["dynamic-attr","class",["concat",["dropdown-toggler ",["helper",["if"],[["get",["withCaret"]],"with-caret"],null]," ",["helper",["if"],[["get",["dropdownActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["disabled"]],null],["modifier",["action"],[["get",[null]],"toggleDropdown"]],["flush-element"],["text","\\n    "],["append",["unknown",["title"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["onClick"]]],null,1]],"locals":[]},{"statements":[["text","  "],["open-element","button",[]],["dynamic-attr","class",["concat",["dropdown-toggler ",["helper",["if"],[["get",["withCaret"]],"with-caret"],null]," ",["helper",["if"],[["get",["dropdownActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["disabled"]],null],["modifier",["action"],[["get",[null]],"toggleDropdown"],[["on"],["mouseEnter"]]],["modifier",["action"],[["get",[null]],"toggleDropdown"],[["on"],["touchStart"]]],["flush-element"],["text","\\n    "],["append",["unknown",["title"]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/dropdown-menu/template.hbs" },
    });
  }),
  define("frontend/components/dynamic-render", [
    "exports",
    "ember-dynamic-render/components/dynamic-render",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/editable-audio/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["editable-audio"],
      classNameBindings: ["hasAudio", "isEditing"],
      hasAudio: t.default.computed.notEmpty("audioFile"),
      captionNotBlank: t.default.computed.notEmpty("audioFile.caption"),
      showCaption: t.default.computed.or("isEditing", "captionNotBlank"),
      actions: {
        showAudioUploader: function () {
          this.set("audioUploaderModalVisible", !0);
        },
        audioUploaded: function (e) {
          return this.get("audioUploaded")(e);
        },
        deleteAudio: function () {
          return this.get("audioDeleted")();
        },
      },
    });
  }),
  define("frontend/components/editable-audio/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "Hc4xTEHm",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","audio-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasAudio"]]],null,5,1],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showErrors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["validation-error-messages"],null,[["errors"],[["get",["errors"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","button-show-audio-uploader"],["modifier",["action"],[["get",[null]],"showAudioUploader"]],["flush-element"],["text","Add an audio"],["close-element"],["text","\\n\\n"],["text","    "],["append",["helper",["modal-box"],null,[["action","formComponentPath","title","closeOnClickOutside","isActive"],[["helper",["action"],[["get",[null]],"audioUploaded"],null],"modals/audio-uploader","Media uploader",false,["get",["audioUploaderModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","button",[]],["static-attr","class","button-delete-audio"],["modifier",["action"],[["get",[null]],"deleteAudio"]],["flush-element"],["text","Remove"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["editable-text"],null,[["isEditing","model","text","placeholder","class"],[["get",["isEditing"]],["get",["audioFile"]],["get",["audioFile","caption"]],"Add an optional title for the audio trackâ¦","audio-caption"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showCaption"]]],null,3]],"locals":[]},{"statements":[["block",["audio-player"],null,[["src"],[["get",["audioFile","url"]]]],4],["text","\\n"],["block",["if"],[["get",["isEditing"]]],null,2]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/editable-audio/template.hbs" },
    });
  }),
  define("frontend/components/editable-image/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["editable-image"],
      classNameBindings: ["hasImage", "isEditing"],
      isEditable: !0,
      withCaption: !1,
      showErrors: !1,
      errors: [],
      overflowPolicy: "contain",
      maxHeight: null,
      lightbox: !0,
      labelButtonUpload: "Add an image",
      labelButtonDelete: "Remove",
      uploaderModalCustomProperties: t.default.computed("sizes", function () {
        return { sizes: this.get("sizes") };
      }),
      hasImage: t.default.computed.notEmpty("imageFile"),
      showEditableCaption: t.default.computed.and("isEditing", "withCaption"),
      actions: {
        showImageUploader: function () {
          this.set("imageUploaderModalVisible", !0),
            this.sendAction("uploaderOpened");
        },
        deleteImage: function () {
          return this.get("imageDeleted")();
        },
        imageUploaded: function (e) {
          return this.get("imageUploaded")(e);
        },
        imageUploaderClosed: function () {
          this.sendAction("uploaderClosed");
        },
        captionFocusedIn: function () {
          this.sendAction("captionFocusedIn");
        },
        captionFocusedOut: function () {
          this.sendAction("captionFocusedOut");
        },
      },
    });
  }),
  define("frontend/components/editable-image/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "+uWrSVUP",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","image-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasImage"]]],null,5,2],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showErrors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["validation-error-messages"],null,[["errors"],[["get",["errors"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","button-show-image-uploader"],["modifier",["action"],[["get",[null]],"showImageUploader"]],["flush-element"],["append",["unknown",["labelButtonUpload"]],false],["close-element"],["text","\\n\\n"],["text","    "],["append",["helper",["modal-box"],null,[["action","closed","formComponentPath","title","closeOnClickOutside","isActive","customProperties"],[["helper",["action"],[["get",[null]],"imageUploaded"],null],["helper",["action"],[["get",[null]],"imageUploaderClosed"],null],"modals/image-uploader","Media uploader",false,["get",["imageUploaderModalVisible"]],["get",["uploaderModalCustomProperties"]]]]],false],["text","\\n  "]],"locals":[]},{"statements":[["block",["if"],[["get",["isEditable"]]],null,1]],"locals":[]},{"statements":[["text","      "],["open-element","button",[]],["static-attr","class","button-delete-image"],["modifier",["action"],[["get",[null]],"deleteImage"]],["flush-element"],["append",["unknown",["labelButtonDelete"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["editable-text"],null,[["focusedIn","focusedOut","isEditing","model","errors","text","placeholder","class"],[["helper",["action"],[["get",[null]],"captionFocusedIn"],null],["helper",["action"],[["get",[null]],"captionFocusedOut"],null],true,["get",["imageFile"]],["get",["imageFile","errors","caption"]],["get",["imageFile","caption"]],"Add credits for the image","caption"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy","maxHeight","lightbox"],[["get",["imageFile"]],["get",["overflowPolicy"]],["get",["maxHeight"]],["get",["lightbox"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["showEditableCaption"]]],null,4],["text","\\n"],["block",["if"],[["get",["isEditing"]]],null,3]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/editable-image/template.hbs" },
    });
  }),
  define("frontend/components/editable-text/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["editable-text"],
      classNameBindings: [
        "withError:error",
        "isEditing:is-editing",
        "isFocused:is-focused",
        "isRichTextContent:is-rich-text",
      ],
      session: t.default.inject.service(),
      placeholder: "",
      withNotes: !1,
      isFocused: !1,
      showErrors: !0,
      hasError: t.default.computed.notEmpty("errorsContent"),
      withError: t.default.computed.and("showErrors", "hasError"),
      errorsContent: t.default.computed(
        "errors.content.[]",
        "errors.[]",
        function () {
          return t.default.isPresent(this.get("errors.content"))
            ? this.get("errors.content")
            : this.get("errors");
        }
      ),
      isRichTextContent: t.default.computed("model", function () {
        return "augmented-text" === this.get("model.constructor.modelName");
      }),
      textWithNewlines: t.default.computed("text", function () {
        var e = this.get("text") || "";
        return t.default.String.htmlSafe(e.replace(/\n/g, "<br>"));
      }),
      actions: {
        focusChanged: function (e) {
          this.set("isFocused", e),
            e ? this.sendAction("focusedIn") : this.sendAction("focusedOut");
        },
      },
    });
  }),
  define("frontend/components/editable-text/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "W7EWLU4C",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isRichTextContent"]]],null,4,3],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showErrors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["validation-error-messages"],null,[["errors"],[["get",["errors"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["sanitize-html"],[["get",["textWithNewlines"]],"justNewlines"],null],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["inplace-editor"],null,[["focusChanged","submitAction","model","text","placeholder"],[["helper",["action"],[["get",[null]],"focusChanged"],null],["get",["submitAction"]],["get",["model"]],["get",["text"]],["get",["placeholder"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isEditing"]]],null,2,1]],"locals":[]},{"statements":[["text","    "],["append",["helper",["rich-text-content"],null,[["focusChanged","model","isEditing","placeholder","withNotes","spellcheck","isSimulation"],[["helper",["action"],[["get",[null]],"focusChanged"],null],["get",["model"]],["get",["isEditing"]],["get",["placeholder"]],["get",["withNotes"]],true,["get",["isSimulation"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/editable-text/template.hbs" },
    });
  }),
  define("frontend/components/editable-video/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["editable-video"],
      classNameBindings: ["hasVideo"],
      hasVideo: t.default.computed.notEmpty("video"),
      actions: {
        showVideoUploader: function () {
          this.set("videoUploaderModalVisible", !0);
        },
        videoUploaded: function (e) {
          return this.get("videoUploaded")(e);
        },
        deleteVideo: function () {
          return this.get("videoDeleted")();
        },
      },
    });
  }),
  define("frontend/components/editable-video/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "q8uWSngj",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","video-container"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasVideo"]]],null,3,1],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showErrors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["validation-error-messages"],null,[["errors"],[["get",["errors"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","button-show-video-uploader"],["modifier",["action"],[["get",[null]],"showVideoUploader"]],["flush-element"],["text","Add a video"],["close-element"],["text","\\n\\n"],["text","    "],["append",["helper",["modal-box"],null,[["action","formComponentPath","title","closeOnClickOutside","isActive"],[["helper",["action"],[["get",[null]],"videoUploaded"],null],"modals/video-uploader","Media uploader",false,["get",["videoUploaderModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","button",[]],["static-attr","class","button-delete-video"],["modifier",["action"],[["get",[null]],"deleteVideo"]],["flush-element"],["text","Remove"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["render-video"],null,[["video"],[["get",["video"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["isEditing"]]],null,2]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/editable-video/template.hbs" },
    });
  }),
  define("frontend/components/education-use-cases/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["education-use-cases"],
      tagName: "section",
      carouselResponsive: t.default
        .computed(function () {
          return [
            { breakpoint: 1030, settings: { slidesToShow: 2 } },
            { breakpoint: 660, settings: { slidesToShow: 1 } },
          ];
        })
        .readOnly(),
      actions: {
        selectTab: function (e) {
          var n = this;
          this.set("topic", e),
            t.default.run.scheduleOnce("afterRender", function () {
              var e = n.$(".slick-carousel");
              t.default.isPresent(e) && e.slick("setPosition");
            });
        },
      },
    });
  }),
  define("frontend/components/education-use-cases/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7LdMa7R0",
      block:
        '{"statements":[["block",["heading-display"],null,null,10],["text","\\n"],["block",["promise-block"],null,[["promise"],[["get",["stories"]]]],8]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","div",[]],["flush-element"],["text","\\n              "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["tab","stories"]]],null,0]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","education-use-cases__explanation"],["flush-element"],["append",["unknown",["tab","explanation"]],false],["close-element"],["text","\\n\\n"],["block",["slick-carousel"],null,[["slidesToShow","infinite","responsive"],[3,false,["get",["carouselResponsive"]]]],1]],"locals":[]},{"statements":[["block",["tabs","tabpanel"],[["get",["tab","id"]]],null,2]],"locals":["tab"]},{"statements":[["text","          "],["append",["unknown",["tab","label"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["tablist","tab"],[["get",["tab","id"]]],[["on-select"],[["helper",["action"],[["get",[null]],"selectTab"],null]]],4]],"locals":["tab"]},{"statements":[["block",["each"],[["get",["tabObjects"]]],null,5]],"locals":["tablist"]},{"statements":[["block",["tabs","tablist"],null,null,6],["text","\\n"],["block",["each"],[["get",["tabObjects"]]],null,3]],"locals":["tabs"]},{"statements":[["block",["ivy-tabs"],null,[["selection"],[["get",["topic"]]]],7]],"locals":[]},{"statements":[["text","    Bring any topic to life\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,null,9]],"locals":["h"]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/education-use-cases/template.hbs",
      },
    });
  }),
  define("frontend/components/ember-wormhole", [
    "exports",
    "ember-wormhole/components/ember-wormhole",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/error-notification/component", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-resize",
    "ember-component-inbound-actions/inbound-actions",
  ], function (e, t, n, s) {
    var o = 300;
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["error-notification"],
      classNameBindings: ["isActive", "isActivating"],
      analytics: t.default.inject.service(),
      logger: t.default.inject.service(),
      isActive: !1,
      isActivating: !1,
      _centerPopup: t.default.on("didInsertElement", "resize", function () {
        var e = this;
        t.default.run.scheduleOnce("afterRender", function () {
          var t = e.$(".notification-body");
          if (t) {
            var n = $(window).width(),
              s = t.width();
            t.css("left", (n - s) / 2);
          }
        });
      }),
      askForRefresh: t.default.computed.equal("requestedAction", "refresh"),
      askForDashboard: t.default.computed.equal("requestedAction", "dashboard"),
      fadeIn: function () {
        var e = this;
        t.default.run.later(function () {
          e.setProperties({ isActive: !0, isActivating: !1 });
        }, o);
      },
      actions: {
        showMessage: function (e) {
          this.setProperties({
            isActivating: !0,
            message: e,
            requestedAction: "dashboard",
          }),
            this.fadeIn();
        },
        showBackendMessage: function (e, t) {
          var n =
            arguments.length <= 2 || void 0 === arguments[2]
              ? {}
              : arguments[2];
          this.setProperties({
            isActivating: !0,
            message: e,
            requestedAction: "refresh",
          }),
            this.get("analytics").trackEvent("Backend Error", {
              Message: e,
              Status: t,
              "Model id": n.modelId,
              Action: n.action,
              "Error field": n.errorField,
              "Error messages": n.errorMessages,
            }),
            this.get("logger").exception(new Error("Backend error: " + e), {
              message: e,
              status: t,
              modelId: n.modelId,
              action: n.action,
              errorField: n.errorField,
              errorMessages: n.errorMessages,
            }),
            this.fadeIn();
        },
        refreshPage: function () {
          document.location = document.location;
        },
      },
    });
  }),
  define("frontend/components/error-notification/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "5if+wIU5",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","notification-body"],["flush-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["append",["unknown",["message"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["askForRefresh"]]],null,2,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","small",[]],["flush-element"],["text","Please go back to your dashboard by "],["open-element","a",[]],["static-attr","href","/"],["flush-element"],["text","clicking here"],["close-element"],["close-element"],["text","\\n  "]],"locals":[]},{"statements":[["block",["if"],[["get",["askForDashboard"]]],null,0]],"locals":[]},{"statements":[["text","    "],["open-element","h4",[]],["flush-element"],["text","Please refresh your page"],["close-element"],["text","\\n    "],["open-element","small",[]],["flush-element"],["text","or "],["open-element","a",[]],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"refreshPage"]],["flush-element"],["text","click here"],["close-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/error-notification/template.hbs",
      },
    });
  }),
  define("frontend/components/expandable-list/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["component-expandable-list"],
      classNameBindings: ["hasExpandButton"],
      isExpanded: !1,
      maximalNumberOfElements: t.default.computed.reads(
        "totalNumberOfElements"
      ),
      showScrollBar: t.default.computed(
        "numberOfElementsShown",
        "totalNumberOfElements",
        function () {
          return (
            this.get("numberOfElementsShown") <
            this.get("totalNumberOfElements")
          );
        }
      ),
      hasExpandButton: t.default.computed(
        "initialNumberOfElements",
        "totalNumberOfElements",
        function () {
          return (
            this.get("initialNumberOfElements") <
            this.get("totalNumberOfElements")
          );
        }
      ),
      numberOfElementsShown: t.default.computed(
        "maximalNumberOfElements",
        "initialNumberOfElements",
        "totalNumberOfElements",
        "isExpanded",
        function () {
          return this.get("isExpanded")
            ? Math.min(
                this.get("maximalNumberOfElements"),
                this.get("totalNumberOfElements")
              )
            : Math.min(
                this.get("initialNumberOfElements"),
                this.get("totalNumberOfElements")
              );
        }
      ),
      didInsertElement: function () {
        this.makeFastclickable(this.$()), this.send("showLess");
      },
      resetScroll: t.default.observer("focusedElement", function () {
        var e = this;
        t.default.run.scheduleOnce("afterRender", function () {
          e.$("ul").scrollTop(0);
        });
      }),
      updateBoxHeight: t.default.on(
        "didInsertElement",
        t.default.observer("numberOfElementsShown", function () {
          t.default.run(this, function () {
            t.default.run.schedule("afterRender", this, function () {
              var e = this.$("li");
              if (!t.default.isEmpty(e)) {
                var n = e.first(),
                  s = n.outerHeight() * this.get("numberOfElementsShown");
                this.$("ul").css("max-height", s + "px");
              }
            });
          });
        })
      ),
      actions: {
        showMore: function () {
          this.set("isExpanded", !0),
            this.get("showScrollBar") &&
              this.$("ul").css("overflow-y", "scroll");
        },
        showLess: function () {
          this.set("isExpanded", !1),
            this.$("ul").css("overflow-y", "hidden"),
            this.resetScroll();
        },
      },
    });
  }),
  define("frontend/components/expandable-list/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "KU38IsY7",
      block:
        '{"statements":[["open-element","ul",[]],["flush-element"],["yield","default"],["close-element"],["text","\\n"],["block",["if"],[["get",["hasExpandButton"]]],null,2]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","show-more"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"showMore"]],["flush-element"],["text","moreâ¦"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","show-less"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"showLess"]],["flush-element"],["text","lessâ¦"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isExpanded"]]],null,1,0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/expandable-list/template.hbs" },
    });
  }),
  define("frontend/components/explanatory-notes-popover/component", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-resize",
    "frontend/mixins/responds-to-element-resize",
    "frontend/mixins/fastclickable",
    "frontend/mixins/floatable",
    "frontend/mixins/on-click-outside",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Component.extend(
      n.default,
      s.default,
      o.default,
      a.default,
      i.default,
      {
        classNames: ["explanatory-notes-popover"],
        showPopover: !1,
        store: t.default.inject.service(),
        imageMaxHeight: t.default
          .computed(function () {
            return 150;
          })
          .readOnly(),
        popoverOrientation: t.default
          .computed(function () {
            var e = $(window),
              t = this.get("$activeNote"),
              n = t.offset().top - e.scrollTop();
            return n <= e.height() / 2 ? "bottom" : "top";
          })
          .volatile(),
        didInsertElement: function () {
          this._super.apply(this, arguments),
            this.sendAction("initializeAction", this);
        },
        repositionNoteOnResize: t.default.on(
          "resize",
          "elementResized",
          function () {
            this._positionNote();
          }
        ),
        _positionNote: t.default.observer("$activeNote", function () {
          var e = this;
          t.default.run.schedule("afterRender", function () {
            e.get("showPopover") && e._positionPopover();
          });
        }),
        _positionPopover: function () {
          var e = this.$(".popover");
          if (0 !== e.length) {
            this.setupResizeSensor(e);
            var t = this.get("$editor"),
              n = this.get("$activeNote"),
              s = "top" === this.get("popoverOrientation"),
              o = n.offset().top - t.offset().top - 3,
              a = s ? -e.outerHeight() : n.outerHeight();
            e.css("top", o + a);
            var i = n.offset().left - t.offset().left,
              l = i + n.outerWidth() / 2;
            e.css("left", l - e.outerWidth() / 2),
              this.positionInsideWindowBounds(e);
            var r = n.offset().left + n.outerWidth() / 2,
              u = r - e.offset().left - 1.5 * e.find(".arrow-wrapper").width();
            e.find(".arrow-wrapper").css("left", u);
          }
        },
        actions: {
          popoverRendered: function () {
            this._positionNote();
          },
          clickedOutsidePopover: function (e) {
            e.data("note-id") || this.set("showPopover", !1);
          },
          setup: function (e) {
            var n = this;
            this.set("$editor", e), this.makeFastclickable(e.find("span"));
            var s = e.find("span").filter(function () {
                return t.default.isPresent($(this).data("note-id"));
              }),
              o = "mousedown touchstart";
            s.off(o).on(o, function (e) {
              var s = $(e.target),
                o = s.attr("data-note-id");
              t.default.isPresent(o) &&
                t.default.run(function () {
                  var e = o === n.get("activeNote.id"),
                    t = n.get("showPopover");
                  if ((n.set("showPopover", !1), !t || !e)) {
                    var a = n.get("store").peekRecord("note", o);
                    n.setProperties({
                      $activeNote: s,
                      activeNote: a,
                      showPopover: !0,
                    });
                  }
                });
            });
          },
        },
      }
    );
  }),
  define("frontend/components/explanatory-notes-popover/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "73qsOvj2",
      block:
        '{"statements":[["block",["if"],[["get",["showPopover"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["render-image"],null,[["class","story","imageFile","maxHeight","lightbox"],["note-image",["get",["activeNote","augmentedText","story"]],["get",["activeNote","imageFile"]],["get",["imageMaxHeight"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["activeNote","hasImage"]]],null,0],["text","    "],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["text","\\n      "],["open-element","h4",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["activeNote","word"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","description"],["flush-element"],["append",["unknown",["activeNote","description"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["pop-over"],null,[["popoverRendered","clickedOutside","position"],[["helper",["action"],[["get",[null]],"popoverRendered"],null],["helper",["action"],[["get",[null]],"clickedOutsidePopover"],null],["get",["popoverOrientation"]]]],1]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/explanatory-notes-popover/template.hbs",
      },
    });
  }),
  define("frontend/components/faq-item/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({ classNames: ["faq-item"] });
  }),
  define("frontend/components/faq-item/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "vA0VF8UV",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","faq-item__content"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","faq-item__title"],["flush-element"],["append",["unknown",["question"]],false],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","faq-item__text"],["flush-element"],["yield","default"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/faq-item/template.hbs" },
    });
  }),
  define("frontend/components/feature-assignment/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
    "frontend/utils/mobiledoc",
    "frontend/utils/runloop-utils",
    "npm:moment",
    "frontend/utils/animation-step",
  ], function (e, t, n, s, o, a, i) {
    var l = t.default.testing ? 0 : 100;
    e.default = t.default.Component.extend(n.default, {
      classNames: ["feature-assignment"],
      store: t.default.inject.service(),
      teacher: t.default.computed(function () {
        return this.get("store").createRecord("user", {
          type: "teacher",
          title: "Ms.",
          firstName: "Michele",
          lastName: "Maxwell",
        });
      }),
      student: t.default.computed(function () {
        return this.get("store").createRecord("user", {
          type: "student",
          firstName: "Charles",
          lastName: "Robinson",
        });
      }),
      animationSteps: t.default
        .computed(function () {
          var e = this,
            t = [],
            n = "____",
            r = "_____________",
            u =
              "He lived in New York for two years and then he " +
              n +
              " (go) to Liverpool to start afresh. He " +
              r +
              " (not be) back ever since.",
            c = this.get("store");
          t.push(
            i.default.create({
              execute: function () {
                return regeneratorRuntime.async(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this.setProperties({
                              itemIsEditable: !1,
                              itemIsEditing: !1,
                              item: c.createRecord("item", {
                                type: "quote",
                                contentText: c.createRecord("augmented-text", {
                                  content: JSON.stringify(
                                    (0, s.toMobiledoc)("")
                                  ),
                                }),
                                createdAt: (0, a.default)().subtract(
                                  3,
                                  "minutes"
                                ),
                              }),
                              userEditing: this.get("teacher"),
                            }),
                            (e.next = 3),
                            regeneratorRuntime.awrap((0, o.waitUntilRendered)())
                          );
                        case 3:
                        case "end":
                          return e.stop();
                      }
                  },
                  null,
                  this
                );
              },
            })
          );
          var d = function () {
            return e.$(".rich-text-content");
          };
          (t = t.concat(this.animationStepsForTextInsertion(d, u))),
            t.push(this.animationStepToWait(1e3)),
            t.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              this.setProperties({
                                item: c.createRecord("item", {
                                  type: "quote",
                                  contentText: c.createRecord(
                                    "augmented-text",
                                    {
                                      content: JSON.stringify(
                                        (0, s.toMobiledoc)(u)
                                      ),
                                    }
                                  ),
                                }),
                                userEditing: this.get("student"),
                              }),
                              (e.next = 3),
                              regeneratorRuntime.awrap(
                                (0, o.waitUntilRendered)()
                              )
                            );
                          case 3:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t.push(this.animationStepToWait(2e3));
          var m = u.indexOf(n);
          (t = t.concat(this.animationStepsForTextDeletion(d, m, n.length))),
            t.push(this.animationStepToWait(1e3)),
            (t = t.concat(
              this.animationStepsForTextInsertion(d, "went", m, l)
            )),
            t.push(this.animationStepToWait(1e3));
          var f = u.indexOf(r);
          return (
            (t = t.concat(this.animationStepsForTextDeletion(d, f, r.length))),
            t.push(this.animationStepToWait(1e3)),
            (t = t.concat(
              this.animationStepsForTextInsertion(d, "hasn't been", f, l)
            )),
            t.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            this.setProperties({
                              itemIsEditable: !0,
                              itemIsEditing: !0,
                            });
                          case 1:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t
          );
        })
        .readOnly(),
      hasItem: t.default.computed.notEmpty("item"),
      hasUserEditing: t.default.computed.notEmpty("userEditing"),
    });
  }),
  define("frontend/components/feature-assignment/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "42HUKQv3",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Perfect for assignments"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Create templates that students can then copy, modify and submit back to you."],["close-element"],["text","\\n\\n    "],["partial","feature-primary/replay-button"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasItem"]]],null,5],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","                "],["append",["unknown",["user","fullName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["user","title"]],false],["text"," "],["append",["unknown",["user","lastName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["static-attr","class","user-editing"],["flush-element"],["text","\\n            "],["append",["helper",["time-ago"],[["get",["currentItem","createdAt"]]],null],false],["text"," by\\n            "],["open-element","span",[]],["static-attr","class","user-editing__name"],["flush-element"],["text","\\n"],["block",["if"],[["get",["user","isTeacher"]]],null,1,0],["text","            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":["user"]},{"statements":[["block",["liquid-bind"],[["get",["userEditing"]]],[["use"],["fade"]],2]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-item"],null,[["model","side","isEditable","isEditing","withNotes","isSimulation"],[["get",["item"]],"right",["get",["itemIsEditable"]],["get",["itemIsEditing"]],false,true]]],false],["text","\\n\\n"],["block",["if"],[["get",["hasUserEditing"]]],null,3]],"locals":["currentItem"]},{"statements":[["block",["liquid-bind"],[["get",["item"]]],[["use"],["fade"]],4]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/components/feature-assignment/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-block/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["feature-block"],
      backgroundImageStyle: t.default.computed("icon", function () {
        return t.default.String.htmlSafe(
          "background-image: url('" + this.get("icon") + "');"
        );
      }),
    });
  }),
  define("frontend/components/feature-block/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "okc4o8dC",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","feature-block__image"],["dynamic-attr","style",["unknown",["backgroundImageStyle"]],null],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","feature-block__content"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","feature-block__title"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","feature-block__text"],["flush-element"],["yield","default"],["close-element"],["text","\\n\\n"],["block",["call-to-action"],null,[["route","class"],["business","feature-block__button"]],0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","    Discover Sutori PRO\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/feature-block/template.hbs" },
    });
  }),
  define("frontend/components/feature-build-your-story/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/mixins/feature-primary",
    "frontend/utils/mobiledoc",
    "frontend/utils/runloop-utils",
    "frontend/utils/animation-step",
  ], function (e, t, n, s, o, a, i) {
    var l = t.default.testing ? 0 : 4e3,
      r = 4;
    e.default = t.default.Component.extend(s.default, {
      classNames: ["feature-build-your-story"],
      store: t.default.inject.service(),
      currentIndex: 0,
      animationSteps: t.default
        .computed(function () {
          var e = this,
            t = [];
          t.push(
            i.default.create({
              execute: function () {
                return regeneratorRuntime.async(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._buildAnimationCards(),
                            this.set("currentIndex", 0),
                            (e.next = 4),
                            regeneratorRuntime.awrap((0, a.waitUntilRendered)())
                          );
                        case 4:
                        case "end":
                          return e.stop();
                      }
                  },
                  null,
                  this
                );
              },
            })
          );
          var s =
              "When we say you can create stories in minutes, we really mean it. It is as simple as typing and, in a few clicks, you can add all sorts of media.",
            o = function () {
              return e.$(".item-wrapper.quote .rich-text-content");
            };
          (t = t.concat(this.animationStepsForTextInsertion(o, s))),
            t.push(this.animationStepToWait(1e3));
          var u = void 0,
            c = function () {
              var e = u;
              t.push(
                i.default.create({
                  execute: function () {
                    return regeneratorRuntime.async(
                      function (t) {
                        for (;;)
                          switch ((t.prev = t.next)) {
                            case 0:
                              return (
                                this.set("currentIndex", e),
                                (t.next = 3),
                                regeneratorRuntime.awrap((0, n.timeout)(l))
                              );
                            case 3:
                            case "end":
                              return t.stop();
                          }
                      },
                      null,
                      this
                    );
                  },
                })
              );
            };
          for (u = 1; u < r - 1; u++) c();
          return (
            t.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            this.set("currentIndex", u);
                          case 1:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t
          );
        })
        .readOnly(),
      currentAnimationCard: t.default.computed(
        "currentIndex",
        "animationCards",
        function () {
          return this.get("animationCards")[this.get("currentIndex")];
        }
      ),
      _getImageFileFactory: function () {
        return t.default.getOwner(this).lookup("factory:image-file");
      },
      _buildAnimationCards: function () {
        var e = this.get("store"),
          t = [];
        t.push({
          item: e.createRecord("item", {
            type: "quote",
            contentText: e.createRecord("augmented-text", {
              content: JSON.stringify((0, o.toMobiledoc)("")),
            }),
          }),
        }),
          t.push({
            label: "Videos",
            item: e.createRecord("item", {
              type: "video",
              video: e.createRecord("video", {
                provider: "youtube",
                videoId: "KY9iqeiyyBM",
              }),
              contentText: e.createRecord("augmented-text", {
                content: JSON.stringify(
                  (0, o.toMobiledoc)("Add videos to your story.")
                ),
              }),
            }),
          }),
          t.push({
            label: "Recordings",
            item: e.createRecord("item", {
              type: "audio",
              audioFile: e.createRecord("audio-file", {
                url:
                  "https://d1ox703z8b11rg.cloudfront.net/audios/how-do-we-talk-about-climate-change-177f3dd4d44fb60c7f05f4dbc14df412.mp3",
                caption: "Warm Regards - How do we talk about climate change?",
              }),
              contentText: e.createRecord("augmented-text", {
                content: JSON.stringify(
                  (0, o.toMobiledoc)(
                    "Include an audio recording or podcast to further engage your audience."
                  )
                ),
              }),
            }),
          }),
          t.push({
            label: "Quiz questions",
            item: e.createRecord("item", {
              type: "quiz-question-multiple-choice",
              story: e.createRecord("story"),
              imageFile: this._getImageFileFactory().buildImageFile(
                "https://d1ox703z8b11rg.cloudfront.net/images/home/polar-bear-1bd74d496bc90b1ae49c8c6c4b704f2d.jpg",
                951,
                628
              ),
              quizQuestionText: e.createRecord("augmented-text", {
                content: JSON.stringify(
                  (0, o.toMobiledoc)(
                    "When sea ice in the polar regions shrinks or grows, it affects:"
                  )
                ),
              }),
              quizQuestionMultipleChoiceAnswers: [
                e.createRecord("quiz-question-multiple-choice-answer", {
                  text: "Animals and ecosystems",
                }),
                e.createRecord("quiz-question-multiple-choice-answer", {
                  text: "The atmosphere",
                }),
                e.createRecord("quiz-question-multiple-choice-answer", {
                  text: "Ocean circulation patterns",
                }),
                e.createRecord("quiz-question-multiple-choice-answer", {
                  correct: !0,
                  text: "All of the above",
                }),
              ],
              quizExplanation:
                "Correct! Major changes in sea ice cover affect many species, including polar bears living in the Arctic and penguins living in the Antarctic. Polar bears rely on sea ice as a platform for mating, rearing young and for hunting seals. As Arctic ice shrinks, their habitat disappears.",
            }),
          }),
          this.set("animationCards", t);
      },
    });
  }),
  define("frontend/components/feature-build-your-story/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "EPG1e6QW",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Create your story"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Put together impressive stories in minutes, with no prior technical knowledge."],["close-element"],["text","\\n\\n    "],["partial","feature-primary/replay-button"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n"],["block",["each"],[["get",["animationCards"]]],null,1],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","animation-card__label"],["flush-element"],["append",["unknown",["animationCard","label"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["animation-card ",["helper",["if"],[["helper",["eq"],[["get",["animationCard"]],["get",["currentAnimationCard"]]],null],"active"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["animationCard","label"]]],null,0],["text","\\n      "],["append",["helper",["story-item"],null,[["model","side"],[["get",["animationCard","item"]],"left"]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["animationCard"]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/components/feature-build-your-story/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-collaboration/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
    "ember-concurrency",
    "frontend/utils/mobiledoc",
    "frontend/utils/runloop-utils",
    "frontend/utils/animation-step",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["feature-collaboration"],
      store: t.default.inject.service(),
      laura: t.default.computed(function () {
        return this.get("store").createRecord("user", {
          firstName: "Laura",
          lastName: "Moore",
          profileImageFile: this._getImageFileFactory().buildImageFile(
            "https://d1ox703z8b11rg.cloudfront.net/images/home/laura-moore-2e2f3641fcc01193e54ee8eaa55ea241.png",
            100,
            100
          ),
        });
      }),
      charles: t.default.computed(function () {
        return this.get("store").createRecord("user", {
          firstName: "Charles",
          lastName: "Robinson",
          profileImageFile: this._getImageFileFactory().buildImageFile(
            "https://d1ox703z8b11rg.cloudfront.net/images/home/charles-robinson-f8b0f65820f50b932ef850acd33ab815.png",
            100,
            100
          ),
        });
      }),
      visitor: t.default.computed(function () {
        return this.get("store").createRecord("user", {
          firstName: "Visitor",
          lastName: "on Sutori",
          profileImageFile: this._getImageFileFactory().buildImageFile(
            "https://d1ox703z8b11rg.cloudfront.net/images/icon-profile-39ecb5d9430b611810aee38434d5c445.svg",
            300,
            300
          ),
        });
      }),
      users: t.default
        .computed(function () {
          return [this.get("laura"), this.get("charles"), this.get("visitor")];
        })
        .readOnly(),
      animationSteps: t.default
        .computed(function () {
          var e = this,
            t = [],
            n = this.get("store"),
            s = this.get("laura"),
            l = this.get("charles"),
            r = this.get("visitor");
          t.push(
            i.default.create({
              execute: function () {
                return regeneratorRuntime.async(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this.set(
                              "item",
                              n.createRecord("item", {
                                type: "quote",
                                contentText: n.createRecord("augmented-text", {
                                  content: JSON.stringify(
                                    (0, o.toMobiledoc)("")
                                  ),
                                }),
                              })
                            ),
                            this.setProperties({
                              itemIsEditable: !1,
                              itemIsEditing: !1,
                            }),
                            this.set("userEditing", s),
                            (e.next = 5),
                            regeneratorRuntime.awrap((0, a.waitUntilRendered)())
                          );
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  },
                  null,
                  this
                );
              },
            })
          ),
            t.push(this.animationStepToWait(500));
          var u = function () {
            return e.$(".rich-text-content");
          };
          return (
            (t = t.concat(
              this.animationStepsForTextInsertion(
                u,
                "I have only just started to use Sutori, but I am beginning to see all the different ways to use the tool! This collaboration feature is pretty neatt"
              )
            )),
            t.push(this.animationStepToWait(1e3)),
            t.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              this.set("userEditing", l),
                              (e.next = 3),
                              regeneratorRuntime.awrap(
                                (0, a.waitUntilRendered)()
                              )
                            );
                          case 3:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t.push(this.animationStepToWait(500)),
            t.push(
              i.default.create({
                execute: function () {
                  var e;
                  return regeneratorRuntime.async(
                    function (t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            return (
                              (e = this.$(".rich-text-content")),
                              (t.next = 3),
                              regeneratorRuntime.awrap(this.insertBackspace(e))
                            );
                          case 3:
                          case "end":
                            return t.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t.push(this.animationStepToWait(100)),
            (t = t.concat(this.animationStepsForTextInsertion(u, "."))),
            t.push(this.animationStepToWait(100)),
            t.push(
              i.default.create({
                execute: function () {
                  var e;
                  return regeneratorRuntime.async(
                    function (t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            return (
                              (e = this.$(".rich-text-content")),
                              (t.next = 3),
                              regeneratorRuntime.awrap(
                                this.insertNewParagraph(e)
                              )
                            );
                          case 3:
                            return (
                              (t.next = 5),
                              regeneratorRuntime.awrap(
                                this.insertNewParagraph(e)
                              )
                            );
                          case 5:
                          case "end":
                            return t.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            (t = t.concat(
              this.animationStepsForTextInsertion(
                u,
                "It's great to have everything in one place... I can also correct your spelling mistakes this way!"
              )
            )),
            t.push(this.animationStepToWait(500)),
            t.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              this.set("userEditing", r),
                              (e.next = 3),
                              regeneratorRuntime.awrap(
                                (0, a.waitUntilRendered)()
                              )
                            );
                          case 3:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t.push(this.animationStepToWait(500)),
            t.push(
              i.default.create({
                execute: function () {
                  var e;
                  return regeneratorRuntime.async(
                    function (t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            return (
                              (e = this.$(".rich-text-content")),
                              (t.next = 3),
                              regeneratorRuntime.awrap(
                                this.insertNewParagraph(e)
                              )
                            );
                          case 3:
                            return (
                              (t.next = 5),
                              regeneratorRuntime.awrap(
                                this.insertNewParagraph(e)
                              )
                            );
                          case 5:
                          case "end":
                            return t.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t.push(this.animationStepToWait(100)),
            t.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              this.setProperties({
                                itemIsEditable: !0,
                                itemIsEditing: !0,
                              }),
                              (e.next = 3),
                              regeneratorRuntime.awrap(
                                (0, a.waitUntilRendered)()
                              )
                            );
                          case 3:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t.push(this.animationStepToWait(100)),
            t.push(
              i.default.create({
                execute: function () {
                  var e;
                  return regeneratorRuntime.async(
                    function (t) {
                      for (;;)
                        switch ((t.prev = t.next)) {
                          case 0:
                            return (
                              (e = this.$(".rich-text-content")),
                              (t.next = 3),
                              regeneratorRuntime.awrap(
                                this.focusOnRichTextContent(e)
                              )
                            );
                          case 3:
                          case "end":
                            return t.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            t
          );
        })
        .readOnly(),
      requiredInput: ["title"],
      hasItem: t.default.computed.notEmpty("item"),
      userLocking: t.default.computed(
        "userEditing",
        "userEditing",
        function () {
          return this.get("userEditing") === this.get("userEditing")
            ? null
            : this.get("userEditing");
        }
      ),
      sideOfItem: t.default.computed("textSide", function () {
        return "right" === this.get("textSide") ? "left" : "right";
      }),
      _getImageFileFactory: function () {
        return t.default.getOwner(this).lookup("factory:image-file");
      },
    });
  }),
  define("frontend/components/feature-collaboration/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "fyPQ7wf5",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["yield","default"],["close-element"],["text","\\n\\n    "],["partial","feature-primary/replay-button"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasItem"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","          "],["open-element","div",[]],["dynamic-attr","class",["concat",["user ",["helper",["if"],[["helper",["eq"],[["get",["user"]],["get",["userEditing"]]],null],"is-editing"],null]]]],["flush-element"],["text","\\n            "],["append",["helper",["user-avatar"],null,[["user"],[["get",["user"]]]]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":["user"]},{"statements":[["text","      "],["append",["helper",["story-item"],null,[["model","side","lockedByUser","isEditable","isEditing","withNotes","isSimulation"],[["get",["item"]],["get",["sideOfItem"]],["get",["userLocking"]],["get",["itemIsEditable"]],["get",["itemIsEditing"]],false,true]]],false],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","users"],["flush-element"],["text","\\n"],["block",["each"],[["get",["users"]]],null,0],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["liquid-bind"],[["get",["item"]]],null,1]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/components/feature-collaboration/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-comments/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
    "frontend/utils/mobiledoc",
    "ember-concurrency",
    "frontend/utils/runloop-utils",
    "frontend/utils/animation-step",
  ], function (e, t, n, s, o, a, i) {
    var l = t.default.testing ? 0 : 20;
    e.default = t.default.Component.extend(n.default, {
      classNames: ["feature-comments"],
      store: t.default.inject.service(),
      animationSteps: t.default
        .computed(function () {
          var e = [];
          return (
            e.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            return (
                              this.set(
                                "item",
                                this.get("store").createRecord("item", {
                                  type: "quote",
                                  contentText: this.get(
                                    "store"
                                  ).createRecord("augmented-text", {
                                    content: JSON.stringify(
                                      (0, s.toMobiledoc)(
                                        "When you share a story with your class, students can comment on each item, prompting dynamic class discussions!"
                                      )
                                    ),
                                  }),
                                })
                              ),
                              (e.next = 3),
                              regeneratorRuntime.awrap(
                                (0, a.waitUntilRendered)()
                              )
                            );
                          case 3:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            e.push(this.animationStepToWait(2e3)),
            e.push(
              i.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (e) {
                      for (;;)
                        switch ((e.prev = e.next)) {
                          case 0:
                            this.$(".button-comments-count").click();
                          case 1:
                          case "end":
                            return e.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
            e.push(this.animationStepToWait(1e3)),
            (e = e.concat(
              this.animationStepsForComment(
                "This is cool! Just like on social media!",
                this.get("store").createRecord("user", {
                  type: "student",
                  firstName: "Carlos",
                  lastName: "Henrique",
                })
              )
            )),
            e.push(this.animationStepToWait(1e3)),
            (e = e.concat(
              this.animationStepsForComment(
                "As a teacher I can participate and moderate these comments.",
                this.get("store").createRecord("user", {
                  type: "teacher",
                  firstName: "Ms.",
                  lastName: "Saive",
                })
              )
            ))
          );
        })
        .readOnly(),
      hasItem: t.default.computed.notEmpty("item"),
      animationStepsForComment: function (e, t) {
        for (
          var n = [],
            s = function (t) {
              n.push(
                i.default.create({
                  execute: function () {
                    var n, s;
                    return regeneratorRuntime.async(
                      function (a) {
                        for (;;)
                          switch ((a.prev = a.next)) {
                            case 0:
                              return (
                                (n = this.$(".form-post-comment textarea")),
                                n.val(e.substring(0, t)),
                                n.trigger($.Event("change")),
                                (s = document.createEvent("Event")),
                                s.initEvent("autosize:update", !0, !1),
                                n[0].dispatchEvent(s),
                                (a.next = 8),
                                regeneratorRuntime.awrap((0, o.timeout)(l))
                              );
                            case 8:
                            case "end":
                              return a.stop();
                          }
                      },
                      null,
                      this
                    );
                  },
                })
              );
            },
            r = 0;
          r <= e.length;
          r++
        )
          s(r);
        return (
          n.push(this.animationStepToWait(200)),
          n.push(
            i.default.create({
              execute: function () {
                return regeneratorRuntime.async(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this.$(
                              '.form-post-comment button[type="submit"]'
                            ).click(),
                            (e.next = 3),
                            regeneratorRuntime.awrap(
                              (0, a.waitUntilNextRunloop)()
                            )
                          );
                        case 3:
                        case "end":
                          return e.stop();
                      }
                  },
                  null,
                  this
                );
              },
            })
          ),
          n.push(
            i.default.create({
              execute: function () {
                return regeneratorRuntime.async(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          this.set("item.itemComments.lastObject.author", t);
                        case 1:
                        case "end":
                          return e.stop();
                      }
                  },
                  null,
                  this
                );
              },
            })
          ),
          n
        );
      },
    });
  }),
  define("frontend/components/feature-comments/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7sNTRiwm",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Active learning"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","We learn through interacting with our peers. Students can discuss and ask questions on the story itself, both deepening understanding and increasing engagement."],["close-element"],["text","\\n\\n    "],["partial","feature-primary/replay-button"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n"],["block",["liquid-bind"],[["get",["item"]]],null,1],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["story-item"],null,[["model","side","showComments","isSimulation"],[["get",["item"]],"right",true,true]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasItem"]]],null,0]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/feature-comments/template.hbs" },
    });
  }),
  define("frontend/components/feature-communication/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
    "ember-concurrency",
    "frontend/utils/mobiledoc",
    "frontend/mixins/velocity",
  ], function (e, t, n, s, o, a) {
    var i = {
      version: "0.3.1",
      atoms: [],
      cards: [],
      markups: [],
      sections: [
        [
          3,
          "ul",
          [
            [
              [
                0,
                [],
                0,
                "Verify user permission types (the appropriate person is, in fact, an admin, staff, or student-staff user) and make changes as needed. ",
              ],
            ],
            [
              [
                0,
                [],
                0,
                "Confirm that all staff members can successfully login using their credentials.",
              ],
            ],
          ],
        ],
      ],
    };
    e.default = t.default.Component.extend(n.default, a.default, {
      classNames: ["feature-communication"],
      store: t.default.inject.service(),
      items: t.default
        .computed(function () {
          var e = [],
            t = this.get("store");
          return (
            e.push(
              t.createRecord("item", {
                type: "image",
                contentText: t.createRecord("augmented-text", {
                  content: JSON.stringify(
                    (0, o.toMobiledoc)(
                      "Track your insights through our latest data points which are highlighted in the quarterly announcements."
                    )
                  ),
                }),
                imageFile: this._getImageFileFactory().buildImageFile(
                  "https://d1ox703z8b11rg.cloudfront.net/images/business/googleanalytics-7ba494e10aef657433a7499226d51b12.jpeg",
                  800,
                  533
                ),
              })
            ),
            e.push(
              t.createRecord("item", {
                type: "video",
                contentText: t.createRecord("augmented-text", {
                  content: JSON.stringify(i),
                }),
                video: t.createRecord("video", {
                  provider: "youtube",
                  videoId: "ipQs63Rgkk0",
                }),
              })
            ),
            e.push(
              t.createRecord("item", {
                type: "audio",
                contentText: t.createRecord("augmented-text", {
                  content: JSON.stringify(
                    (0, o.toMobiledoc)(
                      "For those of you that missed yesterday's big announcement, just click play."
                    )
                  ),
                }),
                audioFile: t.createRecord("audio-file", {
                  url:
                    "https://d1ox703z8b11rg.cloudfront.net/audios/ich-bin-ein-berliner-1f84945ae8ce8dadabad50afc8c169e9.mp3",
                  caption: "Audio transcript",
                }),
              })
            ),
            e.push(
              t.createRecord("item", {
                type: "didyouknow",
                contentText: t.createRecord("augmented-text", {
                  content: JSON.stringify(
                    (0, o.toMobiledoc)(
                      "More than a quarter of employers have found content online that has caused them to reprimand or fire an employee. How do you manage your private info online?"
                    )
                  ),
                }),
              })
            ),
            e
          );
        })
        .readOnly(),
      animationTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _getImageFileFactory: function () {
        return t.default.getOwner(this).lookup("factory:image-file");
      },
    });
  }),
  define("frontend/components/feature-communication/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "I71fudop",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Communicate in a new way"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Marketing strategies, business processes, overviews, company roadmaps, how-to guides, CVsâ¦ There are countless ways to use Sutori to present and communicate information."],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","slideshow"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","items"],["flush-element"],["text","\\n"],["block",["each"],[["get",["items"]]],null,1],["block",["each"],[["get",["items"]]],null,0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["story-item"],null,[["model","side"],[["get",["item"]],"right"]]],false],["text","\\n"]],"locals":["item"]},{"statements":[["text","        "],["append",["helper",["story-item"],null,[["model","side"],[["get",["item"]],"right"]]],false],["text","\\n"]],"locals":["item"]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/feature-communication/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-explore-stories/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["feature-explore-stories"],
      store: t.default.inject.service(),
      featuredStoriesPromise: t.default
        .computed(function () {
          return this.get("store").query("story", {
            filter: { is_featured: !0 },
            sort_params: ["featured_at DESC"],
            page: 1,
            per_page: 6,
          });
        })
        .readOnly(),
      carouselResponsive: t.default
        .computed(function () {
          return [
            { breakpoint: 1400, settings: { slidesToShow: 1 } },
            { breakpoint: 1e3, settings: { slidesToShow: 2 } },
            { breakpoint: 660, settings: { slidesToShow: 1 } },
          ];
        })
        .readOnly(),
      featuredStories: t.default.computed.reads(
        "featuredStoriesPromise.content"
      ),
      hasFeaturedStories: t.default.computed.notEmpty("featuredStories"),
    });
  }),
  define("frontend/components/feature-explore-stories/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "gUs9G7Oz",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Explore stories"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Stories amaze, stories teach. Stories connect, stories touch. Sutori is the perfect place to share any story."],["close-element"],["text","\\n    "],["block",["link-to"],["stories"],[["class"],["button-discover-stories"]],3],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasFeaturedStories"]]],null,2],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","div",[]],["flush-element"],["text","\\n          "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["featuredStories"]]],null,0]],"locals":[]},{"statements":[["block",["slick-carousel"],null,[["rtl","slidesToShow","infinite","responsive"],[true,2,false,["get",["carouselResponsive"]]]],1]],"locals":[]},{"statements":[["text","Discover stories"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/feature-explore-stories/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-secondary/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["feature-secondary"],
      backgroundImageStyle: t.default.computed("icon", function () {
        return t.default.String.htmlSafe(
          "background-image: url('" + this.get("icon") + "');"
        );
      }),
    });
  }),
  define("frontend/components/feature-secondary/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4tKQE5U7",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","feature-secondary__image"],["dynamic-attr","style",["unknown",["backgroundImageStyle"]],null],["flush-element"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","feature-secondary__content"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","feature-secondary__title"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","feature-secondary__text"],["flush-element"],["yield","default"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/feature-secondary/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-unbranded/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
    "frontend/mixins/velocity",
    "ember-concurrency",
    "frontend/utils/mobiledoc",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["feature-unbranded"],
      store: t.default.inject.service(),
      environment: t.default.inject.service(),
      item: t.default
        .computed(function () {
          return this.get("store").createRecord("item", {
            type: "image",
            contentText: this.get("store").createRecord("augmented-text", {
              content: JSON.stringify(
                (0, a.toMobiledoc)(
                  "This training will serve as a dynamic reference so you can continue to learn at your own pace. We included links to articles and videos that will help answer any questions you have."
                )
              ),
            }),
            imageFile: this._getImageFileFactory().buildImageFile(
              "https://d1ox703z8b11rg.cloudfront.net/images/business/unbranded-1fbf5992473251b6c8409210977c491d.jpeg",
              951,
              628
            ),
          });
        })
        .readOnly(),
      animationTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 3), (0, o.timeout)(2e3);
                  case 3:
                    return (
                      (e.next = 5),
                      this.animate(this.$(".text-content"), "fadeOut", {
                        duration: 1e3,
                        display: "block",
                      })
                    );
                  case 5:
                    return (
                      this.$(".text-content").css("text-align", "center"),
                      (e.next = 8),
                      this.animate(this.$(".text-content"), "fadeIn", {
                        duration: 1e3,
                      })
                    );
                  case 8:
                    return (e.next = 10), (0, o.timeout)(2e3);
                  case 10:
                    return (
                      (e.next = 12),
                      this.animate(this.$(".text-content"), "fadeOut", {
                        duration: 1e3,
                        display: "block",
                      })
                    );
                  case 12:
                    return (
                      this.$(".text-content").css("text-align", ""),
                      (e.next = 15),
                      this.animate(this.$(".text-content"), "fadeIn", {
                        duration: 1e3,
                      })
                    );
                  case 15:
                    e.next = 0;
                    break;
                  case 17:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _getImageFileFactory: function () {
        return t.default.getOwner(this).lookup("factory:image-file");
      },
    });
  }),
  define("frontend/components/feature-unbranded/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "RfwneYsg",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Unbranded and custom embeds"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Add that extra professional touch to your embeds by removing our branding. We can also adapt the story to your needs through customization. Email "],["append",["unknown",["email-sales"]],false],["text"," for pricing information."],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n  "],["append",["helper",["story-item"],null,[["model","side"],[["get",["item"]],"right"]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","company-logo"],["flush-element"],["text","\\n"],["block",["slick-carousel"],null,[["fade","autoplay","arrows"],[true,true,false]],0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","img",[]],["static-attr","class","company-logo__image"],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/business/company-logo-1-f82f05bcc5e57b052d191ec3e7bea6dc.png"],["static-attr","alt","Company logo"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","class","company-logo__image"],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/business/company-logo-2-fe2e919818b526570fba9263007d6d83.png"],["static-attr","alt","Company logo"],["flush-element"],["close-element"],["text","\\n      "],["open-element","img",[]],["static-attr","class","company-logo__image"],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/business/company-logo-3-a6dce67fb513def8a0f93ce5b22f1c87.png"],["static-attr","alt","Company logo"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/feature-unbranded/template.hbs",
      },
    });
  }),
  define("frontend/components/feature-wow-audience/component", [
    "exports",
    "ember",
    "frontend/mixins/feature-primary",
    "ember-concurrency",
    "frontend/utils/mobiledoc",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["feature-wow-audience"],
      store: t.default.inject.service(),
      item: t.default.computed(function () {
        return this.get("store").createRecord("item", {
          type: "image",
          contentText: this.get("store").createRecord("augmented-text", {
            content: JSON.stringify(
              (0, o.toMobiledoc)(
                "GS Capital has today announced financial results for the third quarter. The company posted quarterly revenue of $35 million and income of $5.2 million."
              )
            ),
          }),
          imageFile: this._getImageFileFactory().buildImageFile(
            "https://d1ox703z8b11rg.cloudfront.net/images/business/graph-67b657b7ea793e5bb95e9bccbbda8016.jpeg",
            1209,
            684
          ),
        });
      }),
      animationTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _getImageFileFactory: function () {
        return t.default.getOwner(this).lookup("factory:image-file");
      },
    });
  }),
  define("frontend/components/feature-wow-audience/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "j3+W1RR0",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","text-wrapper"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","text"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","title"],["flush-element"],["text","Wow your audience"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Tired of boring old Powerpointsâ¢? Create beautiful and professional presentations with no prior technical knowledge."],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","animation"],["flush-element"],["text","\\n  "],["append",["helper",["story-item"],null,[["model","side"],[["get",["item"]],"left"]]],false],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/feature-wow-audience/template.hbs",
      },
    });
  }),
  define("frontend/components/featured-unit-box/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["featured-unit-box"],
    });
  }),
  define("frontend/components/featured-unit-box/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Nnvdqm3Z",
      block:
        '{"statements":[["block",["link-to"],["storyUnit",["get",["unit"]]],[["class"],["unit-image"]],2],["open-element","div",[]],["static-attr","class","description"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","featured-unit-tag"],["flush-element"],["text","Featured unit"],["close-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","title"],["flush-element"],["text","\\n    "],["block",["link-to"],["storyUnit",["get",["unit"]]],[["class"],["link"]],1],["text","\\n  "],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","stories-count"],["flush-element"],["open-element","strong",[]],["flush-element"],["append",["unknown",["unit","stories","length"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["story",["get",["unit","stories","length"]]],null],false],["close-element"],["text","\\n  "],["block",["link-to"],["storyUnit",["get",["unit"]]],[["class"],["button-view-unit"]],0],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","View unit"]],"locals":[]},{"statements":[["append",["unknown",["unit","title"]],false]],"locals":[]},{"statements":[["text","  "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy"],[["get",["unit","bannerImageFile"]],"cover"]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/featured-unit-box/template.hbs",
      },
    });
  }),
  define("frontend/components/features-secondary/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["features-secondary"],
      tagName: "section",
    });
  }),
  define("frontend/components/features-secondary/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "np8QZVf/",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","features-secondary-container"],["flush-element"],["text","\\n  "],["yield","default"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/features-secondary/template.hbs",
      },
    });
  }),
  define("frontend/components/featuring-image/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["featuring-image"],
      tagName: "span",
      attributeBindings: ["backgroundImageStyle:style"],
      backgroundImageStyle: t.default.computed("image", function () {
        return t.default.String.htmlSafe(
          "background-image: url('" + this.get("image") + "');"
        );
      }),
    });
  }),
  define("frontend/components/file-uploader/component", [
    "exports",
    "ember",
    "frontend/utils/file",
  ], function (e, t, n) {
    e.default = t.default.TextField.extend({
      classNames: ["button-upload-from-computer"],
      type: "file",
      accept: "*",
      change: function (e) {
        var s = this,
          o = e.target;
        o.files &&
          o.files[0] &&
          !(function () {
            var e = o.files[0],
              a = s;
            s.set("isLoading", !0);
            var i = new FileReader();
            (i.onloadend = function () {
              t.default.run(function () {
                var t = n.default.create({ file: e, base64: i.result });
                a.sendAction("action", t);
              });
            }),
              i.readAsDataURL(e);
          })();
      },
    });
  }),
  define("frontend/components/filters-search/component", [
    "exports",
    "ember",
    "frontend/mixins/on-click-outside",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["filters-search"],
      classNameBindings: ["isEnabled"],
      tagName: "form",
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          this.onClickOutside(function () {
            e.get("hasNoQuery") &&
              (e.set("isEnabled", !1), e.send("blurSearch"));
          });
      },
      click: function () {
        var e = this;
        this.set("isEnabled", !0),
          t.default.run.scheduleOnce("afterRender", function () {
            e.$(".filters-search__input").focus();
          });
      },
      hasNoQuery: t.default.computed.equal("query.length", 0),
      actions: {
        focusSearch: function () {
          this.set("isFocused", !0);
        },
        blurSearch: function () {
          this.set("isFocused", !1);
        },
      },
    });
  }),
  define("frontend/components/filters-search/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "b+LtUPMn",
      block:
        '{"statements":[["open-element","label",[]],["dynamic-attr","class",["concat",["filters-search__label ",["helper",["if"],[["get",["isFocused"]],"is-focused"],null]]]],["static-attr","for","s"],["flush-element"],["text","\\n  "],["append",["helper",["input"],null,[["class","type","name","focus-in","focus-out","value"],["filters-search__input","search","s",["helper",["action"],[["get",[null]],"focusSearch"],null],["helper",["action"],[["get",[null]],"blurSearch"],null],["helper",["mut"],[["get",["query"]]],null]]]],false],["text","\\n  Search\\n"],["close-element"],["text","\\n"],["open-element","input",[]],["static-attr","class","filters-search__submit"],["static-attr","type","submit"],["static-attr","value",""],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/filters-search/template.hbs" },
    });
  }),
  define("frontend/components/flash-education/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({ classNames: ["flash-education"] });
  }),
  define("frontend/components/flash-education/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "DD2d2Z+c",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","flash__content"],["flush-element"],["text","\\n  "],["open-element","h2",[]],["static-attr","class","flash__title"],["flush-element"],["text","Sutori in the classroom"],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","flash__body"],["flush-element"],["text","Unleash creativity and manage student work all in one place."],["close-element"],["text","\\n\\n"],["block",["call-to-action"],null,[["route","class"],["education","flash__button"]],1],["close-element"],["text","\\n\\n"],["block",["call-to-action"],null,[["route","class"],["education","flash__image"]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  Sutori in the classroom\\n"]],"locals":[]},{"statements":[["text","    Discover EDU\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/flash-education/template.hbs" },
    });
  }),
  define("frontend/components/footing-display/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({ classNames: ["footing-display"] });
  }),
  define("frontend/components/footing-display/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "dnbecNet",
      block:
        '{"statements":[["open-element","p",[]],["static-attr","class","footing-display__title"],["flush-element"],["yield","default"],["close-element"],["text","\\n\\n"],["block",["call-to-action-sign-up"],null,null,0],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","Try Sutori, it\'s free"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/footing-display/template.hbs" },
    });
  }),
  define("frontend/components/form-check-box/component", [
    "exports",
    "ember",
    "frontend/mixins/form-element",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["form-check-box"],
      actions: {
        toggle: function (e, t, n) {
          n.set("isWaiting", !1);
        },
      },
    });
  }),
  define("frontend/components/form-check-box/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "txjCWGtg",
      block:
        '{"statements":[["partial","components/form-elements/errors"],["text","\\n\\n"],["block",["check-box"],null,[["action","checked","toggleOnClickOnLabel"],[["helper",["action"],[["get",[null]],"toggle"],null],["get",["value"]],false]],0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/form-check-box/template.hbs" },
    });
  }),
  define("frontend/components/form-field/component", [
    "exports",
    "ember",
    "frontend/mixins/form-element",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["form-field"],
      classNameBindings: ["disabled"],
      type: "text",
      fieldId: t.default.computed.alias("formElementId"),
      readonly: t.default.computed("disabled", function () {
        return !!this.get("disabled") || void 0;
      }),
    });
  }),
  define("frontend/components/form-field/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "11lDliHS",
      block:
        '{"statements":[["block",["if"],[["get",["labelTemplate"]]],null,1,0],["text","\\n"],["partial","components/form-elements/explanation"],["text","\\n\\n"],["partial","components/form-elements/errors"],["text","\\n\\n"],["append",["helper",["input"],[["helper",["-input-type"],[["get",["type"]]],null]],[["name","value","type","placeholder","required","accept","size","id","maxlength","readonly","min","max"],[["get",["name"]],["get",["value"]],["get",["type"]],["get",["placeholder"]],["get",["required"]],["get",["accept"]],["get",["size"]],["get",["fieldId"]],["get",["maxlength"]],["get",["readonly"]],["get",["min"]],["get",["max"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["partial","components/form-elements/label"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["partial",["get",["labelTemplate"]]],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/form-field/template.hbs" },
    });
  }),
  define("frontend/components/form-generic-errors/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["form-generic-errors"],
      hasErrors: t.default.computed.notEmpty("errors"),
    });
  }),
  define("frontend/components/form-generic-errors/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "KgNo2FxO",
      block:
        '{"statements":[["block",["if"],[["get",["hasErrors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","message error"],["flush-element"],["append",["unknown",["errors","firstObject"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/form-generic-errors/template.hbs",
      },
    });
  }),
  define("frontend/components/form-location/component", [
    "exports",
    "ember",
    "frontend/mixins/form-element",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["form-location"],
      type: "text",
      didInsertElement: function () {
        var e = this;
        t.default.run.scheduleOnce("afterRender", function () {
          var n = e.$("input"),
            s = new google.maps.places.Autocomplete(n[0]);
          s.setTypes(["(cities)"]),
            n.on("keydown", function (e) {
              $(".pac-container").is(":visible") &&
                13 === e.keyCode &&
                e.preventDefault();
            }),
            google.maps.event.addListener(s, "place_changed", function () {
              t.default.run(function () {
                var t = s.getPlace();
                e.get("user").set(e.get("for"), t.formatted_address),
                  e.get("action") && e.sendAction("action", t);
              });
            });
        });
      },
    });
  }),
  define("frontend/components/form-location/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "l4a2r80c",
      block:
        '{"statements":[["block",["if"],[["get",["labelTemplate"]]],null,1,0],["text","\\n"],["partial","components/form-elements/explanation"],["text","\\n\\n"],["partial","components/form-elements/errors"],["text","\\n\\n"],["append",["helper",["input"],[["helper",["-input-type"],[["get",["type"]]],null]],[["name","value","type","placeholder","required","accept","size","id","maxlength"],[["get",["name"]],["get",["value"]],["get",["type"]],["get",["placeholder"]],["get",["required"]],["get",["accept"]],["get",["size"]],["get",["fieldId"]],["get",["maxlength"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["partial","components/form-elements/label"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["partial",["get",["labelTemplate"]]],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/form-location/template.hbs" },
    });
  }),
  define("frontend/components/form-search/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["form-search"],
      requiredInput: ["for"],
      actions: {
        submit: function () {
          this.sendAction();
        },
      },
    });
  }),
  define("frontend/components/form-search/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "U0MjBY5s",
      block:
        '{"statements":[["append",["helper",["form-field"],null,[["for","type","placeholder","object"],[["get",["for"]],"search","Search...",["get",["parentView","for"]]]]],false],["text","\\n"],["open-element","button",[]],["static-attr","type","submit"],["modifier",["action"],[["get",[null]],"submit"]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/form-search/template.hbs" },
    });
  }),
  define("frontend/components/form-select/component", [
    "exports",
    "ember",
    "frontend/mixins/form-element",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["form-select"],
      selectId: t.default.computed.alias("formElementId"),
      hasPlaceholder: t.default.computed.notEmpty("placeholder"),
      didInsertElement: function () {
        this.updatePlaceholderStyle();
      },
      updatePlaceholderStyle: t.default.observer("value", function () {
        this.$() &&
          (t.default.isEmpty(this.get("value"))
            ? this.$("select").addClass("placeholder")
            : this.$("select").removeClass("placeholder"));
      }),
      actions: {
        changeSelection: function () {
          var e = this.$("select")[0].selectedIndex;
          this.get("hasPlaceholder") && (e -= 1);
          var t = this.get("options")[e];
          this.set("value", t);
        },
      },
    });
  }),
  define("frontend/components/form-select/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "vaQ625SC",
      block:
        '{"statements":[["partial","components/form-elements/label"],["text","\\n\\n"],["partial","components/form-elements/errors"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","select-wrapper"],["flush-element"],["text","\\n  "],["open-element","select",[]],["dynamic-attr","id",["unknown",["selectId"]],null],["dynamic-attr","name",["unknown",["name"]],null],["modifier",["action"],[["get",[null]],"changeSelection"],[["on"],["change"]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasPlaceholder"]]],null,1],["block",["each"],[["get",["options"]]],[["key"],["@index"]],0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","option",[]],["dynamic-attr","value",["concat",[["get",["item"]]]]],["dynamic-attr","selected",["helper",["is-equal"],[["get",["item"]],["get",["value"]]],null],null],["flush-element"],["append",["get",["item"]],false],["close-element"],["text","\\n"]],"locals":["item"]},{"statements":[["text","      "],["open-element","option",[]],["static-attr","disabled",""],["static-attr","selected",""],["flush-element"],["append",["unknown",["placeholder"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/form-select/template.hbs" },
    });
  }),
  define("frontend/components/form-textarea/component", [
    "exports",
    "ember",
    "frontend/mixins/form-element",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["form-element", "form-textarea"],
      classNameBindings: ["errors:error", "name"],
      focusOnRender: !1,
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          this.$("textarea").keypress(function (n) {
            t.default.run(function () {
              e._isNewlineKey(n) &&
                t.default.isPresent(e.get("enterPressed")) &&
                e.sendAction("enterPressed");
            });
          });
      },
      _notWaitingAnymore: t.default.observer(
        "isWaiting",
        "focusOnRender",
        function () {
          var e = this;
          this.$() &&
            !this.get("isWaiting") &&
            this.get("focusOnRender") &&
            t.default.run.scheduleOnce("afterRender", function () {
              e.$("textarea").focus();
            });
        }
      ),
      _isNewlineKey: function (e) {
        return 13 === e.which || 13 === e.keyCode;
      },
    });
  }),
  define("frontend/components/form-textarea/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "/Mtu1ax6",
      block:
        '{"statements":[["partial","components/form-elements/label"],["text","\\n\\n"],["partial","components/form-elements/errors"],["text","\\n\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["textarea-container ",["helper",["if"],[["get",["isWaiting"]],"is-loading"],null]]]],["flush-element"],["text","\\n  "],["append",["helper",["textarea"],null,[["name","value","placeholder","rows","disabled","required","id","autosize","focusOnRender"],[["get",["name"]],["get",["value"]],["get",["placeholder"]],["get",["rows"]],["get",["disabled"]],["get",["required"]],["get",["fieldId"]],true,["get",["focusOnRender"]]]]],false],["text","\\n"],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: { moduleName: "frontend/components/form-textarea/template.hbs" },
    });
  }),
  define("frontend/components/from-now/component", [
    "exports",
    "ember",
    "frontend/utils/pollster",
    "npm:moment",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend({
      tagName: "time",
      fromNow: t.default.computed("date", function () {
        return (0, s.default)(this.get("date")).fromNow();
      }),
      pollster: t.default.computed(function () {
        return n.default.create({
          component: this,
          interval: 30,
          onPoll: function () {
            this.get("component").notifyPropertyChange("date");
          },
        });
      }),
      didInsertElement: function () {
        var e = this;
        this._super(),
          t.default.run.scheduleOnce("afterRender", function () {
            e.get("pollster").start();
          });
      },
      willDestroyElement: function () {
        this._super(), this.get("pollster").stop();
      },
    });
  }),
  define("frontend/components/from-now/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "u8QOhal6",
      block:
        '{"statements":[["append",["unknown",["fromNow"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/from-now/template.hbs" },
    });
  }),
  define("frontend/components/head-content", [
    "exports",
    "ember",
    "frontend/templates/head",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({
      tagName: "",
      model: t.default.inject.service("head-data"),
      layout: n.default,
    });
  }),
  define("frontend/components/head-layout", [
    "exports",
    "ember",
    "ember-cli-head/templates/components/head-layout",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({ tagName: "", layout: n.default });
  }),
  define("frontend/components/head-tag", [
    "exports",
    "ember-cli-meta-tags/components/head-tag",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/head-tags", [
    "exports",
    "ember-cli-meta-tags/components/head-tags",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/heading-display-paragraph/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["heading-display-paragraph"],
      tagName: "p",
    });
  }),
  define("frontend/components/heading-display-paragraph/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "zUi+FOh4",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/heading-display-paragraph/template.hbs",
      },
    });
  }),
  define("frontend/components/heading-display-title/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["heading-display-title"],
      tagName: "h3",
    });
  }),
  define("frontend/components/heading-display-title/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "1gZum05D",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/heading-display-title/template.hbs",
      },
    });
  }),
  define("frontend/components/heading-display/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({ classNames: ["heading-display"] });
  }),
  define("frontend/components/heading-display/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "n8ceYYN4",
      block:
        '{"statements":[["yield","default",[["helper",["hash"],null,[["title","paragraph"],[["helper",["component"],["heading-display-title"],null],["helper",["component"],["heading-display-paragraph"],null]]]]]],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/heading-display/template.hbs" },
    });
  }),
  define("frontend/components/help-categories/component", [
    "exports",
    "ember",
    "ember-concurrency",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({
      classNames: ["help-categories"],
      store: t.default.inject.service(),
      loadHelpCategories: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2), this.get("store").findAll("help-category")
                    );
                  case 2:
                    (t = e.sent), this.set("helpCategories", t);
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).on("init"),
      sortHelpCategoriesBy: ["position"],
      sortedHelpCategories: t.default.computed.sort(
        "helpCategories",
        "sortHelpCategoriesBy"
      ),
    });
  }),
  define("frontend/components/help-categories/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "euElnhaZ",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","categories-list"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["flush-element"],["text","Categories"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["sortedHelpCategories"]]],null,1],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["append",["unknown",["category","name"]],false]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["flush-element"],["block",["link-to"],["helpCategory",["get",["category"]]],null,0],["close-element"],["text","\\n"]],"locals":["category"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/help-categories/template.hbs" },
    });
  }),
  define("frontend/components/help-item/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({ classNames: ["help-item"] });
  }),
  define("frontend/components/help-item/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "dOHgqd6c",
      block:
        '{"statements":[["open-element","h4",[]],["static-attr","class","help-item-question"],["flush-element"],["text","\\n  "],["append",["unknown",["helpItem","question"]],false],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","help-item-answer"],["flush-element"],["text","\\n  "],["append",["unknown",["helpItem","answerHtmlSafe"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/help-item/template.hbs" },
    });
  }),
  define("frontend/components/help-items-list/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["help-items-list"],
      title: "",
      isTitleEmpty: t.default.computed.empty("title"),
      showTitle: t.default.computed.not("isTitleEmpty"),
    });
  }),
  define("frontend/components/help-items-list/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "sabkMNf0",
      block:
        '{"statements":[["block",["if"],[["get",["showTitle"]]],null,2],["open-element","ol",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["helpItems"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["append",["unknown",["helpItem","question"]],false]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["flush-element"],["text","\\n      "],["block",["link-to"],["helpItem",["get",["helpItem"]]],null,0],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["helpItem"]},{"statements":[["text","  "],["open-element","h3",[]],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/help-items-list/template.hbs" },
    });
  }),
  define("frontend/components/hero-display-background/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["hero-display-background"],
    });
  }),
  define("frontend/components/hero-display-background/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "BBpIvOTD",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/hero-display-background/template.hbs",
      },
    });
  }),
  define("frontend/components/hero-display-body/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["hero-display-body"],
    });
  }),
  define("frontend/components/hero-display-body/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "IsRdlZOq",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/hero-display-body/template.hbs",
      },
    });
  }),
  define("frontend/components/hero-display/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["hero-display"],
      tagName: "section",
    });
  }),
  define("frontend/components/hero-display/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "zbomQxvh",
      block:
        '{"statements":[["yield","default",[["helper",["hash"],null,[["background","body"],[["helper",["component"],["hero-display-background"],null],["helper",["component"],["hero-display-body"],null]]]]]],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/hero-display/template.hbs" },
    });
  }),
  define("frontend/components/html5-audio", [
    "exports",
    "ember-html5-audio/components/html5-audio",
  ], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/components/html5-video/component", [
    "exports",
    "ember",
    "frontend/mixins/responds-to-in-viewport",
    "ember-concurrency",
    "frontend/mixins/loadable-video-player",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, o.default, {
      tagName: "video",
      classNames: ["html5-video"],
      attributeBindings: ["controls", "preload", "autoplay", "muted"],
      controls: !0,
      preload: "none",
      autoplay: null,
      muted: null,
      loadVideoTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    "none" === this.get("preload") &&
                      this.set("preload", "metadata");
                  case 1:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
    });
  }),
  define("frontend/components/html5-video/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "EwbRzwoP",
      block:
        '{"statements":[["block",["each"],[["get",["sources"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","source",[]],["dynamic-attr","src",["get",["src"]],null],["flush-element"],["close-element"],["text","\\n"]],"locals":["src"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/html5-video/template.hbs" },
    });
  }),
  define("frontend/components/illiquid-model", [
    "exports",
    "liquid-fire/components/illiquid-model",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/infinite-scroll/component", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-scroll",
    "ember-responds-to/mixins/responds-to-resize",
    "frontend/mixins/component-with-required-input",
    "ember-concurrency",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Component.extend(n.default, s.default, o.default, {
      classNames: ["infinite-scroll"],
      store: t.default.inject.service(),
      analytics: t.default.inject.service(),
      requiredInput: [
        "models",
        "modelName",
        "perPageOnFirstPage",
        "perPage",
        "pageToLoad",
        "totalNumberOfModels",
      ],
      queryParams: {},
      distanceFromBottomForLoad: t.default
        .computed(function () {
          return 200;
        })
        .readOnly(),
      init: function () {
        this._super(), this.get("hasModels") || this._loadNextPage();
      },
      checkIfLoadNextPage: t.default.on("scroll", "resize", function () {
        if (this.get("canLoadNextPage")) {
          var e = this.$().offset().top + this.$().outerHeight(),
            t = $(window).height() + $(window).scrollTop();
          e - this.get("distanceFromBottomForLoad") < t && this._loadNextPage();
        }
      }),
      hasModels: t.default.computed.notEmpty("models"),
      isTrackingAnalytics: t.default.computed.notEmpty("analyticsModelType"),
      numberOfModels: t.default.computed.reads("models.length"),
      canLoadNextPage: t.default.computed(
        "isLoading",
        "totalNumberOfModels",
        "pageToLoad",
        "perPage",
        "perPageOnFirstPage",
        function () {
          var e = this.get("pageToLoad") - 1,
            t = this._getPagingQueryParams(
              e,
              this.get("perPage"),
              this.get("perPageOnFirstPage")
            ),
            n = t.page,
            s = t.perPage,
            o = t.padding,
            a = o + n * s;
          return !this.get("isLoading") && a < this.get("totalNumberOfModels");
        }
      ),
      isLoading: t.default.computed.reads("loadPageTask.isRunning"),
      loadPageTask: (0, a.task)(
        regeneratorRuntime.mark(function e() {
          var n, s, o, a, i, l, r;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this._getPagingQueryParams(
                        this.get("pageToLoad"),
                        this.get("perPage"),
                        this.get("perPageOnFirstPage")
                      )),
                      (s = n.page),
                      (o = n.perPage),
                      (a = n.padding),
                      (i = { page: s, per_page: o, padding: a }),
                      t.default.merge(i, this.get("queryParams")),
                      this.get("isTrackingAnalytics") &&
                        this.get("hasModels") &&
                        this.get(
                          "analytics"
                        ).trackEvent("Infinite scroll - Load page", {
                          "Page number": this.get("pageToLoad"),
                          "Model type": this.get("analyticsModelType"),
                        }),
                      (e.next = 9),
                      this.get("store").query(this.get("modelName"), i)
                    );
                  case 9:
                    if (
                      ((l = e.sent),
                      this.get("models").pushObjects(l.toArray()),
                      (r = l.meta.total),
                      !t.default.isNone(r))
                    ) {
                      e.next = 14;
                      break;
                    }
                    throw new Error(
                      "Expected the back-end API to pass a 'total' meta-property on the response."
                    );
                  case 14:
                    this.sendAction("pageLoaded", r);
                  case 15:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      _loadNextPage: function () {
        this.get("loadPageTask").perform();
      },
      _getPagingQueryParams: function (e, t, n) {
        return 1 === e
          ? { page: 1, perPage: n, padding: 0 }
          : { page: e - 1, perPage: t, padding: n };
      },
    });
  }),
  define("frontend/components/infinite-scroll/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "ltys1qeV",
      block:
        '{"statements":[["yield","default"],["text","\\n\\n"],["block",["if"],[["get",["isLoading"]]],null,2],["text","\\n"],["block",["if"],[["get",["canLoadNextPage"]]],null,1]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","Load more"]],"locals":[]},{"statements":[["text","  "],["block",["link-to"],[["helper",["query-params"],null,[["page"],[["get",["pageToLoad"]]]]]],[["rel","class"],["next","link-load-more"]],0],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","loader-wrapper"],["flush-element"],["text","\\n    "],["partial","helpers/loader"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/infinite-scroll/template.hbs" },
    });
  }),
  define("frontend/components/info-tooltip/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
    "frontend/mixins/tooltipable",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["info-tooltip"],
      requiredInput: ["text", "placement"],
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.makeTooltipable(this.$(".button-show-tooltip"));
      },
    });
  }),
  define("frontend/components/info-tooltip/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "aQ4+iBWf",
      block:
        '{"statements":[["open-element","button",[]],["static-attr","class","button-show-tooltip"],["static-attr","type","button"],["static-attr","tabindex","-1"],["dynamic-attr","data-title",["unknown",["text"]],null],["dynamic-attr","data-placement",["unknown",["placement"]],null],["dynamic-attr","data-container",["unknown",["containerSelector"]],null],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/info-tooltip/template.hbs" },
    });
  }),
  define("frontend/components/inplace-editor/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["inplace-editor"],
      classNameBindings: ["isFocused", "nameAsCss"],
      placeholder: "Change the title",
      submitOnEnter: !0,
      name: "",
      hasTextChanged: t.default
        .computed("model.hasDirtyAttributes", "oldText", "text", function () {
          return (
            this.get("model.hasDirtyAttributes") &&
            this.get("oldText") !== this.get("text")
          );
        })
        .readOnly(),
      nameAsCss: t.default
        .computed("name", function () {
          return t.default.isBlank(this.get("name"))
            ? ""
            : "inplace-editor-" + this.get("name").dasherize();
        })
        .readOnly(),
      willDestroyElement: function () {
        this._super.apply(this, arguments), this._saveIfChanged();
      },
      _saveIfChanged: function () {
        var e = this.get("model"),
          n =
            t.default.isPresent(e) &&
            !e.get("isDestroyed") &&
            !e.get("isDeleted");
        n && this.get("hasTextChanged") && e.save();
      },
      actions: {
        edit: function () {
          this.set("isFocused", !0),
            this.sendAction("focusChanged", !0),
            this.set("oldText", this.get("text"));
        },
        acceptChanges: function () {
          this._saveIfChanged(),
            this.set("isFocused", !1),
            this.sendAction("focusChanged", !1);
        },
        newLineInserted: function () {
          this.get("submitOnEnter") &&
            (this.$("textarea").blur(),
            this.get("submitAction") && this.sendAction("submitAction"));
        },
      },
    });
  }),
  define("frontend/components/inplace-editor/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "gaXtXMx/",
      block:
        '{"statements":[["append",["helper",["inplace-textarea"],null,[["focus-in","focus-out","insert-newline","value","placeholder","rows","autosize","submitOnEnter"],[["helper",["action"],[["get",[null]],"edit"],null],["helper",["action"],[["get",[null]],"acceptChanges"],null],["helper",["action"],[["get",[null]],"newLineInserted"],null],["get",["text"]],["get",["placeholder"]],1,true,["get",["submitOnEnter"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/inplace-editor/template.hbs" },
    });
  }),
  define("frontend/components/inplace-textarea/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.TextArea.extend({
      clientInformation: t.default.inject.service(),
      _setupInplaceEditorTextarea: t.default.on(
        "didInsertElement",
        function () {
          var e = this;
          this.$().keypress(function (t) {
            if (e.get("submitOnEnter") && 13 === t.which)
              return $(e).blur(), !1;
          }),
            this.get("clientInformation.isOnIpad") &&
              t.default.run.scheduleOnce("afterRender", function () {
                e.$().focus(), e.$().blur(), e.$().hide().show(0);
              });
        }
      ),
    });
  }),
  define("frontend/components/input-field/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["input-field"],
      classNameBindings: ["errors:error", "name"],
    });
  }),
  define("frontend/components/input-field/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "WGfBi4lf",
      block:
        '{"statements":[["append",["helper",["input"],[["helper",["-input-type"],[["get",["type"]]],null]],[["name","value","type","placeholder","accept"],[["get",["name"]],["get",["value"]],["get",["type"]],["get",["placeholder"]],["get",["accept"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["errors"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","error message"],["flush-element"],["append",["unknown",["errors","firstObject"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","error message"],["flush-element"],["append",["unknown",["errors","firstObject","message"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["errors","firstObject","message"]]],null,1,0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/input-field/template.hbs" },
    });
  }),
  define("frontend/components/interactive-tour/component", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-scroll",
    "ember-responds-to/mixins/responds-to-resize",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["tour-item"],
      classNameBindings: ["isActive"],
      analytics: t.default.inject.service(),
      session: t.default.inject.service(),
      tourAnimationSpeed: t.default
        .computed(function () {
          return 350;
        })
        .readOnly(),
      currentStep: null,
      transitionToStep: null,
      isActive: !1,
      isDisabled: t.default.computed.none("transitionToStep"),
      totalSteps: t.default.computed.alias("steps.length"),
      attachedTo: t.default.computed.alias("currentItem.attachTo"),
      orientation: t.default.computed.alias("currentItem.orientation"),
      offset: t.default.computed.alias("currentItem.offset"),
      position: t.default.computed.alias("currentItem.position"),
      zIndex: t.default.computed.alias("currentItem.zIndex"),
      isVisible: t.default.computed(
        "currentStep",
        "transitionToStep",
        function () {
          return (
            null !== this.get("currentStep") ||
            null !== this.get("transitionToStep")
          );
        }
      ),
      isLastStep: t.default.computed("currentStep", "totalSteps", function () {
        return this.get("currentStep") === this.get("totalSteps");
      }),
      proceedText: t.default.computed("isLastStep", function () {
        return this.get("isLastStep") ? "Finish" : "Continue";
      }),
      currentItem: t.default.computed("steps.[]", "currentStep", function () {
        var e = this.get("currentStep") || 1;
        return this.get("steps")[e - 1];
      }),
      _initializeTour: t.default.on(
        "didInsertElement",
        t.default.observer("tourName", function () {
          var e = this;
          t.default.run.scheduleOnce("afterRender", function () {
            e.sendAction("action", e);
          });
        })
      ),
      _refreshTourItem: t.default.on(
        "resize",
        t.default.observer("currentStep", function () {
          var e = this;
          t.default.run.scheduleOnce("afterRender", function () {
            e._notDestroyed() &&
              !e.get("isDisabled") &&
              (e._isAttachedToDeadElement()
                ? e.performTransition()
                : (e._repositionItem(), e._scrollToItem()));
          });
        })
      ),
      _repositionItemOnScroll: t.default.on("scroll", function () {
        this._repositionItem();
      }),
      performTransition: function () {
        var e = this;
        this._notDestroyed() &&
          (this.get("isActive") && this.fadeOutTourItem(),
          t.default.run.later(function () {
            e._notDestroyed() &&
              (e.get("transitionToStep")
                ? e.fadeInTourItem()
                : e._updateCurrentStep());
          }, this.get("tourAnimationSpeed")));
      },
      fadeOutTourItem: function () {
        var e = this;
        t.default.run.scheduleOnce("afterRender", function () {
          e.set("isActive", !1);
        });
      },
      fadeInTourItem: function () {
        var e = this;
        t.default.run.scheduleOnce("afterRender", function () {
          e._notDestroyed() &&
            (e._skipTransitionToInvalidSteps(), e._updateCurrentStep()),
            e.set("isActive", !0);
        });
      },
      _isAttachedToDeadElement: function () {
        return 0 === $(this.get("attachedTo")).length;
      },
      _notDestroyed: function () {
        return this.$() && this.$(".message");
      },
      _markAsComplete: function () {
        var e = this.store.createRecord("tour-completion", {
          user: this.get("session.currentUser"),
          tourName: this.get("tourName"),
        });
        e.save();
      },
      _transitionToStep: function (e) {
        this.set("transitionToStep", e), this.performTransition();
      },
      _findStepByIdentifier: function (e) {
        return this.get("steps").mapBy("identifier").indexOf(e) + 1;
      },
      _isInCategory: function (e) {
        return this.get("currentItem.category") === e;
      },
      _updateCurrentStep: function () {
        var e = this;
        this.set("currentStep", this.get("transitionToStep")),
          t.default.run.scheduleOnce("afterRender", function () {
            e.setProperties({
              currentTitle: e.get("currentItem.title"),
              currentMessage: t.default.String.htmlSafe(
                e.get("currentItem.message")
              ),
            });
          });
      },
      _skipTransitionToInvalidSteps: function () {
        for (
          var e = this.get("transitionToStep");
          0 === this._getAttachedDomForStep(e).length;

        )
          if (((e += 1), e > this.get("totalSteps"))) {
            e = null;
            break;
          }
        this.set("transitionToStep", e);
      },
      _getAttachedDomForStep: function (e) {
        return null == e ? [] : $(this.get("steps")[e - 1].attachTo);
      },
      _repositionItem: function () {
        if (!this._isAttachedToDeadElement()) {
          var e = $(this.get("attachedTo")),
            t = e.offset().top,
            n = e.offset().left;
          if (
            ((t -=
              "fixed" === this.get("position") ? $(window).scrollTop() : 0),
            (n -=
              "fixed" === this.get("position") ? $(window).scrollLeft() : 0),
            (t += "bottom" === this.get("orientation") ? e.outerHeight() : 0),
            (n += "right" === this.get("orientation") ? e.outerWidth() : 0),
            this.get("offset"))
          ) {
            var s = this.get("orientation");
            ("top" !== s && "bottom" !== s) ||
              (n +=
                (e.outerWidth() - this.$(".popover").outerWidth()) *
                this.get("offset")),
              ("left" !== s && "right" !== s) ||
                (t +=
                  (e.outerHeight() - this.$(".popover").outerHeight()) *
                  this.get("offset"));
          }
          this.$().css({
            zIndex: this.get("zIndex"),
            position: this.get("position"),
            top: t,
            left: n,
          });
        }
      },
      _scrollToItem: function () {
        if ("fixed" !== this.get("position")) {
          var e = $(".application-header"),
            t = $(this.get("attachedTo")),
            n = this.$(".popover"),
            s = Math.min(t.offset().top, n.offset().top);
          $("html, body").animate(
            { scrollTop: s - e.height() - 20 + "px" },
            "fast"
          );
        }
      },
      actions: {
        start: function () {
          this.setProperties({ currentStep: null, transitionToStep: 1 }),
            t.default.run.schedule("afterRender", this, function () {
              this.performTransition();
            }),
            this.get("analytics").trackEvent("Tour Start", {
              Name: this.get("tourName"),
              "Total number of steps": this.get("totalSteps"),
            });
        },
        stop: function () {
          this.get("isDestroyed") ||
            this.setProperties({ currentStep: null, transitionToStep: null });
        },
        skip: function () {
          this.get("isDisabled") ||
            (this.get("analytics").trackEvent("Tour Skip", {
              Name: this.get("tourName"),
              "Step number": this.get("currentStep"),
              "Total number of steps": this.get("totalSteps"),
            }),
            this._markAsComplete(),
            this._transitionToStep(null));
        },
        proceed: function () {
          this.get("isDisabled") ||
            (this.get("isLastStep")
              ? (this.get("analytics").trackEvent("Tour Complete", {
                  Name: this.get("tourName"),
                  "Total number of steps": this.get("totalSteps"),
                }),
                this._markAsComplete(),
                this._transitionToStep(null))
              : this._transitionToStep(this.get("currentStep") + 1));
        },
        jumpToStep: function (e) {
          this.get("isDisabled") ||
            this._transitionToStep(this._findStepByIdentifier(e));
        },
        refresh: function (e) {
          this.get("isVisible") &&
            this._isInCategory(e) &&
            this._refreshTourItem();
        },
      },
    });
  }),
  define("frontend/components/interactive-tour/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "w8Atx3fs",
      block:
        '{"statements":[["block",["pop-over"],null,[["position"],[["get",["currentItem","orientation"]]]],2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","skip-tour-wrapper"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","skip-tour"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"skip"]],["flush-element"],["text","Skip tour"],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","h4",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["currentTitle"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","progress"],["flush-element"],["append",["unknown",["currentStep"]],false],["text","/"],["append",["unknown",["totalSteps"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["currentTitle"]]],null,1],["text","\\n"],["text","  "],["open-element","p",[]],["static-attr","class","message"],["flush-element"],["append",["unknown",["currentMessage"]],false],["close-element"],["text","\\n\\n"],["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["actions ",["helper",["if"],[["get",["isLastStep"]],"is-last-step"],null]]]],["flush-element"],["text","\\n"],["block",["unless"],[["get",["isLastStep"]]],null,0],["text","    "],["open-element","button",[]],["static-attr","class","button-proceed"],["dynamic-attr","disabled",["unknown",["currentItem","requiresAction"]],null],["modifier",["action"],[["get",[null]],"proceed"]],["flush-element"],["append",["unknown",["proceedText"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/interactive-tour/template.hbs" },
    });
  }),
  define("frontend/components/item-comment/component", [
    "exports",
    "ember",
    "frontend/mixins/velocity",
    "frontend/config/environment",
    "ember-concurrency",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, {
      tagName: "li",
      classNames: ["item-comment"],
      classNameBindings: ["itemComment.isSaving:is-saving"],
      session: t.default.inject.service(),
      slideDurationInMilliseconds: t.default
        .computed(function () {
          return t.default.isPresent(s.default.APP.SLIDE_DURATION_IN_MS)
            ? s.default.APP.SLIDE_DURATION_IN_MS
            : 300;
        })
        .readOnly(),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.animate(this.element, "slideDown", {
            duration: this.get("slideDurationInMilliseconds"),
          });
      },
      deleteItemCommentTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      this.animate(this.element, "slideUp", {
                        duration: this.get("slideDurationInMilliseconds"),
                      })
                    );
                  case 2:
                    this.get("itemComment").destroyRecord();
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      author: t.default.computed.reads("itemComment.author"),
      hasAuthor: t.default.computed.notEmpty("author"),
      isOwner: t.default.computed("session.currentUser", "author", function () {
        return this.get("session.currentUser") === this.get("author");
      }),
      canDeleteComment: t.default.computed.or(
        "session.currentUser.isTeacher",
        "isOwner"
      ),
      authorName: t.default.computed(
        "isOwner",
        "author.{fullName,formalName}",
        "session.currentUser.isStudent",
        function () {
          return this.get("isOwner")
            ? "you"
            : this.get("author.isTeacher") &&
              this.get("session.currentUser.isStudent")
            ? this.get("author.formalName")
            : this.get("author.fullName");
        }
      ),
      actions: {
        deleteItemComment: function () {
          this.get("deleteItemCommentTask").perform();
        },
      },
    });
  }),
  define("frontend/components/item-comment/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "b3j2vKhi",
      block:
        '{"statements":[["open-element","p",[]],["static-attr","class","content"],["flush-element"],["append",["unknown",["itemComment","content"]],false],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","footer"],["flush-element"],["text","\\n"],["text","  "],["open-element","span",[]],["static-attr","class","publication-info"],["flush-element"],["text","\\n    "],["append",["helper",["from-now"],null,[["classNames","date"],["publication-time",["get",["itemComment","publicationDate"]]]]],false],["text","\\n"],["block",["if"],[["get",["hasAuthor"]]],null,1],["text","  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["canDeleteComment"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["async-button-with-confirmation"],null,[["action","name","label","question","popoverPosition"],[["helper",["action"],[["get",[null]],"deleteItemComment"],null],"delete-comment","Remove comment","Are you sure you want to remove this comment?","bottom"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      by "],["open-element","span",[]],["dynamic-attr","class",["concat",["author ",["helper",["if"],[["get",["author","isTeacher"]],"is-teacher"],null]]]],["flush-element"],["append",["unknown",["authorName"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/item-comment/template.hbs" },
    });
  }),
  define("frontend/components/item-comments-section/component", [
    "exports",
    "frontend/utils/form-object",
    "ember",
    "ember-concurrency",
    "frontend/utils/runloop-utils",
  ], function (e, t, n, s, o) {
    e.default = n.default.Component.extend({
      tagName: "aside",
      classNames: ["item-comments-section"],
      analytics: n.default.inject.service(),
      session: n.default.inject.service(),
      store: n.default.inject.service(),
      initialNumberOfShownComments: 3,
      numberOfCommentsInEachUnit: 15,
      isSimulation: !1,
      totalNumberOfComments: n.default.computed.reads("itemComments.length"),
      sortedItemComments: n.default.computed(
        "itemComments",
        "itemComments.@each.publicationDate",
        function () {
          return this.get("itemComments").sortBy("publicationDate").reverse();
        }
      ),
      notAllCommentsAreShown: n.default.computed(
        "maximalNumberOfCurrentlyShownComments",
        "totalNumberOfComments",
        function () {
          return (
            this.get("maximalNumberOfCurrentlyShownComments") <
            this.get("totalNumberOfComments")
          );
        }
      ),
      visibleItemComments: n.default.computed(
        "sortedItemComments",
        "maximalNumberOfCurrentlyShownComments",
        function () {
          return this.get("sortedItemComments").slice(
            0,
            this.get("maximalNumberOfCurrentlyShownComments") || 0
          );
        }
      ),
      _resetNewComment: n.default.on("init", function () {
        this.set("newCommentObject", t.default.create({ content: "" }));
      }),
      _resetMaximalNumberOfCurrentlyShownComments: n.default.on(
        "init",
        function () {
          this.set(
            "maximalNumberOfCurrentlyShownComments",
            this.get("initialNumberOfShownComments")
          );
        }
      ),
      _closeComments: n.default.observer("isOpen", function () {
        this.get("isOpen") ||
          this._resetMaximalNumberOfCurrentlyShownComments();
      }),
      postCommentTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          var t, s, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((t = this.get("newCommentObject")),
                      (s = t.get("content").trim()),
                      !n.default.isBlank(s))
                    ) {
                      e.next = 4;
                      break;
                    }
                    return e.abrupt("return");
                  case 4:
                    if (
                      (t.set("loading", !0),
                      (a = this.get("store").createRecord("item-comment", {
                        content: s,
                        schoolClass: this.get("schoolClass"),
                        item: this.get("storyItem"),
                        author: this.get("session.currentUser"),
                        isRemoved: !1,
                      })),
                      (e.prev = 6),
                      this.get("isSimulation"))
                    ) {
                      e.next = 11;
                      break;
                    }
                    return (e.next = 10), a.save();
                  case 10:
                    this.get("analytics").trackStoryEvent(
                      "Item Comment Posted",
                      this.get("storyItem.story.content"),
                      { "School class id": this.get("schoolClass.id") }
                    );
                  case 11:
                    return (
                      (e.prev = 11),
                      (e.next = 14),
                      (0, o.waitUntilNextRunloop)()
                    );
                  case 14:
                    return this._resetNewComment(), e.finish(11);
                  case 16:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[6, , 11, 16]]
          );
        })
      ).drop(),
      actions: {
        postComment: function () {
          this.get("postCommentTask").perform();
        },
        showMore: function () {
          this.incrementProperty(
            "maximalNumberOfCurrentlyShownComments",
            this.get("numberOfCommentsInEachUnit")
          );
        },
      },
    });
  }),
  define("frontend/components/item-comments-section/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "0noUTfQg",
      block:
        '{"statements":[["block",["if"],[["get",["isOpen"]]],null,3]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","show-more"],["modifier",["action"],[["get",[null]],"showMore"]],["flush-element"],["text","show more comments"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["item-comment"],null,[["itemComment"],[["get",["itemComment"]]]]],false],["text","\\n"]],"locals":["itemComment"]},{"statements":[["text","    "],["append",["helper",["f","form-textarea"],null,[["enterPressed","for","rows","placeholder","disabled","isWaiting"],[["helper",["action"],[["get",[null]],"postComment"],null],"content","1","Write your comment here...",["get",["newCommentObject","loading"]],["get",["newCommentObject","loading"]]]]],false],["text","\\n\\n"],["text","    "],["append",["unknown",["f","form-submit"]],false],["text","\\n"]],"locals":["f"]},{"statements":[["block",["object-form"],null,[["for","action","name"],[["get",["newCommentObject"]],"postComment","new-comment"]],2],["text","\\n"],["text","  "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["visibleItemComments"]]],null,1],["text","  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["notAllCommentsAreShown"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/item-comments-section/template.hbs",
      },
    });
  }),
  define("frontend/components/iubenda-policy/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["iubenda-policy"],
      didInsertElement: function () {
        this._super.apply(this, arguments),
          t.default.run("afterRender", function () {
            $.getScript("https://cdn.iubenda.com/iubenda.js");
          });
      },
    });
  }),
  define("frontend/components/iubenda-policy/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "+K9S0W6b",
      block:
        '{"statements":[["open-element","a",[]],["static-attr","href","//www.iubenda.com/privacy-policy/214406"],["static-attr","class","iubenda-white iub-body-embed iubenda-embed"],["static-attr","title","Privacy Policy"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/iubenda-policy/template.hbs" },
    });
  }),
  define("frontend/components/ivy-tabs-tab", [
    "exports",
    "ivy-tabs/components/ivy-tabs-tab",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/ivy-tabs-tablist", [
    "exports",
    "ivy-tabs/components/ivy-tabs-tablist",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/ivy-tabs-tabpanel", [
    "exports",
    "ivy-tabs/components/ivy-tabs-tabpanel",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/ivy-tabs", [
    "exports",
    "ivy-tabs/components/ivy-tabs",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/light-box/component", [
    "exports",
    "ember",
    "npm:imagesloaded",
    "ember-responds-to/mixins/responds-to-resize",
    "ember-responds-to/mixins/responds-to-scroll",
    "ember-component-inbound-actions/inbound-actions",
    "frontend/mixins/velocity",
    "frontend/mixins/fastclickable",
    "ember-concurrency",
  ], function (e, t, n, s, o, a, i, l, r) {
    var u = 250;
    (e.FADE_SPEED = u),
      (e.default = t.default.Component.extend(
        s.default,
        o.default,
        a.default,
        i.default,
        l.default,
        {
          classNames: ["light-box"],
          classNameBindings: ["isLoaded", "isActive", "isImageReady"],
          embed: t.default.inject.service(),
          analytics: t.default.inject.service(),
          click: function () {
            this.send("close");
          },
          didInsertElement: function () {
            this._super(), this.makeFastclickable(this.$());
          },
          willDestroyElement: function () {
            this._super(), this.send("close");
          },
          hasCaption: t.default.computed.notEmpty("caption"),
          repositionFigure: t.default.on(
            "resize",
            t.default.observer("isActive", function () {
              var e = this;
              t.default.run.scheduleOnce("afterRender", function () {
                e.get("isActive") && e.get("repositionFigureTask").perform();
              });
            })
          ),
          repositionFigureTask: (0, r.task)(
            regeneratorRuntime.mark(function e() {
              var t, n, s, o, a, i;
              return regeneratorRuntime.wrap(
                function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (e.next = 2), this.loadImage();
                      case 2:
                        return (
                          (e.next = 4), this.get("resizeImageTask").perform()
                        );
                      case 4:
                        this.get("embed.isEmbeddedPage") &&
                          ((t = void 0),
                          this.get("embed.hasParentIFramePageInfo")
                            ? ((n = this.get("embed.parentIFramePageInfo")),
                              (s = n.viewportHeight),
                              (o = n.offsetTop),
                              (a = n.scrollTop),
                              (t =
                                Math.max(a - o, 0) +
                                (s - this.$("figure").outerHeight()) / 2))
                            : ((i = this.get("renderImageComponent").$()),
                              (t =
                                i.offset().top +
                                i.outerHeight() / 2 -
                                this.$("figure").outerHeight() / 2)),
                          this.$("figure").css({
                            position: "absolute",
                            top: t,
                            left: "50%",
                            transform: "translateX(-50%)",
                          })),
                          this.set("isImageReady", !0);
                      case 6:
                      case "end":
                        return e.stop();
                    }
                },
                e,
                this
              );
            })
          ).restartable(),
          loadImage: function () {
            var e = this;
            return new t.default.RSVP.Promise(function (s) {
              (0, n.default)(e.element, function () {
                t.default.run(s);
              });
            });
          },
          resizeImageTask: (0, r.task)(
            regeneratorRuntime.mark(function e() {
              var t, n, s, o, a, i;
              return regeneratorRuntime.wrap(
                function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        if (
                          (this.$("img").css("max-height", ""),
                          this.$("figure").css("max-width", ""),
                          (t = void 0),
                          this.get("embed.isEmbeddedPage") &&
                          this.get("embed.hasParentIFramePageInfo")
                            ? ((n = this.get("embed.parentIFramePageInfo")),
                              (s = n.viewportHeight),
                              (o = n.offsetTop),
                              (a = n.scrollTop),
                              (t = s - Math.max(0, o - a)))
                            : (t = this.$().outerHeight()),
                          this.get("hasCaption") &&
                            (t -= this.$("figcaption").outerHeight()),
                          this.$("img").css("max-height", t),
                          (i = this.$("img").width()),
                          this.$("figure").width() === i)
                        ) {
                          e.next = 12;
                          break;
                        }
                        if (0 !== i) {
                          e.next = 11;
                          break;
                        }
                        return (e.next = 11), (0, r.timeout)(50);
                      case 11:
                        this.$("figure").css(
                          "max-width",
                          this.$("img").width()
                        );
                      case 12:
                      case "end":
                        return e.stop();
                    }
                },
                e,
                this
              );
            })
          ),
          fadeOutTask: (0, r.task)(
            regeneratorRuntime.mark(function e() {
              return regeneratorRuntime.wrap(
                function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (e.next = 2),
                          this.animate(this.element, "fadeOut", { duration: u })
                        );
                      case 2:
                        this.set("isActive", !1);
                      case 3:
                      case "end":
                        return e.stop();
                    }
                },
                e,
                this
              );
            })
          ),
          actions: {
            open: function () {
              this.set("isActive", !0);
              var e = this.get("story");
              t.default.isPresent(e) &&
                this.get("analytics").trackStoryEvent("Lightbox Opened", e, {
                  "Image caption": this.get("caption"),
                  "Image url": this.get("src"),
                }),
                this.animate(this.element, "fadeIn", {
                  duration: u,
                  display: "flex",
                });
            },
            close: function () {
              this.get("fadeOutTask").perform();
            },
          },
        }
      ));
  }),
  define("frontend/components/light-box/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "50Vg/NYt",
      block:
        '{"statements":[["block",["if"],[["get",["isActive"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","figcaption",[]],["flush-element"],["append",["unknown",["caption"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","figure",[]],["flush-element"],["text","\\n    "],["open-element","img",[]],["dynamic-attr","src",["unknown",["src"]],null],["dynamic-attr","alt",["unknown",["caption"]],null],["flush-element"],["close-element"],["text","\\n"],["block",["if"],[["get",["hasCaption"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/light-box/template.hbs" },
    });
  }),
  define("frontend/components/line-text-separator/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["line-text-separator"],
    });
  }),
  define("frontend/components/line-text-separator/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "bqhIebmz",
      block:
        '{"statements":[["open-element","hr",[]],["static-attr","class","bg-line"],["flush-element"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["text","\\n  "],["yield","default"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/line-text-separator/template.hbs",
      },
    });
  }),
  define("frontend/components/link-editor/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["link-editor"],
      initialValue: "",
      placeholder: "Paste a link here...",
      value: t.default.computed.reads("initialValue"),
      _initialize: t.default.on("didInsertElement", function () {
        this.$("input").focus(),
          this.$("input").select(),
          this.makeFastclickable(this.$("button"));
      }),
      _withLinkPrefix: function (e) {
        return e.match(/^\w+:/) ? e : "http://" + e;
      },
      actions: {
        save: function () {
          var e = this.get("value");
          t.default.isBlank(e) ||
            this.sendAction("saveAction", this._withLinkPrefix(e));
        },
        close: function () {
          this.sendAction("closeAction");
        },
      },
    });
  }),
  define("frontend/components/link-editor/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "IvzAb732",
      block:
        '{"statements":[["append",["helper",["input"],null,[["class","value","placeholder","insert-newline","escape-press"],["url",["get",["value"]],["get",["placeholder"]],"save","close"]]],false],["text","\\n"],["open-element","button",[]],["static-attr","class","save"],["modifier",["action"],[["get",[null]],"save"]],["flush-element"],["text","Save"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/link-editor/template.hbs" },
    });
  }),
  define("frontend/components/liquid-bind", [
    "exports",
    "liquid-fire/components/liquid-bind",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/liquid-child", [
    "exports",
    "liquid-fire/components/liquid-child",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/liquid-container", [
    "exports",
    "liquid-fire/components/liquid-container",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/liquid-if", [
    "exports",
    "liquid-fire/components/liquid-if",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  });
define("frontend/components/liquid-measured", [
  "exports",
  "liquid-fire/components/liquid-measured",
], function (e, t) {
  Object.defineProperty(e, "default", {
    enumerable: !0,
    get: function () {
      return t.default;
    },
  }),
    Object.defineProperty(e, "measure", {
      enumerable: !0,
      get: function () {
        return t.measure;
      },
    });
});
define("frontend/components/liquid-outlet", [
  "exports",
  "liquid-fire/components/liquid-outlet",
], function (e, t) {
  Object.defineProperty(e, "default", {
    enumerable: !0,
    get: function () {
      return t.default;
    },
  });
}),
  define("frontend/components/liquid-spacer", [
    "exports",
    "liquid-fire/components/liquid-spacer",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/liquid-sync", [
    "exports",
    "liquid-fire/components/liquid-sync",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/liquid-unless", [
    "exports",
    "liquid-fire/components/liquid-unless",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/liquid-versions", [
    "exports",
    "liquid-fire/components/liquid-versions",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/components/modal-box/component", [
    "exports",
    "ember",
    "frontend/utils/form-object",
    "frontend/mixins/velocity",
    "ember-concurrency",
    "ember-keyboard",
    "frontend/utils/dom",
  ], function (e, t, n, s, o, a, i) {
    var l = 250;
    e.default = t.default.Component.extend(s.default, a.EKMixin, {
      classNames: ["modal"],
      classNameBindings: ["cssClass", "isActive", "blocked"],
      closeOnClickOutside: !0,
      blocked: t.default.computed.reads("formObject.loading"),
      cssClass: t.default.computed("formComponentPath", function () {
        return "page-" + this.get("formComponentPath").split("/").reverse()[0];
      }),
      init: function () {
        this._super.apply(this, arguments),
          this.setProperties({ formObject: n.default.create() }),
          this.set("keyboardActivated", !0);
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.get("isActive") && this._fadeOut(),
          this.send("close");
      },
      fadeInTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (var n = this; ; )
                switch ((e.prev = e.next)) {
                  case 0:
                    this.set("showModalBody", !0),
                      t.default.run.scheduleOnce("afterRender", function () {
                        n.animate(n._modalElement(), "fadeIn", {
                          duration: l,
                          display: "flex",
                        });
                      });
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      fadeOutTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this._fadeOut();
                  case 2:
                    this.set("showModalBody", !1);
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      toggleVisibility: t.default.observer("isActive", function () {
        var e = this;
        this.get("isActive")
          ? ((this._closeOnClickOutside = function (n) {
              t.default.run(function () {
                e.get("closeOnClickOutside") &&
                  e._isOutsideModalBody(n.target) &&
                  e.send("close");
              });
            }),
            this._modalElement().on(i.CLICK_EVENTS, this._closeOnClickOutside),
            this.get("fadeInTask").perform())
          : (this.get("fadeOutTask").perform(),
            this._modalElement().off(
              i.CLICK_EVENTS,
              this._closeOnClickOutside
            ));
      }),
      closeOnEscape: t.default.on((0, a.keyDown)("Escape"), function () {
        this.send("close");
      }),
      _modalElement: function () {
        return $("#modal");
      },
      _isOutsideModalBody: function (e) {
        return (
          (0, i.isOutside)(e, this._modalElement().find(".modal-body")[0]) &&
          (0, i.isInside)(e, this._modalElement()[0])
        );
      },
      _fadeOut: function () {
        return this.animate(this._modalElement(), "fadeOut", { duration: l });
      },
      actions: {
        action: function (e) {
          this.get("action") && this.sendAction("action", e);
        },
        close: function () {
          var e = this.get("tourComponent");
          t.default.isNone(e) || e.send("skip"), this.set("isActive", !1);
          var n = this.get("model");
          n &&
            !n.get("isDestroyed") &&
            n.get("hasDirtyAttributes") &&
            n.rollbackAttributes(),
            this.sendAction("closed");
        },
      },
    });
  }),
  define("frontend/components/modal-box/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "InhhgxKm",
      block:
        '{"statements":[["block",["if"],[["get",["showModalBody"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","article",[]],["dynamic-attr","class",["concat",["modal-body ",["unknown",["cssClass"]]]]],["flush-element"],["text","\\n"],["text","      "],["open-element","header",[]],["flush-element"],["text","\\n        "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n        "],["open-element","button",[]],["static-attr","class","button-close"],["modifier",["action"],[["get",[null]],"close"]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"],["text","      "],["append",["helper",["component"],[["get",["formComponentPath"]]],[["closeModal","action","class","model","schoolClassContext","formObject","customProperties"],[["helper",["action"],[["get",[null]],"close"],null],["helper",["action"],[["get",[null]],"action"],null],"modal-content",["get",["model"]],["get",["schoolClassContext"]],["get",["formObject"]],["get",["customProperties"]]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["ember-wormhole"],null,[["to"],["modal"]],0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/modal-box/template.hbs" },
    });
  }),
  define("frontend/components/modals/audio-uploader", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/mixins/media-uploader",
    "frontend/utils/url",
  ], function (e, t, n, s, o) {
    var a = ["audio/mpeg", "audio/mp3"],
      i = "Sorry, we only accept <em>mp3</em> audio files. Please try again!";
    e.default = t.default.Component.extend(s.default, {
      store: t.default.inject.service(),
      analytics: t.default.inject.service(),
      buttonUseMediaLabel: t.default
        .computed(function () {
          return "Use audio";
        })
        .readOnly(),
      isUploadingMessage: t.default
        .computed(function () {
          return "Your audio is uploading";
        })
        .readOnly(),
      fileUploaderMessage: t.default
        .computed(function () {
          return "Click to upload an audio";
        })
        .readOnly(),
      fileUploaderMimeTypes: t.default
        .computed(function () {
          return a.join(",");
        })
        .readOnly(),
      urlUploaderPlaceholder: t.default
        .computed(function () {
          return "Or paste an audio link hereâ¦";
        })
        .readOnly(),
      audioIsReady: t.default.computed.and("hasAudio", "isNotUploading"),
      mediaIsNotReady: t.default.computed.not("audioIsReady"),
      hasAudio: t.default.computed.notEmpty("audio"),
      isNotUploading: t.default.computed.not("isUploading"),
      showUploadUrlButton: t.default.computed.notEmpty("url"),
      useMediaTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      this._trackEvent("Audio Used"),
                      (e.next = 3),
                      this.get("action")(this.get("audio"))
                    );
                  case 3:
                    this.set("audioUsed", !0), this.sendAction("closeModal");
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadAudioTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n, s, o;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!t.hasMimeTypeOneOf(a)) {
                      e.next = 11;
                      break;
                    }
                    return (
                      (n = t.get("asBlob")), (e.next = 4), this.uploadToS3(n)
                    );
                  case 4:
                    return (
                      (s = e.sent),
                      (o = this.get("store").createRecord("audio-file", {
                        url: s,
                      })),
                      (e.next = 8),
                      o.save()
                    );
                  case 8:
                    this.set("audio", o), (e.next = 12);
                    break;
                  case 11:
                    throw i;
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadViaFileTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this.get("uploadAudioTask").perform(t);
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadViaUrlTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = void 0),
                      (e.prev = 1),
                      (e.next = 4),
                      this.downloadUrl(t)
                    );
                  case 4:
                    (n = e.sent), (e.next = 10);
                    break;
                  case 7:
                    throw (
                      ((e.prev = 7), (e.t0 = e.catch(1)), e.t0.message || i)
                    );
                  case 10:
                    return (
                      (e.next = 12), this.get("uploadAudioTask").perform(n)
                    );
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 7]]
          );
        })
      ),
      deleteAudioTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("audio")), (e.next = 3), t.destroyRecord()
                    );
                  case 3:
                    this.set("audio", null), this.set("url", null);
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _destroyCurrentAudio: function () {
        this.get("hasAudio") &&
          (this.get("audio").destroyRecord(), this.set("audio", null));
      },
      _trackEvent: function (e, t) {
        this.get("analytics").trackEvent("Audio Uploader - " + e, t);
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.get("audioUsed") || this._destroyCurrentAudio();
      },
      actions: {
        cancel: function () {
          this.sendAction("closeModal");
        },
        deleteAudio: function () {
          this.get("deleteAudioTask").perform();
        },
        fetchedFile: function (e) {
          return this.get("uploadMediaTask").perform(
            "uploadViaFileTask",
            { Type: "via file", "File mime": e.get("mime") },
            e
          );
        },
        uploadUrl: function () {
          var e = this.get("url");
          return (
            this.get("uploadMediaTask").perform(
              "uploadViaUrlTask",
              {
                Type: "via url",
                Url: e,
                Host: (0, o.getHost)(e),
                "File extension": (0, o.getExtension)(e),
              },
              e
            ),
            !1
          );
        },
        selectFile: function () {
          this.$("input[type='file']").trigger("click");
        },
      },
    });
  }),
  define("frontend/components/modals/collaborate-on-story", [
    "exports",
    "ember",
    "ember-concurrency",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({
      store: t.default.inject.service(),
      session: t.default.inject.service(),
      logger: t.default.inject.service(),
      analytics: t.default.inject.service(),
      addCollaboratorTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get("store").createRecord(
                        "story-collaboration",
                        { story: this.get("story"), user: t }
                      )),
                      (e.prev = 1),
                      (e.next = 4),
                      n.save()
                    );
                  case 4:
                    this.get("analytics").trackStoryEvent(
                      "Collaborator Added",
                      this.get("story")
                    ),
                      this.sendAction("action"),
                      (e.next = 12);
                    break;
                  case 8:
                    (e.prev = 8),
                      (e.t0 = e.catch(1)),
                      this.get("store").unloadRecord(n),
                      this.get("logger").exception(
                        new Error("Could not create story collaboration"),
                        {
                          exception: e.t0,
                          story: this.get("story"),
                          collaborator: t,
                        }
                      );
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 8]]
          );
        })
      ),
      removeCollaboratorTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get("collaborations").findBy("user", t)),
                      n.deleteRecord(),
                      (e.prev = 2),
                      (e.next = 5),
                      n.save()
                    );
                  case 5:
                    this.get("analytics").trackStoryEvent(
                      "Collaborator Removed",
                      this.get("story")
                    ),
                      this.sendAction("action"),
                      (e.next = 13);
                    break;
                  case 9:
                    (e.prev = 9),
                      (e.t0 = e.catch(2)),
                      n.rollbackAttributes(),
                      this.get("logger").exception(
                        new Error("Could not delete story collaboration"),
                        {
                          exception: e.t0,
                          story: this.get("story"),
                          collaborator: t,
                        }
                      );
                  case 13:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[2, 9]]
          );
        })
      ),
      inviteCollaboratorTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get(
                        "store"
                      ).createRecord("story-collaboration-invitation", {
                        story: this.get("story"),
                        email: t,
                      })),
                      (e.prev = 1),
                      (e.next = 4),
                      n.save()
                    );
                  case 4:
                    this.get(
                      "analytics"
                    ).trackStoryEvent(
                      "Collaborator Invited",
                      this.get("story"),
                      { "Invitee email": t }
                    ),
                      this.sendAction("action"),
                      (e.next = 12);
                    break;
                  case 8:
                    (e.prev = 8),
                      (e.t0 = e.catch(1)),
                      this.get("store").unloadRecord(n),
                      this.get("logger").exception(
                        new Error(
                          "Could not create story collaboration invitation"
                        ),
                        { exception: e.t0, story: this.get("story"), email: t }
                      );
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 8]]
          );
        })
      ),
      removeCollaboratorInvitationTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get("invitations").findBy("email", t)),
                      n.deleteRecord(),
                      this.get("invitations").removeObject(n),
                      (e.prev = 3),
                      (e.next = 6),
                      n.save()
                    );
                  case 6:
                    this.get(
                      "analytics"
                    ).trackStoryEvent(
                      "Collaboration Invitation Removed",
                      this.get("story"),
                      { "Invitee email": t }
                    ),
                      this.sendAction("action"),
                      (e.next = 15);
                    break;
                  case 10:
                    (e.prev = 10),
                      (e.t0 = e.catch(3)),
                      n.rollbackAttributes(),
                      this.get("invitations").pushObject(n),
                      this.get("logger").exception(
                        new Error(
                          "Could not delete story collaboration invitation"
                        ),
                        { exception: e.t0, story: this.get("story"), email: t }
                      );
                  case 15:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[3, 10]]
          );
        })
      ),
      story: t.default.computed.reads("model"),
      collaborations: t.default.computed.reads("story.storyCollaborations"),
      activeCollaborations: t.default.computed(
        "collaborations.@each.isDeleted",
        function () {
          return this.get("collaborations").rejectBy("isDeleted");
        }
      ),
      collaborators: t.default.computed.mapBy("activeCollaborations", "user"),
      displayedCollaborators: t.default.computed(
        "collaborators",
        "story.author",
        "session.currentUser",
        function () {
          var e = this;
          return this.get("collaborators").reject(function (t) {
            return (
              t === e.get("story.author") || t === e.get("session.currentUser")
            );
          });
        }
      ),
      invitations: t.default.computed.reads(
        "story.storyCollaborationInvitations"
      ),
      pendingInvitations: t.default.computed.reads(
        "story.pendingCollaborationInvitations"
      ),
      displayedCollaborations: t.default.computed(
        "displayedCollaborators.[]",
        "pendingInvitations.[]",
        function () {
          var e = [];
          return (
            this.get("displayedCollaborators").forEach(function (t) {
              e.pushObject({
                user: t,
                email: null,
                label: t.get("fullName"),
                removeAction: "removeCollaborator",
              });
            }),
            this.get("pendingInvitations").forEach(function (t) {
              e.pushObject({
                user: null,
                email: t.get("email"),
                label: t.get("email") + " (pending)",
                removeAction: "removeCollaboratorInvitation",
              });
            }),
            e
          );
        }
      ),
      actions: {
        addCollaborator: function (e) {
          this.get("addCollaboratorTask").perform(e);
        },
        removeCollaborator: function (e) {
          this.get("removeCollaboratorTask").perform(e);
        },
        inviteCollaborator: function (e) {
          this.get("inviteCollaboratorTask").perform(e);
        },
        removeCollaboratorInvitation: function (e) {
          this.get("removeCollaboratorInvitationTask").perform(e);
        },
        done: function () {
          this.sendAction("closeModal");
        },
      },
    });
  }),
  define("frontend/components/modals/image-uploader", [
    "exports",
    "ember",
    "ember-concurrency",
    "npm:blueimp-load-image",
    "frontend/mixins/media-uploader",
    "frontend/utils/url",
  ], function (e, t, n, s, o, a) {
    var i = ["image/gif", "image/jpeg", "image/png"],
      l = ["image/gif"],
      r = 0.75,
      u =
        "Sorry, we only accept <em>jpg</em>, <em>png</em> and <em>gif</em> images. Please try again!";
    e.default = t.default.Component.extend(o.default, {
      store: t.default.inject.service(),
      analytics: t.default.inject.service(),
      buttonUseMediaLabel: t.default
        .computed(function () {
          return "Use image";
        })
        .readOnly(),
      isUploadingMessage: t.default
        .computed(function () {
          return "Your image is uploading";
        })
        .readOnly(),
      fileUploaderMessage: t.default
        .computed(function () {
          return "Click to upload an image";
        })
        .readOnly(),
      fileUploaderMimeTypes: t.default
        .computed(function () {
          return i.join(",");
        })
        .readOnly(),
      urlUploaderPlaceholder: t.default
        .computed(function () {
          return "Or paste an image link hereâ¦";
        })
        .readOnly(),
      sizes: t.default.computed.reads("customProperties.sizes"),
      imageIsReady: t.default.computed.and("hasImage", "isNotUploading"),
      mediaIsNotReady: t.default.computed.not("imageIsReady"),
      hasImage: t.default.computed.notEmpty("image"),
      hasNoImage: t.default.computed.not("hasImage"),
      isNotUploading: t.default.computed.not("isUploading"),
      showUploadUrlButton: t.default.computed.notEmpty("url"),
      useMediaTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      this._trackEvent("Image Used"),
                      (e.next = 3),
                      this.get("action")(this.get("image"))
                    );
                  case 3:
                    this.set("imageUsed", !0), this.sendAction("closeModal");
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadImageTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!t.hasMimeTypeOneOf(i)) {
                      e.next = 9;
                      break;
                    }
                    return (
                      (n = this.get("store").createRecord("image-file")),
                      (e.next = 4),
                      n.save()
                    );
                  case 4:
                    return (
                      this.set("image", n),
                      (e.next = 7),
                      this.get("createVersionsTask").perform(n, t)
                    );
                  case 7:
                    e.next = 10;
                    break;
                  case 9:
                    throw u;
                  case 10:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadViaFileTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this.get("uploadImageTask").perform(t);
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadViaUrlTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = void 0),
                      (e.prev = 1),
                      (e.next = 4),
                      this.downloadUrl(t)
                    );
                  case 4:
                    (n = e.sent), (e.next = 10);
                    break;
                  case 7:
                    throw (
                      ((e.prev = 7), (e.t0 = e.catch(1)), e.t0.message || u)
                    );
                  case 10:
                    return (
                      (e.next = 12), this.get("uploadImageTask").perform(n)
                    );
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 7]]
          );
        })
      ),
      deleteImageTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("image")), (e.next = 3), t.destroyRecord()
                    );
                  case 3:
                    this.set("image", null), this.set("url", null);
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      createResizedVersionTask: (0, n.task)(
        regeneratorRuntime.mark(function e(n, s, o, a, i, l, u) {
          var c, d, m, f, p, h, g;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      t.default.debug(
                        "Creating a version for (" + l + ", " + u + ")"
                      ),
                      (e.next = 3),
                      this._resize(o, a, i, l, u)
                    );
                  case 3:
                    for (
                      c = e.sent,
                        d = document.createElement("canvas"),
                        d.width = l,
                        d.height = u,
                        m = d.getContext("2d"),
                        f = m.createImageData(l, u),
                        p = f.data,
                        h = 0;
                      h < p.length;
                      ++h
                    )
                      p[h] = 255 & c[h];
                    return (
                      m.putImageData(f, 0, 0),
                      (e.next = 14),
                      new t.default.RSVP.Promise(function (e) {
                        d.toBlob(
                          function (n) {
                            t.default.run(function () {
                              e(n);
                            });
                          },
                          s.get("mime"),
                          r
                        );
                      })
                    );
                  case 14:
                    return (
                      (g = e.sent),
                      (e.next = 17),
                      this.get("createVersionTask").perform(n, g, l, u)
                    );
                  case 17:
                    return e.abrupt("return", e.sent);
                  case 18:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      createVersionsTask: (0, n.task)(
        regeneratorRuntime.mark(function e(n, s) {
          var o, a, i, r, u, c, d, m;
          return regeneratorRuntime.wrap(
            function (e) {
              for (var f = this; ; )
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this._getOrientation(s);
                  case 2:
                    return (
                      (o = e.sent),
                      (e.next = 5),
                      this._getImageInformation(s, o)
                    );
                  case 5:
                    if (
                      ((a = e.sent),
                      (i = a.dataToScale),
                      (r = a.width),
                      (u = a.height),
                      !l.includes(s.get("mime")))
                    ) {
                      e.next = 16;
                      break;
                    }
                    return (
                      (e.next = 12),
                      this.get("createVersionTask").perform(
                        n,
                        s.get("asBlob"),
                        r,
                        u
                      )
                    );
                  case 12:
                    return (c = e.sent), e.abrupt("return", [c]);
                  case 16:
                    return (
                      (d = this._getSizesOfVersions(r, u).map(function (e) {
                        var t = e.width,
                          o = e.height;
                        return f
                          .get("createResizedVersionTask")
                          .perform(n, s, i, r, u, t, o);
                      })),
                      (e.next = 19),
                      t.default.RSVP.all(d)
                    );
                  case 19:
                    return (m = e.sent), e.abrupt("return", m);
                  case 21:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      createVersionTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t, n, s, o) {
          var a, i;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this.uploadToS3(n);
                  case 2:
                    return (
                      (a = e.sent),
                      (i = this.get("store").createRecord(
                        "image-file-version",
                        { width: s, height: o, url: a, imageFile: t }
                      )),
                      (e.next = 6),
                      i.save()
                    );
                  case 6:
                    return e.abrupt("return", i);
                  case 7:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _getSizesOfVersions: function (e, t) {
        var n = this,
          s = e / t;
        return this.get("sizes")
          .map(function (s) {
            return n._getWidthForSize(e, t, s);
          })
          .uniq()
          .map(function (e) {
            return { width: Math.round(e), height: Math.round(e / s) };
          });
      },
      _getWidthForSize: function (e, t, n) {
        var s = n.overflowPolicy,
          o = e / t;
        if ("cover" === s)
          return e > n.width && t > n.height
            ? e / n.width > t / n.height
              ? n.height * o
              : n.width
            : e;
        if ("contain" === s)
          return e > n.width || t > n.height
            ? e / n.width >= t / n.height
              ? n.width
              : n.height * o
            : e;
        throw new Error(
          "Size for an image with an overflowPolicy that is nor 'contain' nor 'cover': " +
            s
        );
      },
      _resize: function (e, n, s, o, a) {
        return new t.default.RSVP.Promise(function (i) {
          var l = new Resize(n, s, o, a, !0, !0, !1, function (e) {
            t.default.run(function () {
              i(e);
            });
          });
          l.resize(e);
        });
      },
      _getImageInformation: function (e, n) {
        var s = this;
        return new t.default.RSVP.Promise(function (o) {
          var a = new Image();
          (a.onload = function () {
            t.default.run(function () {
              var e = s._getImageData(a, n),
                t = e.data,
                i = e.width,
                l = e.height;
              o({ dataToScale: t, width: i, height: l });
            });
          }),
            (a.src = e.get("base64"));
        });
      },
      _getOrientation: function (e) {
        return new t.default.RSVP.Promise(function (n) {
          s.default.parseMetaData(e.get("file"), function (e) {
            var s = null;
            t.default.isPresent(e.exif) && (s = e.exif.get("Orientation")),
              n(s);
          });
        });
      },
      _getImageData: function (e, t) {
        var n = document.createElement("canvas"),
          s = n.getContext("2d"),
          o = e.naturalWidth,
          a = e.naturalHeight,
          i = o,
          l = a,
          r = 0,
          u = 0,
          c = 0;
        return (
          3 === t
            ? ((c = 180), (r = -o), (u = -a))
            : 8 === t
            ? ((c = 270), (i = a), (l = o), (r = -o))
            : 6 === t && ((c = 90), (i = a), (l = o), (u = -a)),
          n.setAttribute("width", i),
          n.setAttribute("height", l),
          s.rotate((c * Math.PI) / 180),
          s.drawImage(e, r, u),
          s.getImageData(0, 0, i, l)
        );
      },
      _destroyCurrentImage: function () {
        this.get("hasImage") &&
          (this.get("image").destroyRecord(), this.set("image", null));
      },
      _trackEvent: function (e, t) {
        this.get("analytics").trackEvent("Image Uploader - " + e, t);
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.get("imageUsed") || this._destroyCurrentImage();
      },
      actions: {
        cancel: function () {
          this.sendAction("closeModal");
        },
        deleteImage: function () {
          this.get("deleteImageTask").perform();
        },
        fetchedFile: function (e) {
          return this.get("uploadMediaTask").perform(
            "uploadViaFileTask",
            { Type: "via file", "File mime": e.get("mime") },
            e
          );
        },
        uploadUrl: function () {
          var e = this.get("url");
          return (
            this.get("uploadMediaTask").perform(
              "uploadViaUrlTask",
              {
                Type: "via url",
                Url: e,
                Host: (0, a.getHost)(e),
                "File extension": (0, a.getExtension)(e),
              },
              e
            ),
            !1
          );
        },
        selectFile: function () {
          this.$("input[type='file']").trigger("click");
        },
      },
    });
  }),
  define("frontend/components/modals/lesson-plan", [
    "exports",
    "ember",
    "frontend/utils/tab",
    "frontend/mixins/story-permissions",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, {
      session: t.default.inject.service(),
      init: function () {
        this._super.apply(this, arguments),
          this.get("canEditLessonPlan") && this.set("isEditing", !0);
      },
      fadeInSpeed: t.default
        .computed(function () {
          return 150;
        })
        .readOnly(),
      story: t.default.computed.reads("model.story"),
      lessonPlanTabs: t.default.computed(
        "isEditing",
        "model.{aims,warmUpActivities,followUpActivities,learningStandards,sources}.notBlank",
        function () {
          var e = [];
          return (
            (this.get("isEditing") || this.get("model.aims.notBlank")) &&
              e.push(
                n.default.create({
                  text: "Aims",
                  templatePath: "lesson-plan/aims",
                })
              ),
            (this.get("isEditing") ||
              this.get("model.warmUpActivities.notBlank")) &&
              e.push(
                n.default.create({
                  text: "Warm-up activities",
                  templatePath: "lesson-plan/warm-up-activities",
                })
              ),
            (this.get("isEditing") ||
              this.get("model.followUpActivities.notBlank")) &&
              e.push(
                n.default.create({
                  text: "Follow-up activities",
                  templatePath: "lesson-plan/follow-up-activities",
                })
              ),
            (this.get("isEditing") ||
              this.get("model.learningStandards.notBlank")) &&
              e.push(
                n.default.create({
                  text: "Learning standards",
                  templatePath: "lesson-plan/learning-standards",
                })
              ),
            (this.get("isEditing") || this.get("model.sources.notBlank")) &&
              e.push(
                n.default.create({
                  text: "Sources",
                  templatePath: "lesson-plan/sources",
                })
              ),
            e
          );
        }
      ),
      _changeSelectedTab: t.default.observer(
        "fadeInSpeed",
        "tabSelectorComponent.activeTabIndex",
        function () {
          var e = this;
          t.default.run.later(function () {
            e.set(
              "selectedTabIndex",
              e.get("tabSelectorComponent.activeTabIndex")
            );
          }, this.get("fadeInSpeed"));
        }
      ),
      actions: {
        initializeTabSelector: function (e) {
          this.set("tabSelectorComponent", e);
        },
        edit: function () {
          this.set("isEditing", !0);
        },
        preview: function () {
          this.set("isEditing", !1);
        },
      },
    });
  }),
  define("frontend/components/modals/school-class-edit", [
    "exports",
    "ember",
    "frontend/models/school-class",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({
      analytics: t.default.inject.service(),
      notifications: t.default.inject.service(),
      possibleGrades: t.default
        .computed(function () {
          return n.default.POSSIBLE_GRADES;
        })
        .readOnly(),
      submitDisabled: t.default
        .computed("model.isNew", "model.hasDirtyAttributes", function () {
          return (
            !this.get("model.isNew") && !this.get("model.hasDirtyAttributes")
          );
        })
        .readOnly(),
      submitButtonLabel: t.default.computed("model.isNew", function () {
        return this.get("model.isNew") ? "Create class" : "Save changes";
      }),
      _reset: t.default.on("init", function () {
        if (!this.get("model.isDeleted")) {
          t.default.Binding.from("model.name")
            .to("formObject.name")
            .connect(this),
            t.default.Binding.from("model.subject")
              .to("formObject.subject")
              .connect(this),
            t.default.Binding.from("model.grade")
              .to("formObject.grade")
              .connect(this),
            t.default.Binding.from("model.archivedAt")
              .to("formObject.archivedAt")
              .connect(this),
            t.default.Binding.from("submitDisabled")
              .to("formObject.disabled")
              .connect(this);
          var e = this._getArchiveButtonLabel(this.get("model.isArchived"));
          this.set("archiveButtonLabel", e),
            this.set("formObject.model", this.get("model")),
            this.get("formObject").hideValidationErrors(),
            this.get("model").validateSync();
        }
      }),
      _getArchiveButtonLabel: function (e) {
        return e ? "Unarchive class" : "Archive class";
      },
      _updateSchoolClass: function () {
        var e = this,
          n = this.get("formObject"),
          s = this.get("model");
        return new t.default.RSVP.Promise(function (t, o) {
          n.set("loading", !0);
          var a = s.get("isNew");
          s.save()
            .then(function () {
              a &&
                (e
                  .get("analytics")
                  .trackEvent("School Class Creation", {
                    Name: s.get("name"),
                    Subject: s.get("subject"),
                    Grade: s.get("grade"),
                    "School level": s.get("schoolLevel"),
                  }),
                e
                  .get("analytics")
                  .trackPeopleIncrement("Number of school classes created")),
                t(s);
            })
            .catch(function () {
              o();
            })
            .finally(function () {
              n.set("loading", !1), e.sendAction("closeModal");
            });
        });
      },
      actions: {
        updateSchoolClass: function () {
          var e = this,
            t = this.get("model");
          t.get("validations.isValid")
            ? this._updateSchoolClass()
                .then(function (t) {
                  e.sendAction("action", t);
                })
                .catch(function () {})
            : this.get("formObject").showValidationErrors();
        },
        toggleArchiveClass: function () {
          var e = this;
          this.get("model").rollbackAttributes();
          var t = void 0;
          this.get("model.isArchived")
            ? (this.get("model").setAsUnarchived(),
              (t =
                "The class " +
                this.get("model.name") +
                " has been unarchived."))
            : (this.get("model").setAsArchived(),
              (t =
                "The class " + this.get("model.name") + " has been archived.")),
            this._updateSchoolClass()
              .then(function (n) {
                e.get("notifications").showSuccessMessage(t),
                  e.sendAction("action", n);
              })
              .finally(function () {
                e._reset();
              });
        },
      },
    });
  }),
  define("frontend/components/modals/school-class-join", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "npm:lodash.isnan",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend({
      analytics: t.default.inject.service(),
      notifications: t.default.inject.service(),
      session: t.default.inject.service(),
      currentUser: t.default.computed.reads("session.currentUser"),
      submitButtonLabel: t.default.computed("schoolClass", function () {
        return this.get("schoolClass") ? "Yes" : "Join the class";
      }),
      schoolClassDisplayName: t.default.computed(
        "currentUser",
        "schoolClass",
        "schoolClass.name",
        "schoolClass.subject",
        function () {
          var e = this.get("schoolClass"),
            t = this.get("currentUser");
          return e ? e.displayNameForUser(t) : "";
        }
      ),
      _reset: t.default.on("init", function () {
        this.get("formObject") ||
          this.set("formObject", t.default.Object.create()),
          this.set("formObject.classCode", ""),
          this._removeSchoolClass();
      }),
      _removeSchoolClass: t.default.observer(
        "formObject.classCode",
        function () {
          this.set("formObject.errors", []),
            this.get("schoolClass") && this.set("schoolClass", null);
        }
      ),
      _validate: function () {
        var e = this.get("currentUser.schoolClasses"),
          n = this.get("formObject"),
          s = n.get("classCode"),
          a = s - 100,
          i = [];
        return (
          t.default.isBlank(s)
            ? i.pushObject({ message: "Please enter the class code." })
            : (0, o.default)(a)
            ? i.pushObject({ message: "Please enter a valid class code." })
            : e.mapBy("id").includes(a.toString()) &&
              i.pushObject({
                message: "You are already a member of this class.",
              }),
          n.set("errors", { classCode: i }),
          t.default.isEmpty(i)
        );
      },
      _fetchSchoolClassById: function (e) {
        var t = this,
          n = this.get("store").findRecord("schoolClass", e, { reload: !0 }),
          s = this.get("formObject");
        s.set("loading", !0),
          n
            .then(function (e) {
              t.set("schoolClass", e);
            })
            .catch(function () {
              s.set("errors", {
                classCode: [
                  {
                    message: "The class code you have provided does not exist",
                  },
                ],
              });
            })
            .finally(function () {
              s.set("loading", !1);
            });
      },
      _addCurrentUserToSelectedSchoolClass: function () {
        var e = this,
          t = this.get("formObject"),
          o = this.get("currentUser"),
          a = this.get("schoolClass");
        t.set("loading", !0),
          n.default
            .put(s.default.join_class_path(o.get("id")), {
              class_code: a.get("code"),
            })
            .then(function () {
              o.get("schoolClasses").pushObject(a),
                e
                  .get("analytics")
                  .trackEvent("School Class Join", {
                    "Class name": a.get("name"),
                    "Class subject": a.get("subject"),
                  }),
                e.sendAction("action", a);
            })
            .catch(function () {
              e.get("notifications").showBackendErrorMessage(
                "An error occurred while joining the school class."
              );
            })
            .finally(function () {
              t.set("loading", !1), e.sendAction("closeModal");
            });
      },
      actions: {
        joinSchoolClass: function () {
          var e = this.get("formObject.classCode");
          if (this._validate()) {
            var n = this.get("schoolClass");
            t.default.isNone(n)
              ? this._fetchSchoolClassById(e - 100)
              : this._addCurrentUserToSelectedSchoolClass();
          }
        },
        discardSelection: function () {
          this._reset();
        },
      },
    });
  }),
  define("frontend/components/modals/share-story", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/mixins/story-permissions",
    "frontend/mixins/story-state",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(s.default, o.default, {
      session: t.default.inject.service(),
      analytics: t.default.inject.service(),
      commandFactory: t.default.inject.service(),
      story: t.default.computed.reads("model"),
      makePublicTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("commandFactory").createCommand(
                        "approve-stories"
                      )),
                      (e.next = 3),
                      t.execute([this.get("story")])
                    );
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      makePrivateTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("commandFactory").createCommand(
                        "reject-stories"
                      )),
                      (e.next = 3),
                      t.execute([this.get("story")])
                    );
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      actions: {
        publicLinkCopied: function () {
          this.get("analytics").trackStoryEvent(
            "Story Public Link Copied",
            this.get("story")
          );
        },
        embedCodeCopied: function () {
          this.get("analytics").trackStoryEvent(
            "Story Embed Code Copied",
            this.get("story")
          );
        },
      },
    });
  }),
  define("frontend/components/modals/sign-up", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Component.extend({
      clientInformation: t.default.inject.service(),
    });
  }),
  define("frontend/components/modals/student-edit", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend({
      analytics: t.default.inject.service(),
      notifications: t.default.inject.service(),
      _reset: t.default.on("init", function () {
        this.set("formObject.model", this.get("model")),
          this.get("formObject").bindModelAttributes([
            "firstName",
            "lastName",
            "password",
          ]);
      }),
      actions: {
        updateStudent: function () {
          var e = this,
            n = this.get("formObject"),
            s = this.get("model");
          s.get("validations.isValid")
            ? (n.set("loading", !0),
              s
                .save()
                .then(function () {
                  t.default.isBlank(n.get("password")) ||
                    e
                      .get("notifications")
                      .showSuccessMessage(
                        "The student password has been updated."
                      );
                })
                .finally(function () {
                  n.set("loading", !1),
                    e.sendAction("closeModal"),
                    s.set("password", ""),
                    s.clearPendingAttribute("password");
                }))
            : n.showValidationErrors();
        },
        removeStudent: function () {
          var e = this,
            t = this.get("formObject"),
            o = this.get("schoolClassContext"),
            a = this.get("model");
          t.set("loading", !0),
            n.default
              .put(s.default.leave_class_path(a.get("id")), {
                class_code: o.get("code"),
              })
              .then(function () {
                o.get("users")
                  .reload()
                  .then(function () {
                    e
                      .get("analytics")
                      .trackEvent("Remove Student From Class", {
                        "Class name": o.get("name"),
                        "Class subject": o.get("subject"),
                        Student: a.get("username"),
                      }),
                      e.sendAction("action", o);
                  })
                  .finally(function () {
                    t.set("loading", !1), e.sendAction("closeModal");
                  });
              })
              .catch(function () {
                t.set("loading", !1),
                  e.sendAction("closeModal"),
                  e
                    .get("notifications")
                    .showBackendErrorMessage(
                      "An error occurred while removing the student from this class."
                    );
              });
        },
      },
    });
  }),
  define("frontend/components/modals/submit-story", [
    "exports",
    "ember",
    "frontend/utils/inflect",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({
      session: t.default.inject.service(),
      story: t.default.computed.reads("model"),
      sortSchoolClassesBy: ["name:asc"],
      sortedSchoolClasses: t.default.computed.sort(
        "session.currentUser.schoolClasses",
        "sortSchoolClassesBy"
      ),
      submitTitle: t.default.computed("schoolClasses.length", function () {
        return (
          "Submit to my " +
          (0, n.default)("class", this.get("schoolClasses.length"))
        );
      }),
      actions: {
        done: function () {
          this.sendAction("closeModal");
        },
      },
    });
  }),
  define("frontend/components/modals/video-uploader", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/mixins/media-uploader",
    "frontend/models/video",
    "frontend/mixins/youtube-video",
    "frontend/utils/url",
    "frontend/helpers/external-link",
  ], function (e, t, n, s, o, a, i, l) {
    var r = ["avi", "mov", "webm", "ogg"],
      u = ["video/mp4"];
    e.default = t.default.Component.extend(s.default, a.default, {
      session: t.default.inject.service(),
      store: t.default.inject.service(),
      errorObjectsFactory: t.default.inject.service(),
      analytics: t.default.inject.service(),
      buttonUseMediaLabel: t.default
        .computed(function () {
          return "Use video";
        })
        .readOnly(),
      isUploadingMessage: t.default
        .computed(function () {
          return "Your video is uploading";
        })
        .readOnly(),
      fileUploaderMessage: t.default
        .computed(function () {
          return "Click to upload a video";
        })
        .readOnly(),
      fileUploaderMimeTypes: t.default
        .computed(function () {
          return u.join(",");
        })
        .readOnly(),
      urlUploaderPlaceholder: t.default
        .computed("canUploadCustomVideos", function () {
          return this.get("canUploadCustomVideos")
            ? "Or paste a video link hereâ¦"
            : "Paste a YouTube link hereâ¦";
        })
        .readOnly(),
      isUploadingCustomVideo: t.default.computed.or(
        "uploadCustomViaFileTask.isRunning",
        "uploadCustomViaUrlTask.isRunning"
      ),
      hasVideo: t.default.computed.notEmpty("video"),
      canUploadCustomVideos: t.default.computed.reads(
        "session.currentUser.canUploadCustomVideos"
      ),
      mediaIsNotReady: t.default.computed.not("hasVideo"),
      uploadVideoTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n, s, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!t.hasMimeTypeOneOf(u)) {
                      e.next = 11;
                      break;
                    }
                    return (
                      (n = t.get("asBlob")), (e.next = 4), this.uploadToS3(n)
                    );
                  case 4:
                    return (
                      (s = e.sent),
                      (a = this.get("store").createRecord("video", {
                        provider: o.PROVIDER_CUSTOM,
                        url: s,
                      })),
                      (e.next = 8),
                      a.save()
                    );
                  case 8:
                    this.set("video", a), (e.next = 12);
                    break;
                  case 11:
                    throw this._getMessageForNonVideoFormat(t.get("extension"));
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      deleteVideoTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("video")), (e.next = 3), t.destroyRecord()
                    );
                  case 3:
                    this.set("video", null), this.set("url", null);
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      useMediaTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      this._trackEvent("Video Used", {
                        Source: this.get("video.provider"),
                      }),
                      (e.next = 3),
                      this.get("action")(this.get("video"))
                    );
                  case 3:
                    this.set("videoUsed", !0), this.sendAction("closeModal");
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadCustomViaFileTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this.get("uploadVideoTask").perform(t);
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      uploadCustomViaUrlTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = void 0),
                      (e.prev = 1),
                      (e.next = 4),
                      this.downloadUrl(t)
                    );
                  case 4:
                    (n = e.sent), (e.next = 10);
                    break;
                  case 7:
                    throw (
                      ((e.prev = 7),
                      (e.t0 = e.catch(1)),
                      e.t0.message || this._getMessageForNonVideoFormat())
                    );
                  case 10:
                    return (
                      (e.next = 12), this.get("uploadVideoTask").perform(n)
                    );
                  case 12:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 7]]
          );
        })
      ),
      uploadYoutubeTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t, n, s) {
          var a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.prev = 0),
                      (e.next = 3),
                      this.getVideoInformation(t, ["id"])
                    );
                  case 3:
                    return (
                      this.set("errorMessage", null),
                      this.set("isValidYoutubeUrl", !0),
                      (a = this.get("store").createRecord("video", {
                        provider: o.PROVIDER_YOUTUBE,
                        videoId: t,
                        startTime: n,
                        endTime: s,
                      })),
                      (e.next = 8),
                      a.save()
                    );
                  case 8:
                    this.set("video", a), (e.next = 14);
                    break;
                  case 11:
                    throw (
                      ((e.prev = 11),
                      (e.t0 = e.catch(0)),
                      "We could not find this Youtube link. Please make sure you copied the correct link.")
                    );
                  case 14:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[0, 11]]
          );
        })
      ),
      parseUrlTask: (0, n.task)(
        regeneratorRuntime.mark(function e(n) {
          var s, o, a, l, r, u;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      (this._resetState(),
                      (s = t.default.isEmpty(n)),
                      (o = this.looksLikeYoutubeUrl(n)),
                      s)
                    ) {
                      e.next = 16;
                      break;
                    }
                    if (!o) {
                      e.next = 13;
                      break;
                    }
                    return (
                      (a = this.parseYoutubeUrl(n)),
                      (l = a.videoId),
                      (r = a.startTime),
                      (u = a.endTime),
                      (e.next = 11),
                      this.get("uploadMediaTask").perform(
                        "uploadYoutubeTask",
                        {
                          Type: "youtube",
                          Url: n,
                          Host: (0, i.getHost)(n),
                          "Video id": l,
                          "Start time": r,
                          "End time": u,
                        },
                        l,
                        r,
                        u
                      )
                    );
                  case 11:
                    e.next = 14;
                    break;
                  case 13:
                    this.get("canUploadCustomVideos")
                      ? this.set("errorMessage", null)
                      : this.set(
                          "errorMessage",
                          "Please insert a YouTube link."
                        );
                  case 14:
                    e.next = 17;
                    break;
                  case 16:
                    this.set("errorMessage", null);
                  case 17:
                    this.set("showUploadUrlButton", !s && !o);
                  case 18:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).restartable(),
      _destroyCurrentVideo: function () {
        this.get("hasVideo") &&
          (this.get("video").destroyRecord(), this.set("video", null));
      },
      _trackEvent: function (e, t) {
        this.get("analytics").trackEvent("Video Uploader - " + e, t);
      },
      _resetState: function () {
        this._destroyCurrentVideo(), this.set("isValidYoutubeUrl", !1);
      },
      _getMessageForNonVideoFormat: function () {
        var e =
            arguments.length <= 0 || void 0 === arguments[0]
              ? null
              : arguments[0],
          t = this._getLinkToConverter(e);
        return (
          "We only accept MP4 formats for the moment. You can use this " +
          l.default.compute([t, "link"], {}) +
          " to convert your video."
        );
      },
      _getLinkToConverter: function (e) {
        return r.includes(e)
          ? "https://cloudconvert.com/" + e + "-to-mp4"
          : "https://cloudconvert.com/anything-to-mp4";
      },
      urlChanged: t.default.observer("url", function () {
        this.get("parseUrlTask").perform(this.get("url"));
      }),
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.get("videoUsed") || this._destroyCurrentVideo();
      },
      actions: {
        selectFile: function () {
          this._resetState(),
            this.set("errorMessage", null),
            this.$("input[type='file']").trigger("click");
        },
        fetchedFile: function (e) {
          return this.get("uploadMediaTask").perform(
            "uploadCustomViaFileTask",
            { Type: "custom via file", "File mime": e.get("mime") },
            e
          );
        },
        uploadUrl: function () {
          var e = this.get("url");
          return (
            this.get("uploadMediaTask").perform(
              "uploadCustomViaUrlTask",
              {
                Type: "custom via url",
                Url: e,
                Host: (0, i.getHost)(e),
                "File extension": (0, i.getExtension)(e),
              },
              e
            ),
            !1
          );
        },
        deleteVideo: function () {
          this.get("deleteVideoTask").perform();
        },
        cancel: function () {
          this.sendAction("closeModal");
        },
      },
    });
  }),
  define("frontend/components/move-item/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["move-item"],
      buttonClass: t.default.computed("name", function () {
        return "button-" + this.get("name");
      }),
      didInsertElement: function () {
        this.sendAction("register", this);
      },
      updateDrag: t.default.observer("DOMitem", function () {
        var e = this,
          n = this.get("DOMitem");
        if (!t.default.isNone(n)) {
          var s = $(".story");
          n.draggable({
            axis: "y",
            handle: ".button-move-item",
            containment: s,
            stop: function () {
              t.default.run(function () {
                e.sendAction("moveItem", n), e.sendAction("stopDraggingAnItem");
              });
            },
            cancel: "input,textarea,select,option",
          });
        }
      }),
      actions: {
        startDraggingAnItem: function () {
          this.sendAction("startDraggingAnItem");
        },
        stopDraggingAnItem: function () {
          this.sendAction("stopDraggingAnItem");
        },
      },
    });
  }),
  define("frontend/components/move-item/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "JcwNWiBM",
      block:
        '{"statements":[["open-element","button",[]],["static-attr","class","button-move-item"],["dynamic-attr","disabled",["unknown",["disabled"]],null],["modifier",["action"],[["get",[null]],"startDraggingAnItem"],[["on"],["mouseDown"]]],["modifier",["action"],[["get",[null]],"stopDraggingAnItem"],[["on"],["mouseUp"]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/move-item/template.hbs" },
    });
  }),
  define("frontend/components/new-button-group/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["new-button-group"],
    });
  }),
  define("frontend/components/new-button-group/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "qwej50Ve",
      block:
        '{"statements":[["open-element","h3",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","buttons"],["flush-element"],["text","\\n  "],["yield","default"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/new-button-group/template.hbs" },
    });
  }),
  define("frontend/components/note-editor/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["note-editor"],
      imageMaxHeight: t.default
        .computed(function () {
          return 150;
        })
        .readOnly(),
      imageSizes: t.default
        .computed("imageMaxHeight", function () {
          return [
            {
              width: 120,
              height: this.get("imageMaxHeight"),
              overflowPolicy: "contain",
            },
            { width: 768, height: 1024, overflowPolicy: "contain" },
            { width: 1440, height: 1440, overflowPolicy: "contain" },
            { width: 1920, height: 1920, overflowPolicy: "contain" },
          ];
        })
        .readOnly(),
      noteDestroyed: t.default.computed.or(
        "note.isDeleted",
        "note.isDestroyed"
      ),
      title: t.default.computed("note.isNew", function () {
        return this.get("note.isNew") ? "Add a note" : "Edit note";
      }),
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          t.default.run.scheduleOnce("afterRender", function () {
            e.$(".inplace-editor textarea").focus();
          });
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments), this._saveNote();
      },
      _imageCaptionChanged: t.default.observer(
        "note.imageFile.caption",
        function () {
          this.get("noteDestroyed") || this.get("note").send("becomeDirty");
        }
      ),
      _saveNote: function () {
        var e = this.get("note");
        this.get("hasDeletedNote") ||
          !e.get("hasDirtyAttributes") ||
          this.get("noteDestroyed") ||
          this.sendAction("saveAction", e);
      },
      actions: {
        imageUploaded: function (e) {
          this.get("noteDestroyed") ||
            (this.set("note.imageFile", e),
            this.get("note").send("becomeDirty"));
        },
        imageDeleted: function () {
          this.get("noteDestroyed") ||
            (this.set("note.imageFile", null),
            this.get("note").send("becomeDirty"));
        },
        deleteNote: function () {
          var e = this.get("note");
          this.set("hasDeletedNote", !0),
            e.get("isNew")
              ? this.sendAction("closeAction")
              : this.sendAction("deleteAction", e.get("id"));
        },
        close: function () {
          this.sendAction("closeAction");
        },
      },
    });
  }),
  define("frontend/components/note-editor/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "UH2wTk1r",
      block:
        '{"statements":[["open-element","header",[]],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","button-close"],["modifier",["action"],[["get",[null]],"close"]],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","isEditing","imageFile","maxHeight","sizes"],[["helper",["action"],[["get",[null]],"imageUploaded"],null],["helper",["action"],[["get",[null]],"imageDeleted"],null],true,["get",["note","imageFile"]],["get",["imageMaxHeight"]],["get",["imageSizes"]]]]],false],["text","\\n\\n"],["append",["helper",["editable-text"],null,[["class","text","placeholder","submitAction","isEditing"],["description",["get",["note","description"]],"Write your note description here...",["helper",["action"],[["get",[null]],"close"],null],true]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","actions"],["flush-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","button-delete"],["modifier",["action"],[["get",[null]],"deleteNote"]],["flush-element"],["text","Delete this note"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/note-editor/template.hbs" },
    });
  }),
  define("frontend/components/object-form/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      tagName: "form",
      classNameBindings: ["loading", "cssClass"],
      buttonLabel: "Submit",
      showSubmit: !0,
      loading: t.default.computed.alias("for.loading"),
      errors: t.default.computed.reads("for.errors"),
      disabled: t.default.computed.or("for.disabled", "for.loading"),
      cssClass: t.default.computed("action", function () {
        return this.get("action")
          ? "form-" + this.get("action").dasherize()
          : "";
      }),
      didInsertElement: function () {
        this.makeFastclickable(this.$('button[type="submit"]'));
      },
      submit: function () {
        return this.sendAction(), !1;
      },
    });
  }),
  define("frontend/components/object-form/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "N9rwzFKW",
      block:
        '{"statements":[["block",["with"],[["helper",["hash"],null,[["form-field","form-textarea","form-select","form-search","form-location","form-check-box","form-submit","form-generic-errors"],[["helper",["component"],["form-field"],[["object"],[["get",["for"]]]]],["helper",["component"],["form-textarea"],[["object"],[["get",["for"]]]]],["helper",["component"],["form-select"],[["object"],[["get",["for"]]]]],["helper",["component"],["form-search"],[["object"],[["get",["for"]]]]],["helper",["component"],["form-location"],[["object"],[["get",["for"]]]]],["helper",["component"],["form-check-box"],[["object"],[["get",["for"]]]]],["helper",["component"],["async-button"],[["type","name","label","disabled","loading"],["submit","object-form-submit","Submit",["get",["disabled"]],["get",["loading"]]]]],["helper",["component"],["form-generic-errors"],[["errors"],[["get",["errors","generic"]]]]]]]]],null,0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["yield","default",[["get",["formFields"]]]],["text","\\n"]],"locals":["formFields"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/object-form/template.hbs" },
    });
  }),
  define("frontend/components/organization-info-box/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["organization-info-box"],
      session: t.default.inject.service(),
      isEditable: t.default.computed(
        "session.currentUser.organization.content",
        "organization",
        function () {
          return (
            this.get("session.currentUser.organization.content") ===
            this.get("organization")
          );
        }
      ),
    });
  }),
  define("frontend/components/organization-info-box/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4SL0J+cf",
      block:
        '{"statements":[["append",["helper",["render-image"],null,[["class","imageFile","overflowPolicy"],["logo-image",["get",["organization","logoImageFile","content"]],"cover"]]],false],["text","\\n"],["open-element","div",[]],["static-attr","class","description"],["flush-element"],["text","\\n  "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["organization","name"]],false],["close-element"],["text","\\n  "],["append",["helper",["editable-text"],null,[["isEditing","model","errors","text","placeholder"],[["get",["isEditable"]],["get",["organization"]],["get",["organization","errors","description"]],["get",["organization","description"]],"Put a description of your organization here..."]]],false],["text","\\n"],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","additional-data"],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","publisher-tag"],["flush-element"],["text","Publisher"],["close-element"],["text","\\n"],["block",["if"],[["get",["numberOfStories"]]],null,0],["text","  "],["append",["helper",["external-link"],[["get",["organization","homepageUrl"]],"Visit website"],[["classNames"],["homepage-url"]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","p",[]],["static-attr","class","number-of-stories"],["flush-element"],["text","\\n      "],["open-element","strong",[]],["flush-element"],["append",["unknown",["numberOfStories"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["story",["get",["numberOfStories"]]],null],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/organization-info-box/template.hbs",
      },
    });
  }),
  define("frontend/components/page-for-message-body/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["page-for-message-body"],
    });
  }),
  define("frontend/components/page-for-message-body/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "wAvI77V1",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/page-for-message-body/template.hbs",
      },
    });
  }),
  define("frontend/components/page-for-message-title/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["page-for-message-title"],
    });
  }),
  define("frontend/components/page-for-message-title/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "NOhjzauD",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/page-for-message-title/template.hbs",
      },
    });
  }),
  define("frontend/components/page-for-message/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["page-for-message"],
    });
  }),
  define("frontend/components/page-for-message/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "zGCDcx3v",
      block:
        '{"statements":[["yield","default",[["helper",["hash"],null,[["title","body"],[["helper",["component"],["page-for-message-title"],null],["helper",["component"],["page-for-message-body"],null]]]]]],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/page-for-message/template.hbs" },
    });
  }),
  define("frontend/components/page-for-registration-body/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["page-for-registration-body"],
    });
  }),
  define("frontend/components/page-for-registration-body/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "YIm9eOon",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/page-for-registration-body/template.hbs",
      },
    });
  }),
  define("frontend/components/page-for-registration-title/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["page-for-registration-title"],
    });
  }),
  define("frontend/components/page-for-registration-title/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "LO4xliPt",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/page-for-registration-title/template.hbs",
      },
    });
  }),
  define("frontend/components/page-for-registration/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["page-for-registration"],
      showSutoriLogo: !1,
    });
  }),
  define("frontend/components/page-for-registration/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "tFyFAFTY",
      block:
        '{"statements":[["block",["if"],[["get",["showSutoriLogo"]]],null,0],["text","\\n"],["yield","default",[["helper",["hash"],null,[["title","body"],[["helper",["component"],["page-for-registration-title"],null],["helper",["component"],["page-for-registration-body"],null]]]]]],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/logo-sutori-4fa14594018606afea134362d426af10.svg"],["static-attr","class","logo"],["static-attr","alt","Logo of Sutori"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/page-for-registration/template.hbs",
      },
    });
  }),
  define("frontend/components/page-upgrade/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/mixins/velocity",
    "frontend/controllers/upgrade",
    "frontend/models/premium-subscription",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
  ], function (e, t, n, s, o, a, i, l) {
    e.default = t.default.Component.extend(s.default, {
      classNames: ["page-upgrade"],
      originsForUnlimitedPlan: [
        o.default.ORIGIN_ADD_COLLABORATORS,
        o.default.ORIGIN_SUTORI_SUBSCRIPTION_BOX_TO_UNLIMITED,
      ],
      session: t.default.inject.service(),
      analytics: t.default.inject.service(),
      init: function () {
        this._super.apply(this, arguments);
        var e = this.get("currentUser");
        this.set(
          "paymentData",
          t.default.Object.extend({
            firstName: t.default.computed.reads("currentUser.firstName"),
            lastName: t.default.computed.reads("currentUser.lastName"),
            addressCity: t.default.computed.reads("currentUser.city"),
            addressState: t.default.computed.reads("currentUser.state"),
            addressCountry: t.default.computed.reads("currentUser.country"),
          }).create({
            currentUser: e,
            addressLine1: "",
            addressLine2: "",
            addressZip: "",
            cardNumber: "",
            cvc: "",
            expiryMonth: "",
            expiryYear: "",
          })
        ),
          this.get("loadUpgradingInfoTask").perform(),
          this.get("originsForUnlimitedPlan").includes(this.get("origin")) &&
            this.get("currentUser.canBecomeUnlimited") &&
            this.send("selectPlan", this.get("unlimitedPlan"), !1);
      },
      selectedPlan: null,
      unlimitedPlan: t.default
        .computed(function () {
          return a.default.V3_UNLIMITED_99_PLAN;
        })
        .readOnly(),
      premiumPlan: t.default
        .computed(function () {
          return a.default.V3_PREMIUM_49_PLAN;
        })
        .readOnly(),
      currentUser: t.default.computed.reads("session.currentUser"),
      isUpgrading: t.default.computed.reads("currentUser.isPremium"),
      isUpgradingStripeSubscription: t.default.computed.and(
        "isUpgrading",
        "currentUser.premiumSubscription.isStripeSubscription"
      ),
      showPremiumSubscriptionPlan: t.default.computed.not(
        "currentUser.isUnlimited"
      ),
      hasMessageForOrigin: t.default.computed.notEmpty("messageForOrigin"),
      messageForOrigin: t.default.computed("origin", function () {
        return this.get("origin") === o.default.ORIGIN_PRINT_STORY
          ? "Only Premium or Unlimited members can print stories. Upgrade now and discover many other features!"
          : this.get("origin") === o.default.ORIGIN_COPY_PREMIUM_SUTORI_STORY
          ? "Only Premium or Unlimited members can copy Premium Sutori stories. Upgrade now and discover many other features!"
          : this.get("origin") ===
            o.default.ORIGIN_SHARE_PREMIUM_SUTORI_STORY_WITH_CLASSES
          ? "You must be a Premium or Unlimited member to share Premium Sutori stories with your students. Upgrade and discover many other features!"
          : null;
      }),
      amountToPay: t.default.computed(
        "selectedPlanIsPremium",
        "selectedPlanIsUnlimited",
        "premiumPlan.price",
        "unlimitedPlan.{price,proratedPrice}",
        function () {
          return this.get("selectedPlanIsPremium")
            ? this.get("premiumPlan.price")
            : this.get("selectedPlanIsUnlimited")
            ? this.get("isUpgradingStripeSubscription")
              ? this.get("unlimitedPlan.proratedPrice")
              : this.get("unlimitedPlan.price")
            : void 0;
        }
      ),
      hasSelectedPlan: t.default.computed.notEmpty("selectedPlan"),
      selectedPlanIsPremium: t.default.computed("selectedPlan", function () {
        return this.get("selectedPlan") === this.get("premiumPlan");
      }),
      selectedPlanIsUnlimited: t.default.computed("selectedPlan", function () {
        return this.get("selectedPlan") === this.get("unlimitedPlan");
      }),
      selectedPlanLabel: t.default.computed("selectedPlan", function () {
        return a.default.getLabelFromPlan(this.get("selectedPlan.name"));
      }),
      _scrollToPaymentInstructions: function () {
        this._scrollTo(this.$(".payment-instructions"));
      },
      _scrollTo: function (e) {
        var n = this;
        t.default.run.schedule("afterRender", function () {
          n.animate(e, "scroll", { duration: 600, easing: "ease" });
        });
      },
      getCardInfoTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      i.default.get(
                        l.default.user_card_info_path(
                          this.get("currentUser.id")
                        )
                      )
                    );
                  case 2:
                    (t = e.sent),
                      this.get("paymentData").setProperties({
                        cardNumber: "â¢â¢â¢â¢â¢â¢â¢â¢â¢â¢â¢â¢" + t.last4,
                        brand: t.brand,
                        addressLine1: t.address_line1,
                        addressLine2: t.address_line2,
                        addressCity: t.address_city,
                        addressState: t.address_state,
                        addressZip: t.address_zip,
                        addressCountry: t.address_country,
                      });
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      getUpgradePriceTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      i.default.get(
                        l.default.upgrade_price_path(
                          this.get("currentUser.premiumSubscription.id")
                        ),
                        { plan: a.default.V3_UNLIMITED_99_PLAN.name }
                      )
                    );
                  case 2:
                    (t = e.sent),
                      this.set("unlimitedPlan.proratedPrice", t.price);
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      loadUpgradingInfoTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!this.get("isUpgradingStripeSubscription")) {
                      e.next = 3;
                      break;
                    }
                    return (
                      (e.next = 3),
                      t.default.RSVP.all([
                        this.get("getCardInfoTask").perform(),
                        this.get("getUpgradePriceTask").perform(),
                      ])
                    );
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      actions: {
        selectPlan: function (e) {
          var n = this,
            s =
              arguments.length <= 1 || void 0 === arguments[1] || arguments[1];
          this.set("selectedPlan", e),
            this.get("analytics").trackEvent("Subscription Plan Selected", {
              "Subscription plan": e.name,
            }),
            s &&
              t.default.run.scheduleOnce("afterRender", function () {
                n._scrollToPaymentInstructions();
              });
        },
        paid: function () {
          this.set("selectedPlan", null),
            this.get("loadUpgradingInfoTask").perform();
        },
      },
    });
  }),
  define("frontend/components/page-upgrade/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "aC8qGkkC",
      block:
        '{"statements":[["block",["if"],[["get",["currentUser","canSubscribe"]]],null,9,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","h3",[]],["static-attr","class","only-teachers-can-upgrade"],["flush-element"],["text","We\'re sorry, only teachers can upgrade."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["partial","page-upgrade/already-premium"],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["currentUser","hasOngoingSubscription"]]],null,1]],"locals":[]},{"statements":[["text","          "],["append",["helper",["payment-form"],null,[["paid","amount","paymentData","isUpgradingStripeSubscription","selectedPlan"],[["helper",["action"],[["get",[null]],"paid"],null],["get",["amountToPay"]],["get",["paymentData"]],["get",["isUpgradingStripeSubscription"]],["get",["selectedPlan"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["partial","page-upgrade/manual-upgrade-instructions"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","payment-instructions"],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentUser","premiumSubscription","isManualSubscription"]]],null,4,3],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["subscription-plans"],null,[["selectPlan","selectedPlan"],[["helper",["action"],[["get",[null]],"selectPlan"],null],["get",["selectedPlan"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["hasSelectedPlan"]]],null,5,2],["text","\\n    "],["partial","page-upgrade/faq"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["partial","helpers/loader"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","wrapper-message-for-origin"],["flush-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","message-for-origin"],["flush-element"],["append",["unknown",["messageForOrigin"]],false],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasMessageForOrigin"]]],null,8],["text","\\n"],["block",["if"],[["get",["loadInitialDataTask","isRunning"]]],null,7,6]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/page-upgrade/template.hbs" },
    });
  }),
  define("frontend/components/payment-form/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "npm:moment",
    "npm:lodash.last",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Component.extend({
      classNames: ["payment-form"],
      errorObjectsFactory: t.default.inject.service(),
      session: t.default.inject.service(),
      analytics: t.default.inject.service(),
      currentUser: t.default.computed.reads("session.currentUser"),
      hasExpiryErrors: t.default.computed.notEmpty("expiryErrors"),
      expiryErrors: t.default.computed(
        "paymentData.errors.{expiryMonth,expiryYear}",
        function () {
          return []
            .concat(
              this.get("paymentData.errors.expiryMonth"),
              this.get("paymentData.errors.expiryYear")
            )
            .compact();
        }
      ),
      expiresYearMinimum: t.default.computed(function () {
        return (0, a.default)().year();
      }),
      expiresYearMaximum: t.default.computed("expiresYearMinimum", function () {
        return this.get("expiresYearMinimum") + 20;
      }),
      payButtonLabel: t.default.computed("amount", function () {
        return "Pay $" + this.get("amount");
      }),
      creditCardType: t.default.computed(
        "paymentData.{cardNumber,brand}",
        function () {
          var e = Stripe.card.cardType(this.get("paymentData.cardNumber")),
            n = this.get("paymentData.brand"),
            s = "Unknown" !== e ? e : n;
          if (t.default.isPresent(s)) return s.dasherize();
        }
      ),
      hideCreditCardInfo: t.default.computed(
        "isUpgradingStripeSubscription",
        "currentUser.isUnlimited",
        "currentUser.premiumSubscription.isSaving",
        function () {
          return (
            this.get("isUpgradingStripeSubscription") ||
            (this.get("currentUser.isUnlimited") &&
              this.get("currentUser.premiumSubscription.isSaving"))
          );
        }
      ),
      payTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var n, s;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((n = this.get("selectedPlan")),
                      (s = this.get("paymentData")),
                      s.set("loading", !0),
                      (e.prev = 3),
                      s.set("errors", t.default.Object.create()),
                      this.get("analytics").trackEvent(
                        "Payment Form Submitted"
                      ),
                      !this.get("isUpgradingStripeSubscription"))
                    ) {
                      e.next = 12;
                      break;
                    }
                    return (e.next = 9), this.get("upgradePlanTask").perform(n);
                  case 9:
                    this.get("analytics").trackEvent("User Upgraded", {
                      "Subscription plan": n.name,
                    }),
                      (e.next = 15);
                    break;
                  case 12:
                    return (
                      (e.next = 14),
                      this.get("createNewSubscriptionTask").perform(n, s)
                    );
                  case 14:
                    this.get("analytics").trackEvent("User Subscribed", {
                      "Subscription plan": n.name,
                    });
                  case 15:
                    return (
                      this.get("analytics").trackEvent("Payment Succeeded", {
                        "Subscription plan": n.name,
                      }),
                      (e.next = 18),
                      this.get("currentUser").reload()
                    );
                  case 18:
                    this.get("paid")(), (e.next = 24);
                    break;
                  case 21:
                    (e.prev = 21), (e.t0 = e.catch(3)), s.set("errors", e.t0);
                  case 24:
                    return (e.prev = 24), s.set("loading", !1), e.finish(24);
                  case 27:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[3, 21, 24, 27]]
          );
        })
      ).drop(),
      createNewSubscriptionTask: (0, n.task)(
        regeneratorRuntime.mark(function e(n, a) {
          var i, l, r, u, c;
          return regeneratorRuntime.wrap(
            function (e) {
              for (var d = this; ; )
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((i = this._performClientSideValidations(a)),
                      t.default.isEmpty(i))
                    ) {
                      e.next = 6;
                      break;
                    }
                    throw ((l = i[0]), (r = {}), (r[l.field] = l.messages), r);
                  case 6:
                    return (
                      (u = void 0),
                      (e.prev = 7),
                      (e.next = 10),
                      this._getStripeToken(a)
                    );
                  case 10:
                    (u = e.sent), (e.next = 17);
                    break;
                  case 13:
                    throw (
                      ((e.prev = 13),
                      (e.t0 = e.catch(7)),
                      this.get(
                        "analytics"
                      ).trackEvent("Credit Card Format Error", {
                        "Subscription plan": n.name,
                        "Error message": e.t0.message,
                      }),
                      this._stripeToSutoriError(e.t0))
                    );
                  case 17:
                    return (
                      (e.prev = 17),
                      (e.next = 20),
                      s.default.post(o.default.premium_subscriptions_path(), {
                        stripe_card_token: u,
                        plan: n.name,
                      })
                    );
                  case 20:
                    this.get("analytics").trackEvent("Subscribed to Plan", {
                      "Subscription plan": n.name,
                      "Subscription type": "new",
                    }),
                      (e.next = 28);
                    break;
                  case 23:
                    throw (
                      ((e.prev = 23),
                      (e.t1 = e.catch(17)),
                      (c = e.t1.responseJSON),
                      c.errors.forEach(function (e) {
                        e.field = d._fieldForParam(e.field) || "generic";
                      }),
                      this.get(
                        "errorObjectsFactory"
                      ).createRequestMessagesObject(e.t1))
                    );
                  case 28:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [
              [7, 13],
              [17, 23],
            ]
          );
        })
      ).drop(),
      upgradePlanTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get("currentUser.premiumSubscription.content")),
                      n.set("plan", t.name),
                      (e.prev = 2),
                      (e.next = 5),
                      n.save()
                    );
                  case 5:
                    this.get("analytics").trackEvent("Subscribed to Plan", {
                      "Subscription plan": t.name,
                      "Subscription type": "upgrade",
                    }),
                      (e.next = 11);
                    break;
                  case 8:
                    (e.prev = 8),
                      (e.t0 = e.catch(2)),
                      (function () {
                        n.rollbackAttributes();
                        var t = {};
                        throw (
                          (e.t0.errors.forEach(function (e) {
                            var n = (0, i.default)(e.source.pointer.split("/")),
                              s = [e.detail];
                            t[n] = s;
                          }),
                          t)
                        );
                      })();
                  case 11:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[2, 8]]
          );
        })
      ).drop(),
      _performClientSideValidations: function (e) {
        var t = [];
        return (
          Stripe.card.validateCardNumber(e.get("cardNumber")) ||
            t.push({
              field: "cardNumber",
              messages: ["The card number is not a valid credit card number."],
            }),
          Stripe.card.validateCVC(e.get("cvc")) ||
            t.push({ field: "cvc", messages: ["The CVC code is not valid."] }),
          t
        );
      },
      _formatBackendErrorMsgs: function (e) {
        var t = {};
        return (
          e.forEach(function (e) {
            t[e.field.camelize()] = [e.detail];
          }),
          t
        );
      },
      _getStripeToken: function (e) {
        return new t.default.RSVP.Promise(function (n, s) {
          var o = function (e, o) {
              o.error
                ? s(o.error)
                : t.default.run(function () {
                    n(o.id);
                  });
            },
            a = e.get("firstName") + " " + e.get("lastName"),
            i = e.get("addressLine1"),
            l = e.get("addressLine2"),
            r = e.get("addressCity"),
            u = e.get("addressState"),
            c = e.get("addressZip"),
            d = e.get("addressCountry"),
            m = e.get("cardNumber"),
            f = e.get("cvc"),
            p = e.get("expiryMonth"),
            h = e.get("expiryYear");
          Stripe.card.createToken(
            {
              name: a,
              address_line1: i,
              address_line2: l,
              address_city: r,
              address_state: u,
              address_zip: c,
              address_country: d,
              number: m,
              cvc: f,
              exp_month: p,
              exp_year: h,
            },
            o
          );
        });
      },
      _stripeToSutoriError: function (e) {
        var n = e.code,
          s = e.param;
        if ("rate_limit" === n)
          throw new Error(
            "An error occurred due to requests hitting the Stripe API too quickly. Please contact https://support.stripe.com/email."
          );
        var o = e.message;
        "Could not find payment information" === o &&
          (o = "Please fill in your payment information.");
        var a = t.default.Object.create(),
          i = this._fieldForParam(s) || "generic";
        return a.set(i, [o]), a;
      },
      _fieldForParam: function (e) {
        return "number" === e
          ? "cardNumber"
          : "exp_month" === e
          ? "expiryMonth"
          : "exp_year" === e
          ? "expiryYear"
          : "cvc" === e
          ? "cvc"
          : null;
      },
      actions: {
        pay: function () {
          this.get("payTask").perform();
        },
      },
    });
  }),
  define("frontend/components/payment-form/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "BzuUE+Md",
      block:
        '{"statements":[["block",["object-form"],null,[["for","action"],[["get",["paymentData"]],"pay"]],3],["text","\\n"],["open-element","p",[]],["static-attr","class","handled-by-stripe"],["flush-element"],["text","\\n  Your credit card data is handled by "],["append",["helper",["external-link"],["https://www.stripe.com/customers","Stripe"],null],false],["text",", one of the biggest names in payments with customers like TED, the Guardian and Udacity. Your credit card data is never received or stored on our servers.\\n  "],["open-element","img",[]],["static-attr","class","logo-ssl"],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/logo-ssl-f2a73119a5044da1b4a796d8bc430abf.svg"],["static-attr","alt","Logo of SSL secure"],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","p",[]],["static-attr","class","message error"],["flush-element"],["append",["unknown",["expiryErrors","firstObject"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder","size","labelTemplate","maxlength"],["cvc","Enter the CVC","4","page-upgrade/cvc-label","4"]]],false],["text","\\n\\n"],["text","        "],["open-element","div",[]],["dynamic-attr","class",["concat",["expiry ",["helper",["if"],[["get",["hasExpiryErrors"]],"error"],null]]]],["flush-element"],["text","\\n          "],["open-element","label",[]],["flush-element"],["text","Expires"],["close-element"],["text","\\n"],["block",["if"],[["get",["hasExpiryErrors"]]],null,0],["text","\\n"],["text","          "],["append",["helper",["f","form-field"],null,[["for","placeholder","label","type","min","max"],["expiryMonth","MM","","number","1","12"]]],false],["text","\\n"],["text","          "],["append",["helper",["f","form-field"],null,[["for","placeholder","label","type","min","max"],["expiryYear","YYYY","","number",["get",["expiresYearMinimum"]],["get",["expiresYearMaximum"]]]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","change-credit-card"],["flush-element"],["text","Want to use another card? Please contact "],["append",["unknown",["email-sales"]],false],["text","."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","header"],["flush-element"],["text","\\n    "],["open-element","h2",[]],["flush-element"],["text","Payment and billing information"],["close-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","ssl-secured"],["flush-element"],["text","SSL Secured"],["close-element"],["text","\\n    "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/logo-powered-by-stripe-grey-a9898ffaadae95f57e1ac356f693e8e3.svg"],["static-attr","alt","Powered by Stripe"],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","body"],["flush-element"],["text","\\n    "],["open-element","fieldset",[]],["static-attr","class","billing-information"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","name"],["flush-element"],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["firstName","First name","Your first name"]]],false],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["lastName","Last name","Your last name"]]],false],["text","\\n      "],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","billing-address"],["flush-element"],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder","label"],["addressLine1","Enter your billing address â line 1","Billing address"]]],false],["text","\\n        "],["append",["helper",["f","form-field"],null,[["for","placeholder","label"],["addressLine2","Enter your billing address â line 2",""]]],false],["text","\\n      "],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","city-state"],["flush-element"],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder","label"],["addressCity","Enter your city","City"]]],false],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder","label"],["addressState","Enter your state, if relevant","State"]]],false],["text","\\n      "],["close-element"],["text","\\n\\n      "],["open-element","div",[]],["static-attr","class","postal-code-country"],["flush-element"],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder","label"],["addressZip","Enter your postal code","Postal Code"]]],false],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder","label"],["addressCountry","Enter your country","Country"]]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","fieldset",[]],["static-attr","class","payment-information"],["flush-element"],["text","\\n"],["text","      "],["append",["helper",["f","form-field"],null,[["for","label","placeholder","size","maxlength","disabled","class"],["cardNumber","Card number","Enter your credit card number",20,20,["get",["hideCreditCardInfo"]],["get",["creditCardType"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["hideCreditCardInfo"]]],null,2,1],["text","\\n"],["text","      "],["append",["unknown",["f","form-generic-errors"]],false],["text","\\n\\n"],["text","      "],["append",["helper",["f","form-submit"],null,[["label"],[["get",["payButtonLabel"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":["f"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/payment-form/template.hbs" },
    });
  }),
  define("frontend/components/pop-over/component", [
    "exports",
    "ember",
    "frontend/mixins/on-click-outside",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["popover"],
      classNameBindings: ["position"],
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          this.sendAction("popoverRendered"),
          this.onClickOutside(function (t) {
            e.sendAction("clickedOutside", t);
          });
      },
    });
  }),
  define("frontend/components/pop-over/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "/9aTIc3P",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","arrow-wrapper"],["flush-element"],["open-element","span",[]],["static-attr","class","arrow"],["flush-element"],["close-element"],["close-element"],["text","\\n"],["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/pop-over/template.hbs" },
    });
  }),
  define("frontend/components/pro-partner/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["pro-partner"],
      tagName: "section",
    });
  }),
  define("frontend/components/pro-partner/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "PUxX0AIY",
      block:
        '{"statements":[["open-element","a",[]],["static-attr","class","pro-partner__link"],["dynamic-attr","href",["unknown",["url"]],null],["static-attr","target","_blank"],["static-attr","rel","noopener"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","pro-partner-image-container"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","class","pro-partner__image"],["dynamic-attr","src",["unknown",["logoSrc"]],null],["dynamic-attr","alt",["unknown",["logoAlt"]],null],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","footer",[]],["static-attr","class","pro-partner-footer"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","pro-partner__text"],["flush-element"],["yield","default"],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/pro-partner/template.hbs" },
    });
  }),
  define("frontend/components/promise-block", [
    "exports",
    "ember-promise-block/components/promise-block",
  ], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/components/promise-block/component", [
    "exports",
    "ember-promise-block/components/promise-block",
  ], function (e, t) {
    e.default = t.default.extend({ loaderTemplate: "helpers/loader" });
  }),
  define("frontend/components/quiz-question-explanation/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["quiz-question-explanation"],
      isEditable: !0,
    });
  }),
  define("frontend/components/quiz-question-explanation/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "L+ki4Ip2",
      block:
        '{"statements":[["append",["helper",["editable-text"],null,[["isEditing","model","text","placeholder","class"],[["get",["isEditable"]],["get",["quizQuestionItem"]],["get",["quizQuestionItem","quizExplanation"]],"Optional explanation when the answer is correct...","explanation"]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/quiz-question-explanation/template.hbs",
      },
    });
  }),
  define("frontend/components/quiz-question-matching-pairs/component", [
    "exports",
    "ember",
    "frontend/mixins/quiz-question",
    "npm:lodash.shuffle",
    "npm:lodash.flatten",
    "ember-responds-to/mixins/responds-to-resize",
    "ember-responds-to/mixins/responds-to-print",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s, o, a, i, l) {
    e.default = t.default.Component.extend(
      a.default,
      i.default,
      n.default,
      l.default,
      {
        classNames: ["quiz-question-matching-pairs"],
        requiredInput: ["pairs"],
        quizQuestionType: t.default
          .computed(function () {
            return "matching";
          })
          .readOnly(),
        hasMoreThanTwoPairs: t.default.computed.gt("pairs.length", 2),
        canDeletePair: t.default.computed.and(
          "isEditing",
          "hasMoreThanTwoPairs"
        ),
        pairs: t.default.computed.reads(
          "quizQuestionItem.quizQuestionMatchingPairs"
        ),
        isCorrect: t.default.computed("_pairs.@each.leftState", function () {
          return this.get("_pairs").every(function (e) {
            return "correct" === e.get("leftState");
          });
        }),
        quizQuestionMatchingPairsTopLevelErrorMessages: t.default.computed(
          "quizQuestionItem.validations.attrs.quizQuestionMatchingPairs.messages",
          "quizQuestionItem.quizQuestionMatchingPairs.validations.attrs.{left,right}.messages",
          function () {
            var e = this.get(
                "quizQuestionItem.validations.attrs.quizQuestionMatchingPairs.messages"
              ),
              t = this.get("quizQuestionItem.quizQuestionMatchingPairs"),
              n = (0, o.default)(t.mapBy("validations.attrs.left.messages")),
              s = (0, o.default)(t.mapBy("validations.attrs.right.messages"));
            return e.filter(function (e) {
              return !n.includes(e) && !s.includes(e);
            });
          }
        ),
        resetNumberCorrectDrags: t.default.on("init", function () {
          this.set("numberCorrectDrags", 0);
        }),
        setupPairs: t.default.on("init", function () {
          var e = [];
          this.get("pairs").forEach(function (n, s) {
            e.pushObject(
              t.default.Object.extend({
                leftState: t.default.computed("receivedRightOf", function () {
                  return null === this.get("receivedRightOf")
                    ? ""
                    : this.get("receivedRightOf") === this
                    ? "correct"
                    : "incorrect";
                }),
                rightState: t.default.computed(
                  "matchedWithLeftOf",
                  function () {
                    return null === this.get("matchedWithLeftOf")
                      ? ""
                      : this.get("matchedWithLeftOf") === this
                      ? "correct"
                      : "incorrect";
                  }
                ),
              }).create({
                id: s,
                left: n.get("left"),
                right: n.get("right"),
                receivedRightOf: null,
                matchedWithLeftOf: null,
              })
            );
          }),
            this.set("_pairs", e);
        }),
        didInsertElement: function () {
          this._super(),
            this._makeDragAndDroppable(
              ".matched-items",
              ".droppable-items",
              ".draggable-items"
            ),
            this._makeAllElementsSameHeight();
        },
        layoutComponentOnPrint: t.default.on("print", function () {
          this._makeAllElementsSameHeight();
        }),
        layoutComponentOnResize: t.default.on("resize", function () {
          this._makeAllElementsSameHeight();
        }),
        _getPairWithId: function (e) {
          return this.get("_pairs").findBy("id", e);
        },
        _getPairOfElement: function (e) {
          return this._getPairWithId(e.data("id"));
        },
        _makeDragAndDroppable: function (e, n, s) {
          var o = this,
            a = this.$(n),
            i = a.find("li"),
            l = this.$(s),
            r = l.find("li");
          this._randomizeDraggables(l, r),
            r.draggable({
              snap: n + " li",
              snapMode: "inner",
              containment: this.$(),
              start: function () {
                var e = this;
                t.default.run(function () {
                  var t = o._getPairOfElement($(e)),
                    n = t.get("matchedWithLeftOf");
                  t.set("matchedWithLeftOf", null),
                    n && n.set("receivedRightOf", null),
                    $(e).data("dropped", !1);
                });
              },
              stop: function () {
                var e = this;
                t.default.run(function () {
                  $(e).data("dropped") || $(e).css({ top: 0, left: 0 });
                });
              },
            }),
            i.droppable({
              accept: function (e) {
                return $.inArray(e, r);
              },
              drop: function (e, n) {
                var s = this;
                t.default.run(function () {
                  var e = o._getPairOfElement($(s)),
                    t = e.get("receivedRightOf");
                  if (t) {
                    t.set("matchedWithLeftOf", null),
                      e.set("receivedRightOf", null);
                    var a = $('*[data-id="' + t.get("id") + '"]', l);
                    a.css({ top: 0, left: 0 });
                  }
                  var i = $(s).offset(),
                    r = n.draggable.offset(),
                    u = i.left - r.left,
                    c = i.top - r.top;
                  n.draggable.css({ top: "+=" + c, left: "+=" + u }),
                    n.draggable.data("dropped", !0),
                    (t = o._getPairOfElement(n.draggable)),
                    (e = o._getPairWithId($(s).data("id"))),
                    t.set("matchedWithLeftOf", e),
                    e.set("receivedRightOf", t),
                    o._trackQuizQuestionEvent("Quiz Question Solving Attempt");
                });
              },
            });
        },
        _makeAllElementsSameHeight: function () {
          var e = this.$(
            ".draggable-items li, .droppable-items li, .matched-items li"
          );
          e.each(function () {
            $(this).css("height", "");
          });
          var t = 0;
          e.each(function () {
            $(this).outerHeight() > t && (t = $(this).outerHeight());
          }),
            e.each(function () {
              $(this).height(t);
            });
        },
        _randomizeDraggables: function (e, t) {
          var n = (0, s.default)(t.toArray());
          e.empty(), e.append(n);
        },
        actions: {
          addPair: function () {
            var e = t.default.getOwner(this).lookup("factory:item"),
              n = e.createQuizQuestionMatchingPair(
                this.get("quizQuestionItem")
              );
            n.save();
          },
          deletePair: function (e) {
            var t = function () {
              e.get("isDeleted") || e.destroyRecord();
            };
            e.get("isSaving") ? e.get("savePromise").then(t) : t();
          },
        },
      }
    );
  }),
  define("frontend/components/quiz-question-matching-pairs/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "FtR9RWei",
      block:
        '{"statements":[["block",["if"],[["get",["isEditable"]]],null,9,6],["text","\\n"],["block",["if"],[["get",["isEditing"]]],null,2],["text","\\n"],["block",["if"],[["get",["showErrors"]]],null,1],["text","\\n"],["block",["if"],[["get",["showExplanation"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["quiz-question-explanation"],null,[["quizQuestionItem","isEditable","isEditing"],[["get",["quizQuestionItem"]],["get",["isEditable"]],["get",["isEditing"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["validation-error-messages"],null,[["errors"],[["get",["quizQuestionMatchingPairsTopLevelErrorMessages"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","button",[]],["static-attr","type","button"],["static-attr","class","button-add-pair"],["modifier",["action"],[["get",[null]],"addPair"]],["flush-element"],["text","Add another pair"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","data-id",["concat",[["unknown",["pair","id"]]]]],["dynamic-attr","class",["concat",[["unknown",["pair","rightState"]]]]],["flush-element"],["append",["unknown",["pair","right"]],false],["close-element"],["text","\\n"]],"locals":["pair"]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","data-id",["concat",[["unknown",["pair","id"]]]]],["dynamic-attr","class",["concat",[["unknown",["pair","leftState"]]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":["pair"]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","data-id",["concat",[["unknown",["pair","id"]]]]],["dynamic-attr","class",["concat",[["unknown",["pair","leftState"]]]]],["flush-element"],["append",["unknown",["pair","left"]],false],["close-element"],["text","\\n"]],"locals":["pair"]},{"statements":[["text","  "],["open-element","ul",[]],["static-attr","class","matched-items"],["flush-element"],["text","\\n"],["block",["each"],[["get",["_pairs"]]],null,5],["text","  "],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","droppable-items"],["flush-element"],["text","\\n"],["block",["each"],[["get",["_pairs"]]],null,4],["text","  "],["close-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","draggable-items"],["flush-element"],["text","\\n"],["block",["each"],[["get",["_pairs"]]],null,3],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","button",[]],["static-attr","type","button"],["static-attr","class","button-delete-pair"],["static-attr","tabindex","-1"],["modifier",["action"],[["get",[null]],"deletePair",["get",["pair"]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["static-attr","class","pair"],["flush-element"],["text","\\n"],["text","        "],["open-element","div",[]],["static-attr","class","left-and-right-pair"],["flush-element"],["text","\\n          "],["append",["helper",["editable-text"],null,[["isEditing","model","text","errors","showErrors","placeholder","class"],[true,["get",["pair"]],["get",["pair","left"]],["get",["pair","validations","attrs","left","messages"]],["get",["showErrors"]],"Insert the left side here...","left"]]],false],["text","\\n          "],["append",["helper",["editable-text"],null,[["isEditing","model","text","errors","showErrors","placeholder","class"],[true,["get",["pair"]],["get",["pair","right"]],["get",["pair","validations","attrs","right","messages"]],["get",["showErrors"]],"Insert the right side here...","right"]]],false],["text","\\n        "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["canDeletePair"]]],null,7],["text","      "],["close-element"],["text","\\n"]],"locals":["pair"]},{"statements":[["text","  "],["open-element","ul",[]],["static-attr","class","pairs"],["flush-element"],["text","\\n"],["block",["each"],[["get",["quizQuestionItem","quizQuestionMatchingPairs"]]],null,8],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/quiz-question-matching-pairs/template.hbs",
      },
    });
  }),
  define("frontend/components/quiz-question-multiple-choice-answers/component", [
    "exports",
    "ember",
    "frontend/mixins/quiz-question",
    "frontend/utils/utility",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["quiz-question-multiple-choice-answers"],
      classNameBindings: ["isEditing"],
      quizQuestionType: t.default
        .computed(function () {
          return "multiple-choice";
        })
        .readOnly(),
      resetSelectedChoices: t.default.on("init", function () {
        this.set("selectedChoices", []);
      }),
      hasMoreThanTwoAnswers: t.default.computed.gt("answers.length", 2),
      canDeleteAnswer: t.default.computed.and(
        "isEditing",
        "hasMoreThanTwoAnswers"
      ),
      answers: t.default.computed.reads(
        "quizQuestionItem.quizQuestionMultipleChoiceAnswers"
      ),
      correctAnswers: t.default.computed.filterBy("answers", "correct"),
      hasCorrectAnswers: t.default.computed.notEmpty("correctAnswers"),
      choices: t.default.computed.mapBy("answers", "text"),
      correctChoices: t.default.computed.mapBy("correctAnswers", "text"),
      isCorrect: t.default.computed(
        "selectedChoices",
        "selectedChoices.[]",
        "correctChoices",
        "correctChoices.[]",
        function () {
          return (
            this.get("hasCorrectAnswers") &&
            s.default.arraysEqual(
              this.get("selectedChoices"),
              this.get("correctChoices")
            )
          );
        }
      ),
      isIncorrect: t.default.computed(
        "isCorrect",
        "selectedChoices.[]",
        "correctChoices.[]",
        function () {
          return (
            this.get("selectedChoices.length") ===
              this.get("correctChoices.length") && !this.get("isCorrect")
          );
        }
      ),
      actions: {
        toggledChoice: function (e, t, n) {
          this._trackQuizQuestionEvent("Quiz Question Solving Attempt"),
            t
              ? this.get("selectedChoices").pushObject(e)
              : this.set(
                  "selectedChoices",
                  this.get("selectedChoices").without(e)
                ),
            n.set("isWaiting", !1);
        },
        addAnswer: function () {
          var e = t.default.getOwner(this).lookup("factory:item"),
            n = e.createQuizQuestionMultipleChoiceAnswer(
              this.get("quizQuestionItem")
            );
          n.save();
        },
        deleteAnswer: function (e) {
          var t = function () {
            e.get("isDeleted") || e.destroyRecord();
          };
          e.get("isSaving") ? e.get("savePromise").then(t) : t();
        },
        toggleCorrectness: function (e) {
          e.toggleProperty("correct"), e.save();
        },
      },
    });
  }),
  define("frontend/components/quiz-question-multiple-choice-answers/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4qq6EuOe",
      block:
        '{"statements":[["open-element","ul",[]],["static-attr","class","answers"],["flush-element"],["text","\\n"],["block",["each"],[["get",["quizQuestionItem","quizQuestionMultipleChoiceAnswers"]]],null,6],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["isEditing"]]],null,2],["text","\\n"],["block",["if"],[["get",["showErrors"]]],null,1],["text","\\n"],["block",["if"],[["get",["showExplanation"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["quiz-question-explanation"],null,[["quizQuestionItem","isEditable","isEditing"],[["get",["quizQuestionItem"]],["get",["isEditable"]],["get",["isEditing"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["validation-error-messages"],null,[["errors"],[["get",["quizQuestionItem","validations","attrs","quizQuestionMultipleChoiceAnswers","messages"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","button",[]],["static-attr","type","button"],["static-attr","class","button-add-answer"],["modifier",["action"],[["get",[null]],"addAnswer"]],["flush-element"],["text","Add another answer"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","button",[]],["static-attr","type","button"],["static-attr","class","button-delete-answer"],["static-attr","tabindex","-1"],["modifier",["action"],[["get",[null]],"deleteAnswer",["get",["answer"]]]],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["check-box"],null,[["action","label"],[["helper",["action"],[["get",[null]],"toggledChoice"],null],["get",["answer","text"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","button",[]],["static-attr","type","button"],["static-attr","class","button-toggle-correctness"],["static-attr","tabindex","-1"],["modifier",["action"],[["get",[null]],"toggleCorrectness",["get",["answer"]]]],["flush-element"],["close-element"],["text","\\n"],["text","        "],["append",["helper",["editable-text"],null,[["isEditing","model","text","errors","placeholder"],[["get",["isEditable"]],["get",["answer"]],["get",["answer","text"]],["get",["answer","errors","text"]],"Insert an answer here..."]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["dynamic-attr","class",["concat",["answer ",["helper",["if"],[["get",["answer","correct"]],"is-correct"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["isEditable"]]],null,5,4],["text","\\n"],["block",["if"],[["get",["canDeleteAnswer"]]],null,3],["text","    "],["close-element"],["text","\\n"]],"locals":["answer"]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/quiz-question-multiple-choice-answers/template.hbs",
      },
    });
  }),
  define("frontend/components/read-more/component", [
    "exports",
    "ember",
  ], function (e, t) {
    var n = 200;
    e.default = t.default.Component.extend({
      classNames: ["read-more"],
      collapsedNumberOfLines: 3,
      didInsertElement: function () {
        this._super.apply(this, arguments), this._setupReadmore();
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.$(".read-more-content").readmore("destroy");
      },
      becameReady: t.default.observer("isReady", function () {
        var e = this;
        this.get("isReady") &&
          t.default.run.scheduleOnce("afterRender", function () {
            e._setupReadmore();
          });
      }),
      _setupReadmore: function () {
        var e = parseInt(this.$().css("line-height"));
        this.$(".read-more-content").readmore({
          collapsedHeight: this.get("collapsedNumberOfLines") * e,
          moreLink:
            '<button class="button-read-more">read more&hellip;</button>',
          lessLink:
            '<button class="button-read-less">read less&hellip;</button>',
          speed: n,
        });
      },
    });
  }),
  define("frontend/components/read-more/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "egX+UmsC",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","read-more-content"],["flush-element"],["yield","default"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/read-more/template.hbs" },
    });
  }),
  define("frontend/components/registration-form/component", [
    "exports",
    "ember",
    "frontend/validations/controllers/teacher-registration",
    "frontend/validations/controllers/student-registration",
    "frontend/validations/controllers/personal-registration",
    "frontend/utils/form-object",
    "frontend/models/user",
    "ember-concurrency",
    "frontend/utils/api-paths",
    "frontend/utils/xhr",
    "frontend/utils/analytics-utils",
  ], function (e, t, n, s, o, a, i, l, r, u, c) {
    e.default = t.default.Component.extend({
      classNames: ["registration-form"],
      classNameBindings: ["currentUser.registrationMechanism"],
      session: t.default.inject.service(),
      errorObjectsFactory: t.default.inject.service(),
      store: t.default.inject.service(),
      analytics: t.default.inject.service(),
      storyCollaborationInvitationData: t.default.inject.service(),
      init: function () {
        this._super.apply(this, arguments);
        var e = null;
        if ("teacher" === this.get("userType"))
          e = t.default.Object.extend(n.default);
        else if ("student" === this.get("userType"))
          e = t.default.Object.extend(s.default);
        else {
          if ("personal" !== this.get("userType"))
            throw new Error("Unknown user type '" + this.get("userType") + "'");
          e = t.default.Object.extend(o.default);
        }
        var i = e.create(t.default.getOwner(this).ownerInjection(), {
          title: "",
          firstName: "",
          lastName: "",
          email: "",
          username: "",
          password: "",
          passwordConfirmation: "",
          termsOfService: !1,
        });
        i.set("controller", this);
        var l = a.default.create({ model: i });
        l.bindModelAttributes([
          "title",
          "firstName",
          "lastName",
          "email",
          "username",
          "password",
          "passwordConfirmation",
          "termsOfService",
        ]),
          this.setProperties({ formObject: l, model: i }),
          this.prefillFieldsIfLoggedIn();
      },
      prefillFieldsIfLoggedIn: t.default.observer(
        "session.isLoggedIn",
        function () {
          if (this.get("session.isLoggedIn")) {
            var e = this.get("currentUser");
            this.get("model").setProperties({
              id: e.get("id"),
              registrationMechanism: e.get("registrationMechanism"),
              title: e.get("title") || "",
              firstName: e.get("firstName"),
              lastName: e.get("lastName"),
            });
          }
        }
      ),
      currentUser: t.default.computed.reads("session.currentUser"),
      invitationToken: t.default.computed.reads(
        "storyCollaborationInvitationData.invitationToken"
      ),
      possibleTitles: t.default
        .computed(function () {
          return i.default.POSSIBLE_TITLES;
        })
        .readOnly(),
      submitButtonLabel: t.default.computed("session.isLoggedIn", function () {
        return this.get("session.isLoggedIn")
          ? "Complete the sign up"
          : "Ready to create";
      }),
      isTeacherRegistration: t.default.computed.equal("userType", "teacher"),
      isStudentRegistration: t.default.computed.equal("userType", "student"),
      isPersonalRegistration: t.default.computed.equal("userType", "personal"),
      askTitle: t.default.computed.reads("isTeacherRegistration"),
      askEmail: t.default.computed(
        "session.isGuestUser",
        "isTeacherRegistration",
        "isPersonalRegistration",
        function () {
          return (
            this.get("session.isGuestUser") &&
            (this.get("isTeacherRegistration") ||
              this.get("isPersonalRegistration"))
          );
        }
      ),
      askUsername: t.default.computed.and(
        "session.isGuestUser",
        "isStudentRegistration"
      ),
      askPassword: t.default.computed.reads("session.isGuestUser"),
      askTermsOfService: t.default.computed.or(
        "isTeacherRegistration",
        "isPersonalRegistration"
      ),
      notModifiedTitle: t.default.computed(
        "formObject.title",
        "currentUser.title",
        function () {
          return (
            !t.default.isBlank(this.get("formObject.title")) &&
            this.get("formObject.title") === this.get("currentUser.title")
          );
        }
      ),
      notModifiedFirstName: t.default.computed(
        "formObject.firstName",
        "currentUser.firstName",
        function () {
          return (
            !t.default.isBlank(this.get("formObject.firstName")) &&
            this.get("formObject.firstName") ===
              this.get("currentUser.firstName")
          );
        }
      ),
      notModifiedLastName: t.default.computed(
        "formObject.lastName",
        "currentUser.lastName",
        function () {
          return (
            !t.default.isBlank(this.get("formObject.lastName")) &&
            this.get("formObject.lastName") === this.get("currentUser.lastName")
          );
        }
      ),
      registerUser: function (e, t, n, s) {
        this.get("registerUserTask").perform(e, t, n, s);
      },
      registerUserTask: (0, l.task)(
        regeneratorRuntime.mark(function e(n, s, o) {
          var a,
            i,
            l,
            d =
              arguments.length <= 3 || void 0 === arguments[3]
                ? "sutori"
                : arguments[3];
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      o.set("loading", !0),
                      (s.provider = d),
                      (s.role_type = n),
                      t.default.isPresent(this.get("invitationToken")) &&
                        (s.invitation_token = this.get("invitationToken")),
                      (e.prev = 4),
                      (e.next = 7),
                      u.default.post(r.default.register_path(), s)
                    );
                  case 7:
                    return (
                      (a = e.sent),
                      (i = a.data.attributes),
                      t.default.isNone(i.email) &&
                        (i.email = (o.get("email") || "").trim().toLowerCase()),
                      (i.username = i.username || ""),
                      this.get("store").pushPayload("user", a),
                      (l = this.get("store").peekRecord("user", a.data.id)),
                      this.get("analytics").trackEvent("Signup", {
                        Email: l.get("email"),
                        Username: l.get("username"),
                        "Type of user signed up": (0, c.typeOfUser)(l),
                        "Registration mechanism": d.capitalize(),
                      }),
                      (e.next = 16),
                      this.get("registrationSucceeded")(l)
                    );
                  case 16:
                    e.next = 21;
                    break;
                  case 18:
                    (e.prev = 18),
                      (e.t0 = e.catch(4)),
                      o.set(
                        "errors",
                        this.get(
                          "errorObjectsFactory"
                        ).createRequestMessagesObject(e.t0)
                      );
                  case 21:
                    return (e.prev = 21), o.set("loading", !1), e.finish(21);
                  case 24:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[4, 18, 21, 24]]
          );
        })
      ).drop(),
      actions: {
        register: function () {
          var e = this.get("formObject"),
            t = this.get("model");
          t.get("validations.isValid")
            ? this.registerUser(
                this.get("userType"),
                {
                  user: {
                    id: t.get("id"),
                    title: t.get("title"),
                    first_name: t.get("firstName"),
                    last_name: t.get("lastName"),
                    email: t.get("email"),
                    username: t.get("username"),
                    password: t.get("password"),
                    password_confirmation: t.get("passwordConfirmation"),
                    terms_of_service: t.get("termsOfService"),
                  },
                },
                e,
                this.get("currentUser.registrationMechanism")
              )
            : e.showValidationErrors();
        },
      },
    });
  }),
  define("frontend/components/registration-form/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "RBfjT32K",
      block:
        '{"statements":[["block",["object-form"],null,[["action","for"],["register",["get",["formObject"]]]],8]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Privacy Policy"]],"locals":[]},{"statements":[["text","Terms of Use"]],"locals":[]},{"statements":[["text","        I agree to the "],["block",["link-to"],["termsOfUse"],[["target"],["_blank"]],1],["text"," and the "],["block",["link-to"],["privacyPolicy"],[["target"],["_blank"]],0],["text",".\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","wrapper-terms-of-service"],["flush-element"],["text","\\n"],["block",["f","form-check-box"],null,[["for"],["termsOfService"]],2],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["f","form-field"],null,[["for","placeholder","type"],["password","Password","password"]]],false],["text","\\n"],["text","    "],["append",["helper",["f","form-field"],null,[["for","placeholder","type"],["passwordConfirmation","Password confirmation","password"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["f","form-field"],null,[["for","placeholder"],["username","Choose a username"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["f","form-field"],null,[["for","placeholder","type"],["email","Email address","email"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["button-group"],null,[["name","values","value","errors","class"],["title",["get",["possibleTitles"]],["get",["formObject","title"]],["get",["formObject","errors","title"]],["helper",["concat"],[["helper",["if"],[["get",["notModifiedTitle"]],"not-modified"],null]," "],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["askTitle"]]],null,7],["text","\\n  "],["open-element","div",[]],["static-attr","class","wrapper-name"],["flush-element"],["text","\\n"],["text","    "],["append",["helper",["f","form-field"],null,[["for","placeholder","class"],["firstName","First name",["helper",["concat"],[["helper",["if"],[["get",["notModifiedFirstName"]],"not-modified"],null]," "],null]]]],false],["text","\\n"],["text","    "],["append",["helper",["f","form-field"],null,[["for","placeholder","class"],["lastName","Last name",["helper",["concat"],[["helper",["if"],[["get",["notModifiedLastName"]],"not-modified"],null]," "],null]]]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["askEmail"]]],null,6],["text","\\n"],["block",["if"],[["get",["askUsername"]]],null,5],["text","\\n"],["block",["if"],[["get",["askPassword"]]],null,4],["text","\\n"],["block",["if"],[["get",["askTermsOfService"]]],null,3],["text","\\n"],["text","  "],["append",["helper",["f","form-submit"],null,[["label"],[["get",["submitButtonLabel"]]]]],false],["text","\\n"]],"locals":["f"]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/registration-form/template.hbs",
      },
    });
  }),
  define("frontend/components/render-image/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "ember-responds-to/mixins/responds-to-resize",
    "ember-responds-to/mixins/responds-to-scroll",
    "npm:imagesloaded",
    "ember-concurrency",
    "frontend/mixins/velocity",
    "frontend/mixins/lazy-loadable-media",
    "npm:object-fit-images",
  ], function (e, t, n, s, o, a, i, l, r, u) {
    e.default = t.default.Component.extend(
      n.default,
      s.default,
      o.default,
      r.default,
      l.default,
      {
        classNames: ["render-image"],
        classNameBindings: [
          "lightbox:has-lightbox",
          "hasImage::has-no-image",
          "overflowPolicy",
          "isImageSrcSet",
        ],
        analytics: t.default.inject.service(),
        clientInformation: t.default.inject.service(),
        session: t.default.inject.service(),
        imageFile: null,
        width: null,
        height: null,
        maxHeight: null,
        overflowPolicy: "contain",
        lightbox: !1,
        didInsertElement: function () {
          this._super.apply(this, arguments),
            this._doFastclickable(),
            this._setDimensions(),
            (0, u.default)(this.$(".image"));
        },
        resize: function () {
          this._super.apply(this, arguments), this._setDimensions();
        },
        loadMediaTask: (0, i.task)(
          regeneratorRuntime.mark(function e() {
            var n, s;
            return regeneratorRuntime.wrap(
              function (e) {
                for (var o = this; ; )
                  switch ((e.prev = e.next)) {
                    case 0:
                      if (this.get("imageLoaded")) {
                        e.next = 12;
                        break;
                      }
                      return (
                        this.get("hasImageVersion") || this._setDimensions(),
                        this.set("isImageSrcSet", !0),
                        (e.next = 5),
                        new t.default.RSVP.Promise(function (e, n) {
                          t.default.debug(
                            "Loading image: " + o.get("imageSrc")
                          ),
                            t.default.run.next(function () {
                              if (
                                t.default.isNone(o.element) ||
                                o.$(".image")[0].complete
                              )
                                e(!0);
                              else {
                                var s = (0, a.default)(o.element);
                                s.on("done", function () {
                                  t.default.run(function () {
                                    e(!1);
                                  });
                                }),
                                  s.on("fail", function () {
                                    t.default.run(n);
                                  });
                              }
                            });
                        })
                      );
                    case 5:
                      return (
                        (n = e.sent),
                        (s = 500),
                        n && (s = 0),
                        (e.next = 10),
                        this.animate(this.$(".image"), "fadeIn", {
                          duration: s,
                          display: "block",
                        })
                      );
                    case 10:
                      this.set("imageLoaded", !0),
                        t.default.debug(
                          "Loaded image: " + this.get("imageSrc")
                        );
                    case 12:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        isContain: t.default.computed.equal("overflowPolicy", "contain"),
        isCover: t.default.computed.equal("overflowPolicy", "cover"),
        hasImage: t.default.computed.notEmpty("imageFile"),
        hasCaption: t.default.computed.notEmpty("imageFile.caption"),
        imageSrc: t.default.computed(
          "imageVersion.url",
          "isImageSrcSet",
          function () {
            if (this.get("isImageSrcSet")) return this.get("imageVersion.url");
          }
        ),
        hasImageSrc: t.default.computed.notEmpty("imageSrc"),
        hasImageVersion: t.default.computed.notEmpty("imageVersion"),
        imageAlt: t.default.computed("imageFile.caption", function () {
          return this.get("imageFile.caption") || "";
        }),
        imageVersion: t.default.computed(
          "hasImage",
          "elementId",
          "width",
          "height",
          "overflowPolicy",
          "imageFile",
          "imageFile.imageFileVersions.@each.{width,height}",
          "clientInformation.devicePixelRatio",
          function () {
            if (this.get("hasImage")) {
              var e = this.get("overflowPolicy"),
                n = this.get("width"),
                s = this.get("height"),
                o = this.get("imageFile").bestVersionToDisplayForDimensions(
                  n,
                  s,
                  e
                );
              if (t.default.isPresent(o)) {
                var a = this.get("elementId"),
                  i = o.get("width"),
                  l = o.get("height");
                return (
                  t.default.debug(
                    a +
                      ": Showing image version (" +
                      i +
                      ", " +
                      l +
                      ") for container (" +
                      n +
                      ", " +
                      s +
                      ", " +
                      e +
                      ")"
                  ),
                  o
                );
              }
            }
          }
        ),
        lightboxImageVersion: t.default.computed(
          "hasImage",
          "imageFile.imageFileVersions.@each.{width,height}",
          "clientInformation.{devicePixelRatio,viewportWidth,viewportHeight}",
          function () {
            if (this.get("hasImage")) {
              var e = this.get("clientInformation.viewportWidth"),
                t = this.get("clientInformation.viewportHeight");
              return this.get("imageFile").bestVersionToDisplayForDimensions(
                e,
                t,
                "contain"
              );
            }
          }
        ),
        _setDimensions: function () {
          if (this.$().is(":visible")) {
            var e = void 0,
              t = void 0;
            if (((e = this.$().width()), this.get("isCover")))
              t = this.$().height();
            else {
              if (!this.get("isContain"))
                throw new Error(
                  "'overflowPolicy' must be one of 'cover' or 'contain'"
                );
              t = this.get("maxHeight") || Number.MAX_VALUE;
            }
            this.setProperties({ width: e, height: t });
          }
        },
        _doFastclickable: function () {
          t.default.isPresent(this.$(".image")) &&
            this.makeFastclickable(this.$(".image"));
        },
        actions: {
          showLightbox: function () {
            this.get("lightbox") && this.get("lightBoxComponent").send("open");
          },
        },
      }
    );
  }),
  define("frontend/components/render-image/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "kI1a0aHT",
      block:
        '{"statements":[["open-element","img",[]],["dynamic-attr","src",["unknown",["imageSrc"]],null],["dynamic-attr","alt",["unknown",["imageAlt"]],null],["dynamic-attr","height",["unknown",["imageVersion","height"]],null],["static-attr","class","image"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"showLightbox"]],["flush-element"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["lightbox"]]],null,1],["text","\\n"],["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","    "],["append",["helper",["light-box"],null,[["actionReceiver","renderImageComponent","story","src","caption"],[["get",["lightBoxComponent"]],["get",[null]],["get",["story"]],["get",["lightboxImageVersion","url"]],["get",["imageFile","caption"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["ember-wormhole"],null,[["to"],["lightbox"]],0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/render-image/template.hbs" },
    });
  }),
  define("frontend/components/render-video/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/mixins/lazy-loadable-media",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, {
      classNames: ["render-video"],
      html5Sources: t.default.computed("video.url", function () {
        return [this.get("video.url")];
      }),
      loadMediaTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (var s = this; ; )
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      t.default.debug("Loading video: " + this.get("video")),
                      this.set("showVideo", !0),
                      (e.next = 4),
                      new t.default.RSVP.Promise(function (e) {
                        t.default.run.next(function () {
                          e(s.get("videoComponent.target"));
                        });
                      })
                    );
                  case 4:
                    return (n = e.sent), (e.next = 7), n.actions.load.apply(n);
                  case 7:
                    t.default.debug("Loaded video: " + this.get("video"));
                  case 8:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
    });
  }),
  define("frontend/components/render-video/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "6TJ7RCxC",
      block:
        '{"statements":[["block",["if"],[["get",["showVideo"]]],null,4,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","loader-overlay"],["flush-element"],["text","\\n    "],["partial","helpers/loader"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["youtube-video"],null,[["actionReceiver","videoId","startTime","endTime"],[["get",["videoComponent"]],["get",["video","videoId"]],["get",["video","startTime"]],["get",["video","endTime"]]]]],false],["text","\\n    "]],"locals":[]},{"statements":[["block",["if"],[["get",["video","isYoutube"]]],null,1]],"locals":[]},{"statements":[["text","      "],["append",["helper",["html5-video"],null,[["actionReceiver","sources"],[["get",["videoComponent"]],["get",["html5Sources"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","video"],["flush-element"],["text","\\n"],["block",["if"],[["get",["video","isCustom"]]],null,3,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/render-video/template.hbs" },
    });
  }),
  define("frontend/components/rich-text-content/component", [
    "exports",
    "ember",
    "frontend/mixins/on-click-outside",
    "frontend/mixins/floatable",
    "ember-responds-to/mixins/responds-to-resize",
    "frontend/config/environment",
    "npm:@yoranbrondsema/mobiledoc-kit",
    "frontend/utils/dom",
    "ember-concurrency",
    "frontend/mixins/velocity",
    "frontend/utils/promise-utils",
    "frontend/utils/mobiledoc",
  ], function (e, t, n, s, o, a, i, l, r, u, c, d) {
    var m = 20;
    e.default = t.default.Component.extend(
      n.default,
      s.default,
      o.default,
      u.default,
      {
        classNames: ["rich-text-content"],
        classNameBindings: [
          "isEditing:is-editing",
          "isFocused",
          "withNotes:with-notes",
        ],
        clientInformation: t.default.inject.service(),
        store: t.default.inject.service(),
        placeholder: "",
        spellcheck: !0,
        autofocus: !1,
        withNotes: !1,
        isEditing: !1,
        activeSections: [],
        activeMarkups: [],
        activeLinkMarkups: [],
        activeNoteMarkups: [],
        isSimulation: !1,
        updateContentDelay: t.default
          .computed(function () {
            return 10;
          })
          .readOnly(),
        autosaveInterval: t.default
          .computed(function () {
            return t.default.isPresent(
              a.default.APP.RICH_TEXT_CONTENT_AUTOSAVE_DELAY
            )
              ? a.default.APP.RICH_TEXT_CONTENT_AUTOSAVE_DELAY
              : 2e3;
          })
          .readOnly(),
        keyCommands: t.default
          .computed("allowRichTextEditing", function () {
            var e = this,
              t = [
                {
                  str: "CTRL+B",
                  run: function (t) {
                    e.send("toggleBold", t);
                  },
                },
                {
                  str: "META+B",
                  run: function (t) {
                    e.send("toggleBold", t);
                  },
                },
                {
                  str: "CTRL+I",
                  run: function (t) {
                    e.send("toggleItalic", t);
                  },
                },
                {
                  str: "META+I",
                  run: function (t) {
                    e.send("toggleItalic", t);
                  },
                },
                {
                  str: "CTRL+U",
                  run: function (t) {
                    e.send("toggleUnderline", t);
                  },
                },
                {
                  str: "META+U",
                  run: function (t) {
                    e.send("toggleUnderline", t);
                  },
                },
                {
                  str: "CTRL+SHIFT+7",
                  run: function (t) {
                    e.send("toggleUnorderedList", t);
                  },
                },
                {
                  str: "META+SHIFT+7",
                  run: function (t) {
                    e.send("toggleUnorderedList", t);
                  },
                },
                {
                  str: "CTRL+SHIFT+8",
                  run: function (t) {
                    e.send("toggleOrderedList", t);
                  },
                },
                {
                  str: "META+SHIFT+8",
                  run: function (t) {
                    e.send("toggleOrderedList", t);
                  },
                },
                {
                  str: "CTRL+K",
                  run: function () {
                    e.send("editLink");
                  },
                },
                {
                  str: "META+K",
                  run: function () {
                    e.send("editLink");
                  },
                },
              ];
            return (
              this.get("allowRichTextEditing") ||
                t.forEach(function (e) {
                  e.run = function () {};
                }),
              t
            );
          })
          .readOnly(),
        init: function () {
          this._super.apply(this, arguments);
          var e = this.get("model.contentAsJson");
          this.setProperties({
            initialMobiledoc: e,
            editedMobiledoc: e,
            currentSelection: null,
            linkEditorActive: !1,
            noteEditorActive: !1,
          }),
            this._setupEditorTriggers(),
            this._registerKeyCommands();
        },
        didInsertElement: function () {
          var e = this;
          this._super.apply(this, arguments),
            this.onClickOutside(function () {
              e.get("isEditing") &&
                e._isAlive() &&
                (e.setProperties({
                  linkEditorActive: !1,
                  noteEditorActive: !1,
                  isFocused: !1,
                }),
                e._saveContent());
            }),
            this._setupFocusEvents();
        },
        didRender: function () {
          this._super.apply(this, arguments);
          var e = this.get("editor");
          if (this.get("_renderedEditor") !== e) {
            var t = this.$(".content-kit-editor")[0];
            this.set("_renderedEditor", e),
              e.render(t),
              $(t).on("dragstart drop", function (e) {
                e.preventDefault();
              });
          }
        },
        willDestroyElement: function () {
          this._super.apply(this, arguments), this.get("editor").destroy();
        },
        resize: function () {
          this._super.apply(this, arguments), this._positionNoteEditor();
        },
        editor: t.default.computed(
          "initialMobiledoc",
          "spellcheck",
          "autofocus",
          function () {
            return new i.default.Editor({
              mobiledoc: this.get("initialMobiledoc"),
              spellcheck: this.get("spellcheck"),
              autofocus: this.get("autofocus"),
              placeholder: this.get("placeholder"),
              undoDepth: m,
            });
          }
        ),
        allowRichTextEditing: t.default.computed.not(
          "clientInformation.isOnIpad"
        ),
        showToolbar: t.default.computed.and(
          "isEditing",
          "isFocused",
          "allowRichTextEditing"
        ),
        showNotesPopovers: t.default.computed(
          "withNotes",
          "model.hasNotes",
          "isEditing",
          function () {
            return (
              this.get("withNotes") &&
              this.get("model.hasNotes") &&
              !this.get("isEditing")
            );
          }
        ),
        currentNonCollapsedSelection: t.default.computed(
          "currentSelection",
          function () {
            var e = this.get("currentSelection");
            return (
              t.default.isPresent(e) &&
                e.isCollapsed &&
                e.head.offset > 0 &&
                ((e = e.clone()), (e.head.offset -= 1)),
              e
            );
          }
        ),
        isCurrentSelectionCollapsed: t.default.computed(
          "currentSelection",
          "currentSelection.head",
          "currentSelection.tail",
          function () {
            var e = this.get("currentSelection");
            return t.default.isNone(e) || e.isCollapsed;
          }
        ),
        activeLinkMarkup: t.default.computed.reads(
          "activeLinkMarkups.firstObject"
        ),
        activeNoteMarkup: t.default.computed.reads(
          "activeNoteMarkups.firstObject"
        ),
        isLinkMarkupActive: t.default.computed.notEmpty("activeLinkMarkup"),
        isNoteMarkupActive: t.default.computed.notEmpty("activeNoteMarkup"),
        linkHrefForSelection: t.default.computed(
          "activeLinkMarkup.attributes.href",
          function () {
            var e = this.get("activeLinkMarkup");
            return t.default.isPresent(e) ? e.attributes.href : "";
          }
        ),
        notesButtonTitle: t.default.computed("isNoteMarkupActive", function () {
          return this.get("isNoteMarkupActive") ? "Edit note" : "Add a note";
        }),
        linksButtonTitle: t.default.computed("isLinkMarkupActive", function () {
          return this.get("isLinkMarkupActive") ? "Edit link" : "Add a link";
        }),
        markupToolsDisabled: t.default.computed.or(
          "noteEditorActive",
          "isOutsideOfTextArea",
          "hasNoteAndSomethingElseSelected"
        ),
        sectionToolsDisabled: t.default.computed.or(
          "noteEditorActive",
          "isOutsideOfTextArea"
        ),
        linkRemovalDisabled: t.default.computed.or(
          "noteEditorActive",
          "isOutsideOfTextArea",
          "linkRemovalHidden"
        ),
        linkRemovalHidden: t.default.computed(
          "activeLinkMarkups.length",
          function () {
            return 1 !== this.get("activeLinkMarkups.length");
          }
        ),
        linkEditingDisabled: t.default.computed(
          "isCurrentSelectionCollapsed",
          "isNoteMarkupActive",
          "activeLinkMarkups.length",
          "isOutsideOfTextArea",
          "noteEditorActive",
          function () {
            var e = this.get("activeLinkMarkups.length"),
              t = this.get("isNoteMarkupActive"),
              n = this.get("isCurrentSelectionCollapsed");
            return (
              (0 === e && (t || n)) ||
              e >= 2 ||
              this.get("noteEditorActive") ||
              this.get("isOutsideOfTextArea")
            );
          }
        ),
        noteEditingDisabled: t.default.computed(
          "isCurrentSelectionCollapsed",
          "activeNoteMarkups.length",
          "isLinkMarkupActive",
          "isOutsideOfTextArea",
          "noteEditorActive",
          function () {
            var e = this.get("activeNoteMarkups.length"),
              t = this.get("isLinkMarkupActive"),
              n = this.get("isCurrentSelectionCollapsed");
            return (
              (0 === e && (t || n)) ||
              e >= 2 ||
              (!this.get("noteEditorActive") && this.get("isOutsideOfTextArea"))
            );
          }
        ),
        hasNoteAndSomethingElseSelected: t.default.computed(
          "currentSelection",
          function () {
            var e = this.get("editor.range.head"),
              t = e.marker,
              n = this.get("editor.range.tail.marker");
            if (t) {
              var s = t.next;
              if (
                !(0, d.hasNoteMarkup)(t) &&
                (0, d.isAtStartOfNote)(e) &&
                s === n
              )
                return !1;
              if (
                n &&
                !(0, d.hasNoteMarkup)(n) &&
                (0, d.isAtEndOfNote)(e) &&
                s === n
              )
                return !1;
            }
            return (
              !(!(0, d.isAtStartOfNote)(e) || (0, d.hasNoteMarkup)(n)) ||
              !(!(0, d.hasNoteMarkup)(t) || (0, d.hasNoteMarkup)(n)) ||
              !((0, d.hasNoteMarkup)(t) || !(0, d.hasNoteMarkup)(n)) ||
              void 0
            );
          }
        ),
        _onFocusChange: t.default.observer("isFocused", function () {
          this.sendAction("focusChanged", this.get("isFocused"));
        }),
        positionNoteEditor: t.default.observer("noteEditorActive", function () {
          this._positionNoteEditor();
        }),
        setupEditorTriggers: t.default.observer("editor", function () {
          this._setupEditorTriggers();
        }),
        registerKeyCommands: t.default.observer(
          "editor",
          "keyCommands",
          function () {
            this._registerKeyCommands();
          }
        ),
        _editingStateChanged: t.default.observer(
          "isEditing",
          "editor",
          function () {
            var e = this;
            t.default.run.scheduleOnce("afterRender", function () {
              var n = e.get("editor");
              t.default.isPresent(n) &&
                e.$() &&
                (e.get("isEditing") ? n.enableEditing() : n.disableEditing());
            });
          }
        ),
        _currentSelectionChanged: t.default.observer(
          "currentSelection",
          function () {
            this._isAlive() &&
              this.setProperties({
                linkEditorActive: !1,
                noteEditorActive: !1,
                isOutsideOfTextArea: !1,
              });
          }
        ),
        _mobileDocEdited: t.default.observer("editedMobiledoc", function () {
          this.set(
            "model.content",
            JSON.stringify(this.get("editedMobiledoc"))
          ),
            t.default.run.debounce(
              this,
              this._saveContent,
              this.get("autosaveInterval")
            );
        }),
        _noteUpdated: t.default.observer("noteEditorActive", function () {
          if (!this.get("noteEditorActive")) {
            var e = this.get("editingNote");
            t.default.isPresent(e) &&
              e.get("hasDirtyAttributes") &&
              !e.get("isNew") &&
              this._saveContentImmediately();
          }
        }),
        saveContentTask: (0, r.task)(
          regeneratorRuntime.mark(function e() {
            var n, s, o;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      if (!this.get("isEditing") || this.get("isSimulation")) {
                        e.next = 8;
                        break;
                      }
                      if (
                        ((n = this.get("model")),
                        !t.default.isPresent(n) ||
                          !n.get("hasDirtyAttributes") ||
                          n.get("isSaving"))
                      ) {
                        e.next = 8;
                        break;
                      }
                      return (
                        (s = this._updateNotesModels()),
                        (o = n.save()),
                        (e.next = 7),
                        t.default.RSVP.all(s.concat([o]))
                      );
                    case 7:
                      this._displaySavedNotification();
                    case 8:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ).keepLatest(),
        _registerKeyCommands: function () {
          var e = this.get("editor");
          this.get("keyCommands").forEach(function (t) {
            e.registerKeyCommand(t);
          });
        },
        _positionNoteEditor: function () {
          var e = this;
          this.get("noteEditorActive") &&
            t.default.run.scheduleOnce("afterRender", function () {
              var n = e
                .get("editor.cursor")
                .selection.getRangeAt(0)
                .getClientRects()[0];
              if (t.default.isPresent(n)) {
                var s = e.$().offset(),
                  o = 22.4,
                  a = n.top - (s.top - $(window).scrollTop()) + o / 2,
                  i = n.left - (s.left - $(window).scrollLeft());
                e.$(".note-editor").css({ top: a, left: i });
              }
              e.positionInsideWindowBounds(e.$(".note-editor"));
            });
        },
        _setupEditorTriggers: function () {
          var e = this,
            n = this.get("editor");
          n.cursorDidChange(function () {
            t.default.run(function () {
              if (e._isAlive())
                if (e._isCursorInsideEditor()) {
                  var s = n.cursor.offsets.clone(),
                    o = e.get("currentSelection"),
                    a = e.get("isOutsideOfTextArea");
                  (t.default.isNone(o) || !o.isEqual(s) || a) &&
                    e.set("currentSelection", s);
                } else e.set("isOutsideOfTextArea", !0);
            });
          }),
            n.inputModeDidChange(function () {
              t.default.run(function () {
                if (!e.get("isOutsideOfTextArea")) {
                  var t = e.get("editor.activeMarkups"),
                    n = e.get("editor.activeSections").slice(0),
                    s = n.mapBy("parent").pushObjects(n);
                  e.set(
                    "isBoldMarkupActive",
                    (0, d.markupsContainTags)(t, ["strong", "b"])
                  ),
                    e.set(
                      "isItalicMarkupActive",
                      (0, d.markupsContainTags)(t, ["em", "italic"])
                    ),
                    e.set(
                      "isUnderlineMarkupActive",
                      (0, d.markupsContainTags)(t, ["u"])
                    ),
                    e.set("activeLinkMarkups", t.filterBy("tagName", "a")),
                    e.set("activeNoteMarkups", (0, d.getNoteMarkups)(t)),
                    e.set("activeSections", n),
                    e.set("activeListItemMarkups", n.filterBy("tagName", "li")),
                    e.set(
                      "isUnorderedListMarkupActive",
                      (0, d.markupsContainTags)(s, ["ul"])
                    ),
                    e.set(
                      "isOrderedListMarkupActive",
                      (0, d.markupsContainTags)(s, ["ol"])
                    );
                }
              });
            }),
            n.didRender(function () {
              e._editingStateChanged(),
                e._setupNotesPopoverIfInitialized(),
                e._determineLinksWithIcons();
            }),
            n.postDidChange(function () {
              t.default.run.debounce(
                e,
                e._updateContent,
                e.get("updateContentDelay")
              );
            });
        },
        _textWithInjectedNotes: function () {
          var e = t.default.copy(this.get("model.content")) || "",
            n = this.get("model.notes") || [];
          return (
            n.forEach(function (t) {
              var n = t.get("id"),
                s = t.get("word"),
                o = '<span data-note-id="' + n + '">' + s + "</span>";
              e = e.replace(s, o);
            }),
            e
          );
        },
        _updateNotesModels: function () {
          var e = this.$(".content-kit-editor span")
              .toArray()
              .filter(function (e) {
                return t.default.isPresent($(e).attr("data-note-id"));
              })
              .map(function (e) {
                return t.default.Object.create({
                  id: $(e).attr("data-note-id"),
                  word: $(e).text(),
                });
              }),
            n = this.get("model.notes").compact();
          return n.map(function (n) {
            var s = e.findBy("id", n.get("id"));
            return t.default.isNone(s)
              ? n.get("isDeleted") || n.get("isDestroyed") || n.get("isSaving")
                ? void 0
                : n.destroyRecord()
              : s.get("word") !== n.get("word")
              ? (n.set("word", s.get("word")), n.save())
              : (0, c.wrapInPromise)();
          });
        },
        _markerHasMarkup: function (e, n) {
          return t.default.isPresent(e) && e.hasMarkup(n);
        },
        _replaceOldMarkupWithNewInSelection: function (e, n) {
          var s =
              arguments.length <= 2 || void 0 === arguments[2]
                ? null
                : arguments[2],
            o = this.get("currentNonCollapsedSelection"),
            a = this.get("editor.post"),
            i = null;
          for (
            a.walkMarkerableSections(o, function (e) {
              e._markersInRange(o.trimTo(e), function (e) {
                e.hasMarkup(n) && (i = e);
              });
            });
            this._markerHasMarkup(i.prev, n);

          )
            i = i.prev;
          for (; this._markerHasMarkup(i, n); )
            i.removeMarkup(n),
              t.default.isPresent(s) && i.addMarkup(s),
              e._markDirty(i),
              (i = i.next);
        },
        _focusBackOnSelection: function (e) {
          var t = this;
          e.scheduleAfterRender(function () {
            e.editor.selectRange(t.get("currentSelection"));
          });
        },
        _isCursorInsideEditor: function () {
          var e = this.get("editor.cursor"),
            n = this.$(".content-kit-editor")[0];
          if (
            t.default.isNone(e.selection.anchorNode) ||
            t.default.isNone(e.selection.focusNode)
          )
            return !1;
          var s = (0, l.comparePosition)(e.selection),
            o = s.headNode,
            a = s.tailNode,
            i = $.contains(n, o),
            r = $.contains(n, a);
          return (
            this.get("isEditing") &&
            i &&
            r &&
            !t.default.isNone(e.offsets.head.section)
          );
        },
        _isAlive: function () {
          return (
            t.default.isPresent(this.get("editor.element")) &&
            !this.get("isDestroying") &&
            !this.get("isDestroyed") &&
            !this.get("isDeleted")
          );
        },
        _linkMarkup: function (e, t) {
          return e.builder.createMarkup("a", { href: t, target: "_blank" });
        },
        _noteMarkup: function (e, t) {
          return e.builder.createMarkup("span", { "data-note-id": t });
        },
        _setupNotesPopoverIfInitialized: function () {
          var e = this.get("notesPopoverComponent");
          t.default.isPresent(e) &&
            !e.get("isDestroyed") &&
            e.send("setup", this.$(".content-kit-editor"));
        },
        _determineLinksWithIcons: function () {
          var e = {};
          this.$(".content-kit-editor a")
            .toArray()
            .forEach(function (t) {
              var n = $(t);
              (e[n.attr("href")] = t), n.removeClass("show-link-icon");
            }),
            Object.keys(e).forEach(function (t) {
              var n = $(e[t]);
              n.addClass("show-link-icon");
            });
        },
        _updateContent: function () {
          this.get("isDestroyed") ||
            this.set("editedMobiledoc", this.get("editor").serialize());
        },
        _displaySavedNotification: function () {
          var e = this,
            t = this.$(".saved-notification");
          this._isAlive() &&
            t.length > 0 &&
            this.animate(t, "fadeIn", { duration: 500 }).then(function () {
              return e.animate(t, "fadeOut", { delay: 1e3, duration: 2e3 });
            });
        },
        _saveContent: function () {
          this.get("saveContentTask").perform();
        },
        _saveContentImmediately: function () {
          var e = this.get("model");
          t.default.isPresent(e) &&
            (t.default.isPresent(e.send) && e.send("becomeDirty"),
            this._updateContent(),
            this._saveContent());
        },
        _toggleSection: function (e) {
          var t =
            arguments.length <= 1 || void 0 === arguments[1]
              ? null
              : arguments[1];
          this.get("sectionToolsDisabled") ||
            ((t = t || this.get("editor")), t.toggleSection(e));
        },
        _toggleMarkup: function (e) {
          var t =
            arguments.length <= 1 || void 0 === arguments[1]
              ? null
              : arguments[1];
          this.get("markupToolsDisabled") ||
            ((t = t || this.get("editor")), t.toggleMarkup(e));
        },
        _setupFocusEvents: function () {
          var e = this;
          this.$().on("focusin", function () {
            t.default.run(function () {
              e.set("isFocused", !0);
            });
          });
        },
        actions: {
          toggleBold: function (e) {
            this._toggleMarkup("strong", e);
          },
          toggleItalic: function (e) {
            this._toggleMarkup("em", e);
          },
          toggleUnderline: function (e) {
            this._toggleMarkup("u", e);
          },
          toggleUnorderedList: function (e) {
            this._toggleSection("ul", e);
          },
          toggleOrderedList: function (e) {
            this._toggleSection("ol", e);
          },
          editLink: function () {
            this.get("linkEditingDisabled") || this.set("linkEditorActive", !0);
          },
          saveLink: function (e) {
            var n = this;
            this.set("linkEditorActive", !1),
              this.get("editor").run(function (s) {
                var o = n.get("activeLinkMarkup"),
                  a = n._linkMarkup(s, e);
                t.default.isPresent(o)
                  ? n._replaceOldMarkupWithNewInSelection(s, o, a)
                  : s.addMarkupToRange(n.get("currentSelection"), a),
                  n._focusBackOnSelection(s),
                  n.notifyPropertyChange("currentSelection");
              });
          },
          removeLink: function () {
            var e = this;
            this.get("editor").run(function (t) {
              var n = e.get("activeLinkMarkup");
              e.get("currentSelection.isCollapsed")
                ? (e._replaceOldMarkupWithNewInSelection(t, n),
                  e._focusBackOnSelection(t))
                : t.toggleMarkup(n);
            }),
              this.notifyPropertyChange("currentSelection");
          },
          closeLinkEditor: function () {
            var e = this;
            this.set("linkEditorActive", !1),
              this.get("editor").run(function (t) {
                e._focusBackOnSelection(t);
              });
          },
          initializeNotesPopover: function (e) {
            this.set("notesPopoverComponent", e);
          },
          toggleNoteEditor: function () {
            if (this.get("noteEditorActive")) this.send("closeNoteEditor");
            else {
              var e = this.get("store"),
                t = null;
              if (this.get("isNoteMarkupActive")) {
                var n = this.get("activeNoteMarkup"),
                  s = n.attributes["data-note-id"];
                t = e.peekRecord("note", s);
              } else
                t = e.createRecord("note", {
                  word: this.get("editor.cursor").selectedText(),
                  augmentedText: this.get("model"),
                  description: "",
                });
              this.setProperties({ editingNote: t, noteEditorActive: !0 });
            }
          },
          saveNote: function (e) {
            var t = this,
              n =
                arguments.length <= 1 || void 0 === arguments[1]
                  ? null
                  : arguments[1],
              s = e.get("isNew");
            (n = n || this.get("currentSelection")),
              e.save().then(function () {
                s &&
                  t.get("editor").run(function (s) {
                    var o = t._noteMarkup(s, e.get("id"));
                    s.addMarkupToRange(n, o);
                  });
              });
          },
          deleteNote: function (e) {
            var t = this;
            this.get("editor").run(function (n) {
              var s = t._noteMarkup(n, e);
              t._replaceOldMarkupWithNewInSelection(n, s),
                t._focusBackOnSelection(n);
            }),
              this._saveContentImmediately();
          },
          closeNoteEditor: function () {
            var e = this;
            this.set("noteEditorActive", !1),
              this.get("editor").run(function (t) {
                e._focusBackOnSelection(t);
              });
          },
        },
      }
    );
  }),
  define("frontend/components/rich-text-content/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Hv2pUiHN",
      block:
        '{"statements":[["block",["if"],[["get",["showToolbar"]]],null,4],["text","\\n"],["block",["if"],[["get",["linkEditorActive"]]],null,2],["text","\\n"],["block",["if"],[["get",["noteEditorActive"]]],null,1],["text","\\n"],["block",["if"],[["get",["showNotesPopovers"]]],null,0],["text","\\n"],["open-element","div",[]],["static-attr","class","content-kit-editor"],["static-attr","data-gramm","false"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["explanatory-notes-popover"],null,[["initializeAction"],[["helper",["action"],[["get",[null]],"initializeNotesPopover"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["note-editor"],null,[["saveAction","deleteAction","closeAction","note"],[["helper",["action"],[["get",[null]],"saveNote"],null],["helper",["action"],[["get",[null]],"deleteNote"],null],["helper",["action"],[["get",[null]],"closeNoteEditor"],null],["get",["editingNote"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["link-editor"],null,[["saveAction","closeAction","initialValue"],[["helper",["action"],[["get",[null]],"saveLink"],null],["helper",["action"],[["get",[null]],"closeLinkEditor"],null],["get",["linkHrefForSelection"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","button",[]],["dynamic-attr","title",["unknown",["notesButtonTitle"]],null],["dynamic-attr","class",["concat",["button-edit-note ",["helper",["if"],[["get",["noteEditorActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["noteEditingDisabled"]],null],["modifier",["action"],[["get",[null]],"toggleNoteEditor"]],["flush-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","toolbar"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","transparent-background"],["flush-element"],["close-element"],["text","\\n    "],["open-element","div",[]],["dynamic-attr","class",["concat",["opaque-overlay ",["helper",["if"],[["get",["linkEditorActive"]],"link-editor-active"],null]]]],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","markup-tools tools-group"],["flush-element"],["text","\\n"],["text","        "],["open-element","button",[]],["static-attr","title","Bold"],["dynamic-attr","class",["concat",["button-bold ",["helper",["if"],[["get",["isBoldMarkupActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["markupToolsDisabled"]],null],["modifier",["action"],[["get",[null]],"toggleBold"]],["flush-element"],["text","\\n          "],["open-element","strong",[]],["flush-element"],["text","B"],["close-element"],["text","\\n        "],["close-element"],["text","\\n"],["text","        "],["open-element","button",[]],["static-attr","title","Italic"],["dynamic-attr","class",["concat",["button-italic ",["helper",["if"],[["get",["isItalicMarkupActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["markupToolsDisabled"]],null],["modifier",["action"],[["get",[null]],"toggleItalic"]],["flush-element"],["text","\\n          "],["open-element","em",[]],["flush-element"],["text","I"],["close-element"],["text","\\n        "],["close-element"],["text","\\n"],["text","        "],["open-element","button",[]],["static-attr","title","Underline"],["dynamic-attr","class",["concat",["button-underline ",["helper",["if"],[["get",["isUnderlineMarkupActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["markupToolsDisabled"]],null],["modifier",["action"],[["get",[null]],"toggleUnderline"]],["flush-element"],["text","\\n          "],["open-element","u",[]],["flush-element"],["text","U"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","section-tools tools-group"],["flush-element"],["text","\\n"],["text","        "],["open-element","button",[]],["static-attr","title","Unordered list"],["dynamic-attr","class",["concat",["button-unordered-list ",["helper",["if"],[["get",["isUnorderedListMarkupActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["sectionToolsDisabled"]],null],["modifier",["action"],[["get",[null]],"toggleUnorderedList"]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n"],["text","        "],["open-element","button",[]],["static-attr","title","Ordered list"],["dynamic-attr","class",["concat",["button-ordered-list ",["helper",["if"],[["get",["isOrderedListMarkupActive"]],"active"],null]]]],["dynamic-attr","disabled",["unknown",["sectionToolsDisabled"]],null],["modifier",["action"],[["get",[null]],"toggleOrderedList"]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["text","      "],["open-element","span",[]],["static-attr","class","saved-notification"],["flush-element"],["text","Saved!"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","advanced-tools tools-group"],["flush-element"],["text","\\n"],["text","        "],["open-element","button",[]],["dynamic-attr","title",["unknown",["linksButtonTitle"]],null],["static-attr","class","button-edit-link"],["dynamic-attr","disabled",["unknown",["linkEditingDisabled"]],null],["modifier",["action"],[["get",[null]],"editLink"]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n"],["text","        "],["open-element","button",[]],["static-attr","title","Remove link"],["dynamic-attr","class",["concat",["button-remove-link ",["helper",["if"],[["get",["linkRemovalHidden"]],"hidden"],null]]]],["dynamic-attr","disabled",["unknown",["linkRemovalDisabled"]],null],["modifier",["action"],[["get",[null]],"removeLink"]],["flush-element"],["text","\\n        "],["close-element"],["text","\\n"],["block",["if"],[["get",["withNotes"]]],null,3],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/rich-text-content/template.hbs",
      },
    });
  }),
  define("frontend/components/school-class-box/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["school-class-box"],
      session: t.default.inject.service(),
      user: t.default.computed.reads("session.currentUser"),
      isStudent: t.default.computed.alias("user.isStudent"),
      schoolClassDisplayName: t.default.computed(
        "schoolClass.subject",
        "schoolClass.name",
        "user.isStudent",
        function () {
          return this.get("schoolClass").displayNameForUser(this.get("user"));
        }
      ),
    });
  }),
  define("frontend/components/school-class-box/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "YNEAJxZu",
      block:
        '{"statements":[["block",["link-to"],["schoolClass",["get",["schoolClass"]]],null,3]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","archivation-date"],["flush-element"],["text","Archived in "],["append",["unknown",["schoolClass","displayArchivationDate"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","subject"],["flush-element"],["append",["unknown",["schoolClass","subject"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","teacher"],["flush-element"],["append",["unknown",["schoolClass","teacher","formalName"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","h3",[]],["static-attr","class","name"],["flush-element"],["append",["unknown",["schoolClassDisplayName"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["isStudent"]]],null,2,1],["block",["if"],[["get",["schoolClass","isArchived"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/school-class-box/template.hbs" },
    });
  }),
  define("frontend/components/selectable-story-row/component", [
    "exports",
    "ember",
    "frontend/models/user",
    "frontend/mixins/story-state",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, {
      classNames: ["selectable-story-row"],
      classNameBindings: ["isSelected"],
      tagName: "tr",
      session: t.default.inject.service(),
      isSelected: !1,
      schoolClass: null,
      story: null,
      selectionDisabled: !1,
      disabledTooltip: t.default
        .computed(function () {
          return (
            "This story is beyond the limit of " +
            n.default.NUMBER_OF_FREE_STUDENT_STORIES +
            " student stories. Upgrade to be able to share all of your student stories."
          );
        })
        .readOnly(),
      actions: {
        toggleSelection: function (e, t, n) {
          this.set("isSelected", t),
            this.sendAction("toggledSelection", this.get("story"), t),
            n.set("isWaiting", !1);
        },
      },
    });
  }),
  define("frontend/components/selectable-story-row/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "FhZUK54c",
      block:
        '{"statements":[["open-element","td",[]],["flush-element"],["text","\\n  "],["append",["helper",["check-box"],null,[["action","checked","disabled","disabledTooltip"],[["helper",["action"],[["get",[null]],"toggleSelection"],null],["get",["isSelected"]],["get",["isNotFullyAvailable"]],["get",["disabledTooltip"]]]]],false],["text","\\n"],["close-element"],["text","\\n"],["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/selectable-story-row/template.hbs",
      },
    });
  }),
  define("frontend/components/share-stories-button/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["share-stories-button"],
      selectedStories: [],
      schoolClass: null,
      active: !1,
      noStoriesSelected: t.default.computed.empty("selectedStories"),
      actions: {
        toggleSharingPopover: function () {
          this.toggleProperty("active");
        },
      },
    });
  }),
  define("frontend/components/share-stories-button/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "qVyMBxIo",
      block:
        '{"statements":[["block",["dropdown-menu"],null,[["title","on","disabled"],["Share","click",["get",["noStoriesSelected"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["share-stories-popover"],null,[["schoolClass","selectedStories"],[["get",["schoolClass"]],["get",["selectedStories"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/share-stories-button/template.hbs",
      },
    });
  }),
  define("frontend/components/share-stories-popover/component", [
    "exports",
    "ember",
    "frontend/mixins/on-click-outside",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["share-stories-popover"],
      notifications: t.default.inject.service(),
      classChecked: !1,
      classSemiSelected: !1,
      selectedStories: [],
      approvedSelectedStories: t.default.computed.filterBy(
        "selectedStories",
        "isApproved",
        !0
      ),
      nonApprovedSelectedStories: t.default.computed.filterBy(
        "selectedStories",
        "isApproved",
        !1
      ),
      nonApprovedShareableSelectedStories: t.default.computed.filterBy(
        "nonApprovedSelectedStories",
        "canMakePublic"
      ),
      totalSelectedCount: t.default.computed.reads("selectedStories.length"),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this._updateClassCheckBoxState(),
          this._updatePublicCheckBoxState();
      },
      _updateClassCheckBoxState: function () {
        var e = this.get("schoolClass"),
          t = this.get("totalSelectedCount"),
          n = this.get("selectedStories")
            .filter(function (t) {
              return e.isStorySharedWithTheWholeClass(t);
            })
            .get("length");
        this._setCheckedStatus("class", t, n),
          this._setSemiSelectedStatus("class", t, n);
      },
      _updatePublicCheckBoxState: function () {
        var e = this.get("totalSelectedCount"),
          t = this.get("approvedSelectedStories.length");
        this._setCheckedStatus("public", e, t),
          this._setSemiSelectedStatus("public", e, t);
        var n = this.get("selectedStories").isAny("canMakePublic");
        this.set("publicDisabled", !n);
      },
      _setCheckedStatus: function (e, t, n) {
        var s = n < t / 2,
          o = this._isAllShared(t, n),
          a = this._isAtLeastOneShared(n);
        this.set(e + "Checked", o || (s && a));
      },
      _setSemiSelectedStatus: function (e, t, n) {
        var s = this._isAllShared(t, n),
          o = this._isAtLeastOneShared(n);
        this.set(e + "SemiSelected", o && !s);
      },
      _isAllShared: function (e, t) {
        return e === t;
      },
      _isAtLeastOneShared: function (e) {
        return e > 0;
      },
      actions: {
        toggleShareStoriesWithClass: function (e, n, s) {
          var o = this;
          this.set("classSemiSelected", !1);
          var a = n ? "school_class" : null,
            i = t.default
              .getOwner(this)
              .lookup("command:share-stories-with-school-class");
          i.execute(
            this.get("selectedStories"),
            this.get("schoolClass"),
            a,
            "schoolClass"
          )
            .catch(function () {
              o
                .get("notifications")
                .showBackendErrorMessage(
                  "An error occurred while sharing the students' stories."
                ),
                o.set("popoverActive", !1);
            })
            .finally(function () {
              s.set("isWaiting", !1);
            });
        },
        toggleMakeStoriesPublic: function (e, n, s) {
          var o = this,
            a =
              n &&
              this.get("selectedStories.length") !==
                this.get("nonApprovedShareableSelectedStories.length");
          this.set("publicSemiSelected", a);
          var i = void 0;
          (i = n
            ? t.default
                .getOwner(this)
                .lookup("command:approve-stories")
                .execute(this.get("nonApprovedShareableSelectedStories"))
            : t.default
                .getOwner(this)
                .lookup("command:reject-stories")
                .execute(this.get("approvedSelectedStories"))),
            i.finally(function () {
              s.set("isWaiting", !1), o.set("selectedStories", []);
            });
        },
      },
    });
  }),
  define("frontend/components/share-stories-popover/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "d0O1gyjf",
      block:
        '{"statements":[["append",["helper",["check-box"],null,[["action","label","checked","semiSelected"],[["helper",["action"],[["get",[null]],"toggleShareStoriesWithClass"],null],"Class",["get",["classChecked"]],["get",["classSemiSelected"]]]]],false],["text","\\n\\n"],["append",["helper",["check-box"],null,[["action","label","checked","semiSelected","disabled","disabledTooltip"],[["helper",["action"],[["get",[null]],"toggleMakeStoriesPublic"],null],"Make public",["get",["publicChecked"]],["get",["publicSemiSelected"]],["get",["publicDisabled"]],"Only submitted stories can be made public."]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/share-stories-popover/template.hbs",
      },
    });
  }),
  define("frontend/components/single-sign-on-buttons/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    var s = ["google", "facebook", "edmodo"];
    e.default = t.default.Component.extend(n.default, {
      classNames: ["single-sign-on-buttons"],
      requiredInput: ["labelPrefix", "labelWhileSigningIn"],
      providers: s,
      providersProps: t.default.computed(
        "providers",
        "labelPrefix",
        function () {
          var e = this;
          return s.map(function (t) {
            return {
              provider: t,
              isVisible: e.get("providers").includes(t),
              label: e.get("labelPrefix") + " " + t.capitalize(),
              component: "button-" + t + "-single-sign-on",
            };
          });
        }
      ),
      hasErrorMessage: t.default.computed.notEmpty("errorMessage"),
      actions: {
        loginFailed: function (e, t) {
          this.set(
            "errorMessage",
            "Error when logging in with " +
              e.capitalize() +
              ": " +
              t.get("firstObject.messages.firstObject")
          ),
            this.get("loginFailed")(t);
        },
      },
    });
  }),
  define("frontend/components/single-sign-on-buttons/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "MqGcNQA1",
      block:
        '{"statements":[["block",["if"],[["get",["hasErrorMessage"]]],null,2],["text","\\n"],["open-element","div",[]],["static-attr","class","single-sign-on-buttons-buttons"],["flush-element"],["text","\\n"],["block",["each"],[["get",["providersProps"]]],null,1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["component"],[["get",["providerProps","component"]]],[["loginSucceeded","loginFailed","labelWhileNotLoggingIn","labelWhileLoggingIn","userType"],[["helper",["action"],[["get",[null]],["get",["loginSucceeded"]],["get",["providerProps","provider"]]],null],["helper",["action"],[["get",[null]],"loginFailed",["get",["providerProps","provider"]]],null],["get",["providerProps","label"]],["get",["labelWhileSigningIn"]],["get",["userType"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["providerProps","isVisible"]]],null,0]],"locals":["providerProps"]},{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","error"],["flush-element"],["append",["unknown",["errorMessage"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/single-sign-on-buttons/template.hbs",
      },
    });
  }),
  define("frontend/components/slick-carousel/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["slick-carousel"],
      attributeBindings: ["dir"],
      vertical: !1,
      rtl: !1,
      slidesToShow: 1,
      infinite: !0,
      autoplay: !1,
      arrows: !0,
      fade: !1,
      responsive: [],
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.$().slick({
            vertical: this.get("vertical"),
            rtl: this.get("rtl"),
            slidesToShow: this.get("slidesToShow"),
            infinite: this.get("infinite"),
            autoplay: this.get("autoplay"),
            arrows: this.get("arrows"),
            fade: this.get("fade"),
            responsive: this.get("responsive"),
            draggable: !1,
          });
      },
      dir: t.default.computed("rtl", function () {
        if (this.get("rtl")) return "rtl";
      }),
    });
  }),
  define("frontend/components/slick-carousel/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "/YZxnIq5",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/slick-carousel/template.hbs" },
    });
  }),
  define("frontend/components/social-media-sharing-buttons/component", [
    "exports",
    "frontend/mixins/addthis-injection",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Component.extend(t.default, {
      classNames: ["social-media-sharing-buttons"],
      showLinkToUrl: !1,
      url: n.default
        .computed(function () {
          return window.location.href;
        })
        .volatile(),
    });
  }),
  define("frontend/components/social-media-sharing-buttons/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "1vJYPknS",
      block:
        '{"statements":[["block",["if"],[["get",["hasFailedLoadingAddthis"]]],null,2,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","a",[]],["dynamic-attr","href",["unknown",["url"]],null],["static-attr","class","link-to-url"],["flush-element"],["text","Link"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","addthis_sharing_toolbox"],["dynamic-attr","data-url",["unknown",["url"]],null],["dynamic-attr","data-description",["unknown",["description"]],null],["dynamic-attr","data-title",["unknown",["title"]],null],["flush-element"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showLinkToUrl"]]],null,0]],"locals":[]},{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","disabled-notification"],["flush-element"],["text","It seems you have an ad blocker enabled! Please disable it and refresh the page to share on social media."],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/social-media-sharing-buttons/template.hbs",
      },
    });
  }),
  define("frontend/components/sortable-table/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    var s = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    e.default = t.default.Component.extend(n.default, {
      classNames: ["sortable-table-component"],
      tagName: "table",
      selectable: !1,
      lastSortingCriterion: t.default.computed.reads("sortBy.firstObject"),
      didInsertElement: function () {
        this.makeFastclickable(this.$()), this.sortCriterionUpdated();
      },
      sortCriterionUpdated: t.default.observer(
        "lastSortingCriterion",
        function () {
          var e = this,
            n = this.get("lastSortingCriterion");
          n &&
            !(function () {
              var o = n.split(":"),
                a = s(o, 2),
                i = a[0],
                l = a[1],
                r = "desc" === l ? "descending" : "ascending",
                u = e.get("columns").findBy("attribute", i);
              u &&
                t.default.run.scheduleOnce("afterRender", function () {
                  e
                    .$("th.last-sorted")
                    .removeClass("last-sorted ascending descending"),
                    e
                      .$("th." + u.get("className"))
                      .addClass("last-sorted " + r);
                });
            })();
        }
      ),
      actions: {
        sortByAttribute: function (e) {
          var t = this.get("lastSortingCriterion") || ":",
            n = t.split(":"),
            o = s(n, 2),
            a = o[0],
            i = o[1],
            l = "asc";
          a === e && "desc" !== i && (l = "desc"),
            this.set("sortBy", [e + ":" + l]);
        },
      },
    });
  }),
  define("frontend/components/sortable-table/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "6NmlF/km",
      block:
        '{"statements":[["open-element","thead",[]],["flush-element"],["text","\\n  "],["open-element","tr",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["selectable"]]],null,1],["block",["each"],[["get",["columns"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","tbody",[]],["flush-element"],["text","\\n  "],["yield","default"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","      "],["open-element","th",[]],["dynamic-attr","class",["unknown",["column","className"]],null],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"sortByAttribute",["get",["column","attribute"]]]],["flush-element"],["append",["unknown",["column","label"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["column"]},{"statements":[["text","      "],["open-element","th",[]],["static-attr","class","check-box"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/sortable-table/template.hbs" },
    });
  }),
  define("frontend/components/sticky-box/component", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-resize",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["sticky-box", "fixedsticky"],
      didInsertElement: function () {
        this._super.apply(this, arguments), this.$().fixedsticky();
      },
      viewportResized: t.default.on("resize", function () {
        this.$().fixedsticky("destroy"), this.$().fixedsticky();
      }),
    });
  }),
  define("frontend/components/sticky-box/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "W71IY525",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/sticky-box/template.hbs" },
    });
  }),
  define("frontend/components/stories-section/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["stories-section"],
      classNameBindings: ["overviewMode:overview-mode"],
      tagName: "section",
      requiredInput: ["storiesPromise"],
      emptyMessage: "No stories found.",
      overviewMode: !1,
      sortBy: [],
      hasHeader: t.default.computed.notEmpty("title"),
      canCreateNew: t.default.computed.notEmpty("createNewAction"),
      hasSchoolClass: t.default.computed.notEmpty("schoolClass"),
      stories: t.default.computed(
        "storiesPromise.content",
        "storiesPromise.content.@each.id",
        "hasSchoolClass",
        "schoolClass.storyShares.@each.storyId",
        function () {
          var e = this;
          if (!this.get("hasSchoolClass"))
            return this.get("storiesPromise.content");
          var t = (function () {
            var t = e.get("schoolClass.storyShares").mapBy("storyId");
            return {
              v: (e.get("storiesPromise.content") || []).filter(function (e) {
                return t.includes(e.get("id"));
              }),
            };
          })();
          return "object" == typeof t ? t.v : void 0;
        }
      ),
      sortedStories: t.default.computed.sort("stories", "sortBy"),
      showEmptyMessage: t.default.computed(
        "canCreateNew",
        "sortedStories.[]",
        function () {
          return (
            !this.get("canCreateNew") &&
            t.default.isEmpty(this.get("sortedStories"))
          );
        }
      ),
      actions: {
        createNew: function () {
          this.sendAction("createNewAction");
        },
      },
    });
  }),
  define("frontend/components/stories-section/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "37N6wvtO",
      block:
        '{"statements":[["block",["if"],[["get",["hasHeader"]]],null,7],["text","\\n"],["block",["promise-block"],null,[["promise"],[["get",["storiesPromise"]]]],6]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["story-box"],null,[["story","schoolClass"],[["get",["story"]],["get",["schoolClass"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["story-overview-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["overviewMode"]]],null,1,0]],"locals":["story"]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","create-story"],["flush-element"],["text","\\n          "],["append",["helper",["button-create-new-story"],null,[["action"],[["helper",["action"],[["get",[null]],"createNew"],null]]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","stories story-boxes"],["flush-element"],["text","\\n"],["block",["if"],[["get",["canCreateNew"]]],null,3],["block",["each"],[["get",["sortedStories"]]],null,2],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","p",[]],["static-attr","class","empty-message"],["flush-element"],["append",["unknown",["emptyMessage"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showEmptyMessage"]]],null,5,4]],"locals":[]},{"statements":[["text","  "],["open-element","header",[]],["flush-element"],["text","\\n    "],["open-element","h2",[]],["flush-element"],["append",["unknown",["title"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/stories-section/template.hbs" },
    });
  }),
  define("frontend/components/story-author-info/component", [
    "exports",
    "ember",
    "frontend/mixins/story-state",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, n.default, {
      classNames: ["story-author-info"],
      requiredInput: ["story"],
      author: t.default.computed.reads("story.author"),
      myOriginalSchoolClass: t.default.computed.reads(
        "myOriginalSchoolClasses.firstObject"
      ),
    });
  }),
  define("frontend/components/story-author-info/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "B6L+Ft3U",
      block:
        '{"statements":[["block",["if"],[["get",["story","isOrganizationStory"]]],null,12,11]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","author-professional-role secondary-info"],["flush-element"],["text","("],["append",["unknown",["author","professionalRole"]],false],["text",")"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["unknown",["story","authorName"]],false],["text","\\n    "]],"locals":[]},{"statements":[["text","        "],["append",["unknown",["story","authorName"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["user",["get",["author"]]],null,2]],"locals":[]},{"statements":[["block",["if"],[["get",["author","hasPublicProfilePage"]]],null,3,1]],"locals":[]},{"statements":[["text","        "],["append",["unknown",["story","authorName"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["student",["get",["author"]],["helper",["query-params"],null,[["schoolClassId"],[["get",["myOriginalSchoolClass","id"]]]]]],null,5]],"locals":[]},{"statements":[["block",["if"],[["get",["story","authorIsStudentOfCurrentUser"]]],null,6,4]],"locals":[]},{"statements":[["text","        You\\n"]],"locals":[]},{"statements":[["block",["link-to"],["user",["get",["author"]]],null,8]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","author-name"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isOwner"]]],null,9,7],["text","\\n"],["block",["if"],[["get",["author","hasProfessionalRole"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["story","isUserStory"]]],null,10]],"locals":[]},{"statements":[["text","  "],["append",["helper",["story-organization-name"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-author-info/template.hbs",
      },
    });
  }),
  define("frontend/components/story-banner/component", [
    "exports",
    "ember",
    "frontend/mixins/lockable-component",
    "ember-concurrency",
    "ember-responds-to/mixins/responds-to-resize",
  ], function (e, t, n, s, o) {
    var a = 20;
    e.default = t.default.Component.extend(n.default, o.default, {
      classNames: ["story-banner"],
      storyCollaboration: t.default.inject.service(),
      analytics: t.default.inject.service(),
      bannerSizes: t.default
        .computed(function () {
          return [
            { width: 1920, height: 400, overflowPolicy: "cover" },
            { width: 1440, height: 400, overflowPolicy: "cover" },
            { width: 768, height: 300, overflowPolicy: "cover" },
            { width: 425, height: 200, overflowPolicy: "cover" },
          ];
        })
        .readOnly(),
      lockedByUser: t.default.computed.reads(
        "storyCollaboration.bannerLock.user"
      ),
      resize: function () {
        this._super.apply(this, arguments),
          this._positionAbsolutelyPositionedElements();
      },
      didRender: function () {
        this._super.apply(this, arguments),
          this._positionAbsolutelyPositionedElements();
      },
      uploadBannerTask: (0, s.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    (n = this.get("story")),
                      n.set("bannerImageFile", t),
                      n.save(),
                      this.get("analytics").trackStoryEvent(
                        "Banner Uploaded",
                        n
                      );
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      deleteBannerTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("story")),
                      (e.prev = 1),
                      this.set("isEditing", !0),
                      this.get("analytics").trackStoryEvent(
                        "Banner Deleted",
                        t
                      ),
                      t.set("bannerImageFile", null),
                      (e.next = 7),
                      t.save()
                    );
                  case 7:
                    return (e.prev = 7), this.set("isEditing", !1), e.finish(7);
                  case 10:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, , 7, 10]]
          );
        })
      ),
      lock: function () {
        this.get("storyCollaboration").lockBanner();
      },
      unlock: function () {
        this.get("storyCollaboration").unlockBanner();
      },
      hasPendingPromises: function () {
        return this.get("story.bannerImageFile.isSaving");
      },
      _positionAbsolutelyPositionedElements: function () {
        var e = this;
        [
          ".button-delete-image",
          ".caption",
          ".button-show-image-uploader",
        ].forEach(function (t) {
          e._positionToFarRight(e.$(t));
        });
      },
      _positionToFarRight: function (e) {
        if (e.length > 0) {
          e.css("right", "");
          var t = e.position().left,
            n = t + e.outerWidth();
          n > this.$().outerWidth() - a && e.css("right", a);
        }
      },
      actions: {
        bannerUploaded: function (e) {
          return this.get("uploadBannerTask").perform(e);
        },
        bannerDeleted: function () {
          return this.get("deleteBannerTask").perform();
        },
        bannerUploaderOpened: function () {
          this.set("isEditing", !0);
        },
        bannerUploaderClosed: function () {
          this.set("isEditing", !1);
        },
        captionFocusedIn: function () {
          this.set("isEditing", !0);
        },
        captionFocusedOut: function () {
          this.set("isEditing", !1);
        },
      },
    });
  }),
  define("frontend/components/story-banner/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "qe/NzeqE",
      block:
        '{"statements":[["block",["collaboration-lock-wrapper"],null,[["lockedText","lockedByUser"],["is currently editing the banner",["get",["lockedByUser"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","uploaderOpened","uploaderClosed","captionFocusedIn","captionFocusedOut","imageFile","isEditing","isEditable","sizes","overflowPolicy","withCaption","labelButtonUpload","labelButtonDelete"],[["helper",["action"],[["get",[null]],"bannerUploaded"],null],["helper",["action"],[["get",[null]],"bannerDeleted"],null],["helper",["action"],[["get",[null]],"bannerUploaderOpened"],null],["helper",["action"],[["get",[null]],"bannerUploaderClosed"],null],["helper",["action"],[["get",[null]],"captionFocusedIn"],null],["helper",["action"],[["get",[null]],"captionFocusedOut"],null],["get",["story","bannerImageFile"]],["get",["isEditable"]],["get",["isEditable"]],["get",["bannerSizes"]],"cover",true,"Add banner image","Remove banner"]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-banner/template.hbs" },
    });
  }),
  define("frontend/components/story-box/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
    "frontend/mixins/story-permissions",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["story-box"],
      attributeBindings: ["dir"],
      requiredInput: ["story"],
      dir: "ltr",
    });
  }),
  define("frontend/components/story-box/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Bh/UkL8H",
      block:
        '{"statements":[["block",["story-link"],null,[["story","schoolClass","class"],[["get",["story"]],["get",["schoolClass"]],"story-box__link"]],4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","story-box__label"],["flush-element"],["text","Free"],["close-element"],["text","\\n      "]],"locals":[]},{"statements":[["block",["if"],[["get",["story","isFree"]]],null,0]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","story-box__label"],["flush-element"],["text","Story of the month"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["story","isStoryOfTheMonth"]]],null,2,1]],"locals":[]},{"statements":[["text","  "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy","class"],[["get",["story","bannerImageFile"]],"cover","story-box__image"]]],false],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","story-box__caption"],["flush-element"],["text","\\n"],["block",["if"],[["get",["story","isSutoriStory"]]],null,3],["text","\\n"],["text","    "],["append",["helper",["story-title"],null,[["story","class"],[["get",["story"]],"story-box__title"]]],false],["text","\\n\\n"],["text","    "],["open-element","p",[]],["static-attr","class","story-box__author"],["flush-element"],["text","\\n      by\\n      "],["append",["helper",["story-collaborators-inline"],null,[["story"],[["get",["story"]]]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-box/template.hbs" },
    });
  }),
  define("frontend/components/story-collaborators-dropdown/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["story-collaborators-dropdown"],
      requiredInput: ["collaborators"],
    });
  }),
  define("frontend/components/story-collaborators-dropdown/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "dRI3spS+",
      block:
        '{"statements":[["text","& "],["append",["unknown",["collaborators","length"]],false],["text"," "],["append",["helper",["inflect"],["other",["get",["collaborators","length"]]],null],false],["text","\\n"],["open-element","ul",[]],["static-attr","class","story-collaborators-dropdown__list"],["flush-element"],["text","\\n"],["block",["each"],[["get",["collaborators"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","li",[]],["flush-element"],["append",["unknown",["collaborator","fullName"]],false],["close-element"],["text","\\n"]],"locals":["collaborator"]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/story-collaborators-dropdown/template.hbs",
      },
    });
  }),
  define("frontend/components/story-collaborators-inline/component", [
    "exports",
    "ember",
    "frontend/mixins/story-state",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["story-collaborators-inline"],
      classNameBindings: ["story.isOrganizationStory:is-publisher-story"],
      session: t.default.inject.service(),
      currentUser: t.default.computed.reads("session.currentUser"),
      authorsNames: t.default.computed(
        "isOwner",
        "currentUser.isEditor",
        "story.authorName",
        "isCollaborator",
        function () {
          var e = [];
          return (
            this.get("isOwner") && !this.get("currentUser.isEditor")
              ? e.pushObject("You")
              : (e.pushObject(this.get("story.authorName")),
                this.get("isCollaborator") && e.pushObject("You")),
            e.join(", ")
          );
        }
      ),
      otherCollaborators: t.default.computed(
        "story.collaborators",
        "story.author",
        "currentUser",
        function () {
          var e = this;
          return this.get("story.collaborators").reject(function (t) {
            return t === e.get("story.author") || t === e.get("currentUser");
          });
        }
      ),
      hasOtherCollaborators: t.default.computed.notEmpty("otherCollaborators"),
    });
  }),
  define("frontend/components/story-collaborators-inline/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "p2n2y+n5",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","story-collaborators-inline__author-names"],["flush-element"],["append",["unknown",["authorsNames"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["hasOtherCollaborators"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["story-collaborators-dropdown"],null,[["collaborators"],[["get",["otherCollaborators"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/story-collaborators-inline/template.hbs",
      },
    });
  }),
  define("frontend/components/story-conclusion/component", [
    "exports",
    "ember",
    "frontend/mixins/edit-on-focus",
    "frontend/mixins/lockable-component",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      tagName: "article",
      classNames: ["story-conclusion"],
      classNameBindings: ["isEditing:editing"],
      storyCollaboration: t.default.inject.service(),
      imageSizes: t.default
        .computed("imageMaxHeight", function () {
          return [
            {
              width: 280,
              height: this.get("imageMaxHeight"),
              overflowPolicy: "contain",
            },
            { width: 768, height: 1024, overflowPolicy: "contain" },
            { width: 1440, height: 1440, overflowPolicy: "contain" },
            { width: 1920, height: 1920, overflowPolicy: "contain" },
          ];
        })
        .readOnly(),
      imageMaxHeight: t.default
        .computed(function () {
          return 500;
        })
        .readOnly(),
      showCover: t.default.computed.or("isEditing", "storyConclusion.hasImage"),
      lockedByUser: t.default.computed(
        "storyConclusion.id",
        "storyCollaboration.conclusionLocks.@each.{id,user}",
        function () {
          var e = this.get("storyConclusion.id"),
            n = this.get("storyCollaboration.conclusionLocks").findBy("id", e);
          return t.default.isPresent(n) ? n.user : null;
        }
      ),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.sendAction("register", this),
          this.setupEditOnFocus(this.$());
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments), this.sendAction("unregister", this);
      },
      lock: function () {
        var e = this.get("storyConclusion");
        this.get("storyCollaboration").lockConclusion(e);
      },
      unlock: function () {
        var e = this.get("storyConclusion");
        this.get("storyCollaboration").unlockConclusion(e);
      },
      hasPendingPromises: function () {
        var e = this.get("storyConclusion");
        return (
          e.get("isSaving") ||
          e.get("contentText.isSaving") ||
          e.get("imageFile.isSaving")
        );
      },
      actions: {
        imageUploaded: function (e) {
          this.get("storyConclusion").set("imageFile", e),
            this.get("storyConclusion").save();
        },
        imageDeleted: function () {
          this.get("storyConclusion").set("imageFile", null),
            this.get("storyConclusion").save();
        },
        deleteConclusion: function () {
          this.sendAction("deleteConclusion", this.get("storyConclusion"));
        },
      },
    });
  }),
  define("frontend/components/story-conclusion/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "6q5sRt7J",
      block:
        '{"statements":[["block",["collaboration-lock-wrapper"],null,[["class","lockedText","lockedByUser"],["conclusion-body","is currently editing this conclusion",["get",["lockedByUser"]]]],2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","conclusion-actions"],["flush-element"],["text","\\n      "],["append",["helper",["async-button-with-confirmation"],null,[["action","name","question","popoverPosition"],[["helper",["action"],[["get",[null]],"deleteConclusion"],null],"delete-conclusion","Are you sure you want to delete this conclusion?","top"]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","conclusion-cover"],["flush-element"],["text","\\n      "],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","imageFile","isEditing","isEditable","labelButtonUpload","maxHeight","sizes","overflowPolicy","withCaption"],[["helper",["action"],[["get",[null]],"imageUploaded"],null],["helper",["action"],[["get",[null]],"imageDeleted"],null],["get",["storyConclusion","imageFile"]],["get",["isEditing"]],["get",["isEditable"]],"Add an optional image",["get",["imageMaxHeight"]],["get",["imageSizes"]],"contain",true]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showCover"]]],null,1],["text","\\n"],["text","  "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","showErrors","class","placeholder"],[true,["get",["isEditable"]],["get",["storyConclusion","contentText"]],["get",["storyConclusion","contentText","content"]],["get",["storyConclusion","validations","attrs","contentText","messages"]],["get",["validationActive"]],"conclusion-content","Insert the conclusion here..."]]],false],["text","\\n\\n"],["block",["if"],[["get",["isEditing"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-conclusion/template.hbs" },
    });
  }),
  define("frontend/components/story-context-info/component", [
    "exports",
    "ember",
    "frontend/mixins/story-state",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(s.default, n.default, {
      classNames: ["story-context-info"],
      session: t.default.inject.service(),
      requiredInput: ["story"],
      canAccessStoryUnitPage: t.default.computed.or(
        "session.isGuestUser",
        "session.currentUser.isEditor",
        "session.currentUser.isTeacher"
      ),
      isOwnerOfCopy: t.default.computed(
        "story.copiedFrom.author",
        "session.currentUser",
        function () {
          return (
            this.get("story.copiedFrom.author") ===
            this.get("session.currentUser")
          );
        }
      ),
      originalTeachers: t.default.computed(
        "story.originalSchoolClasses.@each.teacher",
        function () {
          return this.get("story.originalSchoolClasses")
            .mapBy("teacher")
            .uniq();
        }
      ),
      hasOriginalTeachers: t.default.computed.notEmpty("originalTeachers"),
      showCopyInformation: t.default.computed(
        "isNotEmbedded",
        "story.{isCopy,canShowCopyInformationInAnEmbed}",
        function () {
          return (
            this.get("story.isCopy") &&
            (this.get("isNotEmbedded") ||
              this.get("story.canShowCopyInformationInAnEmbed"))
          );
        }
      ),
      showSchoolClassInformation: t.default.computed(
        "story.{author.isStudent,isSubmitted}",
        "isOwner",
        "isCollaborator",
        function () {
          return (
            this.get("story.author.isStudent") &&
            (this.get("story.isSubmitted") ||
              this.get("isOwner") ||
              this.get("isCollaborator"))
          );
        }
      ),
    });
  }),
  define("frontend/components/story-context-info/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "kqbStsJ0",
      block:
        '{"statements":[["block",["if"],[["get",["story","hasStoryUnit"]]],null,20],["text","\\n"],["block",["if"],[["get",["showSchoolClassInformation"]]],null,16],["text","\\n"],["block",["if"],[["get",["showCopyInformation"]]],null,5]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["unknown",["story","copiedFrom","authorName"]],false],["text","\\n    "]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-organization-name"],null,[["story"],[["get",["story","copiedFrom"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["story","copiedFrom","isOrganizationStory"]]],null,1,0]],"locals":[]},{"statements":[["text","      you\\n"]],"locals":[]},{"statements":[["append",["unknown",["story","copiedFrom","title"]],false]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","copied-from-info secondary-info"],["flush-element"],["text","\\n    copy of "],["block",["link-to"],["story",["get",["story","copiedFrom","slug"]]],null,4],["text"," by\\n"],["block",["if"],[["get",["isOwnerOfCopy"]]],null,3,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        This story has not yet been submitted\\n      "]],"locals":[]},{"statements":[["block",["if"],[["get",["isCollaborator"]]],null,6]],"locals":[]},{"statements":[["text","        Your story has not yet been submitted\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isOwner"]]],null,8,7]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["open-element","strong",[]],["flush-element"],["append",["unknown",["teacher","fullName"]],false],["close-element"],["close-element"],["text","\\n"]],"locals":["teacher"]},{"statements":[["text","        Part of\\n        "],["open-element","ul",[]],["static-attr","class","original-teachers"],["flush-element"],["text","\\n"],["block",["each"],[["get",["originalTeachers"]]],null,10],["text","        "],["close-element"],["text","\\n        "],["append",["helper",["inflect"],["class",["get",["originalTeachers","length"]]],null],false],["text","\\n"]],"locals":[]},{"statements":[["append",["unknown",["schoolClass","name"]],false]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["block",["link-to"],["schoolClass",["get",["schoolClass"]]],null,12],["close-element"],["text","\\n"]],"locals":["schoolClass"]},{"statements":[["text","        Part of my\\n        "],["open-element","ul",[]],["static-attr","class","original-school-classes"],["flush-element"],["text","\\n"],["block",["each"],[["get",["myOriginalSchoolClasses"]]],null,13],["text","        "],["close-element"],["text","\\n        "],["append",["helper",["inflect"],["class",["get",["myOriginalSchoolClasses","length"]]],null],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["story","authorIsStudentOfCurrentUser"]]],null,14,11]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","school-class-info secondary-info"],["flush-element"],["text","\\n"],["block",["if"],[["get",["story","isSubmitted"]]],null,15,9],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","unit-name"],["flush-element"],["append",["unknown",["story","storyUnit","title"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["unknown",["story","storyUnit","title"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["storyUnit",["get",["story","storyUnit"]]],[["class"],["unit-name"]],18]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","unit-breadcrumb secondary-info"],["flush-element"],["text","\\n"],["block",["if"],[["get",["canAccessStoryUnitPage"]]],null,19,17],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-context-info/template.hbs",
      },
    });
  }),
  define("frontend/components/story-display-title/component", [
    "exports",
    "ember",
    "frontend/mixins/lockable-component",
    "frontend/mixins/story-state",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["story-display-title"],
      storyCollaboration: t.default.inject.service(),
      lockedByUser: t.default.computed.reads(
        "storyCollaboration.titleLock.user"
      ),
      lock: function () {
        this.get("storyCollaboration").lockTitle();
      },
      unlock: function () {
        this.get("storyCollaboration").unlockTitle();
      },
      hasPendingPromises: function () {
        return this.get("story.isSaving");
      },
      actions: {
        titleFocusedIn: function () {
          this.set("isEditing", !0);
        },
        titleFocusedOut: function () {
          this.set("isEditing", !1);
        },
      },
    });
  }),
  define("frontend/components/story-display-title/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "DWT85n5N",
      block:
        '{"statements":[["block",["if"],[["get",["isEmbedded"]]],null,3,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["focusedIn","focusedOut","isEditing","model","text","errors","showErrors","placeholder","class","tagName"],[["helper",["action"],[["get",[null]],"titleFocusedIn"],null],["helper",["action"],[["get",[null]],"titleFocusedOut"],null],["get",["isEditable"]],["get",["story"]],["get",["story","title"]],["get",["story","validations","attrs","title","messages"]],["get",["showErrors"]],"Choose a titleâ¦","story-title","h1"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["collaboration-lock-wrapper"],null,[["lockedText","lockedByUser"],["is currently editing the title",["get",["lockedByUser"]]]],0]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["story","title"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["story",["get",["story"]]],[["class","target"],["story-title","_blank"]],2]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-display-title/template.hbs",
      },
    });
  }),
  define("frontend/components/story-display/component", [
    "exports",
    "ember",
    "frontend/mixins/story-utils",
    "ember-responds-to/mixins/responds-to-resize",
    "frontend/mixins/time-spent-in-view",
    "frontend/mixins/story-state",
    "frontend/mixins/story-permissions",
    "frontend/mixins/velocity",
    "ember-concurrency",
    "frontend/controllers/upgrade",
    "frontend/models/user",
  ], function (e, t, n, s, o, a, i, l, r, u, c) {
    function d(e) {
      if (Array.isArray(e)) {
        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
        return n;
      }
      return Array.from(e);
    }
    var m = 20;
    e.default = t.default.Component.extend(
      n.default,
      s.default,
      o.default,
      a.default,
      i.default,
      l.default,
      {
        classNames: ["story"],
        classNameBindings: [
          "isEditing",
          "textDirection",
          "story.hasSqueezedIntroduction",
          "showBanner",
          "showTitle",
        ],
        attributeBindings: ["textDirection:dir"],
        analytics: t.default.inject.service(),
        notifications: t.default.inject.service(),
        session: t.default.inject.service(),
        store: t.default.inject.service(),
        storyCollaboration: t.default.inject.service(),
        addthis: t.default.inject.service(),
        itemComponentsSorting: ["position:asc"],
        sortStoryConclusionsBy: ["position:asc"],
        validationErrorsActive: !1,
        itemAllowedToBeDragged: null,
        conclusionComponents: [],
        itemComponents: [],
        withStickyToolbar: !0,
        showComments: !1,
        numberOfFreeStudentStories: t.default
          .computed(function () {
            return c.default.NUMBER_OF_FREE_STUDENT_STORIES;
          })
          .readOnly(),
        textDirection: t.default.computed.reads("story.textDirection"),
        sortedItems: t.default.computed.reads("story.sortedItems"),
        currentUser: t.default.computed.reads("session.currentUser"),
        showSutoriLogoOverBanner: t.default.computed.and(
          "isEmbedded",
          "story.canShowSutoriLogoInAnEmbed",
          "story.showsSutoriLogoOnEmbed"
        ),
        showBanner: t.default.computed(
          "isEditable",
          "isEmbedded",
          "story.{hasBanner,canShowBannerInAnEmbed}",
          function () {
            return (
              !!this.get("isEditable") ||
              (this.get("isEmbedded")
                ? this.get("story.hasBanner") &&
                  this.get("story.canShowBannerInAnEmbed")
                : this.get("story.hasBanner"))
            );
          }
        ),
        showTitle: t.default.computed.or("isEditable", "story.hasTitle"),
        showStoryConclusions: t.default.computed.or(
          "isEditable",
          "story.hasStoryConclusions"
        ),
        isEditable: t.default.computed.and("isNotEmbedded", "canModifyStory"),
        leftAlignIntroduction: t.default.computed.reads(
          "story.leftAlignIntroduction"
        ),
        showToolbar: t.default.computed.or(
          "isNotEmbedded",
          "story.canShowToolbarInAnEmbed"
        ),
        showPoweredBySutori: t.default.computed.and(
          "isEmbedded",
          "story.canShowPoweredBySutoriInAnEmbed"
        ),
        storyIsInvalid: t.default.computed.reads("story.validations.isInvalid"),
        showStoryInvalidMessage: t.default.computed.and(
          "validationErrorsActive",
          "storyIsInvalid"
        ),
        isTrackingTimeSpentOnStory: t.default.computed.not("isOwner"),
        timeSpentOnStory: t.default.computed.reads("timeSpentInView"),
        sortedItemComponents: t.default.computed.sort(
          "itemComponents",
          "itemComponentsSorting"
        ),
        sortedNonChapterItemComponents: t.default.computed.filterBy(
          "sortedItemComponents",
          "isChapterTitle",
          !1
        ),
        sortedStoryConclusions: t.default.computed.sort(
          "story.storyConclusions",
          "sortStoryConclusionsBy"
        ),
        shouldEnableCollaboration: t.default.computed(
          "isCollaborator",
          "isOwner",
          "story.{hasCollaborators,hasPendingCollaborationInvitations}",
          function () {
            return (
              !!this.get("isCollaborator") ||
              (this.get("isOwner")
                ? this.get("story.hasCollaborators") ||
                  this.get("story.hasPendingCollaborationInvitations")
                : void 0)
            );
          }
        ),
        showPreviewMessage: t.default.computed(
          "isNotFullyAvailable",
          "story.isSutoriStory",
          function () {
            return (
              this.get("isNotFullyAvailable") &&
              !this.get("story.isSutoriStory")
            );
          }
        ),
        showNumberOfStudentStoriesLeft: t.default.computed(
          "currentUser.{isTeacher,hasOngoingSubscription}",
          "myStudentIsOwner",
          "isFullyAvailable",
          function () {
            return (
              this.get("currentUser.isTeacher") &&
              this.get("myStudentIsOwner") &&
              this.get("isFullyAvailable") &&
              !this.get("currentUser.hasOngoingSubscription")
            );
          }
        ),
        init: function () {
          this._super.apply(this, arguments), this.get("story.items").reload();
        },
        layoutStoryOnResize: t.default.on("init", "resize", function () {
          this._debouncedLayoutStory();
        }),
        didInsertElement: function () {
          this._super.apply(this, arguments),
            this.loadPrintingStylesheet(),
            this._setupCollaboration(),
            this.get("session.currentUserCanShareOnSocialMedia") &&
              this.get("addthis").loadAddthis();
        },
        willDestroyElement: function () {
          this._super.apply(this, arguments), this._teardownCollaboration();
          var e = this.get("story");
          !e.get("isDestroyed") &&
            this.get("isTrackingTimeSpentOnStory") &&
            this.get("analytics").trackStoryEvent("Exit Story", e, {
              "Time spent on story in seconds": this.get("timeSpentOnStory"),
            });
        },
        didUpdateAttrs: function (e) {
          this._super.apply(this, arguments);
          var t = e.oldAttrs.story.value,
            n = e.newAttrs.story.value;
          t !== n &&
            (this._teardownCollaboration(), this._setupCollaboration());
        },
        printStoryTask: (0, r.task)(
          regeneratorRuntime.mark(function e() {
            var n, s, o;
            return regeneratorRuntime.wrap(
              function (e) {
                for (var a = this; ; )
                  switch ((e.prev = e.next)) {
                    case 0:
                      if (
                        (this.get("analytics").trackStoryEvent(
                          "Story Print",
                          this.get("story")
                        ),
                        (n = this.get("currentUser")),
                        !n.get("isTeacher") || n.get("canPrint"))
                      ) {
                        e.next = 6;
                        break;
                      }
                      this.transitionToRoute("upgrade", {
                        queryParams: { origin: u.default.ORIGIN_PRINT_STORY },
                      }),
                        (e.next = 12);
                      break;
                    case 6:
                      return (
                        this.set("printedWithPrintButton", !0),
                        (s = this._loadAllStoryImages()),
                        (o = this._loadAllStoryVideos()),
                        (e.next = 11),
                        t.default.RSVP.all([].concat(s, o))
                      );
                    case 11:
                      t.default.run.scheduleOnce("afterRender", function () {
                        window.print(), a.set("printedWithPrintButton", !1);
                      });
                    case 12:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        createItemTask: (0, r.task)(
          regeneratorRuntime.mark(function e(n, s) {
            var o, a, i, l, r;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      return (
                        (o = n.get("position") + 1),
                        (a = this._itemsStartingFromPosition("sortedItems", o)),
                        this._incrementPositionsOf(a),
                        (i = this.get("story")),
                        (l = t.default
                          .getOwner(this)
                          .lookup("factory:item")
                          .createItem({ story: i, position: o, type: s })),
                        i.get("items").pushObject(l),
                        (e.next = 8),
                        l.save()
                      );
                    case 8:
                      return (
                        (r = []),
                        l.get("isQuizQuestionMultipleChoice")
                          ? l
                              .get("quizQuestionMultipleChoiceAnswers")
                              .forEach(function (e) {
                                r.push(e.save());
                              })
                          : l.get("isQuizQuestionMatching") &&
                            l
                              .get("quizQuestionMatchingPairs")
                              .forEach(function (e) {
                                r.push(e.save());
                              }),
                        (e.next = 12),
                        t.default.RSVP.Promise.all(r)
                      );
                    case 12:
                      this.get("analytics").trackEvent("Story Item Creation", {
                        "Item type": l.get("type"),
                      }),
                        this.get("analytics").trackPeopleIncrement(
                          "Number of items created"
                        ),
                        this.get("storyCollaboration").createItem(l);
                    case 15:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        moveItemTask: (0, r.task)(
          regeneratorRuntime.mark(function e(t) {
            var n, s, o, a;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      if (
                        ((n = t.get("model")),
                        (s = n.get("position")),
                        (o = this._getItemTargetPosition(t)),
                        t.get("movableDOMelement").css("top", ""),
                        (a = []),
                        !(o < s))
                      ) {
                        e.next = 10;
                        break;
                      }
                      (a = this._itemsInBetween("sortedItems", o, s - 1)),
                        this._incrementPositionsOf(a),
                        (e.next = 17);
                      break;
                    case 10:
                      if (!(o > s)) {
                        e.next = 16;
                        break;
                      }
                      (o -= 1),
                        (a = this._itemsInBetween("sortedItems", s + 1, o)),
                        this._decrementPositionsOf(a),
                        (e.next = 17);
                      break;
                    case 16:
                      return e.abrupt("return");
                    case 17:
                      return n.set("position", o), (e.next = 20), n.save();
                    case 20:
                      this.get("storyCollaboration").moveItem(n);
                    case 21:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        deleteItemTask: (0, r.task)(
          regeneratorRuntime.mark(function e(t) {
            var n, s;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      return (
                        (n = t.get("position") + 1),
                        (s = this._itemsStartingFromPosition("sortedItems", n)),
                        this._decrementPositionsOf(s),
                        this.get("story.items").removeObject(t),
                        (e.next = 6),
                        t.destroyRecord()
                      );
                    case 6:
                      this.get("analytics").trackEvent("Story Item Deletion", {
                        "Item type": t.get("type"),
                      }),
                        this.get("storyCollaboration").deleteItem(t);
                    case 8:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        createConclusionTask: (0, r.task)(
          regeneratorRuntime.mark(function e() {
            var t, n;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      return (
                        this.set("waitingForConclusionCreation", !0),
                        (t = this.get("story.storyConclusions.length") + 1),
                        (n = this.get("store").createRecord(
                          "story-conclusion",
                          { story: this.get("story"), position: t }
                        )),
                        (e.next = 5),
                        n.save()
                      );
                    case 5:
                      this.set("waitingForConclusionCreation", !1),
                        this.get("storyCollaboration").createConclusion(n);
                    case 7:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        deleteConclusionTask: (0, r.task)(
          regeneratorRuntime.mark(function e(t) {
            var n, s;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      return (
                        (n = t.get("position")),
                        (s = this._itemsStartingFromPosition(
                          "story.storyConclusions",
                          n + 1
                        )),
                        this._decrementPositionsOf(s),
                        (e.next = 5),
                        t.destroyRecord()
                      );
                    case 5:
                      this.get("storyCollaboration").deleteConclusion(t);
                    case 6:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        _listOfItemComponentsChanged: t.default.observer(
          "sortedNonChapterItemComponents.[]",
          function () {
            this._immediateLayoutStory();
          }
        ),
        loadPrintingStylesheet: t.default.observer(
          "currentUser",
          "currentUser.hasOngoingSubscription",
          function () {
            t.default.run.once(this, this._loadPrintingStylesheet);
          }
        ),
        _debouncedLayoutStory: function () {
          t.default.run.debounce(this, this._immediateLayoutStory, m);
        },
        _loadAllStoryImages: function () {
          return this._forceLoadComponents(this.$(".render-image"));
        },
        _loadAllStoryVideos: function () {
          return this._forceLoadComponents(this.$(".render-video"));
        },
        _forceLoadComponents: function (e) {
          var n = this,
            s = e.toArray().map(function (e) {
              var s = t.default
                .getOwner(n)
                .get("container")
                .lookup("-view-registry:main")[$(e).attr("id")];
              return s.actions.forceLoad.apply(s);
            });
          return t.default.RSVP.all(s);
        },
        _loadPrintingStylesheet: function () {
          $("#print-stylesheet").remove();
          var e = this.get("session").urlWithAuthenticationParams(
              "/assets/print.css"
            ),
            t = $(
              '<link id="print-stylesheet" rel="stylesheet" href="' + e + '">'
            );
          $("head").append(t);
        },
        _immediateLayoutStory: function () {
          var e = this;
          return new t.default.RSVP.Promise(function (n) {
            e.get("isDestroying") || e.get("isDestroyed")
              ? n()
              : t.default.run.scheduleOnce("afterRender", function () {
                  e._reorderStory(),
                    t.default.run.scheduleOnce("afterRender", function () {
                      e._makeArrowsNonOverlapping(), n();
                    });
                });
          });
        },
        _reorderStory: function () {
          var e = 0,
            t = 0,
            n = this.get("sortedItemComponents")
              .filterBy("isDestroying", !1)
              .filterBy("isDestroyed", !1);
          n.forEach(function (n) {
            if (n.get("isChapterTitle")) return (e = 0), void (t = 0);
            var s = n.$().outerHeight(!0);
            e <= t
              ? (n.set("side", "left"), (e += s))
              : (n.set("side", "right"), (t += s));
          });
        },
        _makeArrowsNonOverlapping: function () {
          var e = 6,
            t = this.get("sortedNonChapterItemComponents");
          t.forEach(function (n, s) {
            if (0 !== s) {
              var o = n.$(),
                a = o.find(".bullet"),
                i = o.find(".item > .arrow-wrapper"),
                l = o.find(".create-new-item"),
                r = a.width();
              a.css("top", ""), i.css("top", ""), l.css("top", "");
              var u = t.objectAt(s - 1).$(),
                c = u.find(".bullet").offset().top,
                d = a.offset().top,
                m = d - c;
              if (0 < m && m <= r) {
                var f = r - m + e;
                i.css("top", "+=" + f),
                  l.css("top", "+=" + f),
                  a.css("top", "+=" + f);
              }
            }
          });
        },
        _hasImages: function () {
          return this.$() && this.$("img").length > 0;
        },
        _nonTitleItems: function () {
          return this.$(".item-wrapper:not(.chapter-title)").toArray();
        },
        _makeRoomInLastChapterFor: function (e) {
          var t = this.get("sortedItemComponents.lastObject");
          if (e !== t) {
            this.set("lastItemBeforeDrag", t);
            var n = 0;
            t.get("isChapterTitle") &&
              (n = parseInt(t.$().css("margin-bottom"), 10));
            var s = n + e.$().height();
            t.$().css("margin-bottom", s);
          }
        },
        _resetSizeOfLastChapter: function () {
          var e = this.get("lastItemBeforeDrag");
          t.default.isNone(e) ||
            (e.$().css("margin-bottom", ""),
            this.set("lastItemBeforeDrag", null));
        },
        _setValidationErrorsActiveState: function (e) {
          this.set("validationErrorsActive", e),
            this.get("itemComponents").forEach(function (t) {
              t.set("validationActive", e);
            }),
            this.get("conclusionComponents").forEach(function (t) {
              t.set("validationActive", e);
            });
        },
        _getItemTargetPosition: function (e) {
          var n = e.bulletPosition(),
            s = null;
          return (
            this.get("sortedItemComponents").forEach(function (e) {
              e.bulletPosition() < n && (s = e);
            }),
            (t.default.isPresent(s) ? s.get("model.position") : 0) + 1
          );
        },
        _setupCollaboration: function () {
          this.get("shouldEnableCollaboration") &&
            this.get("storyCollaboration").connectToStory(this.get("story"));
        },
        _teardownCollaboration: function () {
          this.get("storyCollaboration").closeConnection();
        },
        actions: {
          createNewItem: function (e, t) {
            this.get("createItemTask")
              .perform(e, t)
              .catch(function () {});
          },
          deleteItem: function (e) {
            this.get("deleteItemTask")
              .perform(e)
              .catch(function () {});
          },
          startDraggingAnItem: function (e) {
            var n = this;
            this.set("itemAllowedToBeDragged", e),
              t.default.run.scheduleOnce("afterRender", function () {
                n._makeRoomInLastChapterFor(e);
              });
          },
          stopDraggingAnItem: function () {
            var e = this;
            this.set("itemAllowedToBeDragged", null),
              t.default.run.scheduleOnce("afterRender", function () {
                e._resetSizeOfLastChapter();
              });
          },
          itemMoved: function (e) {
            this.get("moveItemTask")
              .perform(e)
              .catch(function () {});
          },
          itemResized: function () {
            this._debouncedLayoutStory();
          },
          registerItem: function (e) {
            this.get("itemComponents").addObject(e);
          },
          unregisterItem: function (e) {
            this.get("itemComponents").removeObject(e);
          },
          registerConclusion: function (e) {
            this.get("conclusionComponents").addObject(e);
          },
          unregisterConclusion: function (e) {
            this.get("conclusionComponents").removeObject(e);
          },
          transitionToStory: function (e) {
            this.sendAction("transitionToRoute", "story", e);
          },
          transitionToRoute: function () {
            this.sendAction.apply(
              this,
              d(["transitionToRoute"].concat([].slice.call(arguments, 0)))
            );
          },
          printStory: function () {
            return this.get("printStoryTask").perform();
          },
          createConclusion: function () {
            this.get("createConclusionTask")
              .perform()
              .catch(function () {});
          },
          deleteConclusion: function (e) {
            this.get("deleteConclusionTask")
              .perform(e)
              .catch(function () {});
          },
          activateValidationErrors: function () {
            var e = this;
            this._setValidationErrorsActiveState(!0),
              this.get("storyIsInvalid") &&
                t.default.run.next(function () {
                  var t = e.$(".story-non-valid-message");
                  if (t.length > 0) {
                    var n = t.offset().top - 100 + "px";
                    e.animate($("html"), "scroll", {
                      offset: n,
                      duration: 250,
                    });
                  }
                });
          },
          deactivateValidationErrors: function () {
            this._setValidationErrorsActiveState(!1);
          },
          collaboratorsModified: function () {
            this.get("shouldEnableCollaboration")
              ? this._setupCollaboration()
              : this._teardownCollaboration();
          },
        },
      }
    );
  }),
  define("frontend/components/story-display/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "niSiPM8O",
      block:
        '{"statements":[["partial","story-display/premium-message-head"],["text","\\n\\n"],["block",["unless"],[["get",["printedWithPrintButton"]]],null,16],["text","\\n"],["block",["if"],[["get",["showSutoriLogoOverBanner"]]],null,15],["text","\\n"],["block",["if"],[["get",["showBanner"]]],null,13],["text","\\n"],["block",["if"],[["get",["showToolbar"]]],null,12],["text","\\n"],["block",["if"],[["get",["showStoryInvalidMessage"]]],null,8],["text","\\n"],["block",["if"],[["get",["showTitle"]]],null,7],["text","\\n"],["append",["helper",["story-introduction"],null,[["isEditable","story"],[["get",["isEditable"]],["get",["story"]]]]],false],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["story","items"]]]],6],["text","\\n"],["block",["if"],[["get",["showStoryConclusions"]]],null,4],["text","\\n"],["partial","story-display/premium-message-foot"],["text","\\n\\n"],["block",["if"],[["get",["showPoweredBySutori"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Sutori"]],"locals":[]},{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","powered-by-sutori"],["flush-element"],["text","Powered by "],["block",["link-to"],["index"],[["target"],["_blank"]],0],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"createConclusion"],null],"create-conclusion","Press here to add a conclusion",["get",["waitingForConclusionCreation"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-conclusion"],null,[["deleteConclusion","register","unregister","storyConclusion","isEditable"],[["helper",["action"],[["get",[null]],"deleteConclusion"],null],["helper",["action"],[["get",[null]],"registerConclusion"],null],["helper",["action"],[["get",[null]],"unregisterConclusion"],null],["get",["storyConclusion"]],["get",["isEditable"]]]]],false],["text","\\n"]],"locals":["storyConclusion"]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","story-conclusions"],["flush-element"],["text","\\n"],["block",["each"],[["get",["sortedStoryConclusions"]]],null,3],["block",["if"],[["get",["isEditable"]]],null,2],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-item"],null,[["startDraggingAnItem","stopDraggingAnItem","createNewItem","itemResized","moveItem","deleteItem","register","unregister","model","isEditable","itemAllowedToBeDragged","schoolClassContext","showComments","isDisplayedInStory"],[["helper",["action"],[["get",[null]],"startDraggingAnItem"],null],["helper",["action"],[["get",[null]],"stopDraggingAnItem"],null],["helper",["action"],[["get",[null]],"createNewItem"],null],["helper",["action"],[["get",[null]],"itemResized"],null],["helper",["action"],[["get",[null]],"itemMoved"],null],["helper",["action"],[["get",[null]],"deleteItem"],null],["helper",["action"],[["get",[null]],"registerItem"],null],["helper",["action"],[["get",[null]],"unregisterItem"],null],["get",["item"]],["get",["isEditable"]],["get",["itemAllowedToBeDragged"]],["get",["schoolClassContext"]],["get",["showComments"]],true]]],false],["text","\\n"]],"locals":["item"]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","items"],["flush-element"],["text","\\n"],["block",["each"],[["get",["sortedItems"]]],null,5],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["story-display-title"],null,[["story","isEditable","showErrors"],[["get",["story"]],["get",["isEditable"]],["get",["validationErrorsActive"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","h2",[]],["static-attr","class","story-non-valid-message"],["flush-element"],["text","Some items below are incomplete. Scroll down and make the necessary adjustments before making the story available to other users."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["partial","story-display/story-toolbar"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["partial","story-display/story-toolbar"],["text","\\n"]],"locals":[]},{"statements":[["block",["sticky-box"],null,[["class"],["sticky-box-story-toolbar"]],10]],"locals":[]},{"statements":[["block",["if"],[["get",["withStickyToolbar"]]],null,11,9]],"locals":[]},{"statements":[["text","  "],["append",["helper",["story-banner"],null,[["isEditable","story"],[["get",["isEditable"]],["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text",""]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","logo-overlay"],["flush-element"],["text","\\n    "],["block",["link-to"],["index"],[["target","class"],["_blank","sutori-logo"]],14],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","have-to-print-with-button-message"],["flush-element"],["text","To print the story please do so via the link in the story toolbar."],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/story-display/template.hbs" },
    });
  }),
  define("frontend/components/story-embed/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["story-embed"],
      store: t.default.inject.service(),
      storyPromise: t.default.computed("slug", function () {
        return this.get("store").findRecord("story", this.get("slug"));
      }),
      story: t.default.computed.reads("storyPromise.content"),
    });
  }),
  define("frontend/components/story-embed/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Wfw1IX97",
      block:
        '{"statements":[["block",["promise-block"],null,[["promise"],[["get",["storyPromise"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["story-display"],null,[["story","withStickyToolbar"],[["get",["story"]],false]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-embed/template.hbs" },
    });
  }),
  define("frontend/components/story-introduction/component", [
    "exports",
    "ember",
    "frontend/mixins/edit-on-focus",
    "frontend/mixins/lockable-component",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["story-introduction"],
      classNameBindings: ["leftAlign"],
      storyCollaboration: t.default.inject.service(),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.setupEditOnFocus(this.$(".introduction"));
      },
      leftAlign: t.default.computed.reads("story.leftAlignIntroduction"),
      lockedByUser: t.default.computed.reads(
        "storyCollaboration.introductionLock.user"
      ),
      introductionText: t.default.computed.reads("story.introductionText"),
      lock: function () {
        this.get("storyCollaboration").lockIntroduction();
      },
      unlock: function () {
        this.get("storyCollaboration").unlockIntroduction();
      },
      hasPendingPromises: function () {
        return this.get("introductionText.isSaving");
      },
    });
  }),
  define("frontend/components/story-introduction/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "zVQH6ewy",
      block:
        '{"statements":[["block",["promise-block"],null,[["promise","class"],[["get",["introductionText"]],"introduction"]],1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","placeholder"],[true,["get",["isEditable"]],["get",["introductionText","content"]],["get",["introductionText","content","content"]],"Write a short description that will get people interested in your storyâ¦"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["collaboration-lock-wrapper"],null,[["lockedText","lockedByUser"],["is currently editing the introduction",["get",["lockedByUser"]]]],0]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-introduction/template.hbs",
      },
    });
  }),
  define("frontend/components/story-item/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "frontend/mixins/responds-to-element-resize",
    "frontend/mixins/edit-on-focus",
    "frontend/utils/url",
    "frontend/mixins/lockable-component",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Component.extend(
      n.default,
      s.default,
      o.default,
      i.default,
      {
        classNames: ["item-wrapper"],
        classNameBindings: [
          "model.type",
          "itemId",
          "isEditing",
          "isDragging:dragging",
          "hasContent::has-no-content",
          "side",
          "isFirstChapterTitle:first-chapter-title",
          "isChapterEmpty:empty-chapter",
          "isLastItemOfStoryChapter:last",
          "isFirstNonChapterItemOfStoryChapter:first-non-chapter",
        ],
        attributeBindings: ["dataItemId:data-item-id"],
        analytics: t.default.inject.service(),
        routingProxy: t.default.inject.service(),
        session: t.default.inject.service(),
        storyCollaboration: t.default.inject.service(),
        isDisplayedInStory: !1,
        validationActive: !1,
        isEditing: !1,
        withNotes: !0,
        imageMaxHeight: t.default
          .computed(function () {
            return 500;
          })
          .readOnly(),
        imageSizes: t.default
          .computed("imageMaxHeight", function () {
            return [
              {
                width: 424,
                height: this.get("imageMaxHeight"),
                overflowPolicy: "contain",
              },
              {
                width: 296,
                height: this.get("imageMaxHeight"),
                overflowPolicy: "contain",
              },
              { width: 768, height: 1024, overflowPolicy: "contain" },
              { width: 1440, height: 1440, overflowPolicy: "contain" },
              { width: 1920, height: 1920, overflowPolicy: "contain" },
            ];
          })
          .readOnly(),
        story: t.default.computed.reads("model.story"),
        contentText: t.default.computed.reads("model.contentText"),
        type: t.default.computed.reads("model.type"),
        errors: t.default.computed.reads("model.errors"),
        imageFile: t.default.computed.reads("model.imageFile"),
        audioFile: t.default.computed.reads("model.audioFile"),
        video: t.default.computed.reads("model.video"),
        quizExplanation: t.default.computed.reads("model.quizExplanation"),
        quizQuestionText: t.default.computed.reads("model.quizQuestionText"),
        isChapterTitle: t.default.computed.reads("model.isChapterTitle"),
        isQuote: t.default.computed.reads("model.isQuote"),
        isImage: t.default.computed.reads("model.isImage"),
        isAudio: t.default.computed.reads("model.isAudio"),
        isVideo: t.default.computed.reads("model.isVideo"),
        isDidYouKnow: t.default.computed.reads("model.isDidYouKnow"),
        isForum: t.default.computed.reads("model.isForum"),
        isQuizQuestionMultipleChoice: t.default.computed.reads(
          "model.isQuizQuestionMultipleChoice"
        ),
        isQuizQuestionMatching: t.default.computed.reads(
          "model.isQuizQuestionMatching"
        ),
        displayItemAsInvalid: t.default.computed.and(
          "model.validations.isInvalid",
          "validationActive"
        ),
        showValidationErrors: t.default.computed.and(
          "isEditing",
          "displayItemAsInvalid"
        ),
        contentTextErrors: t.default.computed.reads(
          "model.validations.attrs.contentText.messages"
        ),
        quizQuestionTextErrors: t.default.computed.reads(
          "model.validations.attrs.quizQuestionText.messages"
        ),
        imageFileErrors: t.default.computed.reads(
          "model.validations.attrs.imageFile.messages"
        ),
        audioFileErrors: t.default.computed.reads(
          "model.validations.attrs.audioFile.messages"
        ),
        videoErrors: t.default.computed.reads(
          "model.validations.attrs.video.messages"
        ),
        router: t.default.computed.reads("routingProxy.router"),
        isEmbedded: t.default.computed.reads("routingProxy.isEmbeddedStory"),
        showContentEditableText: t.default.computed.or(
          "isEditing",
          "hasContent"
        ),
        hasImage: t.default.computed.and("model.hasImage", "hasImageVersions"),
        hasImageVersions: t.default.computed.notEmpty(
          "model.imageFile.imageFileVersions"
        ),
        showEditableImage: t.default.computed.or(
          "isEditing",
          "hasImage",
          "isImage"
        ),
        addImageLabel: t.default.computed("isImage", function () {
          return this.get("isImage") ? "Add an image" : "Add an optional image";
        }),
        commentButtonLabel: t.default.computed("isForum", function () {
          return this.get("isForum") ? "Share your opinion" : "Comment";
        }),
        hasContent: t.default.computed(
          "model.contentText",
          "model.contentText.isBlank",
          function () {
            return (
              t.default.isPresent(this.get("model.contentText")) &&
              !this.get("model.contentText.isBlank")
            );
          }
        ),
        dataItemId: t.default.computed.reads("model.id"),
        sortedItems: t.default.computed.reads("model.story.sortedItems"),
        showCreateNewItemButton: t.default.computed(
          "isEditable",
          "isChapterTitle",
          "isChapterEmpty",
          "isLastItemOfStoryChapter",
          function () {
            return (
              !!this.get("isEditable") &&
              (this.get("isChapterTitle")
                ? this.get("isChapterEmpty")
                : this.get("isLastItemOfStoryChapter"))
            );
          }
        ),
        hasComments: t.default.computed.notEmpty("activeItemComments"),
        position: t.default.computed.reads("model.position"),
        realPosition: t.default.computed(
          "model",
          "sortedItems.[]",
          function () {
            return (
              (this.get("sortedItems") || []).indexOf(this.get("model")) + 1
            );
          }
        ),
        side: t.default.computed("model.isChapterTitle", function () {
          return this.get("model.isChapterTitle") ? "" : "left";
        }),
        dialogCreateNewItemSide: t.default.computed("side", function () {
          return this._opposingSide(this.get("side"));
        }),
        numberOfItems: t.default.computed.reads("sortedItems.length"),
        _nextItemOfStory: t.default.computed(
          "sortedItems.[]",
          "realPosition",
          function () {
            return (this.get("sortedItems") || []).objectAt(
              this.get("realPosition")
            );
          }
        ),
        _previousItemOfStory: t.default.computed(
          "sortedItems.[]",
          "realPosition",
          function () {
            return (this.get("sortedItems") || []).objectAt(
              this.get("realPosition") - 2
            );
          }
        ),
        isFirstNonChapterItemOfStoryChapter: t.default.computed(
          "isDisplayedInStory",
          "isChapterTitle",
          "_previousItemOfStory",
          "_previousItemOfStory.isChapterTitle",
          function () {
            if (!this.get("isDisplayedInStory")) return !1;
            var e = this.get("_previousItemOfStory");
            return (
              !this.get("isChapterTitle") &&
              (t.default.isNone(e) || e.get("isChapterTitle"))
            );
          }
        ),
        isLastItemOfStoryChapter: t.default.computed(
          "isDisplayedInStory",
          "_nextItemOfStory.isChapterTitle",
          function () {
            if (!this.get("isDisplayedInStory")) return !1;
            var e = this.get("_nextItemOfStory");
            return t.default.isNone(e) || e.get("isChapterTitle");
          }
        ),
        isFirstChapterTitle: t.default.computed(
          "model.isChapterTitle",
          "realPosition",
          function () {
            return (
              this.get("model.isChapterTitle") && 1 === this.get("realPosition")
            );
          }
        ),
        isChapterEmpty: t.default.computed.and(
          "isChapterTitle",
          "isLastItemOfStoryChapter"
        ),
        itemId: t.default.computed("model.id", function () {
          return "item-" + this.get("model.id");
        }),
        canDragItem: t.default.computed("itemAllowedToBeDragged", function () {
          var e = this.get("itemAllowedToBeDragged");
          return !!t.default.isNone(e) || e === this;
        }),
        disableActionButtons: t.default.computed.not("canDragItem"),
        isNotOnlyItemOfStory: t.default.computed.gt("numberOfItems", 1),
        canMoveItem: t.default.computed(
          "isEditing",
          "isNotOnlyItemOfStory",
          function () {
            return this.get("isEditing") && this.get("isNotOnlyItemOfStory");
          }
        ),
        canDeleteItem: t.default.computed(
          "isEditing",
          "isNotOnlyItemOfStory",
          function () {
            return this.get("isEditing") && this.get("isNotOnlyItemOfStory");
          }
        ),
        showShareOnSocialMediaButton: t.default.computed(
          "model.story.{isAccessibleByGuest,canBeSharedOnSocialMediaInAnEmbed}",
          "session.currentUserCanShareOnSocialMedia",
          "model.validations.isValid",
          "isEmbedded",
          function () {
            var e =
              this.get("model.validations.isValid") &&
              this.get("model.story.isAccessibleByGuest") &&
              this.get("session.currentUserCanShareOnSocialMedia");
            return this.get("isEmbedded")
              ? e && this.get("model.story.canBeSharedOnSocialMediaInAnEmbed")
              : e;
          }
        ),
        showItemMeta: t.default.computed.or(
          "canDeleteItem",
          "canMoveItem",
          "showShareOnSocialMediaButton",
          "showCommentsInFooter"
        ),
        urlToItemPage: t.default.computed("router", "model", function () {
          return (0,
          a.toApplicationUrl)(this.get("router").generate("item", this.get("model")));
        }),
        showCommentsInFooter: t.default.computed(
          "showComments",
          "model.{isQuote,isImage,isAudio,isVideo}",
          function () {
            return (
              this.get("showComments") &&
              (this.get("model.isQuote") ||
                this.get("model.isImage") ||
                this.get("model.isAudio") ||
                this.get("model.isVideo"))
            );
          }
        ),
        deleteItemQuestion: t.default.computed(
          "model.isChapterTitle",
          function () {
            return this.get("model.isChapterTitle")
              ? "Are you sure you want to delete this heading?"
              : "Are you sure you want to delete this item?";
          }
        ),
        activeItemComments: t.default.computed(
          "schoolClassContext.id",
          "model.itemComments.@each.{schoolClassId,isRemoved}",
          function () {
            var e = this.get("schoolClassContext.id");
            return (this.get("model.itemComments") || []).filter(function (t) {
              return t.get("schoolClassId") === e && !t.get("isRemoved");
            });
          }
        ),
        nameOfItemPartial: t.default.computed("model.type", function () {
          return "story-item/" + this.get("model.type");
        }),
        movableDOMelement: t.default
          .computed(function () {
            var e = this.$();
            return (
              this.get("isChapterTitle") && (e = this.$(".story-item-content")),
              e
            );
          })
          .volatile(),
        lockedByUser: t.default.computed(
          "model.id",
          "storyCollaboration.itemLocks.@each.{id,user}",
          function () {
            var e = this.get("model.id"),
              n = this.get("storyCollaboration.itemLocks").findBy("id", e);
            return t.default.isPresent(n) ? n.user : null;
          }
        ),
        resetNewComment: t.default.on("init", function () {
          this.set("newComment", t.default.Object.create({ content: "" }));
        }),
        notifyParentAboutElementResize: t.default.on(
          "elementResized",
          function () {
            this.sendAction("itemResized");
          }
        ),
        lock: function () {
          var e = this.get("model");
          this.get("storyCollaboration").lockItem(e);
        },
        unlock: function () {
          var e = this.get("model");
          this.get("storyCollaboration").unlockItem(e);
        },
        hasPendingPromises: function () {
          var e = this.get("model");
          return (
            e.get("isSaving") ||
            e.get("contentText.isSaving") ||
            e.get("imageFile.isSaving") ||
            e.get("audioFile.isSaving") ||
            e.get("video.isSaving") ||
            e.get("quizQuestionText.isSaving") ||
            this._isSavingAnyOf(e.get("quizQuestionMatchingPairs")) ||
            this._isSavingAnyOf(e.get("quizQuestionMultipleChoiceAnswers"))
          );
        },
        getNextItemOnSameSide: function (e) {
          var t = this.getSide(e),
            n = e.next("." + t);
          return n.length > 0
            ? n
            : e
                .nextUntil("." + t)
                .last()
                .next();
        },
        getPreviousItemOnOtherSideOfItem: function (e) {
          var t = this.getOpposingSide(e),
            n = e.prev("." + t);
          return n.length > 0
            ? n
            : e
                .prevUntil("." + t)
                .last()
                .prev();
        },
        getSide: function (e) {
          return e.hasClass("left") ? "left" : "right";
        },
        getOpposingSide: function (e) {
          return e.hasClass("right") ? "left" : "right";
        },
        _opposingSide: function (e) {
          return "right" === e ? "left" : "right";
        },
        bulletPosition: function () {
          var e = null;
          return (
            (e = this.get("isChapterTitle")
              ? this.$(".story-item-content")
              : this.$(".bullet")),
            e.offset().top
          );
        },
        didInsertElement: function () {
          this._super.apply(this, arguments),
            this.makeFastclickable(this.$(".button-comments-count")),
            this.get("isChapterTitle")
              ? this.setupResizeSensor(this.$())
              : this.setupResizeSensor(this.$(".item-body")),
            this.sendAction("register", this),
            this.setupEditOnFocus(
              this.get("isChapterTitle")
                ? this.$(".story-item-content")
                : this.$(".item")
            );
        },
        willDestroyElement: function () {
          this._super.apply(this, arguments),
            this.sendAction("unregister", this);
        },
        actions: {
          startDraggingAnItem: function () {
            this.sendAction("startDraggingAnItem", this),
              this.set("isDragging", !0);
          },
          moveItem: function () {
            this.sendAction("moveItem", this);
          },
          stopDraggingAnItem: function () {
            this.sendAction("stopDraggingAnItem"), this.set("isDragging", !1);
          },
          createNewItem: function (e) {
            this.sendAction("createNewItem", this.get("model"), e);
          },
          deleteItem: function () {
            this.sendAction("deleteItem", this.get("model"));
          },
          audioUploaded: function (e) {
            return this.set("model.audioFile", e), this.get("model").save();
          },
          audioDeleted: function () {
            return this.set("model.audioFile", null), this.get("model").save();
          },
          imageUploaded: function (e) {
            return this.set("model.imageFile", e), this.get("model").save();
          },
          imageDeleted: function () {
            return this.set("model.imageFile", null), this.get("model").save();
          },
          videoUploaded: function (e) {
            return this.set("model.video", e), this.get("model").save();
          },
          videoDeleted: function () {
            return this.set("model.video", null), this.get("model").save();
          },
          toggleComments: function () {
            this.toggleProperty("isCommentsOpen");
          },
          focus: function () {
            this.get("isQuote") ||
            this.get("isDidYouKnow") ||
            this.get("isForum")
              ? this.$(".story-item-content .content-kit-editor").focus()
              : this.get("isQuizQuestionMultipleChoice") ||
                this.get("isQuizQuestionMatching")
              ? this.$(".inplace-editor-quiz-question textarea").focus()
              : this.get("isChapterTitle") &&
                this.$(".inplace-editor textarea").focus(),
              this.switchToEditingState();
          },
          registerMoveItemComponent: function (e) {
            e.set("DOMitem", this.get("movableDOMelement"));
          },
        },
      }
    );
  }),
  define("frontend/components/story-item/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "+E6PB17f",
      block:
        '{"statements":[["block",["if"],[["get",["isChapterTitle"]]],null,9,8],["text","\\n"],["block",["if"],[["get",["showCreateNewItemButton"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["create-new-item"],null,[["createNewItem","dialogCreateNewItemSide"],[["helper",["action"],[["get",[null]],"createNewItem"],null],["get",["dialogCreateNewItemSide"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["item-comments-section"],null,[["itemComments","schoolClass","storyItem","isOpen","isSimulation"],[["get",["activeItemComments"]],["get",["schoolClassContext"]],["get",["model"]],["get",["isCommentsOpen"]],["get",["isSimulation"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["partial","story-item/component-delete-item"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["partial","story-item/component-move-item"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["partial","story-item/comments-count"],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["append",["helper",["button-share-on-social-media"],null,[["url","description","title","showLinkToUrl"],[["get",["urlToItemPage"]],["get",["model","metaDescription"]],["get",["model","metaTitle"]],true]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","footer",[]],["static-attr","class","item-meta"],["flush-element"],["text","\\n          "],["open-element","div",[]],["static-attr","class","item-actions"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showShareOnSocialMediaButton"]]],null,5],["block",["if"],[["get",["showCommentsInFooter"]]],null,4],["block",["if"],[["get",["canMoveItem"]]],null,3],["block",["if"],[["get",["canDeleteItem"]]],null,2],["text","          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["partial",["get",["nameOfItemPartial"]]],["text","\\n"],["block",["if"],[["get",["showItemMeta"]]],null,6],["block",["if"],[["get",["showComments"]]],null,1]],"locals":[]},{"statements":[["text","  "],["partial","story-item/bullet"],["text","\\n\\n  "],["open-element","article",[]],["dynamic-attr","class",["concat",["item ",["helper",["if"],[["get",["displayItemAsInvalid"]],"error"],null]]]],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","arrow-wrapper"],["flush-element"],["open-element","span",[]],["static-attr","class","arrow"],["flush-element"],["close-element"],["close-element"],["text","\\n"],["block",["collaboration-lock-wrapper"],null,[["class","lockedText","lockedByUser"],["item-body","is currently editing this item",["get",["lockedByUser"]]]],7],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["partial","story-item/chapter-title"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/story-item/template.hbs" },
    });
  }),
  define("frontend/components/story-link/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
  ], function (e, t, n) {
    function s(e) {
      if (Array.isArray(e)) {
        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
        return n;
      }
      return Array.from(e);
    }
    e.default = t.default.Component.extend(n.default, {
      classNames: ["story-link"],
      tagName: "a",
      attributeBindings: ["href"],
      routingProxy: t.default.inject.service(),
      router: t.default.computed.reads("routingProxy.router"),
      schoolClassId: t.default.computed.reads("schoolClass.id"),
      routeArguments: t.default.computed("story", "schoolClassId", function () {
        var e = ["story"].concat(this.get("story"));
        return (
          t.default.isPresent(this.get("schoolClassId")) &&
            e.push({
              queryParams: { schoolClassId: this.get("schoolClassId") },
            }),
          e
        );
      }),
      href: t.default.computed("routeArguments", function () {
        var e;
        return (e = this.get("router")).generate.apply(
          e,
          s(this.get("routeArguments"))
        );
      }),
      click: function (e) {
        var t;
        e.preventDefault(),
          (t = this.get("router")).transitionTo.apply(
            t,
            s(this.get("routeArguments"))
          );
      },
    });
  }),
  define("frontend/components/story-link/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "WMgmdHJJ",
      block:
        '{"statements":[["yield","default"],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-link/template.hbs" },
    });
  }),
  define("frontend/components/story-organization-name/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["story-organization-name"],
      tagName: "span",
      requiredInput: ["story"],
      session: t.default.inject.service(),
      canAccessThirdPartyOrganizationPage: t.default.computed(
        "story.author.organization",
        "story.author.organization.isVisibleOnCommunity",
        "canAccessVisibleThirdPartyOrganizationPage",
        "session.currentUser.{isEditor,organization}",
        function () {
          var e = this.get("story.author.organization");
          return (
            !t.default.isNone(e) &&
            (e.get("isVisibleOnCommunity")
              ? this.get("canAccessVisibleThirdPartyOrganizationPage")
              : this.get("session.currentUser.isEditor") ||
                this.get("session.currentUser.organization") === e)
          );
        }
      ),
      canAccessVisibleThirdPartyOrganizationPage: t.default.computed.or(
        "session.isGuestUser",
        "session.currentUser.isEditor",
        "session.currentUser.isPersonal",
        "session.currentUser.isTeacher",
        "session.currentUser.isPublisher"
      ),
      canAccessSutoriStoriesPage: t.default.computed.or(
        "session.isGuestUser",
        "session.currentUser.isEditor",
        "session.currentUser.isPersonal",
        "session.currentUser.isTeacher"
      ),
    });
  }),
  define("frontend/components/story-organization-name/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "u5RUYfpC",
      block:
        '{"statements":[["block",["if"],[["get",["story","isSutoriStory"]]],null,8,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["story","organizationName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["unknown",["story","organizationName"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["organization",["get",["story","author","organization"]]],null,1]],"locals":[]},{"statements":[["block",["if"],[["get",["canAccessThirdPartyOrganizationPage"]]],null,2,0]],"locals":[]},{"statements":[["block",["if"],[["get",["story","isThirdPartyStory"]]],null,3]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["story","organizationName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["unknown",["story","organizationName"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["stories.sutori"],null,6]],"locals":[]},{"statements":[["block",["if"],[["get",["canAccessSutoriStoriesPage"]]],null,7,5]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-organization-name/template.hbs",
      },
    });
  }),
  define("frontend/components/story-overview-box/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
    "frontend/mixins/story-permissions",
    "frontend/mixins/story-state",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, s.default, o.default, {
      classNames: ["story-overview-box"],
      classNameBindings: ["isShownAsUnfinished:shown-as-unfinished"],
      requiredInput: ["story"],
      lessonPlanModalVisible: !1,
      session: t.default.inject.service(),
      currentUser: t.default.computed.reads("session.currentUser"),
      introductionTextReady: t.default.computed.bool("introductionText"),
      introductionText: t.default.computed.reads(
        "story.introductionText.content"
      ),
      showLessonPlanButton: t.default.computed.reads("canViewLessonPlan"),
      isShownAsUnfinished: t.default.computed.reads("canPublishStory"),
      actions: {
        showLessonPlan: function () {
          this.set("lessonPlanModalVisible", !0);
        },
      },
    });
  }),
  define("frontend/components/story-overview-box/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "/9QXf7/a",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","overview"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","story-title"],["flush-element"],["text","\\n"],["block",["link-to"],["story",["get",["story"]]],[["class"],["link"]],4],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","introduction-text"],["dynamic-attr","dir",["unknown",["story","textDirection"]],null],["flush-element"],["text","\\n"],["block",["read-more"],null,[["isReady"],[["get",["introductionTextReady"]]]],3],["text","  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","actions"],["flush-element"],["text","\\n"],["text","    "],["block",["link-to"],["story",["get",["story"]]],[["class"],["button-view-story"]],2],["text","\\n\\n"],["block",["if"],[["get",["showLessonPlanButton"]]],null,1],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["story-link"],null,[["story"],[["get",["story"]]]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy"],[["get",["story","bannerImageFile"]],"cover"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","button",[]],["static-attr","class","button-view-lesson-plan"],["modifier",["action"],[["get",[null]],"showLessonPlan"]],["flush-element"],["text","Lesson plan"],["close-element"],["text","\\n      "],["append",["helper",["modal-box"],null,[["formComponentPath","title","model","isActive"],["modals/lesson-plan",["get",["story","title"]],["get",["story","lessonPlan"]],["get",["lessonPlanModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","View story"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["editable-text"],null,[["isEditing","model"],[false,["get",["introductionText"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-title"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-overview-box/template.hbs",
      },
    });
  }),
  define("frontend/components/story-title/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["story-title"],
      classNameBindings: ["story.isUntitled:is-untitled"],
      tagName: "span",
      requiredInput: ["story"],
    });
  }),
  define("frontend/components/story-title/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "QXrMdRsn",
      block:
        '{"statements":[["append",["unknown",["story","presentableTitle"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-title/template.hbs" },
    });
  }),
  define("frontend/components/story-toolbar-authors/component", [
    "exports",
    "ember",
    "frontend/mixins/velocity",
    "frontend/mixins/component-with-required-input",
    "ember-concurrency",
    "frontend/mixins/story-state",
    "frontend/mixins/story-permissions",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Component.extend(
      n.default,
      s.default,
      a.default,
      i.default,
      {
        classNames: ["story-toolbar-authors"],
        requiredInput: ["story"],
        session: t.default.inject.service(),
        storyCollaboration: t.default.inject.service(),
        flashUserAvatarTask: (0, o.task)(
          regeneratorRuntime.mark(function e(t) {
            var n;
            return regeneratorRuntime.wrap(
              function (e) {
                for (;;)
                  switch ((e.prev = e.next)) {
                    case 0:
                      if (
                        ((n = this.$(".user-avatar[data-user-id=" + t + "]")),
                        0 !== n.length)
                      ) {
                        e.next = 3;
                        break;
                      }
                      return e.abrupt("return");
                    case 3:
                      return (
                        (e.next = 5),
                        this.animate(n, { opacity: 0.6 }, { duration: 100 })
                      );
                    case 5:
                      return (
                        (e.next = 7),
                        this.animate(n, { opacity: 1 }, { duration: 500 })
                      );
                    case 7:
                    case "end":
                      return e.stop();
                  }
              },
              e,
              this
            );
          })
        ),
        didInsertElement: function () {
          var e = this;
          this._super.apply(this, arguments),
            this.get("storyCollaboration").on("touchUser", function (n) {
              t.default.run.once(e, e._flashUserAvatar, n);
            });
        },
        showAuthorInfo: t.default.computed.lte("activeCollaborators.length", 1),
        showInactiveCollaborators: t.default.computed.notEmpty(
          "inactiveCollaborators"
        ),
        onlineCollaborators: t.default.computed.reads(
          "storyCollaboration.onlineCollaborators"
        ),
        isNotCollaborator: t.default.computed.not("isCollaborator"),
        activeCollaborators: t.default.computed(
          "session.currentUser",
          "story.author",
          "canModifyStory",
          "onlineCollaborators.[]",
          function () {
            var e = this.get("story.author"),
              t = this.get("session.currentUser"),
              n = [];
            if ((n.pushObject(e), this.get("canModifyStory"))) {
              t !== e && n.pushObject(t);
              var s = this.get("onlineCollaborators") || [],
                o = s.without(e).without(t);
              n.pushObjects(o);
            }
            return n;
          }
        ),
        inactiveCollaborators: t.default.computed(
          "story.collaborators.[]",
          "activeCollaborators.[]",
          function () {
            var e = this.get("story.collaborators") || [],
              t = this.get("activeCollaborators") || [];
            return e.reject(function (e) {
              return t.includes(e);
            });
          }
        ),
        _flashUserAvatar: function (e) {
          t.default.isPresent(e) &&
            this.get("flashUserAvatarTask").perform(e.get("id"));
        },
        actions: {
          showCollaborateModal: function () {
            this.sendAction("showCollaborateModal");
          },
        },
      }
    );
  }),
  define("frontend/components/story-toolbar-authors/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "jbZ7UH/V",
      block:
        '{"statements":[["open-element","ul",[]],["static-attr","class","active-collaborators"],["flush-element"],["text","\\n"],["block",["each"],[["get",["activeCollaborators"]]],null,2],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showAuthorInfo"]]],null,1],["text","\\n"],["block",["if"],[["get",["showInactiveCollaborators"]]],null,0],["text","\\n"],["append",["helper",["story-context-info"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["story-collaborators-dropdown"],null,[["collaborators","showCollaborateModal"],[["get",["inactiveCollaborators"]],["helper",["action"],[["get",[null]],"showCollaborateModal"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["story-author-info"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["flush-element"],["text","\\n      "],["append",["helper",["user-avatar"],null,[["user","showOrganization","showTooltip"],[["get",["contributor"]],["get",["isNotCollaborator"]],true]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["contributor"]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-toolbar-authors/template.hbs",
      },
    });
  }),
  define("frontend/components/story-toolbar/component", [
    "exports",
    "ember",
    "frontend/controllers/upgrade",
    "ember-responds-to/mixins/responds-to-resize",
    "frontend/mixins/story-state",
    "frontend/mixins/story-permissions",
    "ember-concurrency",
    "frontend/utils/sutori-info",
  ], function (e, t, n, s, o, a, i, l) {
    e.default = t.default.Component.extend(o.default, a.default, s.default, {
      classNames: ["story-toolbar"],
      classNameBindings: [
        "showToolbar::hide-toolbar",
        "showCallToActionForGuests:show-call-to-action-for-guests",
      ],
      analytics: t.default.inject.service(),
      session: t.default.inject.service(),
      notifications: t.default.inject.service(),
      commandFactory: t.default.inject.service(),
      storyCollaboration: t.default.inject.service(),
      lessonPlanModalVisible: !1,
      didInsertElement: function () {
        this._super.apply(this, arguments), this._toggleSecondaryAction();
      },
      resize: function () {
        this._super.apply(this, arguments), this._toggleSecondaryAction();
      },
      viewportResized: t.default.observer(
        "showViewOnSutoriButton",
        function () {
          this._toggleSecondaryAction();
        }
      ),
      currentUser: t.default.computed.reads("session.currentUser"),
      storyIsValid: t.default.computed.not("story.validations.isInvalid"),
      hasCollaborators: t.default.computed.notEmpty("story.collaborators"),
      showToolbar: t.default.computed.or(
        "showCollaborators",
        "showViewOnSutoriButton",
        "showCallToActionForGuests",
        "showShareButton",
        "showShareWithClassesButton",
        "showSubmitButton",
        "showCollaborateButton",
        "canPublishStory",
        "showSecondaryActionsButton"
      ),
      showCollaborators: t.default.computed.or(
        "isNotEmbedded",
        "story.canShowAuthorInAnEmbed"
      ),
      showSecondaryActionsButton: t.default.computed.or(
        "showPrintStoryButton",
        "showCopyStoryButton",
        "showDeleteStoryButton",
        "showViewLessonPlanButton",
        "viewOnSutoriSecondaryActionVisible"
      ),
      showViewLessonPlanButton: t.default.computed.reads("canViewLessonPlan"),
      showShareButton: t.default.computed.or(
        "story.isAccessibleByGuest",
        "canMakeStoryPublic"
      ),
      showViewOnSutoriButton: t.default.computed.and(
        "isEmbedded",
        "story.canShowSutoriLogoInAnEmbed"
      ),
      showCallToActionForGuests: t.default.computed.and(
        "isNotEmbedded",
        "session.isGuestUser"
      ),
      showShareWithClassesButton: t.default.computed(
        "isEmbedded",
        "currentUser.isTeacher",
        "isFullyAvailable",
        "story.isSutoriStory",
        function () {
          return (
            this.get("isNotEmbedded") &&
            this.get("currentUser.isTeacher") &&
            (this.get("isFullyAvailable") || this.get("story.isSutoriStory"))
          );
        }
      ),
      showCollaborateButton: t.default.computed.and(
        "isNotEmbedded",
        "canAddCollaboratorsToStory"
      ),
      showSubmitButton: t.default.computed.and(
        "isOwner",
        "currentUser.isStudent"
      ),
      showDeleteStoryButton: t.default.computed.reads("canDeleteStory"),
      deletionConfirmationQuestion: t.default.computed(
        "currentUser.{isPersonal,isTeacher,isStudent,isEditor,isPublisher}",
        function () {
          var e = this.get("currentUser");
          if (t.default.isPresent(e)) {
            if (e.get("isEditor") || e.get("isPublisher"))
              return "Are you sure you want to delete this story?";
            if (e.get("isPersonal"))
              return "Are you sure you want to delete this story? You can no longer retrieve your story once it is deleted.";
            if (e.get("isTeacher"))
              return "Are you sure you want to delete this story? You can no longer retrieve your work once it is deleted. Also, if you have already shared it with a class, your students will not be able to access it anymore.";
            if (e.get("isStudent"))
              return "Are you sure you want to delete this story? You can no longer retrieve your work once it is deleted.";
            throw new Error(
              "User is neither a student, a teacher, a publisher nor an editor."
            );
          }
          throw new Error(
            "User has to be logged in to be able to delete a story."
          );
        }
      ),
      showPrintStoryButton: t.default.computed.and(
        "isNotEmbedded",
        "session.isLoggedIn"
      ),
      printTooltip: t.default.computed(
        "currentUser.{isStudent,canPrint,isUnassigned}",
        function () {
          var e = this.get("currentUser");
          return e.get("isPersonal")
            ? "This feature is not available for Personal users. Feel free to contact " +
                l.default.EMAIL_INFO +
                " if you want to print a story."
            : e.get("isStudent") && !e.get("canPrint")
            ? "Your teacher must upgrade to print the story."
            : e.get("isUnassigned")
            ? "You must upgrade to print the story."
            : null;
        }
      ),
      printButtonDisabled: t.default.computed.not("printButtonEnabled"),
      printButtonEnabled: t.default.computed(
        "currentUser",
        "currentUser.isTeacher",
        "currentUser.canPrint",
        function () {
          var e = this.get("currentUser");
          return (
            !t.default.isNone(e) && (!!e.get("isTeacher") || e.get("canPrint"))
          );
        }
      ),
      showCopyStoryButton: t.default.computed(
        "currentUser.{isEditor,isPublisher,isPersonal,isTeacher,isStudent}",
        "isFullyAvailable",
        "myStudentIsOwner",
        "isContributor",
        "story.{isSutoriStory,isApproved}",
        "isSharedWithContextSchoolClass",
        "isEmbedded",
        function () {
          if (this.get("isEmbedded")) return !1;
          var e = this.get("currentUser");
          return (
            !t.default.isNone(e) &&
            (e.get("isPersonal")
              ? !!this.get("isNotFullyAvailable") ||
                this.get("isContributor") ||
                this.get("story.isApproved")
              : e.get("isTeacher")
              ? !!this.get("story.isSutoriStory") ||
                (this.get("isFullyAvailable") &&
                  (this.get("isContributor") ||
                    this.get("myStudentIsOwner") ||
                    this.get("story.isApproved")))
              : e.get("isStudent")
              ? this.get("isContributor") ||
                this.get("isSharedWithContextSchoolClass")
              : e.get("isEditor")
              ? this.get("story.isSutoriStory")
              : !!e.get("isPublisher") || void 0)
          );
        }
      ),
      copyTooltip: t.default.computed(
        "currentUser.{isPersonal,isUnassigned}",
        "copyButtonDisabled",
        function () {
          var e = this.get("currentUser");
          return t.default.isNone(e)
            ? null
            : e.get("isPersonal") && this.get("copyButtonDisabled")
            ? "Copying this story is not available to Personal users. Please reach us at " +
              l.default.EMAIL_INFO +
              " if you want to copy this story."
            : e.get("isUnassigned")
            ? "You must upgrade to copy the story."
            : null;
        }
      ),
      copyButtonEnabled: t.default.computed(
        "showCopyStoryButton",
        "currentUser.isPersonal",
        "isFullyAvailable",
        "story.approvedAt",
        function () {
          return this.get("currentUser.isPersonal")
            ? this.get("isFullyAvailable") ||
                this.get("isContributor") ||
                this.get("story.approvedAt")
            : this.get("showCopyStoryButton");
        }
      ),
      copyButtonDisabled: t.default.computed.not("copyButtonEnabled"),
      schoolClassesSharedWith: t.default.computed.mapBy(
        "story.storyShares",
        "schoolClass"
      ),
      isSharedWithContextSchoolClass: t.default.computed(
        "story",
        "schoolClassesSharedWith.[]",
        "schoolClassContext",
        function () {
          return this.get("story").isSharedWithTheWholeClass(
            this.get("schoolClassContext")
          );
        }
      ),
      callToActionForGuestsTargetRoute: t.default.computed(
        "story.isSutoriStory",
        function () {
          return this.get("story.isSutoriStory")
            ? "teacherRegistration"
            : "registration";
        }
      ),
      deleteStoryTask: (0, i.task)(
        regeneratorRuntime.mark(function e() {
          var n, s, o, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get("story")),
                      (s = this.get("schoolClassContext")),
                      (o = n.get("storyUnit")),
                      (e.next = 5),
                      n.destroyRecord()
                    );
                  case 5:
                    if (
                      (this.get("analytics").trackStoryEvent(
                        "Story Deletion",
                        n
                      ),
                      this.get("notifications").showSuccessMessage(
                        "The story has been deleted."
                      ),
                      this.get("storyCollaboration").deleteStory(n),
                      (a = this.get("currentUser")),
                      !a.get("isEditor"))
                    ) {
                      e.next = 13;
                      break;
                    }
                    this.sendAction("transitionToRoute", "storyUnit", o),
                      (e.next = 30);
                    break;
                  case 13:
                    if (!a.get("isPersonal")) {
                      e.next = 17;
                      break;
                    }
                    this.sendAction("transitionToRoute", "dashboard"),
                      (e.next = 30);
                    break;
                  case 17:
                    if (!a.get("isTeacher")) {
                      e.next = 21;
                      break;
                    }
                    this.sendAction("transitionToRoute", "dashboard"),
                      (e.next = 30);
                    break;
                  case 21:
                    if (!a.get("isStudent")) {
                      e.next = 25;
                      break;
                    }
                    t.default.isPresent(s)
                      ? this.sendAction("transitionToRoute", "schoolClass", s)
                      : this.sendAction("transitionToRoute", "dashboard"),
                      (e.next = 30);
                    break;
                  case 25:
                    if (!a.get("isPublisher")) {
                      e.next = 29;
                      break;
                    }
                    this.sendAction("transitionToRoute", "dashboard"),
                      (e.next = 30);
                    break;
                  case 29:
                    throw new Error(
                      "A user of type '" +
                        a.get("type") +
                        "' can not delete a story."
                    );
                  case 30:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      copyStoryTask: (0, i.task)(
        regeneratorRuntime.mark(function e() {
          var t, s, o;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((t = this.get("story")),
                      !(
                        this.get("currentUser.isTeacher") &&
                        t.get("isSutoriStory") &&
                        this.get("isNotFullyAvailable")
                      ))
                    ) {
                      e.next = 5;
                      break;
                    }
                    this.sendAction("transitionToRoute", "upgrade", {
                      queryParams: {
                        origin: n.default.ORIGIN_COPY_PREMIUM_SUTORI_STORY,
                      },
                    }),
                      (e.next = 11);
                    break;
                  case 5:
                    return (
                      (s = this.get("commandFactory").createCommand(
                        "copy-story"
                      )),
                      (e.next = 8),
                      s.execute(t)
                    );
                  case 8:
                    (o = e.sent),
                      this.get("notifications").showSuccessMessage(
                        "The story has been copied."
                      ),
                      this.sendAction("transitionToRoute", "story", o);
                  case 11:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      printStoryTask: (0, i.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), this.get("printStory")();
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      _executeCommandWithModel: function (e, n) {
        var s = this,
          o =
            !(arguments.length <= 2 || void 0 === arguments[2]) && arguments[2],
          a = t.default.getOwner(this).lookup("command:" + e),
          i = o ? this.get("story") : [this.get("story")];
        return (
          this.set(n, !0),
          a.execute(i).finally(function () {
            s.set(n, !1);
          })
        );
      },
      _toggleSecondaryAction: function () {
        if (this.get("showViewOnSutoriButton") && this.$()) {
          var e = this.$(".button-view-on-sutori-primary").is(":visible");
          this.set("viewOnSutoriSecondaryActionVisible", !e);
        }
      },
      actions: {
        publishStory: function () {
          var e = this;
          if (this.get("storyIsValid")) {
            var t = this.get("currentUser");
            t.get("isEditor")
              ? this._executeCommandWithModel(
                  "finish-story",
                  "waitingForStoryPublished",
                  !0
                ).then(function () {
                  e
                    .get("notifications")
                    .showSuccessMessage(
                      "The story has been successfully published."
                    ),
                    e.sendAction("deactivateValidationErrors");
                })
              : t.get("isPublisher") &&
                this._executeCommandWithModel(
                  "approve-stories",
                  "waitingForStoryPublished"
                ).then(function () {
                  e
                    .get("notifications")
                    .showSuccessMessage(
                      "This story has been made public. It is now available to all Sutori users."
                    ),
                    e.sendAction("deactivateValidationErrors");
                });
          } else this.sendAction("activateValidationErrors");
        },
        unpublishStory: function () {
          var e = this;
          this._executeCommandWithModel(
            "reject-stories",
            "waitingForStoryUnpublished"
          ).then(function () {
            e.get("notifications").showSuccessMessage(
              "This story is no longer public."
            );
          });
        },
        viewLessonPlan: function () {
          this.set("lessonPlanModalVisible", !0);
        },
        showSubmitStoryModal: function () {
          this.get("storyIsValid")
            ? (this.sendAction("deactivateValidationErrors"),
              this.set("submitStoryModalVisible", !0))
            : this.sendAction("activateValidationErrors");
        },
        showShareStoryModal: function () {
          this.get("isOwner")
            ? this.get("storyIsValid")
              ? (this.sendAction("deactivateValidationErrors"),
                this.set("shareStoryModalVisible", !0))
              : this.sendAction("activateValidationErrors")
            : this.set("shareStoryModalVisible", !0);
        },
        showCollaborateModal: function () {
          this.set("collaborateModalVisible", !0);
        },
        collaboratorsModified: function () {
          this.sendAction("collaboratorsModified");
        },
        transitionToStory: function (e) {
          this.sendAction("transitionToRoute", "story", e);
        },
        viewOnSutoriButtonClicked: function (e) {
          this.get("analytics").trackCallToActionEvent(
            "Story embed - View on Sutori (" + e + ")"
          );
        },
      },
    });
  }),
  define("frontend/components/story-toolbar/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "gNqZ/IIm",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","container-story-toolbar"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showCollaborators"]]],null,22],["text","\\n"],["block",["if"],[["get",["showCallToActionForGuests"]]],null,21],["text","\\n"],["block",["if"],[["get",["showShareButton"]]],null,19],["text","\\n"],["block",["if"],[["get",["showViewOnSutoriButton"]]],null,18],["text","\\n"],["block",["if"],[["get",["showShareWithClassesButton"]]],null,16],["text","\\n"],["block",["if"],[["get",["showSubmitButton"]]],null,15],["text","\\n"],["block",["if"],[["get",["canPublishStory"]]],null,14],["text","\\n"],["block",["if"],[["get",["canUnpublishStory"]]],null,13],["text","\\n"],["block",["if"],[["get",["showCollaborateButton"]]],null,12],["text","\\n"],["block",["if"],[["get",["showSecondaryActionsButton"]]],null,11],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showViewLessonPlanButton"]]],null,3],["text","\\n"],["block",["if"],[["get",["showCollaborateButton"]]],null,2],["text","\\n"],["block",["if"],[["get",["showSubmitButton"]]],null,1],["text","\\n"],["block",["if"],[["get",["showShareButton"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["modal-box"],null,[["formComponentPath","title","model","isActive"],["modals/share-story","Share",["get",["story"]],["get",["shareStoryModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["modal-box"],null,[["formComponentPath","title","model","isActive"],["modals/submit-story","Submit",["get",["story"]],["get",["submitStoryModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["modal-box"],null,[["action","formComponentPath","title","model","isActive"],[["helper",["action"],[["get",[null]],"collaboratorsModified"],null],"modals/collaborate-on-story","Collaborate",["get",["story"]],["get",["collaborateModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["modal-box"],null,[["formComponentPath","title","model","isActive"],["modals/lesson-plan",["get",["story","title"]],["get",["story","lessonPlan"]],["get",["lessonPlanModalVisible"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["text","\\n            "],["open-element","button",[]],["static-attr","class","button-view-lesson-plan"],["modifier",["action"],[["get",[null]],"viewLessonPlan"]],["flush-element"],["text","View lesson plan"],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["text","\\n            "],["append",["helper",["async-button-with-confirmation"],null,[["action","name","label","loadingLabel","question","popoverPosition","loading"],[["helper",["perform"],[["get",["deleteStoryTask"]]],null],"delete-story","Delete the story","Deleting the storyâ¦",["get",["deletionConfirmationQuestion"]],"top",["get",["deleteStoryTask","isRunning"]]]]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["text","\\n            "],["append",["helper",["async-button-with-tooltip"],null,[["action","name","label","loadingLabel","loading","tooltip","disabled"],[["helper",["perform"],[["get",["copyStoryTask"]]],null],"copy-story","Copy the story","Copying the storyâ¦",["get",["copyStoryTask","isRunning"]],["get",["copyTooltip"]],["get",["copyButtonDisabled"]]]]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["text","\\n            "],["append",["helper",["async-button-with-tooltip"],null,[["action","name","label","loadingLabel","loading","tooltip","disabled"],[["helper",["perform"],[["get",["printStoryTask"]]],null],"print-story","Print the story","Preparing the printâ¦",["get",["printStoryTask","isRunning"]],["get",["printTooltip"]],["get",["printButtonDisabled"]]]]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","              View on sutori.com\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","li",[]],["flush-element"],["text","\\n"],["block",["link-to"],["story",["get",["story"]]],[["class","target","invokeAction"],["button-view-on-sutori-secondary","_blank",["helper",["action"],[["get",[null]],"viewOnSutoriButtonClicked","secondary"],null]]],8],["text","          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["showViewOnSutoriButton"]]],null,9],["text","\\n"],["block",["if"],[["get",["showPrintStoryButton"]]],null,7],["text","\\n"],["block",["if"],[["get",["showCopyStoryButton"]]],null,6],["text","\\n"],["block",["if"],[["get",["showDeleteStoryButton"]]],null,5],["text","\\n"],["block",["if"],[["get",["showViewLessonPlanButton"]]],null,4],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["dropdown-menu"],null,[["title","class"],["...","secondary-actions"]],10]],"locals":[]},{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","button-collaborate"],["modifier",["action"],[["get",[null]],"showCollaborateModal"]],["flush-element"],["text","Collaborate"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"unpublishStory"],null],"unpublish-story","Unpublish story",["get",["waitingForStoryUnpublished"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"publishStory"],null],"publish-story","Publish story",["get",["waitingForStoryPublished"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","button-submit-story"],["modifier",["action"],[["get",[null]],"showSubmitStoryModal"]],["flush-element"],["text","Submit"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["button-share-story-with-classes"],null,[["transitionToStory","story"],[["helper",["action"],[["get",[null]],"transitionToStory"],null],["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      View on sutori.com\\n"]],"locals":[]},{"statements":[["block",["link-to"],["story",["get",["story"]]],[["class","target","invokeAction"],["button-view-on-sutori-primary","_blank",["helper",["action"],[["get",[null]],"viewOnSutoriButtonClicked","primary"],null]]],17]],"locals":[]},{"statements":[["text","    "],["open-element","button",[]],["static-attr","class","button-share-story"],["modifier",["action"],[["get",[null]],"showShareStoryModal"]],["flush-element"],["text","Share"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      Create my own story\\n"]],"locals":[]},{"statements":[["block",["call-to-action-sign-up"],null,[["route","class"],[["get",["callToActionForGuestsTargetRoute"]],"call-to-action-registration"]],20]],"locals":[]},{"statements":[["text","    "],["append",["helper",["story-toolbar-authors"],null,[["story","showCollaborateModal"],[["get",["story"]],["helper",["action"],[["get",[null]],"showCollaborateModal"],null]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-toolbar/template.hbs" },
    });
  }),
  define("frontend/components/story-unit-box-header/component", [
    "exports",
    "ember",
    "frontend/mixins/component-with-required-input",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["story-unit-box-header"],
      classNameBindings: ["storyUnit.isDraft:draft"],
      tagName: "header",
      session: t.default.inject.service(),
      isEditing: !1,
      requiredInput: ["storyUnit"],
      showPremiumTag: t.default.computed(
        "session.currentUser.hasOngoingSubscription",
        "storyUnit.isFree",
        function () {
          return (
            !this.get("session.currentUser.hasOngoingSubscription") &&
            !this.get("storyUnit.isFree")
          );
        }
      ),
      minimumAgeCSSClass: t.default.computed(
        "storyUnit.minimumAge",
        function () {
          var e = this.get("storyUnit.minimumAge");
          return t.default.isNone(e)
            ? "teacher"
            : e <= 10
            ? "elementary"
            : e <= 13
            ? "middle"
            : "high";
        }
      ),
    });
  }),
  define("frontend/components/story-unit-box-header/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "bRmz0NBo",
      block:
        '{"statements":[["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","\\n"],["block",["link-to"],["storyUnit.index",["get",["storyUnit"]]],null,7],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["storyUnit","isDraft"]]],null,6],["block",["if"],[["get",["showPremiumTag"]]],null,5],["open-element","span",[]],["static-attr","class","white-space"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["dynamic-attr","class",["concat",["age-and-category ",["unknown",["minimumAgeCSSClass"]]]]],["flush-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","age"],["flush-element"],["text","\\n"],["block",["if"],[["get",["storyUnit","hasMinimumAge"]]],null,1,0],["text","  "],["close-element"],["text","\\n  "],["open-element","span",[]],["static-attr","class","category"],["flush-element"],["append",["unknown",["storyUnit","category"]],false],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      All ages\\n"]],"locals":[]},{"statements":[["text","      Age "],["append",["unknown",["storyUnit","minimumAge"]],false],["text","+\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","premium"],["flush-element"],["text","Premium"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","Premium"]],"locals":[]},{"statements":[["text","    "],["block",["link-to"],["upgrade",["helper",["query-params"],null,[["origin"],["story-unit-header"]]]],[["class"],["premium"]],3],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","currentUser","canSubscribe"]]],null,4,2]],"locals":[]},{"statements":[["text","  "],["open-element","span",[]],["static-attr","class","draft"],["flush-element"],["text","Draft"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["isEditing","model","errors","text","placeholder"],[["get",["isEditing"]],["get",["storyUnit"]],["get",["storyUnit","errors","title"]],["get",["storyUnit","title"]],"Title of the unit..."]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/story-unit-box-header/template.hbs",
      },
    });
  }),
  define("frontend/components/story-unit-box/component", [
    "exports",
    "ember",
    "npm:lodash.shuffle",
  ], function (e, t, n) {
    e.default = t.default.Component.extend({
      classNames: ["story-unit-box"],
      session: t.default.inject.service(),
      isEditor: t.default.computed.reads("session.currentUser.isEditor"),
      twoRandomStories: t.default.computed("storyUnit.stories.[]", function () {
        return (0, n.default)(this.get("storyUnit.stories").toArray())
          .objectsAt([0, 1])
          .compact();
      }),
    });
  }),
  define("frontend/components/story-unit-box/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "HeHCZWJr",
      block:
        '{"statements":[["append",["helper",["story-unit-box-header"],null,[["storyUnit"],[["get",["storyUnit"]]]]],false],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","body"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","info"],["flush-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","description"],["flush-element"],["text","\\n      "],["append",["helper",["editable-text"],null,[["model","errors","text","placeholder","isEditing"],[["get",["storyUnit"]],["get",["storyUnit","errors","description"]],["get",["storyUnit","description"]],"Add a description for the unit",["get",["isEditor"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["block",["link-to"],["storyUnit.index",["get",["storyUnit"]]],[["class"],["button-view-unit"]],1],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","ul",[]],["static-attr","class","stories"],["flush-element"],["text","\\n"],["block",["each"],[["get",["twoRandomStories"]]],null,0],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","li",[]],["flush-element"],["text","\\n        "],["append",["helper",["story-box"],null,[["story","session"],[["get",["story"]],["get",["session"]]]]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":["story"]},{"statements":[["text","View unit"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/story-unit-box/template.hbs" },
    });
  }),
  define("frontend/components/subscription-plan/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["subscription-plan"],
      classNameBindings: [
        "isCurrentPlan",
        "isSelected",
        "isSelectable",
        "showAsLink",
      ],
      session: t.default.inject.service(),
      showAsLink: !1,
      isCurrentPlan: !1,
      isSelectable: !1,
      isSelected: !1,
      buttonLabel: null,
      click: function () {
        this.get("isSelectable") && this.sendAction("select", this.get("plan"));
      },
      linkTarget: t.default.computed(
        "session.currentUser.canSubscribe",
        function () {
          return this.get("session.currentUser.canSubscribe")
            ? "upgrade"
            : "registration";
        }
      ),
      showSelectPlanButton: t.default.computed.or(
        "isSelectable",
        "isCurrentPlan"
      ),
      isNotSelectable: t.default.computed.not("isSelectable"),
      showFooter: t.default.computed.or(
        "isCurrentPlan",
        "isSelectable",
        "session.isGuestUser"
      ),
    });
  }),
  define("frontend/components/subscription-plan/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "22+71OAK",
      block:
        '{"statements":[["block",["if"],[["get",["showAsLink"]]],null,2,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","subscription-plan__link"],["flush-element"],["text","\\n    "],["partial","subscription-plan/body"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["partial","subscription-plan/body"],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],[["get",["linkTarget"]]],[["class"],["subscription-plan__link"]],1]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/components/subscription-plan/template.hbs",
      },
    });
  }),
  define("frontend/components/subscription-plans/component", [
    "exports",
    "ember",
    "frontend/models/premium-subscription",
  ], function (e, t, n) {
    var s = Array.prototype.slice;
    e.default = t.default.Component.extend({
      classNames: ["subscription-plans"],
      session: t.default.inject.service(),
      showFreePlan: !1,
      showPlansAsLink: !1,
      freePlan: t.default
        .computed(function () {
          return n.default.FREE_PLAN;
        })
        .readOnly(),
      premiumPlan: t.default
        .computed(function () {
          return n.default.V3_PREMIUM_49_PLAN;
        })
        .readOnly(),
      unlimitedPlan: t.default
        .computed(function () {
          return n.default.V3_UNLIMITED_99_PLAN;
        })
        .readOnly(),
      currentUser: t.default.computed.reads("session.currentUser"),
      unlimitedPlanButtonLabel: t.default.computed(
        "currentUser.isPremium",
        function () {
          var e = this.get("currentUser.isPremium");
          return e ? "Upgrade to Unlimited" : "Go Unlimited";
        }
      ),
      showPremiumPlan: t.default.computed.not(
        "session.currentUser.isUnlimited"
      ),
      actions: {
        selectPlan: function () {
          this.sendAction.apply(this, ["selectPlan"].concat(s.call(arguments)));
        },
      },
    });
  }),
  define("frontend/components/subscription-plans/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "XJFOlbmx",
      block:
        '{"statements":[["block",["if"],[["get",["showFreePlan"]]],null,5],["text","\\n"],["block",["if"],[["get",["showPremiumPlan"]]],null,3],["text","\\n"],["block",["subscription-plan"],null,[["select","plan","showAsLink","isCurrentPlan","isSelectable","isSelected","buttonLabel","class"],[["helper",["action"],[["get",[null]],"selectPlan"],null],["get",["unlimitedPlan"]],["get",["showPlansAsLink"]],["get",["currentUser","isUnlimited"]],["get",["currentUser","canBecomeUnlimited"]],["helper",["eq"],[["get",["selectedPlan"]],["get",["unlimitedPlan"]]],null],["get",["unlimitedPlanButtonLabel"]],"unlimited"]],1],["text","\\n"],["block",["if"],[["get",["isUpgradingStripeSubscription"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","prorated-price-explanation"],["flush-element"],["text","This amount is calculated depending on the remaining days of your "],["append",["unknown",["currentUser","premiumSubscription","label"]],false],["text"," subscription."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","li",[]],["flush-element"],["text","Unlimited teacher stories"],["close-element"],["text","\\n  "],["open-element","li",[]],["flush-element"],["text","Unlimited student stories"],["close-element"],["text","\\n  "],["open-element","li",[]],["flush-element"],["text","Upload your own videos"],["close-element"],["text","\\n  "],["open-element","li",[]],["flush-element"],["text","Save stories offline (pdf)"],["close-element"],["text","\\n  "],["open-element","li",[]],["flush-element"],["text","Collaborative group projects"],["close-element"],["text","\\n  "],["open-element","li",[]],["flush-element"],["text","Collaborative class stories"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["flush-element"],["text","Unlimited teacher stories"],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Unlimited student stories"],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Add YouTube videos"],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Save stories offline (pdf)"],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Collaborate in pairs"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["subscription-plan"],null,[["select","plan","showAsLink","isCurrentPlan","isSelectable","isSelected","buttonLabel","class"],[["helper",["action"],[["get",[null]],"selectPlan"],null],["get",["premiumPlan"]],["get",["showPlansAsLink"]],["get",["currentUser","isPremium"]],["get",["currentUser","canBecomePremium"]],["helper",["eq"],[["get",["selectedPlan"]],["get",["premiumPlan"]]],null],"Go Premium","premium"]],2]],"locals":[]},{"statements":[["text","    "],["open-element","li",[]],["flush-element"],["text","Create and share stories"],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Limit of 200 student stories"],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Add YouTube videos"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["subscription-plan"],null,[["select","plan","showAsLink","class"],[["helper",["action"],[["get",[null]],"selectPlan"],null],["get",["freePlan"]],["get",["showPlansAsLink"]],"free primary"]],4]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/subscription-plans/template.hbs",
      },
    });
  }),
  define("frontend/components/success-notification/component", [
    "exports",
    "ember",
    "ember-component-inbound-actions/inbound-actions",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["success-notification"],
      classNameBindings: ["isActive", "isActivating", "isDeactivating"],
      environment: t.default.inject.service(),
      displayTime: t.default
        .computed(function () {
          return 1e4;
        })
        .readOnly(),
      transitionTime: t.default
        .computed(function () {
          return 300;
        })
        .readOnly(),
      isActive: !1,
      isActivating: !1,
      isDeactivating: !1,
      click: function () {
        this.send("hide");
      },
      actions: {
        showMessage: function (e) {
          var n = this;
          this.setProperties({ isActivating: !0, message: e }),
            t.default.run.later(function () {
              if (
                (n.setProperties({ isActive: !0, isActivating: !1 }),
                !n.get("environment.isTest"))
              ) {
                var e = t.default.run.later(function () {
                  n.send("hide");
                }, n.get("displayTime"));
                n.set("hideAfterDelayAction", e);
              }
            }, this.get("transitionTime"));
        },
        hide: function () {
          var e = this;
          t.default.run.cancel(this.get("hideAfterDelayAction")),
            this.set("isDeactivating", !0),
            t.default.run.later(function () {
              e.setProperties({ isActive: !1, isDeactivating: !1 });
            }, this.get("transitionTime"));
        },
      },
    });
  }),
  define("frontend/components/success-notification/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "pjPxg/DO",
      block:
        '{"statements":[["open-element","p",[]],["static-attr","class","message"],["flush-element"],["append",["unknown",["message"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/success-notification/template.hbs",
      },
    });
  }),
  define("frontend/components/sutori-subscription-box/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["sutori-subscription-box"],
      tagName: "section",
      session: t.default.inject.service(),
      currentUser: t.default.computed.reads("session.currentUser"),
      showMoreInfoButton: t.default.computed(
        "currentUser.{canSubscribe,hasOngoingSubscription}",
        function () {
          return (
            this.get("currentUser.canSubscribe") &&
            !this.get("currentUser.hasOngoingSubscription")
          );
        }
      ),
    });
  }),
  define("frontend/components/sutori-subscription-box/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "jW0/iKxn",
      block:
        '{"statements":[["open-element","header",[]],["static-attr","class","header"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","title"],["flush-element"],["text","\\n    Current plan:\\n"],["block",["if"],[["get",["currentUser","hasOngoingSubscription"]]],null,8,7],["text","  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showMoreInfoButton"]]],null,6],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["currentUser","hasOngoingSubscription"]]],null,4,1]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","    Upgrade now\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["yield","default"],["close-element"],["text","\\n"],["block",["call-to-action-upgrade"],null,[["origin"],["sutori-subscription-box"]],0]],"locals":[]},{"statements":[["text","      Upgrade to Unlimited\\n"]],"locals":[]},{"statements":[["block",["call-to-action-upgrade"],null,[["origin"],["sutori-subscription-box-to-unlimited"]],2]],"locals":[]},{"statements":[["text","  "],["open-element","h4",[]],["static-attr","class","premium-member"],["flush-element"],["text","\\n    You are "],["append",["helper",["indefinitize"],[["get",["currentUser","premiumSubscription","label"]]],null],false],["text"," member\\n  "],["close-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","last-charge"],["flush-element"],["text","\\n    "],["open-element","strong",[]],["flush-element"],["text","Your last charge:"],["close-element"],["text","\\n    "],["append",["helper",["format-date"],[["get",["currentUser","premiumSubscription","lastChargedAt"]]],null],false],["text","\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["currentUser","canBecomeUnlimited"]]],null,3]],"locals":[]},{"statements":[["text","More info"]],"locals":[]},{"statements":[["text","    "],["block",["link-to"],["upgrade",["helper",["query-params"],null,[["origin"],["sutori-subscription-box"]]]],[["class"],["button-more-info"]],5],["text","\\n"]],"locals":[]},{"statements":[["text","      Basic\\n"]],"locals":[]},{"statements":[["text","      "],["append",["unknown",["currentUser","premiumSubscription","label"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/components/sutori-subscription-box/template.hbs",
      },
    });
  }),
  define("frontend/components/tab-selector/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "ember-responds-to/mixins/responds-to-resize",
    "ember-concurrency",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend(n.default, s.default, {
      classNames: ["tab-selector"],
      classNameBindings: ["compactMode"],
      activeTabIndex: 0,
      templateSwitchingDelayInMs: 0,
      compactMode: !1,
      routingProxy: t.default.inject.service(),
      didInsertElement: function () {
        var e = this;
        this._super(),
          this.makeFastclickable(this.$(".clickable")),
          this._updateActiveTabIndexFromRouteName(),
          this._delayedUpdateActiveTemplatePath(),
          this._tabChanged(),
          t.default.run.next(function () {
            e._updateCompactModeAndCss();
          });
      },
      _updateCompactModeAndCss: t.default.on("resize", function () {
        var e = this.$().outerWidth() < this.$(".tabs").outerWidth();
        this.set("compactMode", e), this._updateCss();
      }),
      tabsCount: t.default.computed.reads("tabs.length"),
      tabsRoutesNames: t.default.computed.mapBy("tabs", "routeName"),
      activeRoutesNames: t.default.computed.reads(
        "routingProxy.activeRoutesNames"
      ),
      activeTemplatePath: t.default.computed.reads("activeTab.templatePath"),
      activeTab: t.default.computed("tabs.[]", "activeTabIndex", function () {
        return this.get("tabs")[this.get("activeTabIndex")];
      }),
      delayedSwitchActiveTemplatePathTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      (0, o.timeout)(this.get("templateSwitchingDelayInMs"))
                    );
                  case 2:
                    this.set(
                      "activeTemplatePath",
                      this.get("activeTab.templatePath")
                    );
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _tabChanged: t.default.observer("activeTab", function () {
        var e = this;
        t.default.run.next(function () {
          t.default.run.scheduleOnce("afterRender", function () {
            var t = e.get("activeTab.className");
            e.$(".tab .link").removeClass("active"),
              e.$(".tab." + t + " .link").addClass("active"),
              e._updateCss(),
              e.sendAction("activeTabChanged", e.get("activeTab"));
          });
        });
      }),
      _delayedUpdateActiveTemplatePath: t.default.observer(
        "activeTab",
        function () {
          this.get("templateSwitchingDelayInMs") > 0 &&
            (this.set("activeTemplatePath", this.get("activeTemplatePath")),
            this.get("delayedSwitchActiveTemplatePathTask").perform());
        }
      ),
      _updateActiveTabIndexFromRouteName: t.default.observer(
        "tabsRoutesNames.[]",
        "activeRoutesNames.[]",
        function () {
          var e = this.get("activeRoutesNames") || [],
            t = this.get("tabsRoutesNames") || [],
            n = t.find(function (t) {
              return e.includes(t);
            }),
            s = t.indexOf(n);
          s !== -1 && this.set("activeTabIndex", s);
        }
      ),
      _updateCss: function () {
        var e = this,
          n = this.$(".tab .active").parent();
        if (0 !== n.length)
          if (this.get("compactMode")) {
            var s = 0;
            this.$(".tabs li").each(function () {
              var e = $(this);
              e.offset().left < n.offset().left && (s += e.outerWidth());
            }),
              this.$(".tabs").css("transform", "translateX(-" + s + "px)");
          } else
            t.default.run.schedule("afterRender", function () {
              var t = n.offset().left - e.$().offset().left,
                s = n.outerWidth();
              e.$(".underline").css({
                "margin-left": t + "px",
                width: s + "px",
              });
            }),
              this.$(".tabs").css("transform", "translateX(0)");
      },
      actions: {
        changeTab: function (e) {
          this.set("activeTabIndex", e);
        },
        nextTab: function () {
          var e = (this.get("activeTabIndex") + 1) % this.get("tabsCount");
          this.set("activeTabIndex", e);
        },
      },
    });
  }),
  define("frontend/components/tab-selector/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "+K4+BGxq",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","tabs-wrapper"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","tabs"],["flush-element"],["text","\\n"],["block",["each"],[["get",["tabs"]]],null,3],["text","  "],["close-element"],["text","\\n  "],["open-element","button",[]],["static-attr","class","next-tab"],["modifier",["action"],[["get",[null]],"nextTab"]],["flush-element"],["text","Â»"],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","underline"],["flush-element"],["close-element"],["text","\\n\\n"],["yield","default",[["helper",["hash"],null,[["activeTab","activeTemplatePath"],[["get",["activeTab"]],["get",["activeTemplatePath"]]]]]]],["text","\\n"]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","          "],["open-element","span",[]],["static-attr","class","clickable link"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"changeTab",["get",["index"]]]],["flush-element"],["text","\\n            "],["append",["unknown",["tab","text"]],false],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","span",[]],["static-attr","class","clickable"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"changeTab",["get",["index"]]]],["flush-element"],["text","\\n              "],["append",["unknown",["tab","text"]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],[["get",["tab","routeName"]],["helper",["query-params"],null,[["preserveScrollPosition"],[true]]]],[["class"],["clickable link"]],1]],"locals":[]},{"statements":[["text","      "],["open-element","li",[]],["dynamic-attr","class",["concat",["tab ",["unknown",["tab","className"]]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["tab","hasRouteSpecified"]]],null,2,0],["text","      "],["close-element"],["text","\\n"]],"locals":["tab","index"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/tab-selector/template.hbs" },
    });
  }),
  define("frontend/components/team-member/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({ classNames: ["team-member"] });
  }),
  define("frontend/components/team-member/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "lYQ9cm/K",
      block:
        '{"statements":[["open-element","figure",[]],["static-attr","class","team-member-figure"],["flush-element"],["text","\\n  "],["open-element","img",[]],["static-attr","class","team-member__image"],["dynamic-attr","src",["unknown",["teamMember","profilePictureUrl"]],null],["dynamic-attr","alt",["unknown",["teamMember","name"]],null],["flush-element"],["close-element"],["text","\\n  "],["open-element","figcaption",[]],["flush-element"],["text","\\n    "],["open-element","h4",[]],["static-attr","class","team-member__name"],["flush-element"],["append",["unknown",["teamMember","name"]],false],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","team-member__role"],["flush-element"],["append",["unknown",["teamMember","position"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","p",[]],["static-attr","class","team-member__description"],["flush-element"],["append",["unknown",["teamMember","description"]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/team-member/template.hbs" },
    });
  }),
  define("frontend/components/time-tag/component", [
    "exports",
    "ember",
    "npm:moment",
    "frontend/utils/date-utils",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend({
      tagName: "time",
      attributeBindings: ["datetime", "title"],
      datetime: t.default.computed("time", function () {
        return (0, n.default)(this.get("time")).toISOString();
      }),
      title: t.default.computed("time", function () {
        return s.default.formatDate(this.get("time"));
      }),
    });
  }),
  define("frontend/components/time-tag/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "mAQccoPt",
      block:
        '{"statements":[["append",["unknown",["label"]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/time-tag/template.hbs" },
    });
  }),
  define("frontend/components/toggle-box/component", [
    "exports",
    "ember",
    "frontend/mixins/fastclickable",
    "ember-concurrency",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["toggle-box"],
      classNameBindings: ["activated"],
      initiallyActivated: !1,
      label: "",
      tooltip: void 0,
      activated: t.default.computed.reads("initiallyActivated"),
      hasTooltip: t.default.computed.notEmpty("tooltip"),
      didInsertElement: function () {
        this.makeFastclickable(this.$(".toggle"));
      },
      toggleTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      this.set("disabled", !0),
                      this.toggleProperty("activated"),
                      (e.next = 4),
                      this.get("action")()
                    );
                  case 4:
                    this.set("disabled", !1);
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      actions: {
        toggle: function () {
          this.get("disabled") || this.get("toggleTask").perform();
        },
      },
    });
  }),
  define("frontend/components/toggle-box/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ZrOZvU34",
      block:
        '{"statements":[["open-element","label",[]],["flush-element"],["text","\\n  "],["append",["unknown",["label"]],false],["text","\\n"],["block",["if"],[["get",["hasTooltip"]]],null,0],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","tabindex","0"],["dynamic-attr","class",["concat",["toggle ",["unknown",["class"]]," ",["helper",["if"],[["get",["activated"]],"activated"],null]]]],["modifier",["action"],[["get",[null]],"toggle"]],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["info-tooltip"],null,[["text","placement"],[["get",["tooltip"]],"top"]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/toggle-box/template.hbs" },
    });
  }),
  define("frontend/components/torii-iframe-placeholder", [
    "exports",
    "torii/components/torii-iframe-placeholder",
  ], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/components/usage-display/component", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/api-paths",
  ], function (e, t, n, s) {
    e.default = t.default.Component.extend({
      classNames: ["usage-display"],
      ajax: t.default.inject.service(),
      init: function () {
        this._super.apply(this, arguments), this.get("loadUsageTask").perform();
      },
      hasLoadedNumberOfTeachersAndStudents: t.default.computed.notEmpty(
        "numberOfTeachersAndStudents"
      ),
      loadUsageTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      this.get("ajax").request(s.default.users_count_path(), {
                        data: {
                          filter: { role_types: ["teacher", "student"] },
                        },
                      })
                    );
                  case 2:
                    (t = e.sent),
                      this.set("numberOfTeachersAndStudents", t.total);
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
    });
  }),
  define("frontend/components/usage-display/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "ObuaRm3S",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","usage-display-background"],["flush-element"],["text","\\n  "],["partial","education/background-circles"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasLoadedNumberOfTeachersAndStudents"]]],null,1,0],["text","  teachers and students are using Sutori\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Many\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","span",[]],["static-attr","class","usage-display__highlight"],["flush-element"],["append",["helper",["format-number"],[["get",["numberOfTeachersAndStudents"]],"0,0"],null],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/components/usage-display/template.hbs" },
    });
  }),
  define("frontend/components/user-avatar/component", [
    "exports",
    "ember",
    "frontend/mixins/tooltipable",
  ], function (e, t, n) {
    e.default = t.default.Component.extend(n.default, {
      classNames: ["user-avatar"],
      attributeBindings: [
        "user.id:data-user-id",
        "tooltipText:data-title",
        "tooltipPlacement:data-placement",
      ],
      requiredInput: ["user"],
      showOrganization: !1,
      tooltipPlacement: "right",
      showTooltip: !1,
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.get("showTooltip") && this.makeTooltipable(this.$());
      },
      organization: t.default.computed.reads("user.organization"),
      showSutoriLogo: t.default.computed.and(
        "user.isEditor",
        "showOrganization"
      ),
      showThirdPartyLogo: t.default.computed.and(
        "user.isPublisher",
        "showOrganization",
        "organization.hasLogoImage"
      ),
      tooltipText: t.default.computed(
        "showSutoriLogo",
        "showThirdPartyLogo",
        "organization.name",
        "user.fullName",
        function () {
          return this.get("showSutoriLogo")
            ? "Sutori"
            : this.get("showThirdPartyLogo")
            ? this.get("organization.name")
            : this.get("user.fullName");
        }
      ),
      hue: t.default.computed("user.{fullName,id}", function () {
        var e = this.get("user.fullName") || "",
          t = this.get("user.id");
        return ("" + e + t).split("").reduce(function (e, t) {
          return (17 * e + t.charCodeAt(0)) % 360;
        }, 0);
      }),
      initialsStyle: t.default.computed("hue", function () {
        return t.default.String.htmlSafe(
          "background-color: hsl(" + this.get("hue") + ", 55%, 55%);"
        );
      }),
    });
  }),
  define("frontend/components/user-avatar/template", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "yzNjNWHL",
      block:
        '{"statements":[["block",["if"],[["get",["showSutoriLogo"]]],null,5,4]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","initials"],["dynamic-attr","style",["unknown",["initialsStyle"]],null],["flush-element"],["text","\\n      "],["append",["unknown",["user","initials"]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy","class"],[["get",["user","profileImageFile","content"]],"cover","profile-image"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["user","hasProfileImage"]]],null,1,0]],"locals":[]},{"statements":[["text","  "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy","class"],[["get",["organization","logoImageFile","content"]],"cover","organization-logo"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showThirdPartyLogo"]]],null,3,2]],"locals":[]},{"statements":[["text","  "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/icon-s-b6784aa46cceeaf485dbfe1d239f7cc0.png"],["static-attr","class","organization-logo"],["static-attr","alt","Favicon of Sutori"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/user-avatar/template.hbs" },
    });
  }),
  define("frontend/components/user-edit-profile/component", [
    "exports",
    "ember",
    "frontend/utils/form-object",
    "frontend/models/user",
    "ember-concurrency",
  ], function (e, t, n, s, o) {
    e.default = t.default.Component.extend({
      classNames: ["user-edit-profile"],
      notifications: t.default.inject.service(),
      possibleTitles: t.default
        .computed(function () {
          return s.default.POSSIBLE_TITLES;
        })
        .readOnly(),
      personalProfileImageSizes: t.default
        .computed(function () {
          return [
            { width: 30, height: 30, overflowPolicy: "cover" },
            { width: 200, height: 200, overflowPolicy: "cover" },
            { width: 1440, height: 1440, overflowPolicy: "cover" },
          ];
        })
        .readOnly(),
      organizationLogoImageSizes: t.default
        .computed(function () {
          return [
            { width: 35, height: 35, overflowPolicy: "cover" },
            { width: 70, height: 70, overflowPolicy: "cover" },
            { width: 200, height: 200, overflowPolicy: "cover" },
          ];
        })
        .readOnly(),
      personalProfileImageSynced: !0,
      organizationLogoImageSynced: !0,
      personalProfileForm: n.default.create(),
      organizationProfileForm: n.default.create(),
      organization: t.default.computed.reads("user.organization.content"),
      userIdentifier: t.default.computed(
        "user.{username,email,isStudent}",
        function () {
          return this.get("user.isStudent")
            ? this.get("user.username")
            : this.get("user.email");
        }
      ),
      canEditProfile: t.default.computed.or(
        "user.isTeacher",
        "user.isPersonal",
        "user.isStudent"
      ),
      canEditTitle: t.default.computed.or("user.isTeacher"),
      canEditProfessionalRole: t.default.computed.or("user.isTeacher"),
      canEditLocation: t.default.computed.or("user.isTeacher"),
      canEditProfileImage: t.default.computed.or(
        "user.isTeacher",
        "user.isPersonal"
      ),
      personalProfileSavingDisabled: t.default
        .computed(
          "user.hasDirtyAttributes",
          "personalProfileImageSynced",
          function () {
            return (
              !this.get("user.hasDirtyAttributes") &&
              this.get("personalProfileImageSynced")
            );
          }
        )
        .readOnly(),
      organizationProfileSavingDisabled: t.default
        .computed(
          "organization.hasDirtyAttributes",
          "organizationLogoImageSynced",
          function () {
            return (
              !this.get("organization.hasDirtyAttributes") &&
              this.get("organizationLogoImageSynced")
            );
          }
        )
        .readOnly(),
      canEditEmailSubscriptions: t.default.computed.or(
        "user.isTeacher",
        "user.isPersonal"
      ),
      firstStepsSubscription: t.default.computed(
        "user.emailSubscriptions.[]",
        "user.emailSubscriptions.@each.label",
        function () {
          return this.get("user.emailSubscriptions").findBy(
            "listName",
            "first_steps"
          );
        }
      ),
      sutoriAnnouncementsSubscription: t.default.computed(
        "user.emailSubscriptions.[]",
        "user.emailSubscriptions.@each.label",
        function () {
          return this.get("user.emailSubscriptions").findBy(
            "listName",
            "sutori_announcements"
          );
        }
      ),
      communityAnnouncementsSubscription: t.default.computed(
        "user.emailSubscriptions.[]",
        "user.emailSubscriptions.@each.label",
        function () {
          return this.get("user.emailSubscriptions").findBy(
            "listName",
            "community_announcements"
          );
        }
      ),
      isSubscribedToFirstSteps: t.default.computed.notEmpty(
        "firstStepsSubscription"
      ),
      isSubscribedToSutoriAnnouncements: t.default.computed.notEmpty(
        "sutoriAnnouncementsSubscription"
      ),
      isSubscribedToCommunityAnnouncements: t.default.computed.notEmpty(
        "communityAnnouncementsSubscription"
      ),
      init: function () {
        this._super.apply(this, arguments),
          t.default.Binding.from("organization.name")
            .to("organizationProfileForm.name")
            .connect(this),
          t.default.Binding.from("organization.description")
            .to("organizationProfileForm.description")
            .connect(this),
          this.organizationProfileSavingDisabledStateChanged(),
          t.default.Binding.from("user.firstName")
            .to("personalProfileForm.firstName")
            .connect(this),
          t.default.Binding.from("user.lastName")
            .to("personalProfileForm.lastName")
            .connect(this),
          t.default.Binding.from("user.title")
            .to("personalProfileForm.title")
            .connect(this),
          t.default.Binding.from("user.location")
            .to("personalProfileForm.location")
            .connect(this),
          t.default.Binding.from("user.schoolName")
            .to("personalProfileForm.school")
            .connect(this),
          t.default.Binding.from("user.professionalRole")
            .to("personalProfileForm.role")
            .connect(this),
          this.personalProfileSavingDisabledStateChanged();
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this._rollbackModelChanges(
            "user",
            "profileImageFile",
            "personalProfileImageSynced"
          ),
          this._rollbackModelChanges(
            "organization",
            "logoImageFile",
            "organizationLogoImageSynced"
          );
      },
      organizationProfileSavingDisabledStateChanged: t.default.observer(
        "organizationProfileSavingDisabled",
        function () {
          this.set(
            "organizationProfileForm.disabled",
            this.get("organizationProfileSavingDisabled")
          );
        }
      ),
      personalProfileSavingDisabledStateChanged: t.default.observer(
        "personalProfileSavingDisabled",
        function () {
          this.set(
            "personalProfileForm.disabled",
            this.get("personalProfileSavingDisabled")
          );
        }
      ),
      locationChanged: t.default.observer("user.location", function () {
        this.get("user").setProperties({ country: "", state: "", city: "" });
      }),
      _findLocationByType: function (e, t) {
        return (
          e.address_components.filter(function (e) {
            return e.types.includes(t);
          })[0] || {}
        ).long_name;
      },
      _handleEmailSubscriptionModel: function (e, n) {
        return t.default.isNone(e)
          ? this.store
              .createRecord("email-subscription", {
                user: this.get("user"),
                listName: n,
              })
              .save()
          : t.default
              .getOwner(this)
              .lookup("command:destroy-email-subscriptions")
              .execute([e]);
      },
      _rollbackModelChanges: function (e, n, s) {
        var o = this.get(e);
        t.default.isPresent(o) &&
          (t.default.isNone(this.get(s)) && (this.set(s, !0), o.set(n, null)),
          o.rollbackAttributes());
      },
      savePersonalProfileTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          var t, n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((t = this.get("user")),
                      (n = this.get("personalProfileForm")),
                      n.set("model", t),
                      !t.get("validations.isValid"))
                    ) {
                      e.next = 15;
                      break;
                    }
                    return (
                      n.set("loading", !0), (e.prev = 5), (e.next = 8), t.save()
                    );
                  case 8:
                    this.get("notifications").showSuccessMessage(
                      "Your personal profile has been updated."
                    ),
                      this.set("personalProfileImageSynced", !0);
                  case 10:
                    return (e.prev = 10), n.set("loading", !1), e.finish(10);
                  case 13:
                    e.next = 16;
                    break;
                  case 15:
                    n.showValidationErrors();
                  case 16:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[5, , 10, 13]]
          );
        })
      ).drop(),
      saveOrganizationProfileTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          var t, n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((t = this.get("organization")),
                      (n = this.get("organizationProfileForm")),
                      n.set("model", t),
                      !t.get("validations.isValid"))
                    ) {
                      e.next = 16;
                      break;
                    }
                    return (
                      this.set("organizationProfileForm.loading", !0),
                      (e.prev = 5),
                      (e.next = 8),
                      t.save()
                    );
                  case 8:
                    this.get("notifications").showSuccessMessage(
                      "Your organization's profile has been updated."
                    ),
                      this.set("organizationLogoImageSynced", !0);
                  case 10:
                    return (
                      (e.prev = 10),
                      this.set("organizationProfileForm.loading", !1),
                      t.reload(),
                      e.finish(10)
                    );
                  case 14:
                    e.next = 17;
                    break;
                  case 16:
                    n.showValidationErrors();
                  case 17:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[5, , 10, 14]]
          );
        })
      ).drop(),
      actions: {
        personalProfileImageUploaded: function (e) {
          this.get("user").set("profileImageFile", e),
            this.set("personalProfileImageSynced", !1);
        },
        personalProfileImageDeleted: function () {
          this.get("user").set("profileImageFile", null),
            this.set("personalProfileImageSynced", !0);
        },
        organizationLogoImageUploaded: function (e) {
          this.get("organization").set("logoImageFile", e),
            this.set("organizationLogoImageSynced", !1);
        },
        organizationLogoImageDeleted: function () {
          this.get("organization").set("logoImageFile", null),
            this.set("organizationLogoImageSynced", !0);
        },
        savePersonalProfile: function () {
          this.get("savePersonalProfileTask").perform();
        },
        saveOrganizationProfile: function () {
          this.get("saveOrganizationProfileTask").perform();
        },
        updateLocation: function (e) {
          this.get("user").setProperties({
            country: this._findLocationByType(e, "country"),
            state: this._findLocationByType(e, "administrative_area_level_1"),
            city: this._findLocationByType(e, "locality"),
          });
        },
        toggleSubscription: function (e) {
          var t = this.get(e.camelize() + "Subscription");
          return this._handleEmailSubscriptionModel(t, e);
        },
      },
    });
  }),
  define("frontend/components/user-edit-profile/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "dnmlkELr",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","left-column"],["flush-element"],["text","\\n"],["text","  "],["partial","components/user-edit-profile/organization-profile"],["text","\\n\\n"],["text","  "],["partial","components/user-edit-profile/personal-profile"],["text","\\n\\n"],["text","  "],["partial","components/user-edit-profile/email-subscriptions"],["text","\\n"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["user","canSubscribe"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Your free plan only allows you to visit another "],["append",["unknown",["user","numberOfFreeStudentStoriesLeft"]],false],["text"," student "],["append",["helper",["inflect"],["story",["get",["user","numberOfFreeStudentStoriesLeft"]]],null],false],["text"," before having to upgrade.\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","right-column"],["flush-element"],["text","\\n"],["block",["sutori-subscription-box"],null,null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/components/user-edit-profile/template.hbs",
      },
    });
  }),
  define("frontend/components/user-profile/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["user-profile"],
      session: t.default.inject.service(),
      canEditProfile: t.default.computed(
        "session.currentUser",
        "user",
        function () {
          return this.get("session.currentUser") === this.get("user");
        }
      ),
    });
  }),
  define("frontend/components/user-profile/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "ERnmPMTk",
      block:
        '{"statements":[["block",["if"],[["get",["canEditProfile"]]],null,3,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","country"],["flush-element"],["append",["unknown",["user","country"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","professional-role"],["flush-element"],["append",["unknown",["user","professionalRole"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["user-avatar"],null,[["user"],[["get",["user"]]]]],false],["text","\\n\\n"],["text","  "],["open-element","div",[]],["static-attr","class","user-description"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","name"],["flush-element"],["append",["unknown",["user","fullName"]],false],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["user","hasProfessionalRole"]]],null,1],["text","\\n"],["block",["if"],[["get",["user","hasCountry"]]],null,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["user-edit-profile"],null,[["user"],[["get",["user"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/components/user-profile/template.hbs" },
    });
  }),
  define("frontend/components/validation-error-messages/component", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Component.extend({
      classNames: ["validation-error-messages"],
      tagName: "ul",
    });
  }),
  define("frontend/components/validation-error-messages/template", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "IPeVT4gf",
      block:
        '{"statements":[["block",["each"],[["get",["errors"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","li",[]],["flush-element"],["append",["get",["error"]],false],["close-element"],["text","\\n"]],"locals":["error"]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/components/validation-error-messages/template.hbs",
      },
    });
  }),
  define("frontend/components/youtube-video/component", [
    "exports",
    "ember",
    "frontend/mixins/youtube-video",
    "ember-responds-to/mixins/responds-to-resize",
    "ember-concurrency",
    "npm:urijs",
    "frontend/mixins/loadable-video-player",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Component.extend(n.default, s.default, i.default, {
      classNames: ["youtube-video"],
      logger: t.default.inject.service(),
      hasAspectRatio: t.default.computed.notEmpty("aspectRatio"),
      wrapperIframeStyle: t.default.computed(
        "backgroundUrl",
        "height",
        function () {
          return t.default.String.htmlSafe(
            "\n      background-image: url('" +
              this.get("backgroundUrl") +
              "');\n      height: " +
              this.get("height") +
              "px;\n    "
          );
        }
      ),
      embedUrl: t.default.computed(
        "videoId",
        "startTime",
        "endTime",
        function () {
          var e = new a.default(
            "https://www.youtube.com/embed/" + this.get("videoId")
          );
          return (
            e.addQuery("rel", 0),
            e.addQuery("origin", "www.sutori.com"),
            e.addQuery("showinfo", 0),
            t.default.isPresent(this.get("startTime")) &&
              e.addQuery("start", this.get("startTime")),
            t.default.isPresent(this.get("endTime")) &&
              e.addQuery("end", this.get("endTime")),
            e.toString()
          );
        }
      ),
      url: t.default.computed("videoId", function () {
        return "https://www.youtube.com/watch?v=" + this.get("videoId");
      }),
      _resizeVideo: t.default.on("resize", function () {
        if (this.get("hasAspectRatio")) {
          var e = this.$().width(),
            t = e / this.get("aspectRatio");
          this.set("height", t);
        }
      }),
      loadVideoTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          var n, s;
          return regeneratorRuntime.wrap(
            function (e) {
              for (var o = this; ; )
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (n = this.get("setBackgroundUrlTask").perform()),
                      (s = this.get("setAspectRatioTask").perform()),
                      (e.next = 4),
                      t.default.RSVP.all([n, s])
                    );
                  case 4:
                    t.default.run.scheduleOnce("afterRender", function () {
                      o._resizeVideo();
                    });
                  case 5:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      setBackgroundUrlTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (var n = this; ; )
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!t.default.isPresent(this.get("videoId"))) {
                      e.next = 2;
                      break;
                    }
                    return e.delegateYield(
                      regeneratorRuntime.mark(function e() {
                        var t, s, o;
                        return regeneratorRuntime.wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (e.next = 2),
                                    this.getVideoInformation(
                                      this.get("videoId"),
                                      ["snippet"]
                                    )
                                  );
                                case 2:
                                  (t = e.sent),
                                    (s = Object.keys(t.snippet.thumbnails).map(
                                      function (e) {
                                        return t.snippet.thumbnails[e];
                                      }
                                    )),
                                    (o = s.sortBy("width").get("lastObject")),
                                    this.set("backgroundUrl", o.url);
                                case 6:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          n
                        );
                      })(),
                      "t0",
                      2
                    );
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      setAspectRatioTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          var t, n, s, o, a;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      this.getVideoInformation(this.get("videoId"), ["player"])
                    );
                  case 2:
                    (t = e.sent),
                      (n = t.player.embedHtml),
                      (s = $(n)),
                      (o = s.attr("width")),
                      (a = s.attr("height")),
                      this.set("aspectRatio", o / a);
                  case 8:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
    });
  }),
  define("frontend/components/youtube-video/template", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "ygWp1p2y",
      block:
        '{"statements":[["open-element","p",[]],["static-attr","class","video-link"],["flush-element"],["append",["unknown",["url"]],false],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","wrapper-iframe"],["dynamic-attr","style",["unknown",["wrapperIframeStyle"]],null],["flush-element"],["text","\\n  "],["open-element","iframe",[]],["dynamic-attr","src",["unknown",["embedUrl"]],null],["static-attr","type","text/html"],["static-attr","frameborder","0"],["static-attr","allowfullscreen",""],["flush-element"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/components/youtube-video/template.hbs" },
    });
  }),
  define("frontend/controllers/about", ["exports", "ember"], function (e, t) {
    e.default = t.default.Controller.extend({
      teamMembers: t.default
        .computed(function () {
          return [
            {
              name: "Thomas Ketchell",
              position: "CEO",
              profilePictureUrl:
                "https://d1ox703z8b11rg.cloudfront.net/images/about/thomas_ketchell-cd25a0058aeda10128430d2e1186abb6.jpg",
              description:
                "I love to tell stories so I'm delighted to be one of the founders of Sutori. I was formerly the CEO of a one-person business that restored vintage arcade machines.",
            },
            {
              name: "Yoran Brondsema",
              position: "CTO",
              profilePictureUrl:
                "https://d1ox703z8b11rg.cloudfront.net/images/about/yoran_brondsema-b9852e7cd115970c3f7d6e52bd84f9c9.jpg",
              description:
                'It says something about myself that I have been heard saying "This piece of code reads like a novel". Also, it seems that a lot of people are more interested in knowing my height than getting to know my name. And then they are disappointed when I tell them that no, I don\'t play basketball but I did play table-tennis at the Belgian national level. In the end, though, I just want to build a great product.',
            },
            {
              name: "Jonathan Ketchell",
              position: "Chief Storyteller",
              profilePictureUrl:
                "https://d1ox703z8b11rg.cloudfront.net/images/about/jonathan_ketchell-b97f40d7f6a7f926c4a9c3a2a6c7d43a.jpg",
              description:
                "Just like Sutori, there have been countless iterations of myself before today's end-product. Telling and sharing stories is what I do, but more importantly what I want others to do!",
            },
            {
              name: "Pierre Stoffe",
              position: "Front-end developer",
              profilePictureUrl:
                "https://d1ox703z8b11rg.cloudfront.net/images/about/pierre_stoffe-1915278507b76855fc7fc5b94e8d88c8.jpg",
              description:
                "Be it with Legos or through a computer screen, I can hardly remember a period of my life when I wasn't busy building stuff. This team-shared passion for bringing ideas to life is most definitely what gives us all the motivation we need to make Sutori better every single day.",
            },
          ];
        })
        .readOnly(),
      aboutSutoriStory: t.default.computed(function () {
        return this.get("store").findRecord("story", "story-of-sutori");
      }),
    });
  }),
  define("frontend/controllers/application", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({
      clientInformation: t.default.inject.service(),
      session: t.default.inject.service(),
      routingProxy: t.default.inject.service(),
      embed: t.default.inject.service(),
      showApplicationHeader: !0,
      showApplicationFooter: !0,
      isEmbedded: t.default.computed.reads("embed.isEmbeddedPage"),
      isWebsiteRoute: t.default.computed.reads("routingProxy.isWebsiteRoute"),
      isRegistrationRoute: t.default.computed.reads(
        "routingProxy.isRegistrationRoute"
      ),
    });
  }),
  define("frontend/controllers/blog-posts", [
    "exports",
    "ember",
    "frontend/mixins/infinite-scrollable",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend(n.default, {
      blogPosts: t.default.computed.reads("infiniteScrollableModels"),
      blogPostsPageToLoad: t.default.computed.reads(
        "infiniteScrollablePageToLoad"
      ),
      blogPostsTotalNumber: t.default.computed.reads(
        "infiniteScrollableTotalNumber"
      ),
      blogPostsQueryParams: t.default
        .computed(function () {
          return {
            filter: { is_published: !0 },
            sort_params: ["published_at DESC"],
          };
        })
        .readOnly(),
      actions: {
        blogPostsPageLoaded: function (e) {
          this.infiniteScrollablePageLoaded(e);
        },
      },
    });
  }),
  define("frontend/controllers/collaborate-error", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Controller.extend({
      reason: t.default.computed("model", function () {
        var e = this.get("model");
        return 404 === e.status
          ? "It seems that this invitation to edit a story does not exist anymore."
          : e.message;
      }),
    });
  }),
  define("frontend/controllers/contact", [
    "exports",
    "ember",
    "frontend/utils/sutori-info",
    "frontend/utils/number-formatter",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend({
      streetAddress: n.default.STREET_ADDRESS,
      addressLocality: n.default.ADDRESS_LOCALITY,
      addressRegion: n.default.ADDRESS_REGION,
      postalCode: n.default.POSTAL_CODE,
      addressCountry: n.default.ADDRESS_COUNTRY,
      telephone: n.default.TELEPHONE,
      telephoneFormatted: t.default
        .computed("telephone", function () {
          return (0, s.formatTelephone)(this.get("telephone"));
        })
        .readOnly(),
    });
  }),
  define("frontend/controllers/dashboard", [
    "exports",
    "ember",
    "frontend/mixins/tour-handler",
    "frontend/utils/tour-step",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend(n.default, {
      session: t.default.inject.service(),
      tourName: t.default
        .computed(function () {
          return "create_stories";
        })
        .readOnly(),
      tourSteps: t.default.computed(function () {
        return [
          s.default.create({
            title: "Welcome to Sutori!",
            message:
              "This is your dashboard where you can create and manage all your Sutori stories.",
            attachTo: ".application-header a:contains(Create)",
            orientation: "bottom",
          }),
          s.default.create({
            title: "Profile",
            message:
              "Here you can add a profile image and add other information that will be displayed when you share your story.",
            attachTo: ".application-header a:contains(Profile)",
            orientation: "bottom",
          }),
          s.default.create({
            title: "Explore",
            message:
              "Click here to explore content to see what others are creating and gather ideas.",
            attachTo: ".application-header a:contains(Explore)",
            orientation: "bottom",
          }),
          s.default.create({
            title: "Create",
            message: "Or immediately get started on your project here!",
            attachTo: ".button-create-new-story",
            orientation: "right",
          }),
        ];
      }),
      currentUser: t.default.computed.reads("session.currentUser"),
      canSeeInteractiveTour: t.default.computed.reads("currentUser.isPersonal"),
      sortOwnStoriesBy: ["updatedAt:desc"],
      sortCollaborativeStoriesBy: ["updatedAt:desc"],
      allStories: t.default.computed.reads("ownStoriesPromise.content"),
      ownStories: t.default.computed.filter("allStories", function (e) {
        return e.get("author") === this.get("currentUser");
      }),
      collaborativeStories: t.default.computed.setDiff(
        "allStories",
        "ownStories"
      ),
      actions: {
        createNewStory: function () {
          this.transitionToRoute("stories.new");
        },
      },
    });
  }),
  define("frontend/controllers/education", [
    "exports",
    "ember",
    "npm:lodash.flatten",
  ], function (e, t, n) {
    var s = [
      {
        label: "Social Studies",
        explanation:
          "Examine the sources, compare and contrast. Research projects come to life with various media.",
        storySlugs: [
          "aztec-inca-maya",
          "ireland-375c",
          "wind-and-ocean-currents",
          "activity-hieroglyphs",
          "a-day-in-rome-with-galen",
          "a-soldier-s-life-during-the-us-civil-war",
          "us-government-system",
        ],
      },
      {
        label: "ELA",
        explanation:
          "Book reports, storytelling and essays. Make writing assignments more engaging.",
        storySlugs: [
          "the-iliad-7b076477-af64-455b-b69f-4430dd85410b",
          "king-lear",
          "romeo-and-juliet-sequence-of-events-89202160-9160-4e52-bf04-5a36fac65ac1",
          "black-boy-truth-and-challenge",
          "stories-from-the-heart",
          "dialect",
        ],
      },
      {
        label: "Sciences",
        explanation:
          "Show results of science experiments, structure thought process and demonstrate knowledge.",
        storySlugs: [
          "electric-circuits",
          "roller-coaster-design-brief-template",
          "unit-1-the-nature-of-science",
          "the-sun-s-life",
          "prehistory-and-human-evolution",
          "rainforest-interactions",
        ],
      },
      {
        label: "Mathematics",
        explanation:
          "Algebra, geometry, calculus, functionsâ¦ Structure thought process and put events in order.",
        storySlugs: [
          "transformations",
          "perimeters-and-areas-of-squares-and-rectangles",
          "graphing-rational-functions",
          "applications-of-linear-equations",
          "order-of-operations",
        ],
      },
      {
        label: "Elementary",
        explanation:
          "From student portfolios to sharing classroom news, kids love Sutoriâs ease of use!",
        storySlugs: [
          "school-day",
          "harold-and-the-purple-crayon",
          "frogs-b66b",
          "writing-process",
          "stop-motion-project-5th-class-roxborough-weather-project",
          "rosa-parks-9b8b",
        ],
      },
      {
        label: "Other",
        explanation:
          "Art, Music, Sociology, Religious Studies, Economy, Psychology, Marketingâ¦",
        storySlugs: [
          "el-presente",
          "the-classical-period-1750-1820",
          "how-to-find-happiness",
          "understanding-islam-the-basics",
          "do-you-know-where-your-smartphone-comes-from",
          "evolution-of-women-s-hairstyles-in-america",
        ],
      },
    ];
    e.default = t.default.Controller.extend({
      store: t.default.inject.service(),
      stories: t.default
        .computed(function () {
          return this.get("store").query("story", {
            filter: { ids: (0, n.default)(s.mapBy("storySlugs")) },
          });
        })
        .readOnly(),
      tabObjects: t.default
        .computed(function () {
          var e = this.get("stories");
          return s.map(function (n) {
            return t.default.Object.extend({
              id: t.default.computed.reads("label"),
              stories: t.default.computed(
                "storySlugs",
                "component.stories",
                function () {
                  var t = this;
                  return e.filter(function (e) {
                    return t.get("storySlugs").includes(e.get("slug"));
                  });
                }
              ),
            }).create({
              label: n.label,
              explanation: n.explanation,
              storySlugs: n.storySlugs,
            });
          });
        })
        .readOnly(),
    });
  }),
  define("frontend/controllers/error", [
    "exports",
    "ember",
    "frontend/utils/http-status-codes",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend({
      authorizationError: t.default.computed.equal(
        "errorStatusCode",
        n.FORBIDDEN
      ),
      notFoundError: t.default.computed.equal("errorStatusCode", n.NOT_FOUND),
    });
  }),
  define("frontend/controllers/forgot-password", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend({
      errorObjectsFactory: t.default.inject.service(),
      email: t.default.computed.reads("teacherForgotPasswordSubmission.email"),
      _setupForm: t.default.on("init", function () {
        this.set(
          "teacherForgotPasswordSubmission",
          t.default.Object.create({ email: "" })
        ),
          this.set("requestSent", !1);
      }),
      actions: {
        requestPasswordReset: function () {
          var e = this,
            t = this.get("teacherForgotPasswordSubmission");
          t.set("errors", null), t.set("loading", !0);
          var o = t.get("email");
          n.default
            .post(s.default.user_password_path(), { user: { email: o } })
            .then(function () {
              e
                .get("analytics")
                .trackEvent("Teacher Password Reset Email Sent", { Email: o }),
                e.set("requestSent", !0);
            })
            .catch(function (n) {
              t.set(
                "errors",
                e.get("errorObjectsFactory").createRequestMessagesObject(n)
              );
            })
            .finally(function () {
              t.set("loading", !1);
            });
        },
      },
    });
  }),
  define("frontend/controllers/help_category", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({
      helpItems: t.default.computed.reads("helpItemsPromise.content"),
      sortHelpItemsBy: ["position"],
      sortedHelpItems: t.default.computed.sort("helpItems", "sortHelpItemsBy"),
    });
  }),
  define("frontend/controllers/index", ["exports", "ember"], function (e, t) {
    e.default = t.default.Controller.extend({
      clientInformation: t.default.inject.service(),
      showHeroBackground: t.default.computed.reads(
        "clientInformation.cssFiltersSupported"
      ),
    });
  }),
  define("frontend/controllers/item", [
    "exports",
    "ember",
    "frontend/utils/metadata",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend({
      title: t.default.computed(
        "model.{isAudio,audioFile.caption,isQuizQuestion,quizQuestionText.contentAsPlainText,contentText.contentAsPlainText}",
        function () {
          var e = this.get("model");
          return e.get("isAudio")
            ? e.get("audioFile.caption")
            : e.get("isQuizQuestion")
            ? e.get("quizQuestionText.contentAsPlainText")
            : e.get("contentText.contentAsPlainText");
        }
      ),
      metaTitle: t.default.computed("title", function () {
        return (0, n.formatMetaTitle)(this.get("title"));
      }),
      breadCrumbs: t.default.computed(
        "model.story.title",
        "metaTitle",
        function () {
          return [
            {
              label: this.get("model.story.title") + " story",
              path: "story",
              model: this.get("model.story"),
            },
            { label: this.get("metaTitle") },
          ];
        }
      ),
    });
  }),
  define("frontend/controllers/login", ["exports", "ember"], function (e, t) {
    e.default = t.default.Controller.extend({
      queryParams: ["showSessionExpiredMessage"],
      showSessionExpiredMessage: !1,
      hasErrorMessage: t.default.computed.notEmpty("errorMessage"),
      actions: {
        reset: function () {
          this.setProperties({
            loginSubmission: t.default.Object.create({
              login: "",
              password: "",
            }),
            errorMessage: null,
          });
        },
      },
    });
  }),
  define("frontend/controllers/organization", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({
      sortStoriesBy: ["title:asc"],
      organization: t.default.computed.reads("model"),
      currentUser: t.default.computed.reads("session.currentUser"),
      canCreateNewStory: t.default.computed(
        "currentUser.organization.content",
        "organization",
        function () {
          return (
            this.get("currentUser.organization.content") ===
            this.get("organization")
          );
        }
      ),
      breadCrumbs: t.default.computed(
        "currentUser.isPublisher",
        "organization.name",
        function () {
          if (!this.get("currentUser.isPublisher")) {
            var e = [{ label: "Community", path: "stories.community" }],
              n = this.get("organization.name");
            return t.default.isPresent(n) && e.push({ label: n }), e;
          }
        }
      ),
      actions: {
        createNewStory: function () {
          this.transitionToRoute("stories.new");
        },
      },
    });
  }),
  define("frontend/controllers/personal-registration", [
    "exports",
    "ember",
    "frontend/mixins/registration-controller",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend(n.default, {
      singleSignOnProviders: ["google", "facebook"],
    });
  }),
  define("frontend/controllers/registration", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({
      queryParams: ["origin"],
      origin: null,
    });
  }),
  define("frontend/controllers/reset-password", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend({
      errorObjectsFactory: t.default.inject.service(),
      _resetForm: t.default.on("init", function () {
        this.set(
          "resetPasswordSubmission",
          t.default.Object.create({ password: "", passwordConfirmation: "" })
        );
      }),
      actions: {
        resetPassword: function () {
          var e = this,
            t = this.get("resetPasswordSubmission");
          t.set("errors", null),
            t.set("loading", !0),
            n.default
              .put(s.default.user_password_path(), {
                user: {
                  reset_password_token: this.get("model.resetPasswordToken"),
                  password: t.get("password"),
                  password_confirmation: t.get("passwordConfirmation"),
                },
              })
              .then(function () {
                e.get("analytics").trackEvent("Teacher Password Reset"),
                  e.set("isPasswordReset", !0);
              })
              .catch(function (n) {
                t.set(
                  "errors",
                  e.get("errorObjectsFactory").createRequestMessagesObject(n)
                );
              })
              .finally(function () {
                t.set("loading", !1);
              });
        },
      },
    });
  }),
  define("frontend/controllers/school-class", [
    "exports",
    "ember",
    "frontend/utils/sortable-table-column",
    "frontend/presenters/story",
    "frontend/mixins/tour-handler",
    "frontend/utils/tour-step",
    "frontend/utils/utility",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Controller.extend(o.default, {
      notifications: t.default.inject.service(),
      schoolClass: t.default.computed.reads("model"),
      stories: t.default.computed.alias("model.stories"),
      students: t.default.computed.alias("model.students"),
      name: t.default.computed.alias("model.name"),
      code: t.default.computed.alias("model.code"),
      subject: t.default.computed.alias("model.subject"),
      hasSubject: t.default.computed.reads("model.hasSubject"),
      modalVisible: !1,
      tourName: t.default
        .computed(function () {
          return "class_overview";
        })
        .readOnly(),
      tourSteps: t.default
        .computed(function () {
          return [
            a.default.create({
              title: "Invite Your Students",
              message:
                "This is the overview page of your class. Send your students to <a href='https://www.sutori.com'>sutori.com</a> for them to sign up and use this code to join your class.",
              attachTo: ".class-code",
              orientation: "bottom",
            }),
            a.default.create({
              message:
                "After students join your class, their names will appear here.",
              attachTo: ".students .title",
              orientation: "left",
            }),
            a.default.create({
              title: "Edit the Class",
              message:
                "You can edit the name, the subject and the grade of the class at any time.",
              attachTo: ".button-edit-class",
              orientation: "left",
            }),
            a.default.create({
              title: "Explore",
              message:
                "Sutori has a thriving community of educators who share resources. Let's go check it out!",
              attachTo: ".application-header a:contains(Explore)",
              orientation: "right",
            }),
          ];
        })
        .readOnly(),
      studentStoriesColumns: t.default
        .computed(function () {
          return [
            n.default.create({
              label: "Student name",
              attribute: "author.fullName",
            }),
            n.default.create({ label: "Story name", attribute: "title" }),
            n.default.create({ label: "Shared with", attribute: "sharedWith" }),
            n.default.create({ label: "Last edited", attribute: "updatedAt" }),
          ];
        })
        .readOnly(),
      teacherStoriesColumns: t.default
        .computed(function () {
          return [
            n.default.create({ label: "Author", attribute: "author.fullName" }),
            n.default.create({ label: "Story name", attribute: "title" }),
          ];
        })
        .readOnly(),
      classmatesStoriesColumns: t.default
        .computed(function () {
          return [
            n.default.create({ label: "Author", attribute: "author.fullName" }),
            n.default.create({ label: "Story name", attribute: "title" }),
            n.default.create({ label: "Last edited", attribute: "updatedAt" }),
          ];
        })
        .readOnly(),
      sortStudentsBy: ["fullName:asc"],
      sortStudentStoriesBy: ["author.fullName:asc"],
      sortClassStoriesBy: ["title:asc"],
      sortOwnStoriesBy: ["updatedAt:desc"],
      sortTeacherStoriesBy: ["title:asc"],
      sortClassmatesStoriesBy: ["title:asc"],
      selectedStudentStories: [],
      currentUser: t.default.computed.reads("session.currentUser"),
      breadCrumbs: t.default.computed(
        "name",
        "session.currentUser",
        "schoolClass",
        "schoolClass.name",
        "schoolClass.subject",
        function () {
          var e = this.get("session.currentUser");
          return [
            {
              label: e.get("isStudent") ? "Learn" : "Teach",
              path: "schoolClasses",
            },
            { label: this.get("schoolClass").displayNameForUser(e) },
          ];
        }
      ),
      canSeeInteractiveTour: t.default.computed.reads("currentUser.isTeacher"),
      storiesInClass: t.default.computed.reads("storiesInClassPromise.content"),
      canSeeOwnStories: t.default.computed.reads("currentUser.isStudent"),
      studentStoriesPromise: t.default.computed.reads("storiesInClassPromise"),
      hasStudentStories: t.default.computed.notEmpty("studentStories"),
      studentStories: t.default.computed(
        "storiesInClass.@each.author",
        "students",
        function () {
          var e = this;
          return (this.get("storiesInClass") || []).filter(function (t) {
            return e.get("students").includes(t.get("author"));
          });
        }
      ),
      _presentableStudentStories: t.default.computed(
        "studentStories.[]",
        "schoolClass",
        function () {
          return s.default.present(
            this.get("studentStories"),
            this.get("schoolClass")
          );
        }
      ),
      sortedPresentableStudentStories: t.default.computed.sort(
        "_presentableStudentStories",
        "sortStudentStoriesBy"
      ),
      classStoriesPromise: t.default.computed.reads("storiesInClassPromise"),
      hasClassStories: t.default.computed.notEmpty("classStories"),
      classStories: t.default.computed.setDiff(
        "storiesInClass",
        "studentStories"
      ),
      teacherStoriesPromise: t.default.computed.reads("storiesInClassPromise"),
      hasTeacherStories: t.default.computed.notEmpty("teacherStories"),
      teacherStories: t.default.computed(
        "schoolClass.storyShares.@each.{isCreatedByStudent,story}",
        function () {
          return (this.get("schoolClass.storyShares") || [])
            .rejectBy("isCreatedByStudent")
            .mapBy("story");
        }
      ),
      sortedTeacherStories: t.default.computed.sort(
        "teacherStories",
        "sortTeacherStoriesBy"
      ),
      classmatesStoriesPromise: t.default.computed.reads(
        "storiesInClassPromise"
      ),
      hasClassmatesStories: t.default.computed.notEmpty("classmatesStories"),
      studentStoriesInThisClass: t.default.computed(
        "schoolClass.storyShares.@each.{isCreatedByStudent,story}",
        function () {
          return (this.get("schoolClass.storyShares") || [])
            .filterBy("isCreatedByStudent")
            .mapBy("story");
        }
      ),
      classmatesStories: t.default.computed(
        "session.currentUser",
        "studentStoriesInThisClass.@each.author",
        function () {
          var e = this.get("session.currentUser");
          return this.get("studentStoriesInThisClass").rejectBy("author", e);
        }
      ),
      sortedClassmatesStories: t.default.computed.sort(
        "classmatesStories",
        "sortClassmatesStoriesBy"
      ),
      hasStudents: t.default.computed.notEmpty("students"),
      sortedStudents: t.default.computed.sort("students", "sortStudentsBy"),
      actions: {
        editClass: function () {
          this.set("modalVisible", !0);
        },
        unarchiveClass: function () {
          var e = this;
          this.get("model").setAsUnarchived(),
            this.get("model")
              .save()
              .then(function () {
                e
                  .get("notifications")
                  .showSuccessMessage(
                    "The class " + e.get("model.name") + " has been unarchived."
                  ),
                  e.transitionToRoute("schoolClass", e.get("model"));
              });
        },
        createNewStory: function () {
          this.transitionToRoute("stories.new", {
            queryParams: { schoolClassId: this.get("model.id") },
          });
        },
        changedStorySelection: function (e, t) {
          i.default.setElementMembershipInList(
            this.get("selectedStudentStories"),
            e,
            t
          );
        },
      },
    });
  }),
  define("frontend/controllers/school-classes", [
    "exports",
    "ember",
    "frontend/utils/tour-step",
    "frontend/mixins/tour-handler",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend(s.default, {
      itemController: "schoolClass",
      tourName: t.default
        .computed(function () {
          return "create_class";
        })
        .readOnly(),
      tourSteps: t.default
        .computed("isTeacher", "isStudent", function () {
          return this.get("isTeacher")
            ? [
                n.default.create({
                  title: "Welcome to Sutori!",
                  message:
                    "This is your teacher dashboard where you can manage your classes and track student progress.",
                  attachTo: ".application-header a:contains(Teach)",
                  zIndex: 2,
                  orientation: "right",
                }),
                n.default.create({
                  title: "Create a Class",
                  message: "Let's start by creating your class.",
                  attachTo: ".button-create-new-school-class",
                  orientation: "top",
                  requiresAction: !0,
                }),
                n.default.create({
                  message:
                    "Fill in the class name, for example 'Period 1', select the subject and the grade level. Then click on 'Create class'.",
                  attachTo: ".page-school-class-edit .form-update-school-class",
                  orientation: "top",
                  identifier: "create-class",
                  position: "fixed",
                  zIndex: 11,
                }),
              ]
            : this.get("isStudent")
            ? [
                n.default.create({
                  title: "Welcome to Sutori!",
                  message:
                    "This is your dashboard where you can create your stories.",
                  attachTo: ".application-header a:contains(Learn)",
                  orientation: "right",
                }),
                n.default.create({
                  message:
                    "You are able to join multiple classes. Don't forget that you'll need the class code to join your teacher's class.",
                  attachTo: ".button-join-school-class",
                  orientation: "top",
                }),
                n.default.create({
                  message: "Let's create a story. Click here to begin!",
                  attachTo: ".button-create-new-story",
                  orientation: "right",
                }),
              ]
            : void 0;
        })
        .readOnly(),
      sortSchoolClassesBy: ["name:asc"],
      sortMyStoriesBy: ["updatedAt:desc"],
      sortMyUnsubmittedStoriesBy: ["updatedAt:desc"],
      isShowingArchivedClasses: !1,
      modalVisible: !1,
      isTeacher: t.default.computed.reads("session.currentUser.isTeacher"),
      isStudent: t.default.computed.reads("session.currentUser.isStudent"),
      canSeeInteractiveTour: t.default.computed.or("isTeacher", "isStudent"),
      canCreateNewSchoolClass: t.default.computed.reads("isTeacher"),
      canJoinSchoolClass: t.default.computed.reads("isStudent"),
      _persistedSchoolClasses: t.default.computed.filterBy(
        "schoolClasses",
        "isNew",
        !1
      ),
      sortedSchoolClasses: t.default.computed.sort(
        "_persistedSchoolClasses",
        "sortSchoolClassesBy"
      ),
      unarchivedSchoolClasses: t.default.computed.filterBy(
        "sortedSchoolClasses",
        "isArchived",
        !1
      ),
      archivedSchoolClasses: t.default.computed.filterBy(
        "sortedSchoolClasses",
        "isArchived",
        !0
      ),
      hasArchivedSchoolClasses: t.default.computed.notEmpty(
        "archivedSchoolClasses"
      ),
      hasSchoolClasses: t.default.computed.notEmpty("_persistedSchoolClasses"),
      addNewSchoolClassText: t.default.computed(
        "hasSchoolClasses",
        function () {
          return this.get("hasSchoolClasses")
            ? "Add a class"
            : "Add your first class";
        }
      ),
      showMyStories: t.default.computed.reads("isTeacher"),
      breadCrumbs: t.default.computed("isStudent", function () {
        return this.get("isStudent")
          ? [{ label: "Learn" }]
          : [{ label: "Teach" }];
      }),
      archiveClassLabel: t.default.computed(
        "isShowingArchivedClasses",
        function () {
          return this.get("isShowingArchivedClasses") ? "hide" : "show";
        }
      ),
      showMyUnsubmittedStories: t.default.computed.reads("isStudent"),
      myUnsubmittedStoriesPromise: t.default.computed.reads("myStoriesPromise"),
      myUnsubmittedStories: t.default.computed.filterBy(
        "myStoriesPromise.content",
        "hasNoStoryShares"
      ),
      actions: {
        createNewSchoolClass: function () {
          var e = this.store.createRecord("school-class", {
            teacher: this.get("session.currentUser"),
          });
          this.set("newSchoolClass", e), this.set("modalVisible", !0);
          var n = this.get("tourComponent");
          t.default.isNone(n) || n.send("jumpToStep", "create-class");
        },
        joinSchoolClass: function () {
          this.set("modalVisible", !0);
        },
        schoolClassCreated: function (e) {
          var n = this.get("tourComponent");
          t.default.isNone(n) || n.send("proceed"),
            this.transitionToRoute("schoolClass", e);
        },
        createNewStory: function () {
          this.transitionToRoute("stories.new");
        },
        toggleShowArchivedClasses: function () {
          this.toggleProperty("isShowingArchivedClasses");
        },
      },
    });
  }),
  define("frontend/controllers/stories-evaluation", [
    "exports",
    "ember",
    "frontend/mixins/infinite-scrollable",
    "frontend/utils/common-api-queries",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend(n.default, {
      publicStories: t.default.computed.reads("infiniteScrollableModels"),
      publicStoriesPageToLoad: t.default.computed.reads(
        "infiniteScrollablePageToLoad"
      ),
      publicStoriesTotalNumber: t.default.computed.reads(
        "infiniteScrollableTotalNumber"
      ),
      publicStoriesQueryParams: t.default
        .computed(function () {
          return s.LATEST_PUBLIC_STORIES_QUERY;
        })
        .readOnly(),
      breadCrumbs: t.default.computed(function () {
        return [{ label: "Public stories" }];
      }),
      actions: {
        publicStoriesPageLoaded: function (e) {
          this.infiniteScrollablePageLoaded(e);
        },
      },
    });
  }),
  define("frontend/controllers/stories", [
    "exports",
    "ember",
    "frontend/utils/tab",
    "frontend/mixins/tour-handler",
    "frontend/utils/tour-step",
  ], function (e, t, n, s, o) {
    e.default = t.default.Controller.extend(s.default, {
      routingProxy: t.default.inject.service(),
      tourName: t.default
        .computed(function () {
          return "stories_index";
        })
        .readOnly(),
      tourSteps: t.default
        .computed(function () {
          return [
            o.default.create({
              message:
                "This is where you can explore content to use in your classroom. All stories can be copied to your own list and shared with your students.",
              attachTo: ".application-header a:contains(Explore)",
              orientation: "right",
            }),
            o.default.create({
              title: "Sutori Stories",
              message:
                "View social studies content created by our team of teachers and historians.",
              attachTo: ".tab.sutori-stories",
              orientation: "bottom",
            }),
            o.default.create({
              title: "Community Stories",
              message: "Check out what teachers and students are sharing!",
              attachTo: ".tab.community-stories",
              orientation: "bottom",
            }),
            o.default.create({
              title: "Search",
              message: "Use the search to easily find resources.",
              attachTo: ".form-search",
              orientation: "bottom",
            }),
          ];
        })
        .readOnly(),
      tabs: t.default
        .computed(function () {
          return [
            n.default.create({
              text: "Sutori stories",
              routeName: "stories.sutori.index",
            }),
            n.default.create({
              text: "Community stories",
              routeName: "stories.community",
            }),
          ];
        })
        .readOnly(),
      currentUser: t.default.computed.reads("session.currentUser"),
      canSeeInteractiveTour: t.default.computed.or("currentUser.isTeacher"),
      showStorySearch: t.default.computed.not(
        "session.currentUser.isPublisher"
      ),
      tabsRoutesNames: t.default.computed.mapBy("tabs", "routeName"),
      activeRoutesNames: t.default.computed.reads(
        "routingProxy.activeRoutesNames"
      ),
      showTabSelector: t.default.computed(
        "activeRoutesNames.[]",
        "tabsRoutesNames.[]",
        "showTabSelectorForCurrentUser",
        function () {
          var e = this.get("activeRoutesNames") || [],
            t = this.get("tabsRoutesNames").any(function (t) {
              return e.includes(t);
            });
          return t && this.get("showTabSelectorForCurrentUser");
        }
      ),
      showTabSelectorForCurrentUser: t.default.computed(
        "session.currentUser",
        "session.currentUser.{isPersonal,isTeacher,isEditor}",
        function () {
          var e = this.get("session.currentUser");
          return (
            t.default.isNone(e) ||
            e.get("isPersonal") ||
            e.get("isTeacher") ||
            e.get("isEditor")
          );
        }
      ),
      actions: {
        search: function () {
          var e = this.get("searchData.query");
          t.default.isEmpty(e)
            ? this.transitionToRoute("stories")
            : this.transitionToRoute("stories.search", {
                queryParams: { query: e },
              });
        },
      },
    });
  }),
  define("frontend/controllers/stories/community", [
    "exports",
    "ember",
    "frontend/utils/tab",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend({
      storiesController: t.default.inject.controller("stories"),
      communityStoriesTabs: t.default
        .computed(function () {
          return [
            n.default.create({
              text: "Editors' picks",
              routeName: "stories.community.featured",
            }),
            n.default.create({
              text: "Latest",
              routeName: "stories.community.latest",
            }),
            n.default.create({
              text: "Student work",
              routeName: "stories.community.student-work",
            }),
          ];
        })
        .readOnly(),
      showCommunityStories: t.default.computed.or(
        "session.isGuestUser",
        "session.currentUser.isEditor",
        "session.currentUser.isPersonal",
        "session.currentUser.isTeacher"
      ),
      actions: {
        communityStoriesCategoryTabChanged: function (e) {
          this.send("activeSubRouteNameChanged", e.get("routeName"));
        },
      },
    });
  }),
  define("frontend/controllers/stories/community/featured", [
    "exports",
    "ember",
    "frontend/mixins/infinite-scrollable",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend(n.default, {
      queryParams: ["preserveScrollPosition"],
      featuredCommunityStories: t.default.computed.reads(
        "infiniteScrollableModels"
      ),
      featuredCommunityStoriesPageToLoad: t.default.computed.reads(
        "infiniteScrollablePageToLoad"
      ),
      featuredCommunityStoriesTotalNumber: t.default.computed.reads(
        "infiniteScrollableTotalNumber"
      ),
      featuredCommunityStoriesQueryParams: t.default
        .computed(function () {
          return {
            filter: { is_featured: !0 },
            sort_params: ["featured_at DESC"],
          };
        })
        .readOnly(),
      actions: {
        featuredCommunityStoriesPageLoaded: function (e) {
          this.infiniteScrollablePageLoaded(e);
        },
      },
    });
  }),
  define("frontend/controllers/stories/community/latest", [
    "exports",
    "ember",
    "frontend/mixins/infinite-scrollable",
    "frontend/utils/common-api-queries",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend(n.default, {
      queryParams: ["preserveScrollPosition"],
      latestCommunityStories: t.default.computed.reads(
        "infiniteScrollableModels"
      ),
      latestCommunityStoriesPageToLoad: t.default.computed.reads(
        "infiniteScrollablePageToLoad"
      ),
      latestCommunityStoriesTotalNumber: t.default.computed.reads(
        "infiniteScrollableTotalNumber"
      ),
      latestCommunityStoriesQueryParams: t.default
        .computed(function () {
          return s.LATEST_PUBLIC_STORIES_QUERY;
        })
        .readOnly(),
      actions: {
        latestCommunityStoriesPageLoaded: function (e) {
          this.infiniteScrollablePageLoaded(e);
        },
      },
    });
  }),
  define("frontend/controllers/stories/community/student-work", [
    "exports",
    "ember",
    "frontend/mixins/infinite-scrollable",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend(n.default, {
      queryParams: ["preserveScrollPosition"],
      studentCommunityStories: t.default.computed.reads(
        "infiniteScrollableModels"
      ),
      studentCommunityStoriesPageToLoad: t.default.computed.reads(
        "infiniteScrollablePageToLoad"
      ),
      studentCommunityStoriesTotalNumber: t.default.computed.reads(
        "infiniteScrollableTotalNumber"
      ),
      studentCommunityStoriesQueryParams: t.default
        .computed(function () {
          return {
            filter: { is_approved: !0, authors_types: ["student"] },
            sort_params: ["approved_at DESC"],
          };
        })
        .readOnly(),
      actions: {
        studentCommunityStoriesPageLoaded: function (e) {
          this.infiniteScrollablePageLoaded(e);
        },
      },
    });
  }),
  define("frontend/controllers/stories/new", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({ queryParams: ["schoolClassId"] });
  }),
  define("frontend/controllers/stories/search", [
    "exports",
    "ember",
    "frontend/utils/object-promise",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend({
      queryParams: ["query"],
      storiesController: t.default.inject.controller("stories"),
      numberOfCommunityStoriesFirstPage: t.default
        .computed(function () {
          return 12;
        })
        .readOnly(),
      numberOfSutoriStoriesFirstRow: t.default
        .computed(function () {
          return 3;
        })
        .readOnly(),
      communityStoriesQueryParams: t.default
        .computed("query", function () {
          return { filter: { is_approved: !0, query: this.get("query") } };
        })
        .readOnly(),
      sutoriStories: t.default
        .computed("query", function () {
          return this.store.query("story", {
            filter: { authors_types: ["editor"], query: this.get("query") },
          });
        })
        .readOnly(),
      communityStoriesFirstPage: t.default
        .computed(
          "communityStoriesQueryParams",
          "numberOfCommunityStoriesFirstPage",
          function () {
            var e = {
              page: 1,
              per_page: this.get("numberOfCommunityStoriesFirstPage"),
              padding: 0,
            };
            return (
              t.default.merge(e, this.get("communityStoriesQueryParams")),
              this.store.query("story", e)
            );
          }
        )
        .readOnly(),
      searchResults: t.default
        .computed("sutoriStories", "communityStoriesFirstPage", function () {
          return n.default.create({
            promise: t.default.RSVP.Promise.all([
              this.get("sutoriStories"),
              this.get("communityStoriesFirstPage"),
            ]),
          });
        })
        .readOnly(),
      hasSearchResults: t.default.computed(
        "sutoriStories.length",
        "communityStories.length",
        function () {
          return (
            this.get("sutoriStories.length") +
              this.get("communityStories.length") >
            0
          );
        }
      ),
      hasSutoriStories: t.default.computed.notEmpty("sutoriStories"),
      hasCommunityStories: t.default.computed.gte(
        "communityStoriesTotalNumber",
        1
      ),
      showShowAllSutoriStoriesButton: t.default
        .computed(
          "showAllSutoriStories",
          "sutoriStories.length",
          "numberOfSutoriStoriesFirstRow",
          function () {
            return (
              !this.get("showAllSutoriStories") &&
              this.get("sutoriStories.length") >
                this.get("numberOfSutoriStoriesFirstRow")
            );
          }
        )
        .readOnly(),
      shownSutoriStories: t.default
        .computed(
          "sutoriStories.[]",
          "showAllSutoriStories",
          "numberOfSutoriStoriesFirstRow",
          function () {
            var e = this.get("sutoriStories");
            return this.get("showAllSutoriStories")
              ? e
              : e.slice(0, this.get("numberOfSutoriStoriesFirstRow")).compact();
          }
        )
        .readOnly(),
      prepareCommunityStories: t.default.observer(
        "communityStoriesFirstPage.isFulfilled",
        function () {
          var e = this.get("communityStoriesFirstPage").slice(0);
          this.setProperties({
            communityStoriesPageToLoad: 2,
            communityStoriesTotalNumber: this.get(
              "communityStoriesFirstPage.content.meta.total"
            ),
            communityStoriesMaxNumberOfResults: this.get(
              "communityStoriesFirstPage.content.meta.max_number_of_results"
            ),
            communityStories: e,
          });
        }
      ),
      resetShowAllSutoriStories: t.default.observer("query", function () {
        this.set("showAllSutoriStories", !1);
      }),
      trackAnalytics: t.default.observer(
        "searchResults.isFulfilled",
        function () {
          this.get("searchResults.isFulfilled") &&
            this.get("analytics").trackEvent("Story Search", {
              Query: this.get("query"),
              "Number of Sutori stories": this.get("sutoriStories.length"),
              "Number of community stories": this.get(
                "communityStoriesTotalNumber"
              ),
            });
        }
      ),
      communityStoriesNumberOfResults: t.default.computed(
        "communityStoriesTotalNumber",
        "communityStoriesMaxNumberOfResults",
        function () {
          var e = this.get("communityStoriesTotalNumber"),
            t = this.get("communityStoriesMaxNumberOfResults");
          if (e === t) return t + "+";
          if (e < t) return e;
          throw new Error(
            "'totalNumber' cannot be higher than 'maxNumberOfResults'"
          );
        }
      ),
      actions: {
        communityStoriesPageLoaded: function (e) {
          this.incrementProperty("communityStoriesPageToLoad"),
            this.set("communityStoriesTotalNumber", e);
        },
        showAllSutoriStories: function () {
          this.set("showAllSutoriStories", !0);
        },
      },
    });
  }),
  define("frontend/controllers/stories/sutori/index", [
    "exports",
    "ember",
    "frontend/utils/common-api-queries",
    "frontend/mixins/infinite-scrollable",
  ], function (e, t, n, s) {
    e.default = t.default.Controller.extend(s.default, {
      storiesController: t.default.inject.controller("stories"),
      storyUnits: t.default.computed.reads("infiniteScrollableModels"),
      storyUnitsPageToLoad: t.default.computed.reads(
        "infiniteScrollablePageToLoad"
      ),
      storyUnitsTotalNumber: t.default.computed.reads(
        "infiniteScrollableTotalNumber"
      ),
      storyUnitsQueryParams: t.default
        .computed(function () {
          return { sort_params: ["title ASC"] };
        })
        .readOnly(),
      featuredUnitsPromise: t.default
        .computed(function () {
          return this.get("store").query(
            "story-unit",
            n.FEATURED_STORY_UNIT_QUERY
          );
        })
        .readOnly(),
      storiesOfTheMonthPromise: t.default
        .computed(function () {
          return this.get("store").query(
            "story",
            n.MOST_RECENT_STORY_OF_THE_MONTH_QUERY
          );
        })
        .readOnly(),
      hasFeaturedUnit: t.default.computed.notEmpty("featuredUnit"),
      hasStoryOfTheMonth: t.default.computed.notEmpty("storyOfTheMonth"),
      hasRandomFreeSutoriStory: t.default.computed.notEmpty(
        "randomFreeSutoriStory"
      ),
      featuredUnit: t.default.computed.reads(
        "featuredUnitsPromise.firstObject"
      ),
      storyOfTheMonth: t.default.computed.reads(
        "storiesOfTheMonthPromise.firstObject"
      ),
      randomFreeSutoriStory: t.default.computed.reads(
        "randomFreeSutoriStoriesPromise.firstObject"
      ),
      loadedFeaturedRow: t.default.computed.and(
        "featuredUnitsPromise.isFulfilled",
        "storiesOfTheMonthPromise.isFulfilled",
        "randomFreeSutoriStoriesPromise.isFulfilled"
      ),
      actions: {
        storyUnitsPageLoaded: function (e) {
          this.infiniteScrollablePageLoaded(e);
        },
      },
    });
  }),
  define("frontend/controllers/story-unit", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({ breadCrumbs: [] });
  }),
  define("frontend/controllers/story-unit/index", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/utils/object-promise",
    "frontend/mixins/story-permissions",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Controller.extend({
      notifications: t.default.inject.service(),
      sortStoriesBy: ["title:asc"],
      bannerSizes: t.default
        .computed(function () {
          return [
            { width: 2536, height: 600, overflowPolicy: "cover" },
            { width: 1268, height: 300, overflowPolicy: "cover" },
            { width: 905, height: 300, overflowPolicy: "cover" },
            { width: 600, height: 210, overflowPolicy: "cover" },
          ];
        })
        .readOnly(),
      storyUnit: t.default.computed.reads("model"),
      currentUser: t.default.computed.reads("session.currentUser"),
      canPublish: t.default.computed(
        "currentUser.isEditor",
        "storyUnit.isPublished",
        function () {
          return (
            this.get("currentUser.isEditor") &&
            !this.get("storyUnit.isPublished")
          );
        }
      ),
      canDelete: t.default.computed.reads("currentUser.isEditor"),
      isEditing: t.default.computed.reads("currentUser.isEditor"),
      notAvailable: t.default.computed(
        "model.stories",
        "currentUser",
        function () {
          var e = this;
          return this.get("model.stories").any(function (n) {
            return t.default.Object.extend(a.default)
              .create({ currentUser: e.get("currentUser"), story: n })
              .get("isNotFullyAvailable");
          });
        }
      ),
      showSubscriptionBox: t.default.computed.reads("notAvailable"),
      hasActionsSidebar: t.default.computed.or(
        "canPublish",
        "canDelete",
        "showSubscriptionBox"
      ),
      breadCrumbs: t.default
        .computed("model.title", function () {
          return [
            { label: "Sutori stories", path: "stories.sutori.index" },
            { label: this.get("model.title") },
          ];
        })
        .readOnly(),
      storiesPromise: t.default
        .computed("model.stories", function () {
          var e = this;
          return o.default.create({
            promise: new t.default.RSVP.Promise(function (t) {
              t(e.get("model.stories"));
            }),
          });
        })
        .readOnly(),
      actions: {
        bannerUploaded: function (e) {
          var t = this.get("model");
          t.set("bannerImageFile", e), t.save();
        },
        bannerDeleted: function () {
          var e = this.get("model");
          e.set("bannerImageFile", null), e.save();
        },
        createNewStory: function () {
          this.transitionToRoute("storyUnit.newStory");
        },
        deleteStoryUnit: function () {
          var e = this,
            t = this.get("model");
          t.destroyRecord()
            .then(function () {
              e
                .get("notifications")
                .showSuccessMessage("The unit has been deleted."),
                e.transitionToRoute("stories.sutori.index");
            })
            .catch(function () {});
        },
        publishStoryUnit: function () {
          var e = this,
            t = this.get("model");
          t.set("isPublished", !0),
            n.default
              .withModel(t, { rollbackOnError: !0 })
              .put(s.default.publish_story_unit_path(t.get("id")))
              .then(function () {
                e.get("notifications").showSuccessMessage(
                  "The unit has been published."
                );
              })
              .catch(function () {});
        },
      },
    });
  }),
  define("frontend/controllers/story", [
    "exports",
    "ember",
    "frontend/utils/tour-step",
    "frontend/mixins/tour-handler",
    "frontend/utils/pollster",
    "frontend/mixins/story-state",
    "frontend/mixins/story-permissions",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Controller.extend(s.default, a.default, i.default, {
      queryParams: ["schoolClassId"],
      schoolClassId: null,
      commandFactory: t.default.inject.service(),
      firstBatchOfCommentsLoaded: !1,
      story: t.default.computed.alias("model"),
      title: t.default.computed.alias("model.title"),
      introductionText: t.default.computed.alias("model.introductionText"),
      errors: t.default.computed.alias("model.errors"),
      hasBanner: t.default.computed.alias("model.hasBanner"),
      bannerImageFile: t.default.computed.alias("model.bannerImageFile"),
      author: t.default.computed.alias("model.author"),
      lessonPlan: t.default.computed.alias("model.lessonPlan"),
      storyUnit: t.default.computed.alias("model.storyUnit"),
      isSutoriStory: t.default.computed.reads("model.isSutoriStory"),
      isEditing: t.default.computed.alias("model.isEditing"),
      isFinished: t.default.computed.alias("model.isFinished"),
      tourName: t.default
        .computed(function () {
          return "story_creation";
        })
        .readOnly(),
      tourSteps: t.default
        .computed("currentUser.{isPersonal,isTeacher}", function () {
          var e = n.default.create({
              title: "Collaborate",
              message:
                "You can provide editing rights to others. Simply add their email address and they will receive a notification.",
              attachTo: ".button-collaborate",
              orientation: "left",
              zIndex: 7,
            }),
            t = [
              n.default.create({
                title: "Welcome to the Sutori creation tool!",
                message:
                  "Please note that every action you take is instantly and automatically saved.",
                attachTo:
                  ".application-header-navigation .navigation__item:first-of-type",
                orientation: "right",
              }),
              n.default.create({
                title: "Add Items",
                message:
                  "There are numerous types of items that can be created. Click on the plus sign to start or check out our <a href='https://www.sutori.com/story/how-to-create-a-story' target='_blank'>tutorial</a>.",
                attachTo: ".button-create-new-item",
                orientation: "left",
                category: "story-items",
              }),
            ];
          return (
            this.get("currentUser.isTeacher")
              ? (t = t.concat([
                  e,
                  n.default.create({
                    title: "Add to My Classes",
                    message:
                      "Select the class(es) and your students will instantly have access to the story.",
                    attachTo: ".button-share-story-with-classes",
                    orientation: "bottom",
                    zIndex: 7,
                  }),
                  n.default.create({
                    title: "Share",
                    message:
                      "Share directly with your students on Google classroom, embed your story into another website or spread the word on social media in a few clicks.",
                    attachTo: ".button-share-story",
                    orientation: "bottom",
                    zIndex: 7,
                  }),
                ]))
              : this.get("currentUser.isPersonal")
              ? (t = t.concat([
                  e,
                  n.default.create({
                    title: "Share",
                    message:
                      "Spread the word on social media and share with a wider audience. You can also embed into another blog or website.",
                    attachTo: ".button-share-story",
                    orientation: "left",
                    zIndex: 7,
                  }),
                ]))
              : this.get("currentUser.isStudent") &&
                (t = t.concat([
                  n.default.create({
                    title: "Submit to Class(es)",
                    message:
                      "Click here to share your work with your teacher(s).",
                    attachTo: ".button-submit-story",
                    orientation: "left",
                    zIndex: 7,
                  }),
                  e,
                ])),
            t.concat([
              n.default.create({
                title: "More Actions",
                message: "Click here to delete, copy or print the story.",
                attachTo: ".secondary-actions button",
                orientation: "left",
                zIndex: 7,
              }),
            ])
          );
        })
        .readOnly(),
      pollster: t.default
        .computed(function () {
          return o.default.create({
            controller: this,
            interval: 30,
            onPoll: function () {
              var e = this,
                n = this.get("controller"),
                s = n.get("schoolClassContext"),
                o = n.get("story");
              if (!t.default.isNone(o) && !t.default.isNone(s)) {
                var a = {
                  story_id: o.get("id"),
                  school_class_id: s.get("id"),
                  last_request_timestamp: this.get("lastRequestTimestamp"),
                };
                n.get("store")
                  .query("item-comment", a)
                  .then(function (t) {
                    n.set("firstBatchOfCommentsLoaded", !0),
                      e.set("lastRequestTimestamp", t.meta.request_timestamp);
                  });
              }
            },
            onStop: function () {
              this.set("lastRequestTimestamp", null);
            },
          });
        })
        .readOnly(),
      changePollsterState: t.default.observer(
        "isActive",
        "canShowComments",
        function () {
          t.default.run.once(this, this._changePollsterState);
        }
      ),
      _hideComments: t.default.observer("canShowComments", function () {
        this.get("canShowComments") ||
          this.set("firstBatchOfCommentsLoaded", !1);
      }),
      currentUser: t.default.computed.reads("session.currentUser"),
      canSeeInteractiveTour: t.default.computed(
        "currentUser.{isPersonal,isTeacher,isStudent}",
        "canModifyStory",
        function () {
          return (
            this.get("canModifyStory") &&
            (this.get("currentUser.isTeacher") ||
              this.get("currentUser.isPersonal") ||
              this.get("currentUser.isStudent"))
          );
        }
      ),
      canNotPrintMessage: t.default.computed(
        "currentUser.{isPersonal,isTeacher,isUnassigned,isStudent}",
        function () {
          var e = this.get("currentUser");
          return e.get("isPersonal") ||
            e.get("isTeacher") ||
            e.get("isUnassigned")
            ? "Upgrade for beautiful, one-column prints."
            : e.get("isStudent")
            ? "Your teacher must upgrade for beautiful, one-column prints."
            : (this.get("logger").exception(
                new Error(
                  'The "can not print message" can only be shown to teachers, students and unassigned users.'
                )
              ),
              null);
        }
      ),
      schoolClassContext: t.default.computed(
        "schoolClassId",
        "currentUser.schoolClasses.@each.id",
        function () {
          var e = this.get("schoolClassId");
          if (!t.default.isNone(e)) {
            var n = this.get("currentUser.schoolClasses");
            if (!t.default.isEmpty(n)) return n.findBy("id", e);
          }
          return null;
        }
      ),
      schoolClassesSharedWith: t.default.computed.mapBy(
        "model.storyShares",
        "schoolClass"
      ),
      isSharedWithContextSchoolClass: t.default.computed(
        "model",
        "schoolClassesSharedWith.[]",
        "schoolClassContext",
        function () {
          return this.get("model").isSharedWithTheWholeClass(
            this.get("schoolClassContext")
          );
        }
      ),
      canShowComments: t.default.computed.reads(
        "isSharedWithContextSchoolClass"
      ),
      showComments: t.default.computed.and(
        "canShowComments",
        "firstBatchOfCommentsLoaded"
      ),
      _changePollsterState: function () {
        this.get("isActive") && this.get("canShowComments")
          ? this.get("pollster").start()
          : this.get("pollster").stop();
      },
      actions: {
        transitionToRoute: function () {
          this.transitionToRoute.apply(this, arguments);
        },
      },
    });
  }),
  define("frontend/controllers/student-registration", [
    "exports",
    "ember",
    "frontend/mixins/registration-controller",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend(n.default, {
      singleSignOnProviders: ["google", "edmodo"],
    });
  }),
  define("frontend/controllers/student-story", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({
      status: t.default.computed(
        "model.author.isStudent",
        "model.isEditing",
        "model.isFinished",
        function () {
          if (this.get("model.author.isStudent")) {
            if (this.get("model.isEditing")) return "In progress";
            if (this.get("model.isFinished")) return "Completed";
          }
          return "";
        }
      ),
    });
  }),
  define("frontend/controllers/student", [
    "exports",
    "ember",
    "frontend/utils/sortable-table-column",
    "frontend/presenters/story",
    "frontend/utils/utility",
  ], function (e, t, n, s, o) {
    e.default = t.default.Controller.extend({
      queryParams: ["schoolClassId"],
      storiesColumns: t.default
        .computed(function () {
          return [
            n.default.create({ label: "Story name", attribute: "title" }),
            n.default.create({ label: "Shared with", attribute: "sharedWith" }),
            n.default.create({ label: "Last edited", attribute: "updatedAt" }),
          ];
        })
        .readOnly(),
      fullName: t.default.computed.alias("model.fullName"),
      username: t.default.computed.alias("model.username"),
      sortStoriesBy: ["title:asc"],
      sortOtherStudentsBy: ["fullName:asc"],
      selectedStories: [],
      modalVisible: !1,
      _schoolClassPromise: t.default.computed("schoolClassId", function () {
        var e = this.get("schoolClassId");
        if (!t.default.isNone(e))
          return this.store.findRecord("school-class", e);
      }),
      schoolClass: t.default.computed.reads("_schoolClassPromise.content"),
      hasStories: t.default.computed.notEmpty("_stories"),
      _presentableStories: t.default.computed(
        "_stories.[]",
        "schoolClass",
        function () {
          return s.default.present(
            this.get("_stories"),
            this.get("schoolClass")
          );
        }
      ),
      sortedPresentableStories: t.default.computed.sort(
        "_presentableStories",
        "sortStoriesBy"
      ),
      studentsPromise: t.default.computed.reads("schoolClass.users"),
      orderedOtherStudents: t.default.computed(
        "_sortedOtherStudents.[]",
        "model",
        function () {
          var e = this.get("_sortedOtherStudents");
          if (t.default.isNone(e)) return [];
          var n = Math.min(Math.floor((e.length - 1) / 2), 2),
            s = e.indexOf(this.get("model")) - n;
          return s < 0 && (s += e.length), e.slice(s).concat(e.slice(0, s));
        }
      ),
      breadCrumbs: t.default.computed(
        "fullName",
        "schoolClass",
        "schoolClass.name",
        function () {
          return [
            { label: "Teach", path: "schoolClasses" },
            {
              label: this.get("schoolClass.name"),
              path: "schoolClass",
              model: this.get("schoolClass"),
            },
            { label: this.get("fullName") },
          ];
        }
      ),
      _stories: t.default.computed.alias("storiesPromise.content"),
      _sortedOtherStudents: t.default.computed.sort(
        "schoolClass.students",
        "sortOtherStudentsBy"
      ),
      actions: {
        editStudent: function () {
          this.set("modalVisible", !0);
        },
        studentRemoved: function (e) {
          this.transitionToRoute("schoolClass", e);
        },
        changedStorySelection: function (e, t) {
          o.default.setElementMembershipInList(
            this.get("selectedStories"),
            e,
            t
          );
        },
      },
    });
  }),
  define("frontend/controllers/styleguide", [
    "exports",
    "ember",
    "frontend/models/premium-subscription",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend({
      store: t.default.inject.service(),
      teamMembers: t.default.computed(function () {
        return [
          {
            name: "Thomas Ketchell",
            position: "CEO",
            profilePictureUrl:
              "https://d1ox703z8b11rg.cloudfront.net/images/about/thomas_ketchell-cd25a0058aeda10128430d2e1186abb6.jpg",
            description:
              "Just like Sutori, there have been countless iterations of myself before today's end-product. From cleaning toilets to writing high-brow pompous philosophical essays, every metamorphosis is part of whom I am today and enabling me to attain the fancy job title of CSO of Sutori.",
          },
          {
            name: "Yoran Brondsema",
            position: "CTO",
            profilePictureUrl:
              "https://d1ox703z8b11rg.cloudfront.net/images/about/yoran_brondsema-b9852e7cd115970c3f7d6e52bd84f9c9.jpg",
            description:
              "Just like Sutori, there have been countless iterations of myself before today's end-product. From cleaning toilets to writing high-brow pompous philosophical essays, every metamorphosis is part of whom I am today and enabling me to attain the fancy job title of CSO of Sutori.",
          },
        ];
      }),
      myTripInAsiaStory: t.default.computed(function () {
        return this.get("store").createRecord("story", {
          title: "My trip in Asia | Spring 2016",
          author: this.get("store").createRecord("user", {
            firstName: "Jeremy",
            lastName: "Hampton",
          }),
          bannerImageFile: this._getImageFileFactory().buildImageFile(
            "https://d1ox703z8b11rg.cloudfront.net/images/styleguide/story-box-1-ebfa82d7d979f60abc74c9c97136d103.jpg",
            951,
            628
          ),
        });
      }),
      plantsInCubaStory: t.default.computed(function () {
        var e = this,
          t = this.get("store").createRecord("story", {
            title:
              "The medical benefits of plants in Cuba and the Dominican Republic",
            author: this.get("store").createRecord("user", {
              firstName: "Oscar",
              lastName: "Martinez",
            }),
            bannerImageFile: this._getImageFileFactory().buildImageFile(
              "https://d1ox703z8b11rg.cloudfront.net/images/styleguide/story-box-2-9453004944ec36c5487f2a04bd444e88.jpg",
              951,
              628
            ),
          }),
          n = [
            this.get("store").createRecord("user", {
              firstName: "Kelly",
              lastName: "Kapoor",
            }),
            this.get("store").createRecord("user", {
              firstName: "Pam",
              lastName: "Beesly",
            }),
            this.get("store").createRecord("user", {
              firstName: "Oscar",
              lastName: "Martinez",
            }),
          ];
        return (
          n.forEach(function (n) {
            t.get("storyCollaborations").pushObject(
              e.get("store").createRecord("story-collaboration", { user: n })
            );
          }),
          t
        );
      }),
      ancientCivsStory: t.default.computed(function () {
        return this.get("store").createRecord("story", {
          title: "Ancient Civilizations",
          isFree: !0,
          author: this.get("store").createRecord("user", { type: "editor" }),
          bannerImageFile: this._getImageFileFactory().buildImageFile(
            "https://d1ox703z8b11rg.cloudfront.net/images/styleguide/story-box-3-666529c7ebb98dc214a91a82fbf2b4b1.jpg",
            951,
            628
          ),
        });
      }),
      stories: t.default
        .computed(function () {
          return [
            this.get("myTripInAsiaStory"),
            this.get("plantsInCubaStory"),
            this.get("ancientCivsStory"),
          ];
        })
        .readOnly(),
      unlimitedPlan: t.default
        .computed(function () {
          return t.default.copy(n.default.V3_UNLIMITED_99_PLAN);
        })
        .readOnly(),
      premiumPlan: t.default
        .computed(function () {
          return t.default.copy(n.default.V3_PREMIUM_49_PLAN);
        })
        .readOnly(),
      _getImageFileFactory: function () {
        return t.default.getOwner(this).lookup("factory:image-file");
      },
    });
  }),
  define("frontend/controllers/teacher-registration", [
    "exports",
    "ember",
    "frontend/mixins/registration-controller",
  ], function (e, t, n) {
    e.default = t.default.Controller.extend(n.default, {
      singleSignOnProviders: ["google", "edmodo"],
    });
  }),
  define("frontend/controllers/unsubscribe", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Controller.extend({ queryParams: ["token"] });
  }),
  define("frontend/controllers/upgrade", ["exports", "ember"], function (e, t) {
    var n = "print-story",
      s = "copy-premium-sutori-story",
      o = "add-collaborators",
      a = "sutori-subscription-box-to-unlimited",
      i = "share-premium-sutori-story-with-classes",
      l = t.default.Controller.extend({
        queryParams: ["origin"],
        origin: null,
      });
    l.reopenClass({
      ORIGIN_PRINT_STORY: n,
      ORIGIN_COPY_PREMIUM_SUTORI_STORY: s,
      ORIGIN_ADD_COLLABORATORS: o,
      ORIGIN_SUTORI_SUBSCRIPTION_BOX_TO_UNLIMITED: a,
      ORIGIN_SHARE_PREMIUM_SUTORI_STORY_WITH_CLASSES: i,
    }),
      (e.default = l);
  }),
  define("frontend/controllers/user", ["exports", "ember"], function (e, t) {
    e.default = t.default.Controller.extend({
      publicStoriesPromise: t.default.computed.reads("model.stories"),
      publicStories: t.default.computed.filterBy(
        "publicStoriesPromise.content",
        "isApproved"
      ),
      sortPublicStoriesBy: ["createdAt:desc"],
    });
  }),
  define("frontend/factories/image-file", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Object.extend({
      store: t.default.inject.service(),
      buildImageFile: function (e, t, n) {
        return this.get("store").createRecord("image-file", {
          imageFileVersions: [
            this.get("store").createRecord("image-file-version", {
              url: e,
              width: t,
              height: n,
            }),
          ],
        });
      },
    });
  }),
  define("frontend/factories/item", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.extend({
      store: t.default.inject.service(),
      createItem: function (e) {
        var t = this.get("store").createRecord("item", e),
          n = t.get("isQuizQuestionMultipleChoice"),
          s = t.get("isQuizQuestionMatching");
        return (
          (n || s) &&
            t.setProperties({ quizQuestion: "", quizExplanation: "" }),
          n
            ? (this.createQuizQuestionMultipleChoiceAnswer(t),
              this.createQuizQuestionMultipleChoiceAnswer(t))
            : s &&
              (this.createQuizQuestionMatchingPair(t),
              this.createQuizQuestionMatchingPair(t)),
          t
        );
      },
      createQuizQuestionMultipleChoiceAnswer: function (e) {
        return this.get(
          "store"
        ).createRecord("quizQuestionMultipleChoiceAnswer", {
          item: e,
          text: "",
          correct: !1,
        });
      },
      createQuizQuestionMatchingPair: function (e) {
        return this.get("store").createRecord("quizQuestionMatchingPair", {
          item: e,
          left: "",
          right: "",
        });
      },
    });
  }),
  define("frontend/factories/story", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.extend({
      store: t.default.inject.service(),
      createSutoriStory: function (e, t) {
        return this.get("store").createRecord("story", {
          storyUnit: e,
          author: t,
        });
      },
      createUserStory: function (e) {
        return this.get("store").createRecord("story", { author: e });
      },
    });
  }),
  define("frontend/helpers/and", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/and",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.andHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.andHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/app-version", [
    "exports",
    "ember",
    "frontend/config/environment",
  ], function (e, t, n) {
    function s() {
      return o;
    }
    e.appVersion = s;
    var o = n.default.APP.version;
    e.default = t.default.Helper.helper(s);
  }),
  define("frontend/helpers/cancel-all", [
    "exports",
    "ember",
    "ember-concurrency/-helpers",
  ], function (e, t, n) {
    function s(e) {
      var s = e[0];
      return (
        (s && "function" == typeof s.cancelAll) ||
          t.default.assert(
            "The first argument passed to the `cancel-all` helper should be a Task or TaskGroup (without quotes); you passed " +
              s,
            !1
          ),
        (0, n.taskHelperClosure)("cancelAll", e)
      );
    }
    (e.cancelHelper = s), (e.default = t.default.Helper.helper(s));
  });
define("frontend/helpers/email-help", [
  "exports",
  "ember",
  "frontend/helpers/email-to",
], function (e, t, n) {
  function s() {
    return (0, n.emailTo)(["help@sutori.com"]);
  }
  (e.emailHelp = s), (e.default = t.default.Helper.helper(s));
});
define("frontend/helpers/email-info", [
  "exports",
  "ember",
  "frontend/helpers/email-to",
  "frontend/utils/sutori-info",
], function (e, t, n, s) {
  function o(e, t) {
    var o = a(e, 1),
      i = o[0],
      l = void 0 === i ? null : i;
    return (0, n.emailTo)([s.default.EMAIL_INFO, l], t);
  }
  var a = (function () {
    function e(e, t) {
      var n = [],
        s = !0,
        o = !1,
        a = void 0;
      try {
        for (
          var i, l = e[Symbol.iterator]();
          !(s = (i = l.next()).done) && (n.push(i.value), !t || n.length !== t);
          s = !0
        );
      } catch (e) {
        (o = !0), (a = e);
      } finally {
        try {
          !s && l.return && l.return();
        } finally {
          if (o) throw a;
        }
      }
      return n;
    }
    return function (t, n) {
      if (Array.isArray(t)) return t;
      if (Symbol.iterator in Object(t)) return e(t, n);
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance"
      );
    };
  })();
  (e.emailInfo = o), (e.default = t.default.Helper.helper(o));
}),
  define("frontend/helpers/email-sales", [
    "exports",
    "ember",
    "frontend/helpers/email-to",
  ], function (e, t, n) {
    function s(e, t) {
      var s = o(e, 1),
        a = s[0],
        i = void 0 === a ? null : a;
      return (0, n.emailTo)(["sales@sutori.com", i], t);
    }
    var o = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    (e.emailSales = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/email-security", [
    "exports",
    "ember",
    "frontend/helpers/email-to",
  ], function (e, t, n) {
    function s() {
      return (0, n.emailTo)(["security@sutori.com"]);
    }
    (e.emailSecurity = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/email-to", ["exports", "ember"], function (e, t) {
    function n(e) {
      var n = s(e, 2),
        o = n[0],
        a = n[1],
        i = void 0 === a ? null : a,
        l =
          arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
        r = document.createElement("a");
      return (
        r.setAttribute("href", "mailto:" + o),
        (r.innerHTML = i || o),
        l.classNames && r.setAttribute("class", l.classNames),
        new t.default.String.htmlSafe(r.outerHTML)
      );
    }
    var s = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    (e.emailTo = n), (e.default = t.default.Helper.helper(n));
  }),
  define("frontend/helpers/eq", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/equal",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.equalHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.equalHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/external-link", ["exports", "ember"], function (
    e,
    t
  ) {
    var n = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    e.default = t.default.Helper.helper(function (e, s) {
      var o = n(e, 2),
        a = o[0],
        i = o[1],
        l = s.classNames,
        r = void 0 === l ? "" : l;
      return new t.default.String.htmlSafe(
        '<a href="' +
          a +
          '" class="' +
          r +
          '" target="_blank" rel="noopener noreferrer">' +
          i +
          "</a>"
      );
    });
  }),
  define("frontend/helpers/format-date", [
    "exports",
    "ember",
    "frontend/utils/date-utils",
  ], function (e, t, n) {
    var s = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    e.default = t.default.Helper.helper(function (e) {
      var t = s(e, 2),
        o = t[0],
        a = t[1];
      return n.default.formatDate(o, a);
    });
  }),
  define("frontend/helpers/format-number", [
    "exports",
    "ember",
    "npm:numeral",
  ], function (e, t, n) {
    function s(e) {
      var t = o(e, 2),
        s = t[0],
        a = t[1];
      return (0, n.default)(s).format(a);
    }
    var o = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    (e.formatNumber = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/gt", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/gt",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.gtHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.gtHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/gte", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/gte",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.gteHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.gteHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/indefinitize", [
    "exports",
    "ember",
    "npm:indefinite",
  ], function (e, t, n) {
    function s(e) {
      var s = o(e, 1),
        a = s[0];
      return t.default.isPresent(a) ? (0, n.default)(a) : "";
    }
    var o = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    (e.indefinitize = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/inflect", [
    "exports",
    "ember",
    "frontend/utils/inflect",
  ], function (e, t, n) {
    var s = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    e.default = t.default.Helper.helper(function (e) {
      var o = s(e, 2),
        a = o[0],
        i = o[1];
      return new t.default.String.htmlSafe((0, n.default)(a, i));
    });
  }),
  define("frontend/helpers/is-array", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/is-array",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.isArrayHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.isArrayHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/is-equal", ["exports", "ember"], function (e, t) {
    var n = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    e.default = t.default.Helper.helper(function (e) {
      var t = n(e, 2),
        s = t[0],
        o = t[1];
      return s === o;
    });
  }),
  define("frontend/helpers/lf-lock-model", [
    "exports",
    "liquid-fire/helpers/lf-lock-model",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    }),
      Object.defineProperty(e, "lfLockModel", {
        enumerable: !0,
        get: function () {
          return t.lfLockModel;
        },
      });
  }),
  define("frontend/helpers/lf-or", [
    "exports",
    "liquid-fire/helpers/lf-or",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    }),
      Object.defineProperty(e, "lfOr", {
        enumerable: !0,
        get: function () {
          return t.lfOr;
        },
      });
  }),
  define("frontend/helpers/link-to-twitter", [
    "exports",
    "ember",
    "frontend/utils/sutori-info",
  ], function (e, t, n) {
    function s() {
      return new t.default.String.htmlSafe(
        '<a href="' +
          n.SOCIAL_TWITTER_URL +
          '">@' +
          n.SOCIAL_TWITTER_HANDLE +
          "</a>"
      );
    }
    (e.linkToTwitter = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/lt", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/lt",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.ltHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.ltHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/lte", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/lte",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.lteHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.lteHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/media-time-format", [
    "exports",
    "ember",
    "npm:moment",
  ], function (e, t, n) {
    e.default = t.default.Helper.helper(function (e) {
      var s = "";
      return (
        t.default.isNone(e) || (s = (0, n.default)(1e3 * e).format("mm:ss")),
        new t.default.String.htmlSafe(
          "<span class='media-time'>" + s + "</span>"
        )
      );
    });
  }),
  define("frontend/helpers/not-eq", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/not-equal",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.notEqualHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.notEqualHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/not", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/not",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.notHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.notHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/or", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/or",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.orHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.orHelper)),
      (e.default = s);
  }),
  define("frontend/helpers/perform", [
    "exports",
    "ember",
    "ember-concurrency/-helpers",
  ], function (e, t, n) {
    function s(e, t) {
      return (0, n.taskHelperClosure)("perform", e, t);
    }
    (e.performHelper = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/permission-check", ["exports", "ember"], function (
    e,
    t
  ) {
    var n = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    e.default = t.default.Helper.helper(function (e) {
      var s = n(e, 2),
        o = s[0],
        a = s[1],
        i = a.get("guard"),
        l = a.get("model");
      return !t.default.isNone(i) && i.permits(o, l);
    });
  }),
  define("frontend/helpers/pluralize", [
    "exports",
    "ember-inflector/lib/helpers/pluralize",
  ], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/helpers/route-action", [
    "exports",
    "ember-route-action-helper/helpers/route-action",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/helpers/sanitize-html", [
    "exports",
    "ember-sanitize/utils/sanitize",
    "ember-getowner-polyfill",
    "ember",
  ], function (e, t, n, s) {
    e.default = s.default.Helper.extend({
      compute: function (e) {
        var o = void 0,
          a = e[1];
        a && (o = (0, n.default)(this).lookup("sanitizer:" + a));
        var i = (0, t.sanitize)(e[0], o);
        return new s.default.String.htmlSafe(i);
      },
    });
  }),
  define("frontend/helpers/singularize", [
    "exports",
    "ember-inflector/lib/helpers/singularize",
  ], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/helpers/task", ["exports", "ember"], function (e, t) {
    function n(e) {
      if (Array.isArray(e)) {
        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
        return n;
      }
      return Array.from(e);
    }
    function s(e) {
      return Array.isArray(e) ? e : Array.from(e);
    }
    function o(e) {
      var t = s(e),
        o = t[0],
        a = t.slice(1);
      return o._curry.apply(o, n(a));
    }
    e.default = t.default.Helper.helper(o);
  }),
  define("frontend/helpers/time-ago", [
    "exports",
    "ember",
    "frontend/utils/date-utils",
  ], function (e, t, n) {
    function s(e) {
      var t = o(e, 1),
        s = t[0];
      return n.default.fromNow(s);
    }
    var o = (function () {
      function e(e, t) {
        var n = [],
          s = !0,
          o = !1,
          a = void 0;
        try {
          for (
            var i, l = e[Symbol.iterator]();
            !(s = (i = l.next()).done) &&
            (n.push(i.value), !t || n.length !== t);
            s = !0
          );
        } catch (e) {
          (o = !0), (a = e);
        } finally {
          try {
            !s && l.return && l.return();
          } finally {
            if (o) throw a;
          }
        }
        return n;
      }
      return function (t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError(
          "Invalid attempt to destructure non-iterable instance"
        );
      };
    })();
    (e.timeAgo = s), (e.default = t.default.Helper.helper(s));
  }),
  define("frontend/helpers/xor", [
    "exports",
    "ember",
    "ember-truth-helpers/helpers/xor",
  ], function (e, t, n) {
    var s = null;
    t.default.Helper
      ? (s = t.default.Helper.helper(n.xorHelper))
      : t.default.HTMLBars.makeBoundHelper &&
        (s = t.default.HTMLBars.makeBoundHelper(n.xorHelper)),
      (e.default = s);
  }),
  define("frontend/initializers/allow-link-action", [
    "exports",
    "ember-link-action/initializers/allow-link-action",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    }),
      Object.defineProperty(e, "initialize", {
        enumerable: !0,
        get: function () {
          return t.initialize;
        },
      });
  }),
  define("frontend/initializers/analytics", ["exports"], function (e) {
    e.default = {
      name: "analytics",
      initialize: function (e) {
        e.inject("controller", "analytics", "service:analytics"),
          e.inject("route", "analytics", "service:analytics");
      },
    };
  }),
  define("frontend/initializers/app-version", [
    "exports",
    "ember-cli-app-version/initializer-factory",
    "frontend/config/environment",
  ], function (e, t, n) {
    var s = n.default.APP,
      o = s.name,
      a = s.version;
    e.default = { name: "App Version", initialize: (0, t.default)(o, a) };
  }),
  define("frontend/initializers/bread-crumbs", ["exports"], function (e) {
    e.default = {
      name: "bread-crumbs",
      initialize: function (e) {
        e.inject("component:bread-crumbs", "router", "router:main"),
          e.inject(
            "component:bread-crumbs",
            "applicationController",
            "controller:application"
          );
      },
    };
  }),
  define("frontend/initializers/component", ["exports"], function (e) {
    e.default = {
      name: "component",
      initialize: function (e) {
        e.inject("component", "store", "service:store");
      },
    };
  }),
  define("frontend/initializers/container-debug-adapter", [
    "exports",
    "ember-resolver/container-debug-adapter",
  ], function (e, t) {
    e.default = {
      name: "container-debug-adapter",
      initialize: function () {
        var e = arguments[1] || arguments[0];
        e.register("container-debug-adapter:main", t.default),
          e.inject(
            "container-debug-adapter:main",
            "namespace",
            "application:main"
          );
      },
    };
  }),
  define("frontend/initializers/data-adapter", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = {
      name: "data-adapter",
      before: "store",
      initialize: t.default.K,
    };
  }),
  define("frontend/initializers/ember-concurrency", [
    "exports",
    "ember-concurrency",
  ], function (e, t) {
    e.default = { name: "ember-concurrency", initialize: function () {} };
  }),
  define("frontend/initializers/ember-data", [
    "exports",
    "ember-data/setup-container",
    "ember-data/-private/core",
  ], function (e, t, n) {
    e.default = { name: "ember-data", initialize: t.default };
  }),
  define("frontend/initializers/ember-faker", ["exports"], function (e) {
    function t() {}
    (e.initialize = t), (e.default = { name: "ember-faker", initialize: t });
  }),
  define("frontend/initializers/ember-keyboard-first-responder-inputs", [
    "exports",
    "ember-keyboard/initializers/ember-keyboard-first-responder-inputs",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    }),
      Object.defineProperty(e, "initialize", {
        enumerable: !0,
        get: function () {
          return t.initialize;
        },
      });
  }),
  define("frontend/initializers/export-application-global", [
    "exports",
    "ember",
    "frontend/config/environment",
  ], function (e, t, n) {
    function s() {
      var e = arguments[1] || arguments[0];
      if (n.default.exportApplicationGlobal !== !1) {
        var s;
        if ("undefined" != typeof window) s = window;
        else if ("undefined" != typeof global) s = global;
        else {
          if ("undefined" == typeof self) return;
          s = self;
        }
        var o,
          a = n.default.exportApplicationGlobal;
        (o =
          "string" == typeof a
            ? a
            : t.default.String.classify(n.default.modulePrefix)),
          s[o] ||
            ((s[o] = e),
            e.reopen({
              willDestroy: function () {
                this._super.apply(this, arguments), delete s[o];
              },
            }));
      }
    }
    (e.initialize = s),
      (e.default = { name: "export-application-global", initialize: s });
  }),
  define("frontend/initializers/factory", [
    "exports",
    "frontend/factories/story",
    "frontend/factories/item",
    "frontend/factories/image-file",
  ], function (e, t, n, s) {
    e.default = {
      name: "factory",
      initialize: function (e) {
        e.register("factory:story", t.default),
          e.register("factory:item", n.default),
          e.register("factory:image-file", s.default);
      },
    };
  }),
  define("frontend/initializers/google-maps", [
    "exports",
    "frontend/config/environment",
    "frontend/utils/dom",
  ], function (e, t, n) {
    var s =
        "https://maps.googleapis.com/maps/api/js?libraries=places&language=en&key=" +
        t.default.APP.GOOGLE_API_KEY,
      o = "google-maps-api-script";
    e.default = {
      name: "google-maps",
      initialize: function () {
        if ("test" !== t.default.environment) {
          var e = (0, n.createScriptTag)(s, o);
          $("body").append(e);
        }
      },
    };
  }),
  define("frontend/initializers/guard", ["exports"], function (e) {
    e.default = {
      name: "guard",
      initialize: function (e) {
        e.inject("controller", "guard", "service:guard"),
          e.inject("component", "guard", "service:guard"),
          e.inject("route", "guard", "service:guard"),
          e.inject("view", "guard", "service:guard");
      },
    };
  }),
  define("frontend/initializers/head-tags", ["exports"], function (e) {
    function t() {
      var e = arguments[1] || arguments[0];
      e.inject("service:head-tags", "router", "router:main");
    }
    (e.initialize = t), (e.default = { name: "head-tags", initialize: t });
  }),
  define("frontend/initializers/initialize-torii-callback", [
    "exports",
    "torii/redirect-handler",
  ], function (e, t) {
    e.default = {
      name: "torii-callback",
      before: "torii",
      initialize: function (e) {
        arguments[1] && (e = arguments[1]),
          e.deferReadiness(),
          t.default.handle(window).catch(function () {
            e.advanceReadiness();
          });
      },
    };
  }),
  define("frontend/initializers/initialize-torii-session", [
    "exports",
    "torii/bootstrap/session",
    "torii/configuration",
  ], function (e, t, n) {
    e.default = {
      name: "torii-session",
      after: "torii",
      initialize: function (e) {
        arguments[1] && (e = arguments[1]);
        var s = (0, n.getConfiguration)();
        if (s.sessionServiceName) {
          (0, t.default)(e, s.sessionServiceName);
          var o = "service:" + s.sessionServiceName;
          e.inject("adapter", s.sessionServiceName, o);
        }
      },
    };
  }),
  define("frontend/initializers/initialize-torii", [
    "exports",
    "torii/bootstrap/torii",
    "torii/configuration",
    "frontend/config/environment",
  ], function (e, t, n, s) {
    var o = {
      name: "torii",
      initialize: function (e) {
        arguments[1] && (e = arguments[1]),
          (0, n.configure)(s.default.torii || {}),
          (0, t.default)(e),
          e.inject("route", "torii", "service:torii");
      },
    };
    e.default = o;
  }),
  define("frontend/initializers/injectStore", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = {
      name: "injectStore",
      before: "store",
      initialize: t.default.K,
    };
  }),
  define("frontend/initializers/liquid-fire", [
    "exports",
    "liquid-fire/ember-internals",
  ], function (e, t) {
    (0, t.initialize)(),
      (e.default = { name: "liquid-fire", initialize: function () {} });
  }),
  define("frontend/initializers/logger", ["exports"], function (e) {
    e.default = {
      name: "logger",
      initialize: function (e) {
        e.inject("model", "logger", "service:logger"),
          e.inject("controller", "logger", "service:logger"),
          e.inject("route", "logger", "service:logger"),
          e.inject("view", "logger", "service:logger"),
          e.inject("component", "logger", "service:logger"),
          e.inject("router", "logger", "service:logger");
      },
    };
  }),
  define("frontend/initializers/notifications", ["exports"], function (e) {
    e.default = {
      name: "notifications",
      initialize: function (e) {
        e.inject(
          "service:notifications",
          "applicationController",
          "controller:application"
        );
      },
    };
  }),
  define("frontend/initializers/request-messages-object", [
    "exports",
    "frontend/utils/request-messages-object",
  ], function (e, t) {
    e.default = {
      name: "request-messages-object",
      initialize: function (e) {
        e.register("util:request-messages-object", t.default);
      },
    };
  }),
  define("frontend/initializers/session", ["exports"], function (e) {
    e.default = {
      name: "session",
      initialize: function (e) {
        e.inject("controller", "session", "service:session"),
          e.inject("route", "session", "service:session");
      },
    };
  }),
  define("frontend/initializers/setup-sanitizers", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = {
      name: "ember-sanitize-setup-sanitizers",
      initialize: function (e) {
        e.registerOptionsForType
          ? e.registerOptionsForType("sanitizer", { instantiate: !1 })
          : e.optionsForType("sanitizer", { instantiate: !1 });
      },
    };
  }),
  define("frontend/initializers/store", ["exports", "ember"], function (e, t) {
    e.default = { name: "store", after: "ember-data", initialize: t.default.K };
  }),
  define("frontend/initializers/stripe", [
    "exports",
    "frontend/config/environment",
  ], function (e, t) {
    e.default = {
      name: "stripe",
      initialize: function () {
        window.Stripe &&
          Stripe.setPublishableKey(t.default.APP.STRIPE_PUBLISHABLE_KEY);
      },
    };
  }),
  define("frontend/initializers/transforms", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = {
      name: "transforms",
      before: "store",
      initialize: t.default.K,
    };
  }),
  define("frontend/initializers/truth-helpers", [
    "exports",
    "ember",
    "ember-truth-helpers/utils/register-helper",
    "ember-truth-helpers/helpers/and",
    "ember-truth-helpers/helpers/or",
    "ember-truth-helpers/helpers/equal",
    "ember-truth-helpers/helpers/not",
    "ember-truth-helpers/helpers/is-array",
    "ember-truth-helpers/helpers/not-equal",
    "ember-truth-helpers/helpers/gt",
    "ember-truth-helpers/helpers/gte",
    "ember-truth-helpers/helpers/lt",
    "ember-truth-helpers/helpers/lte",
  ], function (e, t, n, s, o, a, i, l, r, u, c, d, m) {
    function f() {
      t.default.Helper ||
        ((0, n.registerHelper)("and", s.andHelper),
        (0, n.registerHelper)("or", o.orHelper),
        (0, n.registerHelper)("eq", a.equalHelper),
        (0, n.registerHelper)("not", i.notHelper),
        (0, n.registerHelper)("is-array", l.isArrayHelper),
        (0, n.registerHelper)("not-eq", r.notEqualHelper),
        (0, n.registerHelper)("gt", u.gtHelper),
        (0, n.registerHelper)("gte", c.gteHelper),
        (0, n.registerHelper)("lt", d.ltHelper),
        (0, n.registerHelper)("lte", m.lteHelper));
    }
    (e.initialize = f), (e.default = { name: "truth-helpers", initialize: f });
  }),
  define("frontend/instance-initializers/browser/head", [
    "exports",
    "ember",
    "frontend/config/environment",
  ], function (e, t, n) {
    function s(e) {
      if (
        n.default["ember-cli-head"] &&
        n.default["ember-cli-head"].suppressBrowserRender
      )
        return !0;
      t.default
        .$('meta[name="ember-cli-head-start"]')
        .nextUntil('meta[name="ember-cli-head-end"] ~')
        .addBack()
        .remove();
      var s = e.lookup ? e : e.container,
        o = s.lookup("component:head-layout");
      o.appendTo(document.head);
    }
    (e.initialize = s), (e.default = { name: "head-browser", initialize: s });
  }),
  define("frontend/instance-initializers/ember-data", [
    "exports",
    "ember-data/-private/instance-initializers/initialize-store-service",
  ], function (e, t) {
    e.default = { name: "ember-data", initialize: t.default };
  }),
  define("frontend/instance-initializers/error-hooks", [
    "exports",
    "ember",
    "frontend/utils/http-status-codes",
  ], function (e, t, n) {
    function s(e) {
      return (
        t.default.isPresent(e) &&
        t.default.isNone(e.isAjaxResponseError) &&
        !a.includes(e.message)
      );
    }
    var o = [
        0,
        n.UNAUTHORIZED,
        n.FORBIDDEN,
        n.NOT_FOUND,
        n.PRECONDITION_FAILED,
        n.URI_TOO_LONG,
        n.UNPROCESSABLE_ENTITY,
        n.INTERNAL_SERVER_ERROR,
      ],
      a = ["TransitionAborted"],
      i = !1;
    e.default = {
      name: "error-hooks",
      initialize: function (e) {
        var n = this,
          s = e.lookup("service:analytics"),
          o = e.lookup("service:logger");
        i ||
          t.default.isNone($) ||
          t.default.isNone($(document)) ||
          ((t.default.onerror = function (e) {
            n.logErrorIfNotAjax(o, e);
          }),
          t.default.RSVP.on("error", function (e) {
            n.logErrorIfNotAjax(o, e);
          }),
          $(document).ajaxError(function (e, t, a) {
            n.handleAjaxError(o, s, t, a);
          }),
          (i = !0));
      },
      logErrorIfNotAjax: function (e, t) {
        s(t) && e.exception(t);
      },
      handleAjaxError: function (e, n, s, a) {
        t.default.run(function () {
          var i = null,
            l = s.responseText || "response field is not set for jqXHR";
          if (s.responseJSON) {
            var r = s.responseJSON;
            t.default.isPresent(r.errors)
              ? ((i = r.errors),
                (l = "AJAX request failed: " + i[0].messages[0]))
              : t.default.isPresent(r.error) &&
                ((i = r.error), (l = "AJAX request failed: " + i.message));
          }
          o.includes(s.status) ||
            (e.exception(new Error(l), { jqxhr: s }),
            n.trackEvent("AJAX Error", {
              Url: a.url,
              Type: a.type,
              "Response errors": i,
              "Response text": s.responseText,
              Status: s.status,
            }));
        });
      },
    };
  }),
  define("frontend/instance-initializers/head-tags", ["exports"], function (e) {
    function t(e) {
      var t = e.lookup ? e : e.container,
        n = t.lookup("service:head-tags");
      n.get("router").on("didTransition", function () {
        n.collectHeadTags();
      });
    }
    (e.initialize = t), (e.default = { name: "head-tags", initialize: t });
  }),
  define("frontend/instance-initializers/iframe-resizer", [
    "exports",
    "frontend/utils/dom",
    "ember",
  ], function (e, t, n) {
    e.default = {
      name: "iframe-resizer",
      initialize: function (e) {
        var s = e.lookup("service:embed");
        window.iFrameResizer = {
          readyCallback: function () {
            n.default.run(function () {
              s.set("isEmbeddedPage", !0);
            }),
              "parentIFrame" in window &&
                window.parentIFrame.getPageInfo(function (e) {
                  n.default.run(function () {
                    s.set(
                      "parentIFramePageInfo",
                      n.default.Object.create({
                        viewportHeight: e.clientHeight,
                        offsetTop: e.offsetTop,
                        scrollTop: e.scrollTop,
                      })
                    );
                  });
                });
          },
        };
        var o = (0, t.createScriptTag)(
          "https://d1ox703z8b11rg.cloudfront.net/assets/iframeResizer.contentWindow-7207f7f3bc897767671fe1e3de6f8d21.js"
        );
        $("body").append(o);
      },
    };
  }),
  define("frontend/instance-initializers/raven", [
    "exports",
    "frontend/config/environment",
    "npm:raven-js",
    "ember",
  ], function (e, t, n, s) {
    e.default = {
      name: "raven",
      initialize: function (e) {
        var o = e.lookup("service:logger");
        if (o.get("isCapturingExceptions")) {
          var a = { ignoreUrls: [/js\.driftt\.com/] },
            i = $("meta[name='sentry:revision']").attr("content");
          s.default.isPresent(i) && (a.release = i),
            n.default.config(t.default.APP.SENTRY_JS_DSN, a).install();
        }
      },
    };
  }),
  define("frontend/instance-initializers/setup-routes", [
    "exports",
    "torii/bootstrap/routing",
    "torii/configuration",
    "torii/router-dsl-ext",
  ], function (e, t, n, s) {
    e.default = {
      name: "torii-setup-routes",
      initialize: function (e, s) {
        var o = (0, n.getConfiguration)();
        if (o.sessionServiceName) {
          var a = e.get("router"),
            i = function n() {
              var s = a.router.authenticatedRoutes,
                o = !Ember.isEmpty(s);
              o && (0, t.default)(e, s), a.off("willTransition", n);
            };
          a.on("willTransition", i);
        }
      },
    };
  }),
  define("frontend/instance-initializers/walk-providers", [
    "exports",
    "torii/lib/container-utils",
    "torii/configuration",
  ], function (e, t, n) {
    e.default = {
      name: "torii-walk-providers",
      initialize: function (e) {
        var s = (0, n.getConfiguration)();
        for (var o in s.providers)
          s.providers.hasOwnProperty(o) &&
            (0, t.lookup)(e, "torii-provider:" + o);
      },
    };
  }),
  define("frontend/locations/router-scroll", [
    "exports",
    "ember-router-scroll/locations/router-scroll",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/mixins/addthis-injection", [
    "exports",
    "ember",
    "ember-concurrency",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create({
      classNameBindings: ["loadAddthisTask.isRunning:is-loading-addthis"],
      addthis: t.default.inject.service(),
      didInsertElement: function () {
        this._super.apply(this, arguments),
          this.get("loadAddthisTask").perform();
      },
      loadAddthisTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.prev = 0),
                      (e.next = 3),
                      this.get("addthis").loadAddthis()
                    );
                  case 3:
                    this.set("hasLoadedAddthis", !0), (e.next = 9);
                    break;
                  case 6:
                    (e.prev = 6),
                      (e.t0 = e.catch(0)),
                      this.set("hasFailedLoadingAddthis", !0);
                  case 9:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[0, 6]]
          );
        })
      ),
    });
  }),
  define("frontend/mixins/backend-error-handler", [
    "exports",
    "ember",
    "frontend/utils/http-status-codes",
  ], function (e, t, n) {
    var s = [];
    e.default = t.default.Mixin.create({
      analytics: t.default.inject.service(),
      notifications: t.default.inject.service(),
      _defaultBackendErrorMessages: t.default
        .computed(function () {
          return {
            create: { generic: "An error occurred. Please refresh your page." },
            update: { generic: "An error occurred. Please refresh your page." },
            destroy: {
              generic: "An error occurred. Please refresh your page.",
            },
          };
        })
        .readOnly(),
      _backendErrorMessages: t.default.computed(
        "backendErrorMessages",
        function () {
          return t.default.merge(
            t.default.Object.create(this.get("_defaultBackendErrorMessages")),
            this.get("backendErrorMessages")
          );
        }
      ),
      handleBackendError: function (e, n, o, a) {
        var i =
            arguments.length <= 4 || void 0 === arguments[4]
              ? void 0
              : arguments[4],
          l = void 0,
          r = void 0;
        t.default.isEmpty(e) || ((l = e[0].field), (r = e[0].messages)),
          t.default.isNone(i) &&
            (i = this.get("isNew")
              ? "create"
              : this.get("isDeleted")
              ? "destroy"
              : "update"),
          a && !s.includes(n) && this._showBackendErrorNotification(i, l, r, n),
          o ? this._rollback(i) : this.clearPendingChanges();
      },
      _rollback: function (e) {
        "create" === e
          ? this.transitionTo("created.uncommitted")
          : "destroy" === e
          ? this.transitionTo("deleted.uncommitted")
          : this.transitionTo("updated.uncommitted"),
          this.rollbackAttributes(),
          "create" === e && this.unloadRecord();
      },
      clearPendingAttribute: function (e) {
        var t = this._internalModel._attributes;
        delete t[e],
          0 === Object.keys(t).length && this.transitionTo("loaded.saved");
      },
      clearPendingChanges: function () {
        (this._internalModel._attributes = {}),
          this.transitionTo("loaded.saved");
      },
      save: function () {
        var e = this,
          s = this._super();
        return (
          this.get("isDestroyed") ||
            (this.set("savePromise", s),
            s.catch(function (s) {
              var o = void 0,
                a = void 0;
              if (
                "error" !== t.default.typeOf(s) ||
                t.default.isEmpty(s.errors)
              )
                t.default.isPresent(s.get) &&
                  ((o = s.get("payload.errors")), (a = s.get("status")));
              else {
                var i = s.errors[0],
                  l = i.detail,
                  r = void 0;
                t.default.isPresent(i.source) &&
                  (r = i.source.pointer.split("/").get("lastObject")),
                  (o = [{ field: r, messages: [l] }]),
                  (a = n.UNPROCESSABLE_ENTITY);
              }
              e.handleBackendError(o, a, !0, !0);
            })),
          s
        );
      },
      _showBackendErrorNotification: function (e, t, n, s) {
        var o = this.get("_backendErrorMessages." + e),
          a = o[t] || o.generic;
        this.get("notifications").showBackendErrorMessage(a, s, {
          modelId: this.get("id"),
          action: e,
          errorField: t,
          errorMessages: n,
        });
      },
    });
  }),
  define("frontend/mixins/button-single-sign-on", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Mixin.create({
      tagName: "button",
      attributeBindings: ["isLoggingIn:disabled"],
      classNameBindings: ["loginTask.isRunning:is-logging-in"],
      torii: t.default.inject.service(),
      storyCollaborationInvitationData: t.default.inject.service(),
      errorObjectsFactory: t.default.inject.service(),
      isLoggingIn: t.default.computed.reads("loginTask.isRunning"),
      invitationToken: t.default.computed.reads(
        "storyCollaborationInvitationData.invitationToken"
      ),
      getAuthorization: function (e) {
        var n = this;
        return new t.default.RSVP.Promise(function (t) {
          n.get("torii")
            .open(e)
            .then(function (e) {
              t(e);
            })
            .catch(function () {
              t(null);
            });
        });
      },
      click: function () {
        this.get("loginTask").perform();
      },
    });
  }),
  define("frontend/mixins/component-with-required-input", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Mixin.create({
      _checkRequiredInput: t.default.on("init", function () {
        var e = this;
        if (!this.get("requiredInput"))
          throw new Error(
            "You must define an array 'requiredInput' on component " +
              this._debugContainerKey
          );
        this.get("requiredInput").forEach(function (t) {
          if (void 0 === e.get(t))
            throw new Error(
              "Missing required input '" +
                t +
                "' on component " +
                e._debugContainerKey
            );
        });
      }),
    });
  }),
  define("frontend/mixins/conditional-authentication", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Mixin.create({
      requireAuthenticationBeforeAccess: function (e) {
        this.controllerFor("login").set("attemptedTransition", e),
          this.replaceWith("login", {
            queryParams: { showSessionExpiredMessage: !0 },
          });
      },
    });
  }),
  define("frontend/mixins/edit-on-focus", [
    "exports",
    "ember",
    "frontend/mixins/on-click-outside",
    "frontend/utils/dom",
  ], function (e, t, n, s) {
    e.default = t.default.Mixin.create(n.default, {
      setupEditOnFocus: function (e) {
        var n = this;
        e.on(s.CLICK_EVENTS, function () {
          t.default.run(function () {
            n.get("isEditable") &&
              !n.get("isLockedByUser") &&
              n.set("isEditing", !0);
          });
        }),
          this.onClickOutside(function () {
            n.set("isEditing", !1);
          }, e);
      },
    });
  }),
  define("frontend/mixins/fastclickable", [
    "exports",
    "ember",
    "npm:fastclick",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create({
      makeFastclickable: function (e) {
        (e || []).toArray().forEach(function (e) {
          (0, n.default)(e);
        });
      },
    });
  }),
  define("frontend/mixins/feature-primary", [
    "exports",
    "ember",
    "ember-concurrency",
    "frontend/utils/get-component",
    "frontend/mixins/responds-to-in-viewport",
    "frontend/utils/to-dom-element",
    "npm:in-viewport",
    "frontend/utils/animation-step",
  ], function (e, t, n, s, o, a, i, l) {
    var r = 20,
      u = 50,
      c = t.default.testing ? 0 : 10,
      d = t.default.testing ? 0 : 200;
    e.default = t.default.Mixin.create(o.default, {
      classNameBindings: [
        "isInViewport",
        "textSideClass",
        "animationTask.isRunning",
      ],
      clientInformation: t.default.inject.service(),
      isInViewport: !1,
      animationSteps: [],
      runAnimation: !t.default.testing,
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          this.inViewport(
            this.$(),
            function () {
              e.set("isInViewport", !0),
                e.get("hasAnimation") &&
                  (t.default.debug(
                    "Triggered animation: " + e._debugContainerKey
                  ),
                  e._playAnimation());
            },
            -(this.get("clientInformation.viewportHeight") / 5)
          );
      },
      insertBackspace: function (e) {
        var t = this._getEditor(e);
        return this._performEditorCommand(t, function (e) {
          e.deleteAtPosition(t.post.sections.tail.tailPosition());
        });
      },
      insertNewParagraph: function (e) {
        var t = this._getEditor(e);
        return this._performEditorCommand(t, function (e) {
          e.splitSection(t.post.sections.tail.tailPosition());
        });
      },
      focusOnRichTextContent: function (e) {
        var t = this._getEditor(e);
        return this._performEditorCommand(t, function () {
          t.selectRange(t.post.tailPosition());
        });
      },
      animationStepsForTextInsertion: function (e, t) {
        var s =
            arguments.length <= 2 || void 0 === arguments[2] ? 0 : arguments[2],
          o =
            arguments.length <= 3 || void 0 === arguments[3] ? c : arguments[3],
          a = [];
        return (
          s &&
            a.push(
              l.default.create({
                execute: function () {
                  var t;
                  return regeneratorRuntime.async(
                    function (n) {
                      for (;;)
                        switch ((n.prev = n.next)) {
                          case 0:
                            return (
                              (t = this._getEditor(e())),
                              (n.next = 3),
                              regeneratorRuntime.awrap(
                                this._performEditorCommand(t, function (e) {
                                  var n = t.post.sections.head
                                    .headPosition()
                                    .move(s);
                                  e.setRange(n);
                                })
                              )
                            );
                          case 3:
                          case "end":
                            return n.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              })
            ),
          (a = a.concat(
            t.split("").map(function (t) {
              return l.default.create({
                execute: function () {
                  return regeneratorRuntime.async(
                    function (a) {
                      for (;;)
                        switch ((a.prev = a.next)) {
                          case 0:
                            return (
                              (a.next = 2),
                              regeneratorRuntime.awrap(
                                this._typeCharacter(e(), t, s)
                              )
                            );
                          case 2:
                            return (
                              (a.next = 4),
                              regeneratorRuntime.awrap((0, n.timeout)(o))
                            );
                          case 4:
                          case "end":
                            return a.stop();
                        }
                    },
                    null,
                    this
                  );
                },
              });
            })
          ))
        );
      },
      animationStepsForTextDeletion: function (e, t, n) {
        for (
          var s = this,
            o = function (e, t) {
              return function (n) {
                var s = e.post.sections,
                  o = s.head.headPosition();
                (o = o.move(t)), n.deleteAtPosition(o);
              };
            },
            a = [],
            i = function (n) {
              a.push(
                l.default.create({
                  execute: function () {
                    var s;
                    return regeneratorRuntime.async(
                      function (a) {
                        for (;;)
                          switch ((a.prev = a.next)) {
                            case 0:
                              return (
                                (s = this._getEditor(e())),
                                (a.next = 3),
                                regeneratorRuntime.awrap(
                                  this._performEditorCommand(s, o(s, t + n))
                                )
                              );
                            case 3:
                            case "end":
                              return a.stop();
                          }
                      },
                      null,
                      this
                    );
                  },
                })
              ),
                a.push(s.animationStepToWait(d));
            },
            r = n;
          r > 0;
          r--
        )
          i(r);
        return a;
      },
      animationStepToWait: function (e) {
        return l.default.create({
          execute: function () {
            return regeneratorRuntime.async(
              function (t) {
                for (;;)
                  switch ((t.prev = t.next)) {
                    case 0:
                      return (
                        (t.next = 2),
                        regeneratorRuntime.awrap((0, n.timeout)(e))
                      );
                    case 2:
                    case "end":
                      return t.stop();
                  }
              },
              null,
              this
            );
          },
        });
      },
      hasAnimation: t.default.computed.notEmpty("animationSteps"),
      hasRun: t.default.computed.notEmpty("animationTask.lastComplete"),
      textSideClass: t.default.computed("textSide", function () {
        return "text-on-" + this.get("textSide");
      }),
      animationTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2), this.get("_runAnimationStepsTask").perform()
                    );
                  case 2:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      actions: {
        replay: function () {
          this._playAnimation();
        },
      },
      _typeCharacterTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t, n, s) {
          var o;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (o = function (e) {
                        return function (n) {
                          var o = void 0;
                          (o = s
                            ? t.range.head
                            : t.post.sections.tail.tailPosition()),
                            n.insertText(o, e);
                        };
                      }),
                      (e.next = 3),
                      this._performEditorCommand(t, o(n))
                    );
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _animationWrapperTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (t = this.get("_watchViewportTask").perform()),
                      (e.next = 3),
                      this.get("animationTask").perform()
                    );
                  case 3:
                    t.cancel();
                  case 4:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _watchViewportTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var s, o;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    s = (0, a.default)(this.$());
                  case 1:
                    return (
                      (o = !(0, i.default)(s)),
                      this.get("isPaused") !== o &&
                        (o
                          ? t.default.debug(
                              "Paused the animation of component " +
                                this._debugContainerKey
                            )
                          : t.default.debug(
                              "Resumed the animation of component " +
                                this._debugContainerKey
                            ),
                        this.set("isPaused", o)),
                      this.set("isPaused", !(0, i.default)(s)),
                      (e.next = 7),
                      (0, n.timeout)(u)
                    );
                  case 7:
                    e.next = 1;
                    break;
                  case 9:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _runAnimationStepsTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var t, n, s, o, a, i;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    (t = !0),
                      (n = !1),
                      (s = void 0),
                      (e.prev = 3),
                      (o = this.get("animationSteps")[Symbol.iterator]());
                  case 5:
                    if ((t = (a = o.next()).done)) {
                      e.next = 15;
                      break;
                    }
                    return (i = a.value), (e.next = 9), i.execute.apply(this);
                  case 9:
                    if (!this.get("isPaused")) {
                      e.next = 12;
                      break;
                    }
                    return (
                      (e.next = 12), this.get("_waitUntilResumedTask").perform()
                    );
                  case 12:
                    (t = !0), (e.next = 5);
                    break;
                  case 15:
                    e.next = 21;
                    break;
                  case 17:
                    (e.prev = 17), (e.t0 = e.catch(3)), (n = !0), (s = e.t0);
                  case 21:
                    (e.prev = 21), (e.prev = 22), !t && o.return && o.return();
                  case 24:
                    if (((e.prev = 24), !n)) {
                      e.next = 27;
                      break;
                    }
                    throw s;
                  case 27:
                    return e.finish(24);
                  case 28:
                    return e.finish(21);
                  case 29:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [
              [3, 17, 21, 29],
              [22, , 24, 28],
            ]
          );
        })
      ),
      _waitUntilResumedTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (this.get("isPaused")) {
                      e.next = 3;
                      break;
                    }
                    return e.abrupt("break", 7);
                  case 3:
                    return (e.next = 5), (0, n.timeout)(r);
                  case 5:
                    e.next = 0;
                    break;
                  case 7:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _performEditorCommand: function (e, n) {
        return new t.default.RSVP.Promise(function (t) {
          e.run(function () {
            n.apply(void 0, arguments), t();
          });
        });
      },
      _getEditor: function (e) {
        return (0, s.default)(t.default.getOwner(this), e).get("editor");
      },
      _playAnimation: function () {
        this.get("runAnimation") && this.get("_animationWrapperTask").perform();
      },
      _typeCharacter: function (e, t) {
        var n =
          arguments.length <= 2 || void 0 === arguments[2]
            ? null
            : arguments[2];
        return this.get("_typeCharacterTask").perform(this._getEditor(e), t, n);
      },
    });
  }),
  define("frontend/mixins/floatable", ["exports", "ember"], function (e, t) {
    var n = 10;
    e.default = t.default.Mixin.create({
      positionInsideWindowBounds: function (e) {
        var t = e.offset().left;
        t < n && e.css("left", "-=" + (t - n));
        var s = e.offset().left + e.outerWidth(),
          o = this.$(window).width();
        s > o - n && e.css("left", "-=" + (s - o + n));
      },
    });
  }),
  define("frontend/mixins/form-element", ["exports", "ember"], function (e, t) {
    e.default = t.default.Mixin.create({
      classNameBindings: ["hasError:error", "name"],
      classNames: ["form-element"],
      label: null,
      init: function () {
        this._super.apply(this, arguments), this._setupBindings();
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.get(this._bindingProp("value")).disconnect(this),
          this.get(this._bindingProp("errors")).disconnect(this);
      },
      setupBindings: t.default.observer(
        "for",
        "object",
        "object.errors",
        function () {
          this._setupBindings();
        }
      ),
      hasError: t.default.computed.notEmpty("errors"),
      name: t.default.computed("for", function () {
        return this.get("for").dasherize();
      }),
      formElementId: t.default.computed("name", "object", function () {
        return (
          t.default.guidFor(this.get("object")) + "-input-" + this.get("name")
        );
      }),
      _setupBindings: function () {
        this._bindingSetup("value", "object." + this.get("for")),
          this._bindingSetup("errors", "object.errors." + this.get("for"));
      },
      _bindingProp: function (e) {
        return e + "Binding";
      },
      _bindingSetup: function (e, n) {
        var s = this._bindingProp(e),
          o = this.get(s);
        o && o.disconnect(o),
          this.set(s, t.default.Binding.from(n).to(e)),
          this.get(s).connect(this);
      },
    });
  }),
  define("frontend/mixins/infinite-scrollable", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Mixin.create({
      queryParams: ["page"],
      page: 1,
      init: function () {
        this._super.apply(this, arguments), this._setupDefaults();
      },
      infiniteScrollablePageLoaded: function (e) {
        this.incrementProperty("infiniteScrollablePageToLoad"),
          this.set("infiniteScrollableTotalNumber", e);
      },
      setupDefaults: t.default.observer("page", function () {
        this._setupDefaults();
      }),
      _setupDefaults: function () {
        this.set("infiniteScrollableModels", []),
          this.set("infiniteScrollablePageToLoad", this.get("page")),
          this.set("infiniteScrollableTotalNumber", null);
      },
    });
  }),
  define("frontend/mixins/lazy-loadable-media", [
    "exports",
    "ember",
    "frontend/mixins/responds-to-in-viewport",
  ], function (e, t, n) {
    var s = 500;
    e.default = t.default.Mixin.create(n.default, {
      init: function () {
        if (
          (this._super.apply(this, arguments),
          t.default.isNone(this.get("loadMediaTask")))
        )
          throw Error(
            "Missing required task 'loadMediaTask' on component " +
              this._debugContainerKey
          );
      },
      didInsertElement: function () {
        var e = this;
        this._super.apply(this, arguments),
          this.inViewport(
            this.$(),
            function () {
              e.get("loadMediaTask").perform();
            },
            s
          );
      },
      actions: {
        forceLoad: function () {
          return this.get("loadMediaTask").perform();
        },
      },
    });
  }),
  define("frontend/mixins/link-action", [
    "exports",
    "ember-link-action/mixins/link-action",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/mixins/loadable-video-player", [
    "exports",
    "ember",
    "ember-component-inbound-actions/inbound-actions",
    "ember-concurrency",
  ], function (e, t, n, s) {
    e.default = t.default.Mixin.create(n.default, {
      didInsertElement: function () {
        this._super.apply(this, arguments), this._load();
      },
      hasStartedLoading: t.default.computed.reads(
        "loadVideoTaskInstance.hasStarted"
      ),
      loadVideoIfNotAlreadyLoadedTask: (0, s.task)(
        regeneratorRuntime.mark(function e() {
          var t;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (this.get("hasLoadedVideo")) {
                      e.next = 6;
                      break;
                    }
                    return (
                      (t = this.get("loadVideoTask").perform()),
                      this.set("loadVideoTaskInstance", t),
                      (e.next = 5),
                      t
                    );
                  case 5:
                    this.set("hasLoadedVideo", !0);
                  case 6:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
      _load: function () {
        this.get("loadVideoIfNotAlreadyLoadedTask").perform();
      },
      actions: {
        load: function () {
          return this.get("hasStartedLoading")
            ? this.get("loadVideoTaskInstance")
            : this._load();
        },
      },
    });
  }),
  define("frontend/mixins/lockable-component", [
    "exports",
    "ember",
    "ember-concurrency",
  ], function (e, t, n) {
    var s = 50,
      o = ["lock", "unlock", "hasPendingPromises"];
    e.default = t.default.Mixin.create({
      init: function () {
        var e = this;
        this._super.apply(this, arguments),
          o.forEach(function (n) {
            if (t.default.isNone(e.get(n)))
              throw new Error(
                "Missing required helper '" +
                  n +
                  "' on component " +
                  e._debugContainerKey
              );
          });
      },
      updateCollaborationLock: t.default.observer("isEditing", function () {
        var e = this;
        this.get("isEditing")
          ? this.lock()
          : this.get("waitUntilPromisesResolvedTask")
              .perform()
              .catch(function () {})
              .finally(function () {
                e.unlock();
              });
      }),
      isLockedByUser: t.default.computed.notEmpty("lockedByUser"),
      waitUntilPromisesResolvedTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), (0, n.timeout)(s);
                  case 2:
                    if (this.hasPendingPromises()) {
                      e.next = 0;
                      break;
                    }
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      hasPendingPromises: null,
      _isSavingAnyOf: function (e) {
        return (e || []).any(function (e) {
          return e.get("isSaving");
        });
      },
    });
  }),
  define("frontend/mixins/login", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
  ], function (e, t, n, s) {
    e.default = t.default.Mixin.create({
      analytics: t.default.inject.service(),
      errorObjectsFactory: t.default.inject.service(),
      _loginAndRedirectUser: function (e, t) {
        this.get("store").pushPayload("user", e);
        var n = this.get("store").peekRecord("user", e.data.id);
        this.get("session").login(n),
          this.get("analytics").trackEvent("User Login", {
            Provider: t.capitalize(),
          });
        var s = this.get("controller.attemptedTransition");
        s
          ? (s.retry(), this.set("controller.attemptedTransition", null))
          : this.transitionTo("dashboard");
      },
      login: function () {
        var e = this,
          t = this.get("controller.loginSubmission");
        t.set("loading", !0),
          n.default
            .post(s.default.user_login_path(), {
              user: { login: t.get("login"), password: t.get("password") },
            })
            .then(function (t) {
              e._loginAndRedirectUser(t, "Sutori");
            })
            .catch(function (n) {
              t.set(
                "errors",
                e.get("errorObjectsFactory").createRequestMessagesObject(n)
              );
            })
            .finally(function () {
              t.set("loading", !1);
            });
      },
      actions: {
        backendLoginSucceeded: function (e, t) {
          this._loginAndRedirectUser(t, e);
        },
        backendLoginFailed: function (e) {
          this.set("controller.errorMessage", e.get("email.firstObject"));
        },
      },
    });
  }),
  define("frontend/mixins/media-uploader", [
    "exports",
    "ember",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "ember-concurrency",
    "frontend/utils/promise-utils",
    "frontend/utils/url",
    "frontend/utils/get-mime-type-of-blob",
    "frontend/utils/file",
    "frontend/utils/http-status-codes",
  ], function (e, t, n, s, o, a, i, l, r, u) {
    e.default = t.default.Mixin.create({
      downloadUrl: function (e) {
        return this.get("_downloadUrlTask").perform(e);
      },
      uploadToS3: function (e) {
        return this.get("_uploadToS3Task").perform(e);
      },
      isUploading: t.default.computed.reads("uploadMediaTask.isRunning"),
      uploadMediaTask: (0, o.task)(
        regeneratorRuntime.mark(function e(n, s) {
          var o,
            a,
            i,
            l,
            r = arguments;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    for (
                      this.set("errorMessage", null),
                        this.set("_timeStart", new Date()),
                        this._trackEvent("Upload Started", s),
                        e.prev = 3,
                        a = r.length,
                        i = Array(a > 2 ? a - 2 : 0),
                        l = 2;
                      l < a;
                      l++
                    )
                      i[l - 2] = r[l];
                    return (e.next = 7), (o = this.get(n)).perform.apply(o, i);
                  case 7:
                    t.default.merge(s, {
                      "Time elapsed in seconds": this._secondsSpentSince(
                        this.get("_timeStart")
                      ),
                    }),
                      this._trackEvent("Upload Succeeded", s),
                      (e.next = 16);
                    break;
                  case 11:
                    (e.prev = 11),
                      (e.t0 = e.catch(3)),
                      this.set("errorMessage", e.t0),
                      t.default.merge(s, {
                        Error: e.t0,
                        "Time elapsed in seconds": this._secondsSpentSince(
                          this.get("_timeStart")
                        ),
                      }),
                      this._trackEvent("Upload Failed", s);
                  case 16:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[3, 11]]
          );
        })
      ),
      hasErrorMessage: t.default.computed.notEmpty("errorMessage"),
      htmlSafeErrorMessage: t.default.computed("errorMessage", function () {
        return t.default.String.htmlSafe(this.get("errorMessage"));
      }),
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this.get("isUploading") &&
            this._trackEvent("Upload Aborted", {
              "Time elapsed in seconds": this._secondsSpentSince(
                this.get("_timeStart")
              ),
            });
      },
      _downloadUrlTask: (0, o.task)(
        regeneratorRuntime.mark(function e(t) {
          var o;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.prev = 0),
                      (e.next = 3),
                      n.default.get(s.default.download_url_path(), { url: t })
                    );
                  case 3:
                    return (
                      (o = e.sent),
                      e.abrupt("return", r.default.create({ base64: o.base64 }))
                    );
                  case 7:
                    if (
                      ((e.prev = 7),
                      (e.t0 = e.catch(0)),
                      e.t0.status !== u.URI_TOO_LONG)
                    ) {
                      e.next = 13;
                      break;
                    }
                    throw new Error(
                      "The link you insert is too long. Please check that it is correct."
                    );
                  case 13:
                    throw e.t0;
                  case 14:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[0, 7]]
          );
        })
      ),
      _uploadToS3Task: (0, o.task)(
        regeneratorRuntime.mark(function e(t) {
          var o, r, u, c;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      n.default.get(s.default.s3_presigned_post_path(), {
                        mime: (0, l.default)(t),
                      })
                    );
                  case 2:
                    return (
                      (o = e.sent),
                      (r = $("<input type='file' />").hide()),
                      r.fileupload(),
                      (e.prev = 5),
                      (e.next = 8),
                      (0, a.deferredToPromise)(
                        r.fileupload("send", {
                          files: [t],
                          url: o.url,
                          type: "POST",
                          autoUpload: !0,
                          formData: o.fields,
                          paramName: "file",
                          dataType: "XML",
                          replaceFileInput: !1,
                        })
                      )
                    );
                  case 8:
                    return (
                      (u = e.sent),
                      (c = $(u).find("Key").text()),
                      e.abrupt("return", (0, i.toCloudfrontUrl)(c))
                    );
                  case 13:
                    throw (
                      ((e.prev = 13),
                      (e.t0 = e.catch(5)),
                      $(e.t0.responseXML).find("Message").text())
                    );
                  case 16:
                    return (e.prev = 16), r.remove(), e.finish(16);
                  case 19:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[5, 13, 16, 19]]
          );
        })
      ),
      _secondsSpentSince: function (e) {
        return (new Date() - e) / 1e3;
      },
    });
  }),
  define("frontend/mixins/meta-tags", [
    "exports",
    "frontend/utils/seo-constants",
    "frontend/utils/sutori-info",
    "ember",
  ], function (e, t, n, s) {
    e.default = s.default.Mixin.create({
      headTagsService: s.default.inject.service("head-tags"),
      schemaOrgDataForBusiness: s.default
        .computed(function () {
          var e = [
              "customer support",
              "technical support",
              "billing support",
              "bill payment",
              "sales",
              "credit card support",
            ],
            s = e.map(function (e) {
              return {
                "@type": "ContactPoint",
                telephone: n.default.TELEPHONE,
                contactType: e,
              };
            });
          return {
            "@context": "http://schema.org",
            "@type": "Organization",
            url: "https://www.sutori.com",
            logo: t.SCHEMA_ORG_LOGO_URL,
            contactPoint: s,
            sameAs: [
              n.default.SOCIAL_FACEBOOK_URL,
              n.default.SOCIAL_TWITTER_URL,
              n.default.SOCIAL_GOOGLE_PLUS_URL,
              n.default.SOCIAL_PINTEREST_URL,
              n.default.SOCIAL_LINKEDIN_URL,
            ],
          };
        })
        .readOnly(),
      schemaOrgDataForWebsite: s.default
        .computed(function () {
          return {
            "@context": "http://schema.org",
            "@type": "WebSite",
            name: "Sutori",
            url: "https://www.sutori.com",
          };
        })
        .readOnly(),
      metaTitle: t.DEFAULT_META_SITE_NAME,
      metaDescription: t.DEFAULT_META_DESCRIPTION,
      metaImage: t.DEFAULT_META_IMAGE,
      metaImageCaption: t.DEFAULT_META_IMAGE_ALT,
      openGraphTags: s.default.computed(
        "metaTitle",
        "metaDescription",
        "metaImage.{url,width,height}",
        function () {
          return [
            { property: "og:type", content: "website" },
            { property: "og:title", content: this.get("metaTitle") },
            {
              property: "og:description",
              content: this.get("metaDescription"),
            },
            { property: "og:image", content: this.get("metaImage.url") },
            {
              property: "og:image:width",
              content: this.get("metaImage.width"),
            },
            {
              property: "og:image:height",
              content: this.get("metaImage.height"),
            },
            { property: "og:url", content: window.location.href },
            { property: "og:site_name", content: t.DEFAULT_META_SITE_NAME },
          ];
        }
      ),
      twitterCardTags: s.default.computed(
        "metaTitle",
        "metaDescription",
        "metaImage.url",
        "metaImageCaption",
        function () {
          return [
            { name: "twitter:card", content: "summary" },
            { name: "twitter:site", content: t.TWITTER_CARD_SITE },
            { name: "twitter:title", content: this.get("metaTitle") },
            {
              name: "twitter:description",
              content: this.get("metaDescription"),
            },
            { name: "twitter:image", content: this.get("metaImage.url") },
            {
              name: "twitter:image:alt",
              content: this.get("metaImageCaption"),
            },
          ];
        }
      ),
      schemaOrgData: null,
      prerenderStatusCode: null,
      metaTags: s.default.computed(
        "metaDescription",
        "openGraphTags",
        "twitterCardTags",
        "prerenderStatusCode",
        "prerenderLocationUrl",
        function () {
          var e = [];
          return (
            e.push({
              name: "description",
              content: this.get("metaDescription"),
            }),
            (e = e.concat(this.get("openGraphTags"))),
            (e = e.concat(this.get("twitterCardTags"))),
            s.default.isPresent(this.get("prerenderStatusCode")) &&
              e.push({
                name: "prerender-status-code",
                content: this.get("prerenderStatusCode"),
              }),
            s.default.isPresent(this.get("prerenderLocationUrl")) &&
              e.push({
                name: "prerender-header",
                content: "Location: " + this.get("prerenderLocationUrl"),
              }),
            e
          );
        }
      ),
      headTags: function () {
        var e = [];
        e = e.concat(
          (this.get("metaTags") || []).map(function (e) {
            var t = e.name || e.property,
              n = ("meta-" + t).replace(":", "-").dasherize();
            return { type: "meta", tagId: n, attrs: e };
          })
        );
        var t = this.get("schemaOrgData");
        return (
          s.default.isPresent(t) &&
            (e = this._addSchemaOrg(e, "schema-org-data", t)),
          (e = this._addSchemaOrg(
            e,
            "schema-org-for-business",
            this.get("schemaOrgDataForBusiness")
          )),
          (e = this._addSchemaOrg(
            e,
            "schema-org-for-website",
            this.get("schemaOrgDataForWebsite")
          ))
        );
      },
      _updateHeadTags: s.default.observer(
        "metaTags.@each.content",
        "schemaOrgData",
        "router.url",
        "router.currentPath",
        function () {
          this.get("headTagsService").collectHeadTags();
        }
      ),
      _addSchemaOrg: function (e, t, n) {
        return e.concat([
          {
            type: "script",
            tagId: t,
            attrs: { type: "application/ld+json" },
            content: JSON.stringify(n),
          },
        ]);
      },
    });
  }),
  define("frontend/mixins/obsolete-route", ["exports", "ember"], function (
    e,
    t
  ) {
    function n(e) {
      if (Array.isArray(e)) {
        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
        return n;
      }
      return Array.from(e);
    }
    e.default = t.default.Mixin.create({
      analytics: t.default.inject.service(),
      redirectToRoute: void 0,
      routeParams: [],
      beforeModel: function (e) {
        this._super.apply(this, arguments),
          this.get("analytics").trackEvent("View Obsolete URL"),
          this.replaceWith.apply(
            this,
            [this.getRedirectionRoute(e)].concat(
              n(this.getRedirectionParams(e))
            )
          );
      },
      getRedirectionRoute: function () {
        var e = this;
        return (
          ["redirectToRoute"].forEach(function (n) {
            if (t.default.isNone(e.get(n)))
              throw new Error(
                "An obsolete route must define a '" + n + "' property."
              );
          }),
          this.get("redirectToRoute")
        );
      },
      getRedirectionParams: function (e) {
        var t = this;
        return this.get("routeParams").map(function (n) {
          return e.params[t.get("routeName")][n];
        });
      },
    });
  }),
  define("frontend/mixins/on-click-outside", [
    "exports",
    "ember",
    "frontend/utils/dom",
  ], function (e, t, n) {
    function s(e) {
      return $.contains(document, e);
    }
    e.default = t.default.Mixin.create({
      onClickOutside: function (e) {
        var o = this,
          a =
            arguments.length <= 1 || void 0 === arguments[1]
              ? this.$()
              : arguments[1];
        this._clickHandler ||
          ((this._clickHandler = function (i) {
            var l = i.target;
            s(l) &&
              (0, n.isOutside)(l, a[0]) &&
              (0, n.isOutside)(l, $("#modal")[0]) &&
              (o.get("isDestroyed") ||
                o.get("isDestroying") ||
                t.default.run(o, e, $(l)));
          }),
          this._addClickListener());
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this._clickHandler && this._removeClickListener();
      },
      _addClickListener: function () {
        $(window).on(n.CLICK_EVENTS, this._clickHandler);
      },
      _removeClickListener: function () {
        $(window).off(n.CLICK_EVENTS, this._clickHandler);
      },
    });
  }),
  define("frontend/mixins/quiz-question", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Mixin.create({
      classNameBindings: ["isCorrect:correct:", "isIncorrect:incorrect"],
      analytics: t.default.inject.service(),
      session: t.default.inject.service(),
      hasImage: t.default.computed.notEmpty("questionImage"),
      question: t.default.computed.reads("quizQuestionItem.quizQuestionText"),
      questionImage: t.default.computed.reads("quizQuestionItem.imageFile"),
      explanation: t.default.computed.reads("quizQuestionItem.quizExplanation"),
      hasExplanation: t.default.computed.notEmpty("explanation"),
      showExplanation: t.default.computed(
        "isEditing",
        "isCorrect",
        "hasExplanation",
        function () {
          return (
            this.get("isEditing") ||
            (this.get("isCorrect") && this.get("hasExplanation"))
          );
        }
      ),
      trackEventWhenCorrect: t.default.observer("isCorrect", function () {
        this.get("isCorrect") &&
          this._trackQuizQuestionEvent("Quiz Question Solved");
      }),
      _trackQuizQuestionEvent: function (e) {
        this.get("analytics").trackStoryEvent(
          e,
          this.get("quizQuestionItem.story.content"),
          {
            "Quiz question type": this.get("quizQuestionType"),
            "Quiz question item id": this.get("quizQuestionItem.id"),
          }
        );
      },
    });
  }),
  define("frontend/mixins/registration-controller", [
    "exports",
    "ember",
    "ember-concurrency",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create({
      storyCollaborationInvitationData: t.default.inject.service(),
      session: t.default.inject.service(),
      invitationToken: t.default.computed.reads(
        "storyCollaborationInvitationData.invitationToken"
      ),
      redirectToInvitedStoryOrDashboardTask: (0, n.task)(
        regeneratorRuntime.mark(function e() {
          var n, s;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!t.default.isPresent(this.get("invitationToken"))) {
                      e.next = 16;
                      break;
                    }
                    return (
                      (e.prev = 1),
                      (e.next = 4),
                      this.get("store").findRecord(
                        "story-collaboration-invitation",
                        this.get("invitationToken")
                      )
                    );
                  case 4:
                    return (
                      (n = e.sent),
                      (e.next = 7),
                      n.get("story.content").reload()
                    );
                  case 7:
                    (s = e.sent),
                      this.transitionToRoute("story", s),
                      (e.next = 14);
                    break;
                  case 11:
                    (e.prev = 11),
                      (e.t0 = e.catch(1)),
                      this.transitionToRoute("dashboard");
                  case 14:
                    e.next = 17;
                    break;
                  case 16:
                    this.transitionToRoute("dashboard");
                  case 17:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 11]]
          );
        })
      ).drop(),
      loginAndRedirectTask: (0, n.task)(
        regeneratorRuntime.mark(function e(t) {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (!t.get("isTeacher") && !t.get("isPersonal")) {
                      e.next = 9;
                      break;
                    }
                    if (!this.get("session.isLoggedIn")) {
                      e.next = 6;
                      break;
                    }
                    return (
                      (e.next = 4),
                      this.get(
                        "redirectToInvitedStoryOrDashboardTask"
                      ).perform()
                    );
                  case 4:
                    e.next = 7;
                    break;
                  case 6:
                    this.transitionToRoute("waitingForConfirmation");
                  case 7:
                    e.next = 16;
                    break;
                  case 9:
                    if (!t.get("isStudent")) {
                      e.next = 15;
                      break;
                    }
                    return (
                      this.get("session.isLoggedIn") ||
                        this.get("session").login(t),
                      (e.next = 13),
                      this.get(
                        "redirectToInvitedStoryOrDashboardTask"
                      ).perform()
                    );
                  case 13:
                    e.next = 16;
                    break;
                  case 15:
                    throw new Error(
                      "Only teachers, students and personal can register through the front-end."
                    );
                  case 16:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ).drop(),
    });
  }),
  define("frontend/mixins/responds-to-element-resize", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Mixin.create(t.default.Evented, {
      setupResizeSensor: function (e) {
        var n = this;
        this._elementResizeHandler = function () {
          n._debouncedElementResizeHandler();
        };
        var s = new MutationObserver(function (e) {
          (e = e.rejectBy("attributeName", "style")),
            t.default.isEmpty(e) ||
              window.requestAnimationFrame(n._elementResizeHandler);
        });
        s.observe(e[0], { childList: !0, attributes: !0, subtree: !0 });
      },
      _debouncedElementResizeHandler: function () {
        var e = this;
        this.get("isDestroying") ||
          this.get("isDestroyed") ||
          t.default.run(function () {
            e.trigger("elementResized");
          });
      },
    });
  }),
  define("frontend/mixins/responds-to-in-viewport", [
    "exports",
    "ember",
    "frontend/utils/to-dom-element",
    "npm:in-viewport",
  ], function (e, t, n, s) {
    var o = ["scrollTop", "offsetTop", "viewportHeight"],
      a = 20;
    e.default = t.default.Mixin.create({
      embed: t.default.inject.service(),
      environment: t.default.inject.service(),
      inViewport: function (e, o) {
        var a = this,
          i =
            arguments.length <= 2 || void 0 === arguments[2] ? 0 : arguments[2];
        if (this.get("environment.isTest")) return void this._callCallback(o);
        if (this.get("embed.isEmbeddedPage"))
          (this._InViewport_$element = e),
            (this._InViewport_offset = i),
            (this._InViewport_callback = o),
            this._addObserversInEmbed(),
            this._checkIsVisibleInEmbed();
        else {
          var l = (0, n.default)(e);
          (0, s.default)(l, { offset: i }, function () {
            t.default.run(function () {
              a._callCallback(o);
            });
          });
        }
      },
      scrollTop: t.default.computed.reads(
        "embed.parentIFramePageInfo.scrollTop"
      ),
      offsetTop: t.default.computed.reads(
        "embed.parentIFramePageInfo.offsetTop"
      ),
      viewportHeight: t.default.computed.reads(
        "embed.parentIFramePageInfo.viewportHeight"
      ),
      _debouncedCheckIsVisibleInEmbed: function () {
        t.default.run.debounce(this, this._checkIsVisibleInEmbed, a);
      },
      _checkIsVisibleInEmbed: function () {
        if (!this.get("isDestroyed") && this._isInViewportInEmbed()) {
          var e = this._InViewport_callback;
          this._callCallback(e), this._removeObserversInEmbed();
        }
      },
      _isInViewportInEmbed: function () {
        var e = this._InViewport_$element,
          t = this._InViewport_offset,
          n = this.get("offsetTop") + e.offset().top,
          s = this.get("scrollTop") - e.outerHeight() - t,
          o = this.get("scrollTop") + this.get("viewportHeight") + t;
        return s <= n && n < o;
      },
      _addObserversInEmbed: function () {
        var e = this;
        o.forEach(function (t) {
          e.addObserver(t, e, e._debouncedCheckIsVisibleInEmbed);
        });
      },
      _removeObserversInEmbed: function () {
        var e = this;
        o.forEach(function (t) {
          e.removeObserver(t, e, e._debouncedCheckIsVisibleInEmbed);
        });
      },
      _callCallback: function (e) {
        this.get("isDestroyed") || e.call(this);
      },
    });
  }),
  define("frontend/mixins/responds-to-mousemove", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Mixin.create(t.default.Evented, {
      mousemove: $.noop,
      didInsertElement: function () {
        var e = this;
        this._super(),
          (this.mousemoveHandler = function () {
            return e.debouncedmousemove();
          }),
          $(window).on("mousemove", this.mousemoveHandler);
      },
      willDestroyElement: function () {
        this._super(), $(window).off("mousemove", this.mousemoveHandler);
      },
      debouncedmousemove: function () {
        var e = this;
        window.requestAnimationFrame(function () {
          e.get("isDestroying") ||
            e.get("isDestroyed") ||
            t.default.run(function () {
              e.trigger("mousemove"), e.mousemove();
            });
        });
      },
    });
  }),
  define("frontend/mixins/responds-to-viewport-resize-for-services", [
    "exports",
    "ember",
  ], function (e, t) {
    var n = "resize orientationchange";
    e.default = t.default.Mixin.create(t.default.Evented, {
      resize: $.noop,
      init: function () {
        var e = this;
        this._super(),
          (this.resizeHandler = function () {
            return e.debouncedResize();
          }),
          $(window).on(n, this.resizeHandler);
      },
      willDestroy: function () {
        this._super(), $(window).off(n, this.resizeHandler);
      },
      debouncedResize: function () {
        var e = this;
        window.requestAnimationFrame(function () {
          e.get("isDestroyed") ||
            t.default.run(function () {
              e.trigger("resize"), e.resize();
            });
        });
      },
    });
  }),
  define("frontend/mixins/route-with-sluggable-model", [
    "exports",
    "ember",
    "frontend/utils/http-status-codes",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create({
      afterModel: function (e) {
        if (
          (this._super.apply(this, arguments),
          t.default.isNone(e.get("publicUrl")))
        )
          throw new Error(
            '"' +
              e.constructor.modelName +
              '" type should have a property "publicUrl".'
          );
        var s = this.paramsFor(this.get("routeName")).slug;
        e.get("slug") !== s &&
          this.setProperties({
            prerenderStatusCode: n.MOVED_PERMANENTLY,
            prerenderLocationUrl: e.get("publicUrl"),
          });
      },
      serialize: function (e) {
        if (t.default.isPresent(e)) return { slug: e.get("slug") };
      },
    });
  }),
  define("frontend/mixins/sluggable-model", [
    "exports",
    "ember",
    "frontend/utils/url",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create({
      publicUrl: t.default.computed("slug", function () {
        return (0,
        n.toApplicationUrl)("/" + this.constructor.modelName + "/" + this.get("slug"));
      }),
    });
  }),
  define("frontend/mixins/story-permissions", [
    "exports",
    "ember",
    "frontend/mixins/story-state",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create(n.default, {
      currentUser: t.default.computed.reads("session.currentUser"),
      canPublishStory: t.default.computed(
        "canModifyStory",
        "currentUser.{isEditor,isPublisher}",
        "story.{isFinished,isApproved}",
        function () {
          return (
            !!this.get("canModifyStory") &&
            (this.get("currentUser.isEditor")
              ? !this.get("story.isFinished")
              : this.get("currentUser.isPublisher")
              ? !this.get("story.isApproved")
              : void 0)
          );
        }
      ),
      canUnpublishStory: t.default.computed.and(
        "canModifyStory",
        "currentUser.isPublisher",
        "story.isApproved"
      ),
      canModifyStory: t.default.computed(
        "session.isGuestUser",
        "isContributor",
        "isStoryFromMyOrganization",
        "currentUser.{isEditor,isPublisher,isPersonal,isTeacher,isStudent}",
        "story.isSutoriStory",
        function () {
          if (this.get("session.isGuestUser")) return !1;
          var e = this.get("currentUser");
          return e.get("isEditor")
            ? this.get("story.isSutoriStory")
            : e.get("isPersonal")
            ? this.get("isContributor")
            : e.get("isTeacher") || e.get("isStudent")
            ? this.get("isContributor")
            : !!e.get("isPublisher") && this.get("isStoryFromMyOrganization");
        }
      ),
      canMakeStoryPublic: t.default.computed(
        "currentUser.{isPersonal,isTeacher}",
        "isOwner",
        "myStudentIsOwner",
        "story.canMakePublic",
        function () {
          var e =
            this.get("currentUser.isPersonal") ||
            this.get("currentUser.isTeacher");
          return (
            e &&
            this.get("story.canMakePublic") &&
            (this.get("isOwner") || this.get("myStudentIsOwner"))
          );
        }
      ),
      canMakeStoryPrivate: t.default.computed(
        "currentUser.{isPersonal,isTeacher,isEditor}",
        "isOwner",
        "myStudentIsOwner",
        "story.{isTeacherStory,isStudentStory}",
        function () {
          return this.get("currentUser.isPersonal")
            ? this.get("isOwner")
            : this.get("currentUser.isTeacher")
            ? this.get("isOwner") || this.get("myStudentIsOwner")
            : !!this.get("currentUser.isEditor") &&
              (this.get("story.isTeacherStory") ||
                this.get("story.isStudentStory"));
        }
      ),
      canDeleteStory: t.default.computed(
        "currentUser.{isPersonal,isTeacher,isStudent,isEditor,isPublisher}",
        "canModifyStory",
        "isOwner",
        function () {
          var e = this.get("canModifyStory");
          return this.get("currentUser.isPersonal") ||
            this.get("currentUser.isTeacher") ||
            this.get("currentUser.isStudent")
            ? e && this.get("isOwner")
            : !(
                !this.get("currentUser.isEditor") &&
                !this.get("currentUser.isPublisher")
              ) && e;
        }
      ),
      canRejectStory: t.default.computed(
        "currentUser.isEditor",
        "story.{isApproved,story.isRejected}",
        function () {
          return (
            this.get("currentUser.isEditor") &&
            this.get("story.isApproved") &&
            !this.get("story.isRejected")
          );
        }
      ),
      canAddCollaboratorsToStory: t.default.computed.and(
        "currentUser.canAddCollaborators",
        "isOwner"
      ),
      canViewLessonPlan: t.default.computed(
        "story.{hasLessonPlan,lessonPlan.notBlank}",
        "canEditLessonPlan",
        function () {
          return (
            !!this.get("story.hasLessonPlan") &&
            (this.get("story.lessonPlan.notBlank") ||
              this.get("canEditLessonPlan"))
          );
        }
      ),
      canEditLessonPlan: t.default.computed(
        "currentUser.{isEditor,isPublisher,organization}",
        "story.{isSutoriStory,author.organization,hasLessonPlan}",
        function () {
          return (
            !!this.get("story.hasLessonPlan") &&
            (this.get("currentUser.isEditor")
              ? this.get("story.isSutoriStory")
              : !!this.get("currentUser.isPublisher") &&
                this.get("story.author.organization") ===
                  this.get("currentUser.organization"))
          );
        }
      ),
    });
  }),
  define("frontend/mixins/story-state", ["exports", "ember"], function (e, t) {
    e.default = t.default.Mixin.create({
      routingProxy: t.default.inject.service(),
      session: t.default.inject.service(),
      currentUser: t.default.computed.reads("session.currentUser"),
      isEmbedded: t.default.computed.reads("routingProxy.isEmbeddedStory"),
      isNotEmbedded: t.default.computed.not("isEmbedded"),
      isOwner: t.default.computed("story.author", "currentUser", function () {
        return this.get("story.author") === this.get("currentUser");
      }),
      isCollaborator: t.default.computed(
        "currentUser.isEditor",
        "story.isSutoriStory",
        "currentUser.isPublisher",
        "isStoryFromMyOrganization",
        "currentUser",
        "story.collaborators",
        function () {
          return (
            !(
              !this.get("currentUser.isEditor") ||
              !this.get("story.isSutoriStory")
            ) ||
            !(
              !this.get("currentUser.isPublisher") ||
              !this.get("isStoryFromMyOrganization")
            ) ||
            (this.get("story.collaborators") || []).includes(
              this.get("currentUser")
            )
          );
        }
      ),
      isNotCollaborator: t.default.computed.not("isCollaborator"),
      isContributor: t.default.computed.or("isOwner", "isCollaborator"),
      myStudentIsOwner: t.default.computed.reads(
        "story.authorIsStudentOfCurrentUser"
      ),
      myOriginalSchoolClasses: t.default.computed(
        "story.originalSchoolClasses.@each.id",
        "currentUser.schoolClasses.@each.id",
        function () {
          var e = this.get("currentUser.schoolClasses").mapBy("id");
          return this.get("story.originalSchoolClasses").filter(function (t) {
            return e.includes(t.get("id"));
          });
        }
      ),
      isStoryFromMyOrganization: t.default.computed(
        "story.author.organization.id",
        "currentUser.organization.id",
        function () {
          return (
            this.get("story.author.organization.id") ===
            this.get("currentUser.organization.id")
          );
        }
      ),
      isFullyAvailable: t.default.computed.reads(
        "story.isFullyAvailableForCurrentUser"
      ),
      isNotFullyAvailable: t.default.computed.not("isFullyAvailable"),
    });
  }),
  define("frontend/mixins/story-utils", ["exports", "ember"], function (e, t) {
    e.default = t.default.Mixin.create({
      _itemsStartingFromPosition: function (e, t) {
        return this.get(e).filter(function (e) {
          return t <= e.get("position");
        });
      },
      _incrementPositionsOf: function (e) {
        e.forEach(function (e) {
          e.incrementProperty("position"), e.clearPendingAttribute("position");
        });
      },
      _decrementPositionsOf: function (e) {
        e.forEach(function (e) {
          e.decrementProperty("position"), e.clearPendingAttribute("position");
        });
      },
      _itemsInBetween: function (e, t, n) {
        return this.get(e).filter(function (e) {
          return e.get("position") >= t && e.get("position") <= n;
        });
      },
    });
  }),
  define("frontend/mixins/time-spent-in-view", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-scroll",
    "frontend/mixins/responds-to-mousemove",
    "frontend/config/environment",
  ], function (e, t, n, s, o) {
    e.default = t.default.Mixin.create(n.default, s.default, {
      userActivityThreshold: t.default
        .computed(function () {
          return t.default.isPresent(
            o.default.APP.USER_ACTIVITY_THRESHOLD_IN_MS
          )
            ? o.default.APP.USER_ACTIVITY_THRESHOLD_IN_MS
            : 3e4;
        })
        .readOnly(),
      didInsertElement: function () {
        var e = this;
        this._super(),
          this.set("_timing_intervals", []),
          (this._timing_setUserInactive = function () {
            e.get("isDestroying") ||
              e.get("isDestroyed") ||
              e.set("_timing_userIsActive", !1);
          }),
          this.set("_timing_userIsActive", !0);
      },
      willDestroyElement: function () {
        this._super(), this.endTimingInterval();
      },
      _timing_setUserAsActive: t.default.on("scroll", "mousemove", function () {
        this.set("_timing_userIsActive", !0),
          t.default.run.debounce(
            this._timing_setUserInactive,
            this.get("userActivityThreshold")
          );
      }),
      timeSpentInView: t.default.computed(
        "_timing_intervals.@each.start",
        "_timing_intervals.@each.end",
        function () {
          return (
            this.get("_timing_intervals").reduce(function (e, t) {
              return e + (t.get("end") - t.get("start"));
            }, 0) / 1e3
          );
        }
      ),
      startOrEndTimingIntervalOnActiveStateOfUser: t.default.observer(
        "_timing_userIsActive",
        function () {
          this.get("_timing_userIsActive")
            ? this.startTimingInterval()
            : this.endTimingInterval();
        }
      ),
      startTimingInterval: function () {
        t.default.debug("TimeSpentInView: start period of activity.");
        var e = t.default.Object.create({ start: new Date() });
        this.get("_timing_intervals").pushObject(e);
      },
      endTimingInterval: function () {
        t.default.debug("TimeSpentInView: end period of activity."),
          this.get("_timing_intervals.lastObject").set("end", new Date());
      },
    });
  }),
  define("frontend/mixins/tooltipable", [
    "exports",
    "ember",
    "ember-responds-to/mixins/responds-to-resize",
  ], function (e, t, n) {
    e.default = t.default.Mixin.create(n.default, {
      makeTooltipable: function (e) {
        var n = this;
        this.set("$element", e),
          e.tooltip({
            title: function () {
              return e.attr("data-title");
            },
            template:
              '<div class="tooltip" role="tooltip"><div class="tooltip-wrapper"><div class="tooltip-info"></div><div class="tooltip-inner"></div></div></div>',
          }),
          (this._Tooltipable_showTooltipHandler = function () {
            t.default.run(function () {
              n.set("isShowing", !0);
            });
          }),
          (this._Tooltipable_hideTooltipHandler = function () {
            t.default.run(function () {
              n.set("isShowing", !1);
            });
          }),
          e.on("show.bs.tooltip", this._Tooltiptable_showTooltipHandler),
          e.on("hide.bs.tooltip", this._Tooltiptable_hideTooltipHandler),
          this._setupForIpad();
      },
      removeTooltipable: function (e) {
        e.tooltip("destroy");
      },
      hideTooltip: function (e) {
        e.tooltip("hide");
      },
      showTooltip: function (e) {
        e.tooltip("show");
      },
      willDestroyElement: function () {
        this._super.apply(this, arguments),
          this._teardownForIpad(),
          t.default.isPresent(this.get("$element")) &&
            (this.get("$element").off(
              "show.bs.tooltip",
              this._Tooltiptable_showTooltipHandler
            ),
            this.get("$element").off(
              "hide.bs.tooltip",
              this._Tooltiptable_hideTooltipHandler
            ),
            this.removeTooltipable(this.get("$element")));
      },
      repositionTooltip: t.default.on("resize", function () {
        this.get("isShowing") && this.showTooltip(this.get("$element"));
      }),
      handleToggleTooltip: function (e) {
        var t = this.get("$element");
        t.is(e.target) ? this.showTooltip(t) : this.hideTooltip(t);
      },
      _setupForIpad: function () {
        var e = this;
        (this._handleToggleTooltip = function (t) {
          e.handleToggleTooltip(t);
        }),
          $("body").on("touchstart", this._handleToggleTooltip);
      },
      _teardownForIpad: function () {
        $("body").off("touchstart", this._handleToggleTooltip);
      },
    });
  }),
  define("frontend/mixins/tour-handler", ["exports", "ember"], function (e, t) {
    e.default = t.default.Mixin.create({
      actions: {
        initializeTour: function (e) {
          var t = this.get("tourName");
          this.get("session.currentUser.completedTours").then(function (n) {
            n.findBy("tourName", t) ? e.send("stop") : e.send("start");
          }),
            this.set("tourComponent", e);
        },
      },
    });
  }),
  define("frontend/mixins/trackable-page", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Mixin.create({
      analytics: t.default.inject.service(),
      resetController: function (e, t) {
        this._super.apply(this, arguments), t && e.set("origin", null);
      },
      _trackPageView: function () {
        this.get("analytics").trackPageView(this._getQueryParams());
      },
      _getQueryParams: function () {
        var e = this,
          t = {};
        return (
          this.get("controller.queryParams").forEach(function (n) {
            t[n] = e.get("controller." + n);
          }),
          t
        );
      },
      actions: {
        didTransition: function () {
          t.default.run.scheduleOnce("render", this, this._trackPageView);
        },
      },
    });
  }),
  define("frontend/mixins/velocity", [
    "exports",
    "ember",
    "npm:velocity-animate",
    "frontend/utils/to-dom-element",
  ], function (e, t, n, s) {
    e.default = t.default.Mixin.create({
      animate: function (e, o) {
        var a =
          arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        return (
          (e = (0, s.default)(e)),
          new t.default.RSVP.Promise(function (s) {
            (a.complete = function () {
              t.default.run(s);
            }),
              n.default.animate(e, o, a);
          })
        );
      },
    });
  }),
  define("frontend/mixins/youtube-video", [
    "exports",
    "ember",
    "npm:urijs",
    "frontend/utils/xhr",
    "frontend/config/environment",
  ], function (e, t, n, s, o) {
    var a = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
    e.default = t.default.Mixin.create({
      videoEmbedUrl: function (e) {
        if (t.default.isNone(e)) return "";
        var s = new n.default(
          "https://www.youtube.com/embed/" + e.get("videoId")
        );
        return (
          s.addQuery("rel", 0),
          s.addQuery("origin", "www.sutori.com"),
          s.addQuery("showinfo", 0),
          t.default.isNone(e.get("startTime")) ||
            s.addQuery("start", e.get("startTime")),
          t.default.isNone(e.get("endTime")) ||
            s.addQuery("end", e.get("endTime")),
          s.toString()
        );
      },
      parseYoutubeUrl: function (e) {
        var t = a.exec(e),
          s = t[2],
          o = new n.default(e),
          i = o.query(!0);
        return {
          videoId: s,
          startTime: this._parseDuration(i.t || i.start),
          endTime: this._parseDuration(i.end),
        };
      },
      looksLikeYoutubeUrl: function (e) {
        return a.test(e);
      },
      getVideoInformation: function (e, n) {
        var o = this._getYoutubeApiUrl(e, n);
        return new t.default.RSVP.Promise(function (t, n) {
          s.default
            .get(o)
            .then(function (s) {
              s.items && s.items.length > 0
                ? t(s.items[0])
                : n("Video with ID " + e + " is not a valid YouTube video ID.");
            })
            .catch(function (e) {
              n(e);
            });
        });
      },
      _getYoutubeApiUrl: function (e, t) {
        return (
          "https://www.googleapis.com/youtube/v3/videos?part=" +
          t.join(",") +
          "&id=" +
          e +
          "&key=" +
          o.default.APP.GOOGLE_API_KEY
        );
      },
      _parseDuration: function (e) {
        if (!e) return null;
        var t = e.match(/\d+/g),
          n = e.indexOf("h") >= 0 || e.indexOf("H") >= 0,
          s = e.indexOf("m") >= 0 || e.indexOf("M") >= 0;
        return (
          n && s && (t = [t[0], t[1], t[2] || "0"]),
          n && !s && (t = [t[0], 0, t[1] || "0"]),
          !n && s && (t = [0, t[0], t[1] || "0"]),
          n || s || (t = [0, 0, t[0] || "0"]),
          3600 * parseInt(t[0]) + 60 * parseInt(t[1]) + parseInt(t[2])
        );
      },
    });
  }),
  define("frontend/models/audio-file", ["exports", "ember-data"], function (
    e,
    t
  ) {
    e.default = t.default.Model.extend({
      caption: t.default.attr("string"),
      url: t.default.attr("string"),
    });
  }),
  define("frontend/models/augmented-text", [
    "exports",
    "ember-data",
    "ember",
    "frontend/mixins/backend-error-handler",
    "frontend/utils/mobiledoc",
    "ember-mobiledoc-text-renderer",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.Model.extend(s.default, {
      logger: n.default.inject.service(),
      notes: t.default.hasMany("note", { async: !1 }),
      story: t.default.belongsTo("story", { async: !1, inverse: null }),
      content: t.default.attr("string"),
      hasNotes: n.default.computed.gt("notes.length", 0),
      isBlank: n.default.computed.empty("contentAsPlainText"),
      notBlank: n.default.computed.not("isBlank"),
      contentAsPlainText: n.default.computed("contentAsJson", function () {
        var e = new a.default(),
          t = e.render(this.get("contentAsJson"));
        return t.result;
      }),
      contentAsJson: n.default.computed("content", function () {
        var e = this.get("content");
        if (n.default.isBlank(e)) return o.EMPTY_MOBILEDOC;
        try {
          return JSON.parse(e);
        } catch (e) {
          this.get("logger").exception(e);
        }
      }),
      backendErrorMessages: {
        update: {
          generic: "An error occurred while saving the text.",
          record_not_found:
            "You can not update this item. It could be that someone else has deleted it.",
        },
      },
      hasNoteForWord: function (e) {
        return this.get("notes").any(function (t) {
          return t.get("word") === e;
        });
      },
      getNoteForWord: function (e) {
        return this.get("notes").findBy("word", e);
      },
    });
  }),
  define("frontend/models/blog-post", [
    "exports",
    "ember-data",
    "frontend/mixins/sluggable-model",
    "frontend/utils/url",
    "ember",
  ], function (e, t, n, s, o) {
    e.default = t.default.Model.extend(n.default, {
      title: t.default.attr("string"),
      excerpt: t.default.attr("string"),
      content: t.default.attr("string"),
      publishedAt: t.default.attr("date"),
      updatedAt: t.default.attr("date"),
      author: t.default.belongsTo("team-member"),
      isPublished: o.default.computed.notEmpty("publishedAt"),
      publicUrl: o.default.computed("id", function () {
        return (0, s.toApplicationUrl)("/blog/" + this.get("id"));
      }),
      excerptAsPlainText: o.default.computed("excerpt", function () {
        return $("<div>" + this.get("excerpt") + "</div>").text();
      }),
    });
  }),
  define("frontend/models/email-subscription", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
  ], function (e, t, n) {
    e.default = t.default.Model.extend(n.default, {
      user: t.default.belongsTo("user"),
      listName: t.default.attr("string"),
      backendErrorMessages: {
        create: { generic: "Failed to subscribe to the mailing list." },
        destroy: { generic: "Failed to unsubscribe from the mailing list." },
      },
    });
  }),
  define("frontend/models/help-category", ["exports", "ember-data"], function (
    e,
    t
  ) {
    e.default = t.default.Model.extend({
      helpItems: t.default.hasMany(),
      name: t.default.attr("string"),
      position: t.default.attr("number"),
    });
  }),
  define("frontend/models/help-item", [
    "exports",
    "ember-data",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.Model.extend({
      helpCategory: t.default.belongsTo(),
      position: t.default.attr("number"),
      question: t.default.attr("string"),
      answer: t.default.attr("string"),
      answerHtmlSafe: n.default.computed("answer", function () {
        return n.default.String.htmlSafe(this.get("answer"));
      }),
    });
  }),
  define("frontend/models/image-file-version", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
  ], function (e, t, n) {
    e.default = t.default.Model.extend(n.default, {
      imageFile: t.default.belongsTo("image-file", { async: !1 }),
      url: t.default.attr("string"),
      width: t.default.attr("number"),
      height: t.default.attr("number"),
      backendErrorMessages: {
        create: { generic: "An error occurred while uploading the image." },
      },
    });
  }),
  define("frontend/models/image-file", [
    "exports",
    "frontend/utils/seo-constants",
    "frontend/mixins/backend-error-handler",
    "ember-data",
    "ember",
  ], function (e, t, n, s, o) {
    e.default = s.default.Model.extend(n.default, {
      caption: s.default.attr("string"),
      imageFileVersions: s.default.hasMany("image-file-version", { async: !1 }),
      backendErrorMessages: {
        create: { generic: "An error occurred while adding the image." },
        update: {
          generic: "An error occurred while saving the image caption.",
        },
        destroy: { generic: "An error occurred while deleting the image." },
      },
      clientInformation: o.default.inject.service(),
      bestVersionToUseForMetaTags: o.default.computed(
        "imageFileVersions.@each.{width,height}",
        "clientInformation.devicePixelRatio",
        function () {
          return this.bestVersionToDisplayForDimensions(
            t.BEST_IMAGE_WIDTH_FOR_META_TAGS,
            t.BEST_IMAGE_HEIGHT_FOR_META_TAGS,
            "contain"
          );
        }
      ),
      bestVersionToDisplayForDimensions: function (e, t, n) {
        var s = this,
          a = (this.get("imageFileVersions") || []).sortBy("width").reverse();
        if (o.default.isEmpty(a)) return null;
        if (
          o.default.isPresent(e) &&
          e > 0 &&
          o.default.isPresent(t) &&
          t > 0
        ) {
          (e *= this.get("clientInformation.devicePixelRatio")),
            (t *= this.get("clientInformation.devicePixelRatio"));
          var i = a.get("firstObject");
          return (
            a.forEach(function (o) {
              "cover" === n
                ? o.get("width") >= e && o.get("height") >= t && (i = o)
                : "contain" === n
                ? (o.get("width") >= e || o.get("height") >= t) && (i = o)
                : s
                    .get("logger")
                    .exception(
                      new Error(
                        "Size for an image with an overflowPolicy that is neither 'contain' nor 'cover': " +
                          n
                      )
                    );
            }),
            i
          );
        }
        return a.get("lastObject");
      },
    });
  }),
  define("frontend/models/item-comment", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "ember",
  ], function (e, t, n, s) {
    e.default = t.default.Model.extend(n.default, {
      item: t.default.belongsTo("item", { async: !1 }),
      author: t.default.belongsTo("user", { async: !1 }),
      schoolClass: t.default.belongsTo("school-class"),
      content: t.default.attr("string"),
      publicationDate: t.default.attr("date"),
      isRemoved: t.default.attr("boolean"),
      backendErrorMessages: {
        create: {
          generic: "An error occurred while posting the comment.",
          record_not_found:
            "You can not comment on this item. It could be that someone else has deleted it.",
        },
        destroy: { generic: "An error occurred while deleting the comment." },
      },
      schoolClassId: s.default.computed.reads("schoolClass.id"),
    });
  }),
  define("frontend/models/item", [
    "exports",
    "ember",
    "ember-data",
    "frontend/validations/models/item",
    "frontend/mixins/sluggable-model",
    "frontend/mixins/backend-error-handler",
    "frontend/utils/metadata",
  ], function (e, t, n, s, o, a, i) {
    e.default = n.default.Model.extend(a.default, s.default, o.default, {
      story: n.default.belongsTo("story"),
      itemComments: n.default.hasMany("item-comment"),
      contentText: n.default.belongsTo("augmented-text", { async: !1 }),
      imageFile: n.default.belongsTo("image-file", { async: !1 }),
      audioFile: n.default.belongsTo("audio-file", { async: !1 }),
      video: n.default.belongsTo("video", { async: !1 }),
      quizQuestionText: n.default.belongsTo("augmented-text", { async: !1 }),
      quizQuestionMultipleChoiceAnswers: n.default.hasMany(
        "quiz-question-multiple-choice-answer",
        { async: !1 }
      ),
      quizQuestionMatchingPairs: n.default.hasMany(
        "quiz-question-matching-pair",
        { async: !1 }
      ),
      type: n.default.attr("string"),
      position: n.default.attr("number"),
      createdAt: n.default.attr("date"),
      updatedAt: n.default.attr("date"),
      slug: n.default.attr("string"),
      heading: n.default.attr("string"),
      quizExplanation: n.default.attr("string"),
      hasImage: t.default.computed.notEmpty("imageFile"),
      hasAudio: t.default.computed.notEmpty("audioFile"),
      isAudio: t.default.computed.equal("type", "audio"),
      isVideo: t.default.computed.equal("type", "video"),
      isImage: t.default.computed.equal("type", "image"),
      isQuote: t.default.computed.equal("type", "quote"),
      isChapterTitle: t.default.computed.equal("type", "chapter-title"),
      isForum: t.default.computed.equal("type", "forum"),
      isConclusion: t.default.computed.equal("type", "conclusion"),
      isDidYouKnow: t.default.computed.equal("type", "didyouknow"),
      isQuizQuestion: t.default.computed.or(
        "isQuizQuestionMultipleChoice",
        "isQuizQuestionMatching"
      ),
      isQuizQuestionMultipleChoice: t.default.computed.equal(
        "type",
        "quiz-question-multiple-choice"
      ),
      isQuizQuestionMatching: t.default.computed.equal(
        "type",
        "quiz-question-matching"
      ),
      metaDescription: t.default.computed(
        "isQuizQuestion",
        "contentText.contentAsPlainText",
        "quizQuestionText.contentAsPlainText",
        function () {
          var e = null;
          return (
            (e = this.get("isQuizQuestion")
              ? this.get("quizQuestionText.contentAsPlainText")
              : this.get("contentText.contentAsPlainText")),
            (0, i.formatMetaDescription)(e)
          );
        }
      ),
      metaTitle: t.default.computed.reads("story.metaTitle"),
      backendErrorMessages: {
        create: { generic: "An error occurred while adding the item." },
        update: {
          generic: "An error occurred while saving the item.",
          record_not_found:
            "There are multiple users working on this story and this item has already been removed. Make sure one person at a time is editing the story.",
        },
        destroy: {
          generic: "An error occurred while deleting the item.",
          record_not_found:
            "There are multiple users working on this story and this item has already been removed. Make sure one person at a time is editing the story.",
        },
      },
    });
  }),
  define("frontend/models/lesson-plan", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "ember",
  ], function (e, t, n, s) {
    e.default = t.default.Model.extend(n.default, {
      story: t.default.belongsTo("story"),
      aims: t.default.belongsTo("augmented-text", { async: !1 }),
      learningStandards: t.default.belongsTo("augmented-text", { async: !1 }),
      warmUpActivities: t.default.belongsTo("augmented-text", { async: !1 }),
      followUpActivities: t.default.belongsTo("augmented-text", { async: !1 }),
      sources: t.default.belongsTo("augmented-text", { async: !1 }),
      backendErrorMessages: {
        update: { generic: "An error occurred while saving the lesson plan." },
      },
      isBlank: s.default.computed.and(
        "aims.isBlank",
        "learningStandards.isBlank",
        "warmUpActivities.isBlank",
        "followUpActivities.isBlank",
        "sources.isBlank"
      ),
      notBlank: s.default.computed.not("isBlank"),
    });
  }),
  define("frontend/models/note", [
    "exports",
    "ember",
    "ember-data",
    "frontend/mixins/backend-error-handler",
  ], function (e, t, n, s) {
    e.default = n.default.Model.extend(s.default, {
      augmentedText: n.default.belongsTo("augmented-text", { async: !1 }),
      imageFile: n.default.belongsTo("image-file", { async: !1 }),
      word: n.default.attr("string"),
      description: n.default.attr("string"),
      hasImage: t.default.computed.notEmpty("imageFile"),
      backendErrorMessages: {
        create: { generic: "An error occurred while adding a note." },
        update: { generic: "An error occurred while saving the note." },
        destroy: { generic: "An error occurred while removing the note." },
      },
    });
  }),
  define("frontend/models/organization", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "frontend/mixins/sluggable-model",
    "frontend/validations/models/organization",
    "frontend/utils/url",
    "ember",
  ], function (e, t, n, s, o, a, i) {
    e.default = t.default.Model.extend(n.default, o.default, s.default, {
      logoImageFile: t.default.belongsTo("image-file"),
      users: t.default.hasMany("user"),
      name: t.default.attr("string"),
      slug: t.default.attr("string"),
      homepageUrl: t.default.attr("string"),
      description: t.default.attr("string"),
      isVisibleOnCommunity: t.default.attr("boolean"),
      hasLogoImage: i.default.computed.notEmpty(
        "logoImageFile.imageFileVersions"
      ),
      publicUrl: i.default.computed("slug", function () {
        return (0, a.toApplicationUrl)("/organization/" + this.get("slug"));
      }),
      backendErrorMessages: {
        update: {
          generic: "An error occurred while saving the organization profile.",
        },
      },
    });
  }),
  define("frontend/models/premium-subscription", [
    "exports",
    "ember-data/model",
    "ember-data",
    "ember",
    "frontend/utils/date-utils",
    "frontend/utils/subscription-plan",
  ], function (e, t, n, s, o, a) {
    var i = a.default.create({ price: 0, title: "Free" }),
      l = a.default.create({
        name: "v3-premium-49",
        price: 49,
        title: "Premium",
      }),
      r = a.default.create({
        name: "v3-unlimited-99",
        price: 99,
        title: "Unlimited",
      }),
      u = t.default.extend({
        user: n.default.belongsTo("user"),
        plan: n.default.attr("string"),
        status: n.default.attr("string"),
        isManualSubscription: n.default.attr("boolean"),
        expiresAt: n.default.attr("date"),
        lastChargedAt: n.default.attr("date"),
        label: s.default.computed("plan", function () {
          return u.getLabelFromPlan(this.get("plan"));
        }),
        isUnlimitedPlan: s.default.computed.equal("plan", "v3-unlimited-99"),
        isPremiumPlan: s.default.computed("plan", function () {
          return [l.name, "hstry-premium-2-annual"].includes(this.get("plan"));
        }),
        isOngoing: s.default.computed("expiresAt", function () {
          return o.default.now() < this.get("expiresAt");
        }),
        isStripeSubscription: s.default.computed.not("isManualSubscription"),
      });
    u.reopenClass({
      FREE_PLAN: i,
      V3_PREMIUM_49_PLAN: l,
      V3_UNLIMITED_99_PLAN: r,
      getLabelFromPlan: function (e) {
        if (e === r.name) return "Unlimited";
        if (e === l.name || "hstry-premium-2-annual" === e) return "Premium";
        throw new Error("Unknown plan " + e + ".");
      },
    }),
      (e.default = u);
  }),
  define("frontend/models/quiz-question-matching-pair", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "frontend/validations/models/quiz-question-matching-pair",
  ], function (e, t, n, s) {
    e.default = t.default.Model.extend(n.default, s.default, {
      item: t.default.belongsTo("item", { async: !1 }),
      left: t.default.attr("string"),
      right: t.default.attr("string"),
      backendErrorMessages: {
        create: {
          generic: "An error occurred while adding a matching pair.",
          record_not_found:
            "An error occurred while adding a matching pair. Someone might have deleted the quiz item you're currently editing.",
        },
        update: {
          generic: "An error occurred while saving the matching pair.",
          record_not_found:
            "An error occurred while saving the matching pair. Someone else might have already deleted it.",
        },
        destroy: {
          generic: "An error occurred while removing the matching pair.",
          record_not_found:
            "An error occurred while removing the matching pair. Someone else might have already deleted it.",
        },
      },
    });
  }),
  define("frontend/models/quiz-question-multiple-choice-answer", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "frontend/validations/models/quiz-question-multiple-choice-answer",
  ], function (e, t, n, s) {
    e.default = t.default.Model.extend(n.default, s.default, {
      item: t.default.belongsTo("item", { async: !1 }),
      correct: t.default.attr("boolean"),
      text: t.default.attr("string"),
      backendErrorMessages: {
        create: {
          generic: "An error occurred while adding an answer.",
          record_not_found:
            "An error occurred while adding an answer. Someone might have already deleted this quiz item.",
        },
        update: {
          generic: "An error occurred while saving the answer.",
          record_not_found:
            "An error occurred while saving the answer. Someone else might have already deleted it.",
        },
        destroy: {
          generic: "An error occurred while deleting the answer.",
          record_not_found:
            "An error occurred while deleting the answer. Someone else might have already deleted it.",
        },
      },
    });
  }),
  define("frontend/models/school-class", [
    "exports",
    "ember-data",
    "ember",
    "frontend/mixins/backend-error-handler",
    "frontend/validations/models/school-class",
    "npm:moment",
  ], function (e, t, n, s, o, a) {
    var i = [
        "Grade 1",
        "Grade 2",
        "Grade 3",
        "Grade 4",
        "Grade 5",
        "Grade 6",
        "Grade 7",
        "Grade 8",
        "Grade 9",
        "Grade 10",
        "Grade 11",
        "Grade 12",
        "College",
        "Other",
      ],
      l = t.default.Model.extend(s.default, o.default, {
        storyShares: t.default.hasMany(),
        users: t.default.hasMany(),
        name: t.default.attr("string"),
        grade: t.default.attr("string"),
        subject: t.default.attr("string"),
        code: t.default.attr("number"),
        archivedAt: t.default.attr("date"),
        students: n.default.computed.filterBy("users", "type", "student"),
        teacher: n.default.computed("users.@each.type", function () {
          return this.get("users")
            .filterBy("type", "teacher")
            .get("firstObject");
        }),
        hasSubject: n.default.computed.notEmpty("subject"),
        isArchived: n.default.computed.notEmpty("archivedAt"),
        displayArchivationDate: n.default.computed("archivedAt", function () {
          return (0, a.default)(this.get("archivedAt")).format("MMMM YYYY");
        }),
        schoolLevel: n.default.computed("grade", function () {
          var e = this.get("grade");
          if ("Other" === e) return "Other";
          if ("College" === e) return "College";
          var t = parseInt(e.split(" ")[1]);
          if (t >= 1 && t <= 5) return "Elementary school";
          if (t >= 6 && t <= 8) return "Middle school";
          if (t >= 9 && t <= 12) return "High school";
          throw new Error("Unkown school class grade '" + e + "'");
        }),
        backendErrorMessages: {
          create: {
            generic: "An error occurred while creating a new school class.",
          },
        },
        displayNameForUser: function (e) {
          var t = e.get("isStudent"),
            s = this.get("subject"),
            o = this.get("name");
          return t && !n.default.isBlank(s) ? s : o;
        },
        setAsArchived: function () {
          this.set("archivedAt", (0, a.default)().toDate());
        },
        setAsUnarchived: function () {
          this.set("archivedAt", void 0);
        },
        findStoryShareByStory: function (e) {
          return n.default.isNone(e)
            ? null
            : this.get("storyShares").findBy("story.id", e.get("id"));
        },
        hasStoryShareForStory: function (e) {
          return n.default.isPresent(this.findStoryShareByStory(e));
        },
        isStorySharedWithTheWholeClass: function (e) {
          var t = this.findStoryShareByStory(e);
          return t && "school_class" === t.get("sharingScope");
        },
      });
    l.reopenClass({ POSSIBLE_GRADES: i }), (e.default = l);
  }),
  define("frontend/models/story-collaboration-invitation", [
    "exports",
    "ember-data",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.Model.extend({
      story: t.default.belongsTo(),
      email: t.default.attr("string"),
      joinedAt: t.default.attr("date"),
      isPending: n.default.computed.none("joinedAt"),
    });
  }),
  define("frontend/models/story-collaboration", [
    "exports",
    "ember-data",
  ], function (e, t) {
    e.default = t.default.Model.extend({
      story: t.default.belongsTo("story", { async: !1 }),
      user: t.default.belongsTo("user", { async: !1 }),
    });
  }),
  define("frontend/models/story-conclusion", [
    "exports",
    "ember",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "frontend/validations/models/story-conclusion",
  ], function (e, t, n, s, o) {
    e.default = n.default.Model.extend(s.default, o.default, {
      story: n.default.belongsTo("story", { async: !1 }),
      contentText: n.default.belongsTo("augmented-text", { async: !1 }),
      imageFile: n.default.belongsTo("image-file", { async: !1 }),
      position: n.default.attr("number"),
      hasImage: t.default.computed.notEmpty("imageFile"),
      backendErrorMessages: {
        create: {
          generic: "An error occurred while saving the story conclusion.",
        },
        update: {
          generic: "An error occurred while saving the story conclusion.",
          record_not_found:
            "There are multiple users working on this story and this story conclusion has already been removed. Make sure one person at a time is editing the story.",
        },
        destroy: {
          generic: "An error occurred while deleting the story conclusion.",
          record_not_found:
            "There are multiple users working on this story and this story conclusion has already been removed. Make sure one person at a time is editing the story.",
        },
      },
    });
  }),
  define("frontend/models/story-share", [
    "exports",
    "ember",
    "ember-data",
    "frontend/mixins/backend-error-handler",
  ], function (e, t, n, s) {
    e.default = n.default.Model.extend(s.default, {
      schoolClass: n.default.belongsTo("school-class"),
      story: n.default.belongsTo("story"),
      sharingScope: n.default.attr("string"),
      isCreatedByStudent: n.default.attr("boolean"),
      schoolClassId: t.default.computed("schoolClass.id", function () {
        return this._getModelId("schoolClass");
      }),
      storyId: t.default.computed("story.id", function () {
        return this._getModelId("story");
      }),
      _getModelId: function (e) {
        var n = this._internalModel._relationships.initializedRelationships[e]
          .canonicalState;
        return t.default.isNone(n) ? this.get(e + ".id") : n.id;
      },
    });
  }),
  define("frontend/models/story-unit", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
    "ember",
    "frontend/utils/metadata",
  ], function (e, t, n, s, o) {
    e.default = t.default.Model.extend(n.default, {
      stories: t.default.hasMany("story", { async: !1 }),
      bannerImageFile: t.default.belongsTo("image-file", { async: !1 }),
      title: t.default.attr("string"),
      grade: t.default.attr("string"),
      description: t.default.attr("string"),
      minimumAge: t.default.attr("number"),
      category: t.default.attr("string"),
      isPublished: t.default.attr("boolean"),
      isFree: t.default.attr("boolean"),
      createdAt: t.default.attr("date"),
      updatedAt: t.default.attr("date"),
      backendErrorMessages: {
        create: { generic: "An error occurred while creating a new unit." },
        update: { generic: "An error occurred while saving the unit." },
        destroy: { generic: "An error occurred while deleting the unit." },
      },
      hasBanner: s.default.computed.notEmpty("bannerImageFile"),
      isDraft: s.default.computed.not("isPublished"),
      hasMinimumAge: s.default.computed.notEmpty("minimumAge"),
      metaTitle: s.default.computed("title", function () {
        return (0, o.formatMetaTitle)(this.get("title"));
      }),
    });
  }),
  define("frontend/models/story", [
    "exports",
    "frontend/mixins/backend-error-handler",
    "frontend/mixins/sluggable-model",
    "frontend/validations/models/story",
    "npm:moment",
    "ember-data",
    "ember",
    "frontend/utils/url",
    "frontend/utils/metadata",
  ], function (e, t, n, s, o, a, i, l, r) {
    var u = [57386, 204867, 217468, 289883, 148973, 366570, 472324].map(String),
      c = [217468, 289883, 323993, 148973, 366570, 472324].map(String),
      d = [217468, 289883, 323993, 148973, 366570].map(String),
      m = [217468, 472324].map(String),
      f = [289883, 148973, 366570, 472324].map(String),
      p = [289883, 472324].map(String),
      h = [289883].map(String),
      g = [289883].map(String);
    e.default = a.default.Model.extend(t.default, s.default, n.default, {
      author: a.default.belongsTo("user", { async: !1 }),
      storyShares: a.default.hasMany(),
      storyCollaborations: a.default.hasMany(),
      storyCollaborationInvitations: a.default.hasMany(),
      introductionText: a.default.belongsTo("augmented-text"),
      bannerImageFile: a.default.belongsTo("image-file", { async: !1 }),
      items: a.default.hasMany(),
      storyConclusions: a.default.hasMany(),
      lessonPlan: a.default.belongsTo(),
      copiedFrom: a.default.belongsTo("story", { inverse: null }),
      storyUnit: a.default.belongsTo(),
      title: a.default.attr("string"),
      slug: a.default.attr("string"),
      isStoryOfTheMonthFor: a.default.attr("date"),
      isFeatured: a.default.attr("boolean"),
      createdAt: a.default.attr("date"),
      updatedAt: a.default.attr("date"),
      isFree: a.default.attr("boolean"),
      isApproved: a.default.attr("boolean"),
      isRejected: a.default.attr("boolean"),
      isCopyOfPremiumStory: a.default.attr("boolean"),
      finishedAt: a.default.attr("date"),
      firstFinishedAt: a.default.attr("date"),
      approvedAt: a.default.attr("date"),
      rejectedAt: a.default.attr("date"),
      topAncestorStoryId: a.default.attr("number"),
      topAncestorStoryOrganizationId: a.default.attr("number"),
      topAncestorStoryOrganizationName: a.default.attr("string"),
      isFullyAvailableForCurrentUser: a.default.attr("boolean"),
      authorIsStudentOfCurrentUser: a.default.attr("boolean"),
      hidesSutoriLogoOnEmbed: a.default.attr("boolean"),
      showsSutoriLogoOnEmbed: i.default.computed.not("hidesSutoriLogoOnEmbed"),
      hasBanner: i.default.computed.notEmpty("bannerImageFile"),
      hasTitle: i.default.computed.notEmpty("title"),
      hasLessonPlan: i.default.computed.notEmpty("lessonPlan.content"),
      hasStoryUnit: i.default.computed.notEmpty("storyUnit.content"),
      hasStoryConclusions: i.default.computed.notEmpty("storyConclusions"),
      isFinished: i.default.computed.notEmpty("finishedAt"),
      notFinished: i.default.computed.not("isFinished"),
      isCopy: i.default.computed.notEmpty("copiedFrom.content"),
      authorName: i.default.computed(
        "organizationName",
        "author.fullName",
        function () {
          return this.get("organizationName") || this.get("author.fullName");
        }
      ),
      organizationName: i.default.computed(
        "isSutoriStory",
        "author.organization.name",
        function () {
          return this.get("isSutoriStory")
            ? "Sutori"
            : this.get("author.organization.name");
        }
      ),
      collaborators: i.default.computed.mapBy("storyCollaborations", "user"),
      hasCollaborators: i.default.computed.notEmpty("collaborators"),
      hasNoStoryShares: i.default.computed.empty("storyShares"),
      pendingCollaborationInvitations: i.default.computed.filterBy(
        "storyCollaborationInvitations",
        "isPending"
      ),
      hasPendingCollaborationInvitations: i.default.computed.notEmpty(
        "pendingCollaborationInvitations"
      ),
      metaTitle: i.default.computed("presentableTitle", function () {
        return (0, r.formatMetaTitle)(this.get("presentableTitle"));
      }),
      schemaOrgHeadline: i.default.computed("presentableTitle", function () {
        return (0, r.formatSchemaOrgHeadline)(this.get("presentableTitle"));
      }),
      isArabicStory: i.default.computed.equal("id", "11547"),
      textDirection: i.default.computed("isArabicStory", function () {
        return this.get("isArabicStory") ? "rtl" : "ltr";
      }),
      isStoryOfTheMonth: i.default.computed(
        "isStoryOfTheMonthFor",
        function () {
          return (
            i.default.isPresent(this.get("isStoryOfTheMonthFor")) &&
            (0, o.default)().isSame(
              (0, o.default)(this.get("isStoryOfTheMonthFor")),
              "month"
            )
          );
        }
      ),
      presentableTitle: i.default.computed("title", function () {
        return this.get("title") || "Untitled";
      }),
      isUntitled: i.default.computed.empty("title"),
      isSutoriStory: i.default.computed.reads("author.isEditor"),
      isUserStory: i.default.computed.not("isSutoriStory"),
      isThirdPartyStory: i.default.computed.reads("author.isPublisher"),
      isPersonalStory: i.default.computed.reads("author.isPersonal"),
      isTeacherStory: i.default.computed.reads("author.isTeacher"),
      isStudentStory: i.default.computed.reads("author.isStudent"),
      isOrganizationStory: i.default.computed.or(
        "isSutoriStory",
        "isThirdPartyStory"
      ),
      _filteredItems: i.default.computed.filter("items", function (e) {
        return [
          "chapter-title",
          "image",
          "quote",
          "video",
          "quiz-question-multiple-choice",
          "quiz-question-matching",
          "didyouknow",
          "audio",
          "forum",
        ].includes(e.get("type"));
      }),
      itemsSorting: ["position:asc"],
      sortedItems: i.default.computed.sort("_filteredItems", "itemsSorting"),
      canMakePublic: i.default.computed(
        "isCopyOfPremiumStory",
        "isFullyAvailableForCurrentUser",
        function () {
          return (
            !this.get("isCopyOfPremiumStory") &&
            this.get("isFullyAvailableForCurrentUser")
          );
        }
      ),
      originalSchoolClasses: i.default.computed(
        "storyShares.@each.{isCreatedByStudent,schoolClass}",
        function () {
          return this.get("storyShares")
            .filterBy("isCreatedByStudent")
            .mapBy("schoolClass");
        }
      ),
      isSubmitted: i.default.computed.notEmpty("originalSchoolClasses"),
      isAccessibleByGuest: i.default.computed(
        "isSutoriStory",
        "isThirdPartyStory",
        "isUserStory",
        "isApproved",
        function () {
          return (
            !!this.get("isSutoriStory") ||
            (this.get("isThirdPartyStory")
              ? this.get("isApproved")
              : !!this.get("isUserStory") && this.get("isApproved"))
          );
        }
      ),
      canBeSharedOnSocialMediaInAnEmbed: i.default.computed("id", function () {
        return !u.includes(this.get("id"));
      }),
      canShowSutoriLogoInAnEmbed: i.default.computed("id", function () {
        return !c.includes(this.get("id"));
      }),
      canShowPoweredBySutoriInAnEmbed: i.default.computed("id", function () {
        return !d.includes(this.get("id"));
      }),
      canShowCopyInformationInAnEmbed: i.default.computed("id", function () {
        return !c.includes(this.get("id"));
      }),
      canShowAuthorInAnEmbed: i.default.computed("id", function () {
        return !m.includes(this.get("id"));
      }),
      canShowToolbarInAnEmbed: i.default.computed("id", function () {
        return !f.includes(this.get("id"));
      }),
      canShowBannerInAnEmbed: i.default.computed("id", function () {
        return !p.includes(this.get("id"));
      }),
      leftAlignIntroduction: i.default.computed("id", function () {
        return h.includes(this.get("id"));
      }),
      hasSqueezedIntroduction: i.default.computed("id", function () {
        return g.includes(this.get("id"));
      }),
      embedCode: i.default.computed("slug", function () {
        var e = (0, l.toApplicationUrl)(
          "/story/" + this.get("slug") + "/embed"
        );
        return (
          '<script src="' +
          (0, l.toCloudfrontUrl)("assets/iframeResizer.js") +
          '"></script><iframe src="' +
          e +
          '" width="100%" scrolling="no" frameborder="0" allowfullscreen></iframe><script src="' +
          (0, l.toCloudfrontUrl)("assets/iframeResizer.executer.js") +
          '"></script>'
        );
      }),
      findStoryShareBySchoolClass: function (e) {
        return i.default.isNone(e)
          ? null
          : this.get("storyShares").findBy("schoolClassId", e.get("id"));
      },
      isSharedWithTheWholeClass: function (e) {
        var t = this.findStoryShareBySchoolClass(e);
        return (
          i.default.isPresent(t) && "school_class" === t.get("sharingScope")
        );
      },
      hasStoryShareForSchoolClass: function (e) {
        var t = this.findStoryShareBySchoolClass(e);
        return i.default.isPresent(t) && !t.get("isDeleted");
      },
      backendErrorMessages: {
        create: { generic: "An error occurred while creating a new story." },
        update: { generic: "An error occurred while saving the story." },
        destroy: { generic: "An error occurred while deleting the story." },
        copy: { generic: "An error occurred when making a copy of the story." },
        approve: { generic: "An error occurred while publishing the story." },
        reject: { generic: "An error occurred while unpublishing the story." },
      },
    });
  }),
  define("frontend/models/team-member", [
    "exports",
    "ember-data",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.Model.extend({
      profileImageFile: t.default.belongsTo("image-file", { async: !1 }),
      firstName: t.default.attr("string"),
      lastName: t.default.attr("string"),
      fullName: n.default.computed("firstName", "lastName", function () {
        var e = this.get("firstName"),
          t = this.get("lastName");
        return e + " " + t;
      }),
    });
  }),
  define("frontend/models/tour-completion", [
    "exports",
    "ember-data",
    "frontend/mixins/backend-error-handler",
  ], function (e, t, n) {
    e.default = t.default.Model.extend(n.default, {
      user: t.default.belongsTo("user", { async: !1 }),
      tourName: t.default.attr("string"),
      backendErrorMessages: {
        create: { generic: "Failed to update the tour progress." },
      },
    });
  }),
  define("frontend/models/user", [
    "exports",
    "ember",
    "ember-data",
    "frontend/validations/models/user",
    "frontend/mixins/backend-error-handler",
    "npm:moment",
    "frontend/models/premium-subscription",
    "frontend/mixins/sluggable-model",
    "frontend/utils/url",
  ], function (e, t, n, s, o, a, i, l, r) {
    var u = ["Mr.", "Ms.", "Mrs.", "Dr.", "Mx."],
      c = 25,
      d = n.default.Model.extend(o.default, s.default, l.default, {
        stories: n.default.hasMany("story"),
        schoolClasses: n.default.hasMany("school-class"),
        profileImageFile: n.default.belongsTo("image-file"),
        premiumSubscription: n.default.belongsTo("premium-subscription"),
        completedTours: n.default.hasMany("tour-completion"),
        emailSubscriptions: n.default.hasMany("email-subscription"),
        organization: n.default.belongsTo("organization"),
        slug: n.default.attr("string"),
        firstName: n.default.attr("string"),
        lastName: n.default.attr("string"),
        password: n.default.attr("string"),
        type: n.default.attr("string"),
        authToken: n.default.attr("string"),
        signInCount: n.default.attr("number"),
        isConfirmed: n.default.attr("boolean"),
        completedRegistration: n.default.attr("boolean"),
        registrationMechanism: n.default.attr("string"),
        createdAt: n.default.attr("date"),
        intercomUserHash: n.default.attr("string"),
        canAddUnlimitedCollaborators: n.default.attr("boolean"),
        canUploadCustomVideos: n.default.attr("boolean"),
        canPrint: n.default.attr("boolean"),
        email: n.default.attr("string"),
        title: n.default.attr("string"),
        professionalRole: n.default.attr("string"),
        schoolName: n.default.attr("string"),
        location: n.default.attr("string"),
        country: n.default.attr("string"),
        state: n.default.attr("string"),
        city: n.default.attr("string"),
        numberOfFreeStudentStoriesLeft: n.default.attr("number"),
        numberOfStudents: n.default.attr("number"),
        username: n.default.attr("string"),
        backendErrorMessages: {
          update: {
            generic: "An error occurred while saving the personal profile.",
          },
        },
        hasProfileImage: t.default.computed.notEmpty(
          "profileImageFile.imageFileVersions"
        ),
        hasPublicProfilePage: t.default.computed.or("isTeacher", "isPersonal"),
        hasSchoolName: t.default.computed.notEmpty("schoolName"),
        initials: t.default.computed("firstName", "lastName", function () {
          var e = this.get("firstName").charAt(0),
            t = this.get("lastName").split(" ").get("lastObject").charAt(0);
          return ("" + e + t).toUpperCase();
        }),
        fullName: t.default.computed("firstName", "lastName", function () {
          var e = (this.get("firstName") || "").trim(),
            t = (this.get("lastName") || "").trim();
          return e + " " + t;
        }),
        formalName: t.default.computed("title", "lastName", function () {
          return this.get("title") + " " + this.get("lastName");
        }),
        publicUrl: t.default.computed("slug", function () {
          return (0, r.toApplicationUrl)("/" + this.get("slug"));
        }),
        isEditor: t.default.computed.equal("type", "editor"),
        isPublisher: t.default.computed.equal("type", "publisher"),
        isPersonal: t.default.computed.equal("type", "personal"),
        isTeacher: t.default.computed.equal("type", "teacher"),
        isStudent: t.default.computed.equal("type", "student"),
        isUnassigned: t.default.computed.equal("type", "unassigned"),
        hasFreeStudentStoriesLeft: t.default.computed.gte(
          "numberOfFreeStudentStoriesLeft",
          1
        ),
        hasProfessionalRole: t.default.computed.notEmpty("professionalRole"),
        hasCountry: t.default.computed.notEmpty("country"),
        schoolClassesBreadCrumbName: t.default.computed(
          "isStudent",
          function () {
            return this.get("isStudent") ? "Learn" : "Teach";
          }
        ),
        createdAtAsUnixTimestamp: t.default.computed("createdAt", function () {
          return t.default.isNone(this.get("createdAt"))
            ? void 0
            : (0, a.default)(this.get("createdAt")).unix();
        }),
        isUnlimited: t.default.computed.and(
          "premiumSubscription.isUnlimitedPlan",
          "premiumSubscription.isOngoing"
        ),
        isPremium: t.default.computed.and(
          "premiumSubscription.isPremiumPlan",
          "premiumSubscription.isOngoing"
        ),
        hasOngoingSubscription: t.default.computed.reads(
          "premiumSubscription.isOngoing"
        ),
        isInPremiumWarningZone: t.default.computed.lte(
          "numberOfFreeStudentStoriesLeft",
          c
        ),
        students: t.default.computed(
          "isTeacher",
          "schoolClasses.@each.students",
          function () {
            return this.get("isTeacher")
              ? this.get("schoolClasses").reduce(function (e, t) {
                  return e.concat(t.get("students"));
                }, [])
              : [];
          }
        ),
        teachers: t.default.computed(
          "schoolClasses.@each.teacher",
          function () {
            return this.get("schoolClasses").mapBy("teacher").compact();
          }
        ),
        canEditProfile: t.default.computed.or(
          "isPublisher",
          "isPersonal",
          "isTeacher",
          "isStudent"
        ),
        canAddCollaborators: t.default.computed.or(
          "isPersonal",
          "isTeacher",
          "isStudent"
        ),
        canNotPrint: t.default.computed.not("canPrint"),
        canSubscribe: t.default.computed.reads("isTeacher"),
        canBecomePremium: t.default.computed(
          "canSubscribe",
          "hasOngoingSubscription",
          function () {
            return (
              this.get("canSubscribe") && !this.get("hasOngoingSubscription")
            );
          }
        ),
        canBecomeUnlimited: t.default.computed(
          "hasOngoingSubscription",
          "premiumSubscription.plan",
          "canSubscribe",
          function () {
            return (
              !!this.get("canSubscribe") &&
              (!this.get("hasOngoingSubscription") ||
                this.get("premiumSubscription.plan") ===
                  i.default.V3_PREMIUM_49_PLAN.name)
            );
          }
        ),
      });
    d.reopenClass({ POSSIBLE_TITLES: u, NUMBER_OF_FREE_STUDENT_STORIES: 200 }),
      (e.default = d);
  }),
  define("frontend/models/video", ["exports", "ember-data", "ember"], function (
    e,
    t,
    n
  ) {
    var s = "custom";
    e.PROVIDER_CUSTOM = s;
    var o = "youtube";
    (e.PROVIDER_YOUTUBE = o),
      (e.default = t.default.Model.extend({
        provider: t.default.attr("string"),
        videoId: t.default.attr("string"),
        url: t.default.attr("string"),
        startTime: t.default.attr("number"),
        endTime: t.default.attr("number"),
        isCustom: n.default.computed.equal("provider", s),
        isYoutube: n.default.computed.equal("provider", o),
      }));
  }),
  define("frontend/presenters/story", [
    "exports",
    "ember",
    "frontend/utils/date-utils",
  ], function (e, t, n) {
    var s = t.default.Object.extend({
      model: null,
      schoolClass: null,
      author: t.default.computed.reads("model.author"),
      title: t.default.computed.reads("model.title"),
      isUntitled: t.default.computed.reads("model.isUntitled"),
      presentableTitle: t.default.computed.reads("model.presentableTitle"),
      sharedWith: t.default.computed(
        "model",
        "schoolClass",
        "model.isApproved",
        "schoolClass.storyShares.@each.story",
        "schoolClass.storyShares.@each.sharingScope",
        function () {
          var e = this.get("schoolClass"),
            t = this.get("model"),
            n = e && e.isStorySharedWithTheWholeClass(t),
            s = t.get("isApproved"),
            o = [];
          return n && o.push("Class"), s && o.push("Public"), o.join(" & ");
        }
      ),
      updatedAt: t.default.computed("model.updatedAt", function () {
        return n.default.formatDate(this.get("model.updatedAt"));
      }),
    });
    (s.present = function (e) {
      var t =
        arguments.length <= 1 || void 0 === arguments[1] ? null : arguments[1];
      return (e || []).map(function (e) {
        return s.create({ model: e, schoolClass: t });
      });
    }),
      (e.default = s);
  }),
  define("frontend/resolver", ["exports", "ember-resolver"], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/router", [
    "exports",
    "ember",
    "frontend/config/environment",
    "ember-router-scroll",
  ], function (e, t, n, s) {
    var o = t.default.Router.extend(s.default, {
      analytics: t.default.inject.service(),
      location: n.default.locationType,
      rootURL: n.default.rootURL,
      history: [],
      previousUrl: t.default.computed("history.[]", function () {
        var e = this.get("history");
        return e.get("length") >= 2 ? e.objectAt(e.get("length") - 2) : null;
      }),
      notifyAnalytics: t.default.on("didTransition", function () {
        this.get("analytics").trackGoogleAnalyticsPageView(this.get("url")),
          this.get("analytics").trackDriftPageView(this.get("url"));
      }),
      addCurrentURLToHistory: t.default.on("didTransition", function () {
        this.get("history").pushObject(this.get("url"));
      }),
      closeMobileNavigation: t.default.on("didTransition", function () {
        $("body").removeClass("has-mobile-navigation");
      }),
    });
    o.map(function () {
      this.route("education"),
        this.route("business"),
        this.route("about"),
        this.route("press"),
        this.route("mediaKit", { path: "/media-kit" }),
        this.route("privacyPolicy", { path: "/privacy-policy" }),
        this.route("termsOfUse", { path: "/terms-of-use" }),
        this.route("help"),
        this.route("helpCategory", { path: "/help/:slug" }),
        this.route("helpItem", { path: "/help/question/:slug" }),
        this.route("contact"),
        this.route("status"),
        this.route("blogPosts", { path: "/blog" }),
        this.route("blogPost", { path: "/blog/:blog_post_id" }),
        this.route("login"),
        this.route("registration"),
        this.route("teacherRegistration", { path: "/teacher/register" }),
        this.route("studentRegistration", { path: "/student/register" }),
        this.route("personalRegistration", { path: "/personal/register" }),
        this.route("waitingForConfirmation", {
          path: "/waiting-for-confirmation",
        }),
        this.route("confirm", { path: "/confirm/:confirmation_token" }),
        this.route("resetPassword", { path: "/reset-password/:token" }),
        this.route("forgotPassword", { path: "/forgot-password" }),
        this.route("dashboard"),
        this.route("unsubscribe"),
        this.route("upgrade"),
        this.route("storiesEvaluation", { path: "/stories-evaluation" }),
        this.route("stories", function () {
          this.route("new"),
            this.route("search"),
            this.route("community", function () {
              this.route("featured"),
                this.route("latest"),
                this.route("student-work");
            }),
            this.route("sutori", { path: "/sutori" }, function () {
              this.route("newUnit", { path: "/new-unit" });
            });
        }),
        this.route("story", { path: "/story/:slug" }, function () {
          this.route("embed");
        }),
        this.route("collaborate", { path: "/collaborate/:invitation_token" }),
        this.route("item", { path: "/item/:slug" }),
        this.route("organization", { path: "/organization/:slug" }),
        this.route("schoolClasses", { path: "/school-classes" }),
        this.route("schoolClass", { path: "/school-class/:school_class_id" }),
        this.route("student", { path: "/student/:student_id" }),
        this.route(
          "storyUnit",
          { path: "/story-unit/:story_unit_id" },
          function () {
            this.route("newStory", { path: "/new-story" });
          }
        ),
        this.route("styleguide"),
        this.route("obsolete.timelineInstance", {
          path: "/timeline_instances/*wildcard",
        }),
        this.route("obsolete.communityTimelines", {
          path: "/community_timelines",
        }),
        this.route("obsolete.goPremium", { path: "/go_premium" }),
        this.route("obsolete.pricing", { path: "/pricing" }),
        this.route("obsolete.plans", { path: "/plans" }),
        this.route("obsolete.timelineOverview", {
          path: "/timeline/:slug/overview",
        }),
        this.route("obsolete.teacherEdit", { path: "/teacher/edit" }),
        this.route("obsolete.teacherUnsubscribe", {
          path: "/teacher/unsubscribe/:list_name",
        }),
        this.route("obsolete.resetPassword", {
          path: "/reset_password/:token",
        }),
        this.route("obsolete.forgotPassword", { path: "/forgot_password" }),
        this.route("obsolete.schoolClasses", { path: "/school_classes" }),
        this.route("obsolete.schoolClass", {
          path: "/school_class/:school_class_id",
        }),
        this.route("obsolete.teacherConfirmation", {
          path: "/teacher/confirm/:confirmation_token/:email",
        }),
        this.route("obsolete.hstryPro", { path: "/hstry-pro" }),
        this.route("obsolete.learnMore", { path: "/learn-more" }),
        this.route("obsolete.timelineEmbed", { path: "/timeline/:slug/embed" }),
        this.route("obsolete.timeline", { path: "/timeline/:slug" }),
        this.route("obsolete.timelinesHstry", { path: "/timelines/hstry" }),
        this.route("obsolete.timelineOfTheMonth", {
          path: "/timelines/timeline-of-the-month",
        }),
        this.route("obsolete.timelines", { path: "/timelines/*wildcard" }),
        this.route("obsolete.timelineBundles", { path: "/timeline_bundles" }),
        this.route("obsolete.timelineBundleUnderscore", {
          path: "/timeline_bundle/:story_unit_id",
        }),
        this.route("obsolete.timelineBundleDash", {
          path: "/timeline-bundle/:story_unit_id",
        }),
        this.route("notFound", { path: "/*wildcard" }),
        this.route("user", { path: "/:slug" });
    }),
      (e.default = o);
  }),
  define("frontend/routes/about", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "About",
      metaDescription: "Sutori's mission is to captivate students",
    });
  }),
  define("frontend/routes/application", [
    "exports",
    "frontend/routes/base/public",
    "frontend/utils/http-status-codes",
    "frontend/utils/api-paths",
    "frontend/utils/xhr",
    "npm:lodash.truncate",
    "frontend/utils/seo-constants",
    "ember-concurrency",
    "ember",
  ], function (e, t, n, s, o, a, i, l, r) {
    function u(e) {
      return e.authToken;
    }
    function c(e) {
      return "teacher" === e.type ||
        "editor" === e.type ||
        "publisher" === e.type
        ? e.email
        : "student" === e.type
        ? e.username
        : e.email;
    }
    e.default = t.default.extend({
      facebookPixel: r.default.inject.service(),
      session: r.default.inject.service(),
      beforeModel: function () {
        return (
          this._super.apply(this, arguments),
          this.get("sessionPingTask").perform()
        );
      },
      sessionPingTask: (0, l.task)(
        regeneratorRuntime.mark(function e() {
          var t, a, i, l, r, d, m;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    if (
                      ((t = this.get("session")),
                      (e.prev = 1),
                      !t.hasStoredSession())
                    ) {
                      e.next = 16;
                      break;
                    }
                    return (
                      (a = t.getStoredSession()),
                      (i = u(a)),
                      (l = c(a)),
                      (e.next = 8),
                      o.default.post(s.default.session_ping_path(), {
                        auth: { token: i, login: l },
                      })
                    );
                  case 8:
                    (r = e.sent),
                      t.logout(),
                      (d = this.get("store")),
                      d.pushPayload("user", r),
                      (m = d.peekRecord("user", r.data.id)),
                      t.login(m),
                      (e.next = 17);
                    break;
                  case 16:
                    t.logout();
                  case 17:
                    e.next = 22;
                    break;
                  case 19:
                    (e.prev = 19),
                      (e.t0 = e.catch(1)),
                      e.t0.status === n.UNAUTHORIZED && t.logout();
                  case 22:
                    return (
                      (e.prev = 22),
                      this.get("facebookPixel").setup(),
                      e.finish(22)
                    );
                  case 25:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[1, 19, 22, 25]]
          );
        })
      ).drop(),
      titleToken: "Sutori",
      metaTags: [],
      title: function (e) {
        var t = e[0],
          n = i.DOCUMENT_TITLE_MAXIMUM_LENGTH - t.length,
          s = n / (e.length - 1),
          o = e.slice(1).map(function (e) {
            return (0, a.default)(e, { length: s, separator: " " });
          });
        return [t].concat(o).reverse().join(" | ");
      },
    });
  }),
  define("frontend/routes/base/authenticated-but-unassigned-users-only", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Route.extend({
      beforeModel: function () {
        this._super.apply(this, arguments),
          this.get("session.currentUser.completedRegistration") &&
            this.replaceWith("dashboard");
      },
    });
  }),
  define("frontend/routes/base/authenticated-users-only", [
    "exports",
    "frontend/mixins/conditional-authentication",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      session: n.default.inject.service(),
      beforeModel: function (e) {
        if (
          (this._super.apply(this, arguments), this.get("session.isLoggedIn"))
        ) {
          var t = this.get("session.currentUser");
          t.get("completedRegistration") ||
            (t.get("isTeacher")
              ? this.replaceWith("teacherRegistration")
              : t.get("isStudent")
              ? this.replaceWith("studentRegistration")
              : t.get("isPersonal")
              ? this.replaceWith("personalRegistration")
              : this.replaceWith("registration"));
        } else this.requireAuthenticationBeforeAccess(e);
      },
    });
  }),
  define("frontend/routes/base/guests-only", [
    "exports",
    "frontend/mixins/meta-tags",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      beforeModel: function () {
        this._super.apply(this, arguments),
          this.get("session.isLoggedIn") && this.replaceWith("dashboard");
      },
    });
  }),
  define("frontend/routes/base/public", [
    "exports",
    "frontend/mixins/meta-tags",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default);
  }),
  define("frontend/routes/blog-post", [
    "exports",
    "frontend/routes/base/public",
    "frontend/utils/seo-constants",
    "ember",
    "frontend/utils/http-status-codes",
  ], function (e, t, n, s, o) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      model: function (e) {
        return this.get("store").findRecord("blog-post", e.blog_post_id);
      },
      afterModel: function (e) {
        if (
          (this._super.apply(this, arguments),
          s.default.isNone(e.get("publicUrl")))
        )
          throw new Error(
            '"' +
              e.constructor.modelName +
              '" type should have a property "publicUrl".'
          );
        var t = this.paramsFor(this.get("routeName")).blog_post_id;
        e.get("id") !== t &&
          this.setProperties({
            prerenderStatusCode: o.MOVED_PERMANENTLY,
            prerenderLocationUrl: e.get("publicUrl"),
          });
      },
      blogPost: s.default.computed.reads("controller.model"),
      titleToken: function (e) {
        return e.get("title");
      },
      metaDescription: s.default.computed.reads("blogPost.excerptAsPlainText"),
      openGraphTags: s.default.computed(
        "blogPost.{title,author.fullName,publishedAt,updatedAt}",
        "metaDescription",
        "metaImage.{url,width,height}",
        function () {
          var e = this.get("blogPost");
          if (s.default.isPresent(e))
            return [
              { property: "og:type", content: "article" },
              { property: "og:title", content: e.get("title") },
              {
                property: "og:description",
                content: this.get("metaDescription"),
              },
              { property: "og:author", content: e.get("author.fullName") },
              { property: "og:site_name", content: n.DEFAULT_META_SITE_NAME },
              { property: "og:url", content: window.location.href },
              {
                property: "article:published_time",
                content: e.get("publishedAt").toISOString(),
              },
              {
                property: "article:modified_time",
                content: e.get("updatedAt").toISOString(),
              },
              { property: "og:image", content: this.get("metaImage.url") },
              {
                property: "og:image:width",
                content: this.get("metaImage.width"),
              },
              {
                property: "og:image:height",
                content: this.get("metaImage.height"),
              },
            ];
        }
      ),
      twitterCardTags: s.default.computed(
        "blogPost.{title}",
        "metaDescription",
        "metaImage.url",
        "metaImageCaption",
        function () {
          var e = this.get("blogPost");
          if (s.default.isPresent(e))
            return [
              { name: "twitter:site", content: n.TWITTER_CARD_SITE },
              { name: "twitter:title", content: e.get("title") },
              {
                name: "twitter:description",
                content: this.get("metaDescription"),
              },
              { name: "twitter:card", content: "summary" },
              { name: "twitter:image", content: this.get("metaImage.url") },
              {
                name: "twitter:image:alt",
                content: this.get("metaImageCaption"),
              },
            ];
        }
      ),
      schemaOrgData: s.default.computed(
        "blogPost.{title,publishedAt,updatedAt,excerptAsPlainText}",
        "blogPost.author.fullName",
        function () {
          var e = this.get("blogPost");
          if (s.default.isPresent(e)) {
            var t = {
              "@context": "http://schema.org",
              "@type": "BlogPosting",
              headline: e.get("title"),
              publisher: n.SCHEMA_ORG_SUTORI_PUBLISHER,
              dateModified: e.get("updatedAt").toISOString(),
              author: { "@type": "Person", name: e.get("author.fullName") },
              description: e.get("excerptAsPlainText"),
            };
            return (
              e.get("isPublished") &&
                (t.datePublished = e.get("publishedAt").toISOString()),
              t
            );
          }
        }
      ),
    });
  }),
  define("frontend/routes/blog-posts", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Blog",
      metaDescription: "Sutori's blog",
      metaTitle: "Blog",
    });
  }),
  define("frontend/routes/business", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Business",
      metaDescription:
        "Sutori provides a platform allowing organizations & companies to manage their work more effectively.",
    });
  }),
  define("frontend/routes/collaborate", [
    "exports",
    "frontend/routes/base/public",
    "frontend/mixins/story-state",
    "ember",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, {
      storyCollaborationInvitationData: s.default.inject.service(),
      session: s.default.inject.service(),
      analytics: s.default.inject.service(),
      model: function (e) {
        return this.get("store").findRecord(
          "story-collaboration-invitation",
          e.invitation_token
        );
      },
      afterModel: function (e, t) {
        if (
          (this._super.apply(this, arguments),
          this.set("story", e.get("story.content")),
          this.get("session.currentUser.isUnassigned"))
        )
          this.replaceWith("registration");
        else {
          if (!e.get("isPending"))
            throw new Error(
              "A user has already been registered with this invitation."
            );
          if (this.get("session.isGuestUser"))
            this.set(
              "storyCollaborationInvitationData.invitationToken",
              t.params.collaborate.invitation_token
            ),
              this.get(
                "analytics"
              ).trackStoryEvent(
                "Start Sign Up from Collaboration Invitation",
                this.get("story"),
                { "Invitee email": e.get("email") }
              ),
              this.replaceWith("registration");
          else {
            if (!this.get("isContributor"))
              throw new Error("You are not allowed to edit this story.");
            this.replaceWith("story", this.get("story.slug"));
          }
        }
      },
    });
  }),
  define("frontend/routes/confirm-error", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Route.extend({
      setupController: function (e, t) {
        this._super.apply(this, arguments);
        var n = t.responseJSON.errors[0].messages[0];
        "is invalid" === n && e.set("isInvalidToken", !0);
      },
    });
  }),
  define("frontend/routes/confirm", [
    "exports",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "frontend/routes/base/guests-only",
    "frontend/utils/analytics-utils",
  ], function (e, t, n, s, o) {
    e.default = s.default.extend({
      isRegistrationRoute: !0,
      model: function (e) {
        return t.default.post(n.default.confirm_path(), {
          confirmation_token: e.confirmation_token,
        });
      },
      afterModel: function (e) {
        this._super.apply(this, arguments),
          this.get("store").pushPayload("user", e);
        var t = this.get("store").peekRecord("user", e.data.id);
        this.get("analytics").trackEvent("Confirmation", {
          Email: t.get("email"),
          "User type": (0, o.typeOfUser)(t),
        }),
          this.get("session").login(t),
          this.transitionTo("dashboard");
      },
    });
  }),
  define("frontend/routes/contact", [
    "exports",
    "frontend/routes/base/public",
    "frontend/utils/sutori-info",
  ], function (e, t, n) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Contact",
      metaDescription: "Contact information for Sutori.",
      schemaOrgData: function () {
        return {
          "@context": "http://schema.org",
          "@type": "Organization",
          mainEntityOfPage: { "@type": "WebPage", "@id": window.location.href },
          "@id": "https://www.sutori.com",
          name: "Sutori",
          address: {
            "@type": "PostalAddress",
            streetAddress: n.default.STREET_ADDRESS,
            addressLocality: n.default.ADDRESS_LOCALITY,
            addressRegion: n.default.ADDRESS_REGION,
            postalCode: n.default.POSTAL_CODE,
            addressCountry: n.default.ADDRESS_COUNTRY_SHORT,
          },
          url: "https://www.sutori.com/contact",
          telephone: n.default.TELEPHONE,
        };
      },
    });
  }),
  define("frontend/routes/dashboard", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
  ], function (e, t) {
    e.default = t.default.extend({
      titleToken: "Dashboard",
      beforeModel: function () {
        this._super.apply(this, arguments);
        var e = this.get("session.currentUser");
        if (!e.get("isPersonal"))
          if (e.get("isTeacher")) this.replaceWith("schoolClasses");
          else if (e.get("isStudent")) this.replaceWith("schoolClasses");
          else if (e.get("isEditor")) this.replaceWith("storiesEvaluation");
          else if (e.get("isPublisher"))
            this.replaceWith("organization", e.get("organization"));
          else {
            if (!e.get("isUnassigned"))
              throw new Error("Unknown user type '" + e.get("type") + "'.");
            this.replaceWith("registration");
          }
      },
      setupController: function (e) {
        this._super.apply(this, arguments), this._setupOwnStories(e);
      },
      _setupOwnStories: function (e) {
        var t = this.store.query("story", {
          filter: { contributors_ids: [this.get("session.currentUser.id")] },
        });
        e.set("ownStoriesPromise", t);
      },
    });
  }),
  define("frontend/routes/education", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Education",
      metaDescription: "Sutori's mission is to captivate students",
    });
  }),
  define("frontend/routes/error", [
    "exports",
    "ember",
    "frontend/routes/base/public",
    "frontend/utils/http-status-codes",
  ], function (e, t, n, s) {
    e.default = n.default.extend({
      prerenderStatusCode: t.default.computed(
        "controller.errorStatusCode",
        function () {
          var e = this.get("controller.errorStatusCode");
          if (e === s.NOT_FOUND) return e;
        }
      ),
      setupController: function (e, t) {
        e.set("errorStatusCode", t.status);
      },
    });
  }),
  define("frontend/routes/forgot-password", [
    "exports",
    "frontend/routes/base/guests-only",
  ], function (e, t) {
    e.default = t.default.extend({
      isRegistrationRoute: !0,
      titleToken: "Forgot password",
      setupController: function (e, t) {
        this._super(e, t), e.set("requestSent", !1);
      },
    });
  }),
  define("frontend/routes/help-category", [
    "exports",
    "frontend/routes/base/public",
    "ember",
    "frontend/utils/metadata",
  ], function (e, t, n, s) {
    e.default = t.default.extend({
      titleToken: function (e) {
        return e.get("name");
      },
      helpCategoryName: n.default.computed.reads("controller.model.name"),
      metaTitle: n.default.computed("helpCategoryName", function () {
        return (0, s.formatMetaTitle)(this.get("helpCategoryName"));
      }),
      metaDescription: n.default.computed("helpCategoryName", function () {
        return (0,
        s.formatMetaDescription)("Questions and answers about how to use Sutori regarding " + this.get("helpCategoryName"));
      }),
      model: function (e) {
        return this.get("store").findRecord("help-category", e.slug);
      },
      serialize: function (e) {
        return { slug: e.get("id") };
      },
      setupController: function (e, t) {
        this._super.apply(this, arguments);
        var n = this.get("store").query("help-item", {
          filter: { category: t.get("id") },
        });
        e.set("helpItemsPromise", n);
      },
      actions: {
        error: function () {
          this.replaceWith("help");
        },
      },
    });
  }),
  define("frontend/routes/help-item", [
    "exports",
    "frontend/routes/base/public",
    "frontend/utils/xhr",
    "frontend/utils/api-paths",
    "ember",
    "frontend/utils/metadata",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.extend({
      titleToken: function (e) {
        return e.get("question");
      },
      metaTitle: o.default.computed("controller.model.question", function () {
        return (0, a.formatMetaTitle)(this.get("controller.model.question"));
      }),
      metaDescription: o.default.computed(
        "controller.model.answer",
        function () {
          return (0, a.formatMetaDescription)(
            this.get("controller.model.answer")
          );
        }
      ),
      model: function (e) {
        return this.get("store").findRecord("help-item", e.slug);
      },
      serialize: function (e) {
        return { slug: e.get("id") };
      },
      afterModel: function (e) {
        n.default.put(
          s.default.help_item_increment_impression_count_path(e.get("id"))
        );
      },
    });
  }),
  define("frontend/routes/help", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      titleToken: "Help",
      metaDescription: "Questions and answers about how to use Sutori",
      model: function () {
        return this.get("store").query("help-item", {
          sort_params: ["impression_count DESC"],
          limit: 15,
        });
      },
    });
  }),
  define("frontend/routes/index", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({ isWebsiteRoute: !0 });
  }),
  define("frontend/routes/item", [
    "exports",
    "frontend/routes/base/public",
    "ember",
    "frontend/utils/seo-constants",
    "frontend/mixins/route-with-sluggable-model",
  ], function (e, t, n, s, o) {
    e.default = t.default.extend(o.default, {
      item: n.default.computed.reads("controller.model"),
      titleToken: function () {
        return this.get("metaDescription");
      },
      metaDescription: n.default.computed.reads("item.metaDescription"),
      metaImage: n.default.computed(
        "item.{hasImage,imageFile.bestVersionToUseForMetaTags}",
        function () {
          return this.get("item.hasImage")
            ? this.get("item.imageFile.bestVersionToUseForMetaTags")
            : s.DEFAULT_META_IMAGE;
        }
      ),
      metaImageCaption: n.default.computed(
        "item.{hasImage,imageFile.bestVersionToUseForMetaTags}",
        function () {
          return this.get("item.hasImage")
            ? this.get("item.imageFile.caption")
            : s.DEFAULT_META_IMAGE_ALT;
        }
      ),
      openGraphTags: n.default.computed(
        "metaDescription",
        "metaImage.{url,width,height}",
        "item.{metaTitle,story.authorName,createdAt,updatedAt,audioFile.url,hasAudio}",
        function () {
          var e = this.get("item");
          if (n.default.isPresent(e)) {
            var t = [
              { property: "og:type", content: "article" },
              { property: "og:title", content: e.get("metaTitle") },
              {
                property: "og:description",
                content: this.get("metaDescription"),
              },
              { property: "og:author", content: e.get("story.authorName") },
              { property: "og:site_name", content: s.DEFAULT_META_SITE_NAME },
              { property: "og:url", content: window.location.href },
              {
                property: "article:published_time",
                content: e.get("createdAt").toISOString(),
              },
              {
                property: "article:modified_time",
                content: e.get("updatedAt").toISOString(),
              },
              { property: "og:image", content: this.get("metaImage.url") },
              {
                property: "og:image:width",
                content: this.get("metaImage.width"),
              },
              {
                property: "og:image:height",
                content: this.get("metaImage.height"),
              },
            ];
            return (
              e.get("hasAudio") &&
                (t = t.concat([
                  { property: "og:audio", content: e.get("audioFile.url") },
                ])),
              t
            );
          }
          return [];
        }
      ),
      twitterCardTags: n.default.computed(
        "metaDescription",
        "metaImage.url",
        "metaImageCaption",
        "item.{metaTitle,hasImage}",
        function () {
          var e = this.get("item");
          if (n.default.isPresent(e)) {
            var t = "summary";
            return (
              e.get("hasImage") && (t = "summary_large_image"),
              [
                { name: "twitter:card", content: t },
                { name: "twitter:site", content: s.TWITTER_CARD_SITE },
                { name: "twitter:title", content: e.get("metaTitle") },
                {
                  name: "twitter:description",
                  content: this.get("metaDescription"),
                },
                { name: "twitter:image", content: this.get("metaImage.url") },
                {
                  name: "twitter:image:alt",
                  content: this.get("metaImageCaption"),
                },
              ]
            );
          }
          return [];
        }
      ),
      model: function (e) {
        return this.get("store").findRecord("item", e.slug);
      },
    });
  }),
  define("frontend/routes/login", [
    "exports",
    "frontend/routes/base/guests-only",
    "frontend/mixins/trackable-page",
    "frontend/mixins/login",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, s.default, {
      isRegistrationRoute: !0,
      titleToken: "Login",
      setupController: function (e) {
        this._super.apply(this, arguments), e.send("reset");
      },
      actions: {
        login: function () {
          this.login();
        },
      },
    });
  }),
  define("frontend/routes/media-kit", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      model: function () {
        return this.get("store").findRecord("story", "media-kit");
      },
      titleToken: "Media kit",
      metaDescription:
        "Feel free to use these logos, screenshots and pictures to present Sutori!",
    });
  }),
  define("frontend/routes/not-found", [
    "exports",
    "frontend/routes/base/public",
    "frontend/utils/http-status-codes",
    "ember",
  ], function (e, t, n, s) {
    e.default = t.default.extend({
      model: function () {
        return new s.default.RSVP.Promise(function (e, t) {
          t({ status: n.NOT_FOUND });
        });
      },
      actions: {
        error: function () {
          this.intermediateTransitionTo("error", { status: n.NOT_FOUND });
        },
      },
    });
  }),
  define("frontend/routes/obsolete/community-timelines", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "stories.community",
    });
  }),
  define("frontend/routes/obsolete/forgot-password", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "forgotPassword",
    });
  }),
  define("frontend/routes/obsolete/go-premium", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "upgrade",
    });
  }),
  define("frontend/routes/obsolete/hstry-pro", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "business",
    });
  }),
  define("frontend/routes/obsolete/learn-more", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "education",
    });
  }),
  define("frontend/routes/obsolete/plans", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "education",
    });
  }),
  define("frontend/routes/obsolete/pricing", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "upgrade",
    });
  }),
  define("frontend/routes/obsolete/reset-password", [
    "exports",
    "ember",
    "frontend/mixins/obsolete-route",
  ], function (e, t, n) {
    e.default = t.default.Route.extend(n.default, {
      redirectToRoute: "resetPassword",
      routeParams: ["token"],
    });
  }),
  define("frontend/routes/obsolete/school-class", [
    "exports",
    "ember",
    "frontend/mixins/obsolete-route",
  ], function (e, t, n) {
    e.default = t.default.Route.extend(n.default, {
      redirectToRoute: "schoolClass",
      routeParams: ["school_class_id"],
    });
  }),
  define("frontend/routes/obsolete/school-classes", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "schoolClasses",
    });
  }),
  define("frontend/routes/obsolete/teacher-confirmation", [
    "exports",
    "ember",
    "frontend/mixins/obsolete-route",
  ], function (e, t, n) {
    e.default = t.default.Route.extend(n.default, {
      redirectToRoute: "confirm",
      routeParams: ["confirmation_token"],
    });
  }),
  define("frontend/routes/obsolete/teacher-edit", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "profile",
    });
  }),
  define("frontend/routes/obsolete/teacher-unsubscribe", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "unsubscribe",
    });
  }),
  define("frontend/routes/obsolete/timeline-bundle-dash", [
    "exports",
    "ember",
    "frontend/mixins/obsolete-route",
  ], function (e, t, n) {
    e.default = t.default.Route.extend(n.default, {
      redirectToRoute: "storyUnit",
      routeParams: ["story_unit_id"],
    });
  }),
  define("frontend/routes/obsolete/timeline-bundle-underscore", [
    "exports",
    "ember",
    "frontend/mixins/obsolete-route",
  ], function (e, t, n) {
    e.default = t.default.Route.extend(n.default, {
      redirectToRoute: "storyUnit",
      routeParams: ["story_unit_id"],
    });
  }),
  define("frontend/routes/obsolete/timeline-bundles", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "stories.sutori",
    });
  }),
  define("frontend/routes/obsolete/timeline-embed", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "story.embed",
      routeParams: ["slug"],
    });
  }),
  define("frontend/routes/obsolete/timeline-instance", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "stories.index",
    });
  }),
  define("frontend/routes/obsolete/timeline-of-the-month", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "stories.community.featured",
    });
  }),
  define("frontend/routes/obsolete/timeline-overview", [
    "exports",
    "ember",
    "frontend/mixins/obsolete-route",
  ], function (e, t, n) {
    e.default = t.default.Route.extend(n.default, {
      redirectToRoute: "story",
      routeParams: ["slug"],
    });
  }),
  define("frontend/routes/obsolete/timeline", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "story",
      routeParams: ["slug"],
    });
  }),
  define("frontend/routes/obsolete/timelines-hstry", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      redirectToRoute: "stories.sutori",
    });
  }),
  define("frontend/routes/obsolete/timelines", [
    "exports",
    "frontend/mixins/obsolete-route",
    "ember",
  ], function (e, t, n) {
    e.default = n.default.Route.extend(t.default, {
      getRedirectionRoute: function (e) {
        var t = e.params[e.targetName].wildcard.replace("/", ".");
        return "stories." + t;
      },
    });
  }),
  define("frontend/routes/organization", [
    "exports",
    "frontend/routes/base/public",
    "frontend/mixins/route-with-sluggable-model",
    "frontend/utils/object-promise",
    "ember-concurrency",
    "ember",
  ], function (e, t, n, s, o, a) {
    e.default = t.default.extend(n.default, {
      model: function (e) {
        return this.get("store").findRecord("organization", e.slug);
      },
      titleToken: function (e) {
        return e.get("name");
      },
      setupController: function (e, t) {
        this._super.apply(this, arguments),
          e.set(
            "storiesPromise",
            s.default.create({
              promise: this.get("getStoriesAndTheirIntroductionsTask").perform(
                t
              ),
            })
          );
      },
      getStoriesAndTheirIntroductionsTask: (0, o.task)(
        regeneratorRuntime.mark(function e(t) {
          var n;
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (
                      (e.next = 2),
                      this.store.query("story", {
                        filter: { organizations_slugs: [t.get("slug")] },
                      })
                    );
                  case 2:
                    if (((n = e.sent), a.default.isEmpty(n))) {
                      e.next = 6;
                      break;
                    }
                    return (
                      (e.next = 6),
                      this.store.query("augmented-text", {
                        filter: {
                          ids: n.map(function (e) {
                            return e.belongsTo("introductionText").id();
                          }),
                        },
                      })
                    );
                  case 6:
                    return e.abrupt("return", n);
                  case 7:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
    });
  }),
  define("frontend/routes/personal-registration", [
    "exports",
    "frontend/routes/base/authenticated-but-unassigned-users-only",
    "frontend/mixins/trackable-page",
    "frontend/mixins/login",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, s.default, {
      isRegistrationRoute: !0,
      titleToken: "Sign up",
    });
  }),
  define("frontend/routes/press", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      model: function () {
        return this.get("store").findRecord("story", "sutori-in-the-press");
      },
      titleToken: "Sutori in the Press",
      metaDescription: "Discover what the press is telling about Sutori.",
    });
  }),
  define("frontend/routes/privacy-policy", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Privacy policy",
      metaDescription:
        "We care about privacy. This page explains which data are used by Sutori.",
    });
  }),
  define("frontend/routes/registration", [
    "exports",
    "frontend/routes/base/authenticated-but-unassigned-users-only",
    "frontend/mixins/trackable-page",
    "frontend/mixins/login",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, s.default, {
      isRegistrationRoute: !0,
      titleToken: "Sign up",
    });
  }),
  define("frontend/routes/reset-password", [
    "exports",
    "frontend/routes/base/guests-only",
  ], function (e, t) {
    e.default = t.default.extend({
      isRegistrationRoute: !0,
      model: function (e) {
        return { resetPasswordToken: e.token };
      },
      setupController: function (e, t) {
        this._super(e, t), e.set("isPasswordReset", !1);
      },
    });
  }),
  define("frontend/routes/school-class", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
    "frontend/utils/object-promise",
    "frontend/mixins/trackable-page",
  ], function (e, t, n, s) {
    e.default = t.default.extend(s.default, {
      _classesWithResolvedStoriesPromise: [],
      afterModel: function (e) {
        this.set(
          "titleToken",
          e.displayNameForUser(this.get("session.currentUser"))
        );
      },
      setupController: function (e, t) {
        this._super(e, t);
        var n = this.get("session.currentUser");
        n.get("isTeacher")
          ? (this._setupStoriesInClass(e, t), this._setupStudents(e, t))
          : n.get("isStudent") &&
            (this._setupOwnStories(e), this._setupStoriesInClass(e, t));
      },
      _setupStoriesInClass: function (e, t) {
        e.set(
          "storiesInClassPromise",
          n.default.create({
            promise: this.store.query("story", {
              filter: { school_classes_ids: [t.get("id")] },
            }),
          })
        );
      },
      _setupStudents: function (e, t) {
        e.set("studentsPromise", t.get("users"));
      },
      _setupOwnStories: function (e) {
        e.set("ownStoriesPromise", this.get("session.currentUser.stories"));
      },
      actions: {
        willTransition: function () {
          this.set("controller.selectedStudentStories", []);
        },
      },
    });
  }),
  define("frontend/routes/school-classes", [
    "exports",
    "ember",
    "frontend/routes/base/authenticated-users-only",
    "frontend/mixins/trackable-page",
    "frontend/utils/object-promise",
  ], function (e, t, n, s, o) {
    e.default = n.default.extend(s.default, {
      titleToken: "School classes",
      model: function () {
        return t.default.RSVP.hash({
          schoolClasses: this.get("store").query("school-class", {}),
          stories: this.get("store").query("story", {
            filter: { contributors_ids: [this.get("session.currentUser.id")] },
          }),
        });
      },
      setupController: function (e, n) {
        this._super.apply(this, arguments),
          e.set("schoolClasses", n.schoolClasses),
          e.set(
            "myStoriesPromise",
            o.default.create({
              promise: new t.default.RSVP.Promise(function (e) {
                e(n.stories);
              }),
            })
          ),
          e.set("modalVisible", !1),
          e.set("isShowingArchivedClasses", !1);
      },
      trackViewDashboardEvent: t.default.on("activate", function () {
        this.get("analytics").trackEvent("View Dashboard");
      }),
    });
  }),
  define("frontend/routes/status", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Status",
      metaDescription: "Check the status of the Sutori application.",
    });
  }),
  define("frontend/routes/stories-evaluation", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
  ], function (e, t) {
    e.default = t.default.extend({ titleToken: "Public stories" });
  }),
  define("frontend/routes/stories", [
    "exports",
    "frontend/routes/base/public",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      setupController: function (e) {
        e.set("searchData", n.default.Object.create({ query: "" }));
      },
    });
  }),
  define("frontend/routes/stories/community", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      titleToken: "Community stories",
      activeSubRouteName: "stories.community.featured",
      beforeModel: function (e) {
        this._super.apply(this, arguments),
          "stories.community.index" === e.targetName &&
            this.transitionTo(this.get("activeSubRouteName"));
      },
      setupController: function (e) {
        e.set("storiesController.searchData.query", "");
      },
      actions: {
        activeSubRouteNameChanged: function (e) {
          this.set("activeSubRouteName", e);
        },
      },
    });
  }),
  define("frontend/routes/stories/community/featured", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      metaTitle: "Editor's picks",
      metaDescription:
        "Stories that have been picked by Sutori's team of editors.",
    });
  }),
  define("frontend/routes/stories/community/latest", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      metaTitle: "Latest community stories",
      metaDescription:
        "Latest stories by teachers and students that have been shared publicly.",
    });
  });
define("frontend/routes/stories/community/student-work", [
  "exports",
  "frontend/routes/base/public",
], function (e, t) {
  e.default = t.default.extend({
    metaTitle: "Student work",
    metaDescription: "Community stories that were created by students.",
  });
});
define("frontend/routes/stories/index", [
  "exports",
  "frontend/routes/base/public",
], function (e, t) {
  e.default = t.default.extend({
    beforeModel: function (e) {
      this._super(e),
        this.get("session.isGuestUser")
          ? this.transitionTo("stories.community")
          : this.get("session.currentUser.isPublisher")
          ? this.transitionTo("stories.community")
          : this.get("session.currentUser.isEditor")
          ? this.transitionTo("stories.sutori")
          : this.get("session.currentUser.isPersonal")
          ? this.transitionTo("stories.sutori")
          : this.get("session.currentUser.isTeacher") &&
            this.transitionTo("stories.sutori");
    },
  });
}),
  define("frontend/routes/stories/new", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      queryParams: { schoolClassId: { refreshModel: !0 } },
      commandFactory: n.default.inject.service(),
      model: function () {
        var e = n.default
          .getOwner(this)
          .lookup("factory:story")
          .createUserStory(this.get("session.currentUser"));
        return (
          this.get("session.currentUser.isPersonal") &&
            e.set("title", "My story"),
          e.save()
        );
      },
      afterModel: function (e, t) {
        var s = this;
        this.get("analytics").trackStoryEvent("Story Creation", e, {
          "Creation type": "new",
        }),
          this.get("analytics").trackPeopleIncrement(
            "Number of stories created"
          );
        var o = t.queryParams.schoolClassId;
        n.default.isPresent(o)
          ? !(function () {
              var t = s.get("store").peekRecord("schoolClass", o),
                n = s
                  .get("commandFactory")
                  .createCommand("share-stories-with-school-class");
              n.execute([e], t, "teacher", "story")
                .then(function () {
                  s.replaceWith("story", e, {
                    queryParams: { schoolClassId: o },
                  });
                })
                .catch(function () {
                  e.destroyRecord(), s.replaceWith("schoolClass", t);
                });
            })()
          : this.replaceWith("story", e);
      },
      actions: {
        error: function () {
          return this.transitionTo("dashboard");
        },
      },
    });
  }),
  define("frontend/routes/stories/search", [
    "exports",
    "frontend/routes/base/public",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      titleToken: "Search stories",
      beforeModel: function (e) {
        this._super.apply(this, arguments),
          n.default.isEmpty(e.queryParams.query) && this.replaceWith("stories");
      },
      setupController: function (e, t, n) {
        e.set("storiesController.searchData.query", n.queryParams.query);
      },
      query: n.default.computed.reads(
        "controller.storiesController.searchData.query"
      ),
      metaDescription: n.default.computed("query", function () {
        return (
          "Search through all the stories created on the Sutori platform that match '" +
          this.get("query") +
          "'"
        );
      }),
      metaTitle: "Search stories",
    });
  }),
  define("frontend/routes/stories/sutori/index", [
    "exports",
    "frontend/routes/base/public",
    "frontend/mixins/trackable-page",
  ], function (e, t, n) {
    e.default = t.default.extend(n.default, {
      titleToken: "Sutori stories",
      setupController: function (e) {
        e.set(
          "randomFreeSutoriStoriesPromise",
          this.get("store").query("story", {
            filter: { is_free_sutori: !0 },
            sort_params: ["shuffled"],
            page: 1,
            per_page: 1,
          })
        ),
          e.set("storiesController.searchData.query", "");
      },
      metaDescription: "Overview of all units of stories published by Sutori.",
      metaTitle: "Sutori stories",
    });
  }),
  define("frontend/routes/stories/sutori/new-unit", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
  ], function (e, t) {
    e.default = t.default.extend({
      model: function () {
        return this.get("store")
          .createRecord("story-unit", {
            title: "Title of the unit",
            grade: "Middle school",
          })
          .save();
      },
      afterModel: function (e) {
        this.replaceWith("storyUnit", e, { queryParams: { edit: !0 } });
      },
      actions: {
        error: function () {
          return this.transitionTo("stories.sutori.index");
        },
      },
    });
  }),
  define("frontend/routes/story-unit", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      model: function (e) {
        return this.get("store").findRecord("story-unit", e.story_unit_id);
      },
      titleToken: function (e) {
        return e.get("title");
      },
    });
  }),
  define("frontend/routes/story-unit/index", [
    "exports",
    "frontend/routes/base/public",
    "frontend/mixins/trackable-page",
    "ember",
    "frontend/utils/seo-constants",
  ], function (e, t, n, s, o) {
    e.default = t.default.extend(n.default, {
      model: function () {
        var e = this.modelFor("story-unit"),
          t = e.get("stories"),
          n = 0 < t.get("length");
        if (n) {
          var o = this.get("store").query("augmented-text", {
            filter: {
              ids: t.map(function (e) {
                return e.belongsTo("introductionText").id();
              }),
            },
          });
          return s.default.RSVP.hash({ storyUnit: e, introductionTexts: o });
        }
        return s.default.RSVP.hash({ storyUnit: e });
      },
      setupController: function (e, t) {
        var n = t.storyUnit;
        this._super.apply(this, arguments), e.set("model", n);
      },
      storyUnit: s.default.computed.reads("controller.model"),
      metaImage: s.default.computed(
        "storyUnit.{hasBanner,bannerImageFile.bestVersionToUseForMetaTags}",
        function () {
          return this.get("storyUnit.hasBanner")
            ? this.get("storyUnit.bannerImageFile.bestVersionToUseForMetaTags")
            : o.DEFAULT_META_IMAGE;
        }
      ),
      metaImageCaption: s.default.computed(
        "storyUnit.{hasBanner,bannerImageFile.bestVersionToUseForMetaTags}",
        function () {
          return this.get("storyUnit.hasBanner")
            ? this.get("storyUnit.bannerImageFile.caption")
            : o.DEFAULT_META_IMAGE_ALT;
        }
      ),
      metaDescription: s.default.computed("storyUnit.title", function () {
        return "Unit of stories about " + this.get("storyUnit.title") + ".";
      }),
      openGraphTags: s.default.computed(
        "metaDescription",
        "storyUnit.{metaTitle,createdAt,updatedAt,hasBanner}",
        "metaImage.{url,width,height}",
        function () {
          var e = this.get("storyUnit");
          return s.default.isPresent(e)
            ? [
                { property: "og:type", content: "article" },
                { property: "og:title", content: e.get("metaTitle") },
                {
                  property: "og:description",
                  content: this.get("metaDescription"),
                },
                { property: "og:author", content: "Sutori" },
                { property: "og:site_name", content: o.DEFAULT_META_SITE_NAME },
                { property: "og:url", content: window.location.href },
                {
                  property: "article:published_time",
                  content: e.get("createdAt").toISOString(),
                },
                {
                  property: "article:modified_time",
                  content: e.get("updatedAt").toISOString(),
                },
                { property: "og:image", content: this.get("metaImage.url") },
                {
                  property: "og:image:width",
                  content: this.get("metaImage.width"),
                },
                {
                  property: "og:image:height",
                  content: this.get("metaImage.height"),
                },
              ]
            : [];
        }
      ),
      twitterCardTags: s.default.computed(
        "metaDescription",
        "storyUnit.{metaTitle,hasBanner}",
        "metaImage.url",
        "metaImageCaption",
        function () {
          var e = this.get("storyUnit");
          if (s.default.isPresent(e)) {
            var t = "summary";
            return (
              e.get("hasBanner") && (t = "summary_large_image"),
              [
                { name: "twitter:card", content: t },
                { name: "twitter:site", content: o.TWITTER_CARD_SITE },
                { name: "twitter:title", content: e.get("metaTitle") },
                {
                  name: "twitter:description",
                  content: this.get("metaDescription"),
                },
                { name: "twitter:image", content: this.get("metaImage.url") },
                {
                  name: "twitter:image:alt",
                  content: this.get("metaImageCaption"),
                },
              ]
            );
          }
          return [];
        }
      ),
    });
  }),
  define("frontend/routes/story-unit/new-story", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      model: function () {
        var e = n.default.getOwner(this).lookup("factory:story");
        return e
          .createSutoriStory(
            this.modelFor("storyUnit"),
            this.get("session.currentUser")
          )
          .save();
      },
      afterModel: function (e) {
        this.replaceWith("story", e);
      },
      actions: {
        error: function () {
          return this.transitionTo("stories.sutori.index");
        },
      },
    });
  }),
  define("frontend/routes/story", [
    "exports",
    "frontend/mixins/conditional-authentication",
    "frontend/utils/seo-constants",
    "frontend/utils/http-status-codes",
    "frontend/routes/base/public",
    "frontend/mixins/route-with-sluggable-model",
    "ember",
    "frontend/utils/metadata",
  ], function (e, t, n, s, o, a, i, l) {
    e.default = o.default.extend(t.default, a.default, {
      story: i.default.computed.reads("controller.model"),
      titleToken: function (e) {
        return e.get("presentableTitle");
      },
      metaImage: i.default.computed(
        "story.{hasBanner,bannerImageFile.bestVersionToUseForMetaTags}",
        function () {
          return this.get("story.hasBanner")
            ? this.get("story.bannerImageFile.bestVersionToUseForMetaTags")
            : n.DEFAULT_META_IMAGE;
        }
      ),
      metaImageCaption: i.default.computed(
        "story.{hasBanner,bannerImageFile.bestVersionToUseForMetaTags}",
        function () {
          return this.get("story.hasBanner")
            ? this.get("story.bannerImageFile.caption")
            : n.DEFAULT_META_IMAGE_ALT;
        }
      ),
      metaDescription: i.default.computed(
        "story.introductionText.contentAsPlainText",
        function () {
          return (0, l.formatMetaDescription)(
            this.get("story.introductionText.contentAsPlainText")
          );
        }
      ),
      openGraphTags: i.default.computed(
        "metaDescription",
        "story.{metaTitle,authorName,createdAt,updatedAt}",
        "metaImage.{url,width,height}",
        function () {
          var e = this.get("story");
          return i.default.isPresent(e)
            ? [
                { property: "og:type", content: "article" },
                { property: "og:title", content: e.get("metaTitle") },
                {
                  property: "og:description",
                  content: this.get("metaDescription"),
                },
                { property: "og:author", content: e.get("authorName") },
                { property: "og:site_name", content: n.DEFAULT_META_SITE_NAME },
                { property: "og:url", content: window.location.href },
                { property: "og:image", content: this.get("metaImage.url") },
                {
                  property: "og:image:width",
                  content: this.get("metaImage.width"),
                },
                {
                  property: "og:image:height",
                  content: this.get("metaImage.height"),
                },
                {
                  property: "article:published_time",
                  content: e.get("createdAt").toISOString(),
                },
                {
                  property: "article:modified_time",
                  content: e.get("updatedAt").toISOString(),
                },
              ]
            : [];
        }
      ),
      twitterCardTags: i.default.computed(
        "metaDescription",
        "story.{metaTitle,hasBanner}",
        "metaImage.url",
        "metaImageCaption",
        function () {
          var e = this.get("story");
          if (i.default.isPresent(e)) {
            var t = "summary";
            return (
              e.get("hasBanner") && (t = "summary_large_image"),
              [
                { name: "twitter:card", content: t },
                { name: "twitter:site", content: n.TWITTER_CARD_SITE },
                { name: "twitter:title", content: e.get("metaTitle") },
                {
                  name: "twitter:description",
                  content: this.get("metaDescription"),
                },
                { name: "twitter:image", content: this.get("metaImage.url") },
                {
                  name: "twitter:image:alt",
                  content: this.get("metaImageCaption"),
                },
              ]
            );
          }
          return [];
        }
      ),
      schemaOrgAuthor: i.default.computed(
        "story.{isSutoriStory,isThirdPartyStory,organizationName,authorName}",
        function () {
          var e = void 0,
            t = void 0;
          return (
            this.get("story.isSutoriStory") ||
            this.get("story.isThirdPartyStory")
              ? ((e = "Organization"), (t = this.get("story.organizationName")))
              : ((e = "Person"), (t = this.get("story.authorName"))),
            { "@type": e, name: t }
          );
        }
      ),
      schemaOrgData: i.default.computed(
        "schemaOrgAuthor",
        "story.{schemaOrgHeadline,createdAt,updatedAt,hasBanner}",
        "metaDescription",
        "metaImage.{url,width,height}",
        function () {
          var e = this.get("story");
          if (i.default.isPresent(e) && e.get("hasBanner"))
            return {
              "@context": "http://schema.org",
              "@type": "Article",
              mainEntityOfPage: {
                "@type": "WebPage",
                "@id": window.location.href,
              },
              headline: e.get("schemaOrgHeadline"),
              image: {
                "@type": "ImageObject",
                url: this.get("metaImage.url"),
                width: this.get("metaImage.width"),
                height: this.get("metaImage.height"),
              },
              datePublished: e.get("createdAt").toISOString(),
              dateModified: e.get("updatedAt").toISOString(),
              author: this.get("schemaOrgAuthor"),
              publisher: n.SCHEMA_ORG_SUTORI_PUBLISHER,
              description: this.get("metaDescription"),
            };
        }
      ),
      beforeModel: function (e) {
        var t = e.params.story.slug;
        "history-of-my-lifetime-9b7c" === t && this.replaceWith("stories");
      },
      model: function (e) {
        return this.get("store").findRecord("story", e.slug);
      },
      setupController: function (e, t) {
        this._super(e, t), t.set("isFinishing", !1), e.set("isActive", !0);
      },
      activateController: i.default.on("activate", function () {
        i.default.isPresent(this.get("controller")) &&
          this.set("controller.isActive", !0);
      }),
      deactivateController: i.default.on("deactivate", function () {
        this.set("controller.isActive", !1);
      }),
      actions: {
        error: function (e, t) {
          var n = e.status,
            o = !this.get("session.isLoggedIn");
          return (
            n !== s.FORBIDDEN ||
            !o ||
            void this.requireAuthenticationBeforeAccess(t)
          );
        },
      },
    });
  }),
  define("frontend/routes/story/embed", ["exports", "ember"], function (e, t) {
    e.default = t.default.Route.extend({
      afterModel: function (e) {
        this.get("analytics").trackStoryEvent("View Story", e, {
          "Is embedded": !0,
        });
      },
      setupController: function () {
        this._super.apply(this, arguments),
          this.controllerFor("application").setProperties({
            showApplicationHeader: !1,
            showApplicationFooter: !1,
          });
      },
      activate: function () {
        $("body").addClass(this.get("cssClass"));
      },
      deactivate: function () {
        $("body").removeClass(this.get("cssClass"));
      },
      cssClass: "story-embed",
    });
  }),
  define("frontend/routes/story/index", ["exports", "ember"], function (e, t) {
    e.default = t.default.Route.extend({
      afterModel: function (e) {
        this.get("analytics").trackStoryEvent("View Story", e, {
          "Is embedded": !1,
        });
      },
    });
  }),
  define("frontend/routes/student-registration", [
    "exports",
    "frontend/routes/base/authenticated-but-unassigned-users-only",
    "frontend/mixins/trackable-page",
    "frontend/mixins/login",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, s.default, {
      isRegistrationRoute: !0,
      titleToken: "Sign up",
    });
  }),
  define("frontend/routes/student", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
    "frontend/utils/object-promise",
  ], function (e, t, n) {
    e.default = t.default.extend({
      model: function (e) {
        return this.store.findRecord("user", e.student_id);
      },
      titleToken: function (e) {
        return e.get("fullName");
      },
      setupController: function (e, t) {
        this._super.apply(this, arguments), this._setupStories(e, t);
      },
      _setupStories: function (e, t) {
        e.set(
          "storiesPromise",
          n.default.create({
            promise: this.store.query("story", {
              filter: {
                authors_ids: [t.get("id")],
                school_classes_ids: [e.get("schoolClassId")],
              },
            }),
          })
        );
      },
      actions: {
        willTransition: function () {
          this.set("controller.selectedStories", []);
        },
      },
    });
  }),
  define("frontend/routes/styleguide", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Styleguide",
      metaDescription: "Living styleguide for Sutori",
    });
  }),
  define("frontend/routes/teacher-registration", [
    "exports",
    "frontend/routes/base/authenticated-but-unassigned-users-only",
    "frontend/mixins/trackable-page",
    "frontend/mixins/login",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, s.default, {
      isRegistrationRoute: !0,
      titleToken: "Sign up",
    });
  }),
  define("frontend/routes/terms-of-use", [
    "exports",
    "frontend/routes/base/public",
  ], function (e, t) {
    e.default = t.default.extend({
      isWebsiteRoute: !0,
      titleToken: "Terms of use",
      metaDescription: "Read on for Sutori's terms of use.",
    });
  }),
  define("frontend/routes/unsubscribe", [
    "exports",
    "frontend/routes/base/public",
    "frontend/mixins/trackable-page",
    "ember",
  ], function (e, t, n, s) {
    e.default = t.default.extend(n.default, {
      model: function (e) {
        var t = this,
          n = e.token;
        return new s.default.RSVP.Promise(function (e, o) {
          var a = void 0;
          (a = t.get("session.isLoggedIn")
            ? t.get("session.currentUser.emailSubscriptions")
            : t
                .get("store")
                .query("email-subscription", { encoded_unsubscribe_token: n })),
            a
              .then(function (a) {
                var i = s.default
                  .getOwner(t)
                  .lookup("command:destroy-email-subscriptions");
                i.execute(a, n)
                  .then(function () {
                    e(a);
                  })
                  .catch(function (e) {
                    o(e);
                  });
              })
              .catch(function (e) {
                o(e);
              });
        });
      },
    });
  }),
  define("frontend/routes/upgrade", [
    "exports",
    "frontend/routes/base/authenticated-users-only",
    "ember",
    "frontend/mixins/trackable-page",
  ], function (e, t, n, s) {
    e.default = t.default.extend(s.default, {
      analytics: n.default.inject.service(),
      titleToken: "Upgrade",
      metaDescription:
        "Upgrade here. From free to premium or unlimited, choose the plan that is best suited for you!",
      actions: {
        didTransition: function () {
          this._super.apply(this, arguments),
            this.get("analytics").trackEvent("Page View - Upgrade");
        },
      },
    });
  }),
  define("frontend/routes/user", [
    "exports",
    "frontend/routes/base/public",
    "frontend/mixins/route-with-sluggable-model",
    "ember",
    "frontend/utils/seo-constants",
  ], function (e, t, n, s, o) {
    e.default = t.default.extend(n.default, {
      session: s.default.inject.service(),
      model: function (e) {
        return this.get("store").findRecord("user", e.slug);
      },
      user: s.default.computed.reads("controller.model"),
      titleToken: function (e) {
        return e === this.get("session.currentUser")
          ? "My profile"
          : e.get("fullName");
      },
      metaTitle: s.default.computed.reads("user.fullName"),
      metaDescription: s.default.computed("user.fullName", function () {
        return (
          "Profile and public stories of " + this.get("user.fullName") + "."
        );
      }),
      metaImage: s.default.computed(
        "user.profileImageFile.bestVersionToUseForMetaTags",
        function () {
          var e = this.get("user.profileImageFile.bestVersionToUseForMetaTags");
          return s.default.isPresent(e) ? e : o.DEFAULT_META_IMAGE;
        }
      ),
      metaImageCaption: s.default.computed(
        "user.{hasProfileImage,fullName}",
        function () {
          return this.get("user.hasProfileImage")
            ? "Profile photo of " + this.get("user.fullName")
            : o.DEFAULT_META_IMAGE_ALT;
        }
      ),
      openGraphTags: s.default.computed(
        "metaTitle",
        "metaDescription",
        "metaImage.{url,width,height}",
        "user.{firstName,lastName}",
        function () {
          return [
            { property: "og:type", content: "profile" },
            { property: "og:url", content: window.location.href },
            { property: "og:site_name", content: o.DEFAULT_META_SITE_NAME },
            { property: "og:title", content: this.get("metaTitle") },
            {
              property: "og:description",
              content: this.get("metaDescription"),
            },
            { property: "og:image", content: this.get("metaImage.url") },
            {
              property: "og:image:width",
              content: this.get("metaImage.width"),
            },
            {
              property: "og:image:height",
              content: this.get("metaImage.height"),
            },
            {
              property: "profile:first_name",
              content: this.get("user.firstName"),
            },
            {
              property: "profile:last_name",
              content: this.get("user.lastName"),
            },
          ];
        }
      ),
    });
  }),
  define("frontend/routes/waiting-for-confirmation", [
    "exports",
    "frontend/routes/base/guests-only",
  ], function (e, t) {
    e.default = t.default.extend({
      isRegistrationRoute: !0,
      titleToken: "Sign up",
    });
  }),
  define("frontend/sanitizers/just-newlines", ["exports"], function (e) {
    e.default = { elements: ["br"] };
  }),
  define("frontend/sanitizers/newlines", ["exports"], function (e) {
    e.default = {};
  }),
  define("frontend/serializers/application", [
    "exports",
    "ember-data",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.JSONAPISerializer.extend({
      keyForAttribute: function (e) {
        return n.default.String.underscore(e);
      },
      keyForRelationship: function (e) {
        return n.default.String.underscore(e);
      },
    });
  }),
  define("frontend/serializers/augmented-text", [
    "exports",
    "frontend/serializers/application",
  ], function (e, t) {
    e.default = t.default.extend({
      serialize: function (e, t) {
        var n = this._super(e, t);
        return (
          (n.data.attributes.content_as_plain_text = e.record.get(
            "contentAsPlainText"
          )),
          n
        );
      },
    });
  }),
  define("frontend/serializers/item", [
    "exports",
    "ember",
    "frontend/serializers/application",
  ], function (e, t, n) {
    e.default = n.default.extend({
      allowableAttributes: t.default
        .computed(function () {
          return {
            "quiz-question-multiple-choice": ["quizExplanation"],
            "quiz-question-matching": ["quizExplanation"],
            "chapter-title": ["heading"],
          };
        })
        .readOnly(),
      serializeAttribute: function (e, t, n, s) {
        if ("type" === n || "position" === n) this._super(e, t, n, s);
        else {
          var o = this.get("allowableAttributes")[e.attr("type")] || [];
          o.includes(n) && this._super(e, t, n, s);
        }
      },
    });
  }),
  define("frontend/serializers/story", [
    "exports",
    "frontend/serializers/application",
  ], function (e, t) {
    e.default = t.default.extend({
      allowedAttributes: ["title"],
      serializeAttribute: function (e, t, n, s) {
        this.get("allowedAttributes").includes(n) && this._super(e, t, n, s);
      },
    });
  }),
  define("frontend/services/addthis", [
    "exports",
    "ember",
    "frontend/config/environment",
    "frontend/utils/dom",
    "ember-concurrency",
    "npm:urijs",
  ], function (e, t, n, s, o, a) {
    var i =
        "//s7.addthis.com/js/300/addthis_widget.js#pubid=" +
        n.default.APP.ADDTHIS_PROJECT_ID,
      l = "addthis-script",
      r = 500,
      u = 2e4;
    e.default = t.default.Service.extend({
      logger: t.default.inject.service(),
      analytics: t.default.inject.service(),
      hasFailedLoading: !1,
      loadAddthis: function () {
        var e = this;
        return new t.default.RSVP.Promise(function (t, s) {
          if (n.default.APP.ADDTHIS_ENABLED && !e.get("hasFailedLoading")) {
            var o = e.get("loadAddthisTask").perform();
            o
              .then(function () {
                e.get("delayedCancelLoadAddthisTask").cancelAll(),
                  e._refreshAddthisToolboxes(),
                  e._analyticsIsSetup() || e._setupAnalytics(),
                  t();
              })
              .catch(function () {
                e.set("hasFailedLoading", !0), s();
              }),
              e.get("delayedCancelLoadAddthisTask").perform(o);
          } else s();
        });
      },
      loadAddthisTask: (0, o.task)(
        regeneratorRuntime.mark(function e() {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    (e.prev = 0),
                      this._addthisScriptTagInjected() ||
                        this._injectAddthisScriptTag();
                  case 2:
                    if (!t.default.isNone(window.addthis)) {
                      e.next = 7;
                      break;
                    }
                    return (e.next = 5), (0, o.timeout)(r);
                  case 5:
                    e.next = 2;
                    break;
                  case 7:
                    this.get("logger").info("Loaded AddThis"), (e.next = 13);
                    break;
                  case 10:
                    (e.prev = 10),
                      (e.t0 = e.catch(0)),
                      this.get("logger").info("Failed to load AddThis");
                  case 13:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this,
            [[0, 10]]
          );
        })
      ),
      delayedCancelLoadAddthisTask: (0, o.task)(
        regeneratorRuntime.mark(function e(t) {
          return regeneratorRuntime.wrap(
            function (e) {
              for (;;)
                switch ((e.prev = e.next)) {
                  case 0:
                    return (e.next = 2), (0, o.timeout)(u);
                  case 2:
                    t.cancel();
                  case 3:
                  case "end":
                    return e.stop();
                }
            },
            e,
            this
          );
        })
      ),
      _typeOfObject: function (e) {
        var t = new a.default(e),
          n = t.pathname(),
          s = /^\/story\/+/,
          o = /^\/item\/+/;
        return s.test(n) ? "story" : o.test(n) ? "item" : null;
      },
      _analyticsIsSetup: function () {
        return t.default.isPresent(this._addthisShareListener);
      },
      _setupAnalytics: function () {
        var e = this;
        (this._addthisShareListener = function (t) {
          e.get("analytics").trackEvent("Social Media Share", {
            "Type of object": e._typeOfObject(t.data.url),
            Service: t.data.service,
            URL: t.data.url,
            Title: t.data.title,
            Description: t.data.description,
          });
        }),
          window.addthis.addEventListener(
            "addthis.menu.share",
            this._addthisShareListener
          );
      },
      _refreshAddthisToolboxes: function () {
        window.addthis.layers.refresh && window.addthis.layers.refresh();
      },
      _addthisScriptTagInjected: function () {
        return $("#" + l).length > 0;
      },
      _injectAddthisScriptTag: function () {
        var e = (0, s.createScriptTag)(i, l);
        $("body").append(e), this.get("logger").info("Injected AddThis script");
      },
    });
  }),
  define("frontend/services/ajax", [
    "exports",
    "ember-ajax/services/ajax",
  ], function (e, t) {
    e.default = t.default.extend({ namespace: "/api" });
  }),
  define("frontend/services/analytics", [
    "exports",
    "ember",
    "frontend/config/environment",
    "npm:lodash.mapkeys",
    "frontend/utils/analytics-utils",
  ], function (e, t, n, s, o) {
    e.default = t.default.Service.extend({
      logger: t.default.inject.service(),
      session: t.default.inject.service(),
      clientInformation: t.default.inject.service(),
      routing: t.default.inject.service("-routing"),
      facebookPixel: t.default.inject.service(),
      init: function () {
        this._super.apply(this, arguments),
          this._initAmplitude(),
          this._setAmplitudeUserProperties();
      },
      trackGoogleAnalyticsPageView: function (e) {
        this._log("PAGE VIEW (Google Analytics): " + e),
          this._hasGoogleAnalytics() && ga("send", "pageview", e);
      },
      trackDriftPageView: function (e) {
        this._log("PAGE VIEW (Drift): " + e),
          this._hasDrift() && driftt.page(e);
      },
      trackPageView: function () {
        var e =
            arguments.length <= 0 || void 0 === arguments[0]
              ? {}
              : arguments[0],
          t = (0, s.default)(e, function (e, t) {
            return t.decamelize().replace(/_/g, " ").capitalize();
          });
        this.trackEvent("Page View", t);
      },
      trackStoryEvent: function (e, n) {
        var s =
          arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        if (t.default.isNone(n))
          throw new Error("`story` cannot be null or undefined.");
        t.default.merge(s, {
          "Story types": (0, o.typesOfStory)(
            n,
            this.get("session.currentUser")
          ),
          "Story is free": n.get("isFree"),
          "Story title": n.get("title"),
          "Story id": n.get("id"),
          "Story unit id": n.get("storyUnit.id"),
          "Author name": n.get("authorName"),
          "Author type": (0, o.typeOfUser)(n.get("author")),
          "Original story id": n.get("topAncestorStoryId"),
          "Organization name": n.get("topAncestorStoryOrganizationName"),
          "Organization id": n.get("topAncestorStoryOrganizationId"),
        }),
          this.trackEvent(e, s);
      },
      trackCallToActionEvent: function (e) {
        var n =
          arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1];
        t.default.merge(n, { Button: e }),
          this.trackEvent("Call to Action Clicked", n);
      },
      trackEvent: function (e, n) {
        (n = n || {}),
          t.default.isPresent(this.get("router.location").getURL) &&
            ((n.Path = this.get("router.url")),
            (n.Route = this.get("router.currentPath")),
            (n["Previous path"] = this.get("router.previousUrl"))),
          this._log("EVENT: (" + e + ", " + t.default.inspect(n) + ")"),
          this._hasAmplitude() && amplitude.getInstance().logEvent(e, n),
          this.get("isTrackingCurrentUserOnDrift") &&
            this._hasDrift() &&
            driftt.track(e, n),
          this._hasIntercom() && Intercom("trackEvent", e, n),
          this.get("facebookPixel").trackEvent(e, n);
      },
      trackPeopleIncrement: function (e, t) {
        if (
          ((t = t || 1),
          this._log("PEOPLE INCREMENT: (" + e + ", " + t + ")"),
          this._hasAmplitude())
        ) {
          var n = new amplitude.Identify().add(e, t);
          amplitude.getInstance().identify(n);
        }
      },
      trackLogout: function () {
        this._log("LOGOUT (Intercom)"),
          this._hasIntercom() && Intercom("shutdown");
      },
      identifyOnLogin: t.default.observer(
        "session.isLoggedIn",
        "isTrackingCurrentUserOnDrift",
        function () {
          t.default.run.once(this, this._identifyOnLogin);
        }
      ),
      setAmplitudeUserProperties: t.default.observer(
        "clientInformation.{devicePixelRatio,browserName,browserVersion,hasSupportedBrowser}",
        "session.currentUser.{id,type,email,username,firstName,lastName,hasOngoingSubscription,registrationMechanism,schoolClasses.@each.id,premiumSubscription.plan}",
        function () {
          t.default.run.once(this, this._setAmplitudeUserProperties);
        }
      ),
      router: t.default.computed.reads("routing.router"),
      isTrackingCurrentUserOnDrift: t.default.computed.or(
        "session.currentUser.isTeacher",
        "session.currentUser.isPublisher"
      ),
      _log: function (e) {
        this.get("logger").info("ANALYTICS - " + e);
      },
      _hasAmplitude: function () {
        return t.default.isPresent(window.amplitude);
      },
      _hasGoogleAnalytics: function () {
        return window.ga && "function" == typeof window.ga;
      },
      _hasDrift: function () {
        return t.default.isPresent(window.driftt);
      },
      _hasIntercom: function () {
        return t.default.isPresent(window.Intercom);
      },
      _identifyOnLogin: function () {
        if (this.get("session.isLoggedIn")) {
          var e = this.get("session.currentUser");
          this.get("hasIdentifiedOnAmplitude") || this._identifyOnAmplitude(e),
            !this.get("hasIdentifiedOnDrift") &&
              this.get("isTrackingCurrentUserOnDrift") &&
              this._identifyOnDrift(e),
            this.get("hasIdentifiedOnIntercom") || this._identifyOnIntercom(e);
        }
      },
      _identifyOnAmplitude: function (e) {
        this._log("IDENTIFY (Amplitude): " + e.get("id")),
          this._hasAmplitude() &&
            amplitude.getInstance().setUserId(e.get("id")),
          this.set("hasIdentifiedOnAmplitude", !0);
      },
      _identifyOnDrift: function (e) {
        var n = {
          name: e.get("fullName"),
          email: e.get("email"),
          startedAt: e.get("createdAtAsUnixTimestamp"),
          username: e.get("username"),
          userType: (0, o.typeOfUser)(e),
          registrationMechanism: e.get("registrationMechanism"),
          numberOfFreeStudentStoriesLeft: e.get(
            "numberOfFreeStudentStoriesLeft"
          ),
          numberOfStudents: e.get("numberOfStudents"),
          isPremium: e.get("isPremium"),
          isUnlimited: e.get("isUnlimited"),
          hasOngoingSubscription: e.get("hasOngoingSubscription"),
        };
        this._log("IDENTIFY (Drift): " + t.default.inspect(n)),
          this._hasDrift() && driftt.identify(e.get("id"), n),
          this.set("hasIdentifiedOnDrift", !0);
      },
      _identifyOnIntercom: function (e) {
        var s = {
          app_id: n.default.APP.INTERCOM_APP_ID,
          name: e.get("fullName"),
          user_id: e.get("id"),
          user_hash: e.get("intercomUserHash"),
          email: e.get("email"),
          created_at: e.get("createdAtAsUnixTimestamp"),
          username: e.get("username"),
          "user type": (0, o.typeOfUser)(e),
          "registration mechanism": e.get("registrationMechanism"),
          "number of free student stories left": e.get(
            "numberOfFreeStudentStoriesLeft"
          ),
          "number of students": e.get("numberOfStudents"),
          "is premium": e.get("isPremium"),
          "is unlimited": e.get("isUnlimited"),
          "has ongoing subscription": e.get("hasOngoingSubscription"),
        };
        this._log("IDENTIFY (Intercom): (" + t.default.inspect(s) + ")"),
          this._hasIntercom() && Intercom("boot", s),
          this.set("hasIdentifiedOnIntercom", !0);
      },
      _setAmplitudeUserProperties: function () {
        var e = {
          "Device pixel ratio": this.get("clientInformation.devicePixelRatio"),
          "Browser name": this.get("clientInformation.browserName"),
          "Browser version": this.get("clientInformation.browserVersion"),
          "Has supported browser": this.get(
            "clientInformation.hasSupportedBrowser"
          ),
          "User type": (0, o.typeOfUser)(this.get("session.currentUser")),
          "User id": this.get("session.currentUser.id"),
          Email: this.get("session.currentUser.email"),
          Username: this.get("session.currentUser.username"),
          "First name": this.get("session.currentUser.firstName"),
          "Last name": this.get("session.currentUser.lastName"),
          "Has ongoing subscription": this.get(
            "session.currentUser.hasOngoingSubscription"
          ),
          "Subscription plan": this.get(
            "session.currentUser.premiumSubscription.plan"
          ),
          "Registration mechanism": (
            this.get("session.currentUser.registrationMechanism") || ""
          ).capitalize(),
        };
        this._log("PEOPLE SET: (" + t.default.inspect(e) + ")"),
          this._hasAmplitude() && amplitude.getInstance().setUserProperties(e);
      },
      _initAmplitude: function () {
        var e = { includeReferrer: !0, includeUtm: !0 };
        this._hasAmplitude() &&
          amplitude
            .getInstance()
            .init(n.default.APP.AMPLITUDE_API_KEY, null, e);
      },
    });
  }),
  define("frontend/services/cable", [
    "exports",
    "ember-cable/services/cable",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/client-information", [
    "exports",
    "ember",
    "frontend/mixins/responds-to-viewport-resize-for-services",
    "npm:bowser",
  ], function (e, t, n, s) {
    e.default = t.default.Service.extend(n.default, {
      updateDevicePixelRatio: t.default.on("init", "resize", function () {
        this.set(
          "devicePixelRatio",
          window.devicePixelRatio ? window.devicePixelRatio : 1
        );
      }),
      updateViewportDimensions: t.default.on("init", "resize", function () {
        this.set("viewportWidth", $(window).width()),
          this.set("viewportHeight", $(window).height());
      }),
      hasUnsupportedBrowser: t.default.computed.not("hasSupportedBrowser"),
      localStorageSupported: t.default
        .computed(function () {
          return Modernizr.localstorage;
        })
        .readOnly(),
      cssFiltersSupported: t.default
        .computed(function () {
          return Modernizr.cssfilters;
        })
        .readOnly(),
      browser: t.default
        .computed("browserName", "browserVersion", function () {
          return this.get("browserName") + " " + this.get("browserVersion");
        })
        .readOnly(),
      browserName: t.default
        .computed(function () {
          return s.default.name;
        })
        .readOnly(),
      browserVersion: t.default
        .computed(function () {
          return s.default.version;
        })
        .readOnly(),
      isOnIpad: t.default.computed(function () {
        return s.default.ios;
      }),
      hasSupportedBrowser: t.default
        .computed(function () {
          return !!(
            Modernizr.flexbox &&
            Modernizr.mutationobserver &&
            Modernizr.matchmedia &&
            Modernizr.requestanimationframe &&
            Modernizr.csscalc &&
            Modernizr.csspointerevents
          );
        })
        .readOnly(),
    });
  }),
  define("frontend/services/command-factory", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Service.extend({
      createCommand: function (e) {
        return t.default.getOwner(this).lookup("command:" + e);
      },
    });
  }),
  define("frontend/services/embed", ["exports", "ember"], function (e, t) {
    e.default = t.default.Service.extend({
      isEmbeddedPage: !1,
      hasParentIFramePageInfo: t.default.computed.notEmpty(
        "parentIFramePageInfo"
      ),
    });
  }),
  define("frontend/services/environment", [
    "exports",
    "ember",
    "frontend/config/environment",
  ], function (e, t, n) {
    e.default = t.default.Service.extend({
      isTest: t.default
        .computed(function () {
          return "test" === n.default.environment;
        })
        .readOnly(),
      isProduction: t.default
        .computed(function () {
          return "production" === n.default.environment;
        })
        .readOnly(),
    });
  }),
  define("frontend/services/error-objects-factory", [
    "exports",
    "ember",
    "frontend/utils/request-messages-object",
  ], function (e, t, n) {
    e.default = t.default.Service.extend({
      logger: t.default.inject.service(),
      createRequestMessagesObject: function (e) {
        return n.default.create({
          logger: this.get("logger"),
          type: "error",
          response: e,
        });
      },
    });
  }),
  define("frontend/services/facebook-pixel", [
    "exports",
    "ember",
    "frontend/utils/dom",
  ], function (e, t, n) {
    e.default = t.default.Service.extend({
      session: t.default.inject.service(),
      setup: function () {
        this.get("session.currentUserCanShareOnSocialMedia") &&
          (0, n.injectScript)(
            "https://d1ox703z8b11rg.cloudfront.net/assets/facebook-pixel-3b41652a5e3de8f6ccb7dd8e954b6bb4.js"
          );
      },
      trackEvent: function (e, n) {
        t.default.isPresent(window.fbq) && window.fbq("trackCustom", e, n);
      },
    });
  }),
  define("frontend/services/guard", ["exports", "ember"], function (e, t) {
    e.default = t.default.Service.extend({
      session: t.default.inject.service(),
      permits: function (e, n) {
        var s = this.get("session.currentUser"),
          o = void 0;
        t.default.isNone(s) || (o = s.get("type")), (o = o || "guest");
        var a = this.get("_permissions").get(o) || {};
        if (!t.default.isNone(a[e])) {
          var i = a[e];
          return $.isFunction(i) ? i.call(this, s, n) : i;
        }
        return !1;
      },
      _permissions: t.default
        .computed(function () {
          return t.default.Object.create({
            editor: { createStoryUnit: !0, createSutoriStory: !0 },
            teacher: {
              seeSchoolClassInfo: !0,
              seeOtherStudentsInClass: !0,
              seeStudentStoriesFromSchoolClass: !0,
              seeClassStoriesFromSchoolClass: !0,
              unarchiveSchoolClass: !0,
            },
            student: {
              seeTeacherStoriesFromSchoolClass: !0,
              seeClassmatesStoriesFromSchoolClass: !0,
            },
          });
        })
        .readOnly(),
    });
  }),
  define("frontend/services/head-data", [
    "exports",
    "ember-cli-head/services/head-data",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/head-tags", [
    "exports",
    "ember-cli-meta-tags/services/head-tags",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/keyboard", [
    "exports",
    "ember-keyboard/services/keyboard",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/liquid-fire-transitions", [
    "exports",
    "liquid-fire/transition-map",
  ], function (e, t) {
    e.default = t.default;
  }),
  define("frontend/services/logger", [
    "exports",
    "frontend/config/environment",
    "ember",
    "npm:lodash.iserror",
    "npm:raven-js",
  ], function (e, t, n, s, o) {
    e.default = n.default.Service.extend({
      environment: n.default.inject.service(),
      isCapturingExceptions: n.default
        .computed(function () {
          return (
            !!this.get("environment.isProduction") &&
            !n.default.isBlank(t.default.APP.SENTRY_JS_DSN)
          );
        })
        .readOnly(),
      isLogging: n.default
        .computed(function () {
          return !this.get("environment.isProduction");
        })
        .readOnly(),
      isPersisting: n.default
        .computed(function () {
          return !!this.get("environment.isTest");
        })
        .readOnly(),
      log: [],
      _persist: function (e) {
        this.get("log").push(e);
      },
      info: function (e) {
        this.get("isLogging") && n.default.Logger.info(e),
          this.get("isPersisting") && this._persist(e);
      },
      error: function (e) {
        this.get("isLogging") && n.default.Logger.error(e),
          this.get("isPersisting") && this._persist(e);
      },
      exception: function (e) {
        var t =
          arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1];
        this.info("EXCEPTION: (" + e + ", " + n.default.inspect(t) + ")"),
          this.error(e),
          this.get("isCapturingExceptions") &&
            ((0, s.default)(e)
              ? o.default.captureException(e, { extra: t })
              : o.default.captureException(
                  new Error("Exception captured that is not an Error object"),
                  { extra: { original_error_object: e } }
                ));
      },
      setUser: function (e) {
        var t = {
          id: e.get("id"),
          username: e.get("username"),
          email: e.get("email"),
          type: e.get("type"),
        };
        this.info(
          "EXCEPTION CAPTURING - SET USER: (" + n.default.inspect(t) + ")"
        ),
          this.get("isCapturingExceptions") && o.default.setUserContext(t);
      },
      time: function (e) {
        console.time(e);
      },
      timeEnd: function (e) {
        console.timeEnd(e);
      },
      clear: function () {
        this.set("log", []);
      },
    });
  }),
  define("frontend/services/notifications", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Service.extend({
      showSuccessMessage: function (e) {
        this.get("_successNotificationComponent").send("showMessage", e);
      },
      showBackendErrorMessage: function (e, t, n) {
        this.get("_errorNotificationComponent").send(
          "showBackendMessage",
          e,
          t,
          n
        );
      },
      showErrorMessage: function (e) {
        this.get("_errorNotificationComponent").send("showMessage", e);
      },
      _successNotificationComponent: t.default.computed.reads(
        "applicationController.successNotificationComponent"
      ),
      _errorNotificationComponent: t.default.computed.reads(
        "applicationController.errorNotificationComponent"
      ),
    });
  }),
  define("frontend/services/popup", [
    "exports",
    "torii/services/popup",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/router-scroll", [
    "exports",
    "ember-router-scroll/services/router-scroll",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/routing-proxy", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Service.extend({
      routing: t.default.inject.service("-routing"),
      router: t.default.computed.reads("routing.router"),
      currentRoute: t.default.computed("currentRouteName", function () {
        return t.default
          .getOwner(this)
          .lookup("route:" + this.get("currentRouteName"));
      }),
      currentRouteName: t.default.computed.reads("router.currentRouteName"),
      isEmbeddedStory: t.default.computed.equal(
        "currentRouteName",
        "story.embed"
      ),
      isRegistrationRoute: t.default.computed.reads(
        "currentRoute.isRegistrationRoute"
      ),
      isWebsiteRoute: t.default.computed.reads("currentRoute.isWebsiteRoute"),
      activeRoutes: t.default.computed("currentRouteName", function () {
        return this.get("router.router.currentHandlerInfos");
      }),
      activeRoutesNames: t.default.computed.mapBy("activeRoutes", "name"),
    });
  }),
  define("frontend/services/session", [
    "exports",
    "ember",
    "npm:urijs",
    "frontend/utils/analytics-utils",
  ], function (e, t, n, s) {
    e.default = t.default.Service.extend({
      store: t.default.inject.service(),
      storage: t.default.inject.service(),
      logger: t.default.inject.service(),
      analytics: t.default.inject.service(),
      getStoredSession: function () {
        return JSON.parse(this.get("storage").retrieve("currentUser"));
      },
      hasStoredSession: function () {
        return this.get("storage").has("currentUser");
      },
      login: function (e) {
        this._setStoredSession(e), this._loginUser(e);
      },
      logout: function () {
        this._unsetStoredSession(), this.get("analytics").trackLogout();
      },
      handleSessionExpired: function () {
        this.logout();
      },
      urlWithAuthenticationParams: function (e) {
        return this._addQueryParams(e, this.get("_serializedAuthParams"));
      },
      authParams: t.default.computed(
        "currentUser.authToken",
        "_loginCredential",
        function () {
          return {
            token: this.get("currentUser.authToken"),
            login: this.get("_loginCredential"),
          };
        }
      ),
      isLoggedIn: t.default.computed.notEmpty("currentUser"),
      isGuestUser: t.default.computed.not("isLoggedIn"),
      currentUserCanShareOnSocialMedia: t.default.computed.not(
        "currentUser.isStudent"
      ),
      ajaxSetup: t.default.on("init", function () {
        var e = this;
        $.ajaxSetup({
          beforeSend: function (t, s) {
            var o = s.url,
              a = new n.default(o);
            a.is("relative") && (s.url = e.urlWithAuthenticationParams(o));
          },
        });
      }),
      _loginUser: function (e) {
        var n = this;
        this.set("currentUser", e),
          t.default.run.next(function () {
            n.get("analytics").trackPeopleIncrement("Number of logins"),
              n
                .get("analytics")
                .trackEvent("Start Session", {
                  "User type": (0, s.typeOfUser)(e),
                });
          }),
          this.get("logger").setUser(e);
      },
      _setStoredSession: function (e) {
        this.get("storage").store(
          "currentUser",
          JSON.stringify({
            authToken: e.get("authToken"),
            email: e.get("email"),
            username: e.get("username"),
            type: e.get("type"),
          })
        );
      },
      _unsetStoredSession: function () {
        this.get("storage").remove("currentUser");
      },
      _addQueryParams: function (e, s) {
        var o = new n.default(e),
          a = o.query();
        return (
          t.default.isPresent(s) &&
            (a = t.default.isBlank(a) ? s : a + "&" + s),
          o.query(a),
          o.href()
        );
      },
      _serializedAuthParams: t.default.computed(
        "authParams",
        "isLoggedIn",
        function () {
          return this.get("isLoggedIn")
            ? $.param({ auth: this.get("authParams") })
            : "";
        }
      ),
      _loginCredential: t.default.computed(
        "currentUser",
        "currentUser.isStudent",
        "currentUser.username",
        "currentUser.email",
        function () {
          var e = this.get("currentUser");
          return t.default.isNone(e)
            ? null
            : e.get("isStudent")
            ? e.get("username")
            : e.get("email");
        }
      ),
    });
  }),
  define("frontend/services/storage", [
    "exports",
    "ember",
    "npm:lodash.isstring",
    "npm:js-cookie",
  ], function (e, t, n, s) {
    e.default = t.default.Service.extend({
      analytics: t.default.inject.service(),
      clientInformation: t.default.inject.service(),
      init: function () {
        this._super.apply(this, arguments),
          this.get("clientInformation.localStorageSupported")
            ? this.set("_storage", this.get("_localStorage"))
            : this.set("_storage", this.get("_cookieStorage"));
      },
      store: function (e, t) {
        if (!(0, n.default)(t))
          throw new Error("Trying to store non-String: '" + t + "'");
        this.get("_storage").store(e, t);
      },
      remove: function (e) {
        this.get("_storage").remove(e);
      },
      retrieve: function (e) {
        return this.get("_storage").retrieve(e);
      },
      has: function (e) {
        return this.get("_storage").has(e);
      },
      _cookieStorage: t.default
        .computed(function () {
          return t.default.Object.create({
            store: function (e, t) {
              s.default.set(e, t);
            },
            remove: function (e) {
              s.default.remove(e);
            },
            retrieve: function (e) {
              return s.default.get(e);
            },
            has: function (e) {
              return t.default.isPresent(this.retrieve(e));
            },
          });
        })
        .readOnly(),
      _localStorage: t.default
        .computed(function () {
          return t.default.Object.create({
            store: function (e, t) {
              window.localStorage.setItem(e, t);
            },
            remove: function (e) {
              window.localStorage.removeItem(e);
            },
            retrieve: function (e) {
              return window.localStorage.getItem(e);
            },
            has: function (e) {
              return t.default.isPresent(this.retrieve(e));
            },
          });
        })
        .readOnly(),
    });
  }),
  define("frontend/services/story-collaboration-invitation-data", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Service.extend();
  }),
  define("frontend/services/story-collaboration", [
    "exports",
    "ember",
    "frontend/config/environment",
    "frontend/utils/story-collaboration-state",
    "npm:node-uuid",
    "frontend/mixins/story-state",
  ], function (e, t, n, s, o, a) {
    function i(e, n) {
      var s = t.default.Object.extend(a.default).create({
        currentUser: e,
        story: n,
      });
      return s.get("isContributor");
    }
    var l = "CollaborationChannel",
      r = n.default.APP.ACTION_CABLE_ORIGIN + "/websocket";
    e.default = t.default.Service.extend(t.default.Evented, {
      cable: t.default.inject.service(),
      session: t.default.inject.service(),
      store: t.default.inject.service(),
      environment: t.default.inject.service(),
      notifications: t.default.inject.service(),
      connection: null,
      subscription: null,
      story: null,
      storyCollaborationState: null,
      currentUser: t.default.computed.reads("session.currentUser"),
      canEnableCollaboration: t.default.computed.not("environment.isTest"),
      bannerLock: t.default.computed.reads(
        "storyCollaborationState.bannerLock"
      ),
      titleLock: t.default.computed.reads("storyCollaborationState.titleLock"),
      introductionLock: t.default.computed.reads(
        "storyCollaborationState.introductionLock"
      ),
      itemLocks: t.default.computed.filterBy(
        "storyCollaborationState.itemLocks",
        "id"
      ),
      conclusionLocks: t.default.computed.filterBy(
        "storyCollaborationState.conclusionLocks",
        "id"
      ),
      onlineCollaborators: t.default.computed.reads(
        "storyCollaborationState.onlineCollaborators"
      ),
      isCollaborating: t.default.computed.notEmpty("subscription"),
      uuid: t.default.computed(function () {
        return o.default.v4();
      }),
      connectionUrl: t.default.computed("currentUser.authToken", function () {
        var e = this.get("currentUser.authToken"),
          t = this.get("uuid");
        return r + "?auth_token=" + e + "&uuid=" + t;
      }),
      connectToStory: function (e) {
        if (this.get("canEnableCollaboration")) {
          if (
            (this.setProperties({
              storyCollaborationState: s.default.create(),
              story: e,
            }),
            t.default.isNone(this.get("consumer")))
          ) {
            var n = this.get("cable").createConsumer(this.get("connectionUrl"));
            this.set("consumer", n);
          }
          var o = this.get("consumer").subscriptions.create(
            { channel: l, story: this.get("story.id") },
            this._subscriptionCallbacks()
          );
          this.set("subscription", o);
        }
      },
      closeConnection: function () {
        this.get("isCollaborating") &&
          (this.get("subscription").unsubscribe(),
          this.setProperties({
            story: null,
            storyCollaborationState: null,
            subscription: null,
          }));
      },
      lockBanner: function () {
        this._sendMessage("lock_banner", {
          model_id: this.get("story.bannerImageFile.id"),
        });
      },
      unlockBanner: function () {
        this._sendMessage("unlock_banner", {
          model_id: this.get("story.bannerImageFile.id"),
        });
      },
      lockTitle: function () {
        this._sendMessage("lock_title", { model_id: this.get("story.id") });
      },
      unlockTitle: function () {
        this._sendMessage("unlock_title", { model_id: this.get("story.id") });
      },
      lockIntroduction: function () {
        this._sendMessage("lock_introduction", {
          model_id: this.get("story.introductionText.id"),
        });
      },
      unlockIntroduction: function () {
        this._sendMessage("unlock_introduction", {
          model_id: this.get("story.introductionText.id"),
        });
      },
      createItem: function (e) {
        this._sendMessage("create_item", { model_id: e.get("id") });
      },
      moveItem: function (e) {
        this._sendMessage("move_item", { model_id: e.get("id") });
      },
      deleteItem: function (e) {
        this._sendMessage("delete_item", { model_id: e.get("id") });
      },
      lockItem: function (e) {
        this._sendMessage("lock_item", { model_id: e.get("id") });
      },
      unlockItem: function (e) {
        this._sendMessage("unlock_item", { model_id: e.get("id") });
      },
      createConclusion: function (e) {
        this._sendMessage("create_conclusion", { model_id: e.get("id") });
      },
      deleteConclusion: function (e) {
        this._sendMessage("delete_conclusion", { model_id: e.get("id") });
      },
      lockConclusion: function (e) {
        this._sendMessage("lock_conclusion", { model_id: e.get("id") });
      },
      unlockConclusion: function (e) {
        this._sendMessage("unlock_conclusion", { model_id: e.get("id") });
      },
      deleteStory: function (e) {
        if (this.get("isCollaborating")) {
          if (e !== this.get("story"))
            throw new Error(
              "Mismatch between the deleted story #" +
                e.get("id") +
                " and the collaborative story #" +
                this.get("story.id")
            );
          this._sendMessage("delete_story", { model_id: e.get("id") });
        }
      },
      _subscriptionCallbacks: function () {
        var e = this;
        return {
          debug: function (n) {
            t.default.debug(l + "/" + e.get("story.id") + n);
          },
          connected: function () {
            this.debug("#connected");
          },
          received: function (n) {
            var s = this;
            n.forEach(function (n) {
              s.debug("#message -> " + JSON.stringify(n));
              var o = e.get("store"),
                a = n.payload;
              t.default.isPresent(a) && o.pushPayload(a);
              var l = o.peekRecord("user", n.user_id);
              n.uuid !== e.get("uuid") &&
                i(l, e.get("story")) &&
                (e.trigger("touchUser", l),
                e._processMessage(n.action, l, n.model_id));
            });
          },
          disconnected: function () {
            this.debug("#disconnected");
          },
        };
      },
      _sendMessage: function (e) {
        var t =
          arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1];
        this.get("isCollaborating") && this.get("subscription").perform(e, t);
      },
      _unloadRecord: function (e, n) {
        var s = this.get("store"),
          o = s.peekRecord(e, n);
        t.default.isPresent(o) && s.unloadRecord(o);
      },
      _processMessage: function (e, t, n) {
        var s = this.get("storyCollaborationState");
        switch (e) {
          case "collaborator_connected":
            s.userConnected(t);
            break;
          case "collaborator_disconnected":
            s.userDisconnected(t);
            break;
          case "lock_banner":
            s.lockBanner(t);
            break;
          case "unlock_banner":
            this.get("story").set(
              "bannerImageFile",
              this.get("store").peekRecord("image-file", n)
            ),
              s.unlockBanner();
            break;
          case "lock_title":
            s.lockTitle(t);
            break;
          case "unlock_title":
            s.unlockTitle();
            break;
          case "lock_introduction":
            s.lockIntroduction(t);
            break;
          case "unlock_introduction":
            s.unlockIntroduction();
            break;
          case "lock_item":
            s.lockItem(n, t);
            break;
          case "unlock_item":
            s.unlockItem(n);
            break;
          case "lock_conclusion":
            s.lockConclusion(n, t);
            break;
          case "unlock_conclusion":
            s.unlockConclusion(n);
            break;
          case "delete_item":
            this._unloadRecord("item", n);
            break;
          case "delete_conclusion":
            this._unloadRecord("story-conclusion", n);
            break;
          case "delete_story":
            this._unloadRecord("story", n),
              this.get("notifications").showErrorMessage(
                "This story has just been deleted by a collaborator."
              );
        }
      },
    });
  }),
  define("frontend/services/torii-session", [
    "exports",
    "torii/services/session",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/services/torii", [
    "exports",
    "torii/services/torii",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/templates/-back-to-login", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "uQlJjHFL",
      block:
        '{"statements":[["block",["link-to"],["login"],[["class"],["back-to-login"]],0],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","â Back to login"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/-back-to-login.hbs" },
    });
  }),
  define("frontend/templates/-call-to-action-its-free", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "MixygP4B",
      block:
        '{"statements":[["block",["call-to-action-sign-up"],null,null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  Sign up now\\n  "],["open-element","span",[]],["static-attr","class","its-free"],["flush-element"],["text","It\'s free!"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/-call-to-action-its-free.hbs" },
    });
  }),
  define("frontend/templates/-interactive-tour", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "bXKDEBEf",
      block:
        '{"statements":[["block",["if"],[["get",["canSeeInteractiveTour"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["interactive-tour"],null,[["action","steps","tourName"],[["helper",["action"],[["get",[null]],"initializeTour"],null],["get",["tourSteps"]],["get",["tourName"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/-interactive-tour.hbs" },
    });
  }),
  define("frontend/templates/-logo-of-hstry", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ISz/Twfa",
      block:
        '{"statements":[["block",["link-to"],["index"],[["class"],["sutori-logo"]],0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/-logo-of-hstry.hbs" },
    });
  }),
  define("frontend/templates/-return-to-login", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ez3CjiuC",
      block:
        '{"statements":[["open-element","p",[]],["static-attr","class","return-to-login"],["flush-element"],["text","Already signed up? "],["block",["link-to"],["login"],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Login here"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/-return-to-login.hbs" },
    });
  }),
  define("frontend/templates/about", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "R5UOfJKL",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-about"],["flush-element"],["text","\\n"],["block",["heading-display"],null,null,6],["text","\\n"],["block",["promise-block"],null,[["promise"],[["get",["aboutSutoriStory"]]]],3],["text","\\n"],["text","  "],["open-element","section",[]],["static-attr","class","team"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","team-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamMembers"]]],null,1],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["footing-display"],null,null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Create your own story.\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["team-member"],null,[["teamMember"],[["get",["teamMember"]]]]],false],["text","\\n"]],"locals":["teamMember"]},{"statements":[["text","Read our story"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["story-display"],null,[["story","showBanner","showToolbar","showTitle"],[["get",["aboutSutoriStory"]],false,false,false]]],false],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","wrapper-button-read-our-story"],["flush-element"],["text","\\n      "],["block",["link-to"],["story",["get",["aboutSutoriStory"]]],[["class"],["button-read-our-story"]],2],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","p",[]],["flush-element"],["text","We strive to allow our storytellers to be as creative as they like. We are authentic and stay true to whom we are. We endeavor to deliver quality in our work."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      About us\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],5],["text","\\n"],["block",["h","paragraph"],null,null,4]],"locals":["h"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/about.hbs" },
    });
  }),
  define("frontend/templates/application", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "NoaAObIc",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","id","modal"],["flush-element"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","id","lightbox"],["flush-element"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["page ",["helper",["if"],[["get",["isEmbedded"]],"is-embed"],null]," ",["helper",["if"],[["get",["isWebsiteRoute"]],"is-website"],null]," ",["helper",["if"],[["get",["isRegistrationRoute"]],"is-registration"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["showApplicationHeader"]]],null,3],["text","\\n"],["text","  "],["append",["helper",["success-notification"],null,[["actionReceiver"],[["get",["successNotificationComponent"]]]]],false],["text","\\n  "],["append",["helper",["error-notification"],null,[["actionReceiver"],[["get",["errorNotificationComponent"]]]]],false],["text","\\n\\n  "],["open-element","main",[]],["dynamic-attr","class",["concat",["main ",["helper",["if"],[["get",["session","isLoggedIn"]],"logged-in"],null]," ",["helper",["if"],[["get",["isLoadingPage"]],"is-loading-page"],null]]]],["flush-element"],["text","\\n\\n"],["block",["if"],[["get",["clientInformation","hasUnsupportedBrowser"]]],null,2,1],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showApplicationFooter"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["application-footer"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","\\n      "],["append",["unknown",["outlet"]],false],["text","\\n\\n"]],"locals":[]},{"statements":[["text","\\n"],["text","      "],["open-element","article",[]],["static-attr","class","page-old-browser"],["flush-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","explanation"],["flush-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","The web browser you are using is "],["open-element","strong",[]],["flush-element"],["append",["unknown",["clientInformation","browser"]],false],["close-element"],["text"," and it is not supported by Sutori."],["close-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","We highly recommend you either upgrade your browser to the latest version or use "],["open-element","a",[]],["static-attr","href","https://www.mozilla.org/en-US/firefox/new/"],["flush-element"],["text","Firefox"],["close-element"],["text"," or "],["open-element","a",[]],["static-attr","href","http://www.google.com/chrome/"],["flush-element"],["text","Chrome"],["close-element"],["text","."],["close-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","You can always contact us at "],["append",["unknown",["email-help"]],false],["text"," if you have any questions."],["close-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","Apologies for the inconvenience,"],["close-element"],["text","\\n          "],["open-element","p",[]],["flush-element"],["text","The Sutori team"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["application-header"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/application.hbs" },
    });
  }),
  define("frontend/templates/blog-post", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "rfatm75R",
      block:
        '{"statements":[["partial","blog-post/page-heading"],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-blog-post"],["flush-element"],["text","\\n  "],["append",["helper",["blog-post"],null,[["blogPost"],[["get",["model"]]]]],false],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/blog-post.hbs" },
    });
  }),
  define("frontend/templates/blog-post/-page-heading", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "pAcvOAuV",
      block:
        '{"statements":[["block",["heading-display"],null,null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Blog"]],"locals":[]},{"statements":[["text","    "],["block",["link-to"],["blogPosts"],null,0],["text","\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],1]],"locals":["h"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/blog-post/-page-heading.hbs" },
    });
  }),
  define("frontend/templates/blog-posts", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "eEi6QhC6",
      block:
        '{"statements":[["partial","blog-post/page-heading"],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-blog-posts"],["flush-element"],["text","\\n"],["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels","analyticsModelType"],[["helper",["action"],[["get",[null]],"blogPostsPageLoaded"],null],["get",["blogPosts"]],"blog-post",["get",["blogPostsQueryParams"]],5,5,["get",["blogPostsPageToLoad"]],["get",["blogPostsTotalNumber"]],"Blog posts"]],1],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["blog-post"],null,[["blogPost","showAsTeaser"],[["get",["blogPost"]],true]]],false],["text","\\n"]],"locals":["blogPost"]},{"statements":[["text","    "],["open-element","ul",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["blogPosts"]]],null,0],["text","    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/blog-posts.hbs" },
    });
  }),
  define("frontend/templates/business", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "413cE831",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-business"],["flush-element"],["text","\\n"],["block",["hero-display"],null,null,15],["text","\\n"],["text","  "],["open-element","section",[]],["static-attr","class","features"],["flush-element"],["text","\\n"],["text","    "],["append",["helper",["feature-communication"],null,[["textSide"],["left"]]],false],["text","\\n\\n"],["text","    "],["append",["helper",["feature-wow-audience"],null,[["textSide"],["right"]]],false],["text","\\n\\n"],["text","    "],["append",["helper",["feature-unbranded"],null,[["textSide"],["left"]]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["features-secondary"],null,null,10],["text","\\n"],["text","  "],["open-element","div",[]],["static-attr","class","partners"],["flush-element"],["text","\\n"],["block",["heading-display"],null,null,5],["text","\\n"],["block",["pro-partner"],null,[["url","logoSrc","logoAlt","class"],["http://www.bbc.com/travel/story/20160531-the-us-national-parks-turn-100","https://d1ox703z8b11rg.cloudfront.net/images/business/logo-bbc-travel-b0fd1e00ecc18041b2de32c0bc1d8442.png","Logo of BBC Travel","bbc"]],3],["text","\\n"],["block",["pro-partner"],null,[["url","logoSrc","logoAlt","class"],["https://sutori.com/story/pictures-for-the-people","https://d1ox703z8b11rg.cloudfront.net/images/business/logo-art-gallery-nsw-3a249560594bf139f8e271b76340467d.svg","Logo of Art Gallery NSW","nsw"]],2],["text","\\n"],["block",["pro-partner"],null,[["url","logoSrc","logoAlt","class"],["https://www.gouconnect.com/success/emerson","https://d1ox703z8b11rg.cloudfront.net/images/business/logo-uconnect-4f2317a809c42a532302e58d4e92c216.svg","Logo of uConnect","uconnect"]],1],["text","  "],["close-element"],["text","\\n\\n"],["block",["footing-display"],null,null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Impress your audience.\\n"]],"locals":[]},{"statements":[["text","      uConnect, a career content management system, uses Sutori to help onboard its clients.\\n"]],"locals":[]},{"statements":[["text","      Curators from the Art Gallery of NSW put together a customized Sutori story for their exhibition.\\n"]],"locals":[]},{"statements":[["text","      BBC editors used Sutori to bring the 100"],["open-element","sup",[]],["flush-element"],["text","th"],["close-element"],["text"," anniversary of the US National parks to life.\\n"]],"locals":[]},{"statements":[["text","        They trust Sutori\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,null,4]],"locals":["h"]},{"statements":[["text","      No tech knowledge required. Simply paste an embed code onto your company\'s website.\\n"]],"locals":[]},{"statements":[["text","      Add images, videos, audio and quiz questions to bring your project to life.\\n"]],"locals":[]},{"statements":[["text","      Share to your colleagues privately via email or else on social media with just one-click.\\n"]],"locals":[]},{"statements":[["text","      Create impressive looking projects in minutes.\\n"]],"locals":[]},{"statements":[["block",["feature-secondary"],null,[["title","icon"],["Ease of Use","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-ease-of-use-55032316e4732b6ddd90196af43e7f0d.svg"]],9],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Share","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-share-8736c660e2c47562e97cd422cbe63c88.svg"]],8],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["All Media","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-all-media-a4b6d904f54b849964ebc8a2aa18013b.svg"]],7],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Embed","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-embed-17e5e4671825182e458c84789dbad72a.svg"]],6]],"locals":[]},{"statements":[["text","          Organizations love Sutoriâs ease of use and unique display."],["open-element","br",[]],["flush-element"],["close-element"],["text","Reach and engage a wider audience to make customers, colleagues, and even your boss, take notice.\\n"]],"locals":[]},{"statements":[["text","          Sutori for Business\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],12],["text","\\n"],["block",["h","paragraph"],null,null,11]],"locals":["h"]},{"statements":[["block",["heading-display"],null,null,13]],"locals":[]},{"statements":[["block",["hero","body"],null,null,14]],"locals":["hero"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/business.hbs" },
    });
  }),
  define("frontend/templates/collaborate-error", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "unXJYkhD",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-error"],["flush-element"],["text","\\n\\n"],["block",["page-for-message"],null,null,2],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","p",[]],["flush-element"],["append",["unknown",["reason"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","Please contact "],["append",["unknown",["email-help"]],false],["text"," for more information."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      Oops\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,1],["text","\\n"],["block",["p","body"],null,null,0]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/collaborate-error.hbs" },
    });
  }),
  define("frontend/templates/components/-button-single-sign-on", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "C/Yb/mju",
      block:
        '{"statements":[["block",["if"],[["get",["isLoggingIn"]]],null,1,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["unknown",["labelWhileNotLoggingIn"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["unknown",["labelWhileLoggingIn"]],false],["append",["unknown",["animated-ellipsis"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/components/-button-single-sign-on.hbs",
      },
    });
  }),
  define("frontend/templates/components/form-elements/errors", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "nUzytvOy",
      block:
        '{"statements":[["block",["if"],[["get",["errors"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","p",[]],["static-attr","class","message error"],["flush-element"],["append",["unknown",["errors","firstObject"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","p",[]],["static-attr","class","message error"],["flush-element"],["append",["unknown",["errors","firstObject","message"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["errors","firstObject","message"]]],null,1,0]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/components/form-elements/errors.hbs",
      },
    });
  }),
  define("frontend/templates/components/form-elements/explanation", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "RvndXRtB",
      block:
        '{"statements":[["block",["if"],[["get",["explanation"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["append",["unknown",["explanation"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/form-elements/explanation.hbs",
      },
    });
  }),
  define("frontend/templates/components/form-elements/label", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "f/wc9pGW",
      block:
        '{"statements":[["block",["if"],[["get",["label"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","label",[]],["dynamic-attr","for",["concat",[["unknown",["fieldId"]]]]],["flush-element"],["append",["unknown",["label"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/components/form-elements/label.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/audio-uploader", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7FKymvCt",
      block:
        '{"statements":[["open-element","h4",[]],["static-attr","class","action"],["flush-element"],["text","Upload an audio"],["close-element"],["text","\\n"],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","The file should be a "],["open-element","em",[]],["flush-element"],["text","mp3"],["close-element"],["text"," format"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","uploader"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","uploader-space"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isUploading"]]],null,3,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["partial","components/modals/media-uploader/error-message"],["text","\\n\\n"],["partial","components/modals/media-uploader/actions"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["partial","components/modals/media-uploader/file-upload-area"],["text","\\n\\n"],["text","      "],["partial","components/modals/media-uploader/url-upload-area"],["text","\\n    "]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","audio-preview"],["flush-element"],["text","\\n        "],["append",["helper",["audio-player"],null,[["src"],[["get",["audio","url"]]]]],false],["text","\\n\\n        "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"deleteAudio"],null],"delete-audio","Remove",["get",["deleteAudioTask","isRunning"]]]]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["audioIsReady"]]],null,1,0]],"locals":[]},{"statements":[["text","      "],["partial","components/modals/media-uploader/is-uploading-area"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/templates/components/modals/audio-uploader.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/collaborate-on-story", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "+ToK6Q5u",
      block:
        '{"statements":[["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","Invite People"],["close-element"],["text","\\n"],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","\\n  Want others to edit the story? Simply add them below."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n  Those who are not on Sutori will receive an invitation via email.\\n"],["close-element"],["text","\\n\\n"],["append",["helper",["add-collaborators"],null,[["collaborators","invitations","addCollaborator","inviteCollaborator"],[["get",["collaborators"]],["get",["invitations"]],["helper",["action"],[["get",[null]],"addCollaborator"],null],["helper",["action"],[["get",[null]],"inviteCollaborator"],null]]]],false],["text","\\n\\n"],["open-element","ul",[]],["static-attr","class","added-collaborators"],["flush-element"],["text","\\n"],["block",["each"],[["get",["displayedCollaborations"]]],null,0],["close-element"],["text","\\n\\n"],["open-element","button",[]],["static-attr","class","button-done"],["modifier",["action"],[["get",[null]],"done"]],["flush-element"],["text","Done"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","li",[]],["flush-element"],["text","\\n      "],["append",["helper",["collaborator-tag"],null,[["user","email","label","action"],[["get",["collaboration","user"]],["get",["collaboration","email"]],["get",["collaboration","label"]],["helper",["action"],[["get",[null]],["get",["collaboration","removeAction"]]],null]]]],false],["text","\\n    "],["close-element"],["text","\\n"]],"locals":["collaboration"]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/collaborate-on-story.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/image-uploader", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "iEw6MVjr",
      block:
        '{"statements":[["open-element","h4",[]],["static-attr","class","action"],["flush-element"],["text","Upload an image"],["close-element"],["text","\\n"],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","The file should be a "],["open-element","em",[]],["flush-element"],["text","jpg"],["close-element"],["text",", "],["open-element","em",[]],["flush-element"],["text","png"],["close-element"],["text"," or "],["open-element","em",[]],["flush-element"],["text","gif"],["close-element"],["text"," format"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","uploader"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","uploader-space"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isUploading"]]],null,3,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["partial","components/modals/media-uploader/error-message"],["text","\\n\\n"],["partial","components/modals/media-uploader/actions"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["partial","components/modals/media-uploader/file-upload-area"],["text","\\n\\n"],["text","      "],["partial","components/modals/media-uploader/url-upload-area"],["text","\\n    "]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","image-preview"],["flush-element"],["text","\\n        "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy"],[["get",["image"]],"contain"]]],false],["text","\\n        "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"deleteImage"],null],"delete-image","Remove",["get",["deleteImageTask","isRunning"]]]]],false],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["imageIsReady"]]],null,1,0]],"locals":[]},{"statements":[["text","      "],["partial","components/modals/media-uploader/is-uploading-area"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/templates/components/modals/image-uploader.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/lesson-plan", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "eA26fETe",
      block:
        '{"statements":[["block",["tab-selector"],null,[["tabs","templateSwitchingDelayInMs"],[["get",["lessonPlanTabs"]],["get",["fadeInSpeed"]]]],4],["text","\\n"],["block",["if"],[["get",["canEditLessonPlan"]]],null,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","button",[]],["static-attr","class","button-edit"],["modifier",["action"],[["get",[null]],"edit"]],["flush-element"],["text","Edit"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","button",[]],["static-attr","class","button-preview"],["dynamic-attr","disabled",["unknown",["model","isBlank"]],null],["modifier",["action"],[["get",[null]],"preview"]],["flush-element"],["text","Preview"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","actions"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isEditing"]]],null,1,0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["partial",["get",["selector","activeTemplatePath"]]],["text","\\n"]],"locals":[]},{"statements":[["block",["liquid-bind"],[["get",["selector","activeTab"]]],[["class"],["lesson-plan-tabs"]],3]],"locals":["selector"]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/templates/components/modals/lesson-plan.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/media-uploader/-actions", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "gVCHT0mm",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","actions"],["flush-element"],["text","\\n"],["text","  "],["open-element","button",[]],["static-attr","class","button-cancel"],["modifier",["action"],[["get",[null]],"cancel"]],["flush-element"],["text","Cancel"],["close-element"],["text","\\n\\n"],["text","  "],["append",["helper",["async-button"],null,[["action","name","label","loading","disabled"],[["helper",["perform"],[["get",["useMediaTask"]]],null],"use-media",["get",["buttonUseMediaLabel"]],["get",["useMediaTask","isRunning"]],["get",["mediaIsNotReady"]]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/media-uploader/-actions.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/media-uploader/-error-message", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "cqJyCJI3",
      block:
        '{"statements":[["block",["if"],[["get",["hasErrorMessage"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","error"],["flush-element"],["append",["unknown",["htmlSafeErrorMessage"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/media-uploader/-error-message.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/media-uploader/-file-upload-area", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "vHFgUntT",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","file-upload-area"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","vertical-centered-text"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"selectFile"]],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/icon-upload-098080f56f188f3cdeec9a298b1fb91e.svg"],["static-attr","alt","Icon to upload"],["flush-element"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","click-to-upload"],["flush-element"],["append",["unknown",["fileUploaderMessage"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n  "],["append",["helper",["file-uploader"],null,[["action","accept"],[["helper",["action"],[["get",[null]],"fetchedFile"],null],["get",["fileUploaderMimeTypes"]]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/media-uploader/-file-upload-area.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/media-uploader/-input-url", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "RWeOikl3",
      block:
        '{"statements":[["append",["helper",["input"],null,[["name","type","placeholder","value","class"],["media-url","url",["get",["urlUploaderPlaceholder"]],["get",["url"]],["helper",["concat"],[["helper",["if"],[["get",["isValidYoutubeUrl"]],["helper",["-normalize-class"],["isValidYoutubeUrl",["get",["isValidYoutubeUrl"]]],null]],null]," "],null]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/media-uploader/-input-url.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/media-uploader/-is-uploading-area", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "2VzX3STC",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","is-uploading-area"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","vertical-centered-text"],["flush-element"],["text","\\n    "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/icon-upload-098080f56f188f3cdeec9a298b1fb91e.svg"],["static-attr","alt","Icon to upload"],["flush-element"],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["append",["unknown",["isUploadingMessage"]],false],["append",["unknown",["animated-ellipsis"]],false],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/media-uploader/-is-uploading-area.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/media-uploader/-url-upload-area", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "e9hlWhEI",
      block:
        '{"statements":[["open-element","form",[]],["dynamic-attr","class",["concat",["upload-url-area ",["helper",["if"],[["get",["showUploadUrlButton"]],"show-button-upload-url"],null]]]],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"uploadUrl"],[["on"],["submit"]]],["flush-element"],["text","\\n  "],["partial","components/modals/media-uploader/input-url"],["text","\\n\\n"],["block",["if"],[["get",["showUploadUrlButton"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["async-button"],null,[["name","label","type","loading"],["upload-url","Upload","submit",["get",["uploadUrlTask","isRunning"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/media-uploader/-url-upload-area.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/school-class-edit", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "O40U28em",
      block:
        '{"statements":[["block",["object-form"],null,[["for","action"],[["get",["formObject"]],"updateSchoolClass"]],1],["text","\\n"],["block",["unless"],[["get",["model","isNew"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","archive-class"],["flush-element"],["text","\\n    "],["open-element","button",[]],["static-attr","class","button-archive-class"],["dynamic-attr","disabled",["unknown",["model","isSaving"]],null],["modifier",["action"],[["get",[null]],"toggleArchiveClass"]],["flush-element"],["text","\\n      "],["append",["unknown",["archiveButtonLabel"]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["name","Name","e.g. 5A"]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["subject","Subject","e.g. History"]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["f","form-select"],null,[["for","label","placeholder","options"],["grade","Grade","Choose a grade",["get",["possibleGrades"]]]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["f","form-submit"],null,[["label"],[["get",["submitButtonLabel"]]]]],false],["text","\\n"]],"locals":["f"]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/school-class-edit.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/school-class-join", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "kWNC1gw+",
      block:
        '{"statements":[["block",["object-form"],null,[["for","action"],[["get",["formObject"]],"joinSchoolClass"]],1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","school-class-join-info"],["flush-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","message"],["flush-element"],["text","Is this your class?"],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["text","\\n        "],["append",["helper",["render-image"],null,[["imageFile","overflowPolicy"],[["get",["schoolClass","teacher","profileImageFile","content"]],"cover"]]],false],["text","\\n        "],["open-element","div",[]],["static-attr","class","class-info"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","teacher-name"],["flush-element"],["append",["unknown",["schoolClass","teacher","formalName"]],false],["close-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","class-display-name"],["flush-element"],["append",["unknown",["schoolClassDisplayName"]],false],["close-element"],["text","\\n        "],["close-element"],["text","\\n"],["text","        "],["open-element","span",[]],["static-attr","class","button-close"],["static-attr","role","button"],["modifier",["action"],[["get",[null]],"discardSelection"]],["flush-element"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["f","form-field"],null,[["for","label","explanation","placeholder"],["classCode","Class code","Your teacher will provide you with the code.","e.g. 1234"]]],false],["text","\\n\\n"],["block",["if"],[["get",["schoolClass"]]],null,0],["text","\\n"],["text","  "],["append",["helper",["f","form-submit"],null,[["label"],[["get",["submitButtonLabel"]]]]],false],["text","\\n"]],"locals":["f"]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/modals/school-class-join.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/share-story", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "EjvyBPBl",
      block:
        '{"statements":[["block",["liquid-if"],[["get",["story","isAccessibleByGuest"]]],null,6,2]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["flush-element"],["text","No action possible."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","section-make-public"],["flush-element"],["text","\\n    "],["open-element","h3",[]],["flush-element"],["text","Share with People"],["close-element"],["text","\\n\\n    "],["open-element","p",[]],["flush-element"],["text","Your story is currently private. Make it public to share it with colleagues and friends."],["close-element"],["text","\\n\\n    "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["perform"],[["get",["makePublicTask"]]],null],"make-public","Make public",["get",["makePublicTask","isRunning"]]]]],false],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["canMakeStoryPublic"]]],null,1,0]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","unbranded-embed-prompt"],["flush-element"],["text","Would you like to customize your story? Email "],["append",["unknown",["email-sales"]],false],["text"," to find out more."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["unknown",["social-media-sharing-buttons"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["perform"],[["get",["makePrivateTask"]]],null],"make-private","Make private",["get",["makePrivateTask","isRunning"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","section-share-with-people"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h3",[]],["flush-element"],["text","Share with People"],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["canMakeStoryPrivate"]]],null,5],["text","    "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["session","currentUserCanShareOnSocialMedia"]]],null,4],["text","\\n    "],["open-element","div",[]],["static-attr","class","public-link"],["flush-element"],["text","\\n      "],["open-element","h4",[]],["static-attr","class","header-public-link"],["flush-element"],["text","Public link:"],["close-element"],["text","\\n      "],["append",["helper",["copyable-input-field"],null,[["text","tooltipWhenCopied","copied"],[["get",["story","publicUrl"]],"Link copied.",["helper",["action"],[["get",[null]],"publicLinkCopied"],null]]]],false],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","embed-code"],["flush-element"],["text","\\n      "],["open-element","h4",[]],["static-attr","class","header-embed-code"],["flush-element"],["text","Embed code:"],["close-element"],["text","\\n      "],["append",["helper",["copyable-input-field"],null,[["text","tooltipWhenCopied","copied"],[["get",["story","embedCode"]],"Embed code copied.",["helper",["action"],[["get",[null]],"embedCodeCopied"],null]]]],false],["text","\\n\\n"],["block",["if"],[["get",["isOwner"]]],null,3],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/components/modals/share-story.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/sign-up", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "tIsUCWaQ",
      block:
        '{"statements":[["open-element","h3",[]],["static-attr","class","caption"],["flush-element"],["text","Create your own story today"],["close-element"],["text","\\n"],["open-element","p",[]],["static-attr","class","info"],["flush-element"],["text","Oh, did we mention Sutori is free ?"],["close-element"],["text","\\n"],["append",["unknown",["demo-video"]],false],["text","\\n\\n"],["block",["link-to"],["registration",["helper",["query-params"],null,[["origin"],["sign-up-popup"]]]],[["class"],["button-sign-up"]],0],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Try Sutori now"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/components/modals/sign-up.hbs" },
    });
  }),
  define("frontend/templates/components/modals/student-edit", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "65BBAfe2",
      block:
        '{"statements":[["block",["object-form"],null,[["for","action"],[["get",["formObject"]],"updateStudent"]],0],["text","\\n"],["append",["helper",["async-button-with-confirmation"],null,[["action","name","label","question","popoverPosition"],[["helper",["action"],[["get",[null]],"removeStudent"],null],"remove-student","Remove student","Are you sure you want to remove this student from your class? If you do so, all the stories that the student has created for this class will be deleted.","top"]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["firstName","First name","Enter the first name of your student"]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["lastName","Last name","Enter the last name of your student"]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["f","form-field"],null,[["for","label","placeholder","type"],["password","Change password","Enter a new password (optional)","password"]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["f","form-submit"],null,[["label"],["Save changes"]]],false],["text","\\n"]],"locals":["f"]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/components/modals/student-edit.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/submit-story", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7vIYDiLk",
      block:
        '{"statements":[["block",["new-button-group"],null,[["title"],[["get",["submitTitle"]]]],3],["text","\\n"],["open-element","div",[]],["static-attr","class","footer"],["flush-element"],["text","\\n  "],["open-element","p",[]],["dynamic-attr","class",["concat",["submission-information ",["helper",["if"],[["get",["story","isSubmitted"]],"is-submitted"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["story","isSubmitted"]]],null,1,0],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","button",[]],["static-attr","class","button-done"],["modifier",["action"],[["get",[null]],"done"]],["flush-element"],["text","Done"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Your story is not submitted. Select one of the classes above to submit your story.\\n"]],"locals":[]},{"statements":[["text","      Your story is submitted to "],["open-element","strong",[]],["flush-element"],["append",["unknown",["story","originalSchoolClasses","length"]],false],["text"," "],["append",["helper",["inflect"],["class",["get",["story","originalSchoolClasses","length"]]],null],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["button-submit-story-to-school-class"],null,[["schoolClass","story"],[["get",["schoolClass"]],["get",["story"]]]]],false],["text","\\n"]],"locals":["schoolClass"]},{"statements":[["block",["each"],[["get",["sortedSchoolClasses"]]],null,2]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/components/modals/submit-story.hbs",
      },
    });
  }),
  define("frontend/templates/components/modals/video-uploader", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "r8H77XtE",
      block:
        '{"statements":[["block",["if"],[["get",["canUploadCustomVideos"]]],null,7,6],["text","\\n"],["open-element","div",[]],["static-attr","class","uploader"],["flush-element"],["text","\\n"],["block",["if"],[["get",["canUploadCustomVideos"]]],null,5,0],["close-element"],["text","\\n\\n"],["partial","components/modals/media-uploader/error-message"],["text","\\n\\n"],["partial","components/modals/media-uploader/actions"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["partial","components/modals/media-uploader/input-url"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["partial","components/modals/media-uploader/file-upload-area"],["text","\\n\\n"],["text","        "],["partial","components/modals/media-uploader/url-upload-area"],["text","\\n      "]],"locals":[]},{"statements":[["text","        "],["open-element","div",[]],["static-attr","class","video-preview"],["flush-element"],["text","\\n          "],["append",["helper",["render-video"],null,[["video"],[["get",["video"]]]]],false],["text","\\n          "],["append",["helper",["async-button"],null,[["action","name","label","loading"],[["helper",["action"],[["get",[null]],"deleteVideo"],null],"delete-video","Remove",["get",["deleteVideoTask","isRunning"]]]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasVideo"]]],null,2,1]],"locals":[]},{"statements":[["text","        "],["partial","components/modals/media-uploader/is-uploading-area"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["dynamic-attr","class",["concat",["uploader-space ",["helper",["if"],[["get",["isUploadingCustomVideo"]],"is-uploading-custom-video"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["isUploadingCustomVideo"]]],null,4,3],["text","    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","h4",[]],["static-attr","class","action"],["flush-element"],["text","Embed a YouTube video"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","h4",[]],["static-attr","class","action"],["flush-element"],["text","Upload a video"],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["open-element","em",[]],["flush-element"],["text","mp4"],["close-element"],["text"," files or hosted on YouTube"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/templates/components/modals/video-uploader.hbs",
      },
    });
  }),
  define("frontend/templates/components/promise-block", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "YNXwTd/h",
      block:
        '{"statements":[["block",["if"],[["get",["readyToShowContent"]]],null,1,0]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","  "],["partial",["get",["loaderTemplate"]]],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["yield","default"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/components/promise-block.hbs" },
    });
  }),
  define("frontend/templates/components/user-edit-profile/-email-subscriptions", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "6GpX8M3P",
      block:
        '{"statements":[["block",["if"],[["get",["canEditEmailSubscriptions"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["toggle-box"],null,[["action","initiallyActivated","label","tooltip","class"],[["helper",["action"],[["get",[null]],"toggleSubscription","first_steps"],null],["get",["isSubscribedToFirstSteps"]],"Subscribe to our \'First Steps\' emails?","To help you settle into your Sutori experience (5 to 6 one-off emails)","first-steps"]]],false],["text","\\n"],["text","        "],["append",["helper",["toggle-box"],null,[["action","initiallyActivated","label","tooltip","class"],[["helper",["action"],[["get",[null]],"toggleSubscription","sutori_announcements"],null],["get",["isSubscribedToSutoriAnnouncements"]],"Subscribe to our Sutori announcements?","Be the first to know when we launch a new feature! (3 to 4 times a year)","sutori-announcements"]]],false],["text","\\n"],["text","        "],["append",["helper",["toggle-box"],null,[["action","initiallyActivated","label","tooltip","class"],[["helper",["action"],[["get",[null]],"toggleSubscription","community_announcements"],null],["get",["isSubscribedToCommunityAnnouncements"]],"Subscribe to our Community announcements?","Keep up-to-date with the best Community stories (once a month)","community-announcements"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","subscriptions"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","Email subscriptions"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["text","\\n"],["block",["promise-block"],null,[["promise"],[["get",["user","emailSubscriptions"]]]],0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/user-edit-profile/-email-subscriptions.hbs",
      },
    });
  }),
  define("frontend/templates/components/user-edit-profile/-organization-profile", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "PZkeCBjR",
      block:
        '{"statements":[["block",["if"],[["get",["user","isPublisher"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["name","Name","Enter the name of your organization"]]],false],["text","\\n\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["description","Description","Enter a short description of your organization"]]],false],["text","\\n\\n"],["text","        "],["append",["helper",["f","form-submit"],null,[["label"],["Save changes"]]],false],["text","\\n"]],"locals":["f"]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","organization-profile"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","Organization"],["close-element"],["text","\\n    "],["close-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["text","\\n"],["text","      "],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","isEditing","imageFile","labelButtonUpload","sizes","overflowPolicy","lightbox"],[["helper",["action"],[["get",[null]],"organizationLogoImageUploaded"],null],["helper",["action"],[["get",[null]],"organizationLogoImageDeleted"],null],true,["get",["organization","logoImageFile","content"]],"Add logo",["get",["organizationLogoImageSizes"]],"cover",false]]],false],["text","\\n\\n"],["block",["object-form"],null,[["for","action"],[["get",["organizationProfileForm"]],"saveOrganizationProfile"]],0],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/user-edit-profile/-organization-profile.hbs",
      },
    });
  }),
  define("frontend/templates/components/user-edit-profile/-personal-profile", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "P4P9JniH",
      block:
        '{"statements":[["block",["if"],[["get",["canEditProfile"]]],null,5]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["f","form-location"],null,[["action","for","label","placeholder","user"],["updateLocation","location","Location","Enter your location",["get",["user"]]]]],false],["text","\\n"],["text","          "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["school","School","Enter the name of your school"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["role","Role","Enter your professional role"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["append",["helper",["f","form-select"],null,[["for","label","options"],["title","Title",["get",["possibleTitles"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["firstName","First name","Enter your first name"]]],false],["text","\\n\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","label","placeholder"],["lastName","Last name","Enter your last name"]]],false],["text","\\n\\n"],["block",["if"],[["get",["canEditTitle"]]],null,2],["text","\\n"],["block",["if"],[["get",["canEditProfessionalRole"]]],null,1],["text","\\n"],["block",["if"],[["get",["canEditLocation"]]],null,0],["text","\\n"],["text","        "],["append",["helper",["f","form-submit"],null,[["label"],["Save changes"]]],false],["text","\\n"]],"locals":["f"]},{"statements":[["text","        "],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","isEditing","imageFile","labelButtonUpload","sizes","overflowPolicy","lightbox"],[["helper",["action"],[["get",[null]],"personalProfileImageUploaded"],null],["helper",["action"],[["get",[null]],"personalProfileImageDeleted"],null],true,["get",["user","profileImageFile","content"]],"Add profile picture",["get",["personalProfileImageSizes"]],"cover",false]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","personal-profile"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","My profile"],["close-element"],["text","\\n      "],["open-element","small",[]],["flush-element"],["text","("],["append",["unknown",["userIdentifier"]],false],["text",")"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","content"],["flush-element"],["text","\\n"],["block",["if"],[["get",["canEditProfileImage"]]],null,4],["text","\\n"],["block",["object-form"],null,[["for","action"],[["get",["personalProfileForm"]],"savePersonalProfile"]],3],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/components/user-edit-profile/-personal-profile.hbs",
      },
    });
  }),
  define("frontend/templates/confirm-error", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "0poVhw5I",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-confirm-error"],["flush-element"],["text","\\n"],["block",["page-for-message"],null,null,2],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","p",[]],["flush-element"],["text","We couldn\'t confirm your account because the confirmation token you supplied is invalid. Make sure you copied the right link or contact us at "],["append",["unknown",["email-help"]],false],["text"," to get help."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Oops!"],["close-element"],["text"," Something went wrong\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,1],["text","\\n"],["block",["p","body"],null,null,0]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/confirm-error.hbs" },
    });
  }),
  define("frontend/templates/contact", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "BpnIs8VT",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-contact"],["flush-element"],["text","\\n  "],["open-element","section",[]],["static-attr","class","map"],["flush-element"],["text","\\n    "],["open-element","iframe",[]],["static-attr","class","iframe-google-maps"],["static-attr","src","https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d3506.5504790540554!2d-71.05077305597612!3d42.35007599433297!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89e37a74915ec797%3A0xdbf8f3ad5e482bff!2sSutori!5e0!3m2!1ses-419!2s!4v1456257591754"],["static-attr","frameborder","0"],["static-attr","style","border:0"],["static-attr","allowfullscreen",""],["flush-element"],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","offices"],["flush-element"],["text","\\n    "],["open-element","article",[]],["static-attr","class","office"],["static-attr","itemscope",""],["static-attr","itemtype","http://schema.org/PostalAddress"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["flush-element"],["text","US Office"],["close-element"],["text","\\n      "],["open-element","address",[]],["static-attr","class","address"],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","itemprop","streetAddress"],["flush-element"],["append",["unknown",["streetAddress"]],false],["close-element"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","itemprop","addressLocality"],["flush-element"],["append",["unknown",["addressLocality"]],false],["close-element"],["text",", "],["open-element","span",[]],["static-attr","itemprop","addressRegion"],["flush-element"],["append",["unknown",["addressRegion"]],false],["close-element"],["text"," "],["open-element","span",[]],["static-attr","itemprop","postalCode"],["flush-element"],["append",["unknown",["postalCode"]],false],["close-element"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        "],["open-element","span",[]],["static-attr","itemprop","addressCountry"],["flush-element"],["append",["unknown",["addressCountry"]],false],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","a",[]],["static-attr","class","telephone"],["dynamic-attr","href",["concat",["tel:",["unknown",["telephone"]]]]],["flush-element"],["append",["unknown",["telephoneFormatted"]],false],["close-element"],["text"," "],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n      "],["append",["helper",["email-info"],null,[["classNames"],["email"]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/contact.hbs" },
    });
  }),
  define("frontend/templates/dashboard", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "nhZRJ5dm",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-dashboard"],["flush-element"],["text","\\n"],["text","  "],["partial","interactive-tour"],["text","\\n\\n  "],["append",["helper",["stories-section"],null,[["createNewAction","class","title","storiesPromise","stories","sortBy"],[["helper",["action"],[["get",[null]],"createNewStory"],null],"my-stories","My stories",["get",["ownStoriesPromise"]],["get",["ownStories"]],["get",["sortOwnStoriesBy"]]]]],false],["text","\\n\\n  "],["append",["helper",["stories-section"],null,[["class","title","emptyMessage","storiesPromise","stories","sortBy"],["collaborative-stories","Collaborative stories","When a friend invites you to collaborate, the story will appear here!",["get",["ownStoriesPromise"]],["get",["collaborativeStories"]],["get",["sortCollaborativeStoriesBy"]]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/dashboard.hbs" },
    });
  }),
  define("frontend/templates/education", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "C9hvBIzh",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-education"],["flush-element"],["text","\\n"],["block",["hero-display"],null,null,12],["text","\\n  "],["open-element","section",[]],["static-attr","class","features"],["flush-element"],["text","\\n"],["text","    "],["append",["helper",["feature-comments"],null,[["textSide"],["left"]]],false],["text","\\n\\n"],["block",["feature-collaboration"],null,[["textSide","title"],["right","The future is collaborative"]],6],["text","\\n"],["text","    "],["append",["helper",["feature-assignment"],null,[["textSide"],["left"]]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["features-secondary"],null,null,5],["text","\\n"],["text","  "],["append",["helper",["education-use-cases"],null,[["stories","tabObjects"],[["get",["stories"]],["get",["tabObjects"]]]]],false],["text","\\n\\n"],["text","  "],["append",["unknown",["usage-display"]],false],["text","\\n\\n"],["text","  "],["append",["helper",["subscription-plans"],null,[["showFreePlan","showPlansAsLink"],[true,true]]],false],["text","\\n  "],["open-element","p",[]],["static-attr","class","bulk-discounts"],["flush-element"],["text","Bulk discounts for schools and districts. Email "],["append",["unknown",["email-sales"]],false],["text"," for pricing information."],["close-element"],["text","\\n  "],["partial","page-upgrade/faq"],["text","\\n\\n"],["block",["footing-display"],null,null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    Change your teaching today.\\n"]],"locals":[]},{"statements":[["text","      All teacher and student data is kept private within your class.\\n"]],"locals":[]},{"statements":[["text","      Share easily via email or on social media. Embed stories into any website.\\n"]],"locals":[]},{"statements":[["text","      Add images, videos, audio and quiz questions to bring any topic to life.\\n"]],"locals":[]},{"statements":[["text","      Set up your account and class within minutes. Add students from Google Classroom with a few clicks.\\n"]],"locals":[]},{"statements":[["block",["feature-secondary"],null,[["title","icon"],["Time Saver","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-time-saver-a5961c9e232cdbda210ab13e8c234415.svg"]],4],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["All Media","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-all-media-a4b6d904f54b849964ebc8a2aa18013b.svg"]],3],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Share","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-share-8736c660e2c47562e97cd422cbe63c88.svg"]],2],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Secure Environment","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-secure-0ad5cb4aa42a1bf12f9292a4fd18c079.svg"]],1]],"locals":[]},{"statements":[["text","      Collaboration is key to any learning. Students "],["open-element","strong",[]],["flush-element"],["text","work together"],["close-element"],["text"," in "],["open-element","strong",[]],["flush-element"],["text","real time"],["close-element"],["text"," (like a Google doc) on group or class projects.\\n"]],"locals":[]},{"statements":[["text","          Built for teachers and with minimal learning curve, Sutori is the perfect place to bring the best out of your students.\\n"]],"locals":[]},{"statements":[["text","          Sutori for Education\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],8],["text","\\n"],["block",["h","paragraph"],null,null,7]],"locals":["h"]},{"statements":[["block",["heading-display"],null,null,9]],"locals":[]},{"statements":[["text","      "],["partial","education/background-circles"],["text","\\n"]],"locals":[]},{"statements":[["block",["hero","background"],null,null,11],["text","\\n"],["block",["hero","body"],null,null,10]],"locals":["hero"]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/education.hbs" },
    });
  }),
  define("frontend/templates/education/-background-circles", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "cxO2KTT9",
      block:
        '{"statements":[["open-element","span",[]],["static-attr","class","circle-purple"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","ring-yellow"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","circle-orange"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","ring-green"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","circle-blue"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","circle-green"],["flush-element"],["close-element"],["text","\\n"],["open-element","span",[]],["static-attr","class","circle-yellow"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/education/-background-circles.hbs",
      },
    });
  }),
  define("frontend/templates/error", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "LoJTQzC+",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-error"],["flush-element"],["text","\\n\\n"],["block",["page-for-message"],null,null,6],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","p",[]],["flush-element"],["text","Please try refreshing the page."],["close-element"],["text","\\n        "],["open-element","p",[]],["flush-element"],["text","Tell us what went wrong at "],["append",["unknown",["email-help"]],false],["text","."],["close-element"],["text","\\n      "]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["flush-element"],["text","We can\'t seem to find the page you are looking for. Maybe you mistyped the URL?"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["notFoundError"]]],null,1,0]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["flush-element"],["text","You are not authorized to see this page."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["authorizationError"]]],null,3,2]],"locals":[]},{"statements":[["text","      Oops\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,5],["text","\\n"],["block",["p","body"],null,null,4]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/error.hbs" },
    });
  }),
  define("frontend/templates/feature-primary/-replay-button", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "T2PVunt8",
      block:
        '{"statements":[["block",["if"],[["get",["hasRun"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","button",[]],["static-attr","class","button-replay"],["dynamic-attr","disabled",["unknown",["animationTask","isRunning"]],null],["modifier",["action"],[["get",[null]],"replay"]],["flush-element"],["text","Replay"],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/feature-primary/-replay-button.hbs",
      },
    });
  }),
  define("frontend/templates/forgot-password", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7pjdNKkc",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-forgot-password"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,null,7],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["append",["helper",["f","form-field"],null,[["for","placeholder","type"],["email","Your email address","email"]]],false],["text","\\n\\n          "],["append",["helper",["f","form-submit"],null,[["label"],["Send password reset email"]]],false],["text","\\n"]],"locals":["f"]},{"statements":[["block",["object-form"],null,[["action","for"],["requestPasswordReset",["get",["teacherForgotPasswordSubmission"]]]],0],["text","\\n        "],["open-element","p",[]],["static-attr","class","not-for-students"],["flush-element"],["text","You can only reset the password if you have an educator, personal or a publisher account. If you are a student, please ask your teacher to reset it for you."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Reset"],["close-element"],["text"," your password\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,2],["text","\\n"],["block",["p","body"],null,null,1]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","request-sent"],["flush-element"],["text","Thank you! We sent an email to "],["open-element","strong",[]],["flush-element"],["append",["unknown",["email"]],false],["close-element"],["text"," with instructions on how to reset your password."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        Password reset instructions "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","sent"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,5],["text","\\n"],["block",["p","body"],null,null,4],["text","\\n      "],["partial","back-to-login"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["requestSent"]]],null,6,3]],"locals":["p"]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/forgot-password.hbs" },
    });
  }),
  define("frontend/templates/head", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "YabuELS8",
      block:
        '{"statements":[["comment"," `ember-cli-meta-tags/templates/head.hbs` "],["text","\\n"],["append",["helper",["head-tags"],null,[["headTags"],[["get",["model","headTags"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/head.hbs" },
    });
  }),
  define("frontend/templates/help-category", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "qNQ4TnPg",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-help"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","container"],["flush-element"],["text","\\n    "],["open-element","h2",[]],["flush-element"],["block",["link-to"],["help"],null,1],["text"," > "],["append",["unknown",["model","name"]],false],["close-element"],["text","\\n    "],["open-element","section",[]],["static-attr","class","main-content"],["flush-element"],["text","\\n"],["block",["promise-block"],null,[["promise"],[["get",["helpItemsPromise"]]]],0],["text","    "],["close-element"],["text","\\n    "],["partial","help-sidebar"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["help-items-list"],null,[["helpItems"],[["get",["sortedHelpItems"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","Help Center"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/help-category.hbs" },
    });
  }),
  define("frontend/templates/help-item", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ZCk+fCnM",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-help"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","container"],["flush-element"],["text","\\n    "],["open-element","h2",[]],["flush-element"],["block",["link-to"],["help"],null,0],["close-element"],["text","\\n    "],["open-element","section",[]],["static-attr","class","main-content"],["flush-element"],["text","\\n      "],["append",["helper",["help-item"],null,[["helpItem"],[["get",["model"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["partial","help-sidebar"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Help Center"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/help-item.hbs" },
    });
  }),
  define("frontend/templates/help-sidebar", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "WVR+75Vt",
      block:
        '{"statements":[["open-element","section",[]],["static-attr","class","sidebar"],["flush-element"],["text","\\n  "],["append",["unknown",["help-categories"]],false],["text","\\n  "],["partial","help/any-other-question"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/help-sidebar.hbs" },
    });
  }),
  define("frontend/templates/help", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "WBdJPgRz",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-help"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","container"],["flush-element"],["text","\\n    "],["open-element","h2",[]],["flush-element"],["text","Help Center"],["close-element"],["text","\\n    "],["open-element","section",[]],["static-attr","class","main-content"],["flush-element"],["text","\\n      "],["append",["helper",["help-items-list"],null,[["title","helpItems"],["Most popular questions",["get",["model"]]]]],false],["text","\\n    "],["close-element"],["text","\\n    "],["partial","help-sidebar"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/help.hbs" },
    });
  }),
  define("frontend/templates/help/any-other-question", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "PocnmdKc",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","any-other-question"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["flush-element"],["text","Any other question?"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["text","If you can\'t find the answer you\'re looking for, just email us at "],["append",["unknown",["email-help"]],false],["text"," and we\'ll get back to you shortly. You can also tweet us at "],["open-element","a",[]],["static-attr","href","https://twitter.com/SutoriApp"],["flush-element"],["text","@SutoriApp"],["close-element"],["text","."],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/help/any-other-question.hbs" },
    });
  }),
  define("frontend/templates/helpers/-loader", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "nkkywUiw",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","loader"],["flush-element"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/helpers/-loader.hbs" },
    });
  }),
  define("frontend/templates/index", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "SaVKW+hB",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-index"],["flush-element"],["text","\\n"],["block",["hero-display"],null,null,12],["text","\\n  "],["open-element","section",[]],["static-attr","class","features"],["flush-element"],["text","\\n"],["text","    "],["append",["helper",["feature-build-your-story"],null,[["textSide"],["right"]]],false],["text","\\n\\n"],["block",["feature-collaboration"],null,[["textSide","title"],["left","Ask your friends"]],6],["text","\\n"],["text","    "],["append",["helper",["feature-explore-stories"],null,[["textSide"],["right"]]],false],["text","\\n  "],["close-element"],["text","\\n\\n"],["block",["features-secondary"],null,null,5],["text","\\n"],["text","  "],["append",["unknown",["flash-education"]],false],["text","\\n\\n"],["block",["footing-display"],null,null,0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    It will amaze you.\\n"]],"locals":[]},{"statements":[["text","      Sutori works on all devices, all you need is an internet connection.\\n"]],"locals":[]},{"statements":[["text","      Share easily via email or on social media. Embed stories into any website or blog.\\n"]],"locals":[]},{"statements":[["text","      Create & share projects all for free.\\n"]],"locals":[]},{"statements":[["text","      Add images, videos and audio to bring any topic to life.\\n"]],"locals":[]},{"statements":[["block",["feature-secondary"],null,[["title","icon"],["All Media","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-all-media-a4b6d904f54b849964ebc8a2aa18013b.svg"]],4],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Itâs Free","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-free-00028b28f45663206f425f7afafafd5a.svg"]],3],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Share","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-share-8736c660e2c47562e97cd422cbe63c88.svg"]],2],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Anytime, Anywhere","https://d1ox703z8b11rg.cloudfront.net/images/feature-secondary-anytime-05de724803e613e8136d6bcb4875c12d.svg"]],1]],"locals":[]},{"statements":[["text","      Invite your friends or colleagues to help you build your story. Work together in "],["open-element","strong",[]],["flush-element"],["text","real-time"],["close-element"],["text",".\\n"]],"locals":[]},{"statements":[["text","          The best way to share your story\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],7]],"locals":["h"]},{"statements":[["block",["heading-display"],null,null,8]],"locals":[]},{"statements":[["text","        "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/home/hero-79f9434afa4f4d99b756b292b6450f15.png"],["static-attr","alt","Hero for the homepage"],["flush-element"],["close-element"],["text","\\n        "],["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/home/hero-79f9434afa4f4d99b756b292b6450f15.png"],["static-attr","alt","Hero for the homepage"],["flush-element"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["hero","background"],null,null,10]],"locals":[]},{"statements":[["text","\\n"],["block",["if"],[["get",["showHeroBackground"]]],null,11],["text","\\n"],["block",["hero","body"],null,null,9]],"locals":["hero"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/index.hbs" },
    });
  }),
  define("frontend/templates/item", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "v+cPJtH5",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-item"],["flush-element"],["text","\\n  "],["append",["helper",["story-item"],null,[["model"],[["get",["model"]]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/item.hbs" },
    });
  }),
  define("frontend/templates/lesson-plan/-aims", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "C/eVyoba",
      block:
        '{"statements":[["append",["helper",["editable-text"],null,[["class","isEditing","model","errors","placeholder"],["aims",["get",["isEditing"]],["get",["model","aims"]],["get",["model","errors","aims"]],"Enter the aims..."]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/lesson-plan/-aims.hbs" },
    });
  }),
  define("frontend/templates/lesson-plan/-follow-up-activities", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Ki07IvpI",
      block:
        '{"statements":[["append",["helper",["editable-text"],null,[["class","isEditing","model","errors","placeholder"],["follow-up-activities",["get",["isEditing"]],["get",["model","followUpActivities"]],["get",["model","errors","followUpActivities"]],"Enter the Follow-up activities description..."]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/lesson-plan/-follow-up-activities.hbs",
      },
    });
  }),
  define("frontend/templates/lesson-plan/-learning-standards", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "vUtZG3q4",
      block:
        '{"statements":[["append",["helper",["editable-text"],null,[["class","isEditing","model","errors","placeholder"],["learning-standards",["get",["isEditing"]],["get",["model","learningStandards"]],["get",["model","errors","learningStandards"]],"Enter the learning standards..."]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/lesson-plan/-learning-standards.hbs",
      },
    });
  }),
  define("frontend/templates/lesson-plan/-sources", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "OQ9J8jR1",
      block:
        '{"statements":[["append",["helper",["editable-text"],null,[["class","isEditing","model","errors","placeholder"],["sources",["get",["isEditing"]],["get",["model","sources"]],["get",["model","errors","sources"]],"Enter the sources..."]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/lesson-plan/-sources.hbs" },
    });
  }),
  define("frontend/templates/lesson-plan/-warm-up-activities", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ttzmAKq+",
      block:
        '{"statements":[["append",["helper",["editable-text"],null,[["class","isEditing","model","errors","placeholder"],["warm-up-activities",["get",["isEditing"]],["get",["model","warmUpActivities"]],["get",["model","errors","warmUpActivities"]],"Enter the Warm-up activities description..."]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/lesson-plan/-warm-up-activities.hbs",
      },
    });
  }),
  define("frontend/templates/loading", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "B5uZw28W",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-loading"],["flush-element"],["text","\\n  "],["partial","helpers/loader"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/loading.hbs" },
    });
  }),
  define("frontend/templates/login", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "b8n1UH6q",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-login"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,null,6],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Create a new account"]],"locals":[]},{"statements":[["text","Forgot?"]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["static-attr","class","session-expired-message"],["flush-element"],["text","Please login. You will be redirected to the intended page afterwards."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["showSessionExpiredMessage"]]],null,2],["text","\\n"],["text","        "],["append",["helper",["f","form-field"],null,[["for","placeholder"],["login","Email address or username"]]],false],["text","\\n\\n        "],["open-element","div",[]],["static-attr","class","password-wrapper"],["flush-element"],["text","\\n"],["text","          "],["append",["helper",["f","form-field"],null,[["for","type","placeholder"],["password","password","Password"]]],false],["text","\\n\\n"],["text","          "],["block",["link-to"],["forgotPassword"],[["class"],["button-forgot-password"]],1],["text","\\n        "],["close-element"],["text","\\n\\n"],["text","        "],["append",["unknown",["f","form-generic-errors"]],false],["text","\\n\\n        "],["open-element","div",[]],["static-attr","class","actions"],["flush-element"],["text","\\n"],["text","          "],["block",["link-to"],["registration"],[["class"],["button-sign-up"]],0],["text","\\n\\n"],["text","          "],["append",["helper",["f","form-submit"],null,[["label"],["Login"]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["f"]},{"statements":[["text","      "],["append",["helper",["single-sign-on-buttons"],null,[["loginSucceeded","loginFailed","labelPrefix","labelWhileSigningIn"],[["helper",["route-action"],["backendLoginSucceeded"],null],["helper",["route-action"],["backendLoginFailed"],null],"","Logging in"]]],false],["text","\\n\\n"],["block",["object-form"],null,[["for","action","buttonLabel"],[["get",["loginSubmission"]],"login","Log in"]],3]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Continue"],["close-element"],["text"," to Sutori\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,5],["text","\\n"],["block",["p","body"],null,null,4]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/login.hbs" },
    });
  }),
  define("frontend/templates/media-kit", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "rDruNoaT",
      block:
        '{"statements":[["append",["helper",["story-display"],null,[["story"],[["get",["model"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/media-kit.hbs" },
    });
  }),
  define("frontend/templates/menu/-item-logout", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "nqmrBCvr",
      block:
        '{"statements":[["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n  "],["append",["helper",["async-button"],null,[["action","name","class","label","loading"],[["helper",["perform"],[["get",["logoutTask"]]],null],"logout","navigation__link","Logout",["get",["logoutTask","isRunning"]]]]],false],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/menu/-item-logout.hbs" },
    });
  }),
  define("frontend/templates/menu/-item-profile", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "2Nwc2zRS",
      block:
        '{"statements":[["block",["if"],[["get",["currentUser","canEditProfile"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Profile\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","li",[]],["static-attr","class","navigation__item"],["flush-element"],["text","\\n"],["block",["link-to"],["user",["get",["currentUser"]]],[["class"],["profile-menu-item navigation__link"]],0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/menu/-item-profile.hbs" },
    });
  }),
  define("frontend/templates/organization", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4jyH+WQk",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-organization"],["flush-element"],["text","\\n  "],["append",["helper",["organization-info-box"],null,[["organization","numberOfStories"],[["get",["organization"]],["get",["storiesPromise","content","length"]]]]],false],["text","\\n  "],["append",["helper",["stories-section"],null,[["class","storiesPromise","createNewAction","emptyMessage","sortBy","overviewMode"],["organization-stories",["get",["storiesPromise"]],["helper",["if"],[["get",["canCreateNewStory"]],"createNewStory"],null],"This publisher hasn\'t created any stories yet. Please check back later!",["get",["sortStoriesBy"]],true]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/organization.hbs" },
    });
  }),
  define("frontend/templates/page-upgrade/-already-premium", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4Oddt94L",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","already-premium"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["flush-element"],["text","Explore and Share"],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","thank-you"],["flush-element"],["text","We are happy to have you on board. Your "],["append",["unknown",["currentUser","premiumSubscription","label"]],false],["text"," subscription will last until "],["append",["helper",["format-date"],[["get",["currentUser","premiumSubscription","expiresAt"]]],null],false],["text","."],["close-element"],["text","\\n  "],["block",["link-to"],["schoolClasses"],[["class"],["button-go-to-dashboard"]],0],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Go to my dashboard"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/page-upgrade/-already-premium.hbs",
      },
    });
  }),
  define("frontend/templates/page-upgrade/-cvc-label", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "5Pz9X2g8",
      block:
        '{"statements":[["open-element","label",[]],["flush-element"],["text","CVC "],["append",["helper",["info-tooltip"],null,[["text","placement"],[" ","right"]]],false],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/page-upgrade/-cvc-label.hbs" },
    });
  }),
  define("frontend/templates/page-upgrade/-faq", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "wJYzmtf0",
      block:
        '{"statements":[["open-element","section",[]],["static-attr","class","faq"],["flush-element"],["text","\\n"],["block",["faq-item"],null,[["question"],["What cards do you accept?"]],3],["text","\\n"],["block",["faq-item"],null,[["question"],["How long does my subscription last"]],2],["text","\\n"],["block",["faq-item"],null,[["question"],["Can I pay via postal order or check?"]],1],["text","\\n"],["block",["faq-item"],null,[["question"],["Can I cancel my subscription?"]],0],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    You may cancel your subscription at anytime by e-mailing us at "],["append",["unknown",["email-sales"]],false],["text",", but we can only issue a refund within the first 15 days from the date of purchase.\\n"]],"locals":[]},{"statements":[["text","    Yes of course. Please first send us an email at "],["append",["unknown",["email-sales"]],false],["text",".\\n"]],"locals":[]},{"statements":[["text","    Any subscription lasts one year from the date of purchase.\\n"]],"locals":[]},{"statements":[["text","    We accept Visa, Mastercard, American Express, JCB, Discover and Diners Club.\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/page-upgrade/-faq.hbs" },
    });
  }),
  define("frontend/templates/page-upgrade/-manual-upgrade-instructions", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "myaG86A0",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","wrapper-manual-upgrade-instructions"],["flush-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","manual-upgrade-instructions"],["flush-element"],["text","As you purchased Premium via check or postal order, please send an email to "],["append",["unknown",["email-sales"]],false],["text"," to upgrade to Sutori "],["append",["unknown",["selectedPlanLabel"]],false],["text","."],["close-element"],["text","\\n  "],["append",["helper",["email-sales"],["Contact us"],[["classNames"],["button-contact-us"]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/page-upgrade/-manual-upgrade-instructions.hbs",
      },
    });
  }),
  define("frontend/templates/personal-registration", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "KqE5C5tY",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-personal-registration"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,null,2],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["single-sign-on-buttons"],null,[["loginSucceeded","loginFailed","labelPrefix","labelWhileSigningIn","providers","userType"],[["helper",["route-action"],["backendLoginSucceeded"],null],["helper",["route-action"],["backendLoginFailed"],null],"Sign up with","Signing up",["get",["singleSignOnProviders"]],"personal"]]],false],["text","\\n\\n        "],["append",["unknown",["line-text-separator"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","isGuestUser"]]],null,0],["text","\\n      "],["append",["helper",["registration-form"],null,[["registrationSucceeded","userType"],[["helper",["perform"],[["get",["loginAndRedirectTask"]]],null],"personal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["p","body"],null,null,1]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/personal-registration.hbs" },
    });
  }),
  define("frontend/templates/plans/-tick-blue", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "kJy/T5XX",
      block:
        '{"statements":[["open-element","img",[]],["static-attr","src","https://d1ox703z8b11rg.cloudfront.net/images/icon-tick-thick-blue-6a3c7a71b6185f4960957bec1b7750cc.svg"],["static-attr","alt","Tick"],["static-attr","class","tick"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/plans/-tick-blue.hbs" },
    });
  }),
  define("frontend/templates/press", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "0D+GYgT5",
      block:
        '{"statements":[["append",["helper",["story-display"],null,[["story"],[["get",["model"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/press.hbs" },
    });
  }),
  define("frontend/templates/privacy-policy", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "yjFB5Bp6",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-privacy-policy"],["flush-element"],["text","\\n"],["block",["heading-display"],null,null,1],["text","\\n  "],["append",["unknown",["iubenda-policy"]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Privacy policy\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],0]],"locals":["h"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/privacy-policy.hbs" },
    });
  }),
  define("frontend/templates/registration", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "p7OJL1qX",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-registration"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,null,7],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["button-select-account-type"],null,[["name","description","class"],["Educator","Inspire your students","teacher"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["button-select-account-type"],null,[["name","description","class"],["Student","Be creative","student"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["button-select-account-type"],null,[["name","description","class"],["Personal","Create your story","personal"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["link-to"],["personalRegistration"],[["class"],["button-sign-up-personal"]],2],["text","\\n"],["block",["link-to"],["studentRegistration"],[["class"],["button-sign-up-student"]],1],["text","\\n"],["block",["link-to"],["teacherRegistration"],[["class"],["button-sign-up-teacher"]],0]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Choose"],["close-element"],["text"," your account\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Complete"],["close-element"],["text"," your sign up\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","isLoggedIn"]]],null,5,4]],"locals":[]},{"statements":[["block",["p","title"],null,null,6],["text","\\n"],["block",["p","body"],null,null,3]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/registration.hbs" },
    });
  }),
  define("frontend/templates/reset-password", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "PWlJcN5e",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-reset-password"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,[["showSutoriLogo"],[false]],8],["close-element"],["text","\\n\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","            "],["open-element","p",[]],["static-attr","class","error message"],["flush-element"],["append",["unknown",["resetPasswordSubmission","errors","resetPasswordToken"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["resetPasswordSubmission","errors","resetPasswordToken"]]],null,0],["text","\\n"],["text","          "],["append",["helper",["f","form-field"],null,[["for","placeholder","type"],["password","Choose a new password of at least 8 characters","password"]]],false],["text","\\n"],["text","          "],["append",["helper",["f","form-field"],null,[["for","placeholder","type"],["passwordConfirmation","Confirm the chosen password","password"]]],false],["text","\\n\\n"],["text","          "],["append",["helper",["f","form-submit"],null,[["label"],["Reset my password"]]],false],["text","\\n"]],"locals":["f"]},{"statements":[["block",["object-form"],null,[["for","action"],[["get",["resetPasswordSubmission"]],"resetPassword"]],1]],"locals":[]},{"statements":[["text","        Choose a "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","new"],["close-element"],["text"," password\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,3],["text","\\n"],["block",["p","body"],null,null,2]],"locals":[]},{"statements":[["text","        "],["open-element","p",[]],["flush-element"],["text","Your password was successfully changed. You can now login with your new password."],["close-element"],["text","\\n\\n        "],["partial","back-to-login"],["text","\\n"]],"locals":[]},{"statements":[["text","        Password "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","successfully"],["close-element"],["text"," changed\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,6],["text","\\n"],["block",["p","body"],null,null,5]],"locals":[]},{"statements":[["block",["if"],[["get",["isPasswordReset"]]],null,7,4]],"locals":["p"]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/reset-password.hbs" },
    });
  }),
  define("frontend/templates/school-class", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "eQyx7Png",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","article",[]],["dynamic-attr","class",["concat",["page-school-class ",["helper",["if"],[["get",["session","currentUser","isTeacher"]],"has-side-column"],null]]]],["flush-element"],["text","\\n"],["text","  "],["partial","interactive-tour"],["text","\\n\\n"],["block",["if"],[["get",["schoolClass","isArchived"]]],null,1],["text","\\n  "],["open-element","div",[]],["static-attr","class","left-column"],["flush-element"],["text","\\n"],["text","    "],["partial","school-class/stories/my-stories"],["text","\\n\\n"],["text","    "],["partial","school-class/stories/student-stories"],["text","\\n\\n"],["text","    "],["partial","school-class/stories/class-stories"],["text","\\n\\n"],["text","    "],["partial","school-class/stories/teacher-stories"],["text","\\n\\n"],["text","    "],["partial","school-class/stories/classmates-stories"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","right-column"],["flush-element"],["text","\\n"],["text","    "],["partial","school-class/class-information"],["text","\\n\\n"],["text","    "],["partial","school-class/students-list"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          "],["open-element","button",[]],["static-attr","class","button-unarchive"],["dynamic-attr","disabled",["unknown",["schoolClass","isSaving"]],null],["modifier",["action"],[["get",[null]],"unarchiveClass"]],["flush-element"],["text","Unarchive"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","wrapper-archive-banner"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","archive-banner"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","class","archive-banner-message"],["flush-element"],["text","Please keep in mind that this class was archived in "],["append",["unknown",["schoolClass","displayArchivationDate"]],false],["text","."],["close-element"],["text","\\n\\n"],["block",["if"],[["helper",["permission-check"],["unarchiveSchoolClass",["get",[null]]],null]],null,0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/school-class.hbs" },
    });
  }),
  define("frontend/templates/school-class/-class-information", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "J6IGM3eK",
      block:
        '{"statements":[["block",["if"],[["helper",["permission-check"],["seeSchoolClassInfo",["get",[null]]],null]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","span",[]],["static-attr","class","subject"],["flush-element"],["text","- "],["append",["unknown",["subject"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["append",["helper",["modal-box"],null,[["title","formComponentPath","model","isActive","closeOnClickOutside"],["Edit class","modals/school-class-edit",["get",["model"]],["get",["modalVisible"]],false]]],false],["text","\\n  "],["open-element","aside",[]],["dynamic-attr","class",["concat",["class-info ",["helper",["if"],[["get",["hasSubject"]],"with-subject"],null]]]],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["append",["unknown",["name"]],false],["close-element"],["text","\\n"],["block",["if"],[["get",["hasSubject"]]],null,0],["text","      "],["open-element","button",[]],["static-attr","class","button-edit-class"],["modifier",["action"],[["get",[null]],"editClass"]],["flush-element"],["text","Edit class"],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["text","    "],["open-element","ul",[]],["static-attr","class","statistics"],["flush-element"],["text","\\n      "],["open-element","li",[]],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","count"],["flush-element"],["append",["unknown",["students","length"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["student",["get",["students","length"]]],null],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","count"],["flush-element"],["append",["unknown",["classStories","length"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["class story",["get",["classStories","length"]]],null],false],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","li",[]],["flush-element"],["text","\\n        "],["open-element","span",[]],["static-attr","class","count"],["flush-element"],["append",["unknown",["studentStories","length"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["student story",["get",["studentStories","length"]]],null],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n"],["text","    "],["open-element","div",[]],["static-attr","class","class-code-information"],["flush-element"],["text","\\n      "],["open-element","span",[]],["static-attr","class","class-code"],["flush-element"],["append",["unknown",["code"]],false],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","explanation"],["flush-element"],["text","Your students will need this code when joining your class."],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/school-class/-class-information.hbs",
      },
    });
  }),
  define("frontend/templates/school-class/-students-list", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "v2CmmQIy",
      block:
        '{"statements":[["block",["if"],[["helper",["permission-check"],["seeOtherStudentsInClass",["get",[null]]],null]],null,6]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","empty"],["flush-element"],["text","No students have joined this class. Share the class code with them so that they can join your class."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["append",["unknown",["student","fullName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["text","\\n"],["block",["link-to"],["student",["get",["student"]],["helper",["query-params"],null,[["schoolClassId"],[["get",["model","id"]]]]]],null,1],["text","            "],["close-element"],["text","\\n"]],"locals":["student"]},{"statements":[["block",["each"],[["get",["sortedStudents"]]],null,2]],"locals":[]},{"statements":[["block",["expandable-list"],null,[["totalNumberOfElements","initialNumberOfElements","maximalNumberOfElements"],[["get",["sortedStudents","length"]],5,8]],3]],"locals":[]},{"statements":[["block",["if"],[["get",["hasStudents"]]],null,4,0]],"locals":[]},{"statements":[["text","  "],["open-element","aside",[]],["static-attr","class","students"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","Students"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["studentsPromise"]]]],5],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/school-class/-students-list.hbs",
      },
    });
  }),
  define("frontend/templates/school-class/stories/-class-stories", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "3EJhhbry",
      block:
        '{"statements":[["block",["if"],[["helper",["permission-check"],["seeClassStoriesFromSchoolClass",["get",[null]]],null]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["stories-section"],null,[["class","title","storiesPromise","stories","schoolClass","sortBy","emptyMessage"],["class-stories","Class stories",["get",["classStoriesPromise"]],["get",["classStories"]],["get",["model"]],["get",["sortClassStoriesBy"]],"You haven\'t made any stories available in this class yet. You can share some of your own or any that you like from the Explore section."]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/school-class/stories/-class-stories.hbs",
      },
    });
  }),
  define("frontend/templates/school-class/stories/-classmates-stories", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "/aNz4YW8",
      block:
        '{"statements":[["block",["if"],[["helper",["permission-check"],["seeClassmatesStoriesFromSchoolClass",["get",[null]]],null]],null,6]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","empty"],["flush-element"],["append",["unknown",["model","teacher","formalName"]],false],["text"," hasn\'t shared any of your classmates\' stories yet."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                  "],["append",["helper",["story-title"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","tr",[]],["flush-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["append",["unknown",["story","author","fullName"]],false],["close-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["text","\\n"],["block",["story-link"],null,[["story","schoolClass"],[["get",["story"]],["get",["model"]]]],1],["text","              "],["close-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["append",["helper",["format-date"],[["get",["story","updatedAt"]]],null],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["sortedClassmatesStories"]]],null,2]],"locals":[]},{"statements":[["block",["sortable-table"],null,[["columns","sortBy"],[["get",["classmatesStoriesColumns"]],["get",["sortClassmatesStoriesBy"]]]],3]],"locals":[]},{"statements":[["block",["if"],[["get",["hasClassmatesStories"]]],null,4,0]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","classmates-stories stories-section"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["flush-element"],["text","Classmates stories"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["classmatesStoriesPromise"]]]],5],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/school-class/stories/-classmates-stories.hbs",
      },
    });
  }),
  define("frontend/templates/school-class/stories/-my-stories", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "PBqTvsPO",
      block:
        '{"statements":[["block",["if"],[["get",["canSeeOwnStories"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["stories-section"],null,[["createNewAction","class","title","storiesPromise","schoolClass","sortBy"],[["helper",["action"],[["get",[null]],"createNewStory"],null],"my-stories","My stories",["get",["ownStoriesPromise"]],["get",["model"]],["get",["sortOwnStoriesBy"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/school-class/stories/-my-stories.hbs",
      },
    });
  }),
  define("frontend/templates/school-class/stories/-student-stories", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "9Hp7EcwD",
      block:
        '{"statements":[["block",["if"],[["helper",["permission-check"],["seeStudentStoriesFromSchoolClass",["get",[null]]],null]],null,8]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","empty"],["flush-element"],["text","Your students haven\'t submitted any stories yet."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                  "],["append",["helper",["story-title"],null,[["story"],[["get",["presentableStory"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                  "],["append",["unknown",["presentableStory","author","fullName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","              "],["open-element","td",[]],["flush-element"],["text","\\n"],["block",["link-to"],["student",["get",["presentableStory","author"]],["helper",["query-params"],null,[["schoolClassId"],[["get",["schoolClass","id"]]]]]],null,2],["text","              "],["close-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["text","\\n"],["block",["story-link"],null,[["story","schoolClass"],[["get",["presentableStory","model"]],["get",["schoolClass"]]]],1],["text","              "],["close-element"],["text","\\n              "],["open-element","td",[]],["static-attr","class","shared-with"],["flush-element"],["append",["unknown",["presentableStory","sharedWith"]],false],["close-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["append",["unknown",["presentableStory","updatedAt"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["selectable-story-row"],null,[["story","schoolClass","toggledSelection"],[["get",["presentableStory","model"]],["get",["schoolClass"]],"changedStorySelection"]],3]],"locals":["presentableStory"]},{"statements":[["block",["each"],[["get",["sortedPresentableStudentStories"]]],null,4]],"locals":[]},{"statements":[["block",["sortable-table"],null,[["columns","sortBy","selectable"],[["get",["studentStoriesColumns"]],["get",["sortStudentStoriesBy"]],true]],5]],"locals":[]},{"statements":[["block",["if"],[["get",["hasStudentStories"]]],null,6,0]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","student-stories stories-section"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","Student stories"],["close-element"],["text","\\n      "],["append",["helper",["share-stories-button"],null,[["selectedStories","schoolClass"],[["get",["selectedStudentStories"]],["get",["schoolClass"]]]]],false],["text","\\n    "],["close-element"],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["studentStoriesPromise"]]]],7],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/school-class/stories/-student-stories.hbs",
      },
    });
  }),
  define("frontend/templates/school-class/stories/-teacher-stories", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "L0eJu0+a",
      block:
        '{"statements":[["block",["if"],[["helper",["permission-check"],["seeTeacherStoriesFromSchoolClass",["get",[null]]],null]],null,11]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["open-element","p",[]],["static-attr","class","empty"],["flush-element"],["append",["unknown",["model","teacher","formalName"]],false],["text"," hasn\'t shared any stories yet."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                  "],["append",["helper",["story-title"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                  "],["append",["unknown",["story","author","fullName"]],false],["text","\\n                "]],"locals":[]},{"statements":[["block",["if"],[["get",["story","author","isStudent"]]],null,2]],"locals":[]},{"statements":[["text","                  "],["append",["unknown",["story","author","formalName"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["story","author","isTeacher"]]],null,4,3]],"locals":[]},{"statements":[["text","                  Sutori\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","tr",[]],["flush-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["story","isSutoriStory"]]],null,6,5],["text","              "],["close-element"],["text","\\n              "],["open-element","td",[]],["flush-element"],["text","\\n"],["block",["story-link"],null,[["story","schoolClass"],[["get",["story"]],["get",["model"]]]],1],["text","              "],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["sortedTeacherStories"]]],null,7]],"locals":[]},{"statements":[["block",["sortable-table"],null,[["columns","sortBy"],[["get",["teacherStoriesColumns"]],["get",["sortTeacherStoriesBy"]]]],8]],"locals":[]},{"statements":[["block",["if"],[["get",["hasTeacherStories"]]],null,9,0]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","teacher-stories stories-section"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["flush-element"],["text","Teacher stories"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["teacherStoriesPromise"]]]],10],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/school-class/stories/-teacher-stories.hbs",
      },
    });
  }),
  define("frontend/templates/school-classes", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "y3bdRTdc",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-school-classes"],["flush-element"],["text","\\n"],["text","  "],["partial","interactive-tour"],["text","\\n\\n"],["text","  "],["open-element","section",[]],["static-attr","class","school-classes"],["flush-element"],["text","\\n    "],["open-element","header",[]],["flush-element"],["text","\\n      "],["open-element","h2",[]],["flush-element"],["text","My classes"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n"],["text","    "],["open-element","ul",[]],["dynamic-attr","class",["concat",["unarchived-school-classes ",["helper",["if"],[["get",["hasSchoolClasses"]],"","no-school-classes-yet"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["canCreateNewSchoolClass"]]],null,9],["block",["if"],[["get",["canJoinSchoolClass"]]],null,8],["block",["each"],[["get",["unarchivedSchoolClasses"]]],null,7],["text","    "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["hasArchivedSchoolClasses"]]],null,6],["text","  "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showMyStories"]]],null,1],["text","\\n"],["block",["if"],[["get",["showMyUnsubmittedStories"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["stories-section"],null,[["class","title","storiesPromise","stories","sortBy","createNewAction"],["my-unsubmitted-stories","My unsubmitted stories",["get",["myUnsubmittedStoriesPromise"]],["get",["myUnsubmittedStories"]],["get",["sortMyUnsubmittedStoriesBy"]],["helper",["action"],[["get",[null]],"createNewStory"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["stories-section"],null,[["class","title","storiesPromise","sortBy","createNewAction"],["my-stories","My stories",["get",["myStoriesPromise"]],["get",["sortMyStoriesBy"]],["helper",["action"],[["get",[null]],"createNewStory"],null]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["text","\\n              "],["append",["helper",["school-class-box"],null,[["schoolClass"],[["get",["schoolClass"]]]]],false],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["schoolClass"]},{"statements":[["text","        "],["open-element","ul",[]],["static-attr","class","archived-school-classes"],["flush-element"],["text","\\n"],["block",["each"],[["get",["archivedSchoolClasses"]]],null,2],["text","        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            Show\\n"]],"locals":[]},{"statements":[["text","            Hide\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","div",[]],["static-attr","class","wrapper-button-archived-classes"],["flush-element"],["text","\\n        "],["open-element","hr",[]],["dynamic-attr","class",["concat",["hr-",["unknown",["archiveClassLabel"]],"-archived-classes"]]],["flush-element"],["close-element"],["text","\\n        "],["open-element","button",[]],["dynamic-attr","class",["concat",["button-",["unknown",["archiveClassLabel"]],"-archived-classes"]]],["modifier",["action"],[["get",[null]],"toggleShowArchivedClasses"]],["flush-element"],["text","\\n"],["block",["if"],[["get",["isShowingArchivedClasses"]]],null,5,4],["text","          archived classes\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"],["block",["liquid-if"],[["get",["isShowingArchivedClasses"]]],null,3]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["text","\\n          "],["append",["helper",["school-class-box"],null,[["schoolClass"],[["get",["schoolClass"]]]]],false],["text","\\n        "],["close-element"],["text","\\n"]],"locals":["schoolClass"]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["text","\\n          "],["append",["helper",["modal-box"],null,[["title","formComponentPath","isActive","currentUser","action"],["Join a class","modals/school-class-join",["get",["modalVisible"]],["get",["session","currentUser"]],["helper",["action"],[["get",[null]],"schoolClassCreated"],null]]]],false],["text","\\n          "],["open-element","button",[]],["static-attr","class","button-join-school-class"],["modifier",["action"],[["get",[null]],"joinSchoolClass"]],["flush-element"],["text","\\n            Join a class\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","        "],["open-element","li",[]],["flush-element"],["text","\\n          "],["append",["helper",["modal-box"],null,[["title","formComponentPath","model","tourComponent","isActive","closeOnClickOutside","action"],["Add a class","modals/school-class-edit",["get",["newSchoolClass"]],["get",["tourComponent"]],["get",["modalVisible"]],false,["helper",["action"],[["get",[null]],"schoolClassCreated"],null]]]],false],["text","\\n          "],["open-element","button",[]],["static-attr","class","button-create-new-school-class"],["modifier",["action"],[["get",[null]],"createNewSchoolClass"]],["flush-element"],["text","\\n            "],["append",["unknown",["addNewSchoolClassText"]],false],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/school-classes.hbs" },
    });
  }),
  define("frontend/templates/status", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "KPWOla7K",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-status"],["flush-element"],["text","\\n"],["block",["heading-display"],null,null,1],["text","\\n  "],["open-element","p",[]],["flush-element"],["text","Please check "],["append",["unknown",["link-to-twitter"]],false],["text"," to be kept up-to-date of the availability of the Sutori application."],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","Status of the Sutori application"]],"locals":[]},{"statements":[["text","    "],["block",["h","title"],null,null,0],["text","\\n"]],"locals":["h"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/status.hbs" },
    });
  }),
  define("frontend/templates/stories-evaluation", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "QgI1Hsuf",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-stories-evaluation"],["flush-element"],["text","\\n"],["text","  "],["open-element","section",[]],["static-attr","class","public-stories"],["flush-element"],["text","\\n"],["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels"],[["helper",["action"],[["get",[null]],"publicStoriesPageLoaded"],null],["get",["publicStories"]],"story",["get",["publicStoriesQueryParams"]],30,30,["get",["publicStoriesPageToLoad"]],["get",["publicStoriesTotalNumber"]]]],2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","                  "],["append",["helper",["render-image"],null,[["class","imageFile","overflowPolicy"],["cover",["get",["story","bannerImageFile"]],"cover"]]],false],["text","\\n                  "],["append",["helper",["story-title"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","tr",[]],["flush-element"],["text","\\n              "],["open-element","td",[]],["static-attr","class","title"],["flush-element"],["text","\\n"],["block",["link-to"],["story",["get",["story"]]],null,0],["text","              "],["close-element"],["text","\\n              "],["open-element","td",[]],["static-attr","class","author"],["flush-element"],["append",["unknown",["story","author","fullName"]],false],["close-element"],["text","\\n              "],["open-element","td",[]],["static-attr","class","email"],["flush-element"],["append",["unknown",["story","author","email"]],false],["close-element"],["text","\\n              "],["open-element","td",[]],["static-attr","class","date"],["flush-element"],["append",["helper",["format-date"],[["get",["story","approvedAt"]]],null],false],["close-element"],["text","\\n            "],["close-element"],["text","\\n"]],"locals":["story"]},{"statements":[["text","      "],["open-element","h2",[]],["flush-element"],["text","Public stories "],["open-element","span",[]],["static-attr","class","number-stories"],["flush-element"],["append",["unknown",["publicStoriesTotalNumber"]],false],["close-element"],["close-element"],["text","\\n\\n      "],["open-element","table",[]],["flush-element"],["text","\\n        "],["open-element","thead",[]],["flush-element"],["text","\\n          "],["open-element","tr",[]],["flush-element"],["text","\\n            "],["open-element","th",[]],["flush-element"],["text","Title"],["close-element"],["text","\\n            "],["open-element","th",[]],["static-attr","class","author"],["flush-element"],["text","Author"],["close-element"],["text","\\n            "],["open-element","th",[]],["static-attr","class","email"],["flush-element"],["text","Email"],["close-element"],["text","\\n            "],["open-element","th",[]],["static-attr","class","date"],["flush-element"],["text","Date"],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","tbody",[]],["flush-element"],["text","\\n"],["block",["each"],[["get",["publicStories"]]],null,1],["text","        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/stories-evaluation.hbs" },
    });
  }),
  define("frontend/templates/stories", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ez3rVE8B",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-stories"],["flush-element"],["text","\\n"],["text","  "],["partial","interactive-tour"],["text","\\n\\n"],["block",["if"],[["get",["showStorySearch"]]],null,2],["text","\\n"],["text","  "],["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["block",["if"],[["get",["showTabSelector"]]],null,0],["text","\\n"],["text","  "],["append",["helper",["liquid-outlet"],null,[["class"],["stories-tab-container"]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["tab-selector"],null,[["tabs"],[["get",["tabs"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["f","form-search"],null,[["for","action"],["query","search"]]],false],["text","\\n"]],"locals":["f"]},{"statements":[["block",["object-form"],null,[["for"],[["get",["searchData"]]]],1]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/stories.hbs" },
    });
  }),
  define("frontend/templates/stories/community", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Sl89ufS4",
      block:
        '{"statements":[["block",["if"],[["get",["showCommunityStories"]]],null,1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["liquid-outlet"],null,[["class"],["list-of-stories"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","community-stories"],["flush-element"],["text","\\n"],["block",["tab-selector"],null,[["activeTabChanged","tabs"],[["helper",["action"],[["get",[null]],"communityStoriesCategoryTabChanged"],null],["get",["communityStoriesTabs"]]]],0],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/stories/community.hbs" },
    });
  }),
  define("frontend/templates/stories/community/featured", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "56o34xg2",
      block:
        '{"statements":[["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels","analyticsModelType"],[["helper",["action"],[["get",[null]],"featuredCommunityStoriesPageLoaded"],null],["get",["featuredCommunityStories"]],"story",["get",["featuredCommunityStoriesQueryParams"]],12,24,["get",["featuredCommunityStoriesPageToLoad"]],["get",["featuredCommunityStoriesTotalNumber"]],"Community stories - Editor\'s picks"]],1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["featuredCommunityStories"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/stories/community/featured.hbs" },
    });
  }),
  define("frontend/templates/stories/community/latest", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "j28c4zu3",
      block:
        '{"statements":[["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels","analyticsModelType"],[["helper",["action"],[["get",[null]],"latestCommunityStoriesPageLoaded"],null],["get",["latestCommunityStories"]],"story",["get",["latestCommunityStoriesQueryParams"]],12,24,["get",["latestCommunityStoriesPageToLoad"]],["get",["latestCommunityStoriesTotalNumber"]],"Community stories - Latest"]],1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["latestCommunityStories"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/stories/community/latest.hbs" },
    });
  }),
  define("frontend/templates/stories/community/student-work", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ECs6QL5U",
      block:
        '{"statements":[["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels","analyticsModelType"],[["helper",["action"],[["get",[null]],"studentCommunityStoriesPageLoaded"],null],["get",["studentCommunityStories"]],"story",["get",["studentCommunityStoriesQueryParams"]],12,24,["get",["studentCommunityStoriesPageToLoad"]],["get",["studentCommunityStoriesTotalNumber"]],"Community stories - Student"]],1]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["studentCommunityStories"]]],null,0]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/stories/community/student-work.hbs",
      },
    });
  }),
  define("frontend/templates/stories/search", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "urO39XTR",
      block:
        '{"statements":[["block",["promise-block"],null,[["promise","class"],[["get",["searchResults"]],"search-results"]],9]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","create your own story"]],"locals":[]},{"statements":[["text","    "],["open-element","div",[]],["static-attr","class","no-search-results"],["flush-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","Bummer! We couldn\'t find any stories matching "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["append",["unknown",["query"]],false],["close-element"],["text","â¦"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","try-something-else"],["flush-element"],["text","Try another search or "],["block",["link-to"],["stories.new"],null,0],["text","."],["close-element"],["text","\\n    "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":["story"]},{"statements":[["block",["each"],[["get",["communityStories"]]],null,2]],"locals":[]},{"statements":[["text","      "],["open-element","section",[]],["static-attr","class","community-stories"],["flush-element"],["text","\\n        "],["open-element","header",[]],["flush-element"],["text","\\n          "],["open-element","h2",[]],["flush-element"],["text","\\n            Community stories\\n            "],["open-element","small",[]],["static-attr","class","number-stories"],["flush-element"],["text","("],["append",["unknown",["communityStoriesNumberOfResults"]],false],["text",")"],["close-element"],["text","\\n          "],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n"],["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels","analyticsModelType"],[["helper",["action"],[["get",[null]],"communityStoriesPageLoaded"],null],["get",["communityStories"]],"story",["get",["communityStoriesQueryParams"]],["get",["numberOfCommunityStoriesFirstPage"]],24,["get",["communityStoriesPageToLoad"]],["get",["communityStoriesTotalNumber"]],"Community stories - Search"]],3],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          "],["open-element","div",[]],["static-attr","class","wrapper-button-show-all-sutori-stories"],["flush-element"],["text","\\n            "],["open-element","button",[]],["static-attr","class","button-show-all-sutori-stories"],["modifier",["action"],[["get",[null]],"showAllSutoriStories"]],["flush-element"],["text","\\n              Show all relevant Sutori stories\\n            "],["close-element"],["text","\\n          "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":["story"]},{"statements":[["text","      "],["open-element","section",[]],["dynamic-attr","class",["concat",["sutori-stories ",["helper",["if"],[["get",["showAllSutoriStories"]],"show-all-stories"],null]]]],["flush-element"],["text","\\n        "],["open-element","header",[]],["flush-element"],["text","\\n          "],["open-element","h2",[]],["flush-element"],["text","Sutori stories "],["open-element","small",[]],["static-attr","class","number-stories"],["flush-element"],["text","("],["append",["unknown",["sutoriStories","length"]],false],["text",")"],["close-element"],["close-element"],["text","\\n        "],["close-element"],["text","\\n\\n        "],["open-element","div",[]],["static-attr","class","search-results-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["shownSutoriStories"]]],null,6],["text","        "],["close-element"],["text","\\n\\n"],["block",["if"],[["get",["showShowAllSutoriStoriesButton"]]],null,5],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasSutoriStories"]]],null,7],["text","\\n"],["block",["if"],[["get",["hasCommunityStories"]]],null,4]],"locals":[]},{"statements":[["block",["if"],[["get",["hasSearchResults"]]],null,8,1]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/stories/search.hbs" },
    });
  }),
  define("frontend/templates/stories/sutori/index", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "F4iSdNP/",
      block:
        '{"statements":[["open-element","section",[]],["static-attr","class","sutori-stories"],["flush-element"],["text","\\n"],["block",["liquid-if"],[["get",["loadedFeaturedRow"]]],[["class"],["featured-unit-row"]],7],["text","\\n"],["block",["if"],[["helper",["permission-check"],["createStoryUnit",["get",[null]]],null]],null,3],["text","\\n"],["block",["infinite-scroll"],null,[["pageLoaded","models","modelName","queryParams","perPageOnFirstPage","perPage","pageToLoad","totalNumberOfModels","analyticsModelType"],[["helper",["action"],[["get",[null]],"storyUnitsPageLoaded"],null],["get",["storyUnits"]],"story-unit",["get",["storyUnitsQueryParams"]],3,6,["get",["storyUnitsPageToLoad"]],["get",["storyUnitsTotalNumber"]],"Story units"]],1],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["append",["helper",["story-unit-box"],null,[["storyUnit"],[["get",["storyUnit"]]]]],false],["text","\\n"]],"locals":["storyUnit"]},{"statements":[["block",["each"],[["get",["storyUnits"]]],null,0]],"locals":[]},{"statements":[["text","Create a unit"]],"locals":[]},{"statements":[["text","    "],["block",["link-to"],["stories.sutori.newUnit"],[["class","title"],["button-create-new-story-unit","Create a new unit"]],2],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-box"],null,[["story","class"],[["get",["randomFreeSutoriStory"]],"random-free-sutori-story-box"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["story-box"],null,[["story","class"],[["get",["storyOfTheMonth"]],"story-of-the-month-box"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["featured-unit-box"],null,[["unit"],[["get",["featuredUnit"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["hasFeaturedUnit"]]],null,6],["text","\\n"],["block",["if"],[["get",["hasStoryOfTheMonth"]]],null,5],["text","\\n"],["block",["if"],[["get",["hasRandomFreeSutoriStory"]]],null,4]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/stories/sutori/index.hbs" },
    });
  }),
  define("frontend/templates/story-display/-premium-message-foot", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "wPAxDpx4",
      block:
        '{"statements":[["block",["if"],[["get",["showPreviewMessage"]]],null,7],["text","\\n"],["block",["if"],[["get",["showNumberOfStudentStoriesLeft"]]],null,5]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Upgrade now\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","h3",[]],["flush-element"],["text","You have reached your limit of "],["append",["unknown",["numberOfFreeStudentStories"]],false],["text"," "],["append",["helper",["inflect"],["student story",["get",["numberOfFreeStudentStories"]]],null],false],["text","."],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","You will have to upgrade to see all new stories your students create."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","          You have "],["open-element","strong",[]],["flush-element"],["append",["unknown",["currentUser","numberOfFreeStudentStoriesLeft"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["story",["get",["currentUser","numberOfFreeStudentStoriesLeft"]]],null],false],["text"," left.\\n"]],"locals":[]},{"statements":[["text","          You only have "],["open-element","strong",[]],["flush-element"],["append",["unknown",["currentUser","numberOfFreeStudentStoriesLeft"]],false],["close-element"],["text"," "],["append",["helper",["inflect"],["story",["get",["currentUser","numberOfFreeStudentStoriesLeft"]]],null],false],["text"," left.\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","h3",[]],["flush-element"],["text","Upgrade for unlimited access to student stories!"],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","\\n        Sutori Basic gives you access to "],["append",["unknown",["numberOfFreeStudentStories"]],false],["text"," "],["append",["helper",["inflect"],["student story",["get",["numberOfFreeStudentStories"]]],null],false],["text",".\\n"],["block",["if"],[["get",["currentUser","isInPremiumWarningZone"]]],null,3,2],["text","      "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["dynamic-attr","class",["concat",["student-stories-left-foot ",["helper",["if"],[["get",["currentUser","isInPremiumWarningZone"]],"warning"],null]]]],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentUser","hasFreeStudentStoriesLeft"]]],null,4,1],["text","\\n"],["block",["call-to-action-upgrade"],null,[["origin"],["student-story"]],0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      Upgrade now\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","section",[]],["static-attr","class","only-premium-can-access"],["flush-element"],["text","\\n    "],["open-element","h3",[]],["flush-element"],["text","You will have to upgrade to see the rest of the story."],["close-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","The good news is it only takes a minute."],["close-element"],["text","\\n\\n"],["block",["call-to-action-upgrade"],null,[["origin"],["premium-sutori-story"]],6],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/story-display/-premium-message-foot.hbs",
      },
    });
  }),
  define("frontend/templates/story-display/-premium-message-head", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "9cGRZHen",
      block:
        '{"statements":[["block",["if"],[["get",["showPreviewMessage"]]],null,7],["text","\\n"],["block",["if"],[["get",["showNumberOfStudentStoriesLeft"]]],null,5]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      Upgrade now\\n"]],"locals":[]},{"statements":[["text","        You have reached your limit of "],["append",["unknown",["numberOfFreeStudentStories"]],false],["text"," "],["append",["helper",["inflect"],["student story",["get",["numberOfFreeStudentStories"]]],null],false],["text",". You will have to upgrade to see all new stories your students create.\\n"]],"locals":[]},{"statements":[["text","          You have "],["open-element","strong",[]],["flush-element"],["append",["unknown",["currentUser","numberOfFreeStudentStoriesLeft"]],false],["close-element"],["text"," left. Upgrade for unlimited access to student stories!\\n"]],"locals":[]},{"statements":[["text","          You only have "],["open-element","strong",[]],["flush-element"],["append",["unknown",["currentUser","numberOfFreeStudentStoriesLeft"]],false],["close-element"],["text"," left. Upgrade for unlimited access to student stories!\\n"]],"locals":[]},{"statements":[["text","        Sutori Basic gives you access to "],["append",["unknown",["numberOfFreeStudentStories"]],false],["text"," "],["append",["helper",["inflect"],["student story",["get",["numberOfFreeStudentStories"]]],null],false],["text",".\\n"],["block",["if"],[["get",["currentUser","isInPremiumWarningZone"]]],null,3,2]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["dynamic-attr","class",["concat",["premium-message-head ",["helper",["if"],[["get",["currentUser","isInPremiumWarningZone"]],"warning"],null]]]],["flush-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","\\n"],["block",["if"],[["get",["currentUser","hasFreeStudentStoriesLeft"]]],null,4,1],["text","    "],["close-element"],["text","\\n\\n"],["block",["call-to-action-upgrade"],null,[["origin"],["student-story"]],0],["text","  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      Upgrade now\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","div",[]],["static-attr","class","premium-message-head"],["flush-element"],["text","\\n    "],["open-element","p",[]],["flush-element"],["text","This is a preview of the story only. You have to upgrade to see the rest of the story."],["close-element"],["text","\\n\\n"],["block",["call-to-action-upgrade"],null,[["origin"],["premium-sutori-story"]],6],["text","  "],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName:
          "frontend/templates/story-display/-premium-message-head.hbs",
      },
    });
  }),
  define("frontend/templates/story-display/-story-toolbar", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "NBQ50hrE",
      block:
        '{"statements":[["append",["helper",["story-toolbar"],null,[["activateValidationErrors","deactivateValidationErrors","transitionToRoute","printStory","collaboratorsModified","schoolClassContext","story"],[["helper",["action"],[["get",[null]],"activateValidationErrors"],null],["helper",["action"],[["get",[null]],"deactivateValidationErrors"],null],["helper",["action"],[["get",[null]],"transitionToRoute"],null],["helper",["action"],[["get",[null]],"printStory"],null],["helper",["action"],[["get",[null]],"collaboratorsModified"],null],["get",["schoolClassContext"]],["get",["story"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/story-display/-story-toolbar.hbs",
      },
    });
  }),
  define("frontend/templates/story-item/-audio", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "SJgRIBO3",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["append",["helper",["editable-audio"],null,[["audioUploaded","audioDeleted","audioFile","isEditing","showErrors","errors"],[["helper",["action"],[["get",[null]],"audioUploaded"],null],["helper",["action"],[["get",[null]],"audioDeleted"],null],["get",["audioFile"]],["get",["isEditing"]],["get",["showValidationErrors"]],["get",["audioFileErrors"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["showContentEditableText"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","class","placeholder"],[true,["get",["isEditable"]],["get",["contentText"]],["get",["contentText","content"]],["get",["contentTextErrors"]],"audio-content","Insert an optional audio description..."]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-item/-audio.hbs" },
    });
  }),
  define("frontend/templates/story-item/-bullet", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "4FE9vf27",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","bullet"],["flush-element"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-item/-bullet.hbs" },
    });
  }),
  define("frontend/templates/story-item/-chapter-title", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "ScEPkbvg",
      block:
        '{"statements":[["open-element","h2",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["block",["collaboration-lock-wrapper"],null,[["lockedText","lockedByUser"],["is currently editing this heading",["get",["lockedByUser"]]]],2],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["partial","story-item/component-delete-item"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["partial","story-item/component-move-item"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["model","text","errors","placeholder","isEditing"],[["get",["model"]],["get",["model","heading"]],["get",["model","heading","errors"]],"Change the heading (optional)â¦",["get",["isEditable"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["canMoveItem"]]],null,1],["block",["if"],[["get",["canDeleteItem"]]],null,0]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/story-item/-chapter-title.hbs" },
    });
  }),
  define("frontend/templates/story-item/-comments-count", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ZKOHl/ru",
      block:
        '{"statements":[["open-element","button",[]],["dynamic-attr","class",["concat",["button-comments-count ",["helper",["if"],[["get",["isCommentsOpen"]],"active"],null]]]],["modifier",["action"],[["get",[null]],"toggleComments"]],["flush-element"],["text","\\n"],["block",["if"],[["get",["hasComments"]]],null,1,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["unknown",["commentButtonLabel"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["append",["unknown",["activeItemComments","length"]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-item/-comments-count.hbs" },
    });
  }),
  define("frontend/templates/story-item/-component-delete-item", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "oh1hKL4q",
      block:
        '{"statements":[["append",["helper",["async-button-with-confirmation"],null,[["action","name","disabled","question","popoverPosition"],[["helper",["action"],[["get",[null]],"deleteItem"],null],"delete-item",["get",["disableActionButtons"]],["get",["deleteItemQuestion"]],"top"]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/story-item/-component-delete-item.hbs",
      },
    });
  }),
  define("frontend/templates/story-item/-component-move-item", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "OR9B/EG5",
      block:
        '{"statements":[["append",["helper",["move-item"],null,[["startDraggingAnItem","moveItem","stopDraggingAnItem","register","disabled"],[["helper",["action"],[["get",[null]],"startDraggingAnItem"],null],["helper",["action"],[["get",[null]],"moveItem"],null],["helper",["action"],[["get",[null]],"stopDraggingAnItem"],null],["helper",["action"],[["get",[null]],"registerMoveItemComponent"],null],["get",["disableActionButtons"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/story-item/-component-move-item.hbs",
      },
    });
  }),
  define("frontend/templates/story-item/-didyouknow", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "CPqI8L9V",
      block:
        '{"statements":[["open-element","header",[]],["static-attr","class","header"],["static-attr","dir","ltr"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showComments"]]],null,0],["text","  "],["open-element","h3",[]],["flush-element"],["text","Did you know?"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["partial","story-item/editable-image"],["text","\\n\\n"],["text","  "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","showErrors","class","placeholder"],[true,["get",["isEditable"]],["get",["contentText"]],["get",["contentText","content"]],["get",["contentTextErrors"]],["get",["showValidationErrors"]],"didyouknow-content","Insert an amazing fact here..."]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["partial","story-item/comments-count"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/story-item/-didyouknow.hbs" },
    });
  }),
  define("frontend/templates/story-item/-editable-image", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "omX2nSaO",
      block:
        '{"statements":[["block",["if"],[["get",["showEditableImage"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","imageFile","isEditing","isEditable","sizes","overflowPolicy","maxHeight","withCaption","showErrors","errors"],[["helper",["action"],[["get",[null]],"imageUploaded"],null],["helper",["action"],[["get",[null]],"imageDeleted"],null],["get",["model","imageFile"]],["get",["isEditing"]],["get",["isEditable"]],["get",["imageSizes"]],"contain",["get",["imageMaxHeight"]],true,["get",["showValidationErrors"]],["get",["imageFileErrors"]]]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-item/-editable-image.hbs" },
    });
  }),
  define("frontend/templates/story-item/-forum", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Pd8PGqCO",
      block:
        '{"statements":[["open-element","header",[]],["static-attr","class","header"],["static-attr","dir","ltr"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showComments"]]],null,0],["text","  "],["open-element","h3",[]],["flush-element"],["text","Forum"],["close-element"],["text","\\n"],["close-element"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","showErrors","class","placeholder"],[true,["get",["isEditable"]],["get",["contentText"]],["get",["contentText","content"]],["get",["contentTextErrors"]],["get",["showValidationErrors"]],"forum-content","Insert the Forum question here..."]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["partial","story-item/comments-count"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/story-item/-forum.hbs" },
    });
  }),
  define("frontend/templates/story-item/-image", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "3ML2mOWo",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["partial","story-item/editable-image"],["text","\\n\\n"],["block",["if"],[["get",["showContentEditableText"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","class","placeholder"],[true,["get",["isEditable"]],["get",["contentText"]],["get",["contentText","content"]],["get",["contentTextErrors"]],"image-content","Insert an optional image description..."]]],false],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/story-item/-image.hbs" },
    });
  }),
  define("frontend/templates/story-item/-quiz-question-matching", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "n7BAX8Ta",
      block:
        '{"statements":[["partial","story-item/quiz-question/header"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["partial","story-item/editable-image"],["text","\\n\\n"],["text","  "],["partial","story-item/quiz-question/question"],["text","\\n\\n"],["text","  "],["append",["helper",["quiz-question-matching-pairs"],null,[["quizQuestionItem","imageMaxHeight","showErrors","isEditable","isEditing"],[["get",["model"]],["get",["imageMaxHeight"]],["get",["showValidationErrors"]],["get",["isEditable"]],["get",["isEditing"]]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: {
        moduleName: "frontend/templates/story-item/-quiz-question-matching.hbs",
      },
    });
  }),
  define("frontend/templates/story-item/-quiz-question-multiple-choice", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "bOrF/cYY",
      block:
        '{"statements":[["partial","story-item/quiz-question/header"],["text","\\n\\n"],["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["partial","story-item/editable-image"],["text","\\n\\n"],["text","  "],["partial","story-item/quiz-question/question"],["text","\\n\\n"],["text","  "],["append",["helper",["quiz-question-multiple-choice-answers"],null,[["quizQuestionItem","imageMaxHeight","showErrors","isEditable","isEditing"],[["get",["model"]],["get",["imageMaxHeight"]],["get",["showValidationErrors"]],["get",["isEditable"]],["get",["isEditing"]]]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":true}',
      meta: {
        moduleName:
          "frontend/templates/story-item/-quiz-question-multiple-choice.hbs",
      },
    });
  }),
  define("frontend/templates/story-item/-quote", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "xTVVYNo2",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n  "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","showErrors","isSimulation","class","placeholder"],[["get",["withNotes"]],["get",["isEditable"]],["get",["contentText"]],["get",["contentText","content"]],["get",["contentTextErrors"]],["get",["showValidationErrors"]],["get",["isSimulation"]],"quote-content","Insert the text here..."]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-item/-quote.hbs" },
    });
  }),
  define("frontend/templates/story-item/-video", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "wRZgVPiT",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","story-item-content"],["flush-element"],["text","\\n"],["text","  "],["append",["helper",["editable-video"],null,[["videoUploaded","videoDeleted","video","isEditing","showErrors","errors"],[["helper",["action"],[["get",[null]],"videoUploaded"],null],["helper",["action"],[["get",[null]],"videoDeleted"],null],["get",["model","video"]],["get",["isEditing"]],["get",["showValidationErrors"]],["get",["videoErrors"]]]]],false],["text","\\n\\n"],["block",["if"],[["get",["showContentEditableText"]]],null,0],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","class","placeholder"],[true,["get",["isEditable"]],["get",["contentText"]],["get",["contentText","content"]],"video-content","Insert an optional video description..."]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-item/-video.hbs" },
    });
  }),
  define("frontend/templates/story-item/quiz-question/-header", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "Gd03qb5r",
      block:
        '{"statements":[["open-element","header",[]],["static-attr","class","header"],["static-attr","dir","ltr"],["flush-element"],["text","\\n"],["block",["if"],[["get",["showComments"]]],null,0],["text","  "],["open-element","h3",[]],["flush-element"],["text","Quiz question"],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["partial","story-item/comments-count"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: {
        moduleName: "frontend/templates/story-item/quiz-question/-header.hbs",
      },
    });
  }),
  define("frontend/templates/story-item/quiz-question/-question", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "+MosK6/u",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","quiz-question-question"],["flush-element"],["text","\\n"],["text","  "],["append",["helper",["editable-text"],null,[["withNotes","isEditing","model","text","errors","showErrors","class","placeholder"],[true,["get",["isEditable"]],["get",["quizQuestionText"]],["get",["quizQuestionText","content"]],["get",["quizQuestionTextErrors"]],["get",["showValidationErrors"]],"quiz-question","Insert the question here..."]]],false],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/story-item/quiz-question/-question.hbs",
      },
    });
  }),
  define("frontend/templates/story-unit/index", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "M+YTH9Dc",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","div",[]],["dynamic-attr","class",["concat",["page-story-unit ",["helper",["if"],[["get",["hasActionsSidebar"]],"has-actions-sidebar"],null]]]],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","left-column"],["flush-element"],["text","\\n    "],["open-element","section",[]],["static-attr","class","story-unit"],["flush-element"],["text","\\n"],["text","      "],["append",["helper",["editable-image"],null,[["imageUploaded","imageDeleted","isEditing","imageFile","labelButtonUpload","sizes","overflowPolicy","class"],[["helper",["action"],[["get",[null]],"bannerUploaded"],null],["helper",["action"],[["get",[null]],"bannerDeleted"],null],["get",["isEditing"]],["get",["storyUnit","bannerImageFile"]],"Add a banner image",["get",["bannerSizes"]],"cover","story-unit-banner"]]],false],["text","\\n\\n"],["text","      "],["append",["helper",["story-unit-box-header"],null,[["storyUnit","isEditing"],[["get",["model"]],["get",["isEditing"]]]]],false],["text","\\n\\n"],["text","      "],["append",["helper",["stories-section"],null,[["storiesPromise","createNewAction","sortBy","overviewMode"],[["get",["storiesPromise"]],["helper",["if"],[["helper",["permission-check"],["createSutoriStory",["get",[null]]],null],"createNewStory"],null],["get",["sortStoriesBy"]],true]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","right-column"],["flush-element"],["text","\\n"],["block",["if"],[["get",["canPublish"]]],null,4],["text","\\n"],["block",["if"],[["get",["canDelete"]]],null,3],["text","\\n"],["block",["if"],[["get",["showSubscriptionBox"]]],null,2],["text","  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          You have to upgrade to use Sutori\'s units of stories with your students. These are CCSS-aligned and come with robust lesson plans.\\n"]],"locals":[]},{"statements":[["block",["sutori-subscription-box"],null,null,0]],"locals":[]},{"statements":[["block",["sticky-box"],null,null,1]],"locals":[]},{"statements":[["text","      "],["append",["helper",["async-button-with-confirmation"],null,[["action","name","label","question","popoverPosition"],[["helper",["action"],[["get",[null]],"deleteStoryUnit"],null],"delete-unit","Delete unit","Are you sure you want to delete this unit?","top"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["append",["helper",["async-button-with-confirmation"],null,[["action","name","label","question","popoverPosition"],[["helper",["action"],[["get",[null]],"publishStoryUnit"],null],"publish-unit","Publish unit","Are you sure you want to publish this unit? You can\'t unpublish a unit.","bottom"]]],false],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/story-unit/index.hbs" },
    });
  }),
  define("frontend/templates/story", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "47DK0uY9",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-story"],["flush-element"],["text","\\n\\n"],["text","  "],["partial","story/can-not-print-message"],["text","\\n\\n"],["block",["if"],[["get",["isNotEmbedded"]]],null,0],["text","\\n"],["text","  "],["append",["helper",["story-display"],null,[["transitionToRoute","story","schoolClassContext","showComments"],[["helper",["action"],[["get",[null]],"transitionToRoute"],null],["get",["model"]],["get",["schoolClassContext"]],["get",["showComments"]]]]],false],["text","\\n\\n"],["text","  "],["partial","story/can-not-print-message"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","    "],["partial","interactive-tour"],["text","\\n"]],"locals":[]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/story.hbs" },
    });
  }),
  define("frontend/templates/story/-can-not-print-message", [
    "exports",
  ], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "oAh7R1j3",
      block:
        '{"statements":[["block",["if"],[["get",["session","currentUser","canNotPrint"]]],null,0]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","  "],["open-element","p",[]],["static-attr","class","can-not-print-message"],["flush-element"],["append",["unknown",["canNotPrintMessage"]],false],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: {
        moduleName: "frontend/templates/story/-can-not-print-message.hbs",
      },
    });
  }),
  define("frontend/templates/student-registration", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "V0roOdKP",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-student-registration"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,null,3],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["single-sign-on-buttons"],null,[["loginSucceeded","loginFailed","labelPrefix","labelWhileSigningIn","providers","userType"],[["helper",["route-action"],["backendLoginSucceeded"],null],["helper",["route-action"],["backendLoginFailed"],null],"Sign up with","Signing up",["get",["singleSignOnProviders"]],"student"]]],false],["text","\\n\\n        "],["append",["unknown",["line-text-separator"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","isGuestUser"]]],null,0],["text","\\n      "],["append",["helper",["registration-form"],null,[["registrationSucceeded","userType"],[["helper",["perform"],[["get",["loginAndRedirectTask"]]],null],"student"]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Complete"],["close-element"],["text"," with your details\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,2],["text","\\n"],["block",["p","body"],null,null,1]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/student-registration.hbs" },
    });
  }),
  define("frontend/templates/student", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "/fI804wY",
      block:
        '{"statements":[["append",["unknown",["bread-crumbs"]],false],["text","\\n\\n"],["open-element","article",[]],["static-attr","class","page-student"],["flush-element"],["text","\\n  "],["open-element","div",[]],["static-attr","class","left-column"],["flush-element"],["text","\\n    "],["open-element","section",[]],["static-attr","class","stories"],["flush-element"],["text","\\n      "],["open-element","header",[]],["flush-element"],["text","\\n        "],["open-element","h2",[]],["static-attr","class","student-name title"],["flush-element"],["text","\\n          "],["open-element","span",[]],["static-attr","class","full-name"],["flush-element"],["append",["unknown",["fullName"]],false],["close-element"],["text","\\n          "],["open-element","small",[]],["static-attr","class","username"],["flush-element"],["text","("],["append",["unknown",["username"]],false],["text",")"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["open-element","div",[]],["static-attr","class","actions"],["flush-element"],["text","\\n          "],["append",["helper",["share-stories-button"],null,[["selectedStories","schoolClass"],[["get",["selectedStories"]],["get",["schoolClass"]]]]],false],["text","\\n          "],["append",["helper",["modal-box"],null,[["action","title","formComponentPath","model","schoolClassContext","isActive","closeOnClickOutside"],[["helper",["action"],[["get",[null]],"studentRemoved"],null],"Edit student","modals/student-edit",["get",["model"]],["get",["schoolClass"]],["get",["modalVisible"]],false]]],false],["text","\\n          "],["open-element","button",[]],["static-attr","class","button-edit-student"],["modifier",["action"],[["get",[null]],"editStudent"]],["flush-element"],["text","Edit student"],["close-element"],["text","\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["storiesPromise"]]]],10],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","div",[]],["static-attr","class","right-column"],["flush-element"],["text","\\n"],["text","    "],["open-element","aside",[]],["static-attr","class","other-students"],["flush-element"],["text","\\n      "],["open-element","header",[]],["flush-element"],["text","\\n        "],["open-element","h2",[]],["static-attr","class","title"],["flush-element"],["text","Other students"],["close-element"],["text","\\n      "],["close-element"],["text","\\n\\n"],["block",["promise-block"],null,[["promise"],[["get",["studentsPromise"]]]],3],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","                "],["append",["unknown",["student","fullName"]],false],["text","\\n"]],"locals":[]},{"statements":[["text","            "],["open-element","li",[]],["flush-element"],["text","\\n"],["block",["link-to"],["student",["get",["student"]],["helper",["query-params"],null,[["schoolClassId"],[["get",["schoolClassId"]]]]]],null,0],["text","            "],["close-element"],["text","\\n"]],"locals":["student"]},{"statements":[["block",["each"],[["get",["orderedOtherStudents"]]],null,1]],"locals":[]},{"statements":[["block",["expandable-list"],null,[["focusedElement","totalNumberOfElements","initialNumberOfElements","maximalNumberOfElements"],[["get",["model"]],["get",["orderedOtherStudents","length"]],5,8]],2]],"locals":[]},{"statements":[["text","          "],["open-element","p",[]],["static-attr","class","empty"],["flush-element"],["text","This student hasn\'t submitted any stories yet."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","                    "],["append",["helper",["story-title"],null,[["story"],[["get",["presentableStory"]]]]],false],["text","\\n"]],"locals":[]},{"statements":[["text","                "],["open-element","td",[]],["flush-element"],["text","\\n"],["block",["story-link"],null,[["story","schoolClass"],[["get",["presentableStory","model"]],["get",["schoolClass"]]]],5],["text","                "],["close-element"],["text","\\n                "],["open-element","td",[]],["flush-element"],["append",["unknown",["presentableStory","sharedWith"]],false],["close-element"],["text","\\n                "],["open-element","td",[]],["flush-element"],["append",["unknown",["presentableStory","updatedAt"]],false],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["selectable-story-row"],null,[["story","schoolClass","toggledSelection"],[["get",["presentableStory","model"]],["get",["schoolClass"]],"changedStorySelection"]],6]],"locals":["presentableStory"]},{"statements":[["block",["each"],[["get",["sortedPresentableStories"]]],null,7]],"locals":[]},{"statements":[["block",["sortable-table"],null,[["columns","sortBy","selectable"],[["get",["storiesColumns"]],["get",["sortStoriesBy"]],true]],8]],"locals":[]},{"statements":[["block",["if"],[["get",["hasStories"]]],null,9,4]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/student.hbs" },
    });
  }),
  define("frontend/templates/styleguide", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "bvNPMZ7Q",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-styleguide"],["flush-element"],["text","\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h1",[]],["static-attr","class","sg-title-big"],["flush-element"],["text","Sutori Styleguide"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-big"],["flush-element"],["text","\\n        As the Sutori website and app grow, it will become increasingly important to maintain a consistent style and visual language across all areas of the product."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        To do this, we have built the following styleguide to document reusable components for faster product development.\\n      "],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-big"],["flush-element"],["text","\\n        This styleguide reflects the current state of all components the product is currently using. For this reason it should always be maintained up to date should new components arise.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Colours"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        The identity is a combination of 5 strong colours + a handful of grayscale values. No other colour should be used unless it\'s explicitely specified in a design.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-1"],["flush-element"],["text","\\n          #2DACFE"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $blue\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-2"],["flush-element"],["text","\\n          #2BE78C"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $green\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third sg-grid-omega"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-3"],["flush-element"],["text","\\n          #FFE438"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $yellow\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-4"],["flush-element"],["text","\\n          #FF4C16"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $red\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-5"],["flush-element"],["text","\\n          #A962FF"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $violet\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-6"],["flush-element"],["text","\\n          #43474C"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $black\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-7"],["flush-element"],["text","\\n          #6C6C6C"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $gray-darker\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third sg-grid-omega"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-8"],["flush-element"],["text","\\n          #898F93"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $gray-aluminium\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-9"],["flush-element"],["text","\\n          #D7DCE3"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $gray\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-10"],["flush-element"],["text","\\n          #E4E7EC"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $gray-solitude\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third sg-grid-omega"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-11"],["flush-element"],["text","\\n          #F7F8F9"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $gray-lighter\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--third"],["flush-element"],["text","\\n        "],["open-element","p",[]],["static-attr","href","#"],["static-attr","class","sg-colour-12"],["flush-element"],["text","\\n          #FFFFFF"],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n          $white\\n        "],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Text sizes"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        You can choose between 6 text sizes."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        The biggest text sizes should be used as a way to quickly find the endpoints when scanning the page. The smaller ones are used for bigger chunks of text.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-1"],["flush-element"],["text","The quick brown fox jumps over the lazy dog"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-2"],["flush-element"],["text","The quick brown fox jumps over the lazy dog"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-3"],["flush-element"],["text","The quick brown fox jumps over the lazy dog"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-4"],["flush-element"],["text","The quick brown fox jumps over the lazy dog"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-5"],["flush-element"],["text","The quick brown fox jumps over the lazy dog"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text-6"],["flush-element"],["text","The quick brown fox jumps over the lazy dog"],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Buttons"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        We only have one button size available. When two buttons have to be used next to each other, play with the contrast (colour, intensity,...) to make it clear which button is primary.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--half"],["flush-element"],["text","\\n        "],["open-element","a",[]],["static-attr","href","#"],["static-attr","class","sg-button-1"],["flush-element"],["text","A single button"],["close-element"],["text","\\n      "],["close-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-grid--half"],["flush-element"],["text","\\n        "],["open-element","a",[]],["static-attr","href","#"],["static-attr","class","sg-button-2"],["flush-element"],["text","Primary"],["close-element"],["text","\\n        "],["open-element","a",[]],["static-attr","href","#"],["static-attr","class","sg-button-3"],["flush-element"],["text","Secondary"],["close-element"],["text","\\n        "],["open-element","a",[]],["static-attr","href","#"],["static-attr","class","sg-button-2 is-loading"],["flush-element"],["text","Secondary"],["close-element"],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Filters"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","sg-filters"],["flush-element"],["text","\\n        "],["open-element","ul",[]],["static-attr","class","sg-filters-list"],["flush-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","filter is-active"],["flush-element"],["text","Social Studies"],["close-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","filter"],["flush-element"],["text","Sciences"],["close-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","filter"],["flush-element"],["text","Mathematics"],["close-element"],["text","\\n          "],["open-element","li",[]],["static-attr","class","filter"],["flush-element"],["text","History"],["close-element"],["text","\\n        "],["close-element"],["text","\\n        "],["append",["unknown",["filters-search"]],false],["text","\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Story box"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        The border of the story card isn\'t mandatory. You should use it on white backgrounds but forget about it on coloured backgrounds.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container sg-stories"],["flush-element"],["text","\\n"],["block",["each"],[["get",["stories"]]],null,19],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Heading"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        The heading is used at the top of the page and helps the user remember what page he\'s curently on."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        On rare occasions, we can increase the size of the text in the paragraph.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n"],["block",["heading-display"],null,[["class"],["sg-heading--1"]],18],["text","\\n"],["block",["heading-display"],null,[["class"],["sg-heading--2"]],15],["text","  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Team"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n"],["block",["each"],[["get",["teamMembers"]]],null,12],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Secondary feature"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["All Media","/images/styleguide/feature-secondary-1.svg"]],11],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Itâs Free","/images/styleguide/feature-secondary-2.svg"]],10],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Share","/images/styleguide/feature-secondary-3.svg"]],9],["text","\\n"],["block",["feature-secondary"],null,[["title","icon"],["Anytime, Anywhere","/images/styleguide/feature-secondary-4.svg"]],8],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Feature block"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n"],["block",["feature-block"],null,[["title","icon"],["Engage a wider audience","https://d1ox703z8b11rg.cloudfront.net/images/styleguide/feature-block-695d9bf67718abea21ed4e332e38e280.svg"]],7],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","FAQ"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n"],["block",["faq-item"],null,[["question"],["What cards do you accept?"]],6],["text","\\n"],["block",["faq-item"],null,[["question"],["How long does my subscription last"]],5],["text","\\n"],["block",["faq-item"],null,[["question"],["Can I pay via postal order or check?"]],4],["text","\\n"],["block",["faq-item"],null,[["question"],["Can I cancel my subscription?"]],3],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Featuring image"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["append",["helper",["featuring-image"],null,[["image"],["https://d1ox703z8b11rg.cloudfront.net/images/styleguide/featuring-image-b8f9732912d7d9ae61b58980be8e1ae9.jpg"]]],false],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Plans"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["append",["helper",["subscription-plans"],null,[["showFreePlan"],[true]]],false],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Flash"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        The flash component can be used to put an emphasis on any kind of content. It might be a blog post, a page on the website, a new feature, an external page,...\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["append",["unknown",["flash-education"]],false],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Partners"],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","div",[]],["static-attr","class","partners"],["flush-element"],["text","\\n"],["block",["pro-partner"],null,[["logoSrc","logoAlt","class"],["/images/styleguide/bbc-travel.svg","Logo of BBC Travel","bbc"]],2],["text","\\n"],["block",["pro-partner"],null,[["logoSrc","logoAlt","class"],["/images/styleguide/abc.svg","Logo of ABC","abc"]],1],["text","\\n"],["block",["pro-partner"],null,[["logoSrc","logoAlt","class"],["/images/styleguide/uconnect.svg","Logo of uConnect","uconnect"]],0],["text","      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","section",[]],["static-attr","class","sg-section"],["flush-element"],["text","\\n    "],["open-element","div",[]],["static-attr","class","sg-container"],["flush-element"],["text","\\n      "],["open-element","h2",[]],["static-attr","class","sg-title"],["flush-element"],["text","Footing"],["close-element"],["text","\\n      "],["open-element","p",[]],["static-attr","class","sg-text"],["flush-element"],["text","\\n        The footing is used as the last call to action of the page. It should consist of an intriguing sentence and a button.\\n      "],["close-element"],["text","\\n    "],["close-element"],["text","\\n\\n    "],["append",["unknown",["footing-display"]],false],["text","\\n  "],["close-element"],["text","\\n"],["close-element"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","          uConnect, a career content management system, uses Sutori to help onboard its clients.\\n"]],"locals":[]},{"statements":[["text","          Journalists from ABC have been using Sutori as a new way to engage audiences on live TV.\\n"]],"locals":[]},{"statements":[["text","          Sutoriâs slick design and ease of use convinced BBC Travel to licence our software.\\n"]],"locals":[]},{"statements":[["text","        You may cancel your subscription at anytime by e-mailing us at "],["append",["unknown",["email-sales"]],false],["text",", but we can only issue a refund within the first 15 days from the date of purchase.\\n"]],"locals":[]},{"statements":[["text","        Yes of course. Please first send us an email at "],["append",["unknown",["email-sales"]],false],["text",".\\n"]],"locals":[]},{"statements":[["text","        Any subscription lasts one year from the date of purchase.\\n"]],"locals":[]},{"statements":[["text","        We accept Visa, Mastercard, American Express, JCB, Discover and Diners Club.\\n"]],"locals":[]},{"statements":[["text","        Tired of boring old presentations? Businesses love this new and creative way to present information. Email "],["append",["unknown",["email-sales"]],false],["text"," for info on our pricing for unbranded stories.\\n"]],"locals":[]},{"statements":[["text","        Sutori works on all devices, all you need is an internet connection.\\n"]],"locals":[]},{"statements":[["text","        Share easily via email or on social media. Embed stories into any website.\\n"]],"locals":[]},{"statements":[["text","        Create & share projects all for free.\\n"]],"locals":[]},{"statements":[["text","        Add images, videos, audio and quiz questions to bring any topic to life.\\n"]],"locals":[]},{"statements":[["text","        "],["append",["helper",["team-member"],null,[["teamMember"],[["get",["teamMember"]]]]],false],["text","\\n"]],"locals":["teamMember"]},{"statements":[["text","        Strive for simple and elegant solutions."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        Respect your peers."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        Speak up and listen when others do."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        Trust and be trustworthy."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        Our community is bigger than just us."],["open-element","br",[]],["flush-element"],["close-element"],["text","\\n        Love is what makes us great.\\n"]],"locals":[]},{"statements":[["text","        About\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,null,14],["text","\\n"],["block",["h","paragraph"],null,null,13]],"locals":["h"]},{"statements":[["text","        Sutori is in public beta, sign up today.\\n"]],"locals":[]},{"statements":[["text","        Something for everyone\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,null,17],["text","\\n"],["block",["h","paragraph"],null,null,16]],"locals":["h"]},{"statements":[["text","        "],["append",["helper",["story-box"],null,[["story"],[["get",["story"]]]]],false],["text","\\n"]],"locals":["story"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/styleguide.hbs" },
    });
  }),
  define("frontend/templates/subscription-plan/-body", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "XeQQ49XL",
      block:
        '{"statements":[["open-element","header",[]],["static-attr","class","subscription-plan-header"],["flush-element"],["text","\\n  "],["open-element","h3",[]],["static-attr","class","subscription-plan__title"],["flush-element"],["append",["unknown",["plan","title"]],false],["close-element"],["text","\\n  "],["open-element","p",[]],["static-attr","class","subscription-plan__price"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","subscription-plan__price-amount"],["flush-element"],["text","$"],["append",["unknown",["plan","price"]],false],["close-element"],["text","\\n    / year\\n  "],["close-element"],["text","\\n"],["block",["if"],[["get",["plan","hasProratedPrice"]]],null,6],["close-element"],["text","\\n"],["open-element","div",[]],["static-attr","class","subscription-plan-information"],["flush-element"],["text","\\n  "],["open-element","ul",[]],["static-attr","class","subscription-plan__list"],["flush-element"],["text","\\n    "],["yield","default"],["text","\\n  "],["close-element"],["text","\\n"],["close-element"],["text","\\n"],["block",["if"],[["get",["showFooter"]]],null,5]],"locals":[],"named":[],"yields":["default"],"blocks":[{"statements":[["text","        Start using Sutori\\n      "]],"locals":[]},{"statements":[["block",["if"],[["get",["session","isGuestUser"]]],null,0]],"locals":[]},{"statements":[["text","        "],["append",["unknown",["buttonLabel"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["isSelectable"]]],null,2,1]],"locals":[]},{"statements":[["text","        Current plan\\n"]],"locals":[]},{"statements":[["text","  "],["open-element","footer",[]],["static-attr","class","subscription-plan-footer"],["flush-element"],["text","\\n    "],["open-element","span",[]],["static-attr","class","subscription-plan__button"],["flush-element"],["text","\\n"],["block",["if"],[["get",["isCurrentPlan"]]],null,4,3],["text","    "],["close-element"],["text","\\n  "],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","    "],["open-element","p",[]],["static-attr","class","subscription-plan__prorated-amount"],["flush-element"],["text","$"],["append",["unknown",["plan","proratedPrice"]],false],["text"," now"],["close-element"],["text","\\n    "],["open-element","p",[]],["static-attr","class","subscription-plan__prorated-explanation"],["flush-element"],["text","This amount is calculated depending on the remaining days of your Premium subscription."],["close-element"],["text","\\n"]],"locals":[]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/subscription-plan/-body.hbs" },
    });
  }),
  define("frontend/templates/teacher-registration", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "t2DkQev5",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-teacher-registration"],["flush-element"],["text","\\n\\n"],["block",["page-for-registration"],null,null,2],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","        "],["append",["helper",["single-sign-on-buttons"],null,[["loginSucceeded","loginFailed","labelPrefix","labelWhileSigningIn","providers","userType"],[["helper",["route-action"],["backendLoginSucceeded"],null],["helper",["route-action"],["backendLoginFailed"],null],"Sign up with","Signing up",["get",["singleSignOnProviders"]],"teacher"]]],false],["text","\\n\\n        "],["append",["unknown",["line-text-separator"]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["if"],[["get",["session","isGuestUser"]]],null,0],["text","\\n      "],["append",["helper",["registration-form"],null,[["registrationSucceeded","userType"],[["helper",["perform"],[["get",["loginAndRedirectTask"]]],null],"teacher"]]],false],["text","\\n"]],"locals":[]},{"statements":[["block",["p","body"],null,null,1]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/teacher-registration.hbs" },
    });
  }),
  define("frontend/templates/terms-of-use", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "b4DM3Tu7",
      block:
        '{"statements":[["open-element","div",[]],["static-attr","class","page-terms-of-use"],["flush-element"],["text","\\n"],["block",["heading-display"],null,null,3],["text","\\n  "],["open-element","p",[]],["flush-element"],["text","Effective Date of the Agreement is "],["open-element","time",[]],["static-attr","datetime","2016-11-19"],["flush-element"],["text","November 19th, 2016."],["close-element"],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","These Terms of Service (âTermsâ) are a contract between you and HSTRY LTD. (dba as Sutori). They govern your use of Sutoriâs sites, services, products, and content (âServicesâ)."],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","By using Sutori, you agree to these Terms. If you do not agree to any of the Terms, you cannot use Sutori."],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","By using Sutori, you agree to let Sutori collect and use information as detailed in our "],["block",["link-to"],["privacyPolicy"],null,1],["text",". If you are outside the United States, you consent to letting Sutori transfer, store, and process your information (including your personal information and content) in and out of the United States."],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","We are free to adapt these Terms at any time. If a change is made, we will let you know by email before they take effect. By using Sutori on or after that effective date, you agree to the new Terms. If you do not agree to them, you should delete your account before they take effect, otherwise your use of the site and content will be subject to the new Terms."],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Who owns your content"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You own the rights to the content and stories you create and post on Sutori."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","By posting content on Sutori, you give us a nonexclusive license to publish it on Sutori, including anything reasonably related to publishing it (like storing, displaying, formatting, and distributing it)."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We may also use your content to promote Sutori, including its products and content. We will never sell your content to third parties without your explicit permission."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Responsibility of posting content"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You are responsible for the content you post on Sutori. As a creator, you assume all risks related to it including intellectual property claims and other legal rights."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You have the right to un-publish any work you have created which is publicly available. You also have the right to delete any of your stories and your account. If you wish to delete your account, please email "],["append",["unknown",["email-help"]],false],["text"," and we will process deleting your account. Please note that it may take up to 7 days to remove your account."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You are welcome to post content on Sutori that has been published elsewhere provided you have the rights you need to do so."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We have the right to remove any content that has copyrighted information and we have been issued with a takedown notice. If you copy a story and re-use a story which contains copyrighted material, both stories will be taken down."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We have the right to remove any content you post for any reason."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","When you publicly share a story, your name will be made public unless youâre under 13 years old. If you give your email address upon registration, that will remain private."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We guarantee that your email will not be used for spam or be sold onto third-parties. It is purely used for communication purposes between Sutori and you. You may unsubscribe from Sutori\'s newsletters and email communication at any time through your profile page on "],["block",["link-to"],["index"],null,0],["text","."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Community guidelines"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","If you make your story and content public, you are effectively saying âYes, I want to be part of this communityâ. As Sutori allows anyone to copy your resource and modify/edit for their needs, users will be able to add pictures, text, video, quiz questions and, in some cases, translate it into their native language. Please note that, as the author of the content, you will always receive credit and all content is linked back to the original piece."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You understand that material made available by Sutori is a product of a community effort and does not necessarily represent the views of Sutori and its staff. Sutori assumes no responsibility for the accuracy, suitability, or completeness of any content provided."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Content contributed to Sutori should be relevant to the subject scope of Sutori and our services. Content may not be illegal, obscene, defamatory, threatening, infringing of intellectual property rights, invasive of privacy or otherwise injurious or objectionable."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You understand that Sutori does not and cannot review all material made available through websites linked or linking to any part of the Sutori website. You also understand that no such linking implies in any way that Sutori endorses or is affiliated with any third-party website. You agree that Sutori bears no responsibility or liability for any content accessed or harm caused from any third-party website."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","As we are ultimately responsible for everything which appears on this site, all actions and decisions taken by our moderators are final. Unfortunately, the growing quantity of user content on the Sutori website means that we can\'t enter into correspondence regarding specific moderation activity, although all correspondence will be read."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","If you have suggestions or questions about any aspect of community participation on the Sutori website, you can write to "],["append",["unknown",["email-info"]],false],["text","."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Please mark all queries clearly in the subject line (e.g. Question about story on Napoleon) and share the link for us to easily flag inappropriate content."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Copyright complaints"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["text","If you are a copyright owner and you believe that your copyrighted materials have been used in a way that constitutes copyright infringement, please see our Privacy Policy for more information."],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Registering an account with Sutori"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","To utilize Sutori and our Services, or certain portions thereof, you may be required to complete a registration process and establish an account with Sutori. You represent and warrant that all information provided by you to Sutori is current, accurate, and complete, and that you will maintain the accuracy and completeness of this information on a prompt, timely basis."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You agree not to provide false information during the registration process and you acknowledge and understand that providing false information is a violation of these Terms of Use."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Sutori for Education"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","For our educational product, teachers need to sign up on the site using their name and email address upon which their information will be verified. Once a teacher registration has been verified, a teacher can create a \\"classroom\\" and invite their students to join the \\"classroom\\" on the Sutori platform. Students will be given an access code which will enable them to connect to the classroom created by their teacher. Students will not need to divulge their email addresses to Sutori."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","If you are using Sutori for Education and you create a classroom, please note that everything you set up with your students remains private."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Childrenâs privacy & COPPA compliance"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We take student privacy very seriously at Sutori and that is why we are fully COPPA compliant for students under the age of 13 provided the studentâs school, district and/or teacher has agreed to obtain parental consent for that child to use Sutoriâs services. We only use personal student information to benefit the learning environment for students and teachers. We do not pass that data onto third parties."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Please note that no ads will be displayed for students through Sutoriâs Education platform."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Please note that social media elements such as sharing or follow buttons are disabled for all student accounts under the age of 13."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","When the teacher chooses to make the work of her students public, we will not display the full name of the student but only his first name and the first letter of his or her last name. For instance, \\"John Doe\\" will become \\"John D\\"."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","The "],["open-element","a",[]],["static-attr","href","https://www.ftc.gov/tips-advice/business-center/guidance/complying-coppa-frequently-asked-questions"],["flush-element"],["text","Children\'s Online Privacy and Protection Act"],["close-element"],["text"," (âCOPPAâ) requires that online service providers obtain parental consent before they collect personally identifiable information online from children who are under 13."],["close-element"],["text","\\n\\n\\n  "],["open-element","p",[]],["flush-element"],["text","If you are a student under 13, please do not send any personal information about yourself to us if your school, district, and/or teacher has not obtained this prior consent from your parent or guardian, and please do not send any personal information other than what we request from you in connection with the Services. If we learn we have collected personal information from a student under 13 without parental consent being obtained by his or her school, district, and/or teacher, or if we learn a student under 13 has provided us personal information beyond what we request from him or her, we will delete that information as quickly as possible. If you believe that a student under 13 may have provided us personal information in violation of this paragraph, please contact us at "],["append",["unknown",["email-info"]],false],["text","."],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","If you are a school, district, or teacher, you represent and warrant that you are solely responsible for complying with COPPA, meaning that you must obtain advance written consent from all parents or guardians whose children under 13 will be accessing the Services. An equally valid way for schools, districts and teachers to comply with COPPA is to undertake not to enter in personally identifiable information (PII) for students under thirteen. Concretely this means you may use unidentifiable usernames, personal information and names when registering accounts for students under the age of thirteen."],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","You are responsible for understanding how any Publisher Software that you install on behalf of yourself or other users may collect and use information of users of Sutoriâs Services. When obtaining consent, you must provide parents and guardians with our Privacy Policy. You must keep all consents on file and provide them to us if we request them. If you are a teacher, you represent and warrant that you have permission and authorization from your school and/or district to use the Services as part of your curriculum, and for purposes of COPPA compliance, you represent and warrant that you are entering into these Terms on behalf of your school and/or district."],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Security & bugs"],["close-element"],["text","\\n  "],["open-element","p",[]],["flush-element"],["text","If you find a security vulnerability with Sutori, please tell us. We provide a bug bounty award for vulnerabilities that directly affect the security and the privacy of our users. We ask that you do not make the bug public before it has been fixed. We promise to respond rapidly so please email us anytime at "],["append",["unknown",["email-security"]],false],["text"," if you would like to discuss any of this."],["close-element"],["text","\\n\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Using Sutori in a commercial setting"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You cannot use Sutori commercially without a business licence or explicit written rights from the Sutori team."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You have to use the âSutoriâ embedded version when displaying a story commercially."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","If Sutori is used in an non-embedded format for commercial purposes, then it is a violation of our terms of use and we may take down the story in question."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Please e-mail us if you have any questions: "],["append",["unknown",["email-sales"]],false],["text","."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Sutoriâs services"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We reserve all rights in Sutoriâs look and feel. Sutori makes some of our own code available under open source licenses. As for other parts of Sutori, you may not copy or adapt any portion of our code or visual design elements (including logos) without express written permission from Sutori unless otherwise permitted by law. Please just e-mail us directly if you would like to discuss it at "],["append",["unknown",["email-info"]],false],["text","."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","You may not do, or try to do, the following: (1) access or tamper with non-public areas of the Services, our computer systems, or the systems of our technical providers; (2) access or search the Services by any means other than the currently available, published interfaces (e.g., APIs) that we provide; (3) forge any TCP/IP packet header or any part of the header information in any email or posting, or in any way use the Services to send altered, deceptive, or false source-identifying information; or (4) interfere with, or disrupt, the access of any user, host, or network, including sending a virus, overloading, flooding, spamming, mail-bombing the Services, or by scripting the creation of content or accounts in such a manner as to interfere with or create an undue burden on the Services."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We allow the Crawling of Sutoriâs Services if done in accordance with the provisions of our robots.txt file, but scraping the Services is prohibited."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","We may change, terminate, or restrict access to any aspect of the service, at any time, without notice."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Miscellaneous"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Disclaimer of warranty. Sutori provides the Services to you as is. You use them at your own risk and discretion. That means they donât come with any warranty. None express, none implied. No implied warranty of merchantability, fitness for a particular purpose, availability, security, title or non-infringement."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Limitation of Liability. Sutori will not be liable to you for any damages that arise from your using the Services. This includes if the Services are hacked or unavailable. This includes all types of damages (indirect, incidental, consequential, special or exemplary). And it includes all kinds of legal claims, such as breach of contract, breach of warranty, tort, or any other loss."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","No waiver. If Sutori does not exercise a particular right under these Terms, that does not waive it."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","Severability. If any provision of these terms is found invalid by a court of competent jurisdiction, you agree that the court should try to give effect to the partiesâ intentions as reflected in the provision and that other provisions of the Terms will remain in full effect."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","h2",[]],["flush-element"],["text","Governing law & entire agreement"],["close-element"],["text","\\n  "],["open-element","ul",[]],["flush-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","These Terms are governed by the laws of the Commonwealth of Massachusetts, without regard to the rules of conflict of law that may cause the laws of another jurisdiction to apply. You agree to the sole and exclusive jurisdiction and venue of the federal or state courts serving Middlesex County in the Commonwealth of Massachusetts in the event of any dispute of any kind arising from or relating to the Site or Services, or your use or review of it."],["close-element"],["text","\\n    "],["open-element","li",[]],["flush-element"],["text","The Terms constitute the entire agreement between the parties with respect to the subject matter hereof and supersedes and replaces all prior or contemporaneous understandings or agreements, written or oral, regarding such subject matter. If for any reason a court of competent jurisdiction finds any provision or portion of these Terms to be unenforceable, the remainder of the Terms will continue in full force and effect."],["close-element"],["text","\\n  "],["close-element"],["text","\\n\\n  "],["open-element","p",[]],["flush-element"],["text","Questions on any of this? Feel free to reach out to us at "],["append",["unknown",["email-info"]],false],["text","."],["close-element"],["text","\\n\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","sutori.com"]],"locals":[]},{"statements":[["text","Privacy Policy"]],"locals":[]},{"statements":[["text","      Terms of Use\\n"]],"locals":[]},{"statements":[["block",["h","title"],null,[["tagName"],["h1"]],2]],"locals":["h"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/terms-of-use.hbs" },
    });
  }),
  define("frontend/templates/unsubscribe-error", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "U15NGZ63",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-unsubscribe-error"],["flush-element"],["text","\\n"],["block",["page-for-message"],null,null,2],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","p",[]],["flush-element"],["text","The unsubscribe link you provided is not valid."],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","Please make sure you used the right link from your email or contact "],["append",["unknown",["email-help"]],false],["text"," if you continue having the problem."],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Oops!"],["close-element"],["text"," Something went wrong\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,1],["text","\\n"],["block",["p","body"],null,null,0]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/unsubscribe-error.hbs" },
    });
  }),
  define("frontend/templates/unsubscribe", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "7QBxnmlN",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-unsubscribe"],["flush-element"],["text","\\n\\n"],["block",["page-for-message"],null,null,2],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","p",[]],["flush-element"],["text","The last thing we want to do is clutter your inbox!"],["close-element"],["text","\\n      "],["open-element","p",[]],["flush-element"],["text","Keep creating and see you soon on the Sutori platform :)"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["text","      You have been "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","unsubscribed"],["close-element"],["text","\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,1],["text","\\n"],["block",["p","body"],null,null,0]],"locals":["p"]}],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/unsubscribe.hbs" },
    });
  }),
  define("frontend/templates/upgrade", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "cHHNkJ6h",
      block:
        '{"statements":[["append",["helper",["page-upgrade"],null,[["origin"],[["get",["origin"]]]]],false],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/upgrade.hbs" },
    });
  }),
  define("frontend/templates/user", ["exports"], function (e) {
    e.default = Ember.HTMLBars.template({
      id: "ykiZRpB8",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-user"],["flush-element"],["text","\\n\\n"],["text","  "],["append",["helper",["user-profile"],null,[["user"],[["get",["model"]]]]],false],["text","\\n\\n"],["text","  "],["append",["helper",["stories-section"],null,[["class","title","storiesPromise","stories","sortBy"],["public-stories","Public stories",["get",["publicStoriesPromise"]],["get",["publicStories"]],["get",["sortPublicStoriesBy"]]]]],false],["text","\\n\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[],"hasPartials":false}',
      meta: { moduleName: "frontend/templates/user.hbs" },
    });
  }),
  define("frontend/templates/waiting-for-confirmation", ["exports"], function (
    e
  ) {
    e.default = Ember.HTMLBars.template({
      id: "Wo6AoWhj",
      block:
        '{"statements":[["open-element","article",[]],["static-attr","class","page-waiting-for-confirmation"],["flush-element"],["text","\\n"],["block",["page-for-registration"],null,null,2],["text","\\n"],["close-element"],["text","\\n"]],"locals":[],"named":[],"yields":[],"blocks":[{"statements":[["text","      "],["open-element","p",[]],["static-attr","class","validation-email-sent"],["flush-element"],["text","A validation email has been sent to your email address. Please check your inbox."],["close-element"],["text","\\n\\n      "],["partial","back-to-login"],["text","\\n"]],"locals":[]},{"statements":[["text","      "],["open-element","span",[]],["static-attr","class","highlight"],["flush-element"],["text","Thank you"],["close-element"],["text"," for signing up\\n"]],"locals":[]},{"statements":[["block",["p","title"],null,null,1],["text","\\n"],["block",["p","body"],null,null,0]],"locals":["p"]}],"hasPartials":true}',
      meta: { moduleName: "frontend/templates/waiting-for-confirmation.hbs" },
    });
  }),
  define("frontend/transforms/array", [
    "exports",
    "ember",
    "ember-data",
  ], function (e, t, n) {
    e.default = n.default.Transform.extend({
      serialize: function (e) {
        return "array" === t.default.typeOf(e) ? e : [];
      },
      deserialize: function (e) {
        return e;
      },
    });
  }),
  define("frontend/transforms/hash", [
    "exports",
    "ember",
    "ember-data",
  ], function (e, t, n) {
    e.default = n.default.Transform.extend({
      serialize: function (e) {
        return JSON.parse(JSON.stringify(e));
      },
      deserialize: function (e) {
        return t.default.Object.create(e);
      },
    });
  }),
  define("frontend/transforms/image", [
    "exports",
    "ember-data",
    "frontend/utils/image",
  ], function (e, t, n) {
    e.default = t.default.Transform.extend({
      serialize: function (e) {
        return e
          ? {
              identifier: e.identifier,
              url: e.url,
              thumb_url: e.thumbUrl,
              caption: e.caption,
            }
          : null;
      },
      deserialize: function (e) {
        return e
          ? n.default.create({
              identifier: e.identifier,
              url: e.url,
              thumbUrl: e.thumbUrl,
              caption: e.caption || "",
            })
          : null;
      },
    });
  }),
  define("frontend/transitions", ["exports"], function (e) {
    var t = 150,
      n = 250;
    e.default = function () {
      this.transition(
        this.hasClass("dialog-create-new-item"),
        this.use("fade", { duration: t })
      ),
        this.transition(
          this.fromRoute("stories.sutori"),
          this.toRoute("stories.community"),
          this.use("toLeft", { duration: n }),
          this.reverse("toRight", { duration: n })
        ),
        this.transition(
          this.fromRoute("stories.community.featured"),
          this.toRoute("stories.community.latest"),
          this.use("toLeft", {
            duration: n,
          }),
          this.reverse("toRight", { duration: n })
        ),
        this.transition(
          this.fromRoute("stories.community.featured"),
          this.toRoute("stories.community.student-work"),
          this.use("toLeft", { duration: n }),
          this.reverse("toRight", { duration: n })
        ),
        this.transition(
          this.fromRoute("stories.community.latest"),
          this.toRoute("stories.community.student-work"),
          this.use("toLeft", { duration: n }),
          this.reverse("toRight", { duration: n })
        ),
        this.transition(
          this.hasClass("lesson-plan-tabs"),
          this.use("fade", { duration: t })
        ),
        this.transition(
          this.hasClass("featured-unit-row"),
          this.use("fade", { duration: t }),
          this.toValue(!0)
        ),
        this.transition(
          this.hasClass("wrapper-note-editor"),
          this.use("fade", { duration: t })
        );
    };
  }),
  define("frontend/transitions/cross-fade", [
    "exports",
    "liquid-fire/transitions/cross-fade",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/default", [
    "exports",
    "liquid-fire/transitions/default",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/explode", [
    "exports",
    "liquid-fire/transitions/explode",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/fade", [
    "exports",
    "liquid-fire/transitions/fade",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/flex-grow", [
    "exports",
    "liquid-fire/transitions/flex-grow",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/fly-to", [
    "exports",
    "liquid-fire/transitions/fly-to",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/move-over", [
    "exports",
    "liquid-fire/transitions/move-over",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/scale", [
    "exports",
    "liquid-fire/transitions/scale",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/scroll-then", [
    "exports",
    "liquid-fire/transitions/scroll-then",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/to-down", [
    "exports",
    "liquid-fire/transitions/to-down",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/to-left", [
    "exports",
    "liquid-fire/transitions/to-left",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/to-right", [
    "exports",
    "liquid-fire/transitions/to-right",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/to-up", [
    "exports",
    "liquid-fire/transitions/to-up",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/transitions/wait", [
    "exports",
    "liquid-fire/transitions/wait",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/utils/ajax-error-object", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Object.extend({ isAjaxResponseError: !0 });
  }),
  define("frontend/utils/analytics-utils", ["exports", "ember"], function (
    e,
    t
  ) {
    function n(e) {
      return (t.default.isPresent(e) ? e.get("type") : "guest").capitalize();
    }
    function s(e, t) {
      var n = [];
      return (
        e.get("isSutoriStory") && n.push("Sutori"),
        e.get("isThirdPartyStory") && n.push("Third party"),
        e.get("isApproved") && n.push("Public"),
        e.get("author") === t && n.push("Own"),
        e.get("authorIsStudentOfCurrentUser") && n.push("Author is my student"),
        n
      );
    }
    (e.typeOfUser = n), (e.typesOfStory = s);
  }),
  define("frontend/utils/animation-step", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Object.extend({
      execute: function () {
        return regeneratorRuntime.async(
          function (e) {
            for (;;)
              switch ((e.prev = e.next)) {
                case 0:
                  throw new Error("You must override the 'execute' method.");
                case 1:
                case "end":
                  return e.stop();
              }
          },
          null,
          this
        );
      },
    });
  }),
  define("frontend/utils/api-paths", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.create({
      session_ping_path: function () {
        return "/api/user/session_ping";
      },
      user_login_path: function () {
        return "/api/user/login";
      },
      user_logout_path: function () {
        return "/api/user/logout";
      },
      user_password_path: function () {
        return "/api/user/password";
      },
      users_count_path: function () {
        return "/api/users/count";
      },
      google_callback_path: function () {
        return "/api/auth/google_oauth2/callback";
      },
      edmodo_callback_path: function () {
        return "/api/auth/edmodo/callback";
      },
      facebook_callback_path: function () {
        return "/api/auth/facebook/callback";
      },
      user_card_info_path: function (e) {
        return "/api/users/" + e + "/card_info";
      },
      register_path: function () {
        return "/api/user/register";
      },
      confirm_path: function () {
        return "/api/user/confirm";
      },
      update_multiple_story_shares_path: function () {
        return "/api/story_shares/update_multiple";
      },
      join_class_path: function (e) {
        return "/api/users/" + e + "/join_class";
      },
      leave_class_path: function (e) {
        return "/api/users/" + e + "/leave_class";
      },
      edit_story_path: function (e) {
        return "/api/stories/" + e + "/edit";
      },
      finish_story_path: function (e) {
        return "/api/stories/" + e + "/finish";
      },
      request_review_story_path: function (e) {
        return "/api/stories/" + e + "/request_review";
      },
      approve_stories_path: function () {
        return "/api/stories/approve";
      },
      reject_stories_path: function () {
        return "/api/stories/reject";
      },
      copy_story_path: function (e) {
        return "/api/stories/" + e + "/copy";
      },
      s3_presigned_post_path: function () {
        return "/api/s3_presigned_post";
      },
      download_url_path: function () {
        return "/api/download_url";
      },
      publish_story_unit_path: function (e) {
        return "/api/story_units/" + e + "/publish";
      },
      premium_subscriptions_path: function () {
        return "/api/premium_subscriptions";
      },
      upgrade_price_path: function (e) {
        return "/api/premium_subscriptions/" + e + "/upgrade_price";
      },
      email_subscriptions_path: function () {
        return "/api/email_subscriptions";
      },
      help_item_increment_impression_count_path: function (e) {
        return "/api/help_items/" + e + "/increment_impression_count";
      },
    });
  });
define("frontend/utils/common-api-queries", ["exports"], function (e) {
  var t = {
    page: 1,
    per_page: 1,
    sort_params: ["is_story_of_the_month_for DESC"],
    filter: { is_story_of_the_month: !0 },
  };
  e.MOST_RECENT_STORY_OF_THE_MONTH_QUERY = t;
  var n = {
    filter: {
      is_approved: !0,
      authors_types: ["student", "teacher", "personal"],
    },
    sort_params: ["approved_at DESC"],
  };
  e.LATEST_PUBLIC_STORIES_QUERY = n;
  var s = { page: 1, per_page: 1, filter: { is_featured: !0 } };
  e.FEATURED_STORY_UNIT_QUERY = s;
});
define("frontend/utils/date-utils", [
  "exports",
  "ember",
  "npm:moment",
], function (e, t, n) {
  e.default = t.default.Object.create({
    formatDate: function (e) {
      var t =
        arguments.length <= 1 || void 0 === arguments[1]
          ? "MMMM D, YYYY"
          : arguments[1];
      return (0, n.default)(e).format(t);
    },
    dateAtMidnight: function (e) {
      return (0, n.default)(e).hours(0).minutes(0).seconds(0).milliseconds(0);
    },
    now: function () {
      return (0, n.default)();
    },
    daysAgo: function (e) {
      return this.now().subtract(e, "days");
    },
    fromNow: function (e) {
      return (0, n.default)(e).fromNow();
    },
    serialize: function (e) {
      return e.toISOString();
    },
  });
}),
  define("frontend/utils/dom", ["exports", "ember"], function (e, t) {
    function n(e) {
      for (var t = !0; t; ) {
        var n = e;
        t = !1;
        var s = n.anchorNode,
          o = n.focusNode,
          a = n.anchorOffset,
          i = n.focusOffset,
          l = void 0,
          u = void 0,
          c = void 0,
          d = void 0,
          m = void 0,
          f = s.compareDocumentPosition(o);
        if (f & Node.DOCUMENT_POSITION_CONTAINS) {
          if (i < o.childNodes.length) (o = o.childNodes[i]), (i = 0);
          else {
            for (; o.lastChild; ) o = o.lastChild;
            i = o.textContent.length;
          }
          (e = {
            focusNode: o,
            focusOffset: i,
            anchorNode: s,
            anchorOffset: a,
          }),
            (t = !0),
            (s = o = a = i = l = u = c = d = m = f = void 0);
        } else {
          if (!(f & Node.DOCUMENT_POSITION_CONTAINED_BY))
            return (
              f & Node.DOCUMENT_POSITION_FOLLOWING
                ? ((l = s), (u = o), (c = a), (d = i), (m = r.FORWARD))
                : f & Node.DOCUMENT_POSITION_PRECEDING
                ? ((l = o), (u = s), (c = i), (d = a), (m = r.BACKWARD))
                : ((l = u = s),
                  (c = a),
                  (d = i),
                  d < c
                    ? ((c = i), (d = a), (m = r.BACKWARD))
                    : (m = c < d ? r.FORWARD : null)),
              {
                headNode: l,
                headOffset: c,
                tailNode: u,
                tailOffset: d,
                direction: m,
              }
            );
          var p = a - 1;
          p < 0 && (p = 0),
            (e = {
              anchorNode: s.childNodes[p],
              anchorOffset: 0,
              focusNode: o,
              focusOffset: i,
            }),
            (t = !0),
            (s = o = a = i = l = u = c = d = m = f = p = void 0);
        }
      }
    }
    function s(e) {
      var n =
          arguments.length <= 1 || void 0 === arguments[1]
            ? null
            : arguments[1],
        s = document.createElement("script");
      return (
        (s.type = "text/javascript"),
        (s.src = e),
        t.default.isPresent(n) && (s.id = n),
        s
      );
    }
    function o(e) {
      return new t.default.RSVP.Promise(function (t) {
        var n = s(e);
        (n.async = !0),
          (n.onload = function () {
            t();
          }),
          document.getElementsByTagName("head")[0].appendChild(n);
      });
    }
    function a(e, n) {
      return t.default.isPresent(n) && (e === n || $.contains(n, e));
    }
    function i(e, t) {
      return !a(e, t);
    }
    var l = "click touchstart";
    e.CLICK_EVENTS = l;
    var r = { FORWARD: 1, BACKWARD: -1 };
    (e.comparePosition = n),
      (e.createScriptTag = s),
      (e.injectScript = o),
      (e.isInside = a),
      (e.isOutside = i);
  }),
  define("frontend/utils/file", [
    "exports",
    "ember",
    "npm:blueimp-canvas-to-blob",
  ], function (e, t, n) {
    e.default = t.default.Object.extend({
      mime: t.default.computed("base64", function () {
        return this.get("base64").match(/data:(.*);base64.*/)[1];
      }),
      asBlob: t.default.computed("base64", function () {
        return (0, n.default)(this.get("base64"));
      }),
      extension: t.default.computed("mime", function () {
        return this.get("mime").split("/")[1];
      }),
      hasMimeTypeOneOf: function (e) {
        return e.includes(this.get("mime"));
      },
    });
  }),
  define("frontend/utils/form-object", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.extend({
      loading: !1,
      errors: [],
      formattedValidationErrors: t.default.computed(
        "model.validations.errors.@each.{attribute,message}",
        function () {
          var e = t.default.Object.create();
          return (
            (this.get("model.validations.errors") || []).forEach(function (t) {
              e.set(t.attribute, [t.message]);
            }),
            e
          );
        }
      ),
      bindModelAttributes: function (e) {
        var n = this;
        e.forEach(function (e) {
          t.default.Binding.from("model." + e)
            .to(e)
            .connect(n);
        });
      },
      clearAllErrors: function () {
        this.set("errors", []);
      },
      showValidationErrors: function () {
        if (t.default.isNone(this.get("errorsBinding"))) {
          var e = this.get("model");
          t.default.isPresent(e) &&
            this.set("errors", e.get("validations.errors")),
            this.set(
              "errorsBinding",
              t.default.Binding.from("formattedValidationErrors").to("errors")
            ),
            this.get("errorsBinding").connect(this);
        }
      },
      hideValidationErrors: function () {
        t.default.isPresent(this.get("errorsBinding")) &&
          (this.get("errorsBinding").disconnect(this),
          this.set("errorsBinding", null),
          this.clearAllErrors());
      },
    });
  }),
  define("frontend/utils/get-cmd-key", [
    "exports",
    "ember-keyboard/utils/get-cmd-key",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/utils/get-component", ["exports"], function (e) {
    e.default = function (e, t) {
      return e.lookup("-view-registry:main")[t.attr("id")];
    };
  }),
  define("frontend/utils/get-mime-type-of-blob", ["exports"], function (e) {
    e.default = function (e) {
      var t = e.type;
      return "audio/mp3" === t
        ? "audio/mpeg"
        : "audio/x-vorbis+ogg" === t
        ? "audio/ogg"
        : t;
    };
  }),
  define("frontend/utils/http-status-codes", ["exports"], function (e) {
    var t = 301;
    e.MOVED_PERMANENTLY = t;
    var n = 401;
    e.UNAUTHORIZED = n;
    var s = 403;
    e.FORBIDDEN = s;
    var o = 404;
    e.NOT_FOUND = o;
    var a = 412;
    e.PRECONDITION_FAILED = a;
    var i = 414;
    e.URI_TOO_LONG = i;
    var l = 422;
    e.UNPROCESSABLE_ENTITY = l;
    var r = 500;
    e.INTERNAL_SERVER_ERROR = r;
  }),
  define("frontend/utils/image", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.extend({ url: "", thumbUrl: "", caption: "" });
  }),
  define("frontend/utils/inflect", ["exports", "ember-inflector"], function (
    e,
    t
  ) {
    e.default = function (e, n) {
      return 1 === n ? (0, t.singularize)(e) : (0, t.pluralize)(e);
    };
  }),
  define("frontend/utils/listener-name", [
    "exports",
    "ember-keyboard/utils/listener-name",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/utils/metadata", [
    "exports",
    "npm:lodash.truncate",
    "frontend/utils/seo-constants",
  ], function (e, t, n) {
    function s(e) {
      return (0, t.default)(e, {
        length: n.META_TITLE_MAXIMUM_LENGTH,
        separator: " ",
      });
    }
    function o(e) {
      return (0, t.default)(e, {
        length: n.META_DESCRIPTION_MAXIMUM_LENGTH,
        separator: " ",
      });
    }
    function a(e) {
      return (0, t.default)(e, {
        length: n.SCHEMA_ORG_HEADLINE_MAXIMUM_LENGTH,
        separator: " ",
      });
    }
    (e.formatMetaTitle = s),
      (e.formatMetaDescription = o),
      (e.formatSchemaOrgHeadline = a);
  }),
  define("frontend/utils/mobiledoc", ["exports"], function (e) {
    function t(e) {
      if (!e) return !1;
      var t = e.markups,
        n = a(t);
      return n.length > 0;
    }
    function n(e) {
      var t = e.marker;
      if (!t) return !1;
      var n = t.length,
        s = e.offsetInMarker;
      return n === s;
    }
    function s(e) {
      return n(e) && t(e.marker);
    }
    function o(e) {
      return n(e) && t(e.marker.next);
    }
    function a(e) {
      return e.filterBy("tagName", "span").filterBy("attributes.data-note-id");
    }
    function i(e, t) {
      return e.mapBy("tagName").any(function (e) {
        return t.includes(e);
      });
    }
    function l(e) {
      return {
        version: "0.3.1",
        atoms: [],
        cards: [],
        markups: [],
        sections: [[1, "p", [[0, [], 0, e]]]],
      };
    }
    var r = {
      version: "0.3.1",
      atoms: [],
      markups: [],
      cards: [],
      sections: [],
    };
    (e.EMPTY_MOBILEDOC = r),
      (e.hasNoteMarkup = t),
      (e.getNoteMarkups = a),
      (e.isAtEndOfNote = s),
      (e.isAtStartOfNote = o),
      (e.markupsContainTags = i),
      (e.toMobiledoc = l);
  }),
  define("frontend/utils/number-formatter", ["exports"], function (e) {
    function t(e) {
      return e.replace(/(\+\d)(\d\d\d)(\d\d\d)(\d\d\d\d)/, "($1) $2-$3-$4");
    }
    e.formatTelephone = t;
  }),
  define("frontend/utils/object-promise", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Object.extend(t.default.PromiseProxyMixin);
  }),
  define("frontend/utils/pollster", [
    "exports",
    "ember",
    "frontend/config/environment",
  ], function (e, t, n) {
    e.default = t.default.Object.extend({
      interval: 30,
      start: function () {
        if (!this.get("isRunning")) {
          var e = this.get("onPoll");
          e.apply(this),
            n.default.APP.POLLING_ENABLED &&
              this.set("nextInvocation", this._getNextInvocation(e)),
            this.set("isRunning", !0);
        }
      },
      stop: function () {
        this.set("isRunning", !1),
          t.default.isPresent(this.get("onStop")) &&
            this.get("onStop").apply(this),
          t.default.run.cancel(this.get("nextInvocation"));
      },
      _getNextInvocation: function (e) {
        var n = this;
        return t.default.run.later(function () {
          e.apply(n),
            n.get("isRunning") &&
              n.set("nextInvocation", n._getNextInvocation(e));
        }, this.get("_intervalInMs"));
      },
      _intervalInMs: t.default.computed("interval", function () {
        return 1e3 * this.get("interval");
      }),
    });
  }),
  define("frontend/utils/promise-utils", ["exports", "ember"], function (e, t) {
    function n(e) {
      return e && e.then ? e : t.default.RSVP.resolve(e);
    }
    function s(e) {
      return new t.default.RSVP.Promise(function (n, s) {
        e.done(function (e) {
          t.default.run(function () {
            n(e);
          });
        }).fail(function (e) {
          t.default.run(function () {
            s(e);
          });
        });
      });
    }
    (e.wrapInPromise = n), (e.deferredToPromise = s);
  }),
  define("frontend/utils/request-messages-object", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Object.extend({
      init: function () {
        var e = this;
        this._super.apply(this, arguments);
        var n = this.get("response"),
          s = n.responseJSON;
        if (!s) {
          if (0 === n.status && "error" === n.statusText) return;
          return void this.get("logger").exception(
            new Error(
              "Problems processing response " +
                t.default.inspect(n.responseText)
            ),
            { jqxhr: n }
          );
        }
        var o = "";
        "success" === this.get("type")
          ? (o = "successes")
          : "error" === this.get("type") && (o = "errors"),
          s[o].forEach(function (t) {
            e.set(t.field.camelize(), t.messages);
          });
      },
    });
  }),
  define("frontend/utils/runloop-utils", ["exports", "ember"], function (e, t) {
    function n() {
      return new t.default.RSVP.Promise(function (e) {
        t.default.run.scheduleOnce("afterRender", e);
      });
    }
    function s() {
      return new t.default.RSVP.Promise(function (e) {
        t.default.run.next(e);
      });
    }
    (e.waitUntilRendered = n), (e.waitUntilNextRunloop = s);
  }),
  define("frontend/utils/seo-constants", ["exports"], function (e) {
    var t = 55;
    e.DOCUMENT_TITLE_MAXIMUM_LENGTH = t;
    var n = 70;
    e.META_TITLE_MAXIMUM_LENGTH = n;
    var s = 160;
    e.META_DESCRIPTION_MAXIMUM_LENGTH = s;
    var o = 1200;
    e.BEST_IMAGE_WIDTH_FOR_META_TAGS = o;
    var a = 630;
    e.BEST_IMAGE_HEIGHT_FOR_META_TAGS = a;
    var i = "@SutoriApp";
    e.TWITTER_CARD_SITE = i;
    var l = 110;
    e.SCHEMA_ORG_HEADLINE_MAXIMUM_LENGTH = l;
    var r =
      "https://d1ox703z8b11rg.cloudfront.net/images/logo-sutori-184x60-134a2f4eca2695e9e4d728b50f51e3b6.png";
    e.SCHEMA_ORG_LOGO_URL = r;
    var u = 184,
      c = 60,
      d = {
        "@type": "Organization",
        name: "Sutori",
        logo: { "@type": "ImageObject", url: r, width: u, height: c },
      };
    e.SCHEMA_ORG_SUTORI_PUBLISHER = d;
    var m = "Sutori";
    e.DEFAULT_META_SITE_NAME = m;
    var f = "Sutori is the best way to share your story.";
    e.DEFAULT_META_DESCRIPTION = f;
    var p =
        "https://d1ox703z8b11rg.cloudfront.net/images/logo-sutori-square-1e18f12aaa3bccf18a578822c13d89f9.png",
      h = 3150,
      g = 3150,
      b = { url: p, width: h, height: g };
    e.DEFAULT_META_IMAGE = b;
    var x = "Logo of Sutori";
    e.DEFAULT_META_IMAGE_ALT = x;
  }),
  define("frontend/utils/sortable-table-column", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Object.extend({
      className: t.default.computed("label", function () {
        return this.get("label").dasherize();
      }),
    });
  }),
  define("frontend/utils/story-collaboration-state", [
    "exports",
    "ember",
  ], function (e, t) {
    e.default = t.default.Object.extend({
      init: function () {
        this._super.apply(this, arguments),
          this.setProperties({
            bannerLock: null,
            titleLock: null,
            introductionLock: null,
            itemLocks: [],
            conclusionLocks: [],
            onlineCollaborators: [],
          });
      },
      userConnected: function (e) {
        this.get("onlineCollaborators").addObject(e);
      },
      userDisconnected: function (e) {
        this.get("onlineCollaborators").removeObject(e);
      },
      lockBanner: function (e) {
        this._lockSingletonElement("bannerLock", e);
      },
      unlockBanner: function () {
        this._unlockSingletonElement("bannerLock");
      },
      lockTitle: function (e) {
        this._lockSingletonElement("titleLock", e);
      },
      unlockTitle: function () {
        this._unlockSingletonElement("titleLock");
      },
      lockIntroduction: function (e) {
        this._lockSingletonElement("introductionLock", e);
      },
      unlockIntroduction: function () {
        this._unlockSingletonElement("introductionLock");
      },
      lockItem: function (e, t) {
        this._lockElementWithId("itemLocks", e, t);
      },
      unlockItem: function (e) {
        this._unlockElementWithId("itemLocks", e);
      },
      lockConclusion: function (e, t) {
        this._lockElementWithId("conclusionLocks", e, t);
      },
      unlockConclusion: function (e) {
        this._unlockElementWithId("conclusionLocks", e);
      },
      _singletonElementLock: function (e) {
        return { user: e };
      },
      _lockSingletonElement: function (e, t) {
        this.set(e, this._singletonElementLock(t));
      },
      _unlockSingletonElement: function (e) {
        this.set(e, null);
      },
      _elementWithIdLock: function (e, t) {
        return { id: e, user: t };
      },
      _lockElementWithId: function (e, n, s) {
        var o = this.get(e),
          a = o.findBy("id", n);
        t.default.isNone(a) && o.addObject(this._elementWithIdLock(n, s));
      },
      _unlockElementWithId: function (e, n) {
        var s = this.get(e),
          o = s.findBy("id", n);
        t.default.isPresent(o) && s.removeObject(o);
      },
    });
  }),
  define("frontend/utils/string-utils", ["exports"], function (e) {
    function t(e) {
      return e.decamelize().replace(/_/, " ").capitalize();
    }
    e.decamelize = t;
  }),
  define("frontend/utils/subscription-plan", ["exports", "ember"], function (
    e,
    t
  ) {
    e.default = t.default.Object.extend({
      hasProratedPrice: t.default.computed.notEmpty("proratedPrice"),
    });
  }),
  define("frontend/utils/sutori-info", ["exports"], function (e) {
    var t = "281 Summer St, 2nd Floor",
      n = "Boston",
      s = "MA",
      o = "02210",
      a = "United States",
      i = "US",
      l = "+18572390855",
      r = "info@sutori.com",
      u = "https://www.facebook.com/sutori",
      c = "SutoriApp",
      d = "https://twitter.com/" + c,
      m = "https://plus.google.com/+HstryCo",
      f = "https://www.pinterest.com/sutoriapp",
      p = "https://www.linkedin.com/company/sutori";
    (e.STREET_ADDRESS = t),
      (e.ADDRESS_LOCALITY = n),
      (e.ADDRESS_REGION = s),
      (e.POSTAL_CODE = o),
      (e.ADDRESS_COUNTRY = a),
      (e.ADDRESS_COUNTRY_SHORT = i),
      (e.TELEPHONE = l),
      (e.EMAIL_INFO = r),
      (e.SOCIAL_FACEBOOK_URL = u),
      (e.SOCIAL_TWITTER_HANDLE = c),
      (e.SOCIAL_TWITTER_URL = d),
      (e.SOCIAL_GOOGLE_PLUS_URL = m),
      (e.SOCIAL_PINTEREST_URL = f),
      (e.SOCIAL_LINKEDIN_URL = p);
  }),
  define("frontend/utils/tab", ["exports", "ember"], function (e, t) {
    var n = /[^a-z\s]/gi;
    e.default = t.default.Object.extend({
      hasRouteSpecified: t.default.computed.notEmpty("routeName"),
      className: t.default.computed("text", function () {
        return this.get("text").replace(n, "").dasherize();
      }),
    });
  }),
  define("frontend/utils/to-dom-element", ["exports"], function (e) {
    function t(e) {
      return e instanceof jQuery;
    }
    e.default = function (e) {
      return t(e) ? e[0] : e;
    };
  }),
  define("frontend/utils/tour-step", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.extend({
      position: "absolute",
      zIndex: 5,
      requiresAction: !1,
    });
  }),
  define("frontend/utils/url", [
    "exports",
    "npm:urijs",
    "frontend/config/environment",
  ], function (e, t, n) {
    function s(e) {
      return new t.default(e).hostname();
    }
    function o(e) {
      return new t.default(e).suffix();
    }
    function a(e) {
      return "" + window.location.origin + e;
    }
    function i(e) {
      return "https://" + n.default.APP.CLOUDFRONT_CDN + "/" + e;
    }
    (e.getHost = s),
      (e.getExtension = o),
      (e.toApplicationUrl = a),
      (e.toCloudfrontUrl = i);
  }),
  define("frontend/utils/utility", ["exports", "ember"], function (e, t) {
    e.default = t.default.Object.create({
      arraysEqual: function (e, t) {
        if (e.length !== t.length) return !1;
        for (
          var n = e.slice(0).sort(), s = t.slice(0).sort(), o = 0;
          o < n.length;
          o++
        )
          if (n[o] !== s[o]) return !1;
        return !0;
      },
      setElementMembershipInList: function (e, t, n) {
        n ? e.addObject(t) : e.removeObject(t);
      },
      permit: function (e, t) {
        if (!$.isPlainObject(e)) return e;
        var n = (function () {
          var n = {};
          return (
            $.each(t, function (t, s) {
              n[s] = e[s];
            }),
            { v: n }
          );
        })();
        return "object" == typeof n ? n.v : void 0;
      },
      copyObject: function (e) {
        return JSON.parse(JSON.stringify(e));
      },
    });
  }),
  define("frontend/utils/xhr", [
    "exports",
    "ember",
    "frontend/utils/utility",
    "frontend/utils/promise-utils",
  ], function (e, t, n, s) {
    e.default = t.default.Object.create({
      serialize: function (e) {
        var s = this,
          o = o;
        if (!o.isPlainObject(e)) return e;
        var a = (function () {
          var a = n.default.copyObject(e);
          return (
            o.each(e, function (e, n) {
              var o = t.default.String.decamelize(e.toString());
              (a[o] = s.serialize(n)), o !== e && delete a[e];
            }),
            { v: a }
          );
        })();
        return "object" == typeof a ? a.v : void 0;
      },
      normalize: function (e) {
        var s = this,
          o = o;
        if (!o.isPlainObject(e) && !o.isArray(e)) return e;
        var a = (function () {
          var a = n.default.copyObject(e);
          return (
            o.each(e, function (e, n) {
              var i = e;
              "string" === o.type(e) && (i = t.default.String.camelize(e)),
                null !== n && void 0 !== n && (a[i] = s.normalize(n)),
                i !== e && delete a[e];
            }),
            { v: a }
          );
        })();
        return "object" == typeof a ? a.v : void 0;
      },
      withModel: function (e) {
        var n =
            arguments.length <= 1 || void 0 === arguments[1]
              ? {}
              : arguments[1],
          s = t.default.Object.create(this);
        return (
          (s._withModel = e),
          (s._rollbackOnError = !!n.rollbackOnError),
          (s._action = n.action),
          t.default.isNone(n.showErrorNotification)
            ? (s._showErrorNotification = !0)
            : (s._showErrorNotification = !!n.showErrorNotification),
          s
        );
      },
      _ajaxRequest: function (e) {
        var n = this,
          o = (0, s.deferredToPromise)($.ajax(e)),
          a = this._withModel;
        return (
          a &&
            o.catch(function (e) {
              var s = e.status,
                o = void 0,
                i = e.responseJSON;
              t.default.isPresent(i) && (o = i.errors),
                a.handleBackendError(
                  o,
                  s,
                  n._rollbackOnError,
                  n._showErrorNotification,
                  n._action
                );
            }),
          o
        );
      },
      _prepareAjaxRequest: function (e, t, n, s) {
        (e.type = t), (e.url = n), (e.data = s || {}), (e.dataType = "json");
      },
      get: function (e, n) {
        var s =
          arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        return (
          t.default.merge(s, { cache: !1 }),
          this._prepareAjaxRequest(s, "GET", e, n),
          this._ajaxRequest(s)
        );
      },
      post: function (e, t) {
        var n =
          arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        return this._prepareAjaxRequest(n, "POST", e, t), this._ajaxRequest(n);
      },
      put: function (e, t) {
        var n =
          arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        return this._prepareAjaxRequest(n, "PUT", e, t), this._ajaxRequest(n);
      },
      delete: function (e, t) {
        var n =
          arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        return (
          this._prepareAjaxRequest(n, "DELETE", e, t), this._ajaxRequest(n)
        );
      },
    });
  }),
  define("frontend/validations/controllers/personal-registration", [
    "exports",
    "ember-cp-validations",
    "ember",
  ], function (e, t, n) {
    e.default = (0, t.buildValidations)({
      firstName: (0, t.validator)("presence", {
        presence: !0,
        message: "Please choose your first name.",
      }),
      lastName: (0, t.validator)("presence", {
        presence: !0,
        message: "Please choose your last name.",
      }),
      termsOfService: (0, t.validator)("acceptance", {
        message: "You must accept the terms of service.",
      }),
      email: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please enter an email address.",
          dependentKeys: ["model.controller.askEmail"],
          disabled: n.default.computed.not("model.controller.askEmail"),
        }),
      ],
      password: [
        (0, t.validator)("length", {
          min: 8,
          message: "The password has to be at least {min} characters long.",
          dependentKeys: ["model.controller.askPassword"],
          disabled: n.default.computed.not("model.controller.askPassword"),
        }),
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please enter a password.",
          dependentKeys: ["model.controller.askPassword"],
          disabled: n.default.computed.not("model.controller.askPassword"),
        }),
      ],
      passwordConfirmation: (0, t.validator)("confirmation", {
        on: "password",
        message: "The confirmation should match the password.",
        dependentKeys: ["model.controller.askPassword"],
        disabled: n.default.computed.not("model.controller.askPassword"),
      }),
    });
  }),
  define("frontend/validations/controllers/student-registration", [
    "exports",
    "ember-cp-validations",
    "ember",
  ], function (e, t, n) {
    e.default = (0, t.buildValidations)({
      firstName: (0, t.validator)("presence", {
        presence: !0,
        message: "Please fill in your first name.",
      }),
      lastName: (0, t.validator)("presence", {
        presence: !0,
        message: "Please fill in your last name.",
      }),
      username: (0, t.validator)("presence", {
        presence: !0,
        message: "Please fill in your username.",
        dependentKeys: ["model.controller.askUsername"],
        disabled: n.default.computed.not("model.controller.askUsername"),
      }),
      password: [
        (0, t.validator)("length", {
          min: 4,
          message: "The password has to be at least {min} characters long.",
          dependentKeys: ["model.controller.askPassword"],
          disabled: n.default.computed.not("model.controller.askPassword"),
        }),
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please enter a password.",
          dependentKeys: ["model.controller.askPassword"],
          disabled: n.default.computed.not("model.controller.askPassword"),
        }),
      ],
      passwordConfirmation: (0, t.validator)("confirmation", {
        on: "password",
        message: "The confirmation should match the password.",
        dependentKeys: ["model.controller.askPassword"],
        disabled: n.default.computed.not("model.controller.askPassword"),
      }),
    });
  }),
  define("frontend/validations/controllers/teacher-registration", [
    "exports",
    "ember-cp-validations",
    "ember",
  ], function (e, t, n) {
    e.default = (0, t.buildValidations)({
      title: (0, t.validator)("presence", {
        presence: !0,
        message: "Please choose your title.",
      }),
      firstName: (0, t.validator)("presence", {
        presence: !0,
        message: "Please choose your first name.",
      }),
      lastName: (0, t.validator)("presence", {
        presence: !0,
        message: "Please choose your last name.",
      }),
      termsOfService: (0, t.validator)("acceptance", {
        message: "You must accept the terms of service.",
      }),
      email: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please enter an email address.",
          dependentKeys: ["model.controller.askEmail"],
          disabled: n.default.computed.not("model.controller.askEmail"),
        }),
      ],
      password: [
        (0, t.validator)("length", {
          min: 8,
          message: "The password has to be at least {min} characters long.",
          dependentKeys: ["model.controller.askPassword"],
          disabled: n.default.computed.not("model.controller.askPassword"),
        }),
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please enter a password.",
          dependentKeys: ["model.controller.askPassword"],
          disabled: n.default.computed.not("model.controller.askPassword"),
        }),
      ],
      passwordConfirmation: (0, t.validator)("confirmation", {
        on: "password",
        message: "The confirmation should match the password.",
        dependentKeys: ["model.controller.askPassword"],
        disabled: n.default.computed.not("model.controller.askPassword"),
      }),
    });
  }),
  define("frontend/validations/models/item", [
    "exports",
    "ember-cp-validations",
    "ember",
  ], function (e, t, n) {
    e.default = (0, t.buildValidations)({
      contentText: [
        (0, t.validator)("not-blank-rich-content", {
          message: "Add text",
          dependentKeys: ["model.contentText.isBlank"],
          disabled: n.default.computed(
            "model.{isForum,isQuote,isDidYouKnow}",
            function () {
              return !(
                this.get("model.isForum") ||
                this.get("model.isQuote") ||
                this.get("model.isDidYouKnow")
              );
            }
          ),
        }),
      ],
      audioFile: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Add an MP3 audio file",
          disabled: n.default.computed.not("model.isAudio"),
        }),
      ],
      imageFile: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Add an image",
          disabled: n.default.computed.not("model.isImage"),
        }),
      ],
      video: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Add a video",
          disabled: n.default.computed.not("model.isVideo"),
        }),
      ],
      quizQuestionText: [
        (0, t.validator)("not-blank-rich-content", {
          message: "Add a quiz question",
          dependentKeys: ["model.quizQuestionText.isBlank"],
          disabled: n.default.computed.not("model.isQuizQuestion"),
        }),
      ],
      quizQuestionMultipleChoiceAnswers: [
        (0, t.validator)("has-many"),
        (0, t.validator)("correct-quiz-answers", {
          min: 1,
          message: "Provide at least one correct answer.",
          dependentKeys: [
            "model.quizQuestionMultipleChoiceAnswers.@each.correct",
          ],
          disabled: n.default.computed.not(
            "model.isQuizQuestionMultipleChoice"
          ),
        }),
        (0, t.validator)("unique-quiz-answers", {
          message: "All answers should be different.",
          dependentKeys: ["model.quizQuestionMultipleChoiceAnswers.@each.text"],
          disabled: n.default.computed.not(
            "model.isQuizQuestionMultipleChoice"
          ),
        }),
      ],
      quizQuestionMatchingPairs: [
        (0, t.validator)("has-many"),
        (0, t.validator)("unique-quiz-pairs", {
          side: "left",
          message: "You cannot reuse the same left side for the same question.",
          dependentKeys: ["model.quizQuestionMatchingPairs.@each.left"],
          disabled: n.default.computed.not("model.isQuizQuestionMatching"),
        }),
        (0, t.validator)("unique-quiz-pairs", {
          side: "right",
          message:
            "You cannot reuse the same right side for the same question.",
          dependentKeys: ["model.quizQuestionMatchingPairs.@each.right"],
          disabled: n.default.computed.not("model.isQuizQuestionMatching"),
        }),
      ],
    });
  }),
  define("frontend/validations/models/organization", [
    "exports",
    "ember-cp-validations",
  ], function (e, t) {
    e.default = (0, t.buildValidations)({
      name: (0, t.validator)("presence", {
        presence: !0,
        message: "Please fill in a name for your organization.",
      }),
    });
  }),
  define("frontend/validations/models/quiz-question-matching-pair", [
    "exports",
    "ember-cp-validations",
  ], function (e, t) {
    e.default = (0, t.buildValidations)({
      left: (0, t.validator)("presence", {
        presence: !0,
        message: "The left side of a pair cannot be blank.",
      }),
      right: (0, t.validator)("presence", {
        presence: !0,
        message: "The right side of a pair cannot be blank.",
      }),
    });
  }),
  define("frontend/validations/models/quiz-question-multiple-choice-answer", [
    "exports",
    "ember-cp-validations",
  ], function (e, t) {
    e.default = (0, t.buildValidations)({
      text: (0, t.validator)("presence", {
        presence: !0,
        message: "Complete the empty answers above.",
      }),
    });
  }),
  define("frontend/validations/models/school-class", [
    "exports",
    "ember-cp-validations",
  ], function (e, t) {
    e.default = (0, t.buildValidations)({
      name: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please fill in a name for the class.",
        }),
        (0, t.validator)("unique-school-class-name-for-teacher", {
          dependentKeys: ["model.teacher.schoolClasses.@each.name"],
          message:
            "The class with this name already exists. Please use a different name.",
        }),
      ],
      subject: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please fill in a subject for the class.",
        }),
      ],
      grade: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Please choose a grade.",
        }),
      ],
    });
  }),
  define("frontend/validations/models/story-conclusion", [
    "exports",
    "ember-cp-validations",
  ], function (e, t) {
    e.default = (0, t.buildValidations)({
      contentText: [
        (0, t.validator)("not-blank-rich-content", {
          message: "Add some text",
          dependentKeys: ["model.contentText.isBlank"],
        }),
      ],
    });
  }),
  define("frontend/validations/models/story", [
    "exports",
    "ember-cp-validations",
  ], function (e, t) {
    e.default = (0, t.buildValidations)({
      title: [
        (0, t.validator)("presence", { presence: !0, message: "Add a title" }),
      ],
      items: (0, t.validator)("has-many"),
      storyConclusions: (0, t.validator)("has-many"),
    });
  }),
  define("frontend/validations/models/user", [
    "exports",
    "ember-cp-validations",
    "ember",
  ], function (e, t, n) {
    e.default = (0, t.buildValidations)({
      firstName: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "First name can't be empty.",
        }),
        (0, t.validator)("not-a-link"),
      ],
      lastName: [
        (0, t.validator)("presence", {
          presence: !0,
          message: "Last name can't be empty.",
        }),
        (0, t.validator)("not-a-link"),
      ],
      password: [
        (0, t.validator)("length", {
          min: 4,
          allowBlank: !0,
          message: "The new password has to be at least 4 characters long.",
          dependentKeys: ["model.isStudent"],
          disabled: n.default.computed.not("model.isStudent"),
        }),
      ],
    });
  }),
  define("frontend/validators/acceptance", [
    "exports",
    "ember-cp-validations/validators/base",
  ], function (e, t) {
    e.default = t.default.extend({
      validate: function (e, t) {
        return !!e || t.message;
      },
    });
  }),
  define("frontend/validators/alias", [
    "exports",
    "ember-cp-validations/validators/alias",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/belongs-to", [
    "exports",
    "ember-cp-validations/validators/belongs-to",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/collection", [
    "exports",
    "ember-cp-validations/validators/collection",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/confirmation", [
    "exports",
    "ember-cp-validations/validators/confirmation",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/correct-quiz-answers", [
    "exports",
    "ember-cp-validations/validators/base",
  ], function (e, t) {
    e.default = t.default.extend({
      validate: function (e, t) {
        return !(e.filterBy("correct").get("length") < t.min) || t.message;
      },
    });
  }),
  define("frontend/validators/date", [
    "exports",
    "ember-cp-validations/validators/date",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/dependent", [
    "exports",
    "ember-cp-validations/validators/dependent",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/ds-error", [
    "exports",
    "ember-cp-validations/validators/ds-error",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/exclusion", [
    "exports",
    "ember-cp-validations/validators/exclusion",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/format", [
    "exports",
    "ember-cp-validations/validators/format",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/has-many", [
    "exports",
    "ember-cp-validations/validators/has-many",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/inclusion", [
    "exports",
    "ember-cp-validations/validators/inclusion",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/length", [
    "exports",
    "ember-cp-validations/validators/length",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/messages", [
    "exports",
    "ember-cp-validations/validators/messages",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/not-a-link", [
    "exports",
    "ember-cp-validations/validators/base",
    "npm:psl",
    "npm:urijs",
    "frontend/utils/string-utils",
    "ember",
  ], function (e, t, n, s, o, a) {
    function i(e) {
      e = e.trim();
      var t = new s.default(e);
      return a.default.isPresent(t.hostname()) || n.default.isValid(e);
    }
    e.default = t.default.extend({
      validate: function (e, t, n, s) {
        return !i(e) || t.message || (0, o.decamelize)(s) + " can't be a link.";
      },
    });
  }),
  define("frontend/validators/not-blank-rich-content", [
    "exports",
    "ember-cp-validations/validators/base",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      validate: function (e, t) {
        return (!n.default.isNone(e) && !e.get("isBlank")) || t.message;
      },
    });
  }),
  define("frontend/validators/number", [
    "exports",
    "ember-cp-validations/validators/number",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/presence", [
    "exports",
    "ember-cp-validations/validators/presence",
  ], function (e, t) {
    Object.defineProperty(e, "default", {
      enumerable: !0,
      get: function () {
        return t.default;
      },
    });
  }),
  define("frontend/validators/unique-quiz-answers", [
    "exports",
    "ember-cp-validations/validators/base",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      validate: function (e, t) {
        var s = e.any(function (t) {
          var s = t.get("text"),
            o = e.filterBy("text", s);
          return !n.default.isBlank(s) && o.length > 1;
        });
        return !s || t.message;
      },
    });
  }),
  define("frontend/validators/unique-quiz-pairs", [
    "exports",
    "ember-cp-validations/validators/base",
    "ember",
  ], function (e, t, n) {
    e.default = t.default.extend({
      validate: function (e, t) {
        var s = e.any(function (s) {
          var o = s.get(t.side),
            a = e.filterBy(t.side, o);
          return !n.default.isBlank(o) && a.length > 1;
        });
        return !s || t.message;
      },
    });
  }),
  define("frontend/validators/unique-school-class-name-for-teacher", [
    "exports",
    "ember-cp-validations/validators/base",
  ], function (e, t) {
    e.default = t.default.extend({
      validate: function (e, t, n) {
        var s = n.get("teacher.schoolClasses").filter(function (e) {
          return e !== n;
        });
        return !s.mapBy("name").includes(e) || t.message;
      },
    });
  }),
  define("frontend/config/environment", ["ember"], function (e) {
    var t = "frontend";
    try {
      var n = t + "/config/environment",
        s = document
          .querySelector('meta[name="' + n + '"]')
          .getAttribute("content"),
        o = JSON.parse(unescape(s)),
        a = { default: o };
      return Object.defineProperty(a, "__esModule", { value: !0 }), a;
    } catch (e) {
      throw new Error(
        'Could not read config from meta tag with name "' + n + '".'
      );
    }
  }),
  runningTests ||
    require("frontend/app").default.create({
      CLOUDFRONT_CDN: "d1ox703z8b11rg.cloudfront.net",
      S3_BUCKET: "hstry-education-production",
      GOOGLE_API_KEY: "AIzaSyC6YMBq5_pxSoqqMXukdiYzAOx55zOIOrY",
      STRIPE_PUBLISHABLE_KEY: "pk_live_29HE9QqIT17Hu2Ah8sviuTDU",
      AMPLITUDE_API_KEY: "849cf4119663a548d25b6d86042559e3",
      CSP_REPORT_URI:
        "https://report-uri.io/report/16e0a4ba6a7e2613ac7fe8076f5c4e38",
      ADDTHIS_PROJECT_ID: "ra-56e1ad307ba29b04",
      SENTRY_JS_DSN:
        "https://163494a1acfc4e058d662d489b74c180@app.getsentry.com/26011",
      LOGROCKET_DSN:
        "https://fLbPESZNgzGNZYey2opz@logs.logrocket.com/hstry/production",
      INTERCOM_APP_ID: "z9rouqvv",
      ACTION_CABLE_ORIGIN: "wss://www.sutori.com",
      POLLING_ENABLED: !0,
      ADDTHIS_ENABLED: !0,
      name: "frontend",
      version: "1.0.0+648bd92b",
    });
//# sourceMappingURL=https://d1ox703z8b11rg.cloudfront.net/assets/frontend-590c39a048be6bfb8f813ea6ecc1323a.map
/*
page: http://www.sutori.com/
url: https://d1ox703z8b11rg.cloudfront.net/assets/frontend-368b9edca4c1629dc4bbb6260ba07340.js
*/
