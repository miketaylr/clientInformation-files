!(function (c, d) {
  "object" == typeof module && "object" == typeof module.exports
    ? (module.exports = c.document
        ? d(c, !0)
        : function (b) {
            if (!b.document) {
              throw new Error("jQuery requires a window with a document");
            }
            return d(b);
          })
    : d(c);
})("undefined" != typeof window ? window : this, function (a, b) {
  var c = [],
    d = c.slice,
    e = c.concat,
    f = c.push,
    g = c.indexOf,
    h = {},
    i = h.toString,
    j = h.hasOwnProperty,
    k = {},
    l = "1.11.1",
    m = function (a, b) {
      return new m.fn.init(a, b);
    },
    n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    o = /^-ms-/,
    p = /-([\da-z])/gi,
    q = function (a, b) {
      return b.toUpperCase();
    };
  (m.fn = m.prototype = {
    jquery: l,
    constructor: m,
    selector: "",
    length: 0,
    toArray: function () {
      return d.call(this);
    },
    get: function (a) {
      return null != a
        ? 0 > a
          ? this[a + this.length]
          : this[a]
        : d.call(this);
    },
    pushStack: function (a) {
      var b = m.merge(this.constructor(), a);
      return (b.prevObject = this), (b.context = this.context), b;
    },
    each: function (a, b) {
      return m.each(this, a, b);
    },
    map: function (a) {
      return this.pushStack(
        m.map(this, function (b, c) {
          return a.call(b, c, b);
        })
      );
    },
    slice: function () {
      return this.pushStack(d.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (a) {
      var b = this.length,
        c = +a + (0 > a ? b : 0);
      return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor(null);
    },
    push: f,
    sort: c.sort,
    splice: c.splice,
  }),
    (m.extend = m.fn.extend = function () {
      var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;
      for (
        "boolean" == typeof g && ((j = g), (g = arguments[h] || {}), h++),
          "object" == typeof g || m.isFunction(g) || (g = {}),
          h === i && ((g = this), h--);
        i > h;
        h++
      ) {
        if (null != (e = arguments[h])) {
          for (d in e) {
            (a = g[d]),
              (c = e[d]),
              g !== c &&
                (j && c && (m.isPlainObject(c) || (b = m.isArray(c)))
                  ? (b
                      ? ((b = !1), (f = a && m.isArray(a) ? a : []))
                      : (f = a && m.isPlainObject(a) ? a : {}),
                    (g[d] = m.extend(j, f, c)))
                  : void 0 !== c && (g[d] = c));
          }
        }
      }
      return g;
    }),
    m.extend({
      expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""),
      isReady: !0,
      error: function (a) {
        throw new Error(a);
      },
      noop: function () {},
      isFunction: function (a) {
        return "function" === m.type(a);
      },
      isArray:
        Array.isArray ||
        function (a) {
          return "array" === m.type(a);
        },
      isWindow: function (a) {
        return null != a && a == a.window;
      },
      isNumeric: function (a) {
        return !m.isArray(a) && a - parseFloat(a) >= 0;
      },
      isEmptyObject: function (a) {
        var b;
        for (b in a) {
          return !1;
        }
        return !0;
      },
      isPlainObject: function (a) {
        var b;
        if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) {
          return !1;
        }
        try {
          if (
            a.constructor &&
            !j.call(a, "constructor") &&
            !j.call(a.constructor.prototype, "isPrototypeOf")
          ) {
            return !1;
          }
        } catch (c) {
          return !1;
        }
        if (k.ownLast) {
          for (b in a) {
            return j.call(a, b);
          }
        }
        for (b in a) {
        }
        return void 0 === b || j.call(a, b);
      },
      type: function (a) {
        return null == a
          ? a + ""
          : "object" == typeof a || "function" == typeof a
          ? h[i.call(a)] || "object"
          : typeof a;
      },
      globalEval: function (b) {
        b &&
          m.trim(b) &&
          (
            a.execScript ||
            function (b) {
              a.eval.call(a, b);
            }
          )(b);
      },
      camelCase: function (a) {
        return a.replace(o, "ms-").replace(p, q);
      },
      nodeName: function (a, b) {
        return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
      },
      each: function (a, b, c) {
        var d,
          e = 0,
          f = a.length,
          g = r(a);
        if (c) {
          if (g) {
            for (; f > e; e++) {
              if (((d = b.apply(a[e], c)), d === !1)) {
                break;
              }
            }
          } else {
            for (e in a) {
              if (((d = b.apply(a[e], c)), d === !1)) {
                break;
              }
            }
          }
        } else {
          if (g) {
            for (; f > e; e++) {
              if (((d = b.call(a[e], e, a[e])), d === !1)) {
                break;
              }
            }
          } else {
            for (e in a) {
              if (((d = b.call(a[e], e, a[e])), d === !1)) {
                break;
              }
            }
          }
        }
        return a;
      },
      trim: function (a) {
        return null == a ? "" : (a + "").replace(n, "");
      },
      makeArray: function (a, b) {
        var c = b || [];
        return (
          null != a &&
            (r(Object(a))
              ? m.merge(c, "string" == typeof a ? [a] : a)
              : f.call(c, a)),
          c
        );
      },
      inArray: function (a, b, c) {
        var d;
        if (b) {
          if (g) {
            return g.call(b, a, c);
          }
          for (
            d = b.length, c = c ? (0 > c ? Math.max(0, d + c) : c) : 0;
            d > c;
            c++
          ) {
            if (c in b && b[c] === a) {
              return c;
            }
          }
        }
        return -1;
      },
      merge: function (a, b) {
        var c = +b.length,
          d = 0,
          e = a.length;
        while (c > d) {
          a[e++] = b[d++];
        }
        if (c !== c) {
          while (void 0 !== b[d]) {
            a[e++] = b[d++];
          }
        }
        return (a.length = e), a;
      },
      grep: function (a, b, c) {
        for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
          (d = !b(a[f], f)), d !== h && e.push(a[f]);
        }
        return e;
      },
      map: function (a, b, c) {
        var d,
          f = 0,
          g = a.length,
          h = r(a),
          i = [];
        if (h) {
          for (; g > f; f++) {
            (d = b(a[f], f, c)), null != d && i.push(d);
          }
        } else {
          for (f in a) {
            (d = b(a[f], f, c)), null != d && i.push(d);
          }
        }
        return e.apply([], i);
      },
      guid: 1,
      proxy: function (a, b) {
        var c, e, f;
        return (
          "string" == typeof b && ((f = a[b]), (b = a), (a = f)),
          m.isFunction(a)
            ? ((c = d.call(arguments, 2)),
              (e = function () {
                return a.apply(b || this, c.concat(d.call(arguments)));
              }),
              (e.guid = a.guid = a.guid || m.guid++),
              e)
            : void 0
        );
      },
      now: function () {
        return +new Date();
      },
      support: k,
    }),
    m.each(
      "Boolean Number String Function Array Date RegExp Object Error".split(
        " "
      ),
      function (a, b) {
        h["[object " + b + "]"] = b.toLowerCase();
      }
    );
  function r(a) {
    var b = a.length,
      c = m.type(a);
    return "function" === c || m.isWindow(a)
      ? !1
      : 1 === a.nodeType && b
      ? !0
      : "array" === c ||
        0 === b ||
        ("number" == typeof b && b > 0 && b - 1 in a);
  }
  var s = (function (a) {
    var b,
      c,
      d,
      e,
      f,
      g,
      h,
      i,
      j,
      k,
      l,
      m,
      n,
      o,
      p,
      q,
      r,
      s,
      t,
      u = "sizzle" + -new Date(),
      v = a.document,
      w = 0,
      x = 0,
      y = gb(),
      z = gb(),
      A = gb(),
      B = function (a, b) {
        return a === b && (l = !0), 0;
      },
      C = "undefined",
      D = 1 << 31,
      E = {}.hasOwnProperty,
      F = [],
      G = F.pop,
      H = F.push,
      I = F.push,
      J = F.slice,
      K =
        F.indexOf ||
        function (a) {
          for (var b = 0, c = this.length; c > b; b++) {
            if (this[b] === a) {
              return b;
            }
          }
          return -1;
        },
      L =
        "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
      M = "[\\x20\\t\\r\\n\\f]",
      N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
      O = N.replace("w", "w#"),
      P =
        "\\[" +
        M +
        "*(" +
        N +
        ")(?:" +
        M +
        "*([*^$|!~]?=)" +
        M +
        "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" +
        O +
        "))|)" +
        M +
        "*\\]",
      Q =
        ":(" +
        N +
        ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" +
        P +
        ")*)|.*)\\)|)",
      R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
      S = new RegExp("^" + M + "*," + M + "*"),
      T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
      U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
      V = new RegExp(Q),
      W = new RegExp("^" + O + "$"),
      X = {
        ID: new RegExp("^#(" + N + ")"),
        CLASS: new RegExp("^\\.(" + N + ")"),
        TAG: new RegExp("^(" + N.replace("w", "w*") + ")"),
        ATTR: new RegExp("^" + P),
        PSEUDO: new RegExp("^" + Q),
        CHILD: new RegExp(
          "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
            M +
            "*(even|odd|(([+-]|)(\\d*)n|)" +
            M +
            "*(?:([+-]|)" +
            M +
            "*(\\d+)|))" +
            M +
            "*\\)|)",
          "i"
        ),
        bool: new RegExp("^(?:" + L + ")$", "i"),
        needsContext: new RegExp(
          "^" +
            M +
            "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
            M +
            "*((?:-\\d)?\\d*)" +
            M +
            "*\\)|)(?=[^-]|$)",
          "i"
        ),
      },
      Y = /^(?:input|select|textarea|button)$/i,
      Z = /^h\d$/i,
      $ = /^[^{]+\{\s*\[native \w/,
      _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      ab = /[+~]/,
      bb = /'|\\/g,
      cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
      db = function (a, b, c) {
        var d = "0x" + b - 65536;
        return d !== d || c
          ? b
          : 0 > d
          ? String.fromCharCode(d + 65536)
          : String.fromCharCode((d >> 10) | 55296, (1023 & d) | 56320);
      };
    try {
      I.apply((F = J.call(v.childNodes)), v.childNodes),
        F[v.childNodes.length].nodeType;
    } catch (eb) {
      I = {
        apply: F.length
          ? function (a, b) {
              H.apply(a, J.call(b));
            }
          : function (a, b) {
              var c = a.length,
                d = 0;
              while ((a[c++] = b[d++])) {}
              a.length = c - 1;
            },
      };
    }
    function fb(a, b, d, e) {
      var f, h, j, k, l, o, r, s, w, x;
      if (
        ((b ? b.ownerDocument || b : v) !== n && m(b),
        (b = b || n),
        (d = d || []),
        !a || "string" != typeof a)
      ) {
        return d;
      }
      if (1 !== (k = b.nodeType) && 9 !== k) {
        return [];
      }
      if (p && !e) {
        if ((f = _.exec(a))) {
          if ((j = f[1])) {
            if (9 === k) {
              if (((h = b.getElementById(j)), !h || !h.parentNode)) {
                return d;
              }
              if (h.id === j) {
                return d.push(h), d;
              }
            } else {
              if (
                b.ownerDocument &&
                (h = b.ownerDocument.getElementById(j)) &&
                t(b, h) &&
                h.id === j
              ) {
                return d.push(h), d;
              }
            }
          } else {
            if (f[2]) {
              return I.apply(d, b.getElementsByTagName(a)), d;
            }
            if (
              (j = f[3]) &&
              c.getElementsByClassName &&
              b.getElementsByClassName
            ) {
              return I.apply(d, b.getElementsByClassName(j)), d;
            }
          }
        }
        if (c.qsa && (!q || !q.test(a))) {
          if (
            ((s = r = u),
            (w = b),
            (x = 9 === k && a),
            1 === k && "object" !== b.nodeName.toLowerCase())
          ) {
            (o = g(a)),
              (r = b.getAttribute("id"))
                ? (s = r.replace(bb, "\\$&"))
                : b.setAttribute("id", s),
              (s = "[id='" + s + "'] "),
              (l = o.length);
            while (l--) {
              o[l] = s + qb(o[l]);
            }
            (w = (ab.test(a) && ob(b.parentNode)) || b), (x = o.join(","));
          }
          if (x) {
            try {
              return I.apply(d, w.querySelectorAll(x)), d;
            } catch (y) {
            } finally {
              r || b.removeAttribute("id");
            }
          }
        }
      }
      return i(a.replace(R, "$1"), b, d, e);
    }
    function gb() {
      var a = [];
      function b(c, e) {
        return (
          a.push(c + " ") > d.cacheLength && delete b[a.shift()],
          (b[c + " "] = e)
        );
      }
      return b;
    }
    function hb(a) {
      return (a[u] = !0), a;
    }
    function ib(a) {
      var b = n.createElement("div");
      try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), (b = null);
      }
    }
    function jb(a, b) {
      var c = a.split("|"),
        e = a.length;
      while (e--) {
        d.attrHandle[c[e]] = b;
      }
    }
    function kb(a, b) {
      var c = b && a,
        d =
          c &&
          1 === a.nodeType &&
          1 === b.nodeType &&
          (~b.sourceIndex || D) - (~a.sourceIndex || D);
      if (d) {
        return d;
      }
      if (c) {
        while ((c = c.nextSibling)) {
          if (c === b) {
            return -1;
          }
        }
      }
      return a ? 1 : -1;
    }
    function lb(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return "input" === c && b.type === a;
      };
    }
    function mb(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();
        return ("input" === c || "button" === c) && b.type === a;
      };
    }
    function nb(a) {
      return hb(function (b) {
        return (
          (b = +b),
          hb(function (c, d) {
            var e,
              f = a([], c.length, b),
              g = f.length;
            while (g--) {
              c[(e = f[g])] && (c[e] = !(d[e] = c[e]));
            }
          })
        );
      });
    }
    function ob(a) {
      return a && typeof a.getElementsByTagName !== C && a;
    }
    (c = fb.support = {}),
      (f = fb.isXML = function (a) {
        var b = a && (a.ownerDocument || a).documentElement;
        return b ? "HTML" !== b.nodeName : !1;
      }),
      (m = fb.setDocument = function (a) {
        var b,
          e = a ? a.ownerDocument || a : v,
          g = e.defaultView;
        return e !== n && 9 === e.nodeType && e.documentElement
          ? ((n = e),
            (o = e.documentElement),
            (p = !f(e)),
            g &&
              g !== g.top &&
              (g.addEventListener
                ? g.addEventListener(
                    "unload",
                    function () {
                      m();
                    },
                    !1
                  )
                : g.attachEvent &&
                  g.attachEvent("onunload", function () {
                    m();
                  })),
            (c.attributes = ib(function (a) {
              return (a.className = "i"), !a.getAttribute("className");
            })),
            (c.getElementsByTagName = ib(function (a) {
              return (
                a.appendChild(e.createComment("")),
                !a.getElementsByTagName("*").length
              );
            })),
            (c.getElementsByClassName =
              $.test(e.getElementsByClassName) &&
              ib(function (a) {
                return (
                  (a.innerHTML =
                    "<div class='a'></div><div class='a i'></div>"),
                  (a.firstChild.className = "i"),
                  2 === a.getElementsByClassName("i").length
                );
              })),
            (c.getById = ib(function (a) {
              return (
                (o.appendChild(a).id = u),
                !e.getElementsByName || !e.getElementsByName(u).length
              );
            })),
            c.getById
              ? ((d.find.ID = function (a, b) {
                  if (typeof b.getElementById !== C && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [c] : [];
                  }
                }),
                (d.filter.ID = function (a) {
                  var b = a.replace(cb, db);
                  return function (a) {
                    return a.getAttribute("id") === b;
                  };
                }))
              : (delete d.find.ID,
                (d.filter.ID = function (a) {
                  var b = a.replace(cb, db);
                  return function (a) {
                    var c =
                      typeof a.getAttributeNode !== C &&
                      a.getAttributeNode("id");
                    return c && c.value === b;
                  };
                })),
            (d.find.TAG = c.getElementsByTagName
              ? function (a, b) {
                  return typeof b.getElementsByTagName !== C
                    ? b.getElementsByTagName(a)
                    : void 0;
                }
              : function (a, b) {
                  var c,
                    d = [],
                    e = 0,
                    f = b.getElementsByTagName(a);
                  if ("*" === a) {
                    while ((c = f[e++])) {
                      1 === c.nodeType && d.push(c);
                    }
                    return d;
                  }
                  return f;
                }),
            (d.find.CLASS =
              c.getElementsByClassName &&
              function (a, b) {
                return typeof b.getElementsByClassName !== C && p
                  ? b.getElementsByClassName(a)
                  : void 0;
              }),
            (r = []),
            (q = []),
            (c.qsa = $.test(e.querySelectorAll)) &&
              (ib(function (a) {
                (a.innerHTML =
                  "<select msallowclip=''><option selected=''></option></select>"),
                  a.querySelectorAll("[msallowclip^='']").length &&
                    q.push("[*^$]=" + M + "*(?:''|\"\")"),
                  a.querySelectorAll("[selected]").length ||
                    q.push("\\[" + M + "*(?:value|" + L + ")"),
                  a.querySelectorAll(":checked").length || q.push(":checked");
              }),
              ib(function (a) {
                var b = e.createElement("input");
                b.setAttribute("type", "hidden"),
                  a.appendChild(b).setAttribute("name", "D"),
                  a.querySelectorAll("[name=d]").length &&
                    q.push("name" + M + "*[*^$|!~]?="),
                  a.querySelectorAll(":enabled").length ||
                    q.push(":enabled", ":disabled"),
                  a.querySelectorAll("*,:x"),
                  q.push(",.*:");
              })),
            (c.matchesSelector = $.test(
              (s =
                o.matches ||
                o.webkitMatchesSelector ||
                o.mozMatchesSelector ||
                o.oMatchesSelector ||
                o.msMatchesSelector)
            )) &&
              ib(function (a) {
                (c.disconnectedMatch = s.call(a, "div")),
                  s.call(a, "[s!='']:x"),
                  r.push("!=", Q);
              }),
            (q = q.length && new RegExp(q.join("|"))),
            (r = r.length && new RegExp(r.join("|"))),
            (b = $.test(o.compareDocumentPosition)),
            (t =
              b || $.test(o.contains)
                ? function (a, b) {
                    var c = 9 === a.nodeType ? a.documentElement : a,
                      d = b && b.parentNode;
                    return (
                      a === d ||
                      !(
                        !d ||
                        1 !== d.nodeType ||
                        !(c.contains
                          ? c.contains(d)
                          : a.compareDocumentPosition &&
                            16 & a.compareDocumentPosition(d))
                      )
                    );
                  }
                : function (a, b) {
                    if (b) {
                      while ((b = b.parentNode)) {
                        if (b === a) {
                          return !0;
                        }
                      }
                    }
                    return !1;
                  }),
            (B = b
              ? function (a, b) {
                  if (a === b) {
                    return (l = !0), 0;
                  }
                  var d =
                    !a.compareDocumentPosition - !b.compareDocumentPosition;
                  return d
                    ? d
                    : ((d =
                        (a.ownerDocument || a) === (b.ownerDocument || b)
                          ? a.compareDocumentPosition(b)
                          : 1),
                      1 & d ||
                      (!c.sortDetached && b.compareDocumentPosition(a) === d)
                        ? a === e || (a.ownerDocument === v && t(v, a))
                          ? -1
                          : b === e || (b.ownerDocument === v && t(v, b))
                          ? 1
                          : k
                          ? K.call(k, a) - K.call(k, b)
                          : 0
                        : 4 & d
                        ? -1
                        : 1);
                }
              : function (a, b) {
                  if (a === b) {
                    return (l = !0), 0;
                  }
                  var c,
                    d = 0,
                    f = a.parentNode,
                    g = b.parentNode,
                    h = [a],
                    i = [b];
                  if (!f || !g) {
                    return a === e
                      ? -1
                      : b === e
                      ? 1
                      : f
                      ? -1
                      : g
                      ? 1
                      : k
                      ? K.call(k, a) - K.call(k, b)
                      : 0;
                  }
                  if (f === g) {
                    return kb(a, b);
                  }
                  c = a;
                  while ((c = c.parentNode)) {
                    h.unshift(c);
                  }
                  c = b;
                  while ((c = c.parentNode)) {
                    i.unshift(c);
                  }
                  while (h[d] === i[d]) {
                    d++;
                  }
                  return d
                    ? kb(h[d], i[d])
                    : h[d] === v
                    ? -1
                    : i[d] === v
                    ? 1
                    : 0;
                }),
            e)
          : n;
      }),
      (fb.matches = function (a, b) {
        return fb(a, null, null, b);
      }),
      (fb.matchesSelector = function (a, b) {
        if (
          ((a.ownerDocument || a) !== n && m(a),
          (b = b.replace(U, "='$1']")),
          !(!c.matchesSelector || !p || (r && r.test(b)) || (q && q.test(b))))
        ) {
          try {
            var d = s.call(a, b);
            if (
              d ||
              c.disconnectedMatch ||
              (a.document && 11 !== a.document.nodeType)
            ) {
              return d;
            }
          } catch (e) {}
        }
        return fb(b, n, null, [a]).length > 0;
      }),
      (fb.contains = function (a, b) {
        return (a.ownerDocument || a) !== n && m(a), t(a, b);
      }),
      (fb.attr = function (a, b) {
        (a.ownerDocument || a) !== n && m(a);
        var e = d.attrHandle[b.toLowerCase()],
          f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
        return void 0 !== f
          ? f
          : c.attributes || !p
          ? a.getAttribute(b)
          : (f = a.getAttributeNode(b)) && f.specified
          ? f.value
          : null;
      }),
      (fb.error = function (a) {
        throw new Error("Syntax error, unrecognized expression: " + a);
      }),
      (fb.uniqueSort = function (a) {
        var b,
          d = [],
          e = 0,
          f = 0;
        if (
          ((l = !c.detectDuplicates),
          (k = !c.sortStable && a.slice(0)),
          a.sort(B),
          l)
        ) {
          while ((b = a[f++])) {
            b === a[f] && (e = d.push(f));
          }
          while (e--) {
            a.splice(d[e], 1);
          }
        }
        return (k = null), a;
      }),
      (e = fb.getText = function (a) {
        var b,
          c = "",
          d = 0,
          f = a.nodeType;
        if (f) {
          if (1 === f || 9 === f || 11 === f) {
            if ("string" == typeof a.textContent) {
              return a.textContent;
            }
            for (a = a.firstChild; a; a = a.nextSibling) {
              c += e(a);
            }
          } else {
            if (3 === f || 4 === f) {
              return a.nodeValue;
            }
          }
        } else {
          while ((b = a[d++])) {
            c += e(b);
          }
        }
        return c;
      }),
      (d = fb.selectors = {
        cacheLength: 50,
        createPseudo: hb,
        match: X,
        attrHandle: {},
        find: {},
        relative: {
          ">": { dir: "parentNode", first: !0 },
          " ": { dir: "parentNode" },
          "+": { dir: "previousSibling", first: !0 },
          "~": { dir: "previousSibling" },
        },
        preFilter: {
          ATTR: function (a) {
            return (
              (a[1] = a[1].replace(cb, db)),
              (a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db)),
              "~=" === a[2] && (a[3] = " " + a[3] + " "),
              a.slice(0, 4)
            );
          },
          CHILD: function (a) {
            return (
              (a[1] = a[1].toLowerCase()),
              "nth" === a[1].slice(0, 3)
                ? (a[3] || fb.error(a[0]),
                  (a[4] = +(a[4]
                    ? a[5] + (a[6] || 1)
                    : 2 * ("even" === a[3] || "odd" === a[3]))),
                  (a[5] = +(a[7] + a[8] || "odd" === a[3])))
                : a[3] && fb.error(a[0]),
              a
            );
          },
          PSEUDO: function (a) {
            var b,
              c = !a[6] && a[2];
            return X.CHILD.test(a[0])
              ? null
              : (a[3]
                  ? (a[2] = a[4] || a[5] || "")
                  : c &&
                    V.test(c) &&
                    (b = g(c, !0)) &&
                    (b = c.indexOf(")", c.length - b) - c.length) &&
                    ((a[0] = a[0].slice(0, b)), (a[2] = c.slice(0, b))),
                a.slice(0, 3));
          },
        },
        filter: {
          TAG: function (a) {
            var b = a.replace(cb, db).toLowerCase();
            return "*" === a
              ? function () {
                  return !0;
                }
              : function (a) {
                  return a.nodeName && a.nodeName.toLowerCase() === b;
                };
          },
          CLASS: function (a) {
            var b = y[a + " "];
            return (
              b ||
              ((b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) &&
                y(a, function (a) {
                  return b.test(
                    ("string" == typeof a.className && a.className) ||
                      (typeof a.getAttribute !== C &&
                        a.getAttribute("class")) ||
                      ""
                  );
                }))
            );
          },
          ATTR: function (a, b, c) {
            return function (d) {
              var e = fb.attr(d, a);
              return null == e
                ? "!=" === b
                : b
                ? ((e += ""),
                  "=" === b
                    ? e === c
                    : "!=" === b
                    ? e !== c
                    : "^=" === b
                    ? c && 0 === e.indexOf(c)
                    : "*=" === b
                    ? c && e.indexOf(c) > -1
                    : "$=" === b
                    ? c && e.slice(-c.length) === c
                    : "~=" === b
                    ? (" " + e + " ").indexOf(c) > -1
                    : "|=" === b
                    ? e === c || e.slice(0, c.length + 1) === c + "-"
                    : !1)
                : !0;
            };
          },
          CHILD: function (a, b, c, d, e) {
            var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;
            return 1 === d && 0 === e
              ? function (a) {
                  return !!a.parentNode;
                }
              : function (b, c, i) {
                  var j,
                    k,
                    l,
                    m,
                    n,
                    o,
                    p = f !== g ? "nextSibling" : "previousSibling",
                    q = b.parentNode,
                    r = h && b.nodeName.toLowerCase(),
                    s = !i && !h;
                  if (q) {
                    if (f) {
                      while (p) {
                        l = b;
                        while ((l = l[p])) {
                          if (
                            h
                              ? l.nodeName.toLowerCase() === r
                              : 1 === l.nodeType
                          ) {
                            return !1;
                          }
                        }
                        o = p = "only" === a && !o && "nextSibling";
                      }
                      return !0;
                    }
                    if (((o = [g ? q.firstChild : q.lastChild]), g && s)) {
                      (k = q[u] || (q[u] = {})),
                        (j = k[a] || []),
                        (n = j[0] === w && j[1]),
                        (m = j[0] === w && j[2]),
                        (l = n && q.childNodes[n]);
                      while (
                        (l = (++n && l && l[p]) || (m = n = 0) || o.pop())
                      ) {
                        if (1 === l.nodeType && ++m && l === b) {
                          k[a] = [w, n, m];
                          break;
                        }
                      }
                    } else {
                      if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) {
                        m = j[1];
                      } else {
                        while (
                          (l = (++n && l && l[p]) || (m = n = 0) || o.pop())
                        ) {
                          if (
                            (h
                              ? l.nodeName.toLowerCase() === r
                              : 1 === l.nodeType) &&
                            ++m &&
                            (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)
                          ) {
                            break;
                          }
                        }
                      }
                    }
                    return (m -= e), m === d || (m % d === 0 && m / d >= 0);
                  }
                };
          },
          PSEUDO: function (a, b) {
            var c,
              e =
                d.pseudos[a] ||
                d.setFilters[a.toLowerCase()] ||
                fb.error("unsupported pseudo: " + a);
            return e[u]
              ? e(b)
              : e.length > 1
              ? ((c = [a, a, "", b]),
                d.setFilters.hasOwnProperty(a.toLowerCase())
                  ? hb(function (a, c) {
                      var d,
                        f = e(a, b),
                        g = f.length;
                      while (g--) {
                        (d = K.call(a, f[g])), (a[d] = !(c[d] = f[g]));
                      }
                    })
                  : function (a) {
                      return e(a, 0, c);
                    })
              : e;
          },
        },
        pseudos: {
          not: hb(function (a) {
            var b = [],
              c = [],
              d = h(a.replace(R, "$1"));
            return d[u]
              ? hb(function (a, b, c, e) {
                  var f,
                    g = d(a, null, e, []),
                    h = a.length;
                  while (h--) {
                    (f = g[h]) && (a[h] = !(b[h] = f));
                  }
                })
              : function (a, e, f) {
                  return (b[0] = a), d(b, null, f, c), !c.pop();
                };
          }),
          has: hb(function (a) {
            return function (b) {
              return fb(a, b).length > 0;
            };
          }),
          contains: hb(function (a) {
            return function (b) {
              return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
            };
          }),
          lang: hb(function (a) {
            return (
              W.test(a || "") || fb.error("unsupported lang: " + a),
              (a = a.replace(cb, db).toLowerCase()),
              function (b) {
                var c;
                do {
                  if (
                    (c = p
                      ? b.lang
                      : b.getAttribute("xml:lang") || b.getAttribute("lang"))
                  ) {
                    return (
                      (c = c.toLowerCase()), c === a || 0 === c.indexOf(a + "-")
                    );
                  }
                } while ((b = b.parentNode) && 1 === b.nodeType);
                return !1;
              }
            );
          }),
          target: function (b) {
            var c = a.location && a.location.hash;
            return c && c.slice(1) === b.id;
          },
          root: function (a) {
            return a === o;
          },
          focus: function (a) {
            return (
              a === n.activeElement &&
              (!n.hasFocus || n.hasFocus()) &&
              !!(a.type || a.href || ~a.tabIndex)
            );
          },
          enabled: function (a) {
            return a.disabled === !1;
          },
          disabled: function (a) {
            return a.disabled === !0;
          },
          checked: function (a) {
            var b = a.nodeName.toLowerCase();
            return (
              ("input" === b && !!a.checked) || ("option" === b && !!a.selected)
            );
          },
          selected: function (a) {
            return (
              a.parentNode && a.parentNode.selectedIndex, a.selected === !0
            );
          },
          empty: function (a) {
            for (a = a.firstChild; a; a = a.nextSibling) {
              if (a.nodeType < 6) {
                return !1;
              }
            }
            return !0;
          },
          parent: function (a) {
            return !d.pseudos.empty(a);
          },
          header: function (a) {
            return Z.test(a.nodeName);
          },
          input: function (a) {
            return Y.test(a.nodeName);
          },
          button: function (a) {
            var b = a.nodeName.toLowerCase();
            return ("input" === b && "button" === a.type) || "button" === b;
          },
          text: function (a) {
            var b;
            return (
              "input" === a.nodeName.toLowerCase() &&
              "text" === a.type &&
              (null == (b = a.getAttribute("type")) ||
                "text" === b.toLowerCase())
            );
          },
          first: nb(function () {
            return [0];
          }),
          last: nb(function (a, b) {
            return [b - 1];
          }),
          eq: nb(function (a, b, c) {
            return [0 > c ? c + b : c];
          }),
          even: nb(function (a, b) {
            for (var c = 0; b > c; c += 2) {
              a.push(c);
            }
            return a;
          }),
          odd: nb(function (a, b) {
            for (var c = 1; b > c; c += 2) {
              a.push(c);
            }
            return a;
          }),
          lt: nb(function (a, b, c) {
            for (var d = 0 > c ? c + b : c; --d >= 0; ) {
              a.push(d);
            }
            return a;
          }),
          gt: nb(function (a, b, c) {
            for (var d = 0 > c ? c + b : c; ++d < b; ) {
              a.push(d);
            }
            return a;
          }),
        },
      }),
      (d.pseudos.nth = d.pseudos.eq);
    for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
      d.pseudos[b] = lb(b);
    }
    for (b in { submit: !0, reset: !0 }) {
      d.pseudos[b] = mb(b);
    }
    function pb() {}
    (pb.prototype = d.filters = d.pseudos),
      (d.setFilters = new pb()),
      (g = fb.tokenize = function (a, b) {
        var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];
        if (k) {
          return b ? 0 : k.slice(0);
        }
        (h = a), (i = []), (j = d.preFilter);
        while (h) {
          (!c || (e = S.exec(h))) &&
            (e && (h = h.slice(e[0].length) || h), i.push((f = []))),
            (c = !1),
            (e = T.exec(h)) &&
              ((c = e.shift()),
              f.push({ value: c, type: e[0].replace(R, " ") }),
              (h = h.slice(c.length)));
          for (g in d.filter) {
            !(e = X[g].exec(h)) ||
              (j[g] && !(e = j[g](e))) ||
              ((c = e.shift()),
              f.push({ value: c, type: g, matches: e }),
              (h = h.slice(c.length)));
          }
          if (!c) {
            break;
          }
        }
        return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);
      });
    function qb(a) {
      for (var b = 0, c = a.length, d = ""; c > b; b++) {
        d += a[b].value;
      }
      return d;
    }
    function rb(a, b, c) {
      var d = b.dir,
        e = c && "parentNode" === d,
        f = x++;
      return b.first
        ? function (b, c, f) {
            while ((b = b[d])) {
              if (1 === b.nodeType || e) {
                return a(b, c, f);
              }
            }
          }
        : function (b, c, g) {
            var h,
              i,
              j = [w, f];
            if (g) {
              while ((b = b[d])) {
                if ((1 === b.nodeType || e) && a(b, c, g)) {
                  return !0;
                }
              }
            } else {
              while ((b = b[d])) {
                if (1 === b.nodeType || e) {
                  if (
                    ((i = b[u] || (b[u] = {})),
                    (h = i[d]) && h[0] === w && h[1] === f)
                  ) {
                    return (j[2] = h[2]);
                  }
                  if (((i[d] = j), (j[2] = a(b, c, g)))) {
                    return !0;
                  }
                }
              }
            }
          };
    }
    function sb(a) {
      return a.length > 1
        ? function (b, c, d) {
            var e = a.length;
            while (e--) {
              if (!a[e](b, c, d)) {
                return !1;
              }
            }
            return !0;
          }
        : a[0];
    }
    function tb(a, b, c) {
      for (var d = 0, e = b.length; e > d; d++) {
        fb(a, b[d], c);
      }
      return c;
    }
    function ub(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {
        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
      }
      return g;
    }
    function vb(a, b, c, d, e, f) {
      return (
        d && !d[u] && (d = vb(d)),
        e && !e[u] && (e = vb(e, f)),
        hb(function (f, g, h, i) {
          var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || tb(b || "*", h.nodeType ? [h] : h, []),
            q = !a || (!f && b) ? p : ub(p, m, a, h, i),
            r = c ? (e || (f ? a : o || d) ? [] : g) : q;
          if ((c && c(q, r, h, i), d)) {
            (j = ub(r, n)), d(j, [], h, i), (k = j.length);
            while (k--) {
              (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
            }
          }
          if (f) {
            if (e || a) {
              if (e) {
                (j = []), (k = r.length);
                while (k--) {
                  (l = r[k]) && j.push((q[k] = l));
                }
                e(null, (r = []), j, i);
              }
              k = r.length;
              while (k--) {
                (l = r[k]) &&
                  (j = e ? K.call(f, l) : m[k]) > -1 &&
                  (f[j] = !(g[j] = l));
              }
            }
          } else {
            (r = ub(r === g ? r.splice(o, r.length) : r)),
              e ? e(null, g, r, i) : I.apply(g, r);
          }
        })
      );
    }
    function wb(a) {
      for (
        var b,
          c,
          e,
          f = a.length,
          g = d.relative[a[0].type],
          h = g || d.relative[" "],
          i = g ? 1 : 0,
          k = rb(
            function (a) {
              return a === b;
            },
            h,
            !0
          ),
          l = rb(
            function (a) {
              return K.call(b, a) > -1;
            },
            h,
            !0
          ),
          m = [
            function (a, c, d) {
              return (
                (!g && (d || c !== j)) ||
                ((b = c).nodeType ? k(a, c, d) : l(a, c, d))
              );
            },
          ];
        f > i;
        i++
      ) {
        if ((c = d.relative[a[i].type])) {
          m = [rb(sb(m), c)];
        } else {
          if (((c = d.filter[a[i].type].apply(null, a[i].matches)), c[u])) {
            for (e = ++i; f > e; e++) {
              if (d.relative[a[e].type]) {
                break;
              }
            }
            return vb(
              i > 1 && sb(m),
              i > 1 &&
                qb(
                  a
                    .slice(0, i - 1)
                    .concat({ value: " " === a[i - 2].type ? "*" : "" })
                ).replace(R, "$1"),
              c,
              e > i && wb(a.slice(i, e)),
              f > e && wb((a = a.slice(e))),
              f > e && qb(a)
            );
          }
          m.push(c);
        }
      }
      return sb(m);
    }
    function xb(a, b) {
      var c = b.length > 0,
        e = a.length > 0,
        f = function (f, g, h, i, k) {
          var l,
            m,
            o,
            p = 0,
            q = "0",
            r = f && [],
            s = [],
            t = j,
            u = f || (e && d.find.TAG("*", k)),
            v = (w += null == t ? 1 : Math.random() || 0.1),
            x = u.length;
          for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
            if (e && l) {
              m = 0;
              while ((o = a[m++])) {
                if (o(l, g, h)) {
                  i.push(l);
                  break;
                }
              }
              k && (w = v);
            }
            c && ((l = !o && l) && p--, f && r.push(l));
          }
          if (((p += q), c && q !== p)) {
            m = 0;
            while ((o = b[m++])) {
              o(r, s, g, h);
            }
            if (f) {
              if (p > 0) {
                while (q--) {
                  r[q] || s[q] || (s[q] = G.call(i));
                }
              }
              s = ub(s);
            }
            I.apply(i, s),
              k && !f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);
          }
          return k && ((w = v), (j = t)), r;
        };
      return c ? hb(f) : f;
    }
    return (
      (h = fb.compile = function (a, b) {
        var c,
          d = [],
          e = [],
          f = A[a + " "];
        if (!f) {
          b || (b = g(a)), (c = b.length);
          while (c--) {
            (f = wb(b[c])), f[u] ? d.push(f) : e.push(f);
          }
          (f = A(a, xb(e, d))), (f.selector = a);
        }
        return f;
      }),
      (i = fb.select = function (a, b, e, f) {
        var i,
          j,
          k,
          l,
          m,
          n = "function" == typeof a && a,
          o = !f && g((a = n.selector || a));
        if (((e = e || []), 1 === o.length)) {
          if (
            ((j = o[0] = o[0].slice(0)),
            j.length > 2 &&
              "ID" === (k = j[0]).type &&
              c.getById &&
              9 === b.nodeType &&
              p &&
              d.relative[j[1].type])
          ) {
            if (
              ((b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0]), !b)
            ) {
              return e;
            }
            n && (b = b.parentNode), (a = a.slice(j.shift().value.length));
          }
          i = X.needsContext.test(a) ? 0 : j.length;
          while (i--) {
            if (((k = j[i]), d.relative[(l = k.type)])) {
              break;
            }
            if (
              (m = d.find[l]) &&
              (f = m(
                k.matches[0].replace(cb, db),
                (ab.test(j[0].type) && ob(b.parentNode)) || b
              ))
            ) {
              if ((j.splice(i, 1), (a = f.length && qb(j)), !a)) {
                return I.apply(e, f), e;
              }
              break;
            }
          }
        }
        return (
          (n || h(a, o))(f, b, !p, e, (ab.test(a) && ob(b.parentNode)) || b), e
        );
      }),
      (c.sortStable = u.split("").sort(B).join("") === u),
      (c.detectDuplicates = !!l),
      m(),
      (c.sortDetached = ib(function (a) {
        return 1 & a.compareDocumentPosition(n.createElement("div"));
      })),
      ib(function (a) {
        return (
          (a.innerHTML = "<a href='#'></a>"),
          "#" === a.firstChild.getAttribute("href")
        );
      }) ||
        jb("type|href|height|width", function (a, b, c) {
          return c
            ? void 0
            : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
        }),
      (c.attributes &&
        ib(function (a) {
          return (
            (a.innerHTML = "<input/>"),
            a.firstChild.setAttribute("value", ""),
            "" === a.firstChild.getAttribute("value")
          );
        })) ||
        jb("value", function (a, b, c) {
          return c || "input" !== a.nodeName.toLowerCase()
            ? void 0
            : a.defaultValue;
        }),
      ib(function (a) {
        return null == a.getAttribute("disabled");
      }) ||
        jb(L, function (a, b, c) {
          var d;
          return c
            ? void 0
            : a[b] === !0
            ? b.toLowerCase()
            : (d = a.getAttributeNode(b)) && d.specified
            ? d.value
            : null;
        }),
      fb
    );
  })(a);
  (m.find = s),
    (m.expr = s.selectors),
    (m.expr[":"] = m.expr.pseudos),
    (m.unique = s.uniqueSort),
    (m.text = s.getText),
    (m.isXMLDoc = s.isXML),
    (m.contains = s.contains);
  var t = m.expr.match.needsContext,
    u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    v = /^.[^:#\[\.,]*$/;
  function w(a, b, c) {
    if (m.isFunction(b)) {
      return m.grep(a, function (a, d) {
        return !!b.call(a, d, a) !== c;
      });
    }
    if (b.nodeType) {
      return m.grep(a, function (a) {
        return (a === b) !== c;
      });
    }
    if ("string" == typeof b) {
      if (v.test(b)) {
        return m.filter(b, a, c);
      }
      b = m.filter(b, a);
    }
    return m.grep(a, function (a) {
      return m.inArray(a, b) >= 0 !== c;
    });
  }
  (m.filter = function (a, b, c) {
    var d = b[0];
    return (
      c && (a = ":not(" + a + ")"),
      1 === b.length && 1 === d.nodeType
        ? m.find.matchesSelector(d, a)
          ? [d]
          : []
        : m.find.matches(
            a,
            m.grep(b, function (a) {
              return 1 === a.nodeType;
            })
          )
    );
  }),
    m.fn.extend({
      find: function (a) {
        var b,
          c = [],
          d = this,
          e = d.length;
        if ("string" != typeof a) {
          return this.pushStack(
            m(a).filter(function () {
              for (b = 0; e > b; b++) {
                if (m.contains(d[b], this)) {
                  return !0;
                }
              }
            })
          );
        }
        for (b = 0; e > b; b++) {
          m.find(a, d[b], c);
        }
        return (
          (c = this.pushStack(e > 1 ? m.unique(c) : c)),
          (c.selector = this.selector ? this.selector + " " + a : a),
          c
        );
      },
      filter: function (a) {
        return this.pushStack(w(this, a || [], !1));
      },
      not: function (a) {
        return this.pushStack(w(this, a || [], !0));
      },
      is: function (a) {
        return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1)
          .length;
      },
    });
  var x,
    y = a.document,
    z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    A = (m.fn.init = function (a, b) {
      var c, d;
      if (!a) {
        return this;
      }
      if ("string" == typeof a) {
        if (
          ((c =
            "<" === a.charAt(0) &&
            ">" === a.charAt(a.length - 1) &&
            a.length >= 3
              ? [null, a, null]
              : z.exec(a)),
          !c || (!c[1] && b))
        ) {
          return !b || b.jquery
            ? (b || x).find(a)
            : this.constructor(b).find(a);
        }
        if (c[1]) {
          if (
            ((b = b instanceof m ? b[0] : b),
            m.merge(
              this,
              m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)
            ),
            u.test(c[1]) && m.isPlainObject(b))
          ) {
            for (c in b) {
              m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
            }
          }
          return this;
        }
        if (((d = y.getElementById(c[2])), d && d.parentNode)) {
          if (d.id !== c[2]) {
            return x.find(a);
          }
          (this.length = 1), (this[0] = d);
        }
        return (this.context = y), (this.selector = a), this;
      }
      return a.nodeType
        ? ((this.context = this[0] = a), (this.length = 1), this)
        : m.isFunction(a)
        ? "undefined" != typeof x.ready
          ? x.ready(a)
          : a(m)
        : (void 0 !== a.selector &&
            ((this.selector = a.selector), (this.context = a.context)),
          m.makeArray(a, this));
    });
  (A.prototype = m.fn), (x = m(y));
  var B = /^(?:parents|prev(?:Until|All))/,
    C = { children: !0, contents: !0, next: !0, prev: !0 };
  m.extend({
    dir: function (a, b, c) {
      var d = [],
        e = a[b];
      while (
        e &&
        9 !== e.nodeType &&
        (void 0 === c || 1 !== e.nodeType || !m(e).is(c))
      ) {
        1 === e.nodeType && d.push(e), (e = e[b]);
      }
      return d;
    },
    sibling: function (a, b) {
      for (var c = []; a; a = a.nextSibling) {
        1 === a.nodeType && a !== b && c.push(a);
      }
      return c;
    },
  }),
    m.fn.extend({
      has: function (a) {
        var b,
          c = m(a, this),
          d = c.length;
        return this.filter(function () {
          for (b = 0; d > b; b++) {
            if (m.contains(this, c[b])) {
              return !0;
            }
          }
        });
      },
      closest: function (a, b) {
        for (
          var c,
            d = 0,
            e = this.length,
            f = [],
            g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0;
          e > d;
          d++
        ) {
          for (c = this[d]; c && c !== b; c = c.parentNode) {
            if (
              c.nodeType < 11 &&
              (g
                ? g.index(c) > -1
                : 1 === c.nodeType && m.find.matchesSelector(c, a))
            ) {
              f.push(c);
              break;
            }
          }
        }
        return this.pushStack(f.length > 1 ? m.unique(f) : f);
      },
      index: function (a) {
        return a
          ? "string" == typeof a
            ? m.inArray(this[0], m(a))
            : m.inArray(a.jquery ? a[0] : a, this)
          : this[0] && this[0].parentNode
          ? this.first().prevAll().length
          : -1;
      },
      add: function (a, b) {
        return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));
      },
      addBack: function (a) {
        return this.add(
          null == a ? this.prevObject : this.prevObject.filter(a)
        );
      },
    });
  function D(a, b) {
    do {
      a = a[b];
    } while (a && 1 !== a.nodeType);
    return a;
  }
  m.each(
    {
      parent: function (a) {
        var b = a.parentNode;
        return b && 11 !== b.nodeType ? b : null;
      },
      parents: function (a) {
        return m.dir(a, "parentNode");
      },
      parentsUntil: function (a, b, c) {
        return m.dir(a, "parentNode", c);
      },
      next: function (a) {
        return D(a, "nextSibling");
      },
      prev: function (a) {
        return D(a, "previousSibling");
      },
      nextAll: function (a) {
        return m.dir(a, "nextSibling");
      },
      prevAll: function (a) {
        return m.dir(a, "previousSibling");
      },
      nextUntil: function (a, b, c) {
        return m.dir(a, "nextSibling", c);
      },
      prevUntil: function (a, b, c) {
        return m.dir(a, "previousSibling", c);
      },
      siblings: function (a) {
        return m.sibling((a.parentNode || {}).firstChild, a);
      },
      children: function (a) {
        return m.sibling(a.firstChild);
      },
      contents: function (a) {
        return m.nodeName(a, "iframe")
          ? a.contentDocument || a.contentWindow.document
          : m.merge([], a.childNodes);
      },
    },
    function (a, b) {
      m.fn[a] = function (c, d) {
        var e = m.map(this, b, c);
        return (
          "Until" !== a.slice(-5) && (d = c),
          d && "string" == typeof d && (e = m.filter(d, e)),
          this.length > 1 &&
            (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())),
          this.pushStack(e)
        );
      };
    }
  );
  var E = /\S+/g,
    F = {};
  function G(a) {
    var b = (F[a] = {});
    return (
      m.each(a.match(E) || [], function (a, c) {
        b[c] = !0;
      }),
      b
    );
  }
  (m.Callbacks = function (a) {
    a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);
    var b,
      c,
      d,
      e,
      f,
      g,
      h = [],
      i = !a.once && [],
      j = function (l) {
        for (
          c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0;
          h && e > f;
          f++
        ) {
          if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
            c = !1;
            break;
          }
        }
        (b = !1),
          h && (i ? i.length && j(i.shift()) : c ? (h = []) : k.disable());
      },
      k = {
        add: function () {
          if (h) {
            var d = h.length;
            !(function f(b) {
              m.each(b, function (b, c) {
                var d = m.type(c);
                "function" === d
                  ? (a.unique && k.has(c)) || h.push(c)
                  : c && c.length && "string" !== d && f(c);
              });
            })(arguments),
              b ? (e = h.length) : c && ((g = d), j(c));
          }
          return this;
        },
        remove: function () {
          return (
            h &&
              m.each(arguments, function (a, c) {
                var d;
                while ((d = m.inArray(c, h, d)) > -1) {
                  h.splice(d, 1), b && (e >= d && e--, f >= d && f--);
                }
              }),
            this
          );
        },
        has: function (a) {
          return a ? m.inArray(a, h) > -1 : !(!h || !h.length);
        },
        empty: function () {
          return (h = []), (e = 0), this;
        },
        disable: function () {
          return (h = i = c = void 0), this;
        },
        disabled: function () {
          return !h;
        },
        lock: function () {
          return (i = void 0), c || k.disable(), this;
        },
        locked: function () {
          return !i;
        },
        fireWith: function (a, c) {
          return (
            !h ||
              (d && !i) ||
              ((c = c || []),
              (c = [a, c.slice ? c.slice() : c]),
              b ? i.push(c) : j(c)),
            this
          );
        },
        fire: function () {
          return k.fireWith(this, arguments), this;
        },
        fired: function () {
          return !!d;
        },
      };
    return k;
  }),
    m.extend({
      Deferred: function (a) {
        var b = [
            ["resolve", "done", m.Callbacks("once memory"), "resolved"],
            ["reject", "fail", m.Callbacks("once memory"), "rejected"],
            ["notify", "progress", m.Callbacks("memory")],
          ],
          c = "pending",
          d = {
            state: function () {
              return c;
            },
            always: function () {
              return e.done(arguments).fail(arguments), this;
            },
            then: function () {
              var a = arguments;
              return m
                .Deferred(function (c) {
                  m.each(b, function (b, f) {
                    var g = m.isFunction(a[b]) && a[b];
                    e[f[1]](function () {
                      var a = g && g.apply(this, arguments);
                      a && m.isFunction(a.promise)
                        ? a
                            .promise()
                            .done(c.resolve)
                            .fail(c.reject)
                            .progress(c.notify)
                        : c[f[0] + "With"](
                            this === d ? c.promise() : this,
                            g ? [a] : arguments
                          );
                    });
                  }),
                    (a = null);
                })
                .promise();
            },
            promise: function (a) {
              return null != a ? m.extend(a, d) : d;
            },
          },
          e = {};
        return (
          (d.pipe = d.then),
          m.each(b, function (a, f) {
            var g = f[2],
              h = f[3];
            (d[f[1]] = g.add),
              h &&
                g.add(
                  function () {
                    c = h;
                  },
                  b[1 ^ a][2].disable,
                  b[2][2].lock
                ),
              (e[f[0]] = function () {
                return e[f[0] + "With"](this === e ? d : this, arguments), this;
              }),
              (e[f[0] + "With"] = g.fireWith);
          }),
          d.promise(e),
          a && a.call(e, e),
          e
        );
      },
      when: function (a) {
        var b = 0,
          c = d.call(arguments),
          e = c.length,
          f = 1 !== e || (a && m.isFunction(a.promise)) ? e : 0,
          g = 1 === f ? a : m.Deferred(),
          h = function (a, b, c) {
            return function (e) {
              (b[a] = this),
                (c[a] = arguments.length > 1 ? d.call(arguments) : e),
                c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
            };
          },
          i,
          j,
          k;
        if (e > 1) {
          for (
            i = new Array(e), j = new Array(e), k = new Array(e);
            e > b;
            b++
          ) {
            c[b] && m.isFunction(c[b].promise)
              ? c[b]
                  .promise()
                  .done(h(b, k, c))
                  .fail(g.reject)
                  .progress(h(b, j, i))
              : --f;
          }
        }
        return f || g.resolveWith(k, c), g.promise();
      },
    });
  var H;
  (m.fn.ready = function (a) {
    return m.ready.promise().done(a), this;
  }),
    m.extend({
      isReady: !1,
      readyWait: 1,
      holdReady: function (a) {
        a ? m.readyWait++ : m.ready(!0);
      },
      ready: function (a) {
        if (a === !0 ? !--m.readyWait : !m.isReady) {
          if (!y.body) {
            return setTimeout(m.ready);
          }
          (m.isReady = !0),
            (a !== !0 && --m.readyWait > 0) ||
              (H.resolveWith(y, [m]),
              m.fn.triggerHandler &&
                (m(y).triggerHandler("ready"), m(y).off("ready")));
        }
      },
    });
  function I() {
    y.addEventListener
      ? (y.removeEventListener("DOMContentLoaded", J, !1),
        a.removeEventListener("load", J, !1))
      : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J));
  }
  function J() {
    (y.addEventListener ||
      "load" === event.type ||
      "complete" === y.readyState) &&
      (I(), m.ready());
  }
  m.ready.promise = function (b) {
    if (!H) {
      if (((H = m.Deferred()), "complete" === y.readyState)) {
        setTimeout(m.ready);
      } else {
        if (y.addEventListener) {
          y.addEventListener("DOMContentLoaded", J, !1),
            a.addEventListener("load", J, !1);
        } else {
          y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);
          var c = !1;
          try {
            c = null == a.frameElement && y.documentElement;
          } catch (d) {}
          c &&
            c.doScroll &&
            !(function e() {
              if (!m.isReady) {
                try {
                  c.doScroll("left");
                } catch (a) {
                  return setTimeout(e, 50);
                }
                I(), m.ready();
              }
            })();
        }
      }
    }
    return H.promise(b);
  };
  var K = "undefined",
    L;
  for (L in m(k)) {
    break;
  }
  (k.ownLast = "0" !== L),
    (k.inlineBlockNeedsLayout = !1),
    m(function () {
      var a, b, c, d;
      (c = y.getElementsByTagName("body")[0]),
        c &&
          c.style &&
          ((b = y.createElement("div")),
          (d = y.createElement("div")),
          (d.style.cssText =
            "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
          c.appendChild(d).appendChild(b),
          typeof b.style.zoom !== K &&
            ((b.style.cssText =
              "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1"),
            (k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth),
            a && (c.style.zoom = 1)),
          c.removeChild(d));
    }),
    (function () {
      var a = y.createElement("div");
      if (null == k.deleteExpando) {
        k.deleteExpando = !0;
        try {
          delete a.test;
        } catch (b) {
          k.deleteExpando = !1;
        }
      }
      a = null;
    })(),
    (m.acceptData = function (a) {
      var b = m.noData[(a.nodeName + " ").toLowerCase()],
        c = +a.nodeType || 1;
      return 1 !== c && 9 !== c
        ? !1
        : !b || (b !== !0 && a.getAttribute("classid") === b);
    });
  var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    N = /([A-Z])/g;
  function O(a, b, c) {
    if (void 0 === c && 1 === a.nodeType) {
      var d = "data-" + b.replace(N, "-$1").toLowerCase();
      if (((c = a.getAttribute(d)), "string" == typeof c)) {
        try {
          c =
            "true" === c
              ? !0
              : "false" === c
              ? !1
              : "null" === c
              ? null
              : +c + "" === c
              ? +c
              : M.test(c)
              ? m.parseJSON(c)
              : c;
        } catch (e) {}
        m.data(a, b, c);
      } else {
        c = void 0;
      }
    }
    return c;
  }
  function P(a) {
    var b;
    for (b in a) {
      if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) {
        return !1;
      }
    }
    return !0;
  }
  function Q(a, b, d, e) {
    if (m.acceptData(a)) {
      var f,
        g,
        h = m.expando,
        i = a.nodeType,
        j = i ? m.cache : a,
        k = i ? a[h] : a[h] && h;
      if (
        (k && j[k] && (e || j[k].data)) ||
        void 0 !== d ||
        "string" != typeof b
      ) {
        return (
          k || (k = i ? (a[h] = c.pop() || m.guid++) : h),
          j[k] || (j[k] = i ? {} : { toJSON: m.noop }),
          ("object" == typeof b || "function" == typeof b) &&
            (e
              ? (j[k] = m.extend(j[k], b))
              : (j[k].data = m.extend(j[k].data, b))),
          (g = j[k]),
          e || (g.data || (g.data = {}), (g = g.data)),
          void 0 !== d && (g[m.camelCase(b)] = d),
          "string" == typeof b
            ? ((f = g[b]), null == f && (f = g[m.camelCase(b)]))
            : (f = g),
          f
        );
      }
    }
  }
  function R(a, b, c) {
    if (m.acceptData(a)) {
      var d,
        e,
        f = a.nodeType,
        g = f ? m.cache : a,
        h = f ? a[m.expando] : m.expando;
      if (g[h]) {
        if (b && (d = c ? g[h] : g[h].data)) {
          m.isArray(b)
            ? (b = b.concat(m.map(b, m.camelCase)))
            : b in d
            ? (b = [b])
            : ((b = m.camelCase(b)), (b = b in d ? [b] : b.split(" "))),
            (e = b.length);
          while (e--) {
            delete d[b[e]];
          }
          if (c ? !P(d) : !m.isEmptyObject(d)) {
            return;
          }
        }
        (c || (delete g[h].data, P(g[h]))) &&
          (f
            ? m.cleanData([a], !0)
            : k.deleteExpando || g != g.window
            ? delete g[h]
            : (g[h] = null));
      }
    }
  }
  m.extend({
    cache: {},
    noData: {
      "applet ": !0,
      "embed ": !0,
      "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
    },
    hasData: function (a) {
      return (
        (a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando]), !!a && !P(a)
      );
    },
    data: function (a, b, c) {
      return Q(a, b, c);
    },
    removeData: function (a, b) {
      return R(a, b);
    },
    _data: function (a, b, c) {
      return Q(a, b, c, !0);
    },
    _removeData: function (a, b) {
      return R(a, b, !0);
    },
  }),
    m.fn.extend({
      data: function (a, b) {
        var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;
        if (void 0 === a) {
          if (
            this.length &&
            ((e = m.data(f)), 1 === f.nodeType && !m._data(f, "parsedAttrs"))
          ) {
            c = g.length;
            while (c--) {
              g[c] &&
                ((d = g[c].name),
                0 === d.indexOf("data-") &&
                  ((d = m.camelCase(d.slice(5))), O(f, d, e[d])));
            }
            m._data(f, "parsedAttrs", !0);
          }
          return e;
        }
        return "object" == typeof a
          ? this.each(function () {
              m.data(this, a);
            })
          : arguments.length > 1
          ? this.each(function () {
              m.data(this, a, b);
            })
          : f
          ? O(f, a, m.data(f, a))
          : void 0;
      },
      removeData: function (a) {
        return this.each(function () {
          m.removeData(this, a);
        });
      },
    }),
    m.extend({
      queue: function (a, b, c) {
        var d;
        return a
          ? ((b = (b || "fx") + "queue"),
            (d = m._data(a, b)),
            c &&
              (!d || m.isArray(c)
                ? (d = m._data(a, b, m.makeArray(c)))
                : d.push(c)),
            d || [])
          : void 0;
      },
      dequeue: function (a, b) {
        b = b || "fx";
        var c = m.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = m._queueHooks(a, b),
          g = function () {
            m.dequeue(a, b);
          };
        "inprogress" === e && ((e = c.shift()), d--),
          e &&
            ("fx" === b && c.unshift("inprogress"),
            delete f.stop,
            e.call(a, g, f)),
          !d && f && f.empty.fire();
      },
      _queueHooks: function (a, b) {
        var c = b + "queueHooks";
        return (
          m._data(a, c) ||
          m._data(a, c, {
            empty: m.Callbacks("once memory").add(function () {
              m._removeData(a, b + "queue"), m._removeData(a, c);
            }),
          })
        );
      },
    }),
    m.fn.extend({
      queue: function (a, b) {
        var c = 2;
        return (
          "string" != typeof a && ((b = a), (a = "fx"), c--),
          arguments.length < c
            ? m.queue(this[0], a)
            : void 0 === b
            ? this
            : this.each(function () {
                var c = m.queue(this, a, b);
                m._queueHooks(this, a),
                  "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);
              })
        );
      },
      dequeue: function (a) {
        return this.each(function () {
          m.dequeue(this, a);
        });
      },
      clearQueue: function (a) {
        return this.queue(a || "fx", []);
      },
      promise: function (a, b) {
        var c,
          d = 1,
          e = m.Deferred(),
          f = this,
          g = this.length,
          h = function () {
            --d || e.resolveWith(f, [f]);
          };
        "string" != typeof a && ((b = a), (a = void 0)), (a = a || "fx");
        while (g--) {
          (c = m._data(f[g], a + "queueHooks")),
            c && c.empty && (d++, c.empty.add(h));
        }
        return h(), e.promise(b);
      },
    });
  var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
    T = ["Top", "Right", "Bottom", "Left"],
    U = function (a, b) {
      return (
        (a = b || a),
        "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a)
      );
    },
    V = (m.access = function (a, b, c, d, e, f, g) {
      var h = 0,
        i = a.length,
        j = null == c;
      if ("object" === m.type(c)) {
        e = !0;
        for (h in c) {
          m.access(a, b, h, c[h], !0, f, g);
        }
      } else {
        if (
          void 0 !== d &&
          ((e = !0),
          m.isFunction(d) || (g = !0),
          j &&
            (g
              ? (b.call(a, d), (b = null))
              : ((j = b),
                (b = function (a, b, c) {
                  return j.call(m(a), c);
                }))),
          b)
        ) {
          for (; i > h; h++) {
            b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
          }
        }
      }
      return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
    }),
    W = /^(?:checkbox|radio)$/i;
  !(function () {
    var a = y.createElement("input"),
      b = y.createElement("div"),
      c = y.createDocumentFragment();
    if (
      ((b.innerHTML =
        "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
      (k.leadingWhitespace = 3 === b.firstChild.nodeType),
      (k.tbody = !b.getElementsByTagName("tbody").length),
      (k.htmlSerialize = !!b.getElementsByTagName("link").length),
      (k.html5Clone =
        "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML),
      (a.type = "checkbox"),
      (a.checked = !0),
      c.appendChild(a),
      (k.appendChecked = a.checked),
      (b.innerHTML = "<textarea>x</textarea>"),
      (k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue),
      c.appendChild(b),
      (b.innerHTML = "<input type='radio' checked='checked' name='t'/>"),
      (k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked),
      (k.noCloneEvent = !0),
      b.attachEvent &&
        (b.attachEvent("onclick", function () {
          k.noCloneEvent = !1;
        }),
        b.cloneNode(!0).click()),
      null == k.deleteExpando)
    ) {
      k.deleteExpando = !0;
      try {
        delete b.test;
      } catch (d) {
        k.deleteExpando = !1;
      }
    }
  })(),
    (function () {
      var b,
        c,
        d = y.createElement("div");
      for (b in { submit: !0, change: !0, focusin: !0 }) {
        (c = "on" + b),
          (k[b + "Bubbles"] = c in a) ||
            (d.setAttribute(c, "t"),
            (k[b + "Bubbles"] = d.attributes[c].expando === !1));
      }
      d = null;
    })();
  var X = /^(?:input|select|textarea)$/i,
    Y = /^key/,
    Z = /^(?:mouse|pointer|contextmenu)|click/,
    $ = /^(?:focusinfocus|focusoutblur)$/,
    _ = /^([^.]*)(?:\.(.+)|)$/;
  function ab() {
    return !0;
  }
  function bb() {
    return !1;
  }
  function cb() {
    try {
      return y.activeElement;
    } catch (a) {}
  }
  (m.event = {
    global: {},
    add: function (a, b, c, d, e) {
      var f,
        g,
        h,
        i,
        j,
        k,
        l,
        n,
        o,
        p,
        q,
        r = m._data(a);
      if (r) {
        c.handler && ((i = c), (c = i.handler), (e = i.selector)),
          c.guid || (c.guid = m.guid++),
          (g = r.events) || (g = r.events = {}),
          (k = r.handle) ||
            ((k = r.handle = function (a) {
              return typeof m === K || (a && m.event.triggered === a.type)
                ? void 0
                : m.event.dispatch.apply(k.elem, arguments);
            }),
            (k.elem = a)),
          (b = (b || "").match(E) || [""]),
          (h = b.length);
        while (h--) {
          (f = _.exec(b[h]) || []),
            (o = q = f[1]),
            (p = (f[2] || "").split(".").sort()),
            o &&
              ((j = m.event.special[o] || {}),
              (o = (e ? j.delegateType : j.bindType) || o),
              (j = m.event.special[o] || {}),
              (l = m.extend(
                {
                  type: o,
                  origType: q,
                  data: d,
                  handler: c,
                  guid: c.guid,
                  selector: e,
                  needsContext: e && m.expr.match.needsContext.test(e),
                  namespace: p.join("."),
                },
                i
              )),
              (n = g[o]) ||
                ((n = g[o] = []),
                (n.delegateCount = 0),
                (j.setup && j.setup.call(a, d, p, k) !== !1) ||
                  (a.addEventListener
                    ? a.addEventListener(o, k, !1)
                    : a.attachEvent && a.attachEvent("on" + o, k))),
              j.add &&
                (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)),
              e ? n.splice(n.delegateCount++, 0, l) : n.push(l),
              (m.event.global[o] = !0));
        }
        a = null;
      }
    },
    remove: function (a, b, c, d, e) {
      var f,
        g,
        h,
        i,
        j,
        k,
        l,
        n,
        o,
        p,
        q,
        r = m.hasData(a) && m._data(a);
      if (r && (k = r.events)) {
        (b = (b || "").match(E) || [""]), (j = b.length);
        while (j--) {
          if (
            ((h = _.exec(b[j]) || []),
            (o = q = h[1]),
            (p = (h[2] || "").split(".").sort()),
            o)
          ) {
            (l = m.event.special[o] || {}),
              (o = (d ? l.delegateType : l.bindType) || o),
              (n = k[o] || []),
              (h =
                h[2] &&
                new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)")),
              (i = f = n.length);
            while (f--) {
              (g = n[f]),
                (!e && q !== g.origType) ||
                  (c && c.guid !== g.guid) ||
                  (h && !h.test(g.namespace)) ||
                  (d && d !== g.selector && ("**" !== d || !g.selector)) ||
                  (n.splice(f, 1),
                  g.selector && n.delegateCount--,
                  l.remove && l.remove.call(a, g));
            }
            i &&
              !n.length &&
              ((l.teardown && l.teardown.call(a, p, r.handle) !== !1) ||
                m.removeEvent(a, o, r.handle),
              delete k[o]);
          } else {
            for (o in k) {
              m.event.remove(a, o + b[j], c, d, !0);
            }
          }
        }
        m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));
      }
    },
    trigger: function (b, c, d, e) {
      var f,
        g,
        h,
        i,
        k,
        l,
        n,
        o = [d || y],
        p = j.call(b, "type") ? b.type : b,
        q = j.call(b, "namespace") ? b.namespace.split(".") : [];
      if (
        ((h = l = d = d || y),
        3 !== d.nodeType &&
          8 !== d.nodeType &&
          !$.test(p + m.event.triggered) &&
          (p.indexOf(".") >= 0 &&
            ((q = p.split(".")), (p = q.shift()), q.sort()),
          (g = p.indexOf(":") < 0 && "on" + p),
          (b = b[m.expando] ? b : new m.Event(p, "object" == typeof b && b)),
          (b.isTrigger = e ? 2 : 3),
          (b.namespace = q.join(".")),
          (b.namespace_re = b.namespace
            ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)")
            : null),
          (b.result = void 0),
          b.target || (b.target = d),
          (c = null == c ? [b] : m.makeArray(c, [b])),
          (k = m.event.special[p] || {}),
          e || !k.trigger || k.trigger.apply(d, c) !== !1))
      ) {
        if (!e && !k.noBubble && !m.isWindow(d)) {
          for (
            i = k.delegateType || p, $.test(i + p) || (h = h.parentNode);
            h;
            h = h.parentNode
          ) {
            o.push(h), (l = h);
          }
          l === (d.ownerDocument || y) &&
            o.push(l.defaultView || l.parentWindow || a);
        }
        n = 0;
        while ((h = o[n++]) && !b.isPropagationStopped()) {
          (b.type = n > 1 ? i : k.bindType || p),
            (f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle")),
            f && f.apply(h, c),
            (f = g && h[g]),
            f &&
              f.apply &&
              m.acceptData(h) &&
              ((b.result = f.apply(h, c)),
              b.result === !1 && b.preventDefault());
        }
        if (
          ((b.type = p),
          !e &&
            !b.isDefaultPrevented() &&
            (!k._default || k._default.apply(o.pop(), c) === !1) &&
            m.acceptData(d) &&
            g &&
            d[p] &&
            !m.isWindow(d))
        ) {
          (l = d[g]), l && (d[g] = null), (m.event.triggered = p);
          try {
            d[p]();
          } catch (r) {}
          (m.event.triggered = void 0), l && (d[g] = l);
        }
        return b.result;
      }
    },
    dispatch: function (a) {
      a = m.event.fix(a);
      var b,
        c,
        e,
        f,
        g,
        h = [],
        i = d.call(arguments),
        j = (m._data(this, "events") || {})[a.type] || [],
        k = m.event.special[a.type] || {};
      if (
        ((i[0] = a),
        (a.delegateTarget = this),
        !k.preDispatch || k.preDispatch.call(this, a) !== !1)
      ) {
        (h = m.event.handlers.call(this, a, j)), (b = 0);
        while ((f = h[b++]) && !a.isPropagationStopped()) {
          (a.currentTarget = f.elem), (g = 0);
          while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) {
            (!a.namespace_re || a.namespace_re.test(e.namespace)) &&
              ((a.handleObj = e),
              (a.data = e.data),
              (c = (
                (m.event.special[e.origType] || {}).handle || e.handler
              ).apply(f.elem, i)),
              void 0 !== c &&
                (a.result = c) === !1 &&
                (a.preventDefault(), a.stopPropagation()));
          }
        }
        return k.postDispatch && k.postDispatch.call(this, a), a.result;
      }
    },
    handlers: function (a, b) {
      var c,
        d,
        e,
        f,
        g = [],
        h = b.delegateCount,
        i = a.target;
      if (h && i.nodeType && (!a.button || "click" !== a.type)) {
        for (; i != this; i = i.parentNode || this) {
          if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
            for (e = [], f = 0; h > f; f++) {
              (d = b[f]),
                (c = d.selector + " "),
                void 0 === e[c] &&
                  (e[c] = d.needsContext
                    ? m(c, this).index(i) >= 0
                    : m.find(c, this, null, [i]).length),
                e[c] && e.push(d);
            }
            e.length && g.push({ elem: i, handlers: e });
          }
        }
      }
      return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;
    },
    fix: function (a) {
      if (a[m.expando]) {
        return a;
      }
      var b,
        c,
        d,
        e = a.type,
        f = a,
        g = this.fixHooks[e];
      g ||
        (this.fixHooks[e] = g = Z.test(e)
          ? this.mouseHooks
          : Y.test(e)
          ? this.keyHooks
          : {}),
        (d = g.props ? this.props.concat(g.props) : this.props),
        (a = new m.Event(f)),
        (b = d.length);
      while (b--) {
        (c = d[b]), (a[c] = f[c]);
      }
      return (
        a.target || (a.target = f.srcElement || y),
        3 === a.target.nodeType && (a.target = a.target.parentNode),
        (a.metaKey = !!a.metaKey),
        g.filter ? g.filter(a, f) : a
      );
    },
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(
      " "
    ),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "),
      filter: function (a, b) {
        return (
          null == a.which &&
            (a.which = null != b.charCode ? b.charCode : b.keyCode),
          a
        );
      },
    },
    mouseHooks: {
      props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(
        " "
      ),
      filter: function (a, b) {
        var c,
          d,
          e,
          f = b.button,
          g = b.fromElement;
        return (
          null == a.pageX &&
            null != b.clientX &&
            ((d = a.target.ownerDocument || y),
            (e = d.documentElement),
            (c = d.body),
            (a.pageX =
              b.clientX +
              ((e && e.scrollLeft) || (c && c.scrollLeft) || 0) -
              ((e && e.clientLeft) || (c && c.clientLeft) || 0)),
            (a.pageY =
              b.clientY +
              ((e && e.scrollTop) || (c && c.scrollTop) || 0) -
              ((e && e.clientTop) || (c && c.clientTop) || 0))),
          !a.relatedTarget &&
            g &&
            (a.relatedTarget = g === a.target ? b.toElement : g),
          a.which ||
            void 0 === f ||
            (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0),
          a
        );
      },
    },
    special: {
      load: { noBubble: !0 },
      focus: {
        trigger: function () {
          if (this !== cb() && this.focus) {
            try {
              return this.focus(), !1;
            } catch (a) {}
          }
        },
        delegateType: "focusin",
      },
      blur: {
        trigger: function () {
          return this === cb() && this.blur ? (this.blur(), !1) : void 0;
        },
        delegateType: "focusout",
      },
      click: {
        trigger: function () {
          return m.nodeName(this, "input") &&
            "checkbox" === this.type &&
            this.click
            ? (this.click(), !1)
            : void 0;
        },
        _default: function (a) {
          return m.nodeName(a.target, "a");
        },
      },
      beforeunload: {
        postDispatch: function (a) {
          void 0 !== a.result &&
            a.originalEvent &&
            (a.originalEvent.returnValue = a.result);
        },
      },
    },
    simulate: function (a, b, c, d) {
      var e = m.extend(new m.Event(), c, {
        type: a,
        isSimulated: !0,
        originalEvent: {},
      });
      d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e),
        e.isDefaultPrevented() && c.preventDefault();
    },
  }),
    (m.removeEvent = y.removeEventListener
      ? function (a, b, c) {
          a.removeEventListener && a.removeEventListener(b, c, !1);
        }
      : function (a, b, c) {
          var d = "on" + b;
          a.detachEvent &&
            (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c));
        }),
    (m.Event = function (a, b) {
      return this instanceof m.Event
        ? (a && a.type
            ? ((this.originalEvent = a),
              (this.type = a.type),
              (this.isDefaultPrevented =
                a.defaultPrevented ||
                (void 0 === a.defaultPrevented && a.returnValue === !1)
                  ? ab
                  : bb))
            : (this.type = a),
          b && m.extend(this, b),
          (this.timeStamp = (a && a.timeStamp) || m.now()),
          void (this[m.expando] = !0))
        : new m.Event(a, b);
    }),
    (m.Event.prototype = {
      isDefaultPrevented: bb,
      isPropagationStopped: bb,
      isImmediatePropagationStopped: bb,
      preventDefault: function () {
        var a = this.originalEvent;
        (this.isDefaultPrevented = ab),
          a && (a.preventDefault ? a.preventDefault() : (a.returnValue = !1));
      },
      stopPropagation: function () {
        var a = this.originalEvent;
        (this.isPropagationStopped = ab),
          a &&
            (a.stopPropagation && a.stopPropagation(), (a.cancelBubble = !0));
      },
      stopImmediatePropagation: function () {
        var a = this.originalEvent;
        (this.isImmediatePropagationStopped = ab),
          a && a.stopImmediatePropagation && a.stopImmediatePropagation(),
          this.stopPropagation();
      },
    }),
    m.each(
      {
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout",
      },
      function (a, b) {
        m.event.special[a] = {
          delegateType: b,
          bindType: b,
          handle: function (a) {
            var c,
              d = this,
              e = a.relatedTarget,
              f = a.handleObj;
            return (
              (!e || (e !== d && !m.contains(d, e))) &&
                ((a.type = f.origType),
                (c = f.handler.apply(this, arguments)),
                (a.type = b)),
              c
            );
          },
        };
      }
    ),
    k.submitBubbles ||
      (m.event.special.submit = {
        setup: function () {
          return m.nodeName(this, "form")
            ? !1
            : void m.event.add(
                this,
                "click._submit keypress._submit",
                function (a) {
                  var b = a.target,
                    c =
                      m.nodeName(b, "input") || m.nodeName(b, "button")
                        ? b.form
                        : void 0;
                  c &&
                    !m._data(c, "submitBubbles") &&
                    (m.event.add(c, "submit._submit", function (a) {
                      a._submit_bubble = !0;
                    }),
                    m._data(c, "submitBubbles", !0));
                }
              );
        },
        postDispatch: function (a) {
          a._submit_bubble &&
            (delete a._submit_bubble,
            this.parentNode &&
              !a.isTrigger &&
              m.event.simulate("submit", this.parentNode, a, !0));
        },
        teardown: function () {
          return m.nodeName(this, "form")
            ? !1
            : void m.event.remove(this, "._submit");
        },
      }),
    k.changeBubbles ||
      (m.event.special.change = {
        setup: function () {
          return X.test(this.nodeName)
            ? (("checkbox" === this.type || "radio" === this.type) &&
                (m.event.add(this, "propertychange._change", function (a) {
                  "checked" === a.originalEvent.propertyName &&
                    (this._just_changed = !0);
                }),
                m.event.add(this, "click._change", function (a) {
                  this._just_changed &&
                    !a.isTrigger &&
                    (this._just_changed = !1),
                    m.event.simulate("change", this, a, !0);
                })),
              !1)
            : void m.event.add(this, "beforeactivate._change", function (a) {
                var b = a.target;
                X.test(b.nodeName) &&
                  !m._data(b, "changeBubbles") &&
                  (m.event.add(b, "change._change", function (a) {
                    !this.parentNode ||
                      a.isSimulated ||
                      a.isTrigger ||
                      m.event.simulate("change", this.parentNode, a, !0);
                  }),
                  m._data(b, "changeBubbles", !0));
              });
        },
        handle: function (a) {
          var b = a.target;
          return this !== b ||
            a.isSimulated ||
            a.isTrigger ||
            ("radio" !== b.type && "checkbox" !== b.type)
            ? a.handleObj.handler.apply(this, arguments)
            : void 0;
        },
        teardown: function () {
          return m.event.remove(this, "._change"), !X.test(this.nodeName);
        },
      }),
    k.focusinBubbles ||
      m.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
        var c = function (a) {
          m.event.simulate(b, a.target, m.event.fix(a), !0);
        };
        m.event.special[b] = {
          setup: function () {
            var d = this.ownerDocument || this,
              e = m._data(d, b);
            e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);
          },
          teardown: function () {
            var d = this.ownerDocument || this,
              e = m._data(d, b) - 1;
            e
              ? m._data(d, b, e)
              : (d.removeEventListener(a, c, !0), m._removeData(d, b));
          },
        };
      }),
    m.fn.extend({
      on: function (a, b, c, d, e) {
        var f, g;
        if ("object" == typeof a) {
          "string" != typeof b && ((c = c || b), (b = void 0));
          for (f in a) {
            this.on(f, b, c, a[f], e);
          }
          return this;
        }
        if (
          (null == c && null == d
            ? ((d = b), (c = b = void 0))
            : null == d &&
              ("string" == typeof b
                ? ((d = c), (c = void 0))
                : ((d = c), (c = b), (b = void 0))),
          d === !1)
        ) {
          d = bb;
        } else {
          if (!d) {
            return this;
          }
        }
        return (
          1 === e &&
            ((g = d),
            (d = function (a) {
              return m().off(a), g.apply(this, arguments);
            }),
            (d.guid = g.guid || (g.guid = m.guid++))),
          this.each(function () {
            m.event.add(this, a, d, c, b);
          })
        );
      },
      one: function (a, b, c, d) {
        return this.on(a, b, c, d, 1);
      },
      off: function (a, b, c) {
        var d, e;
        if (a && a.preventDefault && a.handleObj) {
          return (
            (d = a.handleObj),
            m(a.delegateTarget).off(
              d.namespace ? d.origType + "." + d.namespace : d.origType,
              d.selector,
              d.handler
            ),
            this
          );
        }
        if ("object" == typeof a) {
          for (e in a) {
            this.off(e, b, a[e]);
          }
          return this;
        }
        return (
          (b === !1 || "function" == typeof b) && ((c = b), (b = void 0)),
          c === !1 && (c = bb),
          this.each(function () {
            m.event.remove(this, a, c, b);
          })
        );
      },
      trigger: function (a, b) {
        return this.each(function () {
          m.event.trigger(a, b, this);
        });
      },
      triggerHandler: function (a, b) {
        var c = this[0];
        return c ? m.event.trigger(a, b, c, !0) : void 0;
      },
    });
  function db(a) {
    var b = eb.split("|"),
      c = a.createDocumentFragment();
    if (c.createElement) {
      while (b.length) {
        c.createElement(b.pop());
      }
    }
    return c;
  }
  var eb =
      "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
    fb = / jQuery\d+="(?:null|\d+)"/g,
    gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"),
    hb = /^\s+/,
    ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
    jb = /<([\w:]+)/,
    kb = /<tbody/i,
    lb = /<|&#?\w+;/,
    mb = /<(?:script|style|link)/i,
    nb = /checked\s*(?:[^=]|=\s*.checked.)/i,
    ob = /^$|\/(?:java|ecma)script/i,
    pb = /^true\/(.*)/,
    qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    rb = {
      option: [1, "<select multiple='multiple'>", "</select>"],
      legend: [1, "<fieldset>", "</fieldset>"],
      area: [1, "<map>", "</map>"],
      param: [1, "<object>", "</object>"],
      thead: [1, "<table>", "</table>"],
      tr: [2, "<table><tbody>", "</tbody></table>"],
      col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
      td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
      _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"],
    },
    sb = db(y),
    tb = sb.appendChild(y.createElement("div"));
  (rb.optgroup = rb.option),
    (rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead),
    (rb.th = rb.td);
  function ub(a, b) {
    var c,
      d,
      e = 0,
      f =
        typeof a.getElementsByTagName !== K
          ? a.getElementsByTagName(b || "*")
          : typeof a.querySelectorAll !== K
          ? a.querySelectorAll(b || "*")
          : void 0;
    if (!f) {
      for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) {
        !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));
      }
    }
    return void 0 === b || (b && m.nodeName(a, b)) ? m.merge([a], f) : f;
  }
  function vb(a) {
    W.test(a.type) && (a.defaultChecked = a.checked);
  }
  function wb(a, b) {
    return m.nodeName(a, "table") &&
      m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr")
      ? a.getElementsByTagName("tbody")[0] ||
          a.appendChild(a.ownerDocument.createElement("tbody"))
      : a;
  }
  function xb(a) {
    return (a.type = (null !== m.find.attr(a, "type")) + "/" + a.type), a;
  }
  function yb(a) {
    var b = pb.exec(a.type);
    return b ? (a.type = b[1]) : a.removeAttribute("type"), a;
  }
  function zb(a, b) {
    for (var c, d = 0; null != (c = a[d]); d++) {
      m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));
    }
  }
  function Ab(a, b) {
    if (1 === b.nodeType && m.hasData(a)) {
      var c,
        d,
        e,
        f = m._data(a),
        g = m._data(b, f),
        h = f.events;
      if (h) {
        delete g.handle, (g.events = {});
        for (c in h) {
          for (d = 0, e = h[c].length; e > d; d++) {
            m.event.add(b, c, h[c][d]);
          }
        }
      }
      g.data && (g.data = m.extend({}, g.data));
    }
  }
  function Bb(a, b) {
    var c, d, e;
    if (1 === b.nodeType) {
      if (((c = b.nodeName.toLowerCase()), !k.noCloneEvent && b[m.expando])) {
        e = m._data(b);
        for (d in e.events) {
          m.removeEvent(b, d, e.handle);
        }
        b.removeAttribute(m.expando);
      }
      "script" === c && b.text !== a.text
        ? ((xb(b).text = a.text), yb(b))
        : "object" === c
        ? (b.parentNode && (b.outerHTML = a.outerHTML),
          k.html5Clone &&
            a.innerHTML &&
            !m.trim(b.innerHTML) &&
            (b.innerHTML = a.innerHTML))
        : "input" === c && W.test(a.type)
        ? ((b.defaultChecked = b.checked = a.checked),
          b.value !== a.value && (b.value = a.value))
        : "option" === c
        ? (b.defaultSelected = b.selected = a.defaultSelected)
        : ("input" === c || "textarea" === c) &&
          (b.defaultValue = a.defaultValue);
    }
  }
  m.extend({
    clone: function (a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i = m.contains(a.ownerDocument, a);
      if (
        (k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">")
          ? (f = a.cloneNode(!0))
          : ((tb.innerHTML = a.outerHTML), tb.removeChild((f = tb.firstChild))),
        !(
          (k.noCloneEvent && k.noCloneChecked) ||
          (1 !== a.nodeType && 11 !== a.nodeType) ||
          m.isXMLDoc(a)
        ))
      ) {
        for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) {
          d[g] && Bb(e, d[g]);
        }
      }
      if (b) {
        if (c) {
          for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) {
            Ab(e, d[g]);
          }
        } else {
          Ab(a, f);
        }
      }
      return (
        (d = ub(f, "script")),
        d.length > 0 && zb(d, !i && ub(a, "script")),
        (d = h = e = null),
        f
      );
    },
    buildFragment: function (a, b, c, d) {
      for (
        var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0;
        n > q;
        q++
      ) {
        if (((f = a[q]), f || 0 === f)) {
          if ("object" === m.type(f)) {
            m.merge(p, f.nodeType ? [f] : f);
          } else {
            if (lb.test(f)) {
              (h = h || o.appendChild(b.createElement("div"))),
                (i = (jb.exec(f) || ["", ""])[1].toLowerCase()),
                (l = rb[i] || rb._default),
                (h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2]),
                (e = l[0]);
              while (e--) {
                h = h.lastChild;
              }
              if (
                (!k.leadingWhitespace &&
                  hb.test(f) &&
                  p.push(b.createTextNode(hb.exec(f)[0])),
                !k.tbody)
              ) {
                (f =
                  "table" !== i || kb.test(f)
                    ? "<table>" !== l[1] || kb.test(f)
                      ? 0
                      : h
                    : h.firstChild),
                  (e = f && f.childNodes.length);
                while (e--) {
                  m.nodeName((j = f.childNodes[e]), "tbody") &&
                    !j.childNodes.length &&
                    f.removeChild(j);
                }
              }
              m.merge(p, h.childNodes), (h.textContent = "");
              while (h.firstChild) {
                h.removeChild(h.firstChild);
              }
              h = o.lastChild;
            } else {
              p.push(b.createTextNode(f));
            }
          }
        }
      }
      h && o.removeChild(h),
        k.appendChecked || m.grep(ub(p, "input"), vb),
        (q = 0);
      while ((f = p[q++])) {
        if (
          (!d || -1 === m.inArray(f, d)) &&
          ((g = m.contains(f.ownerDocument, f)),
          (h = ub(o.appendChild(f), "script")),
          g && zb(h),
          c)
        ) {
          e = 0;
          while ((f = h[e++])) {
            ob.test(f.type || "") && c.push(f);
          }
        }
      }
      return (h = null), o;
    },
    cleanData: function (a, b) {
      for (
        var d,
          e,
          f,
          g,
          h = 0,
          i = m.expando,
          j = m.cache,
          l = k.deleteExpando,
          n = m.event.special;
        null != (d = a[h]);
        h++
      ) {
        if ((b || m.acceptData(d)) && ((f = d[i]), (g = f && j[f]))) {
          if (g.events) {
            for (e in g.events) {
              n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
            }
          }
          j[f] &&
            (delete j[f],
            l
              ? delete d[i]
              : typeof d.removeAttribute !== K
              ? d.removeAttribute(i)
              : (d[i] = null),
            c.push(f));
        }
      }
    },
  }),
    m.fn.extend({
      text: function (a) {
        return V(
          this,
          function (a) {
            return void 0 === a
              ? m.text(this)
              : this.empty().append(
                  ((this[0] && this[0].ownerDocument) || y).createTextNode(a)
                );
          },
          null,
          a,
          arguments.length
        );
      },
      append: function () {
        return this.domManip(arguments, function (a) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var b = wb(this, a);
            b.appendChild(a);
          }
        });
      },
      prepend: function () {
        return this.domManip(arguments, function (a) {
          if (
            1 === this.nodeType ||
            11 === this.nodeType ||
            9 === this.nodeType
          ) {
            var b = wb(this, a);
            b.insertBefore(a, b.firstChild);
          }
        });
      },
      before: function () {
        return this.domManip(arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this);
        });
      },
      after: function () {
        return this.domManip(arguments, function (a) {
          this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
        });
      },
      remove: function (a, b) {
        for (
          var c, d = a ? m.filter(a, this) : this, e = 0;
          null != (c = d[e]);
          e++
        ) {
          b || 1 !== c.nodeType || m.cleanData(ub(c)),
            c.parentNode &&
              (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")),
              c.parentNode.removeChild(c));
        }
        return this;
      },
      empty: function () {
        for (var a, b = 0; null != (a = this[b]); b++) {
          1 === a.nodeType && m.cleanData(ub(a, !1));
          while (a.firstChild) {
            a.removeChild(a.firstChild);
          }
          a.options && m.nodeName(a, "select") && (a.options.length = 0);
        }
        return this;
      },
      clone: function (a, b) {
        return (
          (a = null == a ? !1 : a),
          (b = null == b ? a : b),
          this.map(function () {
            return m.clone(this, a, b);
          })
        );
      },
      html: function (a) {
        return V(
          this,
          function (a) {
            var b = this[0] || {},
              c = 0,
              d = this.length;
            if (void 0 === a) {
              return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;
            }
            if (
              !(
                "string" != typeof a ||
                mb.test(a) ||
                (!k.htmlSerialize && gb.test(a)) ||
                (!k.leadingWhitespace && hb.test(a)) ||
                rb[(jb.exec(a) || ["", ""])[1].toLowerCase()]
              )
            ) {
              a = a.replace(ib, "<$1></$2>");
              try {
                for (; d > c; c++) {
                  (b = this[c] || {}),
                    1 === b.nodeType &&
                      (m.cleanData(ub(b, !1)), (b.innerHTML = a));
                }
                b = 0;
              } catch (e) {}
            }
            b && this.empty().append(a);
          },
          null,
          a,
          arguments.length
        );
      },
      replaceWith: function () {
        var a = arguments[0];
        return (
          this.domManip(arguments, function (b) {
            (a = this.parentNode),
              m.cleanData(ub(this)),
              a && a.replaceChild(b, this);
          }),
          a && (a.length || a.nodeType) ? this : this.remove()
        );
      },
      detach: function (a) {
        return this.remove(a, !0);
      },
      domManip: function (a, b) {
        a = e.apply([], a);
        var c,
          d,
          f,
          g,
          h,
          i,
          j = 0,
          l = this.length,
          n = this,
          o = l - 1,
          p = a[0],
          q = m.isFunction(p);
        if (
          q ||
          (l > 1 && "string" == typeof p && !k.checkClone && nb.test(p))
        ) {
          return this.each(function (c) {
            var d = n.eq(c);
            q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
          });
        }
        if (
          l &&
          ((i = m.buildFragment(a, this[0].ownerDocument, !1, this)),
          (c = i.firstChild),
          1 === i.childNodes.length && (i = c),
          c)
        ) {
          for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) {
            (d = i),
              j !== o &&
                ((d = m.clone(d, !0, !0)), f && m.merge(g, ub(d, "script"))),
              b.call(this[j], d, j);
          }
          if (f) {
            for (
              h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0;
              f > j;
              j++
            ) {
              (d = g[j]),
                ob.test(d.type || "") &&
                  !m._data(d, "globalEval") &&
                  m.contains(h, d) &&
                  (d.src
                    ? m._evalUrl && m._evalUrl(d.src)
                    : m.globalEval(
                        (d.text || d.textContent || d.innerHTML || "").replace(
                          qb,
                          ""
                        )
                      ));
            }
          }
          i = c = null;
        }
        return this;
      },
    }),
    m.each(
      {
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith",
      },
      function (a, b) {
        m.fn[a] = function (a) {
          for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) {
            (c = d === h ? this : this.clone(!0)),
              m(g[d])[b](c),
              f.apply(e, c.get());
          }
          return this.pushStack(e);
        };
      }
    );
  var Cb,
    Db = {};
  function Eb(b, c) {
    var d,
      e = m(c.createElement(b)).appendTo(c.body),
      f =
        a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0]))
          ? d.display
          : m.css(e[0], "display");
    return e.detach(), f;
  }
  function Fb(a) {
    var b = y,
      c = Db[a];
    return (
      c ||
        ((c = Eb(a, b)),
        ("none" !== c && c) ||
          ((Cb = (
            Cb || m("<iframe frameborder='0' width='0' height='0'/>")
          ).appendTo(b.documentElement)),
          (b = (Cb[0].contentWindow || Cb[0].contentDocument).document),
          b.write(),
          b.close(),
          (c = Eb(a, b)),
          Cb.detach()),
        (Db[a] = c)),
      c
    );
  }
  !(function () {
    var a;
    k.shrinkWrapBlocks = function () {
      if (null != a) {
        return a;
      }
      a = !1;
      var b, c, d;
      return (
        (c = y.getElementsByTagName("body")[0]),
        c && c.style
          ? ((b = y.createElement("div")),
            (d = y.createElement("div")),
            (d.style.cssText =
              "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
            c.appendChild(d).appendChild(b),
            typeof b.style.zoom !== K &&
              ((b.style.cssText =
                "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1"),
              (b.appendChild(y.createElement("div")).style.width = "5px"),
              (a = 3 !== b.offsetWidth)),
            c.removeChild(d),
            a)
          : void 0
      );
    };
  })();
  var Gb = /^margin/,
    Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"),
    Ib,
    Jb,
    Kb = /^(top|right|bottom|left)$/;
  a.getComputedStyle
    ? ((Ib = function (a) {
        return a.ownerDocument.defaultView.getComputedStyle(a, null);
      }),
      (Jb = function (a, b, c) {
        var d,
          e,
          f,
          g,
          h = a.style;
        return (
          (c = c || Ib(a)),
          (g = c ? c.getPropertyValue(b) || c[b] : void 0),
          c &&
            ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)),
            Hb.test(g) &&
              Gb.test(b) &&
              ((d = h.width),
              (e = h.minWidth),
              (f = h.maxWidth),
              (h.minWidth = h.maxWidth = h.width = g),
              (g = c.width),
              (h.width = d),
              (h.minWidth = e),
              (h.maxWidth = f))),
          void 0 === g ? g : g + ""
        );
      }))
    : y.documentElement.currentStyle &&
      ((Ib = function (a) {
        return a.currentStyle;
      }),
      (Jb = function (a, b, c) {
        var d,
          e,
          f,
          g,
          h = a.style;
        return (
          (c = c || Ib(a)),
          (g = c ? c[b] : void 0),
          null == g && h && h[b] && (g = h[b]),
          Hb.test(g) &&
            !Kb.test(b) &&
            ((d = h.left),
            (e = a.runtimeStyle),
            (f = e && e.left),
            f && (e.left = a.currentStyle.left),
            (h.left = "fontSize" === b ? "1em" : g),
            (g = h.pixelLeft + "px"),
            (h.left = d),
            f && (e.left = f)),
          void 0 === g ? g : g + "" || "auto"
        );
      }));
  function Lb(a, b) {
    return {
      get: function () {
        var c = a();
        if (null != c) {
          return c
            ? void delete this.get
            : (this.get = b).apply(this, arguments);
        }
      },
    };
  }
  !(function () {
    var b, c, d, e, f, g, h;
    if (
      ((b = y.createElement("div")),
      (b.innerHTML =
        "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
      (d = b.getElementsByTagName("a")[0]),
      (c = d && d.style))
    ) {
      (c.cssText = "float:left;opacity:.5"),
        (k.opacity = "0.5" === c.opacity),
        (k.cssFloat = !!c.cssFloat),
        (b.style.backgroundClip = "content-box"),
        (b.cloneNode(!0).style.backgroundClip = ""),
        (k.clearCloneStyle = "content-box" === b.style.backgroundClip),
        (k.boxSizing =
          "" === c.boxSizing ||
          "" === c.MozBoxSizing ||
          "" === c.WebkitBoxSizing),
        m.extend(k, {
          reliableHiddenOffsets: function () {
            return null == g && i(), g;
          },
          boxSizingReliable: function () {
            return null == f && i(), f;
          },
          pixelPosition: function () {
            return null == e && i(), e;
          },
          reliableMarginRight: function () {
            return null == h && i(), h;
          },
        });
      function i() {
        var b, c, d, i;
        (c = y.getElementsByTagName("body")[0]),
          c &&
            c.style &&
            ((b = y.createElement("div")),
            (d = y.createElement("div")),
            (d.style.cssText =
              "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
            c.appendChild(d).appendChild(b),
            (b.style.cssText =
              "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute"),
            (e = f = !1),
            (h = !0),
            a.getComputedStyle &&
              ((e = "1%" !== (a.getComputedStyle(b, null) || {}).top),
              (f =
                "4px" ===
                (a.getComputedStyle(b, null) || { width: "4px" }).width),
              (i = b.appendChild(y.createElement("div"))),
              (i.style.cssText = b.style.cssText =
                "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0"),
              (i.style.marginRight = i.style.width = "0"),
              (b.style.width = "1px"),
              (h = !parseFloat(
                (a.getComputedStyle(i, null) || {}).marginRight
              ))),
            (b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>"),
            (i = b.getElementsByTagName("td")),
            (i[0].style.cssText = "margin:0;border:0;padding:0;display:none"),
            (g = 0 === i[0].offsetHeight),
            g &&
              ((i[0].style.display = ""),
              (i[1].style.display = "none"),
              (g = 0 === i[0].offsetHeight)),
            c.removeChild(d));
      }
    }
  })(),
    (m.swap = function (a, b, c, d) {
      var e,
        f,
        g = {};
      for (f in b) {
        (g[f] = a.style[f]), (a.style[f] = b[f]);
      }
      e = c.apply(a, d || []);
      for (f in b) {
        a.style[f] = g[f];
      }
      return e;
    });
  var Mb = /alpha\([^)]*\)/i,
    Nb = /opacity\s*=\s*([^)]*)/,
    Ob = /^(none|table(?!-c[ea]).+)/,
    Pb = new RegExp("^(" + S + ")(.*)$", "i"),
    Qb = new RegExp("^([+-])=(" + S + ")", "i"),
    Rb = { position: "absolute", visibility: "hidden", display: "block" },
    Sb = { letterSpacing: "0", fontWeight: "400" },
    Tb = ["Webkit", "O", "Moz", "ms"];
  function Ub(a, b) {
    if (b in a) {
      return b;
    }
    var c = b.charAt(0).toUpperCase() + b.slice(1),
      d = b,
      e = Tb.length;
    while (e--) {
      if (((b = Tb[e] + c), b in a)) {
        return b;
      }
    }
    return d;
  }
  function Vb(a, b) {
    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {
      (d = a[g]),
        d.style &&
          ((f[g] = m._data(d, "olddisplay")),
          (c = d.style.display),
          b
            ? (f[g] || "none" !== c || (d.style.display = ""),
              "" === d.style.display &&
                U(d) &&
                (f[g] = m._data(d, "olddisplay", Fb(d.nodeName))))
            : ((e = U(d)),
              ((c && "none" !== c) || !e) &&
                m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
    }
    for (g = 0; h > g; g++) {
      (d = a[g]),
        d.style &&
          ((b && "none" !== d.style.display && "" !== d.style.display) ||
            (d.style.display = b ? f[g] || "" : "none"));
    }
    return a;
  }
  function Wb(a, b, c) {
    var d = Pb.exec(b);
    return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
  }
  function Xb(a, b, c, d, e) {
    for (
      var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0,
        g = 0;
      4 > f;
      f += 2
    ) {
      "margin" === c && (g += m.css(a, c + T[f], !0, e)),
        d
          ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)),
            "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e)))
          : ((g += m.css(a, "padding" + T[f], !0, e)),
            "padding" !== c &&
              (g += m.css(a, "border" + T[f] + "Width", !0, e)));
    }
    return g;
  }
  function Yb(a, b, c) {
    var d = !0,
      e = "width" === b ? a.offsetWidth : a.offsetHeight,
      f = Ib(a),
      g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);
    if (0 >= e || null == e) {
      if (
        ((e = Jb(a, b, f)),
        (0 > e || null == e) && (e = a.style[b]),
        Hb.test(e))
      ) {
        return e;
      }
      (d = g && (k.boxSizingReliable() || e === a.style[b])),
        (e = parseFloat(e) || 0);
    }
    return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px";
  }
  m.extend({
    cssHooks: {
      opacity: {
        get: function (a, b) {
          if (b) {
            var c = Jb(a, "opacity");
            return "" === c ? "1" : c;
          }
        },
      },
    },
    cssNumber: {
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
    },
    cssProps: { float: k.cssFloat ? "cssFloat" : "styleFloat" },
    style: function (a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
          f,
          g,
          h = m.camelCase(b),
          i = a.style;
        if (
          ((b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h))),
          (g = m.cssHooks[b] || m.cssHooks[h]),
          void 0 === c)
        ) {
          return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
        }
        if (
          ((f = typeof c),
          "string" === f &&
            (e = Qb.exec(c)) &&
            ((c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b))), (f = "number")),
          null != c &&
            c === c &&
            ("number" !== f || m.cssNumber[h] || (c += "px"),
            k.clearCloneStyle ||
              "" !== c ||
              0 !== b.indexOf("background") ||
              (i[b] = "inherit"),
            !(g && "set" in g && void 0 === (c = g.set(a, c, d)))))
        ) {
          try {
            i[b] = c;
          } catch (j) {}
        }
      }
    },
    css: function (a, b, c, d) {
      var e,
        f,
        g,
        h = m.camelCase(b);
      return (
        (b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h))),
        (g = m.cssHooks[b] || m.cssHooks[h]),
        g && "get" in g && (f = g.get(a, !0, c)),
        void 0 === f && (f = Jb(a, b, d)),
        "normal" === f && b in Sb && (f = Sb[b]),
        "" === c || c
          ? ((e = parseFloat(f)), c === !0 || m.isNumeric(e) ? e || 0 : f)
          : f
      );
    },
  }),
    m.each(["height", "width"], function (a, b) {
      m.cssHooks[b] = {
        get: function (a, c, d) {
          return c
            ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth
              ? m.swap(a, Rb, function () {
                  return Yb(a, b, d);
                })
              : Yb(a, b, d)
            : void 0;
        },
        set: function (a, c, d) {
          var e = d && Ib(a);
          return Wb(
            a,
            c,
            d
              ? Xb(
                  a,
                  b,
                  d,
                  k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e),
                  e
                )
              : 0
          );
        },
      };
    }),
    k.opacity ||
      (m.cssHooks.opacity = {
        get: function (a, b) {
          return Nb.test(
            (b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || ""
          )
            ? 0.01 * parseFloat(RegExp.$1) + ""
            : b
            ? "1"
            : "";
        },
        set: function (a, b) {
          var c = a.style,
            d = a.currentStyle,
            e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
            f = (d && d.filter) || c.filter || "";
          (c.zoom = 1),
            ((b >= 1 || "" === b) &&
              "" === m.trim(f.replace(Mb, "")) &&
              c.removeAttribute &&
              (c.removeAttribute("filter"), "" === b || (d && !d.filter))) ||
              (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e);
        },
      }),
    (m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {
      return b
        ? m.swap(a, { display: "inline-block" }, Jb, [a, "marginRight"])
        : void 0;
    })),
    m.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
      (m.cssHooks[a + b] = {
        expand: function (c) {
          for (
            var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c];
            4 > d;
            d++
          ) {
            e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
          }
          return e;
        },
      }),
        Gb.test(a) || (m.cssHooks[a + b].set = Wb);
    }),
    m.fn.extend({
      css: function (a, b) {
        return V(
          this,
          function (a, b, c) {
            var d,
              e,
              f = {},
              g = 0;
            if (m.isArray(b)) {
              for (d = Ib(a), e = b.length; e > g; g++) {
                f[b[g]] = m.css(a, b[g], !1, d);
              }
              return f;
            }
            return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
          },
          a,
          b,
          arguments.length > 1
        );
      },
      show: function () {
        return Vb(this, !0);
      },
      hide: function () {
        return Vb(this);
      },
      toggle: function (a) {
        return "boolean" == typeof a
          ? a
            ? this.show()
            : this.hide()
          : this.each(function () {
              U(this) ? m(this).show() : m(this).hide();
            });
      },
    });
  function Zb(a, b, c, d, e) {
    return new Zb.prototype.init(a, b, c, d, e);
  }
  (m.Tween = Zb),
    (Zb.prototype = {
      constructor: Zb,
      init: function (a, b, c, d, e, f) {
        (this.elem = a),
          (this.prop = c),
          (this.easing = e || "swing"),
          (this.options = b),
          (this.start = this.now = this.cur()),
          (this.end = d),
          (this.unit = f || (m.cssNumber[c] ? "" : "px"));
      },
      cur: function () {
        var a = Zb.propHooks[this.prop];
        return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);
      },
      run: function (a) {
        var b,
          c = Zb.propHooks[this.prop];
        return (
          (this.pos = b = this.options.duration
            ? m.easing[this.easing](
                a,
                this.options.duration * a,
                0,
                1,
                this.options.duration
              )
            : a),
          (this.now = (this.end - this.start) * b + this.start),
          this.options.step &&
            this.options.step.call(this.elem, this.now, this),
          c && c.set ? c.set(this) : Zb.propHooks._default.set(this),
          this
        );
      },
    }),
    (Zb.prototype.init.prototype = Zb.prototype),
    (Zb.propHooks = {
      _default: {
        get: function (a) {
          var b;
          return null == a.elem[a.prop] ||
            (a.elem.style && null != a.elem.style[a.prop])
            ? ((b = m.css(a.elem, a.prop, "")), b && "auto" !== b ? b : 0)
            : a.elem[a.prop];
        },
        set: function (a) {
          m.fx.step[a.prop]
            ? m.fx.step[a.prop](a)
            : a.elem.style &&
              (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop])
            ? m.style(a.elem, a.prop, a.now + a.unit)
            : (a.elem[a.prop] = a.now);
        },
      },
    }),
    (Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {
      set: function (a) {
        a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
      },
    }),
    (m.easing = {
      linear: function (a) {
        return a;
      },
      swing: function (a) {
        return 0.5 - Math.cos(a * Math.PI) / 2;
      },
    }),
    (m.fx = Zb.prototype.init),
    (m.fx.step = {});
  var $b,
    _b,
    ac = /^(?:toggle|show|hide)$/,
    bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"),
    cc = /queueHooks$/,
    dc = [ic],
    ec = {
      "*": [
        function (a, b) {
          var c = this.createTween(a, b),
            d = c.cur(),
            e = bc.exec(b),
            f = (e && e[3]) || (m.cssNumber[a] ? "" : "px"),
            g =
              (m.cssNumber[a] || ("px" !== f && +d)) &&
              bc.exec(m.css(c.elem, a)),
            h = 1,
            i = 20;
          if (g && g[3] !== f) {
            (f = f || g[3]), (e = e || []), (g = +d || 1);
            do {
              (h = h || ".5"), (g /= h), m.style(c.elem, a, g + f);
            } while (h !== (h = c.cur() / d) && 1 !== h && --i);
          }
          return (
            e &&
              ((g = c.start = +g || +d || 0),
              (c.unit = f),
              (c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2])),
            c
          );
        },
      ],
    };
  function fc() {
    return (
      setTimeout(function () {
        $b = void 0;
      }),
      ($b = m.now())
    );
  }
  function gc(a, b) {
    var c,
      d = { height: a },
      e = 0;
    for (b = b ? 1 : 0; 4 > e; e += 2 - b) {
      (c = T[e]), (d["margin" + c] = d["padding" + c] = a);
    }
    return b && (d.opacity = d.width = a), d;
  }
  function hc(a, b, c) {
    for (
      var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length;
      g > f;
      f++
    ) {
      if ((d = e[f].call(c, b, a))) {
        return d;
      }
    }
  }
  function ic(a, b, c) {
    var d,
      e,
      f,
      g,
      h,
      i,
      j,
      l,
      n = this,
      o = {},
      p = a.style,
      q = a.nodeType && U(a),
      r = m._data(a, "fxshow");
    c.queue ||
      ((h = m._queueHooks(a, "fx")),
      null == h.unqueued &&
        ((h.unqueued = 0),
        (i = h.empty.fire),
        (h.empty.fire = function () {
          h.unqueued || i();
        })),
      h.unqueued++,
      n.always(function () {
        n.always(function () {
          h.unqueued--, m.queue(a, "fx").length || h.empty.fire();
        });
      })),
      1 === a.nodeType &&
        ("height" in b || "width" in b) &&
        ((c.overflow = [p.overflow, p.overflowX, p.overflowY]),
        (j = m.css(a, "display")),
        (l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j),
        "inline" === l &&
          "none" === m.css(a, "float") &&
          (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName)
            ? (p.zoom = 1)
            : (p.display = "inline-block"))),
      c.overflow &&
        ((p.overflow = "hidden"),
        k.shrinkWrapBlocks() ||
          n.always(function () {
            (p.overflow = c.overflow[0]),
              (p.overflowX = c.overflow[1]),
              (p.overflowY = c.overflow[2]);
          }));
    for (d in b) {
      if (((e = b[d]), ac.exec(e))) {
        if (
          (delete b[d], (f = f || "toggle" === e), e === (q ? "hide" : "show"))
        ) {
          if ("show" !== e || !r || void 0 === r[d]) {
            continue;
          }
          q = !0;
        }
        o[d] = (r && r[d]) || m.style(a, d);
      } else {
        j = void 0;
      }
    }
    if (m.isEmptyObject(o)) {
      "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j);
    } else {
      r ? "hidden" in r && (q = r.hidden) : (r = m._data(a, "fxshow", {})),
        f && (r.hidden = !q),
        q
          ? m(a).show()
          : n.done(function () {
              m(a).hide();
            }),
        n.done(function () {
          var b;
          m._removeData(a, "fxshow");
          for (b in o) {
            m.style(a, b, o[b]);
          }
        });
      for (d in o) {
        (g = hc(q ? r[d] : 0, d, n)),
          d in r ||
            ((r[d] = g.start),
            q &&
              ((g.end = g.start),
              (g.start = "width" === d || "height" === d ? 1 : 0)));
      }
    }
  }
  function jc(a, b) {
    var c, d, e, f, g;
    for (c in a) {
      if (
        ((d = m.camelCase(c)),
        (e = b[d]),
        (f = a[c]),
        m.isArray(f) && ((e = f[1]), (f = a[c] = f[0])),
        c !== d && ((a[d] = f), delete a[c]),
        (g = m.cssHooks[d]),
        g && "expand" in g)
      ) {
        (f = g.expand(f)), delete a[d];
        for (c in f) {
          c in a || ((a[c] = f[c]), (b[c] = e));
        }
      } else {
        b[d] = e;
      }
    }
  }
  function kc(a, b, c) {
    var d,
      e,
      f = 0,
      g = dc.length,
      h = m.Deferred().always(function () {
        delete i.elem;
      }),
      i = function () {
        if (e) {
          return !1;
        }
        for (
          var b = $b || fc(),
            c = Math.max(0, j.startTime + j.duration - b),
            d = c / j.duration || 0,
            f = 1 - d,
            g = 0,
            i = j.tweens.length;
          i > g;
          g++
        ) {
          j.tweens[g].run(f);
        }
        return (
          h.notifyWith(a, [j, f, c]),
          1 > f && i ? c : (h.resolveWith(a, [j]), !1)
        );
      },
      j = h.promise({
        elem: a,
        props: m.extend({}, b),
        opts: m.extend(!0, { specialEasing: {} }, c),
        originalProperties: b,
        originalOptions: c,
        startTime: $b || fc(),
        duration: c.duration,
        tweens: [],
        createTween: function (b, c) {
          var d = m.Tween(
            a,
            j.opts,
            b,
            c,
            j.opts.specialEasing[b] || j.opts.easing
          );
          return j.tweens.push(d), d;
        },
        stop: function (b) {
          var c = 0,
            d = b ? j.tweens.length : 0;
          if (e) {
            return this;
          }
          for (e = !0; d > c; c++) {
            j.tweens[c].run(1);
          }
          return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
        },
      }),
      k = j.props;
    for (jc(k, j.opts.specialEasing); g > f; f++) {
      if ((d = dc[f].call(j, a, k, j.opts))) {
        return d;
      }
    }
    return (
      m.map(k, hc, j),
      m.isFunction(j.opts.start) && j.opts.start.call(a, j),
      m.fx.timer(m.extend(i, { elem: a, anim: j, queue: j.opts.queue })),
      j
        .progress(j.opts.progress)
        .done(j.opts.done, j.opts.complete)
        .fail(j.opts.fail)
        .always(j.opts.always)
    );
  }
  (m.Animation = m.extend(kc, {
    tweener: function (a, b) {
      m.isFunction(a) ? ((b = a), (a = ["*"])) : (a = a.split(" "));
      for (var c, d = 0, e = a.length; e > d; d++) {
        (c = a[d]), (ec[c] = ec[c] || []), ec[c].unshift(b);
      }
    },
    prefilter: function (a, b) {
      b ? dc.unshift(a) : dc.push(a);
    },
  })),
    (m.speed = function (a, b, c) {
      var d =
        a && "object" == typeof a
          ? m.extend({}, a)
          : {
              complete: c || (!c && b) || (m.isFunction(a) && a),
              duration: a,
              easing: (c && b) || (b && !m.isFunction(b) && b),
            };
      return (
        (d.duration = m.fx.off
          ? 0
          : "number" == typeof d.duration
          ? d.duration
          : d.duration in m.fx.speeds
          ? m.fx.speeds[d.duration]
          : m.fx.speeds._default),
        (null == d.queue || d.queue === !0) && (d.queue = "fx"),
        (d.old = d.complete),
        (d.complete = function () {
          m.isFunction(d.old) && d.old.call(this),
            d.queue && m.dequeue(this, d.queue);
        }),
        d
      );
    }),
    m.fn.extend({
      fadeTo: function (a, b, c, d) {
        return this.filter(U)
          .css("opacity", 0)
          .show()
          .end()
          .animate({ opacity: b }, a, c, d);
      },
      animate: function (a, b, c, d) {
        var e = m.isEmptyObject(a),
          f = m.speed(b, c, d),
          g = function () {
            var b = kc(this, m.extend({}, a), f);
            (e || m._data(this, "finish")) && b.stop(!0);
          };
        return (
          (g.finish = g),
          e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
        );
      },
      stop: function (a, b, c) {
        var d = function (a) {
          var b = a.stop;
          delete a.stop, b(c);
        };
        return (
          "string" != typeof a && ((c = b), (b = a), (a = void 0)),
          b && a !== !1 && this.queue(a || "fx", []),
          this.each(function () {
            var b = !0,
              e = null != a && a + "queueHooks",
              f = m.timers,
              g = m._data(this);
            if (e) {
              g[e] && g[e].stop && d(g[e]);
            } else {
              for (e in g) {
                g[e] && g[e].stop && cc.test(e) && d(g[e]);
              }
            }
            for (e = f.length; e--; ) {
              f[e].elem !== this ||
                (null != a && f[e].queue !== a) ||
                (f[e].anim.stop(c), (b = !1), f.splice(e, 1));
            }
            (b || !c) && m.dequeue(this, a);
          })
        );
      },
      finish: function (a) {
        return (
          a !== !1 && (a = a || "fx"),
          this.each(function () {
            var b,
              c = m._data(this),
              d = c[a + "queue"],
              e = c[a + "queueHooks"],
              f = m.timers,
              g = d ? d.length : 0;
            for (
              c.finish = !0,
                m.queue(this, a, []),
                e && e.stop && e.stop.call(this, !0),
                b = f.length;
              b--;

            ) {
              f[b].elem === this &&
                f[b].queue === a &&
                (f[b].anim.stop(!0), f.splice(b, 1));
            }
            for (b = 0; g > b; b++) {
              d[b] && d[b].finish && d[b].finish.call(this);
            }
            delete c.finish;
          })
        );
      },
    }),
    m.each(["toggle", "show", "hide"], function (a, b) {
      var c = m.fn[b];
      m.fn[b] = function (a, d, e) {
        return null == a || "boolean" == typeof a
          ? c.apply(this, arguments)
          : this.animate(gc(b, !0), a, d, e);
      };
    }),
    m.each(
      {
        slideDown: gc("show"),
        slideUp: gc("hide"),
        slideToggle: gc("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" },
      },
      function (a, b) {
        m.fn[a] = function (a, c, d) {
          return this.animate(b, a, c, d);
        };
      }
    ),
    (m.timers = []),
    (m.fx.tick = function () {
      var a,
        b = m.timers,
        c = 0;
      for ($b = m.now(); c < b.length; c++) {
        (a = b[c]), a() || b[c] !== a || b.splice(c--, 1);
      }
      b.length || m.fx.stop(), ($b = void 0);
    }),
    (m.fx.timer = function (a) {
      m.timers.push(a), a() ? m.fx.start() : m.timers.pop();
    }),
    (m.fx.interval = 13),
    (m.fx.start = function () {
      _b || (_b = setInterval(m.fx.tick, m.fx.interval));
    }),
    (m.fx.stop = function () {
      clearInterval(_b), (_b = null);
    }),
    (m.fx.speeds = { slow: 600, fast: 200, _default: 400 }),
    (m.fn.delay = function (a, b) {
      return (
        (a = m.fx ? m.fx.speeds[a] || a : a),
        (b = b || "fx"),
        this.queue(b, function (b, c) {
          var d = setTimeout(b, a);
          c.stop = function () {
            clearTimeout(d);
          };
        })
      );
    }),
    (function () {
      var a, b, c, d, e;
      (b = y.createElement("div")),
        b.setAttribute("className", "t"),
        (b.innerHTML =
          "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
        (d = b.getElementsByTagName("a")[0]),
        (c = y.createElement("select")),
        (e = c.appendChild(y.createElement("option"))),
        (a = b.getElementsByTagName("input")[0]),
        (d.style.cssText = "top:1px"),
        (k.getSetAttribute = "t" !== b.className),
        (k.style = /top/.test(d.getAttribute("style"))),
        (k.hrefNormalized = "/a" === d.getAttribute("href")),
        (k.checkOn = !!a.value),
        (k.optSelected = e.selected),
        (k.enctype = !!y.createElement("form").enctype),
        (c.disabled = !0),
        (k.optDisabled = !e.disabled),
        (a = y.createElement("input")),
        a.setAttribute("value", ""),
        (k.input = "" === a.getAttribute("value")),
        (a.value = "t"),
        a.setAttribute("type", "radio"),
        (k.radioValue = "t" === a.value);
    })();
  var lc = /\r/g;
  m.fn.extend({
    val: function (a) {
      var b,
        c,
        d,
        e = this[0];
      if (arguments.length) {
        return (
          (d = m.isFunction(a)),
          this.each(function (c) {
            var e;
            1 === this.nodeType &&
              ((e = d ? a.call(this, c, m(this).val()) : a),
              null == e
                ? (e = "")
                : "number" == typeof e
                ? (e += "")
                : m.isArray(e) &&
                  (e = m.map(e, function (a) {
                    return null == a ? "" : a + "";
                  })),
              (b =
                m.valHooks[this.type] ||
                m.valHooks[this.nodeName.toLowerCase()]),
              (b && "set" in b && void 0 !== b.set(this, e, "value")) ||
                (this.value = e));
          })
        );
      }
      if (e) {
        return (
          (b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()]),
          b && "get" in b && void 0 !== (c = b.get(e, "value"))
            ? c
            : ((c = e.value),
              "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c)
        );
      }
    },
  }),
    m.extend({
      valHooks: {
        option: {
          get: function (a) {
            var b = m.find.attr(a, "value");
            return null != b ? b : m.trim(m.text(a));
          },
        },
        select: {
          get: function (a) {
            for (
              var b,
                c,
                d = a.options,
                e = a.selectedIndex,
                f = "select-one" === a.type || 0 > e,
                g = f ? null : [],
                h = f ? e + 1 : d.length,
                i = 0 > e ? h : f ? e : 0;
              h > i;
              i++
            ) {
              if (
                ((c = d[i]),
                !(
                  (!c.selected && i !== e) ||
                  (k.optDisabled
                    ? c.disabled
                    : null !== c.getAttribute("disabled")) ||
                  (c.parentNode.disabled &&
                    m.nodeName(c.parentNode, "optgroup"))
                ))
              ) {
                if (((b = m(c).val()), f)) {
                  return b;
                }
                g.push(b);
              }
            }
            return g;
          },
          set: function (a, b) {
            var c,
              d,
              e = a.options,
              f = m.makeArray(b),
              g = e.length;
            while (g--) {
              if (((d = e[g]), m.inArray(m.valHooks.option.get(d), f) >= 0)) {
                try {
                  d.selected = c = !0;
                } catch (h) {
                  d.scrollHeight;
                }
              } else {
                d.selected = !1;
              }
            }
            return c || (a.selectedIndex = -1), e;
          },
        },
      },
    }),
    m.each(["radio", "checkbox"], function () {
      (m.valHooks[this] = {
        set: function (a, b) {
          return m.isArray(b)
            ? (a.checked = m.inArray(m(a).val(), b) >= 0)
            : void 0;
        },
      }),
        k.checkOn ||
          (m.valHooks[this].get = function (a) {
            return null === a.getAttribute("value") ? "on" : a.value;
          });
    });
  var mc,
    nc,
    oc = m.expr.attrHandle,
    pc = /^(?:checked|selected)$/i,
    qc = k.getSetAttribute,
    rc = k.input;
  m.fn.extend({
    attr: function (a, b) {
      return V(this, m.attr, a, b, arguments.length > 1);
    },
    removeAttr: function (a) {
      return this.each(function () {
        m.removeAttr(this, a);
      });
    },
  }),
    m.extend({
      attr: function (a, b, c) {
        var d,
          e,
          f = a.nodeType;
        if (a && 3 !== f && 8 !== f && 2 !== f) {
          return typeof a.getAttribute === K
            ? m.prop(a, b, c)
            : ((1 === f && m.isXMLDoc(a)) ||
                ((b = b.toLowerCase()),
                (d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc))),
              void 0 === c
                ? d && "get" in d && null !== (e = d.get(a, b))
                  ? e
                  : ((e = m.find.attr(a, b)), null == e ? void 0 : e)
                : null !== c
                ? d && "set" in d && void 0 !== (e = d.set(a, c, b))
                  ? e
                  : (a.setAttribute(b, c + ""), c)
                : void m.removeAttr(a, b));
        }
      },
      removeAttr: function (a, b) {
        var c,
          d,
          e = 0,
          f = b && b.match(E);
        if (f && 1 === a.nodeType) {
          while ((c = f[e++])) {
            (d = m.propFix[c] || c),
              m.expr.match.bool.test(c)
                ? (rc && qc) || !pc.test(c)
                  ? (a[d] = !1)
                  : (a[m.camelCase("default-" + c)] = a[d] = !1)
                : m.attr(a, c, ""),
              a.removeAttribute(qc ? c : d);
          }
        }
      },
      attrHooks: {
        type: {
          set: function (a, b) {
            if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
              var c = a.value;
              return a.setAttribute("type", b), c && (a.value = c), b;
            }
          },
        },
      },
    }),
    (nc = {
      set: function (a, b, c) {
        return (
          b === !1
            ? m.removeAttr(a, c)
            : (rc && qc) || !pc.test(c)
            ? a.setAttribute((!qc && m.propFix[c]) || c, c)
            : (a[m.camelCase("default-" + c)] = a[c] = !0),
          c
        );
      },
    }),
    m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {
      var c = oc[b] || m.find.attr;
      oc[b] =
        (rc && qc) || !pc.test(b)
          ? function (a, b, d) {
              var e, f;
              return (
                d ||
                  ((f = oc[b]),
                  (oc[b] = e),
                  (e = null != c(a, b, d) ? b.toLowerCase() : null),
                  (oc[b] = f)),
                e
              );
            }
          : function (a, b, c) {
              return c
                ? void 0
                : a[m.camelCase("default-" + b)]
                ? b.toLowerCase()
                : null;
            };
    }),
    (rc && qc) ||
      (m.attrHooks.value = {
        set: function (a, b, c) {
          return m.nodeName(a, "input")
            ? void (a.defaultValue = b)
            : mc && mc.set(a, b, c);
        },
      }),
    qc ||
      ((mc = {
        set: function (a, b, c) {
          var d = a.getAttributeNode(c);
          return (
            d || a.setAttributeNode((d = a.ownerDocument.createAttribute(c))),
            (d.value = b += ""),
            "value" === c || b === a.getAttribute(c) ? b : void 0
          );
        },
      }),
      (oc.id = oc.name = oc.coords = function (a, b, c) {
        var d;
        return c
          ? void 0
          : (d = a.getAttributeNode(b)) && "" !== d.value
          ? d.value
          : null;
      }),
      (m.valHooks.button = {
        get: function (a, b) {
          var c = a.getAttributeNode(b);
          return c && c.specified ? c.value : void 0;
        },
        set: mc.set,
      }),
      (m.attrHooks.contenteditable = {
        set: function (a, b, c) {
          mc.set(a, "" === b ? !1 : b, c);
        },
      }),
      m.each(["width", "height"], function (a, b) {
        m.attrHooks[b] = {
          set: function (a, c) {
            return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
          },
        };
      })),
    k.style ||
      (m.attrHooks.style = {
        get: function (a) {
          return a.style.cssText || void 0;
        },
        set: function (a, b) {
          return (a.style.cssText = b + "");
        },
      });
  var sc = /^(?:input|select|textarea|button|object)$/i,
    tc = /^(?:a|area)$/i;
  m.fn.extend({
    prop: function (a, b) {
      return V(this, m.prop, a, b, arguments.length > 1);
    },
    removeProp: function (a) {
      return (
        (a = m.propFix[a] || a),
        this.each(function () {
          try {
            (this[a] = void 0), delete this[a];
          } catch (b) {}
        })
      );
    },
  }),
    m.extend({
      propFix: { for: "htmlFor", class: "className" },
      prop: function (a, b, c) {
        var d,
          e,
          f,
          g = a.nodeType;
        if (a && 3 !== g && 8 !== g && 2 !== g) {
          return (
            (f = 1 !== g || !m.isXMLDoc(a)),
            f && ((b = m.propFix[b] || b), (e = m.propHooks[b])),
            void 0 !== c
              ? e && "set" in e && void 0 !== (d = e.set(a, c, b))
                ? d
                : (a[b] = c)
              : e && "get" in e && null !== (d = e.get(a, b))
              ? d
              : a[b]
          );
        }
      },
      propHooks: {
        tabIndex: {
          get: function (a) {
            var b = m.find.attr(a, "tabindex");
            return b
              ? parseInt(b, 10)
              : sc.test(a.nodeName) || (tc.test(a.nodeName) && a.href)
              ? 0
              : -1;
          },
        },
      },
    }),
    k.hrefNormalized ||
      m.each(["href", "src"], function (a, b) {
        m.propHooks[b] = {
          get: function (a) {
            return a.getAttribute(b, 4);
          },
        };
      }),
    k.optSelected ||
      (m.propHooks.selected = {
        get: function (a) {
          var b = a.parentNode;
          return (
            b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex),
            null
          );
        },
      }),
    m.each(
      [
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable",
      ],
      function () {
        m.propFix[this.toLowerCase()] = this;
      }
    ),
    k.enctype || (m.propFix.enctype = "encoding");
  var uc = /[\t\r\n\f]/g;
  m.fn.extend({
    addClass: function (a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h = 0,
        i = this.length,
        j = "string" == typeof a && a;
      if (m.isFunction(a)) {
        return this.each(function (b) {
          m(this).addClass(a.call(this, b, this.className));
        });
      }
      if (j) {
        for (b = (a || "").match(E) || []; i > h; h++) {
          if (
            ((c = this[h]),
            (d =
              1 === c.nodeType &&
              (c.className ? (" " + c.className + " ").replace(uc, " ") : " ")))
          ) {
            f = 0;
            while ((e = b[f++])) {
              d.indexOf(" " + e + " ") < 0 && (d += e + " ");
            }
            (g = m.trim(d)), c.className !== g && (c.className = g);
          }
        }
      }
      return this;
    },
    removeClass: function (a) {
      var b,
        c,
        d,
        e,
        f,
        g,
        h = 0,
        i = this.length,
        j = 0 === arguments.length || ("string" == typeof a && a);
      if (m.isFunction(a)) {
        return this.each(function (b) {
          m(this).removeClass(a.call(this, b, this.className));
        });
      }
      if (j) {
        for (b = (a || "").match(E) || []; i > h; h++) {
          if (
            ((c = this[h]),
            (d =
              1 === c.nodeType &&
              (c.className ? (" " + c.className + " ").replace(uc, " ") : "")))
          ) {
            f = 0;
            while ((e = b[f++])) {
              while (d.indexOf(" " + e + " ") >= 0) {
                d = d.replace(" " + e + " ", " ");
              }
            }
            (g = a ? m.trim(d) : ""), c.className !== g && (c.className = g);
          }
        }
      }
      return this;
    },
    toggleClass: function (a, b) {
      var c = typeof a;
      return "boolean" == typeof b && "string" === c
        ? b
          ? this.addClass(a)
          : this.removeClass(a)
        : this.each(
            m.isFunction(a)
              ? function (c) {
                  m(this).toggleClass(a.call(this, c, this.className, b), b);
                }
              : function () {
                  if ("string" === c) {
                    var b,
                      d = 0,
                      e = m(this),
                      f = a.match(E) || [];
                    while ((b = f[d++])) {
                      e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
                    }
                  } else {
                    (c === K || "boolean" === c) &&
                      (this.className &&
                        m._data(this, "__className__", this.className),
                      (this.className =
                        this.className || a === !1
                          ? ""
                          : m._data(this, "__className__") || ""));
                  }
                }
          );
    },
    hasClass: function (a) {
      for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {
        if (
          1 === this[c].nodeType &&
          (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0
        ) {
          return !0;
        }
      }
      return !1;
    },
  }),
    m.each(
      "blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(
        " "
      ),
      function (a, b) {
        m.fn[b] = function (a, c) {
          return arguments.length > 0
            ? this.on(b, null, a, c)
            : this.trigger(b);
        };
      }
    ),
    m.fn.extend({
      hover: function (a, b) {
        return this.mouseenter(a).mouseleave(b || a);
      },
      bind: function (a, b, c) {
        return this.on(a, null, b, c);
      },
      unbind: function (a, b) {
        return this.off(a, null, b);
      },
      delegate: function (a, b, c, d) {
        return this.on(b, a, c, d);
      },
      undelegate: function (a, b, c) {
        return 1 === arguments.length
          ? this.off(a, "**")
          : this.off(b, a || "**", c);
      },
    });
  var vc = m.now(),
    wc = /\?/,
    xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
  (m.parseJSON = function (b) {
    if (a.JSON && a.JSON.parse) {
      return a.JSON.parse(b + "");
    }
    var c,
      d = null,
      e = m.trim(b + "");
    return e &&
      !m.trim(
        e.replace(xc, function (a, b, e, f) {
          return (
            c && b && (d = 0), 0 === d ? a : ((c = e || b), (d += !f - !e), "")
          );
        })
      )
      ? Function("return " + e)()
      : m.error("Invalid JSON: " + b);
  }),
    (m.parseXML = function (b) {
      var c, d;
      if (!b || "string" != typeof b) {
        return null;
      }
      try {
        a.DOMParser
          ? ((d = new DOMParser()), (c = d.parseFromString(b, "text/xml")))
          : ((c = new ActiveXObject("Microsoft.XMLDOM")),
            (c.async = "false"),
            c.loadXML(b));
      } catch (e) {
        c = void 0;
      }
      return (
        (c &&
          c.documentElement &&
          !c.getElementsByTagName("parsererror").length) ||
          m.error("Invalid XML: " + b),
        c
      );
    });
  var yc,
    zc,
    Ac = /#.*$/,
    Bc = /([?&])_=[^&]*/,
    Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
    Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    Ec = /^(?:GET|HEAD)$/,
    Fc = /^\/\//,
    Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    Hc = {},
    Ic = {},
    Jc = "*/".concat("*");
  try {
    zc = location.href;
  } catch (Kc) {
    (zc = y.createElement("a")), (zc.href = ""), (zc = zc.href);
  }
  yc = Gc.exec(zc.toLowerCase()) || [];
  function Lc(a) {
    return function (b, c) {
      "string" != typeof b && ((c = b), (b = "*"));
      var d,
        e = 0,
        f = b.toLowerCase().match(E) || [];
      if (m.isFunction(c)) {
        while ((d = f[e++])) {
          "+" === d.charAt(0)
            ? ((d = d.slice(1) || "*"), (a[d] = a[d] || []).unshift(c))
            : (a[d] = a[d] || []).push(c);
        }
      }
    };
  }
  function Mc(a, b, c, d) {
    var e = {},
      f = a === Ic;
    function g(h) {
      var i;
      return (
        (e[h] = !0),
        m.each(a[h] || [], function (a, h) {
          var j = h(b, c, d);
          return "string" != typeof j || f || e[j]
            ? f
              ? !(i = j)
              : void 0
            : (b.dataTypes.unshift(j), g(j), !1);
        }),
        i
      );
    }
    return g(b.dataTypes[0]) || (!e["*"] && g("*"));
  }
  function Nc(a, b) {
    var c,
      d,
      e = m.ajaxSettings.flatOptions || {};
    for (d in b) {
      void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
    }
    return c && m.extend(!0, a, c), a;
  }
  function Oc(a, b, c) {
    var d,
      e,
      f,
      g,
      h = a.contents,
      i = a.dataTypes;
    while ("*" === i[0]) {
      i.shift(),
        void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
    }
    if (e) {
      for (g in h) {
        if (h[g] && h[g].test(e)) {
          i.unshift(g);
          break;
        }
      }
    }
    if (i[0] in c) {
      f = i[0];
    } else {
      for (g in c) {
        if (!i[0] || a.converters[g + " " + i[0]]) {
          f = g;
          break;
        }
        d || (d = g);
      }
      f = f || d;
    }
    return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
  }
  function Pc(a, b, c, d) {
    var e,
      f,
      g,
      h,
      i,
      j = {},
      k = a.dataTypes.slice();
    if (k[1]) {
      for (g in a.converters) {
        j[g.toLowerCase()] = a.converters[g];
      }
    }
    f = k.shift();
    while (f) {
      if (
        (a.responseFields[f] && (c[a.responseFields[f]] = b),
        !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)),
        (i = f),
        (f = k.shift()))
      ) {
        if ("*" === f) {
          f = i;
        } else {
          if ("*" !== i && i !== f) {
            if (((g = j[i + " " + f] || j["* " + f]), !g)) {
              for (e in j) {
                if (
                  ((h = e.split(" ")),
                  h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]]))
                ) {
                  g === !0
                    ? (g = j[e])
                    : j[e] !== !0 && ((f = h[0]), k.unshift(h[1]));
                  break;
                }
              }
            }
            if (g !== !0) {
              if (g && a["throws"]) {
                b = g(b);
              } else {
                try {
                  b = g(b);
                } catch (l) {
                  return {
                    state: "parsererror",
                    error: g ? l : "No conversion from " + i + " to " + f,
                  };
                }
              }
            }
          }
        }
      }
    }
    return { state: "success", data: b };
  }
  m.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: zc,
      type: "GET",
      isLocal: Dc.test(yc[1]),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": Jc,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript",
      },
      contents: { xml: /xml/, html: /html/, json: /json/ },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON",
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": m.parseJSON,
        "text xml": m.parseXML,
      },
      flatOptions: { url: !0, context: !0 },
    },
    ajaxSetup: function (a, b) {
      return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);
    },
    ajaxPrefilter: Lc(Hc),
    ajaxTransport: Lc(Ic),
    ajax: function (a, b) {
      "object" == typeof a && ((b = a), (a = void 0)), (b = b || {});
      var c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k = m.ajaxSetup({}, b),
        l = k.context || k,
        n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,
        o = m.Deferred(),
        p = m.Callbacks("once memory"),
        q = k.statusCode || {},
        r = {},
        s = {},
        t = 0,
        u = "canceled",
        v = {
          readyState: 0,
          getResponseHeader: function (a) {
            var b;
            if (2 === t) {
              if (!j) {
                j = {};
                while ((b = Cc.exec(f))) {
                  j[b[1].toLowerCase()] = b[2];
                }
              }
              b = j[a.toLowerCase()];
            }
            return null == b ? null : b;
          },
          getAllResponseHeaders: function () {
            return 2 === t ? f : null;
          },
          setRequestHeader: function (a, b) {
            var c = a.toLowerCase();
            return t || ((a = s[c] = s[c] || a), (r[a] = b)), this;
          },
          overrideMimeType: function (a) {
            return t || (k.mimeType = a), this;
          },
          statusCode: function (a) {
            var b;
            if (a) {
              if (2 > t) {
                for (b in a) {
                  q[b] = [q[b], a[b]];
                }
              } else {
                v.always(a[v.status]);
              }
            }
            return this;
          },
          abort: function (a) {
            var b = a || u;
            return i && i.abort(b), x(0, b), this;
          },
        };
      if (
        ((o.promise(v).complete = p.add),
        (v.success = v.done),
        (v.error = v.fail),
        (k.url = ((a || k.url || zc) + "")
          .replace(Ac, "")
          .replace(Fc, yc[1] + "//")),
        (k.type = b.method || b.type || k.method || k.type),
        (k.dataTypes = m
          .trim(k.dataType || "*")
          .toLowerCase()
          .match(E) || [""]),
        null == k.crossDomain &&
          ((c = Gc.exec(k.url.toLowerCase())),
          (k.crossDomain = !(
            !c ||
            (c[1] === yc[1] &&
              c[2] === yc[2] &&
              (c[3] || ("http:" === c[1] ? "80" : "443")) ===
                (yc[3] || ("http:" === yc[1] ? "80" : "443")))
          ))),
        k.data &&
          k.processData &&
          "string" != typeof k.data &&
          (k.data = m.param(k.data, k.traditional)),
        Mc(Hc, k, b, v),
        2 === t)
      ) {
        return v;
      }
      (h = k.global),
        h && 0 === m.active++ && m.event.trigger("ajaxStart"),
        (k.type = k.type.toUpperCase()),
        (k.hasContent = !Ec.test(k.type)),
        (e = k.url),
        k.hasContent ||
          (k.data &&
            ((e = k.url += (wc.test(e) ? "&" : "?") + k.data), delete k.data),
          k.cache === !1 &&
            (k.url = Bc.test(e)
              ? e.replace(Bc, "$1_=" + vc++)
              : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)),
        k.ifModified &&
          (m.lastModified[e] &&
            v.setRequestHeader("If-Modified-Since", m.lastModified[e]),
          m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])),
        ((k.data && k.hasContent && k.contentType !== !1) || b.contentType) &&
          v.setRequestHeader("Content-Type", k.contentType),
        v.setRequestHeader(
          "Accept",
          k.dataTypes[0] && k.accepts[k.dataTypes[0]]
            ? k.accepts[k.dataTypes[0]] +
                ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "")
            : k.accepts["*"]
        );
      for (d in k.headers) {
        v.setRequestHeader(d, k.headers[d]);
      }
      if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) {
        return v.abort();
      }
      u = "abort";
      for (d in { success: 1, error: 1, complete: 1 }) {
        v[d](k[d]);
      }
      if ((i = Mc(Ic, k, b, v))) {
        (v.readyState = 1),
          h && n.trigger("ajaxSend", [v, k]),
          k.async &&
            k.timeout > 0 &&
            (g = setTimeout(function () {
              v.abort("timeout");
            }, k.timeout));
        try {
          (t = 1), i.send(r, x);
        } catch (w) {
          if (!(2 > t)) {
            throw w;
          }
          x(-1, w);
        }
      } else {
        x(-1, "No Transport");
      }
      function x(a, b, c, d) {
        var j,
          r,
          s,
          u,
          w,
          x = b;
        2 !== t &&
          ((t = 2),
          g && clearTimeout(g),
          (i = void 0),
          (f = d || ""),
          (v.readyState = a > 0 ? 4 : 0),
          (j = (a >= 200 && 300 > a) || 304 === a),
          c && (u = Oc(k, v, c)),
          (u = Pc(k, u, v, j)),
          j
            ? (k.ifModified &&
                ((w = v.getResponseHeader("Last-Modified")),
                w && (m.lastModified[e] = w),
                (w = v.getResponseHeader("etag")),
                w && (m.etag[e] = w)),
              204 === a || "HEAD" === k.type
                ? (x = "nocontent")
                : 304 === a
                ? (x = "notmodified")
                : ((x = u.state), (r = u.data), (s = u.error), (j = !s)))
            : ((s = x), (a || !x) && ((x = "error"), 0 > a && (a = 0))),
          (v.status = a),
          (v.statusText = (b || x) + ""),
          j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]),
          v.statusCode(q),
          (q = void 0),
          h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]),
          p.fireWith(l, [v, x]),
          h &&
            (n.trigger("ajaxComplete", [v, k]),
            --m.active || m.event.trigger("ajaxStop")));
      }
      return v;
    },
    getJSON: function (a, b, c) {
      return m.get(a, b, c, "json");
    },
    getScript: function (a, b) {
      return m.get(a, void 0, b, "script");
    },
  }),
    m.each(["get", "post"], function (a, b) {
      m[b] = function (a, c, d, e) {
        return (
          m.isFunction(c) && ((e = e || d), (d = c), (c = void 0)),
          m.ajax({ url: a, type: b, dataType: e, data: c, success: d })
        );
      };
    }),
    m.each(
      [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend",
      ],
      function (a, b) {
        m.fn[b] = function (a) {
          return this.on(b, a);
        };
      }
    ),
    (m._evalUrl = function (a) {
      return m.ajax({
        url: a,
        type: "GET",
        dataType: "script",
        async: !1,
        global: !1,
        throws: !0,
      });
    }),
    m.fn.extend({
      wrapAll: function (a) {
        if (m.isFunction(a)) {
          return this.each(function (b) {
            m(this).wrapAll(a.call(this, b));
          });
        }
        if (this[0]) {
          var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
          this[0].parentNode && b.insertBefore(this[0]),
            b
              .map(function () {
                var a = this;
                while (a.firstChild && 1 === a.firstChild.nodeType) {
                  a = a.firstChild;
                }
                return a;
              })
              .append(this);
        }
        return this;
      },
      wrapInner: function (a) {
        return this.each(
          m.isFunction(a)
            ? function (b) {
                m(this).wrapInner(a.call(this, b));
              }
            : function () {
                var b = m(this),
                  c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a);
              }
        );
      },
      wrap: function (a) {
        var b = m.isFunction(a);
        return this.each(function (c) {
          m(this).wrapAll(b ? a.call(this, c) : a);
        });
      },
      unwrap: function () {
        return this.parent()
          .each(function () {
            m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);
          })
          .end();
      },
    }),
    (m.expr.filters.hidden = function (a) {
      return (
        (a.offsetWidth <= 0 && a.offsetHeight <= 0) ||
        (!k.reliableHiddenOffsets() &&
          "none" === ((a.style && a.style.display) || m.css(a, "display")))
      );
    }),
    (m.expr.filters.visible = function (a) {
      return !m.expr.filters.hidden(a);
    });
  var Qc = /%20/g,
    Rc = /\[\]$/,
    Sc = /\r?\n/g,
    Tc = /^(?:submit|button|image|reset|file)$/i,
    Uc = /^(?:input|select|textarea|keygen)/i;
  function Vc(a, b, c, d) {
    var e;
    if (m.isArray(b)) {
      m.each(b, function (b, e) {
        c || Rc.test(a)
          ? d(a, e)
          : Vc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d);
      });
    } else {
      if (c || "object" !== m.type(b)) {
        d(a, b);
      } else {
        for (e in b) {
          Vc(a + "[" + e + "]", b[e], c, d);
        }
      }
    }
  }
  (m.param = function (a, b) {
    var c,
      d = [],
      e = function (a, b) {
        (b = m.isFunction(b) ? b() : null == b ? "" : b),
          (d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b));
      };
    if (
      (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional),
      m.isArray(a) || (a.jquery && !m.isPlainObject(a)))
    ) {
      m.each(a, function () {
        e(this.name, this.value);
      });
    } else {
      for (c in a) {
        Vc(c, a[c], b, e);
      }
    }
    return d.join("&").replace(Qc, "+");
  }),
    m.fn.extend({
      serialize: function () {
        return m.param(this.serializeArray());
      },
      serializeArray: function () {
        return this.map(function () {
          var a = m.prop(this, "elements");
          return a ? m.makeArray(a) : this;
        })
          .filter(function () {
            var a = this.type;
            return (
              this.name &&
              !m(this).is(":disabled") &&
              Uc.test(this.nodeName) &&
              !Tc.test(a) &&
              (this.checked || !W.test(a))
            );
          })
          .map(function (a, b) {
            var c = m(this).val();
            return null == c
              ? null
              : m.isArray(c)
              ? m.map(c, function (a) {
                  return { name: b.name, value: a.replace(Sc, "\r\n") };
                })
              : { name: b.name, value: c.replace(Sc, "\r\n") };
          })
          .get();
      },
    }),
    (m.ajaxSettings.xhr =
      void 0 !== a.ActiveXObject
        ? function () {
            return (
              (!this.isLocal &&
                /^(get|post|head|put|delete|options)$/i.test(this.type) &&
                Zc()) ||
              $c()
            );
          }
        : Zc);
  var Wc = 0,
    Xc = {},
    Yc = m.ajaxSettings.xhr();
  a.ActiveXObject &&
    m(a).on("unload", function () {
      for (var a in Xc) {
        Xc[a](void 0, !0);
      }
    }),
    (k.cors = !!Yc && "withCredentials" in Yc),
    (Yc = k.ajax = !!Yc),
    Yc &&
      m.ajaxTransport(function (a) {
        if (!a.crossDomain || k.cors) {
          var b;
          return {
            send: function (c, d) {
              var e,
                f = a.xhr(),
                g = ++Wc;
              if (
                (f.open(a.type, a.url, a.async, a.username, a.password),
                a.xhrFields)
              ) {
                for (e in a.xhrFields) {
                  f[e] = a.xhrFields[e];
                }
              }
              a.mimeType &&
                f.overrideMimeType &&
                f.overrideMimeType(a.mimeType),
                a.crossDomain ||
                  c["X-Requested-With"] ||
                  (c["X-Requested-With"] = "XMLHttpRequest");
              for (e in c) {
                void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
              }
              f.send((a.hasContent && a.data) || null),
                (b = function (c, e) {
                  var h, i, j;
                  if (b && (e || 4 === f.readyState)) {
                    if (
                      (delete Xc[g],
                      (b = void 0),
                      (f.onreadystatechange = m.noop),
                      e)
                    ) {
                      4 !== f.readyState && f.abort();
                    } else {
                      (j = {}),
                        (h = f.status),
                        "string" == typeof f.responseText &&
                          (j.text = f.responseText);
                      try {
                        i = f.statusText;
                      } catch (k) {
                        i = "";
                      }
                      h || !a.isLocal || a.crossDomain
                        ? 1223 === h && (h = 204)
                        : (h = j.text ? 200 : 404);
                    }
                  }
                  j && d(h, i, j, f.getAllResponseHeaders());
                }),
                a.async
                  ? 4 === f.readyState
                    ? setTimeout(b)
                    : (f.onreadystatechange = Xc[g] = b)
                  : b();
            },
            abort: function () {
              b && b(void 0, !0);
            },
          };
        }
      });
  function Zc() {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  }
  function $c() {
    try {
      return new a.ActiveXObject("Microsoft.XMLHTTP");
    } catch (b) {}
  }
  m.ajaxSetup({
    accepts: {
      script:
        "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript",
    },
    contents: { script: /(?:java|ecma)script/ },
    converters: {
      "text script": function (a) {
        return m.globalEval(a), a;
      },
    },
  }),
    m.ajaxPrefilter("script", function (a) {
      void 0 === a.cache && (a.cache = !1),
        a.crossDomain && ((a.type = "GET"), (a.global = !1));
    }),
    m.ajaxTransport("script", function (a) {
      if (a.crossDomain) {
        var b,
          c = y.head || m("head")[0] || y.documentElement;
        return {
          send: function (d, e) {
            (b = y.createElement("script")),
              (b.async = !0),
              a.scriptCharset && (b.charset = a.scriptCharset),
              (b.src = a.url),
              (b.onload = b.onreadystatechange = function (a, c) {
                (c || !b.readyState || /loaded|complete/.test(b.readyState)) &&
                  ((b.onload = b.onreadystatechange = null),
                  b.parentNode && b.parentNode.removeChild(b),
                  (b = null),
                  c || e(200, "success"));
              }),
              c.insertBefore(b, c.firstChild);
          },
          abort: function () {
            b && b.onload(void 0, !0);
          },
        };
      }
    });
  var _c = [],
    ad = /(=)\?(?=&|$)|\?\?/;
  m.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var a = _c.pop() || m.expando + "_" + vc++;
      return (this[a] = !0), a;
    },
  }),
    m.ajaxPrefilter("json jsonp", function (b, c, d) {
      var e,
        f,
        g,
        h =
          b.jsonp !== !1 &&
          (ad.test(b.url)
            ? "url"
            : "string" == typeof b.data &&
              !(b.contentType || "").indexOf(
                "application/x-www-form-urlencoded"
              ) &&
              ad.test(b.data) &&
              "data");
      return h || "jsonp" === b.dataTypes[0]
        ? ((e = b.jsonpCallback = m.isFunction(b.jsonpCallback)
            ? b.jsonpCallback()
            : b.jsonpCallback),
          h
            ? (b[h] = b[h].replace(ad, "$1" + e))
            : b.jsonp !== !1 &&
              (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e),
          (b.converters["script json"] = function () {
            return g || m.error(e + " was not called"), g[0];
          }),
          (b.dataTypes[0] = "json"),
          (f = a[e]),
          (a[e] = function () {
            g = arguments;
          }),
          d.always(function () {
            (a[e] = f),
              b[e] && ((b.jsonpCallback = c.jsonpCallback), _c.push(e)),
              g && m.isFunction(f) && f(g[0]),
              (g = f = void 0);
          }),
          "script")
        : void 0;
    }),
    (m.parseHTML = function (a, b, c) {
      if (!a || "string" != typeof a) {
        return null;
      }
      "boolean" == typeof b && ((c = b), (b = !1)), (b = b || y);
      var d = u.exec(a),
        e = !c && [];
      return d
        ? [b.createElement(d[1])]
        : ((d = m.buildFragment([a], b, e)),
          e && e.length && m(e).remove(),
          m.merge([], d.childNodes));
    });
  var bd = m.fn.load;
  (m.fn.load = function (a, b, c) {
    if ("string" != typeof a && bd) {
      return bd.apply(this, arguments);
    }
    var d,
      e,
      f,
      g = this,
      h = a.indexOf(" ");
    return (
      h >= 0 && ((d = m.trim(a.slice(h, a.length))), (a = a.slice(0, h))),
      m.isFunction(b)
        ? ((c = b), (b = void 0))
        : b && "object" == typeof b && (f = "POST"),
      g.length > 0 &&
        m
          .ajax({ url: a, type: f, dataType: "html", data: b })
          .done(function (a) {
            (e = arguments),
              g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);
          })
          .complete(
            c &&
              function (a, b) {
                g.each(c, e || [a.responseText, b, a]);
              }
          ),
      this
    );
  }),
    (m.expr.filters.animated = function (a) {
      return m.grep(m.timers, function (b) {
        return a === b.elem;
      }).length;
    });
  var cd = a.document.documentElement;
  function dd(a) {
    return m.isWindow(a)
      ? a
      : 9 === a.nodeType
      ? a.defaultView || a.parentWindow
      : !1;
  }
  (m.offset = {
    setOffset: function (a, b, c) {
      var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k = m.css(a, "position"),
        l = m(a),
        n = {};
      "static" === k && (a.style.position = "relative"),
        (h = l.offset()),
        (f = m.css(a, "top")),
        (i = m.css(a, "left")),
        (j =
          ("absolute" === k || "fixed" === k) &&
          m.inArray("auto", [f, i]) > -1),
        j
          ? ((d = l.position()), (g = d.top), (e = d.left))
          : ((g = parseFloat(f) || 0), (e = parseFloat(i) || 0)),
        m.isFunction(b) && (b = b.call(a, c, h)),
        null != b.top && (n.top = b.top - h.top + g),
        null != b.left && (n.left = b.left - h.left + e),
        "using" in b ? b.using.call(a, n) : l.css(n);
    },
  }),
    m.fn.extend({
      offset: function (a) {
        if (arguments.length) {
          return void 0 === a
            ? this
            : this.each(function (b) {
                m.offset.setOffset(this, a, b);
              });
        }
        var b,
          c,
          d = { top: 0, left: 0 },
          e = this[0],
          f = e && e.ownerDocument;
        if (f) {
          return (
            (b = f.documentElement),
            m.contains(b, e)
              ? (typeof e.getBoundingClientRect !== K &&
                  (d = e.getBoundingClientRect()),
                (c = dd(f)),
                {
                  top:
                    d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                  left:
                    d.left +
                    (c.pageXOffset || b.scrollLeft) -
                    (b.clientLeft || 0),
                })
              : d
          );
        }
      },
      position: function () {
        if (this[0]) {
          var a,
            b,
            c = { top: 0, left: 0 },
            d = this[0];
          return (
            "fixed" === m.css(d, "position")
              ? (b = d.getBoundingClientRect())
              : ((a = this.offsetParent()),
                (b = this.offset()),
                m.nodeName(a[0], "html") || (c = a.offset()),
                (c.top += m.css(a[0], "borderTopWidth", !0)),
                (c.left += m.css(a[0], "borderLeftWidth", !0))),
            {
              top: b.top - c.top - m.css(d, "marginTop", !0),
              left: b.left - c.left - m.css(d, "marginLeft", !0),
            }
          );
        }
      },
      offsetParent: function () {
        return this.map(function () {
          var a = this.offsetParent || cd;
          while (
            a &&
            !m.nodeName(a, "html") &&
            "static" === m.css(a, "position")
          ) {
            a = a.offsetParent;
          }
          return a || cd;
        });
      },
    }),
    m.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (
      a,
      b
    ) {
      var c = /Y/.test(b);
      m.fn[a] = function (d) {
        return V(
          this,
          function (a, d, e) {
            var f = dd(a);
            return void 0 === e
              ? f
                ? b in f
                  ? f[b]
                  : f.document.documentElement[d]
                : a[d]
              : void (f
                  ? f.scrollTo(
                      c ? m(f).scrollLeft() : e,
                      c ? e : m(f).scrollTop()
                    )
                  : (a[d] = e));
          },
          a,
          d,
          arguments.length,
          null
        );
      };
    }),
    m.each(["top", "left"], function (a, b) {
      m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {
        return c
          ? ((c = Jb(a, b)), Hb.test(c) ? m(a).position()[b] + "px" : c)
          : void 0;
      });
    }),
    m.each({ Height: "height", Width: "width" }, function (a, b) {
      m.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (
        c,
        d
      ) {
        m.fn[d] = function (d, e) {
          var f = arguments.length && (c || "boolean" != typeof d),
            g = c || (d === !0 || e === !0 ? "margin" : "border");
          return V(
            this,
            function (b, c, d) {
              var e;
              return m.isWindow(b)
                ? b.document.documentElement["client" + a]
                : 9 === b.nodeType
                ? ((e = b.documentElement),
                  Math.max(
                    b.body["scroll" + a],
                    e["scroll" + a],
                    b.body["offset" + a],
                    e["offset" + a],
                    e["client" + a]
                  ))
                : void 0 === d
                ? m.css(b, c, g)
                : m.style(b, c, d, g);
            },
            b,
            f ? d : void 0,
            f,
            null
          );
        };
      });
    }),
    (m.fn.size = function () {
      return this.length;
    }),
    (m.fn.andSelf = m.fn.addBack),
    "function" == typeof define &&
      define.amd &&
      define("jquery", [], function () {
        return m;
      });
  var ed = a.jQuery,
    fd = a.$;
  return (
    (m.noConflict = function (b) {
      return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;
    }),
    typeof b === K && (a.jQuery = a.$ = m),
    m
  );
});

(function (a) {
  if (typeof define === "function" && define.amd) {
    define(["jquery"], a);
  } else {
    if (typeof exports === "object") {
      a(require("jquery"));
    } else {
      a(jQuery);
    }
  }
})(function (a) {
  var f = /\+/g;
  function d(j) {
    return b.raw ? j : encodeURIComponent(j);
  }
  function c(j) {
    return b.raw ? j : decodeURIComponent(j);
  }
  function h(j) {
    return d(b.json ? JSON.stringify(j) : String(j));
  }
  function e(k) {
    if (k.indexOf('"') === 0) {
      k = k.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\");
    }
    try {
      k = decodeURIComponent(k.replace(f, " "));
      return b.json ? JSON.parse(k) : k;
    } catch (j) {}
  }
  function g(k, j) {
    var l = b.raw ? k : e(k);
    return a.isFunction(j) ? j(l) : l;
  }
  var b = (a.cookie = function (o, w, r) {
    if (w !== undefined && !a.isFunction(w)) {
      r = a.extend({}, b.defaults, r);
      if (typeof r.expires === "number") {
        var m = r.expires,
          v = (r.expires = new Date());
        v.setTime(+v + m * 86400000);
      }
      return (document.cookie = [
        d(o),
        "=",
        h(w),
        r.expires ? "; expires=" + r.expires.toUTCString() : "",
        r.path ? "; path=" + r.path : "",
        r.domain ? "; domain=" + r.domain : "",
        r.secure ? "; secure" : "",
      ].join(""));
    }
    var u = o ? undefined : {};
    var k = document.cookie ? document.cookie.split("; ") : [];
    for (var n = 0, p = k.length; n < p; n++) {
      var s = k[n].split("=");
      var q = c(s.shift());
      var j = s.join("=");
      if (o && o === q) {
        u = g(j, w);
        break;
      }
      if (!o && (j = g(j)) !== undefined) {
        u[q] = j;
      }
    }
    return u;
  });
  b.defaults = {};
  a.removeCookie = function (j, k) {
    if (a.cookie(j) === undefined) {
      return false;
    }
    a.cookie(j, "", a.extend({}, k, { expires: -1 }));
    return !a.cookie(j);
  };
});

(function (a, d) {
  var e = 0,
    c = /^ui-id-\d+$/;
  a.ui = a.ui || {};
  a.extend(a.ui, {
    version: "1.10.4",
    keyCode: {
      BACKSPACE: 8,
      COMMA: 188,
      DELETE: 46,
      DOWN: 40,
      END: 35,
      ENTER: 13,
      ESCAPE: 27,
      HOME: 36,
      LEFT: 37,
      NUMPAD_ADD: 107,
      NUMPAD_DECIMAL: 110,
      NUMPAD_DIVIDE: 111,
      NUMPAD_ENTER: 108,
      NUMPAD_MULTIPLY: 106,
      NUMPAD_SUBTRACT: 109,
      PAGE_DOWN: 34,
      PAGE_UP: 33,
      PERIOD: 190,
      RIGHT: 39,
      SPACE: 32,
      TAB: 9,
      UP: 38,
    },
  });
  a.fn.extend({
    focus: (function (g) {
      return function (h, j) {
        return typeof h === "number"
          ? this.each(function () {
              var k = this;
              setTimeout(function () {
                a(k).focus();
                if (j) {
                  j.call(k);
                }
              }, h);
            })
          : g.apply(this, arguments);
      };
    })(a.fn.focus),
    scrollParent: function () {
      var g;
      if (
        (a.ui.ie && /(static|relative)/.test(this.css("position"))) ||
        /absolute/.test(this.css("position"))
      ) {
        g = this.parents()
          .filter(function () {
            return (
              /(relative|absolute|fixed)/.test(a.css(this, "position")) &&
              /(auto|scroll)/.test(
                a.css(this, "overflow") +
                  a.css(this, "overflow-y") +
                  a.css(this, "overflow-x")
              )
            );
          })
          .eq(0);
      } else {
        g = this.parents()
          .filter(function () {
            return /(auto|scroll)/.test(
              a.css(this, "overflow") +
                a.css(this, "overflow-y") +
                a.css(this, "overflow-x")
            );
          })
          .eq(0);
      }
      return /fixed/.test(this.css("position")) || !g.length ? a(document) : g;
    },
    zIndex: function (k) {
      if (k !== d) {
        return this.css("zIndex", k);
      }
      if (this.length) {
        var g = a(this[0]),
          h,
          j;
        while (g.length && g[0] !== document) {
          h = g.css("position");
          if (h === "absolute" || h === "relative" || h === "fixed") {
            j = parseInt(g.css("zIndex"), 10);
            if (!isNaN(j) && j !== 0) {
              return j;
            }
          }
          g = g.parent();
        }
      }
      return 0;
    },
    uniqueId: function () {
      return this.each(function () {
        if (!this.id) {
          this.id = "ui-id-" + ++e;
        }
      });
    },
    removeUniqueId: function () {
      return this.each(function () {
        if (c.test(this.id)) {
          a(this).removeAttr("id");
        }
      });
    },
  });
  function b(g, j) {
    var k,
      l,
      h,
      m = g.nodeName.toLowerCase();
    if ("area" === m) {
      k = g.parentNode;
      l = k.name;
      if (!g.href || !l || k.nodeName.toLowerCase() !== "map") {
        return false;
      }
      h = a("img[usemap=#" + l + "]")[0];
      return !!h && f(h);
    }
    return (
      (/input|select|textarea|button|object/.test(m)
        ? !g.disabled
        : "a" === m
        ? g.href || j
        : j) && f(g)
    );
  }
  function f(g) {
    return (
      a.expr.filters.visible(g) &&
      !a(g)
        .parents()
        .addBack()
        .filter(function () {
          return a.css(this, "visibility") === "hidden";
        }).length
    );
  }
  a.extend(a.expr[":"], {
    data: a.expr.createPseudo
      ? a.expr.createPseudo(function (g) {
          return function (h) {
            return !!a.data(h, g);
          };
        })
      : function (g, h, j) {
          return !!a.data(g, j[3]);
        },
    focusable: function (g) {
      return b(g, !isNaN(a.attr(g, "tabindex")));
    },
    tabbable: function (g) {
      var j = a.attr(g, "tabindex"),
        h = isNaN(j);
      return (h || j >= 0) && b(g, !h);
    },
  });
  if (!a("<a>").outerWidth(1).jquery) {
    a.each(["Width", "Height"], function (g, h) {
      var l = h === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
        m = h.toLowerCase(),
        j = {
          innerWidth: a.fn.innerWidth,
          innerHeight: a.fn.innerHeight,
          outerWidth: a.fn.outerWidth,
          outerHeight: a.fn.outerHeight,
        };
      function k(o, q, n, p) {
        a.each(l, function () {
          q -= parseFloat(a.css(o, "padding" + this)) || 0;
          if (n) {
            q -= parseFloat(a.css(o, "border" + this + "Width")) || 0;
          }
          if (p) {
            q -= parseFloat(a.css(o, "margin" + this)) || 0;
          }
        });
        return q;
      }
      a.fn["inner" + h] = function (n) {
        if (n === d) {
          return j["inner" + h].call(this);
        }
        return this.each(function () {
          a(this).css(m, k(this, n) + "px");
        });
      };
      a.fn["outer" + h] = function (o, n) {
        if (typeof o !== "number") {
          return j["outer" + h].call(this, o);
        }
        return this.each(function () {
          a(this).css(m, k(this, o, true, n) + "px");
        });
      };
    });
  }
  if (!a.fn.addBack) {
    a.fn.addBack = function (g) {
      return this.add(g == null ? this.prevObject : this.prevObject.filter(g));
    };
  }
  if (a("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
    a.fn.removeData = (function (g) {
      return function (h) {
        if (arguments.length) {
          return g.call(this, a.camelCase(h));
        } else {
          return g.call(this);
        }
      };
    })(a.fn.removeData);
  }
  a.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
  a.support.selectstart = "onselectstart" in document.createElement("div");
  a.fn.extend({
    disableSelection: function () {
      return this.bind(
        (a.support.selectstart ? "selectstart" : "mousedown") +
          ".ui-disableSelection",
        function (g) {
          g.preventDefault();
        }
      );
    },
    enableSelection: function () {
      return this.unbind(".ui-disableSelection");
    },
  });
  a.extend(a.ui, {
    plugin: {
      add: function (h, j, l) {
        var g,
          k = a.ui[h].prototype;
        for (g in l) {
          k.plugins[g] = k.plugins[g] || [];
          k.plugins[g].push([j, l[g]]);
        }
      },
      call: function (j, k, g) {
        var h,
          l = j.plugins[k];
        if (
          !l ||
          !j.element[0].parentNode ||
          j.element[0].parentNode.nodeType === 11
        ) {
          return;
        }
        for (h = 0; h < l.length; h++) {
          if (j.options[l[h][0]]) {
            l[h][1].apply(j.element, g);
          }
        }
      },
    },
    hasScroll: function (h, g) {
      if (a(h).css("overflow") === "hidden") {
        return false;
      }
      var k = g && g === "left" ? "scrollLeft" : "scrollTop",
        j = false;
      if (h[k] > 0) {
        return true;
      }
      h[k] = 1;
      j = h[k] > 0;
      h[k] = 0;
      return j;
    },
  });
})(jQuery);
(function (a, d) {
  var e = 0,
    c = Array.prototype.slice,
    b = a.cleanData;
  a.cleanData = function (h) {
    for (var j = 0, g; (g = h[j]) != null; j++) {
      try {
        a(g).triggerHandler("remove");
      } catch (f) {}
    }
    b(h);
  };
  a.widget = function (l, f, n) {
    var k,
      j,
      h,
      g,
      o = {},
      m = l.split(".")[0];
    l = l.split(".")[1];
    k = m + "-" + l;
    if (!n) {
      n = f;
      f = a.Widget;
    }
    a.expr[":"][k.toLowerCase()] = function (p) {
      return !!a.data(p, k);
    };
    a[m] = a[m] || {};
    j = a[m][l];
    h = a[m][l] = function (q, p) {
      if (!this._createWidget) {
        return new h(q, p);
      }
      if (arguments.length) {
        this._createWidget(q, p);
      }
    };
    a.extend(h, j, {
      version: n.version,
      _proto: a.extend({}, n),
      _childConstructors: [],
    });
    g = new f();
    g.options = a.widget.extend({}, g.options);
    a.each(n, function (p, q) {
      if (!a.isFunction(q)) {
        o[p] = q;
        return;
      }
      o[p] = (function () {
        var r = function () {
            return f.prototype[p].apply(this, arguments);
          },
          s = function (t) {
            return f.prototype[p].apply(this, t);
          };
        return function () {
          var t = this._super,
            u = this._superApply,
            v;
          this._super = r;
          this._superApply = s;
          v = q.apply(this, arguments);
          this._super = t;
          this._superApply = u;
          return v;
        };
      })();
    });
    h.prototype = a.widget.extend(
      g,
      { widgetEventPrefix: j ? g.widgetEventPrefix || l : l },
      o,
      { constructor: h, namespace: m, widgetName: l, widgetFullName: k }
    );
    if (j) {
      a.each(j._childConstructors, function (r, p) {
        var q = p.prototype;
        a.widget(q.namespace + "." + q.widgetName, h, p._proto);
      });
      delete j._childConstructors;
    } else {
      f._childConstructors.push(h);
    }
    a.widget.bridge(l, h);
  };
  a.widget.extend = function (k) {
    var f = c.call(arguments, 1),
      g = 0,
      h = f.length,
      j,
      l;
    for (; g < h; g++) {
      for (j in f[g]) {
        l = f[g][j];
        if (f[g].hasOwnProperty(j) && l !== d) {
          if (a.isPlainObject(l)) {
            k[j] = a.isPlainObject(k[j])
              ? a.widget.extend({}, k[j], l)
              : a.widget.extend({}, l);
          } else {
            k[j] = l;
          }
        }
      }
    }
    return k;
  };
  a.widget.bridge = function (g, h) {
    var f = h.prototype.widgetFullName || g;
    a.fn[g] = function (l) {
      var k = typeof l === "string",
        j = c.call(arguments, 1),
        m = this;
      l = !k && j.length ? a.widget.extend.apply(null, [l].concat(j)) : l;
      if (k) {
        this.each(function () {
          var o,
            n = a.data(this, f);
          if (!n) {
            return a.error(
              "cannot call methods on " +
                g +
                " prior to initialization; attempted to call method '" +
                l +
                "'"
            );
          }
          if (!a.isFunction(n[l]) || l.charAt(0) === "_") {
            return a.error(
              "no such method '" + l + "' for " + g + " widget instance"
            );
          }
          o = n[l].apply(n, j);
          if (o !== n && o !== d) {
            m = o && o.jquery ? m.pushStack(o.get()) : o;
            return false;
          }
        });
      } else {
        this.each(function () {
          var n = a.data(this, f);
          if (n) {
            n.option(l || {})._init();
          } else {
            a.data(this, f, new h(l, this));
          }
        });
      }
      return m;
    };
  };
  a.Widget = function () {};
  a.Widget._childConstructors = [];
  a.Widget.prototype = {
    widgetName: "widget",
    widgetEventPrefix: "",
    defaultElement: "<div>",
    options: { disabled: false, create: null },
    _createWidget: function (g, f) {
      f = a(f || this.defaultElement || this)[0];
      this.element = a(f);
      this.uuid = e++;
      this.eventNamespace = "." + this.widgetName + this.uuid;
      this.options = a.widget.extend(
        {},
        this.options,
        this._getCreateOptions(),
        g
      );
      this.bindings = a();
      this.hoverable = a();
      this.focusable = a();
      if (f !== this) {
        a.data(f, this.widgetFullName, this);
        this._on(true, this.element, {
          remove: function (h) {
            if (h.target === f) {
              this.destroy();
            }
          },
        });
        this.document = a(f.style ? f.ownerDocument : f.document || f);
        this.window = a(
          this.document[0].defaultView || this.document[0].parentWindow
        );
      }
      this._create();
      this._trigger("create", null, this._getCreateEventData());
      this._init();
    },
    _getCreateOptions: a.noop,
    _getCreateEventData: a.noop,
    _create: a.noop,
    _init: a.noop,
    destroy: function () {
      this._destroy();
      this.element
        .unbind(this.eventNamespace)
        .removeData(this.widgetName)
        .removeData(this.widgetFullName)
        .removeData(a.camelCase(this.widgetFullName));
      this.widget()
        .unbind(this.eventNamespace)
        .removeAttr("aria-disabled")
        .removeClass(this.widgetFullName + "-disabled ui-state-disabled");
      this.bindings.unbind(this.eventNamespace);
      this.hoverable.removeClass("ui-state-hover");
      this.focusable.removeClass("ui-state-focus");
    },
    _destroy: a.noop,
    widget: function () {
      return this.element;
    },
    option: function (h, l) {
      var j = h,
        k,
        f,
        g;
      if (arguments.length === 0) {
        return a.widget.extend({}, this.options);
      }
      if (typeof h === "string") {
        j = {};
        k = h.split(".");
        h = k.shift();
        if (k.length) {
          f = j[h] = a.widget.extend({}, this.options[h]);
          for (g = 0; g < k.length - 1; g++) {
            f[k[g]] = f[k[g]] || {};
            f = f[k[g]];
          }
          h = k.pop();
          if (arguments.length === 1) {
            return f[h] === d ? null : f[h];
          }
          f[h] = l;
        } else {
          if (arguments.length === 1) {
            return this.options[h] === d ? null : this.options[h];
          }
          j[h] = l;
        }
      }
      this._setOptions(j);
      return this;
    },
    _setOptions: function (g) {
      var f;
      for (f in g) {
        this._setOption(f, g[f]);
      }
      return this;
    },
    _setOption: function (f, g) {
      this.options[f] = g;
      if (f === "disabled") {
        this.widget()
          .toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!g)
          .attr("aria-disabled", g);
        this.hoverable.removeClass("ui-state-hover");
        this.focusable.removeClass("ui-state-focus");
      }
      return this;
    },
    enable: function () {
      return this._setOption("disabled", false);
    },
    disable: function () {
      return this._setOption("disabled", true);
    },
    _on: function (k, g, h) {
      var f,
        j = this;
      if (typeof k !== "boolean") {
        h = g;
        g = k;
        k = false;
      }
      if (!h) {
        h = g;
        g = this.element;
        f = this.widget();
      } else {
        g = f = a(g);
        this.bindings = this.bindings.add(g);
      }
      a.each(h, function (l, n) {
        function o() {
          if (
            !k &&
            (j.options.disabled === true ||
              a(this).hasClass("ui-state-disabled"))
          ) {
            return;
          }
          return (typeof n === "string" ? j[n] : n).apply(j, arguments);
        }
        if (typeof n !== "string") {
          o.guid = n.guid = n.guid || o.guid || a.guid++;
        }
        var p = l.match(/^(\w+)\s*(.*)$/),
          m = p[1] + j.eventNamespace,
          q = p[2];
        if (q) {
          f.delegate(q, m, o);
        } else {
          g.bind(m, o);
        }
      });
    },
    _off: function (f, g) {
      g =
        (g || "").split(" ").join(this.eventNamespace + " ") +
        this.eventNamespace;
      f.unbind(g).undelegate(g);
    },
    _delay: function (g, f) {
      function h() {
        return (typeof g === "string" ? j[g] : g).apply(j, arguments);
      }
      var j = this;
      return setTimeout(h, f || 0);
    },
    _hoverable: function (f) {
      this.hoverable = this.hoverable.add(f);
      this._on(f, {
        mouseenter: function (g) {
          a(g.currentTarget).addClass("ui-state-hover");
        },
        mouseleave: function (g) {
          a(g.currentTarget).removeClass("ui-state-hover");
        },
      });
    },
    _focusable: function (f) {
      this.focusable = this.focusable.add(f);
      this._on(f, {
        focusin: function (g) {
          a(g.currentTarget).addClass("ui-state-focus");
        },
        focusout: function (g) {
          a(g.currentTarget).removeClass("ui-state-focus");
        },
      });
    },
    _trigger: function (l, h, g) {
      var k,
        j,
        f = this.options[l];
      g = g || {};
      h = a.Event(h);
      h.type = (l === this.widgetEventPrefix
        ? l
        : this.widgetEventPrefix + l
      ).toLowerCase();
      h.target = this.element[0];
      j = h.originalEvent;
      if (j) {
        for (k in j) {
          if (!(k in h)) {
            h[k] = j[k];
          }
        }
      }
      this.element.trigger(h, g);
      return !(
        (a.isFunction(f) &&
          f.apply(this.element[0], [h].concat(g)) === false) ||
        h.isDefaultPrevented()
      );
    },
  };
  a.each({ show: "fadeIn", hide: "fadeOut" }, function (g, f) {
    a.Widget.prototype["_" + g] = function (k, m, h) {
      if (typeof m === "string") {
        m = { effect: m };
      }
      var l,
        j = !m ? g : m === true || typeof m === "number" ? f : m.effect || f;
      m = m || {};
      if (typeof m === "number") {
        m = { duration: m };
      }
      l = !a.isEmptyObject(m);
      m.complete = h;
      if (m.delay) {
        k.delay(m.delay);
      }
      if (l && a.effects && a.effects.effect[j]) {
        k[g](m);
      } else {
        if (j !== g && k[j]) {
          k[j](m.duration, m.easing, h);
        } else {
          k.queue(function (n) {
            a(this)[g]();
            if (h) {
              h.call(k[0]);
            }
            n();
          });
        }
      }
    };
  });
})(jQuery);
(function (a, c) {
  var b = false;
  a(document).mouseup(function () {
    b = false;
  });
  a.widget("ui.mouse", {
    version: "1.10.4",
    options: {
      cancel: "input,textarea,button,select,option",
      distance: 1,
      delay: 0,
    },
    _mouseInit: function () {
      var d = this;
      this.element
        .bind("mousedown." + this.widgetName, function (e) {
          return d._mouseDown(e);
        })
        .bind("click." + this.widgetName, function (e) {
          if (true === a.data(e.target, d.widgetName + ".preventClickEvent")) {
            a.removeData(e.target, d.widgetName + ".preventClickEvent");
            e.stopImmediatePropagation();
            return false;
          }
        });
      this.started = false;
    },
    _mouseDestroy: function () {
      this.element.unbind("." + this.widgetName);
      if (this._mouseMoveDelegate) {
        a(document)
          .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
          .unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
      }
    },
    _mouseDown: function (f) {
      if (b) {
        return;
      }
      this._mouseStarted && this._mouseUp(f);
      this._mouseDownEvent = f;
      var g = this,
        d = f.which === 1,
        e =
          typeof this.options.cancel === "string" && f.target.nodeName
            ? a(f.target).closest(this.options.cancel).length
            : false;
      if (!d || e || !this._mouseCapture(f)) {
        return true;
      }
      this.mouseDelayMet = !this.options.delay;
      if (!this.mouseDelayMet) {
        this._mouseDelayTimer = setTimeout(function () {
          g.mouseDelayMet = true;
        }, this.options.delay);
      }
      if (this._mouseDistanceMet(f) && this._mouseDelayMet(f)) {
        this._mouseStarted = this._mouseStart(f) !== false;
        if (!this._mouseStarted) {
          f.preventDefault();
          return true;
        }
      }
      if (true === a.data(f.target, this.widgetName + ".preventClickEvent")) {
        a.removeData(f.target, this.widgetName + ".preventClickEvent");
      }
      this._mouseMoveDelegate = function (h) {
        return g._mouseMove(h);
      };
      this._mouseUpDelegate = function (h) {
        return g._mouseUp(h);
      };
      a(document)
        .bind("mousemove." + this.widgetName, this._mouseMoveDelegate)
        .bind("mouseup." + this.widgetName, this._mouseUpDelegate);
      f.preventDefault();
      b = true;
      return true;
    },
    _mouseMove: function (d) {
      if (
        a.ui.ie &&
        (!document.documentMode || document.documentMode < 9) &&
        !d.button
      ) {
        return this._mouseUp(d);
      }
      if (this._mouseStarted) {
        this._mouseDrag(d);
        return d.preventDefault();
      }
      if (this._mouseDistanceMet(d) && this._mouseDelayMet(d)) {
        this._mouseStarted =
          this._mouseStart(this._mouseDownEvent, d) !== false;
        this._mouseStarted ? this._mouseDrag(d) : this._mouseUp(d);
      }
      return !this._mouseStarted;
    },
    _mouseUp: function (d) {
      a(document)
        .unbind("mousemove." + this.widgetName, this._mouseMoveDelegate)
        .unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
      if (this._mouseStarted) {
        this._mouseStarted = false;
        if (d.target === this._mouseDownEvent.target) {
          a.data(d.target, this.widgetName + ".preventClickEvent", true);
        }
        this._mouseStop(d);
      }
      return false;
    },
    _mouseDistanceMet: function (d) {
      return (
        Math.max(
          Math.abs(this._mouseDownEvent.pageX - d.pageX),
          Math.abs(this._mouseDownEvent.pageY - d.pageY)
        ) >= this.options.distance
      );
    },
    _mouseDelayMet: function () {
      return this.mouseDelayMet;
    },
    _mouseStart: function () {},
    _mouseDrag: function () {},
    _mouseStop: function () {},
    _mouseCapture: function () {
      return true;
    },
  });
})(jQuery);
(function (a, p) {
  a.ui = a.ui || {};
  var d,
    g = Math.max,
    c = Math.abs,
    l = Math.round,
    j = /left|center|right/,
    o = /top|center|bottom/,
    k = /[\+\-]\d+(\.[\d]+)?%?/,
    n = /^\w+/,
    m = /%$/,
    b = a.fn.position;
  function f(r, s, q) {
    return [
      parseFloat(r[0]) * (m.test(r[0]) ? s / 100 : 1),
      parseFloat(r[1]) * (m.test(r[1]) ? q / 100 : 1),
    ];
  }
  function h(q, r) {
    return parseInt(a.css(q, r), 10) || 0;
  }
  function e(q) {
    var r = q[0];
    if (r.nodeType === 9) {
      return {
        width: q.width(),
        height: q.height(),
        offset: { top: 0, left: 0 },
      };
    }
    if (a.isWindow(r)) {
      return {
        width: q.width(),
        height: q.height(),
        offset: { top: q.scrollTop(), left: q.scrollLeft() },
      };
    }
    if (r.preventDefault) {
      return { width: 0, height: 0, offset: { top: r.pageY, left: r.pageX } };
    }
    return {
      width: q.outerWidth(),
      height: q.outerHeight(),
      offset: q.offset(),
    };
  }
  a.position = {
    scrollbarWidth: function () {
      if (d !== p) {
        return d;
      }
      var s,
        t,
        q = a(
          "<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"
        ),
        r = q.children()[0];
      a("body").append(q);
      s = r.offsetWidth;
      q.css("overflow", "scroll");
      t = r.offsetWidth;
      if (s === t) {
        t = q[0].clientWidth;
      }
      q.remove();
      return (d = s - t);
    },
    getScrollInfo: function (u) {
      var s = u.isWindow || u.isDocument ? "" : u.element.css("overflow-x"),
        t = u.isWindow || u.isDocument ? "" : u.element.css("overflow-y"),
        q =
          s === "scroll" ||
          (s === "auto" && u.width < u.element[0].scrollWidth),
        r =
          t === "scroll" ||
          (t === "auto" && u.height < u.element[0].scrollHeight);
      return {
        width: r ? a.position.scrollbarWidth() : 0,
        height: q ? a.position.scrollbarWidth() : 0,
      };
    },
    getWithinInfo: function (q) {
      var t = a(q || window),
        s = a.isWindow(t[0]),
        r = !!t[0] && t[0].nodeType === 9;
      return {
        element: t,
        isWindow: s,
        isDocument: r,
        offset: t.offset() || { left: 0, top: 0 },
        scrollLeft: t.scrollLeft(),
        scrollTop: t.scrollTop(),
        width: s ? t.width() : t.outerWidth(),
        height: s ? t.height() : t.outerHeight(),
      };
    },
  };
  a.fn.position = function (v) {
    if (!v || !v.of) {
      return b.apply(this, arguments);
    }
    v = a.extend({}, v);
    var q,
      A,
      y,
      z,
      r,
      t,
      x = a(v.of),
      B = a.position.getWithinInfo(v.within),
      w = a.position.getScrollInfo(B),
      s = (v.collision || "flip").split(" "),
      u = {};
    t = e(x);
    if (x[0].preventDefault) {
      v.at = "left top";
    }
    A = t.width;
    y = t.height;
    z = t.offset;
    r = a.extend({}, z);
    a.each(["my", "at"], function () {
      var D = (v[this] || "").split(" "),
        C,
        E;
      if (D.length === 1) {
        D = j.test(D[0])
          ? D.concat(["center"])
          : o.test(D[0])
          ? ["center"].concat(D)
          : ["center", "center"];
      }
      D[0] = j.test(D[0]) ? D[0] : "center";
      D[1] = o.test(D[1]) ? D[1] : "center";
      C = k.exec(D[0]);
      E = k.exec(D[1]);
      u[this] = [C ? C[0] : 0, E ? E[0] : 0];
      v[this] = [n.exec(D[0])[0], n.exec(D[1])[0]];
    });
    if (s.length === 1) {
      s[1] = s[0];
    }
    if (v.at[0] === "right") {
      r.left += A;
    } else {
      if (v.at[0] === "center") {
        r.left += A / 2;
      }
    }
    if (v.at[1] === "bottom") {
      r.top += y;
    } else {
      if (v.at[1] === "center") {
        r.top += y / 2;
      }
    }
    q = f(u.at, A, y);
    r.left += q[0];
    r.top += q[1];
    return this.each(function () {
      var D,
        M,
        F = a(this),
        H = F.outerWidth(),
        G = F.outerHeight(),
        I = h(this, "marginLeft"),
        J = h(this, "marginTop"),
        E = H + I + h(this, "marginRight") + w.width,
        C = G + J + h(this, "marginBottom") + w.height,
        L = a.extend({}, r),
        K = f(u.my, F.outerWidth(), F.outerHeight());
      if (v.my[0] === "right") {
        L.left -= H;
      } else {
        if (v.my[0] === "center") {
          L.left -= H / 2;
        }
      }
      if (v.my[1] === "bottom") {
        L.top -= G;
      } else {
        if (v.my[1] === "center") {
          L.top -= G / 2;
        }
      }
      L.left += K[0];
      L.top += K[1];
      if (!a.support.offsetFractions) {
        L.left = l(L.left);
        L.top = l(L.top);
      }
      D = { marginLeft: I, marginTop: J };
      a.each(["left", "top"], function (O, N) {
        if (a.ui.position[s[O]]) {
          a.ui.position[s[O]][N](L, {
            targetWidth: A,
            targetHeight: y,
            elemWidth: H,
            elemHeight: G,
            collisionPosition: D,
            collisionWidth: E,
            collisionHeight: C,
            offset: [q[0] + K[0], q[1] + K[1]],
            my: v.my,
            at: v.at,
            within: B,
            elem: F,
          });
        }
      });
      if (v.using) {
        M = function (Q) {
          var P = z.left - L.left,
            R = P + A - H,
            S = z.top - L.top,
            N = S + y - G,
            O = {
              target: {
                element: x,
                left: z.left,
                top: z.top,
                width: A,
                height: y,
              },
              element: {
                element: F,
                left: L.left,
                top: L.top,
                width: H,
                height: G,
              },
              horizontal: R < 0 ? "left" : P > 0 ? "right" : "center",
              vertical: N < 0 ? "top" : S > 0 ? "bottom" : "middle",
            };
          if (A < H && c(P + R) < A) {
            O.horizontal = "center";
          }
          if (y < G && c(S + N) < y) {
            O.vertical = "middle";
          }
          if (g(c(P), c(R)) > g(c(S), c(N))) {
            O.important = "horizontal";
          } else {
            O.important = "vertical";
          }
          v.using.call(this, Q, O);
        };
      }
      F.offset(a.extend(L, { using: M }));
    });
  };
  a.ui.position = {
    fit: {
      left: function (w, r) {
        var x = r.within,
          y = x.isWindow ? x.scrollLeft : x.offset.left,
          t = x.width,
          q = w.left - r.collisionPosition.marginLeft,
          u = y - q,
          v = q + r.collisionWidth - t - y,
          s;
        if (r.collisionWidth > t) {
          if (u > 0 && v <= 0) {
            s = w.left + u + r.collisionWidth - t - y;
            w.left += u - s;
          } else {
            if (v > 0 && u <= 0) {
              w.left = y;
            } else {
              if (u > v) {
                w.left = y + t - r.collisionWidth;
              } else {
                w.left = y;
              }
            }
          }
        } else {
          if (u > 0) {
            w.left += u;
          } else {
            if (v > 0) {
              w.left -= v;
            } else {
              w.left = g(w.left - q, w.left);
            }
          }
        }
      },
      top: function (w, r) {
        var x = r.within,
          y = x.isWindow ? x.scrollTop : x.offset.top,
          t = r.within.height,
          q = w.top - r.collisionPosition.marginTop,
          v = y - q,
          u = q + r.collisionHeight - t - y,
          s;
        if (r.collisionHeight > t) {
          if (v > 0 && u <= 0) {
            s = w.top + v + r.collisionHeight - t - y;
            w.top += v - s;
          } else {
            if (u > 0 && v <= 0) {
              w.top = y;
            } else {
              if (v > u) {
                w.top = y + t - r.collisionHeight;
              } else {
                w.top = y;
              }
            }
          }
        } else {
          if (v > 0) {
            w.top += v;
          } else {
            if (u > 0) {
              w.top -= u;
            } else {
              w.top = g(w.top - q, w.top);
            }
          }
        }
      },
    },
    flip: {
      left: function (B, s) {
        var C = s.within,
          D = C.offset.left + C.scrollLeft,
          y = C.width,
          x = C.isWindow ? C.scrollLeft : C.offset.left,
          r = B.left - s.collisionPosition.marginLeft,
          z = r - x,
          A = r + s.collisionWidth - y - x,
          t =
            s.my[0] === "left"
              ? -s.elemWidth
              : s.my[0] === "right"
              ? s.elemWidth
              : 0,
          q =
            s.at[0] === "left"
              ? s.targetWidth
              : s.at[0] === "right"
              ? -s.targetWidth
              : 0,
          w = -2 * s.offset[0],
          v,
          u;
        if (z < 0) {
          v = B.left + t + q + w + s.collisionWidth - y - D;
          if (v < 0 || v < c(z)) {
            B.left += t + q + w;
          }
        } else {
          if (A > 0) {
            u = B.left - s.collisionPosition.marginLeft + t + q + w - x;
            if (u > 0 || c(u) < A) {
              B.left += t + q + w;
            }
          }
        }
      },
      top: function (B, s) {
        var D = s.within,
          E = D.offset.top + D.scrollTop,
          y = D.height,
          x = D.isWindow ? D.scrollTop : D.offset.top,
          r = B.top - s.collisionPosition.marginTop,
          A = r - x,
          z = r + s.collisionHeight - y - x,
          C = s.my[1] === "top",
          t = C ? -s.elemHeight : s.my[1] === "bottom" ? s.elemHeight : 0,
          q =
            s.at[1] === "top"
              ? s.targetHeight
              : s.at[1] === "bottom"
              ? -s.targetHeight
              : 0,
          w = -2 * s.offset[1],
          v,
          u;
        if (A < 0) {
          u = B.top + t + q + w + s.collisionHeight - y - E;
          if (B.top + t + q + w > A && (u < 0 || u < c(A))) {
            B.top += t + q + w;
          }
        } else {
          if (z > 0) {
            v = B.top - s.collisionPosition.marginTop + t + q + w - x;
            if (B.top + t + q + w > z && (v > 0 || c(v) < z)) {
              B.top += t + q + w;
            }
          }
        }
      },
    },
    flipfit: {
      left: function () {
        a.ui.position.flip.left.apply(this, arguments);
        a.ui.position.fit.left.apply(this, arguments);
      },
      top: function () {
        a.ui.position.flip.top.apply(this, arguments);
        a.ui.position.fit.top.apply(this, arguments);
      },
    },
  };
  (function () {
    var u,
      v,
      w,
      t,
      s,
      q = document.getElementsByTagName("body")[0],
      r = document.createElement("div");
    u = document.createElement(q ? "div" : "body");
    w = {
      visibility: "hidden",
      width: 0,
      height: 0,
      border: 0,
      margin: 0,
      background: "none",
    };
    if (q) {
      a.extend(w, { position: "absolute", left: "-1000px", top: "-1000px" });
    }
    for (s in w) {
      u.style[s] = w[s];
    }
    u.appendChild(r);
    v = q || document.documentElement;
    v.insertBefore(u, v.firstChild);
    r.style.cssText = "position: absolute; left: 10.7432222px;";
    t = a(r).offset().left;
    a.support.offsetFractions = t > 10 && t < 11;
    u.innerHTML = "";
    v.removeChild(u);
  })();
})(jQuery);
(function (a, b) {
  a.widget("ui.draggable", a.ui.mouse, {
    version: "1.10.4",
    widgetEventPrefix: "drag",
    options: {
      addClasses: true,
      appendTo: "parent",
      axis: false,
      connectToSortable: false,
      containment: false,
      cursor: "auto",
      cursorAt: false,
      grid: false,
      handle: false,
      helper: "original",
      iframeFix: false,
      opacity: false,
      refreshPositions: false,
      revert: false,
      revertDuration: 500,
      scope: "default",
      scroll: true,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      snap: false,
      snapMode: "both",
      snapTolerance: 20,
      stack: false,
      zIndex: false,
      drag: null,
      start: null,
      stop: null,
    },
    _create: function () {
      if (
        this.options.helper === "original" &&
        !/^(?:r|a|f)/.test(this.element.css("position"))
      ) {
        this.element[0].style.position = "relative";
      }
      if (this.options.addClasses) {
        this.element.addClass("ui-draggable");
      }
      if (this.options.disabled) {
        this.element.addClass("ui-draggable-disabled");
      }
      this._mouseInit();
    },
    _destroy: function () {
      this.element.removeClass(
        "ui-draggable ui-draggable-dragging ui-draggable-disabled"
      );
      this._mouseDestroy();
    },
    _mouseCapture: function (c) {
      var d = this.options;
      if (
        this.helper ||
        d.disabled ||
        a(c.target).closest(".ui-resizable-handle").length > 0
      ) {
        return false;
      }
      this.handle = this._getHandle(c);
      if (!this.handle) {
        return false;
      }
      a(d.iframeFix === true ? "iframe" : d.iframeFix).each(function () {
        a(
          "<div class='ui-draggable-iframeFix' style='background: #fff;'></div>"
        )
          .css({
            width: this.offsetWidth + "px",
            height: this.offsetHeight + "px",
            position: "absolute",
            opacity: "0.001",
            zIndex: 1000,
          })
          .css(a(this).offset())
          .appendTo("body");
      });
      return true;
    },
    _mouseStart: function (c) {
      var d = this.options;
      this.helper = this._createHelper(c);
      this.helper.addClass("ui-draggable-dragging");
      this._cacheHelperProportions();
      if (a.ui.ddmanager) {
        a.ui.ddmanager.current = this;
      }
      this._cacheMargins();
      this.cssPosition = this.helper.css("position");
      this.scrollParent = this.helper.scrollParent();
      this.offsetParent = this.helper.offsetParent();
      this.offsetParentCssPosition = this.offsetParent.css("position");
      this.offset = this.positionAbs = this.element.offset();
      this.offset = {
        top: this.offset.top - this.margins.top,
        left: this.offset.left - this.margins.left,
      };
      this.offset.scroll = false;
      a.extend(this.offset, {
        click: {
          left: c.pageX - this.offset.left,
          top: c.pageY - this.offset.top,
        },
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset(),
      });
      this.originalPosition = this.position = this._generatePosition(c);
      this.originalPageX = c.pageX;
      this.originalPageY = c.pageY;
      d.cursorAt && this._adjustOffsetFromHelper(d.cursorAt);
      this._setContainment();
      if (this._trigger("start", c) === false) {
        this._clear();
        return false;
      }
      this._cacheHelperProportions();
      if (a.ui.ddmanager && !d.dropBehaviour) {
        a.ui.ddmanager.prepareOffsets(this, c);
      }
      this._mouseDrag(c, true);
      if (a.ui.ddmanager) {
        a.ui.ddmanager.dragStart(this, c);
      }
      return true;
    },
    _mouseDrag: function (c, d) {
      if (this.offsetParentCssPosition === "fixed") {
        this.offset.parent = this._getParentOffset();
      }
      this.position = this._generatePosition(c);
      this.positionAbs = this._convertPositionTo("absolute");
      if (!d) {
        var e = this._uiHash();
        if (this._trigger("drag", c, e) === false) {
          this._mouseUp({});
          return false;
        }
        this.position = e.position;
      }
      if (!this.options.axis || this.options.axis !== "y") {
        this.helper[0].style.left = this.position.left + "px";
      }
      if (!this.options.axis || this.options.axis !== "x") {
        this.helper[0].style.top = this.position.top + "px";
      }
      if (a.ui.ddmanager) {
        a.ui.ddmanager.drag(this, c);
      }
      return false;
    },
    _mouseStop: function (d) {
      var e = this,
        c = false;
      if (a.ui.ddmanager && !this.options.dropBehaviour) {
        c = a.ui.ddmanager.drop(this, d);
      }
      if (this.dropped) {
        c = this.dropped;
        this.dropped = false;
      }
      if (
        this.options.helper === "original" &&
        !a.contains(this.element[0].ownerDocument, this.element[0])
      ) {
        return false;
      }
      if (
        (this.options.revert === "invalid" && !c) ||
        (this.options.revert === "valid" && c) ||
        this.options.revert === true ||
        (a.isFunction(this.options.revert) &&
          this.options.revert.call(this.element, c))
      ) {
        a(this.helper).animate(
          this.originalPosition,
          parseInt(this.options.revertDuration, 10),
          function () {
            if (e._trigger("stop", d) !== false) {
              e._clear();
            }
          }
        );
      } else {
        if (this._trigger("stop", d) !== false) {
          this._clear();
        }
      }
      return false;
    },
    _mouseUp: function (c) {
      a("div.ui-draggable-iframeFix").each(function () {
        this.parentNode.removeChild(this);
      });
      if (a.ui.ddmanager) {
        a.ui.ddmanager.dragStop(this, c);
      }
      return a.ui.mouse.prototype._mouseUp.call(this, c);
    },
    cancel: function () {
      if (this.helper.is(".ui-draggable-dragging")) {
        this._mouseUp({});
      } else {
        this._clear();
      }
      return this;
    },
    _getHandle: function (c) {
      return this.options.handle
        ? !!a(c.target).closest(this.element.find(this.options.handle)).length
        : true;
    },
    _createHelper: function (c) {
      var e = this.options,
        d = a.isFunction(e.helper)
          ? a(e.helper.apply(this.element[0], [c]))
          : e.helper === "clone"
          ? this.element.clone().removeAttr("id")
          : this.element;
      if (!d.parents("body").length) {
        d.appendTo(
          e.appendTo === "parent" ? this.element[0].parentNode : e.appendTo
        );
      }
      if (
        d[0] !== this.element[0] &&
        !/(fixed|absolute)/.test(d.css("position"))
      ) {
        d.css("position", "absolute");
      }
      return d;
    },
    _adjustOffsetFromHelper: function (c) {
      if (typeof c === "string") {
        c = c.split(" ");
      }
      if (a.isArray(c)) {
        c = { left: +c[0], top: +c[1] || 0 };
      }
      if ("left" in c) {
        this.offset.click.left = c.left + this.margins.left;
      }
      if ("right" in c) {
        this.offset.click.left =
          this.helperProportions.width - c.right + this.margins.left;
      }
      if ("top" in c) {
        this.offset.click.top = c.top + this.margins.top;
      }
      if ("bottom" in c) {
        this.offset.click.top =
          this.helperProportions.height - c.bottom + this.margins.top;
      }
    },
    _getParentOffset: function () {
      var c = this.offsetParent.offset();
      if (
        this.cssPosition === "absolute" &&
        this.scrollParent[0] !== document &&
        a.contains(this.scrollParent[0], this.offsetParent[0])
      ) {
        c.left += this.scrollParent.scrollLeft();
        c.top += this.scrollParent.scrollTop();
      }
      if (
        this.offsetParent[0] === document.body ||
        (this.offsetParent[0].tagName &&
          this.offsetParent[0].tagName.toLowerCase() === "html" &&
          a.ui.ie)
      ) {
        c = { top: 0, left: 0 };
      }
      return {
        top:
          c.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left:
          c.left +
          (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0),
      };
    },
    _getRelativeOffset: function () {
      if (this.cssPosition === "relative") {
        var c = this.element.position();
        return {
          top:
            c.top -
            (parseInt(this.helper.css("top"), 10) || 0) +
            this.scrollParent.scrollTop(),
          left:
            c.left -
            (parseInt(this.helper.css("left"), 10) || 0) +
            this.scrollParent.scrollLeft(),
        };
      } else {
        return { top: 0, left: 0 };
      }
    },
    _cacheMargins: function () {
      this.margins = {
        left: parseInt(this.element.css("marginLeft"), 10) || 0,
        top: parseInt(this.element.css("marginTop"), 10) || 0,
        right: parseInt(this.element.css("marginRight"), 10) || 0,
        bottom: parseInt(this.element.css("marginBottom"), 10) || 0,
      };
    },
    _cacheHelperProportions: function () {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight(),
      };
    },
    _setContainment: function () {
      var g,
        d,
        e,
        f = this.options;
      if (!f.containment) {
        this.containment = null;
        return;
      }
      if (f.containment === "window") {
        this.containment = [
          a(window).scrollLeft() -
            this.offset.relative.left -
            this.offset.parent.left,
          a(window).scrollTop() -
            this.offset.relative.top -
            this.offset.parent.top,
          a(window).scrollLeft() +
            a(window).width() -
            this.helperProportions.width -
            this.margins.left,
          a(window).scrollTop() +
            (a(window).height() || document.body.parentNode.scrollHeight) -
            this.helperProportions.height -
            this.margins.top,
        ];
        return;
      }
      if (f.containment === "document") {
        this.containment = [
          0,
          0,
          a(document).width() -
            this.helperProportions.width -
            this.margins.left,
          (a(document).height() || document.body.parentNode.scrollHeight) -
            this.helperProportions.height -
            this.margins.top,
        ];
        return;
      }
      if (f.containment.constructor === Array) {
        this.containment = f.containment;
        return;
      }
      if (f.containment === "parent") {
        f.containment = this.helper[0].parentNode;
      }
      d = a(f.containment);
      e = d[0];
      if (!e) {
        return;
      }
      g = d.css("overflow") !== "hidden";
      this.containment = [
        (parseInt(d.css("borderLeftWidth"), 10) || 0) +
          (parseInt(d.css("paddingLeft"), 10) || 0),
        (parseInt(d.css("borderTopWidth"), 10) || 0) +
          (parseInt(d.css("paddingTop"), 10) || 0),
        (g ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) -
          (parseInt(d.css("borderRightWidth"), 10) || 0) -
          (parseInt(d.css("paddingRight"), 10) || 0) -
          this.helperProportions.width -
          this.margins.left -
          this.margins.right,
        (g ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) -
          (parseInt(d.css("borderBottomWidth"), 10) || 0) -
          (parseInt(d.css("paddingBottom"), 10) || 0) -
          this.helperProportions.height -
          this.margins.top -
          this.margins.bottom,
      ];
      this.relative_container = d;
    },
    _convertPositionTo: function (c, f) {
      if (!f) {
        f = this.position;
      }
      var e = c === "absolute" ? 1 : -1,
        g =
          this.cssPosition === "absolute" &&
          !(
            this.scrollParent[0] !== document &&
            a.contains(this.scrollParent[0], this.offsetParent[0])
          )
            ? this.offsetParent
            : this.scrollParent;
      if (!this.offset.scroll) {
        this.offset.scroll = { top: g.scrollTop(), left: g.scrollLeft() };
      }
      return {
        top:
          f.top +
          this.offset.relative.top * e +
          this.offset.parent.top * e -
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollTop()
            : this.offset.scroll.top) *
            e,
        left:
          f.left +
          this.offset.relative.left * e +
          this.offset.parent.left * e -
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollLeft()
            : this.offset.scroll.left) *
            e,
      };
    },
    _generatePosition: function (e) {
      var d,
        c,
        l,
        f,
        g = this.options,
        k =
          this.cssPosition === "absolute" &&
          !(
            this.scrollParent[0] !== document &&
            a.contains(this.scrollParent[0], this.offsetParent[0])
          )
            ? this.offsetParent
            : this.scrollParent,
        h = e.pageX,
        j = e.pageY;
      if (!this.offset.scroll) {
        this.offset.scroll = { top: k.scrollTop(), left: k.scrollLeft() };
      }
      if (this.originalPosition) {
        if (this.containment) {
          if (this.relative_container) {
            c = this.relative_container.offset();
            d = [
              this.containment[0] + c.left,
              this.containment[1] + c.top,
              this.containment[2] + c.left,
              this.containment[3] + c.top,
            ];
          } else {
            d = this.containment;
          }
          if (e.pageX - this.offset.click.left < d[0]) {
            h = d[0] + this.offset.click.left;
          }
          if (e.pageY - this.offset.click.top < d[1]) {
            j = d[1] + this.offset.click.top;
          }
          if (e.pageX - this.offset.click.left > d[2]) {
            h = d[2] + this.offset.click.left;
          }
          if (e.pageY - this.offset.click.top > d[3]) {
            j = d[3] + this.offset.click.top;
          }
        }
        if (g.grid) {
          l = g.grid[1]
            ? this.originalPageY +
              Math.round((j - this.originalPageY) / g.grid[1]) * g.grid[1]
            : this.originalPageY;
          j = d
            ? l - this.offset.click.top >= d[1] ||
              l - this.offset.click.top > d[3]
              ? l
              : l - this.offset.click.top >= d[1]
              ? l - g.grid[1]
              : l + g.grid[1]
            : l;
          f = g.grid[0]
            ? this.originalPageX +
              Math.round((h - this.originalPageX) / g.grid[0]) * g.grid[0]
            : this.originalPageX;
          h = d
            ? f - this.offset.click.left >= d[0] ||
              f - this.offset.click.left > d[2]
              ? f
              : f - this.offset.click.left >= d[0]
              ? f - g.grid[0]
              : f + g.grid[0]
            : f;
        }
      }
      return {
        top:
          j -
          this.offset.click.top -
          this.offset.relative.top -
          this.offset.parent.top +
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollTop()
            : this.offset.scroll.top),
        left:
          h -
          this.offset.click.left -
          this.offset.relative.left -
          this.offset.parent.left +
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollLeft()
            : this.offset.scroll.left),
      };
    },
    _clear: function () {
      this.helper.removeClass("ui-draggable-dragging");
      if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
        this.helper.remove();
      }
      this.helper = null;
      this.cancelHelperRemoval = false;
    },
    _trigger: function (d, c, e) {
      e = e || this._uiHash();
      a.ui.plugin.call(this, d, [c, e]);
      if (d === "drag") {
        this.positionAbs = this._convertPositionTo("absolute");
      }
      return a.Widget.prototype._trigger.call(this, d, c, e);
    },
    plugins: {},
    _uiHash: function () {
      return {
        helper: this.helper,
        position: this.position,
        originalPosition: this.originalPosition,
        offset: this.positionAbs,
      };
    },
  });
  a.ui.plugin.add("draggable", "connectToSortable", {
    start: function (c, f) {
      var d = a(this).data("ui-draggable"),
        e = d.options,
        g = a.extend({}, f, { item: d.element });
      d.sortables = [];
      a(e.connectToSortable).each(function () {
        var h = a.data(this, "ui-sortable");
        if (h && !h.options.disabled) {
          d.sortables.push({ instance: h, shouldRevert: h.options.revert });
          h.refreshPositions();
          h._trigger("activate", c, g);
        }
      });
    },
    stop: function (c, e) {
      var d = a(this).data("ui-draggable"),
        f = a.extend({}, e, { item: d.element });
      a.each(d.sortables, function () {
        if (this.instance.isOver) {
          this.instance.isOver = 0;
          d.cancelHelperRemoval = true;
          this.instance.cancelHelperRemoval = false;
          if (this.shouldRevert) {
            this.instance.options.revert = this.shouldRevert;
          }
          this.instance._mouseStop(c);
          this.instance.options.helper = this.instance.options._helper;
          if (d.options.helper === "original") {
            this.instance.currentItem.css({ top: "auto", left: "auto" });
          }
        } else {
          this.instance.cancelHelperRemoval = false;
          this.instance._trigger("deactivate", c, f);
        }
      });
    },
    drag: function (c, f) {
      var d = a(this).data("ui-draggable"),
        e = this;
      a.each(d.sortables, function () {
        var g = false,
          h = this;
        this.instance.positionAbs = d.positionAbs;
        this.instance.helperProportions = d.helperProportions;
        this.instance.offset.click = d.offset.click;
        if (this.instance._intersectsWith(this.instance.containerCache)) {
          g = true;
          a.each(d.sortables, function () {
            this.instance.positionAbs = d.positionAbs;
            this.instance.helperProportions = d.helperProportions;
            this.instance.offset.click = d.offset.click;
            if (
              this !== h &&
              this.instance._intersectsWith(this.instance.containerCache) &&
              a.contains(h.instance.element[0], this.instance.element[0])
            ) {
              g = false;
            }
            return g;
          });
        }
        if (g) {
          if (!this.instance.isOver) {
            this.instance.isOver = 1;
            this.instance.currentItem = a(e)
              .clone()
              .removeAttr("id")
              .appendTo(this.instance.element)
              .data("ui-sortable-item", true);
            this.instance.options._helper = this.instance.options.helper;
            this.instance.options.helper = function () {
              return f.helper[0];
            };
            c.target = this.instance.currentItem[0];
            this.instance._mouseCapture(c, true);
            this.instance._mouseStart(c, true, true);
            this.instance.offset.click.top = d.offset.click.top;
            this.instance.offset.click.left = d.offset.click.left;
            this.instance.offset.parent.left -=
              d.offset.parent.left - this.instance.offset.parent.left;
            this.instance.offset.parent.top -=
              d.offset.parent.top - this.instance.offset.parent.top;
            d._trigger("toSortable", c);
            d.dropped = this.instance.element;
            d.currentItem = d.element;
            this.instance.fromOutside = d;
          }
          if (this.instance.currentItem) {
            this.instance._mouseDrag(c);
          }
        } else {
          if (this.instance.isOver) {
            this.instance.isOver = 0;
            this.instance.cancelHelperRemoval = true;
            this.instance.options.revert = false;
            this.instance._trigger(
              "out",
              c,
              this.instance._uiHash(this.instance)
            );
            this.instance._mouseStop(c, true);
            this.instance.options.helper = this.instance.options._helper;
            this.instance.currentItem.remove();
            if (this.instance.placeholder) {
              this.instance.placeholder.remove();
            }
            d._trigger("fromSortable", c);
            d.dropped = false;
          }
        }
      });
    },
  });
  a.ui.plugin.add("draggable", "cursor", {
    start: function () {
      var d = a("body"),
        c = a(this).data("ui-draggable").options;
      if (d.css("cursor")) {
        c._cursor = d.css("cursor");
      }
      d.css("cursor", c.cursor);
    },
    stop: function () {
      var c = a(this).data("ui-draggable").options;
      if (c._cursor) {
        a("body").css("cursor", c._cursor);
      }
    },
  });
  a.ui.plugin.add("draggable", "opacity", {
    start: function (c, f) {
      var e = a(f.helper),
        d = a(this).data("ui-draggable").options;
      if (e.css("opacity")) {
        d._opacity = e.css("opacity");
      }
      e.css("opacity", d.opacity);
    },
    stop: function (c, e) {
      var d = a(this).data("ui-draggable").options;
      if (d._opacity) {
        a(e.helper).css("opacity", d._opacity);
      }
    },
  });
  a.ui.plugin.add("draggable", "scroll", {
    start: function () {
      var c = a(this).data("ui-draggable");
      if (
        c.scrollParent[0] !== document &&
        c.scrollParent[0].tagName !== "HTML"
      ) {
        c.overflowOffset = c.scrollParent.offset();
      }
    },
    drag: function (c) {
      var d = a(this).data("ui-draggable"),
        e = d.options,
        f = false;
      if (
        d.scrollParent[0] !== document &&
        d.scrollParent[0].tagName !== "HTML"
      ) {
        if (!e.axis || e.axis !== "x") {
          if (
            d.overflowOffset.top + d.scrollParent[0].offsetHeight - c.pageY <
            e.scrollSensitivity
          ) {
            d.scrollParent[0].scrollTop = f =
              d.scrollParent[0].scrollTop + e.scrollSpeed;
          } else {
            if (c.pageY - d.overflowOffset.top < e.scrollSensitivity) {
              d.scrollParent[0].scrollTop = f =
                d.scrollParent[0].scrollTop - e.scrollSpeed;
            }
          }
        }
        if (!e.axis || e.axis !== "y") {
          if (
            d.overflowOffset.left + d.scrollParent[0].offsetWidth - c.pageX <
            e.scrollSensitivity
          ) {
            d.scrollParent[0].scrollLeft = f =
              d.scrollParent[0].scrollLeft + e.scrollSpeed;
          } else {
            if (c.pageX - d.overflowOffset.left < e.scrollSensitivity) {
              d.scrollParent[0].scrollLeft = f =
                d.scrollParent[0].scrollLeft - e.scrollSpeed;
            }
          }
        }
      } else {
        if (!e.axis || e.axis !== "x") {
          if (c.pageY - a(document).scrollTop() < e.scrollSensitivity) {
            f = a(document).scrollTop(a(document).scrollTop() - e.scrollSpeed);
          } else {
            if (
              a(window).height() - (c.pageY - a(document).scrollTop()) <
              e.scrollSensitivity
            ) {
              f = a(document).scrollTop(
                a(document).scrollTop() + e.scrollSpeed
              );
            }
          }
        }
        if (!e.axis || e.axis !== "y") {
          if (c.pageX - a(document).scrollLeft() < e.scrollSensitivity) {
            f = a(document).scrollLeft(
              a(document).scrollLeft() - e.scrollSpeed
            );
          } else {
            if (
              a(window).width() - (c.pageX - a(document).scrollLeft()) <
              e.scrollSensitivity
            ) {
              f = a(document).scrollLeft(
                a(document).scrollLeft() + e.scrollSpeed
              );
            }
          }
        }
      }
      if (f !== false && a.ui.ddmanager && !e.dropBehaviour) {
        a.ui.ddmanager.prepareOffsets(d, c);
      }
    },
  });
  a.ui.plugin.add("draggable", "snap", {
    start: function () {
      var c = a(this).data("ui-draggable"),
        d = c.options;
      c.snapElements = [];
      a(
        d.snap.constructor !== String
          ? d.snap.items || ":data(ui-draggable)"
          : d.snap
      ).each(function () {
        var f = a(this),
          e = f.offset();
        if (this !== c.element[0]) {
          c.snapElements.push({
            item: this,
            width: f.outerWidth(),
            height: f.outerHeight(),
            top: e.top,
            left: e.left,
          });
        }
      });
    },
    drag: function (g, w) {
      var v,
        e,
        n,
        s,
        m,
        q,
        u,
        c,
        j,
        h,
        k = a(this).data("ui-draggable"),
        p = k.options,
        f = p.snapTolerance,
        x = w.offset.left,
        y = x + k.helperProportions.width,
        z = w.offset.top,
        A = z + k.helperProportions.height;
      for (j = k.snapElements.length - 1; j >= 0; j--) {
        m = k.snapElements[j].left;
        q = m + k.snapElements[j].width;
        u = k.snapElements[j].top;
        c = u + k.snapElements[j].height;
        if (
          y < m - f ||
          x > q + f ||
          A < u - f ||
          z > c + f ||
          !a.contains(
            k.snapElements[j].item.ownerDocument,
            k.snapElements[j].item
          )
        ) {
          if (k.snapElements[j].snapping) {
            k.options.snap.release &&
              k.options.snap.release.call(
                k.element,
                g,
                a.extend(k._uiHash(), { snapItem: k.snapElements[j].item })
              );
          }
          k.snapElements[j].snapping = false;
          continue;
        }
        if (p.snapMode !== "inner") {
          v = Math.abs(u - A) <= f;
          e = Math.abs(c - z) <= f;
          n = Math.abs(m - y) <= f;
          s = Math.abs(q - x) <= f;
          if (v) {
            w.position.top =
              k._convertPositionTo("relative", {
                top: u - k.helperProportions.height,
                left: 0,
              }).top - k.margins.top;
          }
          if (e) {
            w.position.top =
              k._convertPositionTo("relative", { top: c, left: 0 }).top -
              k.margins.top;
          }
          if (n) {
            w.position.left =
              k._convertPositionTo("relative", {
                top: 0,
                left: m - k.helperProportions.width,
              }).left - k.margins.left;
          }
          if (s) {
            w.position.left =
              k._convertPositionTo("relative", { top: 0, left: q }).left -
              k.margins.left;
          }
        }
        h = v || e || n || s;
        if (p.snapMode !== "outer") {
          v = Math.abs(u - z) <= f;
          e = Math.abs(c - A) <= f;
          n = Math.abs(m - x) <= f;
          s = Math.abs(q - y) <= f;
          if (v) {
            w.position.top =
              k._convertPositionTo("relative", { top: u, left: 0 }).top -
              k.margins.top;
          }
          if (e) {
            w.position.top =
              k._convertPositionTo("relative", {
                top: c - k.helperProportions.height,
                left: 0,
              }).top - k.margins.top;
          }
          if (n) {
            w.position.left =
              k._convertPositionTo("relative", { top: 0, left: m }).left -
              k.margins.left;
          }
          if (s) {
            w.position.left =
              k._convertPositionTo("relative", {
                top: 0,
                left: q - k.helperProportions.width,
              }).left - k.margins.left;
          }
        }
        if (!k.snapElements[j].snapping && (v || e || n || s || h)) {
          k.options.snap.snap &&
            k.options.snap.snap.call(
              k.element,
              g,
              a.extend(k._uiHash(), { snapItem: k.snapElements[j].item })
            );
        }
        k.snapElements[j].snapping = v || e || n || s || h;
      }
    },
  });
  a.ui.plugin.add("draggable", "stack", {
    start: function () {
      var d,
        e = this.data("ui-draggable").options,
        c = a.makeArray(a(e.stack)).sort(function (f, g) {
          return (
            (parseInt(a(f).css("zIndex"), 10) || 0) -
            (parseInt(a(g).css("zIndex"), 10) || 0)
          );
        });
      if (!c.length) {
        return;
      }
      d = parseInt(a(c[0]).css("zIndex"), 10) || 0;
      a(c).each(function (f) {
        a(this).css("zIndex", d + f);
      });
      this.css("zIndex", d + c.length);
    },
  });
  a.ui.plugin.add("draggable", "zIndex", {
    start: function (c, f) {
      var e = a(f.helper),
        d = a(this).data("ui-draggable").options;
      if (e.css("zIndex")) {
        d._zIndex = e.css("zIndex");
      }
      e.css("zIndex", d.zIndex);
    },
    stop: function (c, e) {
      var d = a(this).data("ui-draggable").options;
      if (d._zIndex) {
        a(e.helper).css("zIndex", d._zIndex);
      }
    },
  });
})(jQuery);
(function (a, c) {
  function b(f, d, e) {
    return f > d && f < d + e;
  }
  a.widget("ui.droppable", {
    version: "1.10.4",
    widgetEventPrefix: "drop",
    options: {
      accept: "*",
      activeClass: false,
      addClasses: true,
      greedy: false,
      hoverClass: false,
      scope: "default",
      tolerance: "intersect",
      activate: null,
      deactivate: null,
      drop: null,
      out: null,
      over: null,
    },
    _create: function () {
      var f,
        e = this.options,
        d = e.accept;
      this.isover = false;
      this.isout = true;
      this.accept = a.isFunction(d)
        ? d
        : function (g) {
            return g.is(d);
          };
      this.proportions = function () {
        if (arguments.length) {
          f = arguments[0];
        } else {
          return f
            ? f
            : (f = {
                width: this.element[0].offsetWidth,
                height: this.element[0].offsetHeight,
              });
        }
      };
      a.ui.ddmanager.droppables[e.scope] =
        a.ui.ddmanager.droppables[e.scope] || [];
      a.ui.ddmanager.droppables[e.scope].push(this);
      e.addClasses && this.element.addClass("ui-droppable");
    },
    _destroy: function () {
      var e = 0,
        d = a.ui.ddmanager.droppables[this.options.scope];
      for (; e < d.length; e++) {
        if (d[e] === this) {
          d.splice(e, 1);
        }
      }
      this.element.removeClass("ui-droppable ui-droppable-disabled");
    },
    _setOption: function (d, e) {
      if (d === "accept") {
        this.accept = a.isFunction(e)
          ? e
          : function (f) {
              return f.is(e);
            };
      }
      a.Widget.prototype._setOption.apply(this, arguments);
    },
    _activate: function (e) {
      var d = a.ui.ddmanager.current;
      if (this.options.activeClass) {
        this.element.addClass(this.options.activeClass);
      }
      if (d) {
        this._trigger("activate", e, this.ui(d));
      }
    },
    _deactivate: function (e) {
      var d = a.ui.ddmanager.current;
      if (this.options.activeClass) {
        this.element.removeClass(this.options.activeClass);
      }
      if (d) {
        this._trigger("deactivate", e, this.ui(d));
      }
    },
    _over: function (e) {
      var d = a.ui.ddmanager.current;
      if (!d || (d.currentItem || d.element)[0] === this.element[0]) {
        return;
      }
      if (this.accept.call(this.element[0], d.currentItem || d.element)) {
        if (this.options.hoverClass) {
          this.element.addClass(this.options.hoverClass);
        }
        this._trigger("over", e, this.ui(d));
      }
    },
    _out: function (e) {
      var d = a.ui.ddmanager.current;
      if (!d || (d.currentItem || d.element)[0] === this.element[0]) {
        return;
      }
      if (this.accept.call(this.element[0], d.currentItem || d.element)) {
        if (this.options.hoverClass) {
          this.element.removeClass(this.options.hoverClass);
        }
        this._trigger("out", e, this.ui(d));
      }
    },
    _drop: function (g, e) {
      var f = e || a.ui.ddmanager.current,
        d = false;
      if (!f || (f.currentItem || f.element)[0] === this.element[0]) {
        return false;
      }
      this.element
        .find(":data(ui-droppable)")
        .not(".ui-draggable-dragging")
        .each(function () {
          var h = a.data(this, "ui-droppable");
          if (
            h.options.greedy &&
            !h.options.disabled &&
            h.options.scope === f.options.scope &&
            h.accept.call(h.element[0], f.currentItem || f.element) &&
            a.ui.intersect(
              f,
              a.extend(h, { offset: h.element.offset() }),
              h.options.tolerance
            )
          ) {
            d = true;
            return false;
          }
        });
      if (d) {
        return false;
      }
      if (this.accept.call(this.element[0], f.currentItem || f.element)) {
        if (this.options.activeClass) {
          this.element.removeClass(this.options.activeClass);
        }
        if (this.options.hoverClass) {
          this.element.removeClass(this.options.hoverClass);
        }
        this._trigger("drop", g, this.ui(f));
        return this.element;
      }
      return false;
    },
    ui: function (d) {
      return {
        draggable: d.currentItem || d.element,
        helper: d.helper,
        position: d.position,
        offset: d.positionAbs,
      };
    },
  });
  a.ui.intersect = function (e, h, n) {
    if (!h.offset) {
      return false;
    }
    var f,
      g,
      o = (e.positionAbs || e.position.absolute).left,
      q = (e.positionAbs || e.position.absolute).top,
      p = o + e.helperProportions.width,
      s = q + e.helperProportions.height,
      j = h.offset.left,
      m = h.offset.top,
      k = j + h.proportions().width,
      d = m + h.proportions().height;
    switch (n) {
      case "fit":
        return j <= o && p <= k && m <= q && s <= d;
      case "intersect":
        return (
          j < o + e.helperProportions.width / 2 &&
          p - e.helperProportions.width / 2 < k &&
          m < q + e.helperProportions.height / 2 &&
          s - e.helperProportions.height / 2 < d
        );
      case "pointer":
        f =
          (e.positionAbs || e.position.absolute).left +
          (e.clickOffset || e.offset.click).left;
        g =
          (e.positionAbs || e.position.absolute).top +
          (e.clickOffset || e.offset.click).top;
        return (
          b(g, m, h.proportions().height) && b(f, j, h.proportions().width)
        );
      case "touch":
        return (
          ((q >= m && q <= d) || (s >= m && s <= d) || (q < m && s > d)) &&
          ((o >= j && o <= k) || (p >= j && p <= k) || (o < j && p > k))
        );
      default:
        return false;
    }
  };
  a.ui.ddmanager = {
    current: null,
    droppables: { default: [] },
    prepareOffsets: function (k, d) {
      var e,
        f,
        h = a.ui.ddmanager.droppables[k.options.scope] || [],
        l = d ? d.type : null,
        g = (k.currentItem || k.element).find(":data(ui-droppable)").addBack();
      droppablesLoop: for (e = 0; e < h.length; e++) {
        if (
          h[e].options.disabled ||
          (k && !h[e].accept.call(h[e].element[0], k.currentItem || k.element))
        ) {
          continue;
        }
        for (f = 0; f < g.length; f++) {
          if (g[f] === h[e].element[0]) {
            h[e].proportions().height = 0;
            continue droppablesLoop;
          }
        }
        h[e].visible = h[e].element.css("display") !== "none";
        if (!h[e].visible) {
          continue;
        }
        if (l === "mousedown") {
          h[e]._activate.call(h[e], d);
        }
        h[e].offset = h[e].element.offset();
        h[e].proportions({
          width: h[e].element[0].offsetWidth,
          height: h[e].element[0].offsetHeight,
        });
      }
    },
    drop: function (d, f) {
      var e = false;
      a.each(
        (a.ui.ddmanager.droppables[d.options.scope] || []).slice(),
        function () {
          if (!this.options) {
            return;
          }
          if (
            !this.options.disabled &&
            this.visible &&
            a.ui.intersect(d, this, this.options.tolerance)
          ) {
            e = this._drop.call(this, f) || e;
          }
          if (
            !this.options.disabled &&
            this.visible &&
            this.accept.call(this.element[0], d.currentItem || d.element)
          ) {
            this.isout = true;
            this.isover = false;
            this._deactivate.call(this, f);
          }
        }
      );
      return e;
    },
    dragStart: function (d, e) {
      d.element.parentsUntil("body").bind("scroll.droppable", function () {
        if (!d.options.refreshPositions) {
          a.ui.ddmanager.prepareOffsets(d, e);
        }
      });
    },
    drag: function (d, e) {
      if (d.options.refreshPositions) {
        a.ui.ddmanager.prepareOffsets(d, e);
      }
      a.each(a.ui.ddmanager.droppables[d.options.scope] || [], function () {
        if (this.options.disabled || this.greedyChild || !this.visible) {
          return;
        }
        var j,
          k,
          h,
          g = a.ui.intersect(d, this, this.options.tolerance),
          f = !g && this.isover ? "isout" : g && !this.isover ? "isover" : null;
        if (!f) {
          return;
        }
        if (this.options.greedy) {
          k = this.options.scope;
          h = this.element.parents(":data(ui-droppable)").filter(function () {
            return a.data(this, "ui-droppable").options.scope === k;
          });
          if (h.length) {
            j = a.data(h[0], "ui-droppable");
            j.greedyChild = f === "isover";
          }
        }
        if (j && f === "isover") {
          j.isover = false;
          j.isout = true;
          j._out.call(j, e);
        }
        this[f] = true;
        this[f === "isout" ? "isover" : "isout"] = false;
        this[f === "isover" ? "_over" : "_out"].call(this, e);
        if (j && f === "isout") {
          j.isout = false;
          j.isover = true;
          j._over.call(j, e);
        }
      });
    },
    dragStop: function (d, e) {
      d.element.parentsUntil("body").unbind("scroll.droppable");
      if (!d.options.refreshPositions) {
        a.ui.ddmanager.prepareOffsets(d, e);
      }
    },
  };
})(jQuery);
(function (a, d) {
  function c(e) {
    return parseInt(e, 10) || 0;
  }
  function b(e) {
    return !isNaN(parseInt(e, 10));
  }
  a.widget("ui.resizable", a.ui.mouse, {
    version: "1.10.4",
    widgetEventPrefix: "resize",
    options: {
      alsoResize: false,
      animate: false,
      animateDuration: "slow",
      animateEasing: "swing",
      aspectRatio: false,
      autoHide: false,
      containment: false,
      ghost: false,
      grid: false,
      handles: "e,s,se",
      helper: false,
      maxHeight: null,
      maxWidth: null,
      minHeight: 10,
      minWidth: 10,
      zIndex: 90,
      resize: null,
      start: null,
      stop: null,
    },
    _create: function () {
      var j,
        h,
        f,
        e,
        g,
        l = this,
        k = this.options;
      this.element.addClass("ui-resizable");
      a.extend(this, {
        _aspectRatio: !!k.aspectRatio,
        aspectRatio: k.aspectRatio,
        originalElement: this.element,
        _proportionallyResizeElements: [],
        _helper:
          k.helper || k.ghost || k.animate
            ? k.helper || "ui-resizable-helper"
            : null,
      });
      if (
        this.element[0].nodeName.match(
          /canvas|textarea|input|select|button|img/i
        )
      ) {
        this.element.wrap(
          a("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
            position: this.element.css("position"),
            width: this.element.outerWidth(),
            height: this.element.outerHeight(),
            top: this.element.css("top"),
            left: this.element.css("left"),
          })
        );
        this.element = this.element
          .parent()
          .data("ui-resizable", this.element.data("ui-resizable"));
        this.elementIsWrapper = true;
        this.element.css({
          marginLeft: this.originalElement.css("marginLeft"),
          marginTop: this.originalElement.css("marginTop"),
          marginRight: this.originalElement.css("marginRight"),
          marginBottom: this.originalElement.css("marginBottom"),
        });
        this.originalElement.css({
          marginLeft: 0,
          marginTop: 0,
          marginRight: 0,
          marginBottom: 0,
        });
        this.originalResizeStyle = this.originalElement.css("resize");
        this.originalElement.css("resize", "none");
        this._proportionallyResizeElements.push(
          this.originalElement.css({
            position: "static",
            zoom: 1,
            display: "block",
          })
        );
        this.originalElement.css({
          margin: this.originalElement.css("margin"),
        });
        this._proportionallyResize();
      }
      this.handles =
        k.handles ||
        (!a(".ui-resizable-handle", this.element).length
          ? "e,s,se"
          : {
              n: ".ui-resizable-n",
              e: ".ui-resizable-e",
              s: ".ui-resizable-s",
              w: ".ui-resizable-w",
              se: ".ui-resizable-se",
              sw: ".ui-resizable-sw",
              ne: ".ui-resizable-ne",
              nw: ".ui-resizable-nw",
            });
      if (this.handles.constructor === String) {
        if (this.handles === "all") {
          this.handles = "n,e,s,w,se,sw,ne,nw";
        }
        j = this.handles.split(",");
        this.handles = {};
        for (h = 0; h < j.length; h++) {
          f = a.trim(j[h]);
          g = "ui-resizable-" + f;
          e = a("<div class='ui-resizable-handle " + g + "'></div>");
          e.css({ zIndex: k.zIndex });
          if ("se" === f) {
            e.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
          }
          this.handles[f] = ".ui-resizable-" + f;
          this.element.append(e);
        }
      }
      this._renderAxis = function (q) {
        var n, m, o, p;
        q = q || this.element;
        for (n in this.handles) {
          if (this.handles[n].constructor === String) {
            this.handles[n] = a(this.handles[n], this.element).show();
          }
          if (
            this.elementIsWrapper &&
            this.originalElement[0].nodeName.match(
              /textarea|input|select|button/i
            )
          ) {
            m = a(this.handles[n], this.element);
            p = /sw|ne|nw|se|n|s/.test(n) ? m.outerHeight() : m.outerWidth();
            o = [
              "padding",
              /ne|nw|n/.test(n)
                ? "Top"
                : /se|sw|s/.test(n)
                ? "Bottom"
                : /^e$/.test(n)
                ? "Right"
                : "Left",
            ].join("");
            q.css(o, p);
            this._proportionallyResize();
          }
          if (!a(this.handles[n]).length) {
            continue;
          }
        }
      };
      this._renderAxis(this.element);
      this._handles = a(
        ".ui-resizable-handle",
        this.element
      ).disableSelection();
      this._handles.mouseover(function () {
        if (!l.resizing) {
          if (this.className) {
            e = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
          }
          l.axis = e && e[1] ? e[1] : "se";
        }
      });
      if (k.autoHide) {
        this._handles.hide();
        a(this.element)
          .addClass("ui-resizable-autohide")
          .mouseenter(function () {
            if (k.disabled) {
              return;
            }
            a(this).removeClass("ui-resizable-autohide");
            l._handles.show();
          })
          .mouseleave(function () {
            if (k.disabled) {
              return;
            }
            if (!l.resizing) {
              a(this).addClass("ui-resizable-autohide");
              l._handles.hide();
            }
          });
      }
      this._mouseInit();
    },
    _destroy: function () {
      this._mouseDestroy();
      var f,
        e = function (g) {
          a(g)
            .removeClass(
              "ui-resizable ui-resizable-disabled ui-resizable-resizing"
            )
            .removeData("resizable")
            .removeData("ui-resizable")
            .unbind(".resizable")
            .find(".ui-resizable-handle")
            .remove();
        };
      if (this.elementIsWrapper) {
        e(this.element);
        f = this.element;
        this.originalElement
          .css({
            position: f.css("position"),
            width: f.outerWidth(),
            height: f.outerHeight(),
            top: f.css("top"),
            left: f.css("left"),
          })
          .insertAfter(f);
        f.remove();
      }
      this.originalElement.css("resize", this.originalResizeStyle);
      e(this.originalElement);
      return this;
    },
    _mouseCapture: function (f) {
      var h,
        g,
        e = false;
      for (h in this.handles) {
        g = a(this.handles[h])[0];
        if (g === f.target || a.contains(g, f.target)) {
          e = true;
        }
      }
      return !this.options.disabled && e;
    },
    _mouseStart: function (j) {
      var e,
        g,
        f,
        l = this.options,
        k = this.element.position(),
        h = this.element;
      this.resizing = true;
      if (/absolute/.test(h.css("position"))) {
        h.css({ position: "absolute", top: h.css("top"), left: h.css("left") });
      } else {
        if (h.is(".ui-draggable")) {
          h.css({ position: "absolute", top: k.top, left: k.left });
        }
      }
      this._renderProxy();
      e = c(this.helper.css("left"));
      g = c(this.helper.css("top"));
      if (l.containment) {
        e += a(l.containment).scrollLeft() || 0;
        g += a(l.containment).scrollTop() || 0;
      }
      this.offset = this.helper.offset();
      this.position = { left: e, top: g };
      this.size = this._helper
        ? { width: this.helper.width(), height: this.helper.height() }
        : { width: h.width(), height: h.height() };
      this.originalSize = this._helper
        ? { width: h.outerWidth(), height: h.outerHeight() }
        : { width: h.width(), height: h.height() };
      this.originalPosition = { left: e, top: g };
      this.sizeDiff = {
        width: h.outerWidth() - h.width(),
        height: h.outerHeight() - h.height(),
      };
      this.originalMousePosition = { left: j.pageX, top: j.pageY };
      this.aspectRatio =
        typeof l.aspectRatio === "number"
          ? l.aspectRatio
          : this.originalSize.width / this.originalSize.height || 1;
      f = a(".ui-resizable-" + this.axis).css("cursor");
      a("body").css("cursor", f === "auto" ? this.axis + "-resize" : f);
      h.addClass("ui-resizable-resizing");
      this._propagate("start", j);
      return true;
    },
    _mouseDrag: function (k) {
      var f,
        j = this.helper,
        p = {},
        q = this.originalMousePosition,
        e = this.axis,
        n = this.position.top,
        m = this.position.left,
        o = this.size.width,
        l = this.size.height,
        g = k.pageX - q.left || 0,
        h = k.pageY - q.top || 0,
        r = this._change[e];
      if (!r) {
        return false;
      }
      f = r.apply(this, [k, g, h]);
      this._updateVirtualBoundaries(k.shiftKey);
      if (this._aspectRatio || k.shiftKey) {
        f = this._updateRatio(f, k);
      }
      f = this._respectSize(f, k);
      this._updateCache(f);
      this._propagate("resize", k);
      if (this.position.top !== n) {
        p.top = this.position.top + "px";
      }
      if (this.position.left !== m) {
        p.left = this.position.left + "px";
      }
      if (this.size.width !== o) {
        p.width = this.size.width + "px";
      }
      if (this.size.height !== l) {
        p.height = this.size.height + "px";
      }
      j.css(p);
      if (!this._helper && this._proportionallyResizeElements.length) {
        this._proportionallyResize();
      }
      if (!a.isEmptyObject(p)) {
        this._trigger("resize", k, this.ui());
      }
      return false;
    },
    _mouseStop: function (e) {
      this.resizing = false;
      var j,
        f,
        l,
        m,
        k,
        g,
        p,
        h = this.options,
        n = this;
      if (this._helper) {
        j = this._proportionallyResizeElements;
        f = j.length && /textarea/i.test(j[0].nodeName);
        l = f && a.ui.hasScroll(j[0], "left") ? 0 : n.sizeDiff.height;
        m = f ? 0 : n.sizeDiff.width;
        k = { width: n.helper.width() - m, height: n.helper.height() - l };
        g =
          parseInt(n.element.css("left"), 10) +
            (n.position.left - n.originalPosition.left) || null;
        p =
          parseInt(n.element.css("top"), 10) +
            (n.position.top - n.originalPosition.top) || null;
        if (!h.animate) {
          this.element.css(a.extend(k, { top: p, left: g }));
        }
        n.helper.height(n.size.height);
        n.helper.width(n.size.width);
        if (this._helper && !h.animate) {
          this._proportionallyResize();
        }
      }
      a("body").css("cursor", "auto");
      this.element.removeClass("ui-resizable-resizing");
      this._propagate("stop", e);
      if (this._helper) {
        this.helper.remove();
      }
      return false;
    },
    _updateVirtualBoundaries: function (f) {
      var l,
        j,
        k,
        h,
        e,
        g = this.options;
      e = {
        minWidth: b(g.minWidth) ? g.minWidth : 0,
        maxWidth: b(g.maxWidth) ? g.maxWidth : Infinity,
        minHeight: b(g.minHeight) ? g.minHeight : 0,
        maxHeight: b(g.maxHeight) ? g.maxHeight : Infinity,
      };
      if (this._aspectRatio || f) {
        l = e.minHeight * this.aspectRatio;
        k = e.minWidth / this.aspectRatio;
        j = e.maxHeight * this.aspectRatio;
        h = e.maxWidth / this.aspectRatio;
        if (l > e.minWidth) {
          e.minWidth = l;
        }
        if (k > e.minHeight) {
          e.minHeight = k;
        }
        if (j < e.maxWidth) {
          e.maxWidth = j;
        }
        if (h < e.maxHeight) {
          e.maxHeight = h;
        }
      }
      this._vBoundaries = e;
    },
    _updateCache: function (e) {
      this.offset = this.helper.offset();
      if (b(e.left)) {
        this.position.left = e.left;
      }
      if (b(e.top)) {
        this.position.top = e.top;
      }
      if (b(e.height)) {
        this.size.height = e.height;
      }
      if (b(e.width)) {
        this.size.width = e.width;
      }
    },
    _updateRatio: function (h) {
      var f = this.position,
        g = this.size,
        e = this.axis;
      if (b(h.height)) {
        h.width = h.height * this.aspectRatio;
      } else {
        if (b(h.width)) {
          h.height = h.width / this.aspectRatio;
        }
      }
      if (e === "sw") {
        h.left = f.left + (g.width - h.width);
        h.top = null;
      }
      if (e === "nw") {
        h.top = f.top + (g.height - h.height);
        h.left = f.left + (g.width - h.width);
      }
      return h;
    },
    _respectSize: function (h) {
      var q = this._vBoundaries,
        e = this.axis,
        m = b(h.width) && q.maxWidth && q.maxWidth < h.width,
        l = b(h.height) && q.maxHeight && q.maxHeight < h.height,
        p = b(h.width) && q.minWidth && q.minWidth > h.width,
        n = b(h.height) && q.minHeight && q.minHeight > h.height,
        k = this.originalPosition.left + this.originalSize.width,
        j = this.position.top + this.size.height,
        g = /sw|nw|w/.test(e),
        f = /nw|ne|n/.test(e);
      if (p) {
        h.width = q.minWidth;
      }
      if (n) {
        h.height = q.minHeight;
      }
      if (m) {
        h.width = q.maxWidth;
      }
      if (l) {
        h.height = q.maxHeight;
      }
      if (p && g) {
        h.left = k - q.minWidth;
      }
      if (m && g) {
        h.left = k - q.maxWidth;
      }
      if (n && f) {
        h.top = j - q.minHeight;
      }
      if (l && f) {
        h.top = j - q.maxHeight;
      }
      if (!h.width && !h.height && !h.left && h.top) {
        h.top = null;
      } else {
        if (!h.width && !h.height && !h.top && h.left) {
          h.left = null;
        }
      }
      return h;
    },
    _proportionallyResize: function () {
      if (!this._proportionallyResizeElements.length) {
        return;
      }
      var g,
        h,
        e,
        k,
        l,
        f = this.helper || this.element;
      for (g = 0; g < this._proportionallyResizeElements.length; g++) {
        l = this._proportionallyResizeElements[g];
        if (!this.borderDif) {
          this.borderDif = [];
          e = [
            l.css("borderTopWidth"),
            l.css("borderRightWidth"),
            l.css("borderBottomWidth"),
            l.css("borderLeftWidth"),
          ];
          k = [
            l.css("paddingTop"),
            l.css("paddingRight"),
            l.css("paddingBottom"),
            l.css("paddingLeft"),
          ];
          for (h = 0; h < e.length; h++) {
            this.borderDif[h] =
              (parseInt(e[h], 10) || 0) + (parseInt(k[h], 10) || 0);
          }
        }
        l.css({
          height: f.height() - this.borderDif[0] - this.borderDif[2] || 0,
          width: f.width() - this.borderDif[1] - this.borderDif[3] || 0,
        });
      }
    },
    _renderProxy: function () {
      var e = this.element,
        f = this.options;
      this.elementOffset = e.offset();
      if (this._helper) {
        this.helper = this.helper || a("<div style='overflow:hidden;'></div>");
        this.helper
          .addClass(this._helper)
          .css({
            width: this.element.outerWidth() - 1,
            height: this.element.outerHeight() - 1,
            position: "absolute",
            left: this.elementOffset.left + "px",
            top: this.elementOffset.top + "px",
            zIndex: ++f.zIndex,
          });
        this.helper.appendTo("body").disableSelection();
      } else {
        this.helper = this.element;
      }
    },
    _change: {
      e: function (f, e) {
        return { width: this.originalSize.width + e };
      },
      w: function (g, f) {
        var e = this.originalSize,
          h = this.originalPosition;
        return { left: h.left + f, width: e.width - f };
      },
      n: function (h, f, g) {
        var e = this.originalSize,
          j = this.originalPosition;
        return { top: j.top + g, height: e.height - g };
      },
      s: function (g, e, f) {
        return { height: this.originalSize.height + f };
      },
      se: function (g, e, f) {
        return a.extend(
          this._change.s.apply(this, arguments),
          this._change.e.apply(this, [g, e, f])
        );
      },
      sw: function (g, e, f) {
        return a.extend(
          this._change.s.apply(this, arguments),
          this._change.w.apply(this, [g, e, f])
        );
      },
      ne: function (g, e, f) {
        return a.extend(
          this._change.n.apply(this, arguments),
          this._change.e.apply(this, [g, e, f])
        );
      },
      nw: function (g, e, f) {
        return a.extend(
          this._change.n.apply(this, arguments),
          this._change.w.apply(this, [g, e, f])
        );
      },
    },
    _propagate: function (f, e) {
      a.ui.plugin.call(this, f, [e, this.ui()]);
      f !== "resize" && this._trigger(f, e, this.ui());
    },
    plugins: {},
    ui: function () {
      return {
        originalElement: this.originalElement,
        element: this.element,
        helper: this.helper,
        position: this.position,
        size: this.size,
        originalSize: this.originalSize,
        originalPosition: this.originalPosition,
      };
    },
  });
  a.ui.plugin.add("resizable", "animate", {
    stop: function (e) {
      var n = a(this).data("ui-resizable"),
        h = n.options,
        j = n._proportionallyResizeElements,
        f = j.length && /textarea/i.test(j[0].nodeName),
        k = f && a.ui.hasScroll(j[0], "left") ? 0 : n.sizeDiff.height,
        l = f ? 0 : n.sizeDiff.width,
        m = { width: n.size.width - l, height: n.size.height - k },
        g =
          parseInt(n.element.css("left"), 10) +
            (n.position.left - n.originalPosition.left) || null,
        p =
          parseInt(n.element.css("top"), 10) +
            (n.position.top - n.originalPosition.top) || null;
      n.element.animate(a.extend(m, p && g ? { top: p, left: g } : {}), {
        duration: h.animateDuration,
        easing: h.animateEasing,
        step: function () {
          var o = {
            width: parseInt(n.element.css("width"), 10),
            height: parseInt(n.element.css("height"), 10),
            top: parseInt(n.element.css("top"), 10),
            left: parseInt(n.element.css("left"), 10),
          };
          if (j && j.length) {
            a(j[0]).css({ width: o.width, height: o.height });
          }
          n._updateCache(o);
          n._propagate("resize", e);
        },
      });
    },
  });
  a.ui.plugin.add("resizable", "containment", {
    start: function () {
      var k,
        q,
        g,
        f,
        h,
        s,
        l,
        r = a(this).data("ui-resizable"),
        m = r.options,
        j = r.element,
        n = m.containment,
        e =
          n instanceof a ? n.get(0) : /parent/.test(n) ? j.parent().get(0) : n;
      if (!e) {
        return;
      }
      r.containerElement = a(e);
      if (/document/.test(n) || n === document) {
        r.containerOffset = { left: 0, top: 0 };
        r.containerPosition = { left: 0, top: 0 };
        r.parentData = {
          element: a(document),
          left: 0,
          top: 0,
          width: a(document).width(),
          height: a(document).height() || document.body.parentNode.scrollHeight,
        };
      } else {
        k = a(e);
        q = [];
        a(["Top", "Right", "Left", "Bottom"]).each(function (o, p) {
          q[o] = c(k.css("padding" + p));
        });
        r.containerOffset = k.offset();
        r.containerPosition = k.position();
        r.containerSize = {
          height: k.innerHeight() - q[3],
          width: k.innerWidth() - q[1],
        };
        g = r.containerOffset;
        f = r.containerSize.height;
        h = r.containerSize.width;
        s = a.ui.hasScroll(e, "left") ? e.scrollWidth : h;
        l = a.ui.hasScroll(e) ? e.scrollHeight : f;
        r.parentData = {
          element: e,
          left: g.left,
          top: g.top,
          width: s,
          height: l,
        };
      }
    },
    resize: function (j) {
      var r,
        k,
        m,
        l,
        q = a(this).data("ui-resizable"),
        n = q.options,
        f = q.containerOffset,
        h = q.position,
        p = q._aspectRatio || j.shiftKey,
        g = { top: 0, left: 0 },
        e = q.containerElement;
      if (e[0] !== document && /static/.test(e.css("position"))) {
        g = f;
      }
      if (h.left < (q._helper ? f.left : 0)) {
        q.size.width =
          q.size.width +
          (q._helper ? q.position.left - f.left : q.position.left - g.left);
        if (p) {
          q.size.height = q.size.width / q.aspectRatio;
        }
        q.position.left = n.helper ? f.left : 0;
      }
      if (h.top < (q._helper ? f.top : 0)) {
        q.size.height =
          q.size.height + (q._helper ? q.position.top - f.top : q.position.top);
        if (p) {
          q.size.width = q.size.height * q.aspectRatio;
        }
        q.position.top = q._helper ? f.top : 0;
      }
      q.offset.left = q.parentData.left + q.position.left;
      q.offset.top = q.parentData.top + q.position.top;
      r = Math.abs(
        (q._helper ? q.offset.left - g.left : q.offset.left - g.left) +
          q.sizeDiff.width
      );
      k = Math.abs(
        (q._helper ? q.offset.top - g.top : q.offset.top - f.top) +
          q.sizeDiff.height
      );
      m = q.containerElement.get(0) === q.element.parent().get(0);
      l = /relative|absolute/.test(q.containerElement.css("position"));
      if (m && l) {
        r -= Math.abs(q.parentData.left);
      }
      if (r + q.size.width >= q.parentData.width) {
        q.size.width = q.parentData.width - r;
        if (p) {
          q.size.height = q.size.width / q.aspectRatio;
        }
      }
      if (k + q.size.height >= q.parentData.height) {
        q.size.height = q.parentData.height - k;
        if (p) {
          q.size.width = q.size.height * q.aspectRatio;
        }
      }
    },
    stop: function () {
      var n = a(this).data("ui-resizable"),
        m = n.options,
        f = n.containerOffset,
        g = n.containerPosition,
        e = n.containerElement,
        k = a(n.helper),
        l = k.offset(),
        p = k.outerWidth() - n.sizeDiff.width,
        j = k.outerHeight() - n.sizeDiff.height;
      if (n._helper && !m.animate && /relative/.test(e.css("position"))) {
        a(this).css({ left: l.left - g.left - f.left, width: p, height: j });
      }
      if (n._helper && !m.animate && /static/.test(e.css("position"))) {
        a(this).css({ left: l.left - g.left - f.left, width: p, height: j });
      }
    },
  });
  a.ui.plugin.add("resizable", "alsoResize", {
    start: function () {
      var g = a(this).data("ui-resizable"),
        f = g.options,
        e = function (h) {
          a(h).each(function () {
            var j = a(this);
            j.data("ui-resizable-alsoresize", {
              width: parseInt(j.width(), 10),
              height: parseInt(j.height(), 10),
              left: parseInt(j.css("left"), 10),
              top: parseInt(j.css("top"), 10),
            });
          });
        };
      if (typeof f.alsoResize === "object" && !f.alsoResize.parentNode) {
        if (f.alsoResize.length) {
          f.alsoResize = f.alsoResize[0];
          e(f.alsoResize);
        } else {
          a.each(f.alsoResize, function (h) {
            e(h);
          });
        }
      } else {
        e(f.alsoResize);
      }
    },
    resize: function (g, m) {
      var l = a(this).data("ui-resizable"),
        h = l.options,
        k = l.originalSize,
        j = l.originalPosition,
        f = {
          height: l.size.height - k.height || 0,
          width: l.size.width - k.width || 0,
          top: l.position.top - j.top || 0,
          left: l.position.left - j.left || 0,
        },
        e = function (o, n) {
          a(o).each(function () {
            var q = a(this),
              r = a(this).data("ui-resizable-alsoresize"),
              s = {},
              p =
                n && n.length
                  ? n
                  : q.parents(m.originalElement[0]).length
                  ? ["width", "height"]
                  : ["width", "height", "top", "left"];
            a.each(p, function (t, u) {
              var v = (r[u] || 0) + (f[u] || 0);
              if (v && v >= 0) {
                s[u] = v || null;
              }
            });
            q.css(s);
          });
        };
      if (typeof h.alsoResize === "object" && !h.alsoResize.nodeType) {
        a.each(h.alsoResize, function (o, n) {
          e(o, n);
        });
      } else {
        e(h.alsoResize);
      }
    },
    stop: function () {
      a(this).removeData("resizable-alsoresize");
    },
  });
  a.ui.plugin.add("resizable", "ghost", {
    start: function () {
      var g = a(this).data("ui-resizable"),
        f = g.options,
        e = g.size;
      g.ghost = g.originalElement.clone();
      g.ghost
        .css({
          opacity: 0.25,
          display: "block",
          position: "relative",
          height: e.height,
          width: e.width,
          margin: 0,
          left: 0,
          top: 0,
        })
        .addClass("ui-resizable-ghost")
        .addClass(typeof f.ghost === "string" ? f.ghost : "");
      g.ghost.appendTo(g.helper);
    },
    resize: function () {
      var e = a(this).data("ui-resizable");
      if (e.ghost) {
        e.ghost.css({
          position: "relative",
          height: e.size.height,
          width: e.size.width,
        });
      }
    },
    stop: function () {
      var e = a(this).data("ui-resizable");
      if (e.ghost && e.helper) {
        e.helper.get(0).removeChild(e.ghost.get(0));
      }
    },
  });
  a.ui.plugin.add("resizable", "grid", {
    resize: function () {
      var w = a(this).data("ui-resizable"),
        r = w.options,
        f = w.size,
        t = w.originalSize,
        s = w.originalPosition,
        e = w.axis,
        g = typeof r.grid === "number" ? [r.grid, r.grid] : r.grid,
        h = g[0] || 1,
        j = g[1] || 1,
        u = Math.round((f.width - t.width) / h) * h,
        v = Math.round((f.height - t.height) / j) * j,
        q = t.width + u,
        p = t.height + v,
        l = r.maxWidth && r.maxWidth < q,
        k = r.maxHeight && r.maxHeight < p,
        n = r.minWidth && r.minWidth > q,
        m = r.minHeight && r.minHeight > p;
      r.grid = g;
      if (n) {
        q = q + h;
      }
      if (m) {
        p = p + j;
      }
      if (l) {
        q = q - h;
      }
      if (k) {
        p = p - j;
      }
      if (/^(se|s|e)$/.test(e)) {
        w.size.width = q;
        w.size.height = p;
      } else {
        if (/^(ne)$/.test(e)) {
          w.size.width = q;
          w.size.height = p;
          w.position.top = s.top - v;
        } else {
          if (/^(sw)$/.test(e)) {
            w.size.width = q;
            w.size.height = p;
            w.position.left = s.left - u;
          } else {
            if (p - j > 0) {
              w.size.height = p;
              w.position.top = s.top - v;
            } else {
              w.size.height = j;
              w.position.top = s.top + t.height - j;
            }
            if (q - h > 0) {
              w.size.width = q;
              w.position.left = s.left - u;
            } else {
              w.size.width = h;
              w.position.left = s.left + t.width - h;
            }
          }
        }
      }
    },
  });
})(jQuery);
(function (a, b) {
  a.widget("ui.selectable", a.ui.mouse, {
    version: "1.10.4",
    options: {
      appendTo: "body",
      autoRefresh: true,
      distance: 0,
      filter: "*",
      tolerance: "touch",
      selected: null,
      selecting: null,
      start: null,
      stop: null,
      unselected: null,
      unselecting: null,
    },
    _create: function () {
      var c,
        d = this;
      this.element.addClass("ui-selectable");
      this.dragged = false;
      this.refresh = function () {
        c = a(d.options.filter, d.element[0]);
        c.addClass("ui-selectee");
        c.each(function () {
          var e = a(this),
            f = e.offset();
          a.data(this, "selectable-item", {
            element: this,
            $element: e,
            left: f.left,
            top: f.top,
            right: f.left + e.outerWidth(),
            bottom: f.top + e.outerHeight(),
            startselected: false,
            selected: e.hasClass("ui-selected"),
            selecting: e.hasClass("ui-selecting"),
            unselecting: e.hasClass("ui-unselecting"),
          });
        });
      };
      this.refresh();
      this.selectees = c.addClass("ui-selectee");
      this._mouseInit();
      this.helper = a("<div class='ui-selectable-helper'></div>");
    },
    _destroy: function () {
      this.selectees.removeClass("ui-selectee").removeData("selectable-item");
      this.element.removeClass("ui-selectable ui-selectable-disabled");
      this._mouseDestroy();
    },
    _mouseStart: function (c) {
      var e = this,
        d = this.options;
      this.opos = [c.pageX, c.pageY];
      if (this.options.disabled) {
        return;
      }
      this.selectees = a(d.filter, this.element[0]);
      this._trigger("start", c);
      a(d.appendTo).append(this.helper);
      this.helper.css({ left: c.pageX, top: c.pageY, width: 0, height: 0 });
      if (d.autoRefresh) {
        this.refresh();
      }
      this.selectees.filter(".ui-selected").each(function () {
        var f = a.data(this, "selectable-item");
        f.startselected = true;
        if (!c.metaKey && !c.ctrlKey) {
          f.$element.removeClass("ui-selected");
          f.selected = false;
          f.$element.addClass("ui-unselecting");
          f.unselecting = true;
          e._trigger("unselecting", c, { unselecting: f.element });
        }
      });
      a(c.target)
        .parents()
        .addBack()
        .each(function () {
          var f,
            g = a.data(this, "selectable-item");
          if (g) {
            f =
              (!c.metaKey && !c.ctrlKey) || !g.$element.hasClass("ui-selected");
            g.$element
              .removeClass(f ? "ui-unselecting" : "ui-selected")
              .addClass(f ? "ui-selecting" : "ui-unselecting");
            g.unselecting = !f;
            g.selecting = f;
            g.selected = f;
            if (f) {
              e._trigger("selecting", c, { selecting: g.element });
            } else {
              e._trigger("unselecting", c, { unselecting: g.element });
            }
            return false;
          }
        });
    },
    _mouseDrag: function (c) {
      this.dragged = true;
      if (this.options.disabled) {
        return;
      }
      var f,
        e = this,
        d = this.options,
        g = this.opos[0],
        j = this.opos[1],
        h = c.pageX,
        k = c.pageY;
      if (g > h) {
        f = h;
        h = g;
        g = f;
      }
      if (j > k) {
        f = k;
        k = j;
        j = f;
      }
      this.helper.css({ left: g, top: j, width: h - g, height: k - j });
      this.selectees.each(function () {
        var m = a.data(this, "selectable-item"),
          l = false;
        if (!m || m.element === e.element[0]) {
          return;
        }
        if (d.tolerance === "touch") {
          l = !(m.left > h || m.right < g || m.top > k || m.bottom < j);
        } else {
          if (d.tolerance === "fit") {
            l = m.left > g && m.right < h && m.top > j && m.bottom < k;
          }
        }
        if (l) {
          if (m.selected) {
            m.$element.removeClass("ui-selected");
            m.selected = false;
          }
          if (m.unselecting) {
            m.$element.removeClass("ui-unselecting");
            m.unselecting = false;
          }
          if (!m.selecting) {
            m.$element.addClass("ui-selecting");
            m.selecting = true;
            e._trigger("selecting", c, { selecting: m.element });
          }
        } else {
          if (m.selecting) {
            if ((c.metaKey || c.ctrlKey) && m.startselected) {
              m.$element.removeClass("ui-selecting");
              m.selecting = false;
              m.$element.addClass("ui-selected");
              m.selected = true;
            } else {
              m.$element.removeClass("ui-selecting");
              m.selecting = false;
              if (m.startselected) {
                m.$element.addClass("ui-unselecting");
                m.unselecting = true;
              }
              e._trigger("unselecting", c, { unselecting: m.element });
            }
          }
          if (m.selected) {
            if (!c.metaKey && !c.ctrlKey && !m.startselected) {
              m.$element.removeClass("ui-selected");
              m.selected = false;
              m.$element.addClass("ui-unselecting");
              m.unselecting = true;
              e._trigger("unselecting", c, { unselecting: m.element });
            }
          }
        }
      });
      return false;
    },
    _mouseStop: function (c) {
      var d = this;
      this.dragged = false;
      a(".ui-unselecting", this.element[0]).each(function () {
        var e = a.data(this, "selectable-item");
        e.$element.removeClass("ui-unselecting");
        e.unselecting = false;
        e.startselected = false;
        d._trigger("unselected", c, { unselected: e.element });
      });
      a(".ui-selecting", this.element[0]).each(function () {
        var e = a.data(this, "selectable-item");
        e.$element.removeClass("ui-selecting").addClass("ui-selected");
        e.selecting = false;
        e.selected = true;
        e.startselected = true;
        d._trigger("selected", c, { selected: e.element });
      });
      this._trigger("stop", c);
      this.helper.remove();
      return false;
    },
  });
})(jQuery);
(function (a, d) {
  function c(g, e, f) {
    return g > e && g < e + f;
  }
  function b(e) {
    return (
      /left|right/.test(e.css("float")) ||
      /inline|table-cell/.test(e.css("display"))
    );
  }
  a.widget("ui.sortable", a.ui.mouse, {
    version: "1.10.4",
    widgetEventPrefix: "sort",
    ready: false,
    options: {
      appendTo: "parent",
      axis: false,
      connectWith: false,
      containment: false,
      cursor: "auto",
      cursorAt: false,
      dropOnEmpty: true,
      forcePlaceholderSize: false,
      forceHelperSize: false,
      grid: false,
      handle: false,
      helper: "original",
      items: "> *",
      opacity: false,
      placeholder: false,
      revert: false,
      scroll: true,
      scrollSensitivity: 20,
      scrollSpeed: 20,
      scope: "default",
      tolerance: "intersect",
      zIndex: 1000,
      activate: null,
      beforeStop: null,
      change: null,
      deactivate: null,
      out: null,
      over: null,
      receive: null,
      remove: null,
      sort: null,
      start: null,
      stop: null,
      update: null,
    },
    _create: function () {
      var e = this.options;
      this.containerCache = {};
      this.element.addClass("ui-sortable");
      this.refresh();
      this.floating = this.items.length
        ? e.axis === "x" || b(this.items[0].item)
        : false;
      this.offset = this.element.offset();
      this._mouseInit();
      this.ready = true;
    },
    _destroy: function () {
      this.element.removeClass("ui-sortable ui-sortable-disabled");
      this._mouseDestroy();
      for (var e = this.items.length - 1; e >= 0; e--) {
        this.items[e].item.removeData(this.widgetName + "-item");
      }
      return this;
    },
    _setOption: function (e, f) {
      if (e === "disabled") {
        this.options[e] = f;
        this.widget().toggleClass("ui-sortable-disabled", !!f);
      } else {
        a.Widget.prototype._setOption.apply(this, arguments);
      }
    },
    _mouseCapture: function (f, g) {
      var e = null,
        j = false,
        h = this;
      if (this.reverting) {
        return false;
      }
      if (this.options.disabled || this.options.type === "static") {
        return false;
      }
      this._refreshItems(f);
      a(f.target)
        .parents()
        .each(function () {
          if (a.data(this, h.widgetName + "-item") === h) {
            e = a(this);
            return false;
          }
        });
      if (a.data(f.target, h.widgetName + "-item") === h) {
        e = a(f.target);
      }
      if (!e) {
        return false;
      }
      if (this.options.handle && !g) {
        a(this.options.handle, e)
          .find("*")
          .addBack()
          .each(function () {
            if (this === f.target) {
              j = true;
            }
          });
        if (!j) {
          return false;
        }
      }
      this.currentItem = e;
      this._removeCurrentsFromItems();
      return true;
    },
    _mouseStart: function (f, k, h) {
      var g,
        e,
        j = this.options;
      this.currentContainer = this;
      this.refreshPositions();
      this.helper = this._createHelper(f);
      this._cacheHelperProportions();
      this._cacheMargins();
      this.scrollParent = this.helper.scrollParent();
      this.offset = this.currentItem.offset();
      this.offset = {
        top: this.offset.top - this.margins.top,
        left: this.offset.left - this.margins.left,
      };
      a.extend(this.offset, {
        click: {
          left: f.pageX - this.offset.left,
          top: f.pageY - this.offset.top,
        },
        parent: this._getParentOffset(),
        relative: this._getRelativeOffset(),
      });
      this.helper.css("position", "absolute");
      this.cssPosition = this.helper.css("position");
      this.originalPosition = this._generatePosition(f);
      this.originalPageX = f.pageX;
      this.originalPageY = f.pageY;
      j.cursorAt && this._adjustOffsetFromHelper(j.cursorAt);
      this.domPosition = {
        prev: this.currentItem.prev()[0],
        parent: this.currentItem.parent()[0],
      };
      if (this.helper[0] !== this.currentItem[0]) {
        this.currentItem.hide();
      }
      this._createPlaceholder();
      if (j.containment) {
        this._setContainment();
      }
      if (j.cursor && j.cursor !== "auto") {
        e = this.document.find("body");
        this.storedCursor = e.css("cursor");
        e.css("cursor", j.cursor);
        this.storedStylesheet = a(
          "<style>*{ cursor: " + j.cursor + " !important; }</style>"
        ).appendTo(e);
      }
      if (j.opacity) {
        if (this.helper.css("opacity")) {
          this._storedOpacity = this.helper.css("opacity");
        }
        this.helper.css("opacity", j.opacity);
      }
      if (j.zIndex) {
        if (this.helper.css("zIndex")) {
          this._storedZIndex = this.helper.css("zIndex");
        }
        this.helper.css("zIndex", j.zIndex);
      }
      if (
        this.scrollParent[0] !== document &&
        this.scrollParent[0].tagName !== "HTML"
      ) {
        this.overflowOffset = this.scrollParent.offset();
      }
      this._trigger("start", f, this._uiHash());
      if (!this._preserveHelperProportions) {
        this._cacheHelperProportions();
      }
      if (!h) {
        for (g = this.containers.length - 1; g >= 0; g--) {
          this.containers[g]._trigger("activate", f, this._uiHash(this));
        }
      }
      if (a.ui.ddmanager) {
        a.ui.ddmanager.current = this;
      }
      if (a.ui.ddmanager && !j.dropBehaviour) {
        a.ui.ddmanager.prepareOffsets(this, f);
      }
      this.dragging = true;
      this.helper.addClass("ui-sortable-helper");
      this._mouseDrag(f);
      return true;
    },
    _mouseDrag: function (e) {
      var f,
        h,
        j,
        g,
        k = this.options,
        l = false;
      this.position = this._generatePosition(e);
      this.positionAbs = this._convertPositionTo("absolute");
      if (!this.lastPositionAbs) {
        this.lastPositionAbs = this.positionAbs;
      }
      if (this.options.scroll) {
        if (
          this.scrollParent[0] !== document &&
          this.scrollParent[0].tagName !== "HTML"
        ) {
          if (
            this.overflowOffset.top +
              this.scrollParent[0].offsetHeight -
              e.pageY <
            k.scrollSensitivity
          ) {
            this.scrollParent[0].scrollTop = l =
              this.scrollParent[0].scrollTop + k.scrollSpeed;
          } else {
            if (e.pageY - this.overflowOffset.top < k.scrollSensitivity) {
              this.scrollParent[0].scrollTop = l =
                this.scrollParent[0].scrollTop - k.scrollSpeed;
            }
          }
          if (
            this.overflowOffset.left +
              this.scrollParent[0].offsetWidth -
              e.pageX <
            k.scrollSensitivity
          ) {
            this.scrollParent[0].scrollLeft = l =
              this.scrollParent[0].scrollLeft + k.scrollSpeed;
          } else {
            if (e.pageX - this.overflowOffset.left < k.scrollSensitivity) {
              this.scrollParent[0].scrollLeft = l =
                this.scrollParent[0].scrollLeft - k.scrollSpeed;
            }
          }
        } else {
          if (e.pageY - a(document).scrollTop() < k.scrollSensitivity) {
            l = a(document).scrollTop(a(document).scrollTop() - k.scrollSpeed);
          } else {
            if (
              a(window).height() - (e.pageY - a(document).scrollTop()) <
              k.scrollSensitivity
            ) {
              l = a(document).scrollTop(
                a(document).scrollTop() + k.scrollSpeed
              );
            }
          }
          if (e.pageX - a(document).scrollLeft() < k.scrollSensitivity) {
            l = a(document).scrollLeft(
              a(document).scrollLeft() - k.scrollSpeed
            );
          } else {
            if (
              a(window).width() - (e.pageX - a(document).scrollLeft()) <
              k.scrollSensitivity
            ) {
              l = a(document).scrollLeft(
                a(document).scrollLeft() + k.scrollSpeed
              );
            }
          }
        }
        if (l !== false && a.ui.ddmanager && !k.dropBehaviour) {
          a.ui.ddmanager.prepareOffsets(this, e);
        }
      }
      this.positionAbs = this._convertPositionTo("absolute");
      if (!this.options.axis || this.options.axis !== "y") {
        this.helper[0].style.left = this.position.left + "px";
      }
      if (!this.options.axis || this.options.axis !== "x") {
        this.helper[0].style.top = this.position.top + "px";
      }
      for (f = this.items.length - 1; f >= 0; f--) {
        h = this.items[f];
        j = h.item[0];
        g = this._intersectsWithPointer(h);
        if (!g) {
          continue;
        }
        if (h.instance !== this.currentContainer) {
          continue;
        }
        if (
          j !== this.currentItem[0] &&
          this.placeholder[g === 1 ? "next" : "prev"]()[0] !== j &&
          !a.contains(this.placeholder[0], j) &&
          (this.options.type === "semi-dynamic"
            ? !a.contains(this.element[0], j)
            : true)
        ) {
          this.direction = g === 1 ? "down" : "up";
          if (
            this.options.tolerance === "pointer" ||
            this._intersectsWithSides(h)
          ) {
            this._rearrange(e, h);
          } else {
            break;
          }
          this._trigger("change", e, this._uiHash());
          break;
        }
      }
      this._contactContainers(e);
      if (a.ui.ddmanager) {
        a.ui.ddmanager.drag(this, e);
      }
      this._trigger("sort", e, this._uiHash());
      this.lastPositionAbs = this.positionAbs;
      return false;
    },
    _mouseStop: function (h, j) {
      if (!h) {
        return;
      }
      if (a.ui.ddmanager && !this.options.dropBehaviour) {
        a.ui.ddmanager.drop(this, h);
      }
      if (this.options.revert) {
        var k = this,
          g = this.placeholder.offset(),
          f = this.options.axis,
          e = {};
        if (!f || f === "x") {
          e.left =
            g.left -
            this.offset.parent.left -
            this.margins.left +
            (this.offsetParent[0] === document.body
              ? 0
              : this.offsetParent[0].scrollLeft);
        }
        if (!f || f === "y") {
          e.top =
            g.top -
            this.offset.parent.top -
            this.margins.top +
            (this.offsetParent[0] === document.body
              ? 0
              : this.offsetParent[0].scrollTop);
        }
        this.reverting = true;
        a(this.helper).animate(
          e,
          parseInt(this.options.revert, 10) || 500,
          function () {
            k._clear(h);
          }
        );
      } else {
        this._clear(h, j);
      }
      return false;
    },
    cancel: function () {
      if (this.dragging) {
        this._mouseUp({ target: null });
        if (this.options.helper === "original") {
          this.currentItem
            .css(this._storedCSS)
            .removeClass("ui-sortable-helper");
        } else {
          this.currentItem.show();
        }
        for (var e = this.containers.length - 1; e >= 0; e--) {
          this.containers[e]._trigger("deactivate", null, this._uiHash(this));
          if (this.containers[e].containerCache.over) {
            this.containers[e]._trigger("out", null, this._uiHash(this));
            this.containers[e].containerCache.over = 0;
          }
        }
      }
      if (this.placeholder) {
        if (this.placeholder[0].parentNode) {
          this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
        }
        if (
          this.options.helper !== "original" &&
          this.helper &&
          this.helper[0].parentNode
        ) {
          this.helper.remove();
        }
        a.extend(this, {
          helper: null,
          dragging: false,
          reverting: false,
          _noFinalSort: null,
        });
        if (this.domPosition.prev) {
          a(this.domPosition.prev).after(this.currentItem);
        } else {
          a(this.domPosition.parent).prepend(this.currentItem);
        }
      }
      return this;
    },
    serialize: function (f) {
      var e = this._getItemsAsjQuery(f && f.connected),
        g = [];
      f = f || {};
      a(e).each(function () {
        var h = (a(f.item || this).attr(f.attribute || "id") || "").match(
          f.expression || /(.+)[\-=_](.+)/
        );
        if (h) {
          g.push(
            (f.key || h[1] + "[]") + "=" + (f.key && f.expression ? h[1] : h[2])
          );
        }
      });
      if (!g.length && f.key) {
        g.push(f.key + "=");
      }
      return g.join("&");
    },
    toArray: function (f) {
      var e = this._getItemsAsjQuery(f && f.connected),
        g = [];
      f = f || {};
      e.each(function () {
        g.push(a(f.item || this).attr(f.attribute || "id") || "");
      });
      return g;
    },
    _intersectsWith: function (m) {
      var q = this.positionAbs.left,
        s = q + this.helperProportions.width,
        u = this.positionAbs.top,
        v = u + this.helperProportions.height,
        n = m.left,
        o = n + m.width,
        p = m.top,
        e = p + m.height,
        g = this.offset.click.top,
        f = this.offset.click.left,
        j = this.options.axis === "x" || (u + g > p && u + g < e),
        k = this.options.axis === "y" || (q + f > n && q + f < o),
        h = j && k;
      if (
        this.options.tolerance === "pointer" ||
        this.options.forcePointerForContainers ||
        (this.options.tolerance !== "pointer" &&
          this.helperProportions[this.floating ? "width" : "height"] >
            m[this.floating ? "width" : "height"])
      ) {
        return h;
      } else {
        return (
          n < q + this.helperProportions.width / 2 &&
          s - this.helperProportions.width / 2 < o &&
          p < u + this.helperProportions.height / 2 &&
          v - this.helperProportions.height / 2 < e
        );
      }
    },
    _intersectsWithPointer: function (j) {
      var g =
          this.options.axis === "x" ||
          c(this.positionAbs.top + this.offset.click.top, j.top, j.height),
        h =
          this.options.axis === "y" ||
          c(this.positionAbs.left + this.offset.click.left, j.left, j.width),
        f = g && h,
        k = this._getDragVerticalDirection(),
        e = this._getDragHorizontalDirection();
      if (!f) {
        return false;
      }
      return this.floating
        ? (e && e === "right") || k === "down"
          ? 2
          : 1
        : k && (k === "down" ? 2 : 1);
    },
    _intersectsWithSides: function (h) {
      var f = c(
          this.positionAbs.top + this.offset.click.top,
          h.top + h.height / 2,
          h.height
        ),
        g = c(
          this.positionAbs.left + this.offset.click.left,
          h.left + h.width / 2,
          h.width
        ),
        j = this._getDragVerticalDirection(),
        e = this._getDragHorizontalDirection();
      if (this.floating && e) {
        return (e === "right" && g) || (e === "left" && !g);
      } else {
        return j && ((j === "down" && f) || (j === "up" && !f));
      }
    },
    _getDragVerticalDirection: function () {
      var e = this.positionAbs.top - this.lastPositionAbs.top;
      return e !== 0 && (e > 0 ? "down" : "up");
    },
    _getDragHorizontalDirection: function () {
      var e = this.positionAbs.left - this.lastPositionAbs.left;
      return e !== 0 && (e > 0 ? "right" : "left");
    },
    refresh: function (e) {
      this._refreshItems(e);
      this.refreshPositions();
      return this;
    },
    _connectWith: function () {
      var e = this.options;
      return e.connectWith.constructor === String
        ? [e.connectWith]
        : e.connectWith;
    },
    _getItemsAsjQuery: function (f) {
      var k,
        n,
        h,
        l,
        m = [],
        o = [],
        g = this._connectWith();
      if (g && f) {
        for (k = g.length - 1; k >= 0; k--) {
          h = a(g[k]);
          for (n = h.length - 1; n >= 0; n--) {
            l = a.data(h[n], this.widgetFullName);
            if (l && l !== this && !l.options.disabled) {
              o.push([
                a.isFunction(l.options.items)
                  ? l.options.items.call(l.element)
                  : a(l.options.items, l.element)
                      .not(".ui-sortable-helper")
                      .not(".ui-sortable-placeholder"),
                l,
              ]);
            }
          }
        }
      }
      o.push([
        a.isFunction(this.options.items)
          ? this.options.items.call(this.element, null, {
              options: this.options,
              item: this.currentItem,
            })
          : a(this.options.items, this.element)
              .not(".ui-sortable-helper")
              .not(".ui-sortable-placeholder"),
        this,
      ]);
      function e() {
        m.push(this);
      }
      for (k = o.length - 1; k >= 0; k--) {
        o[k][0].each(e);
      }
      return a(m);
    },
    _removeCurrentsFromItems: function () {
      var e = this.currentItem.find(":data(" + this.widgetName + "-item)");
      this.items = a.grep(this.items, function (f) {
        for (var g = 0; g < e.length; g++) {
          if (e[g] === f.item[0]) {
            return false;
          }
        }
        return true;
      });
    },
    _refreshItems: function (h) {
      this.items = [];
      this.containers = [this];
      var k,
        o,
        g,
        l,
        r,
        e,
        m,
        q,
        n = this.items,
        p = [
          [
            a.isFunction(this.options.items)
              ? this.options.items.call(this.element[0], h, {
                  item: this.currentItem,
                })
              : a(this.options.items, this.element),
            this,
          ],
        ],
        f = this._connectWith();
      if (f && this.ready) {
        for (k = f.length - 1; k >= 0; k--) {
          g = a(f[k]);
          for (o = g.length - 1; o >= 0; o--) {
            l = a.data(g[o], this.widgetFullName);
            if (l && l !== this && !l.options.disabled) {
              p.push([
                a.isFunction(l.options.items)
                  ? l.options.items.call(l.element[0], h, {
                      item: this.currentItem,
                    })
                  : a(l.options.items, l.element),
                l,
              ]);
              this.containers.push(l);
            }
          }
        }
      }
      for (k = p.length - 1; k >= 0; k--) {
        r = p[k][1];
        e = p[k][0];
        for (o = 0, q = e.length; o < q; o++) {
          m = a(e[o]);
          m.data(this.widgetName + "-item", r);
          n.push({
            item: m,
            instance: r,
            width: 0,
            height: 0,
            left: 0,
            top: 0,
          });
        }
      }
    },
    refreshPositions: function (e) {
      if (this.offsetParent && this.helper) {
        this.offset.parent = this._getParentOffset();
      }
      var f, g, j, h;
      for (f = this.items.length - 1; f >= 0; f--) {
        g = this.items[f];
        if (
          g.instance !== this.currentContainer &&
          this.currentContainer &&
          g.item[0] !== this.currentItem[0]
        ) {
          continue;
        }
        j = this.options.toleranceElement
          ? a(this.options.toleranceElement, g.item)
          : g.item;
        if (!e) {
          g.width = j.outerWidth();
          g.height = j.outerHeight();
        }
        h = j.offset();
        g.left = h.left;
        g.top = h.top;
      }
      if (this.options.custom && this.options.custom.refreshContainers) {
        this.options.custom.refreshContainers.call(this);
      } else {
        for (f = this.containers.length - 1; f >= 0; f--) {
          h = this.containers[f].element.offset();
          this.containers[f].containerCache.left = h.left;
          this.containers[f].containerCache.top = h.top;
          this.containers[f].containerCache.width = this.containers[
            f
          ].element.outerWidth();
          this.containers[f].containerCache.height = this.containers[
            f
          ].element.outerHeight();
        }
      }
      return this;
    },
    _createPlaceholder: function (g) {
      g = g || this;
      var e,
        f = g.options;
      if (!f.placeholder || f.placeholder.constructor === String) {
        e = f.placeholder;
        f.placeholder = {
          element: function () {
            var j = g.currentItem[0].nodeName.toLowerCase(),
              h = a("<" + j + ">", g.document[0])
                .addClass(
                  e || g.currentItem[0].className + " ui-sortable-placeholder"
                )
                .removeClass("ui-sortable-helper");
            if (j === "tr") {
              g.currentItem.children().each(function () {
                a("<td>&#160;</td>", g.document[0])
                  .attr("colspan", a(this).attr("colspan") || 1)
                  .appendTo(h);
              });
            } else {
              if (j === "img") {
                h.attr("src", g.currentItem.attr("src"));
              }
            }
            if (!e) {
              h.css("visibility", "hidden");
            }
            return h;
          },
          update: function (h, j) {
            if (e && !f.forcePlaceholderSize) {
              return;
            }
            if (!j.height()) {
              j.height(
                g.currentItem.innerHeight() -
                  parseInt(g.currentItem.css("paddingTop") || 0, 10) -
                  parseInt(g.currentItem.css("paddingBottom") || 0, 10)
              );
            }
            if (!j.width()) {
              j.width(
                g.currentItem.innerWidth() -
                  parseInt(g.currentItem.css("paddingLeft") || 0, 10) -
                  parseInt(g.currentItem.css("paddingRight") || 0, 10)
              );
            }
          },
        };
      }
      g.placeholder = a(f.placeholder.element.call(g.element, g.currentItem));
      g.currentItem.after(g.placeholder);
      f.placeholder.update(g, g.placeholder);
    },
    _contactContainers: function (h) {
      var l,
        p,
        g,
        o,
        r,
        s,
        e,
        f,
        q,
        k,
        m = null,
        n = null;
      for (l = this.containers.length - 1; l >= 0; l--) {
        if (a.contains(this.currentItem[0], this.containers[l].element[0])) {
          continue;
        }
        if (this._intersectsWith(this.containers[l].containerCache)) {
          if (m && a.contains(this.containers[l].element[0], m.element[0])) {
            continue;
          }
          m = this.containers[l];
          n = l;
        } else {
          if (this.containers[l].containerCache.over) {
            this.containers[l]._trigger("out", h, this._uiHash(this));
            this.containers[l].containerCache.over = 0;
          }
        }
      }
      if (!m) {
        return;
      }
      if (this.containers.length === 1) {
        if (!this.containers[n].containerCache.over) {
          this.containers[n]._trigger("over", h, this._uiHash(this));
          this.containers[n].containerCache.over = 1;
        }
      } else {
        g = 10000;
        o = null;
        k = m.floating || b(this.currentItem);
        r = k ? "left" : "top";
        s = k ? "width" : "height";
        e = this.positionAbs[r] + this.offset.click[r];
        for (p = this.items.length - 1; p >= 0; p--) {
          if (
            !a.contains(this.containers[n].element[0], this.items[p].item[0])
          ) {
            continue;
          }
          if (this.items[p].item[0] === this.currentItem[0]) {
            continue;
          }
          if (
            k &&
            !c(
              this.positionAbs.top + this.offset.click.top,
              this.items[p].top,
              this.items[p].height
            )
          ) {
            continue;
          }
          f = this.items[p].item.offset()[r];
          q = false;
          if (Math.abs(f - e) > Math.abs(f + this.items[p][s] - e)) {
            q = true;
            f += this.items[p][s];
          }
          if (Math.abs(f - e) < g) {
            g = Math.abs(f - e);
            o = this.items[p];
            this.direction = q ? "up" : "down";
          }
        }
        if (!o && !this.options.dropOnEmpty) {
          return;
        }
        if (this.currentContainer === this.containers[n]) {
          return;
        }
        o
          ? this._rearrange(h, o, null, true)
          : this._rearrange(h, null, this.containers[n].element, true);
        this._trigger("change", h, this._uiHash());
        this.containers[n]._trigger("change", h, this._uiHash(this));
        this.currentContainer = this.containers[n];
        this.options.placeholder.update(
          this.currentContainer,
          this.placeholder
        );
        this.containers[n]._trigger("over", h, this._uiHash(this));
        this.containers[n].containerCache.over = 1;
      }
    },
    _createHelper: function (e) {
      var g = this.options,
        f = a.isFunction(g.helper)
          ? a(g.helper.apply(this.element[0], [e, this.currentItem]))
          : g.helper === "clone"
          ? this.currentItem.clone()
          : this.currentItem;
      if (!f.parents("body").length) {
        a(
          g.appendTo !== "parent" ? g.appendTo : this.currentItem[0].parentNode
        )[0].appendChild(f[0]);
      }
      if (f[0] === this.currentItem[0]) {
        this._storedCSS = {
          width: this.currentItem[0].style.width,
          height: this.currentItem[0].style.height,
          position: this.currentItem.css("position"),
          top: this.currentItem.css("top"),
          left: this.currentItem.css("left"),
        };
      }
      if (!f[0].style.width || g.forceHelperSize) {
        f.width(this.currentItem.width());
      }
      if (!f[0].style.height || g.forceHelperSize) {
        f.height(this.currentItem.height());
      }
      return f;
    },
    _adjustOffsetFromHelper: function (e) {
      if (typeof e === "string") {
        e = e.split(" ");
      }
      if (a.isArray(e)) {
        e = { left: +e[0], top: +e[1] || 0 };
      }
      if ("left" in e) {
        this.offset.click.left = e.left + this.margins.left;
      }
      if ("right" in e) {
        this.offset.click.left =
          this.helperProportions.width - e.right + this.margins.left;
      }
      if ("top" in e) {
        this.offset.click.top = e.top + this.margins.top;
      }
      if ("bottom" in e) {
        this.offset.click.top =
          this.helperProportions.height - e.bottom + this.margins.top;
      }
    },
    _getParentOffset: function () {
      this.offsetParent = this.helper.offsetParent();
      var e = this.offsetParent.offset();
      if (
        this.cssPosition === "absolute" &&
        this.scrollParent[0] !== document &&
        a.contains(this.scrollParent[0], this.offsetParent[0])
      ) {
        e.left += this.scrollParent.scrollLeft();
        e.top += this.scrollParent.scrollTop();
      }
      if (
        this.offsetParent[0] === document.body ||
        (this.offsetParent[0].tagName &&
          this.offsetParent[0].tagName.toLowerCase() === "html" &&
          a.ui.ie)
      ) {
        e = { top: 0, left: 0 };
      }
      return {
        top:
          e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
        left:
          e.left +
          (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0),
      };
    },
    _getRelativeOffset: function () {
      if (this.cssPosition === "relative") {
        var e = this.currentItem.position();
        return {
          top:
            e.top -
            (parseInt(this.helper.css("top"), 10) || 0) +
            this.scrollParent.scrollTop(),
          left:
            e.left -
            (parseInt(this.helper.css("left"), 10) || 0) +
            this.scrollParent.scrollLeft(),
        };
      } else {
        return { top: 0, left: 0 };
      }
    },
    _cacheMargins: function () {
      this.margins = {
        left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
        top: parseInt(this.currentItem.css("marginTop"), 10) || 0,
      };
    },
    _cacheHelperProportions: function () {
      this.helperProportions = {
        width: this.helper.outerWidth(),
        height: this.helper.outerHeight(),
      };
    },
    _setContainment: function () {
      var e,
        f,
        h,
        g = this.options;
      if (g.containment === "parent") {
        g.containment = this.helper[0].parentNode;
      }
      if (g.containment === "document" || g.containment === "window") {
        this.containment = [
          0 - this.offset.relative.left - this.offset.parent.left,
          0 - this.offset.relative.top - this.offset.parent.top,
          a(g.containment === "document" ? document : window).width() -
            this.helperProportions.width -
            this.margins.left,
          (a(g.containment === "document" ? document : window).height() ||
            document.body.parentNode.scrollHeight) -
            this.helperProportions.height -
            this.margins.top,
        ];
      }
      if (!/^(document|window|parent)$/.test(g.containment)) {
        e = a(g.containment)[0];
        f = a(g.containment).offset();
        h = a(e).css("overflow") !== "hidden";
        this.containment = [
          f.left +
            (parseInt(a(e).css("borderLeftWidth"), 10) || 0) +
            (parseInt(a(e).css("paddingLeft"), 10) || 0) -
            this.margins.left,
          f.top +
            (parseInt(a(e).css("borderTopWidth"), 10) || 0) +
            (parseInt(a(e).css("paddingTop"), 10) || 0) -
            this.margins.top,
          f.left +
            (h ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) -
            (parseInt(a(e).css("borderLeftWidth"), 10) || 0) -
            (parseInt(a(e).css("paddingRight"), 10) || 0) -
            this.helperProportions.width -
            this.margins.left,
          f.top +
            (h ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) -
            (parseInt(a(e).css("borderTopWidth"), 10) || 0) -
            (parseInt(a(e).css("paddingBottom"), 10) || 0) -
            this.helperProportions.height -
            this.margins.top,
        ];
      }
    },
    _convertPositionTo: function (e, g) {
      if (!g) {
        g = this.position;
      }
      var f = e === "absolute" ? 1 : -1,
        h =
          this.cssPosition === "absolute" &&
          !(
            this.scrollParent[0] !== document &&
            a.contains(this.scrollParent[0], this.offsetParent[0])
          )
            ? this.offsetParent
            : this.scrollParent,
        j = /(html|body)/i.test(h[0].tagName);
      return {
        top:
          g.top +
          this.offset.relative.top * f +
          this.offset.parent.top * f -
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollTop()
            : j
            ? 0
            : h.scrollTop()) *
            f,
        left:
          g.left +
          this.offset.relative.left * f +
          this.offset.parent.left * f -
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollLeft()
            : j
            ? 0
            : h.scrollLeft()) *
            f,
      };
    },
    _generatePosition: function (e) {
      var m,
        f,
        g = this.options,
        h = e.pageX,
        j = e.pageY,
        k =
          this.cssPosition === "absolute" &&
          !(
            this.scrollParent[0] !== document &&
            a.contains(this.scrollParent[0], this.offsetParent[0])
          )
            ? this.offsetParent
            : this.scrollParent,
        l = /(html|body)/i.test(k[0].tagName);
      if (
        this.cssPosition === "relative" &&
        !(
          this.scrollParent[0] !== document &&
          this.scrollParent[0] !== this.offsetParent[0]
        )
      ) {
        this.offset.relative = this._getRelativeOffset();
      }
      if (this.originalPosition) {
        if (this.containment) {
          if (e.pageX - this.offset.click.left < this.containment[0]) {
            h = this.containment[0] + this.offset.click.left;
          }
          if (e.pageY - this.offset.click.top < this.containment[1]) {
            j = this.containment[1] + this.offset.click.top;
          }
          if (e.pageX - this.offset.click.left > this.containment[2]) {
            h = this.containment[2] + this.offset.click.left;
          }
          if (e.pageY - this.offset.click.top > this.containment[3]) {
            j = this.containment[3] + this.offset.click.top;
          }
        }
        if (g.grid) {
          m =
            this.originalPageY +
            Math.round((j - this.originalPageY) / g.grid[1]) * g.grid[1];
          j = this.containment
            ? m - this.offset.click.top >= this.containment[1] &&
              m - this.offset.click.top <= this.containment[3]
              ? m
              : m - this.offset.click.top >= this.containment[1]
              ? m - g.grid[1]
              : m + g.grid[1]
            : m;
          f =
            this.originalPageX +
            Math.round((h - this.originalPageX) / g.grid[0]) * g.grid[0];
          h = this.containment
            ? f - this.offset.click.left >= this.containment[0] &&
              f - this.offset.click.left <= this.containment[2]
              ? f
              : f - this.offset.click.left >= this.containment[0]
              ? f - g.grid[0]
              : f + g.grid[0]
            : f;
        }
      }
      return {
        top:
          j -
          this.offset.click.top -
          this.offset.relative.top -
          this.offset.parent.top +
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollTop()
            : l
            ? 0
            : k.scrollTop()),
        left:
          h -
          this.offset.click.left -
          this.offset.relative.left -
          this.offset.parent.left +
          (this.cssPosition === "fixed"
            ? -this.scrollParent.scrollLeft()
            : l
            ? 0
            : k.scrollLeft()),
      };
    },
    _rearrange: function (g, j, e, h) {
      e
        ? e[0].appendChild(this.placeholder[0])
        : j.item[0].parentNode.insertBefore(
            this.placeholder[0],
            this.direction === "down" ? j.item[0] : j.item[0].nextSibling
          );
      this.counter = this.counter ? ++this.counter : 1;
      var f = this.counter;
      this._delay(function () {
        if (f === this.counter) {
          this.refreshPositions(!h);
        }
      });
    },
    _clear: function (g, j) {
      this.reverting = false;
      var h,
        e = [];
      if (!this._noFinalSort && this.currentItem.parent().length) {
        this.placeholder.before(this.currentItem);
      }
      this._noFinalSort = null;
      if (this.helper[0] === this.currentItem[0]) {
        for (h in this._storedCSS) {
          if (
            this._storedCSS[h] === "auto" ||
            this._storedCSS[h] === "static"
          ) {
            this._storedCSS[h] = "";
          }
        }
        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
      } else {
        this.currentItem.show();
      }
      if (this.fromOutside && !j) {
        e.push(function (k) {
          this._trigger("receive", k, this._uiHash(this.fromOutside));
        });
      }
      if (
        (this.fromOutside ||
          this.domPosition.prev !==
            this.currentItem.prev().not(".ui-sortable-helper")[0] ||
          this.domPosition.parent !== this.currentItem.parent()[0]) &&
        !j
      ) {
        e.push(function (k) {
          this._trigger("update", k, this._uiHash());
        });
      }
      if (this !== this.currentContainer) {
        if (!j) {
          e.push(function (k) {
            this._trigger("remove", k, this._uiHash());
          });
          e.push(
            function (k) {
              return function (l) {
                k._trigger("receive", l, this._uiHash(this));
              };
            }.call(this, this.currentContainer)
          );
          e.push(
            function (k) {
              return function (l) {
                k._trigger("update", l, this._uiHash(this));
              };
            }.call(this, this.currentContainer)
          );
        }
      }
      function f(m, l, k) {
        return function (n) {
          k._trigger(m, n, l._uiHash(l));
        };
      }
      for (h = this.containers.length - 1; h >= 0; h--) {
        if (!j) {
          e.push(f("deactivate", this, this.containers[h]));
        }
        if (this.containers[h].containerCache.over) {
          e.push(f("out", this, this.containers[h]));
          this.containers[h].containerCache.over = 0;
        }
      }
      if (this.storedCursor) {
        this.document.find("body").css("cursor", this.storedCursor);
        this.storedStylesheet.remove();
      }
      if (this._storedOpacity) {
        this.helper.css("opacity", this._storedOpacity);
      }
      if (this._storedZIndex) {
        this.helper.css(
          "zIndex",
          this._storedZIndex === "auto" ? "" : this._storedZIndex
        );
      }
      this.dragging = false;
      if (this.cancelHelperRemoval) {
        if (!j) {
          this._trigger("beforeStop", g, this._uiHash());
          for (h = 0; h < e.length; h++) {
            e[h].call(this, g);
          }
          this._trigger("stop", g, this._uiHash());
        }
        this.fromOutside = false;
        return false;
      }
      if (!j) {
        this._trigger("beforeStop", g, this._uiHash());
      }
      this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
      if (this.helper[0] !== this.currentItem[0]) {
        this.helper.remove();
      }
      this.helper = null;
      if (!j) {
        for (h = 0; h < e.length; h++) {
          e[h].call(this, g);
        }
        this._trigger("stop", g, this._uiHash());
      }
      this.fromOutside = false;
      return true;
    },
    _trigger: function () {
      if (a.Widget.prototype._trigger.apply(this, arguments) === false) {
        this.cancel();
      }
    },
    _uiHash: function (e) {
      var f = e || this;
      return {
        helper: f.helper,
        placeholder: f.placeholder || a([]),
        position: f.position,
        originalPosition: f.originalPosition,
        offset: f.positionAbs,
        item: f.currentItem,
        sender: e ? e.element : null,
      };
    },
  });
})(jQuery);
(function (a, e) {
  var d = 0,
    b = {},
    c = {};
  b.height = b.paddingTop = b.paddingBottom = b.borderTopWidth = b.borderBottomWidth =
    "hide";
  c.height = c.paddingTop = c.paddingBottom = c.borderTopWidth = c.borderBottomWidth =
    "show";
  a.widget("ui.accordion", {
    version: "1.10.4",
    options: {
      active: 0,
      animate: {},
      collapsible: false,
      event: "click",
      header: "> li > :first-child,> :not(li):even",
      heightStyle: "auto",
      icons: {
        activeHeader: "ui-icon-triangle-1-s",
        header: "ui-icon-triangle-1-e",
      },
      activate: null,
      beforeActivate: null,
    },
    _create: function () {
      var f = this.options;
      this.prevShow = this.prevHide = a();
      this.element
        .addClass("ui-accordion ui-widget ui-helper-reset")
        .attr("role", "tablist");
      if (!f.collapsible && (f.active === false || f.active == null)) {
        f.active = 0;
      }
      this._processPanels();
      if (f.active < 0) {
        f.active += this.headers.length;
      }
      this._refresh();
    },
    _getCreateEventData: function () {
      return {
        header: this.active,
        panel: !this.active.length ? a() : this.active.next(),
        content: !this.active.length ? a() : this.active.next(),
      };
    },
    _createIcons: function () {
      var f = this.options.icons;
      if (f) {
        a("<span>")
          .addClass("ui-accordion-header-icon ui-icon " + f.header)
          .prependTo(this.headers);
        this.active
          .children(".ui-accordion-header-icon")
          .removeClass(f.header)
          .addClass(f.activeHeader);
        this.headers.addClass("ui-accordion-icons");
      }
    },
    _destroyIcons: function () {
      this.headers
        .removeClass("ui-accordion-icons")
        .children(".ui-accordion-header-icon")
        .remove();
    },
    _destroy: function () {
      var f;
      this.element
        .removeClass("ui-accordion ui-widget ui-helper-reset")
        .removeAttr("role");
      this.headers
        .removeClass(
          "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top"
        )
        .removeAttr("role")
        .removeAttr("aria-expanded")
        .removeAttr("aria-selected")
        .removeAttr("aria-controls")
        .removeAttr("tabIndex")
        .each(function () {
          if (/^ui-accordion/.test(this.id)) {
            this.removeAttribute("id");
          }
        });
      this._destroyIcons();
      f = this.headers
        .next()
        .css("display", "")
        .removeAttr("role")
        .removeAttr("aria-hidden")
        .removeAttr("aria-labelledby")
        .removeClass(
          "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled"
        )
        .each(function () {
          if (/^ui-accordion/.test(this.id)) {
            this.removeAttribute("id");
          }
        });
      if (this.options.heightStyle !== "content") {
        f.css("height", "");
      }
    },
    _setOption: function (f, g) {
      if (f === "active") {
        this._activate(g);
        return;
      }
      if (f === "event") {
        if (this.options.event) {
          this._off(this.headers, this.options.event);
        }
        this._setupEvents(g);
      }
      this._super(f, g);
      if (f === "collapsible" && !g && this.options.active === false) {
        this._activate(0);
      }
      if (f === "icons") {
        this._destroyIcons();
        if (g) {
          this._createIcons();
        }
      }
      if (f === "disabled") {
        this.headers
          .add(this.headers.next())
          .toggleClass("ui-state-disabled", !!g);
      }
    },
    _keydown: function (g) {
      if (g.altKey || g.ctrlKey) {
        return;
      }
      var h = a.ui.keyCode,
        j = this.headers.length,
        f = this.headers.index(g.target),
        k = false;
      switch (g.keyCode) {
        case h.RIGHT:
        case h.DOWN:
          k = this.headers[(f + 1) % j];
          break;
        case h.LEFT:
        case h.UP:
          k = this.headers[(f - 1 + j) % j];
          break;
        case h.SPACE:
        case h.ENTER:
          this._eventHandler(g);
          break;
        case h.HOME:
          k = this.headers[0];
          break;
        case h.END:
          k = this.headers[j - 1];
          break;
      }
      if (k) {
        a(g.target).attr("tabIndex", -1);
        a(k).attr("tabIndex", 0);
        k.focus();
        g.preventDefault();
      }
    },
    _panelKeyDown: function (f) {
      if (f.keyCode === a.ui.keyCode.UP && f.ctrlKey) {
        a(f.currentTarget).prev().focus();
      }
    },
    refresh: function () {
      var f = this.options;
      this._processPanels();
      if (
        (f.active === false && f.collapsible === true) ||
        !this.headers.length
      ) {
        f.active = false;
        this.active = a();
      } else {
        if (f.active === false) {
          this._activate(0);
        } else {
          if (
            this.active.length &&
            !a.contains(this.element[0], this.active[0])
          ) {
            if (
              this.headers.length ===
              this.headers.find(".ui-state-disabled").length
            ) {
              f.active = false;
              this.active = a();
            } else {
              this._activate(Math.max(0, f.active - 1));
            }
          } else {
            f.active = this.headers.index(this.active);
          }
        }
      }
      this._destroyIcons();
      this._refresh();
    },
    _processPanels: function () {
      this.headers = this.element
        .find(this.options.header)
        .addClass(
          "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"
        );
      this.headers
        .next()
        .addClass(
          "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom"
        )
        .filter(":not(.ui-accordion-content-active)")
        .hide();
    },
    _refresh: function () {
      var h,
        j = this.options,
        g = j.heightStyle,
        k = this.element.parent(),
        f = (this.accordionId =
          "ui-accordion-" + (this.element.attr("id") || ++d));
      this.active = this._findActive(j.active)
        .addClass("ui-accordion-header-active ui-state-active ui-corner-top")
        .removeClass("ui-corner-all");
      this.active.next().addClass("ui-accordion-content-active").show();
      this.headers
        .attr("role", "tab")
        .each(function (n) {
          var l = a(this),
            m = l.attr("id"),
            o = l.next(),
            p = o.attr("id");
          if (!m) {
            m = f + "-header-" + n;
            l.attr("id", m);
          }
          if (!p) {
            p = f + "-panel-" + n;
            o.attr("id", p);
          }
          l.attr("aria-controls", p);
          o.attr("aria-labelledby", m);
        })
        .next()
        .attr("role", "tabpanel");
      this.headers
        .not(this.active)
        .attr({
          "aria-selected": "false",
          "aria-expanded": "false",
          tabIndex: -1,
        })
        .next()
        .attr({ "aria-hidden": "true" })
        .hide();
      if (!this.active.length) {
        this.headers.eq(0).attr("tabIndex", 0);
      } else {
        this.active
          .attr({
            "aria-selected": "true",
            "aria-expanded": "true",
            tabIndex: 0,
          })
          .next()
          .attr({ "aria-hidden": "false" });
      }
      this._createIcons();
      this._setupEvents(j.event);
      if (g === "fill") {
        h = k.height();
        this.element.siblings(":visible").each(function () {
          var l = a(this),
            m = l.css("position");
          if (m === "absolute" || m === "fixed") {
            return;
          }
          h -= l.outerHeight(true);
        });
        this.headers.each(function () {
          h -= a(this).outerHeight(true);
        });
        this.headers
          .next()
          .each(function () {
            a(this).height(
              Math.max(0, h - a(this).innerHeight() + a(this).height())
            );
          })
          .css("overflow", "auto");
      } else {
        if (g === "auto") {
          h = 0;
          this.headers
            .next()
            .each(function () {
              h = Math.max(h, a(this).css("height", "").height());
            })
            .height(h);
        }
      }
    },
    _activate: function (g) {
      var f = this._findActive(g)[0];
      if (f === this.active[0]) {
        return;
      }
      f = f || this.active[0];
      this._eventHandler({
        target: f,
        currentTarget: f,
        preventDefault: a.noop,
      });
    },
    _findActive: function (f) {
      return typeof f === "number" ? this.headers.eq(f) : a();
    },
    _setupEvents: function (f) {
      var g = { keydown: "_keydown" };
      if (f) {
        a.each(f.split(" "), function (j, h) {
          g[h] = "_eventHandler";
        });
      }
      this._off(this.headers.add(this.headers.next()));
      this._on(this.headers, g);
      this._on(this.headers.next(), { keydown: "_panelKeyDown" });
      this._hoverable(this.headers);
      this._focusable(this.headers);
    },
    _eventHandler: function (k) {
      var m = this.options,
        f = this.active,
        g = a(k.currentTarget),
        h = g[0] === f[0],
        j = h && m.collapsible,
        o = j ? a() : g.next(),
        n = f.next(),
        l = { oldHeader: f, oldPanel: n, newHeader: j ? a() : g, newPanel: o };
      k.preventDefault();
      if (
        (h && !m.collapsible) ||
        this._trigger("beforeActivate", k, l) === false
      ) {
        return;
      }
      m.active = j ? false : this.headers.index(g);
      this.active = h ? a() : g;
      this._toggle(l);
      f.removeClass("ui-accordion-header-active ui-state-active");
      if (m.icons) {
        f.children(".ui-accordion-header-icon")
          .removeClass(m.icons.activeHeader)
          .addClass(m.icons.header);
      }
      if (!h) {
        g.removeClass("ui-corner-all").addClass(
          "ui-accordion-header-active ui-state-active ui-corner-top"
        );
        if (m.icons) {
          g.children(".ui-accordion-header-icon")
            .removeClass(m.icons.header)
            .addClass(m.icons.activeHeader);
        }
        g.next().addClass("ui-accordion-content-active");
      }
    },
    _toggle: function (f) {
      var h = f.newPanel,
        g = this.prevShow.length ? this.prevShow : f.oldPanel;
      this.prevShow.add(this.prevHide).stop(true, true);
      this.prevShow = h;
      this.prevHide = g;
      if (this.options.animate) {
        this._animate(h, g, f);
      } else {
        g.hide();
        h.show();
        this._toggleComplete(f);
      }
      g.attr({ "aria-hidden": "true" });
      g.prev().attr("aria-selected", "false");
      if (h.length && g.length) {
        g.prev().attr({ tabIndex: -1, "aria-expanded": "false" });
      } else {
        if (h.length) {
          this.headers
            .filter(function () {
              return a(this).attr("tabIndex") === 0;
            })
            .attr("tabIndex", -1);
        }
      }
      h.attr("aria-hidden", "false")
        .prev()
        .attr({
          "aria-selected": "true",
          tabIndex: 0,
          "aria-expanded": "true",
        });
    },
    _animate: function (q, p, j) {
      var r,
        m,
        l,
        o = this,
        f = 0,
        k = q.length && (!p.length || q.index() < p.index()),
        g = this.options.animate || {},
        n = (k && g.down) || g,
        h = function () {
          o._toggleComplete(j);
        };
      if (typeof n === "number") {
        l = n;
      }
      if (typeof n === "string") {
        m = n;
      }
      m = m || n.easing || g.easing;
      l = l || n.duration || g.duration;
      if (!p.length) {
        return q.animate(c, l, m, h);
      }
      if (!q.length) {
        return p.animate(b, l, m, h);
      }
      r = q.show().outerHeight();
      p.animate(b, {
        duration: l,
        easing: m,
        step: function (t, s) {
          s.now = Math.round(t);
        },
      });
      q.hide().animate(c, {
        duration: l,
        easing: m,
        complete: h,
        step: function (t, s) {
          s.now = Math.round(t);
          if (s.prop !== "height") {
            f += s.now;
          } else {
            if (o.options.heightStyle !== "content") {
              s.now = Math.round(r - p.outerHeight() - f);
              f = 0;
            }
          }
        },
      });
    },
    _toggleComplete: function (f) {
      var g = f.oldPanel;
      g.removeClass("ui-accordion-content-active")
        .prev()
        .removeClass("ui-corner-top")
        .addClass("ui-corner-all");
      if (g.length) {
        g.parent()[0].className = g.parent()[0].className;
      }
      this._trigger("activate", null, f);
    },
  });
})(jQuery);
(function (a, b) {
  a.widget("ui.autocomplete", {
    version: "1.10.4",
    defaultElement: "<input>",
    options: {
      appendTo: null,
      autoFocus: false,
      delay: 300,
      minLength: 1,
      position: { my: "left top", at: "left bottom", collision: "none" },
      source: null,
      change: null,
      close: null,
      focus: null,
      open: null,
      response: null,
      search: null,
      select: null,
    },
    requestIndex: 0,
    pending: 0,
    _create: function () {
      var g,
        h,
        f,
        e = this.element[0].nodeName.toLowerCase(),
        d = e === "textarea",
        c = e === "input";
      this.isMultiLine = d
        ? true
        : c
        ? false
        : this.element.prop("isContentEditable");
      this.valueMethod = this.element[d || c ? "val" : "text"];
      this.isNewMenu = true;
      this.element
        .addClass("ui-autocomplete-input")
        .attr("autocomplete", "off");
      this._on(this.element, {
        keydown: function (j) {
          if (this.element.prop("readOnly")) {
            g = true;
            f = true;
            h = true;
            return;
          }
          g = false;
          f = false;
          h = false;
          var k = a.ui.keyCode;
          switch (j.keyCode) {
            case k.PAGE_UP:
              g = true;
              this._move("previousPage", j);
              break;
            case k.PAGE_DOWN:
              g = true;
              this._move("nextPage", j);
              break;
            case k.UP:
              g = true;
              this._keyEvent("previous", j);
              break;
            case k.DOWN:
              g = true;
              this._keyEvent("next", j);
              break;
            case k.ENTER:
            case k.NUMPAD_ENTER:
              if (this.menu.active) {
                g = true;
                j.preventDefault();
                this.menu.select(j);
              }
              break;
            case k.TAB:
              if (this.menu.active) {
                this.menu.select(j);
              }
              break;
            case k.ESCAPE:
              if (this.menu.element.is(":visible")) {
                this._value(this.term);
                this.close(j);
                j.preventDefault();
              }
              break;
            default:
              h = true;
              this._searchTimeout(j);
              break;
          }
        },
        keypress: function (j) {
          if (g) {
            g = false;
            if (!this.isMultiLine || this.menu.element.is(":visible")) {
              j.preventDefault();
            }
            return;
          }
          if (h) {
            return;
          }
          var k = a.ui.keyCode;
          switch (j.keyCode) {
            case k.PAGE_UP:
              this._move("previousPage", j);
              break;
            case k.PAGE_DOWN:
              this._move("nextPage", j);
              break;
            case k.UP:
              this._keyEvent("previous", j);
              break;
            case k.DOWN:
              this._keyEvent("next", j);
              break;
          }
        },
        input: function (j) {
          if (f) {
            f = false;
            j.preventDefault();
            return;
          }
          this._searchTimeout(j);
        },
        focus: function () {
          this.selectedItem = null;
          this.previous = this._value();
        },
        blur: function (j) {
          if (this.cancelBlur) {
            delete this.cancelBlur;
            return;
          }
          clearTimeout(this.searching);
          this.close(j);
          this._change(j);
        },
      });
      this._initSource();
      this.menu = a("<ul>")
        .addClass("ui-autocomplete ui-front")
        .appendTo(this._appendTo())
        .menu({ role: null })
        .hide()
        .data("ui-menu");
      this._on(this.menu.element, {
        mousedown: function (j) {
          j.preventDefault();
          this.cancelBlur = true;
          this._delay(function () {
            delete this.cancelBlur;
          });
          var k = this.menu.element[0];
          if (!a(j.target).closest(".ui-menu-item").length) {
            this._delay(function () {
              var l = this;
              this.document.one("mousedown", function (m) {
                if (
                  m.target !== l.element[0] &&
                  m.target !== k &&
                  !a.contains(k, m.target)
                ) {
                  l.close();
                }
              });
            });
          }
        },
        menufocus: function (j, l) {
          if (this.isNewMenu) {
            this.isNewMenu = false;
            if (j.originalEvent && /^mouse/.test(j.originalEvent.type)) {
              this.menu.blur();
              this.document.one("mousemove", function () {
                a(j.target).trigger(j.originalEvent);
              });
              return;
            }
          }
          var k = l.item.data("ui-autocomplete-item");
          if (false !== this._trigger("focus", j, { item: k })) {
            if (j.originalEvent && /^key/.test(j.originalEvent.type)) {
              this._value(k.value);
            }
          } else {
            this.liveRegion.text(k.value);
          }
        },
        menuselect: function (j, m) {
          var k = m.item.data("ui-autocomplete-item"),
            l = this.previous;
          if (this.element[0] !== this.document[0].activeElement) {
            this.element.focus();
            this.previous = l;
            this._delay(function () {
              this.previous = l;
              this.selectedItem = k;
            });
          }
          if (false !== this._trigger("select", j, { item: k })) {
            this._value(k.value);
          }
          this.term = this._value();
          this.close(j);
          this.selectedItem = k;
        },
      });
      this.liveRegion = a("<span>", { role: "status", "aria-live": "polite" })
        .addClass("ui-helper-hidden-accessible")
        .insertBefore(this.element);
      this._on(this.window, {
        beforeunload: function () {
          this.element.removeAttr("autocomplete");
        },
      });
    },
    _destroy: function () {
      clearTimeout(this.searching);
      this.element
        .removeClass("ui-autocomplete-input")
        .removeAttr("autocomplete");
      this.menu.element.remove();
      this.liveRegion.remove();
    },
    _setOption: function (c, d) {
      this._super(c, d);
      if (c === "source") {
        this._initSource();
      }
      if (c === "appendTo") {
        this.menu.element.appendTo(this._appendTo());
      }
      if (c === "disabled" && d && this.xhr) {
        this.xhr.abort();
      }
    },
    _appendTo: function () {
      var c = this.options.appendTo;
      if (c) {
        c = c.jquery || c.nodeType ? a(c) : this.document.find(c).eq(0);
      }
      if (!c) {
        c = this.element.closest(".ui-front");
      }
      if (!c.length) {
        c = this.document[0].body;
      }
      return c;
    },
    _initSource: function () {
      var c,
        e,
        d = this;
      if (a.isArray(this.options.source)) {
        c = this.options.source;
        this.source = function (f, g) {
          g(a.ui.autocomplete.filter(c, f.term));
        };
      } else {
        if (typeof this.options.source === "string") {
          e = this.options.source;
          this.source = function (f, g) {
            if (d.xhr) {
              d.xhr.abort();
            }
            d.xhr = a.ajax({
              url: e,
              data: f,
              dataType: "json",
              success: function (h) {
                g(h);
              },
              error: function () {
                g([]);
              },
            });
          };
        } else {
          this.source = this.options.source;
        }
      }
    },
    _searchTimeout: function (c) {
      clearTimeout(this.searching);
      this.searching = this._delay(function () {
        if (this.term !== this._value()) {
          this.selectedItem = null;
          this.search(null, c);
        }
      }, this.options.delay);
    },
    search: function (d, c) {
      d = d != null ? d : this._value();
      this.term = this._value();
      if (d.length < this.options.minLength) {
        return this.close(c);
      }
      if (this._trigger("search", c) === false) {
        return;
      }
      return this._search(d);
    },
    _search: function (c) {
      this.pending++;
      this.element.addClass("ui-autocomplete-loading");
      this.cancelSearch = false;
      this.source({ term: c }, this._response());
    },
    _response: function () {
      var c = ++this.requestIndex;
      return a.proxy(function (d) {
        if (c === this.requestIndex) {
          this.__response(d);
        }
        this.pending--;
        if (!this.pending) {
          this.element.removeClass("ui-autocomplete-loading");
        }
      }, this);
    },
    __response: function (c) {
      if (c) {
        c = this._normalize(c);
      }
      this._trigger("response", null, { content: c });
      if (!this.options.disabled && c && c.length && !this.cancelSearch) {
        this._suggest(c);
        this._trigger("open");
      } else {
        this._close();
      }
    },
    close: function (c) {
      this.cancelSearch = true;
      this._close(c);
    },
    _close: function (c) {
      if (this.menu.element.is(":visible")) {
        this.menu.element.hide();
        this.menu.blur();
        this.isNewMenu = true;
        this._trigger("close", c);
      }
    },
    _change: function (c) {
      if (this.previous !== this._value()) {
        this._trigger("change", c, { item: this.selectedItem });
      }
    },
    _normalize: function (c) {
      if (c.length && c[0].label && c[0].value) {
        return c;
      }
      return a.map(c, function (d) {
        if (typeof d === "string") {
          return { label: d, value: d };
        }
        return a.extend(
          { label: d.label || d.value, value: d.value || d.label },
          d
        );
      });
    },
    _suggest: function (c) {
      var d = this.menu.element.empty();
      this._renderMenu(d, c);
      this.isNewMenu = true;
      this.menu.refresh();
      d.show();
      this._resizeMenu();
      d.position(a.extend({ of: this.element }, this.options.position));
      if (this.options.autoFocus) {
        this.menu.next();
      }
    },
    _resizeMenu: function () {
      var c = this.menu.element;
      c.outerWidth(
        Math.max(c.width("").outerWidth() + 1, this.element.outerWidth())
      );
    },
    _renderMenu: function (e, c) {
      var d = this;
      a.each(c, function (f, g) {
        d._renderItemData(e, g);
      });
    },
    _renderItemData: function (d, c) {
      return this._renderItem(d, c).data("ui-autocomplete-item", c);
    },
    _renderItem: function (d, c) {
      return a("<li>").append(a("<a>").text(c.label)).appendTo(d);
    },
    _move: function (c, d) {
      if (!this.menu.element.is(":visible")) {
        this.search(null, d);
        return;
      }
      if (
        (this.menu.isFirstItem() && /^previous/.test(c)) ||
        (this.menu.isLastItem() && /^next/.test(c))
      ) {
        this._value(this.term);
        this.menu.blur();
        return;
      }
      this.menu[c](d);
    },
    widget: function () {
      return this.menu.element;
    },
    _value: function () {
      return this.valueMethod.apply(this.element, arguments);
    },
    _keyEvent: function (d, c) {
      if (!this.isMultiLine || this.menu.element.is(":visible")) {
        this._move(d, c);
        c.preventDefault();
      }
    },
  });
  a.extend(a.ui.autocomplete, {
    escapeRegex: function (c) {
      return c.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    },
    filter: function (c, e) {
      var d = new RegExp(a.ui.autocomplete.escapeRegex(e), "i");
      return a.grep(c, function (f) {
        return d.test(f.label || f.value || f);
      });
    },
  });
  a.widget("ui.autocomplete", a.ui.autocomplete, {
    options: {
      messages: {
        noResults: "No search results.",
        results: function (c) {
          return (
            c +
            (c > 1 ? " results are" : " result is") +
            " available, use up and down arrow keys to navigate."
          );
        },
      },
    },
    __response: function (c) {
      var d;
      this._superApply(arguments);
      if (this.options.disabled || this.cancelSearch) {
        return;
      }
      if (c && c.length) {
        d = this.options.messages.results(c.length);
      } else {
        d = this.options.messages.noResults;
      }
      this.liveRegion.text(d);
    },
  });
})(jQuery);
(function (a, g) {
  var d,
    b = "ui-button ui-widget ui-state-default ui-corner-all",
    f =
      "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
    c = function () {
      var h = a(this);
      setTimeout(function () {
        h.find(":ui-button").button("refresh");
      }, 1);
    },
    e = function (k) {
      var j = k.name,
        h = k.form,
        l = a([]);
      if (j) {
        j = j.replace(/'/g, "\\'");
        if (h) {
          l = a(h).find("[name='" + j + "']");
        } else {
          l = a("[name='" + j + "']", k.ownerDocument).filter(function () {
            return !this.form;
          });
        }
      }
      return l;
    };
  a.widget("ui.button", {
    version: "1.10.4",
    defaultElement: "<button>",
    options: {
      disabled: null,
      text: true,
      label: null,
      icons: { primary: null, secondary: null },
    },
    _create: function () {
      this.element
        .closest("form")
        .unbind("reset" + this.eventNamespace)
        .bind("reset" + this.eventNamespace, c);
      if (typeof this.options.disabled !== "boolean") {
        this.options.disabled = !!this.element.prop("disabled");
      } else {
        this.element.prop("disabled", this.options.disabled);
      }
      this._determineButtonType();
      this.hasTitle = !!this.buttonElement.attr("title");
      var k = this,
        j = this.options,
        l = this.type === "checkbox" || this.type === "radio",
        h = !l ? "ui-state-active" : "";
      if (j.label === null) {
        j.label =
          this.type === "input"
            ? this.buttonElement.val()
            : this.buttonElement.html();
      }
      this._hoverable(this.buttonElement);
      this.buttonElement
        .addClass(b)
        .attr("role", "button")
        .bind("mouseenter" + this.eventNamespace, function () {
          if (j.disabled) {
            return;
          }
          if (this === d) {
            a(this).addClass("ui-state-active");
          }
        })
        .bind("mouseleave" + this.eventNamespace, function () {
          if (j.disabled) {
            return;
          }
          a(this).removeClass(h);
        })
        .bind("click" + this.eventNamespace, function (m) {
          if (j.disabled) {
            m.preventDefault();
            m.stopImmediatePropagation();
          }
        });
      this._on({
        focus: function () {
          this.buttonElement.addClass("ui-state-focus");
        },
        blur: function () {
          this.buttonElement.removeClass("ui-state-focus");
        },
      });
      if (l) {
        this.element.bind("change" + this.eventNamespace, function () {
          k.refresh();
        });
      }
      if (this.type === "checkbox") {
        this.buttonElement.bind("click" + this.eventNamespace, function () {
          if (j.disabled) {
            return false;
          }
        });
      } else {
        if (this.type === "radio") {
          this.buttonElement.bind("click" + this.eventNamespace, function () {
            if (j.disabled) {
              return false;
            }
            a(this).addClass("ui-state-active");
            k.buttonElement.attr("aria-pressed", "true");
            var m = k.element[0];
            e(m)
              .not(m)
              .map(function () {
                return a(this).button("widget")[0];
              })
              .removeClass("ui-state-active")
              .attr("aria-pressed", "false");
          });
        } else {
          this.buttonElement
            .bind("mousedown" + this.eventNamespace, function () {
              if (j.disabled) {
                return false;
              }
              a(this).addClass("ui-state-active");
              d = this;
              k.document.one("mouseup", function () {
                d = null;
              });
            })
            .bind("mouseup" + this.eventNamespace, function () {
              if (j.disabled) {
                return false;
              }
              a(this).removeClass("ui-state-active");
            })
            .bind("keydown" + this.eventNamespace, function (m) {
              if (j.disabled) {
                return false;
              }
              if (
                m.keyCode === a.ui.keyCode.SPACE ||
                m.keyCode === a.ui.keyCode.ENTER
              ) {
                a(this).addClass("ui-state-active");
              }
            })
            .bind(
              "keyup" + this.eventNamespace + " blur" + this.eventNamespace,
              function () {
                a(this).removeClass("ui-state-active");
              }
            );
          if (this.buttonElement.is("a")) {
            this.buttonElement.keyup(function (m) {
              if (m.keyCode === a.ui.keyCode.SPACE) {
                a(this).click();
              }
            });
          }
        }
      }
      this._setOption("disabled", j.disabled);
      this._resetButton();
    },
    _determineButtonType: function () {
      var h, k, j;
      if (this.element.is("[type=checkbox]")) {
        this.type = "checkbox";
      } else {
        if (this.element.is("[type=radio]")) {
          this.type = "radio";
        } else {
          if (this.element.is("input")) {
            this.type = "input";
          } else {
            this.type = "button";
          }
        }
      }
      if (this.type === "checkbox" || this.type === "radio") {
        h = this.element.parents().last();
        k = "label[for='" + this.element.attr("id") + "']";
        this.buttonElement = h.find(k);
        if (!this.buttonElement.length) {
          h = h.length ? h.siblings() : this.element.siblings();
          this.buttonElement = h.filter(k);
          if (!this.buttonElement.length) {
            this.buttonElement = h.find(k);
          }
        }
        this.element.addClass("ui-helper-hidden-accessible");
        j = this.element.is(":checked");
        if (j) {
          this.buttonElement.addClass("ui-state-active");
        }
        this.buttonElement.prop("aria-pressed", j);
      } else {
        this.buttonElement = this.element;
      }
    },
    widget: function () {
      return this.buttonElement;
    },
    _destroy: function () {
      this.element.removeClass("ui-helper-hidden-accessible");
      this.buttonElement
        .removeClass(b + " ui-state-active " + f)
        .removeAttr("role")
        .removeAttr("aria-pressed")
        .html(this.buttonElement.find(".ui-button-text").html());
      if (!this.hasTitle) {
        this.buttonElement.removeAttr("title");
      }
    },
    _setOption: function (h, j) {
      this._super(h, j);
      if (h === "disabled") {
        this.element.prop("disabled", !!j);
        if (j) {
          this.buttonElement.removeClass("ui-state-focus");
        }
        return;
      }
      this._resetButton();
    },
    refresh: function () {
      var h = this.element.is("input, button")
        ? this.element.is(":disabled")
        : this.element.hasClass("ui-button-disabled");
      if (h !== this.options.disabled) {
        this._setOption("disabled", h);
      }
      if (this.type === "radio") {
        e(this.element[0]).each(function () {
          if (a(this).is(":checked")) {
            a(this)
              .button("widget")
              .addClass("ui-state-active")
              .attr("aria-pressed", "true");
          } else {
            a(this)
              .button("widget")
              .removeClass("ui-state-active")
              .attr("aria-pressed", "false");
          }
        });
      } else {
        if (this.type === "checkbox") {
          if (this.element.is(":checked")) {
            this.buttonElement
              .addClass("ui-state-active")
              .attr("aria-pressed", "true");
          } else {
            this.buttonElement
              .removeClass("ui-state-active")
              .attr("aria-pressed", "false");
          }
        }
      }
    },
    _resetButton: function () {
      if (this.type === "input") {
        if (this.options.label) {
          this.element.val(this.options.label);
        }
        return;
      }
      var j = this.buttonElement.removeClass(f),
        k = a("<span></span>", this.document[0])
          .addClass("ui-button-text")
          .html(this.options.label)
          .appendTo(j.empty())
          .text(),
        l = this.options.icons,
        m = l.primary && l.secondary,
        h = [];
      if (l.primary || l.secondary) {
        if (this.options.text) {
          h.push(
            "ui-button-text-icon" +
              (m ? "s" : l.primary ? "-primary" : "-secondary")
          );
        }
        if (l.primary) {
          j.prepend(
            "<span class='ui-button-icon-primary ui-icon " +
              l.primary +
              "'></span>"
          );
        }
        if (l.secondary) {
          j.append(
            "<span class='ui-button-icon-secondary ui-icon " +
              l.secondary +
              "'></span>"
          );
        }
        if (!this.options.text) {
          h.push(m ? "ui-button-icons-only" : "ui-button-icon-only");
          if (!this.hasTitle) {
            j.attr("title", a.trim(k));
          }
        }
      } else {
        h.push("ui-button-text-only");
      }
      j.addClass(h.join(" "));
    },
  });
  a.widget("ui.buttonset", {
    version: "1.10.4",
    options: {
      items:
        "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)",
    },
    _create: function () {
      this.element.addClass("ui-buttonset");
    },
    _init: function () {
      this.refresh();
    },
    _setOption: function (h, j) {
      if (h === "disabled") {
        this.buttons.button("option", h, j);
      }
      this._super(h, j);
    },
    refresh: function () {
      var h = this.element.css("direction") === "rtl";
      this.buttons = this.element
        .find(this.options.items)
        .filter(":ui-button")
        .button("refresh")
        .end()
        .not(":ui-button")
        .button()
        .end()
        .map(function () {
          return a(this).button("widget")[0];
        })
        .removeClass("ui-corner-all ui-corner-left ui-corner-right")
        .filter(":first")
        .addClass(h ? "ui-corner-right" : "ui-corner-left")
        .end()
        .filter(":last")
        .addClass(h ? "ui-corner-left" : "ui-corner-right")
        .end()
        .end();
    },
    _destroy: function () {
      this.element.removeClass("ui-buttonset");
      this.buttons
        .map(function () {
          return a(this).button("widget")[0];
        })
        .removeClass("ui-corner-left ui-corner-right")
        .end()
        .button("destroy");
    },
  });
})(jQuery);
(function (a, g) {
  a.extend(a.ui, { datepicker: { version: "1.10.4" } });
  var f = "datepicker",
    e;
  function c() {
    this._curInst = null;
    this._keyEvent = false;
    this._disabledInputs = [];
    this._datepickerShowing = false;
    this._inDialog = false;
    this._mainDivId = "ui-datepicker-div";
    this._inlineClass = "ui-datepicker-inline";
    this._appendClass = "ui-datepicker-append";
    this._triggerClass = "ui-datepicker-trigger";
    this._dialogClass = "ui-datepicker-dialog";
    this._disableClass = "ui-datepicker-disabled";
    this._unselectableClass = "ui-datepicker-unselectable";
    this._currentClass = "ui-datepicker-current-day";
    this._dayOverClass = "ui-datepicker-days-cell-over";
    this.regional = [];
    this.regional[""] = {
      closeText: "Done",
      prevText: "Prev",
      nextText: "Next",
      currentText: "Today",
      monthNames: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ],
      monthNamesShort: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ],
      dayNames: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
      ],
      dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
      weekHeader: "Wk",
      dateFormat: "mm/dd/yy",
      firstDay: 0,
      isRTL: false,
      showMonthAfterYear: false,
      yearSuffix: "",
    };
    this._defaults = {
      showOn: "focus",
      showAnim: "fadeIn",
      showOptions: {},
      defaultDate: null,
      appendText: "",
      buttonText: "...",
      buttonImage: "",
      buttonImageOnly: false,
      hideIfNoPrevNext: false,
      navigationAsDateFormat: false,
      gotoCurrent: false,
      changeMonth: false,
      changeYear: false,
      yearRange: "c-10:c+10",
      showOtherMonths: false,
      selectOtherMonths: false,
      showWeek: false,
      calculateWeek: this.iso8601Week,
      shortYearCutoff: "+10",
      minDate: null,
      maxDate: null,
      duration: "fast",
      beforeShowDay: null,
      beforeShow: null,
      onSelect: null,
      onChangeMonthYear: null,
      onClose: null,
      numberOfMonths: 1,
      showCurrentAtPos: 0,
      stepMonths: 1,
      stepBigMonths: 12,
      altField: "",
      altFormat: "",
      constrainInput: true,
      showButtonPanel: false,
      autoSize: false,
      disabled: false,
    };
    a.extend(this._defaults, this.regional[""]);
    this.dpDiv = b(
      a(
        "<div id='" +
          this._mainDivId +
          "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"
      )
    );
  }
  a.extend(c.prototype, {
    markerClassName: "hasDatepicker",
    maxRows: 4,
    _widgetDatepicker: function () {
      return this.dpDiv;
    },
    setDefaults: function (h) {
      d(this._defaults, h || {});
      return this;
    },
    _attachDatepicker: function (m, l) {
      var k, h, j;
      k = m.nodeName.toLowerCase();
      h = k === "div" || k === "span";
      if (!m.id) {
        this.uuid += 1;
        m.id = "dp" + this.uuid;
      }
      j = this._newInst(a(m), h);
      j.settings = a.extend({}, l || {});
      if (k === "input") {
        this._connectDatepicker(m, j);
      } else {
        if (h) {
          this._inlineDatepicker(m, j);
        }
      }
    },
    _newInst: function (k, j) {
      var h = k[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
      return {
        id: h,
        input: k,
        selectedDay: 0,
        selectedMonth: 0,
        selectedYear: 0,
        drawMonth: 0,
        drawYear: 0,
        inline: j,
        dpDiv: !j
          ? this.dpDiv
          : b(
              a(
                "<div class='" +
                  this._inlineClass +
                  " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"
              )
            ),
      };
    },
    _connectDatepicker: function (k, j) {
      var h = a(k);
      j.append = a([]);
      j.trigger = a([]);
      if (h.hasClass(this.markerClassName)) {
        return;
      }
      this._attachments(h, j);
      h.addClass(this.markerClassName)
        .keydown(this._doKeyDown)
        .keypress(this._doKeyPress)
        .keyup(this._doKeyUp);
      this._autoSize(j);
      a.data(k, f, j);
      if (j.settings.disabled) {
        this._disableDatepicker(k);
      }
    },
    _attachments: function (l, m) {
      var o,
        k,
        j,
        h = this._get(m, "appendText"),
        n = this._get(m, "isRTL");
      if (m.append) {
        m.append.remove();
      }
      if (h) {
        m.append = a(
          "<span class='" + this._appendClass + "'>" + h + "</span>"
        );
        l[n ? "before" : "after"](m.append);
      }
      l.unbind("focus", this._showDatepicker);
      if (m.trigger) {
        m.trigger.remove();
      }
      o = this._get(m, "showOn");
      if (o === "focus" || o === "both") {
        l.focus(this._showDatepicker);
      }
      if (o === "button" || o === "both") {
        k = this._get(m, "buttonText");
        j = this._get(m, "buttonImage");
        m.trigger = a(
          this._get(m, "buttonImageOnly")
            ? a("<img/>")
                .addClass(this._triggerClass)
                .attr({ src: j, alt: k, title: k })
            : a("<button type='button'></button>")
                .addClass(this._triggerClass)
                .html(!j ? k : a("<img/>").attr({ src: j, alt: k, title: k }))
        );
        l[n ? "before" : "after"](m.trigger);
        m.trigger.click(function () {
          if (
            a.datepicker._datepickerShowing &&
            a.datepicker._lastInput === l[0]
          ) {
            a.datepicker._hideDatepicker();
          } else {
            if (
              a.datepicker._datepickerShowing &&
              a.datepicker._lastInput !== l[0]
            ) {
              a.datepicker._hideDatepicker();
              a.datepicker._showDatepicker(l[0]);
            } else {
              a.datepicker._showDatepicker(l[0]);
            }
          }
          return false;
        });
      }
    },
    _autoSize: function (m) {
      if (this._get(m, "autoSize") && !m.inline) {
        var k,
          n,
          o,
          l,
          h = new Date(2009, 12 - 1, 20),
          j = this._get(m, "dateFormat");
        if (j.match(/[DM]/)) {
          k = function (p) {
            n = 0;
            o = 0;
            for (l = 0; l < p.length; l++) {
              if (p[l].length > n) {
                n = p[l].length;
                o = l;
              }
            }
            return o;
          };
          h.setMonth(
            k(this._get(m, j.match(/MM/) ? "monthNames" : "monthNamesShort"))
          );
          h.setDate(
            k(this._get(m, j.match(/DD/) ? "dayNames" : "dayNamesShort")) +
              20 -
              h.getDay()
          );
        }
        m.input.attr("size", this._formatDate(m, h).length);
      }
    },
    _inlineDatepicker: function (k, j) {
      var h = a(k);
      if (h.hasClass(this.markerClassName)) {
        return;
      }
      h.addClass(this.markerClassName).append(j.dpDiv);
      a.data(k, f, j);
      this._setDate(j, this._getDefaultDate(j), true);
      this._updateDatepicker(j);
      this._updateAlternate(j);
      if (j.settings.disabled) {
        this._disableDatepicker(k);
      }
      j.dpDiv.css("display", "block");
    },
    _dialogDatepicker: function (m, k, o, s, p) {
      var l,
        j,
        h,
        q,
        r,
        n = this._dialogInst;
      if (!n) {
        this.uuid += 1;
        l = "dp" + this.uuid;
        this._dialogInput = a(
          "<input type='text' id='" +
            l +
            "' style='position: absolute; top: -100px; width: 0px;'/>"
        );
        this._dialogInput.keydown(this._doKeyDown);
        a("body").append(this._dialogInput);
        n = this._dialogInst = this._newInst(this._dialogInput, false);
        n.settings = {};
        a.data(this._dialogInput[0], f, n);
      }
      d(n.settings, s || {});
      k = k && k.constructor === Date ? this._formatDate(n, k) : k;
      this._dialogInput.val(k);
      this._pos = p ? (p.length ? p : [p.pageX, p.pageY]) : null;
      if (!this._pos) {
        j = document.documentElement.clientWidth;
        h = document.documentElement.clientHeight;
        q = document.documentElement.scrollLeft || document.body.scrollLeft;
        r = document.documentElement.scrollTop || document.body.scrollTop;
        this._pos = [j / 2 - 100 + q, h / 2 - 150 + r];
      }
      this._dialogInput
        .css("left", this._pos[0] + 20 + "px")
        .css("top", this._pos[1] + "px");
      n.settings.onSelect = o;
      this._inDialog = true;
      this.dpDiv.addClass(this._dialogClass);
      this._showDatepicker(this._dialogInput[0]);
      if (a.blockUI) {
        a.blockUI(this.dpDiv);
      }
      a.data(this._dialogInput[0], f, n);
      return this;
    },
    _destroyDatepicker: function (l) {
      var k,
        h = a(l),
        j = a.data(l, f);
      if (!h.hasClass(this.markerClassName)) {
        return;
      }
      k = l.nodeName.toLowerCase();
      a.removeData(l, f);
      if (k === "input") {
        j.append.remove();
        j.trigger.remove();
        h.removeClass(this.markerClassName)
          .unbind("focus", this._showDatepicker)
          .unbind("keydown", this._doKeyDown)
          .unbind("keypress", this._doKeyPress)
          .unbind("keyup", this._doKeyUp);
      } else {
        if (k === "div" || k === "span") {
          h.removeClass(this.markerClassName).empty();
        }
      }
    },
    _enableDatepicker: function (m) {
      var l,
        j,
        h = a(m),
        k = a.data(m, f);
      if (!h.hasClass(this.markerClassName)) {
        return;
      }
      l = m.nodeName.toLowerCase();
      if (l === "input") {
        m.disabled = false;
        k.trigger
          .filter("button")
          .each(function () {
            this.disabled = false;
          })
          .end()
          .filter("img")
          .css({ opacity: "1.0", cursor: "" });
      } else {
        if (l === "div" || l === "span") {
          j = h.children("." + this._inlineClass);
          j.children().removeClass("ui-state-disabled");
          j.find("select.ui-datepicker-month, select.ui-datepicker-year").prop(
            "disabled",
            false
          );
        }
      }
      this._disabledInputs = a.map(this._disabledInputs, function (n) {
        return n === m ? null : n;
      });
    },
    _disableDatepicker: function (m) {
      var l,
        j,
        h = a(m),
        k = a.data(m, f);
      if (!h.hasClass(this.markerClassName)) {
        return;
      }
      l = m.nodeName.toLowerCase();
      if (l === "input") {
        m.disabled = true;
        k.trigger
          .filter("button")
          .each(function () {
            this.disabled = true;
          })
          .end()
          .filter("img")
          .css({ opacity: "0.5", cursor: "default" });
      } else {
        if (l === "div" || l === "span") {
          j = h.children("." + this._inlineClass);
          j.children().addClass("ui-state-disabled");
          j.find("select.ui-datepicker-month, select.ui-datepicker-year").prop(
            "disabled",
            true
          );
        }
      }
      this._disabledInputs = a.map(this._disabledInputs, function (n) {
        return n === m ? null : n;
      });
      this._disabledInputs[this._disabledInputs.length] = m;
    },
    _isDisabledDatepicker: function (j) {
      if (!j) {
        return false;
      }
      for (var h = 0; h < this._disabledInputs.length; h++) {
        if (this._disabledInputs[h] === j) {
          return true;
        }
      }
      return false;
    },
    _getInst: function (j) {
      try {
        return a.data(j, f);
      } catch (h) {
        throw "Missing instance data for this datepicker";
      }
    },
    _optionDatepicker: function (o, m, p) {
      var n,
        h,
        l,
        k,
        j = this._getInst(o);
      if (arguments.length === 2 && typeof m === "string") {
        return m === "defaults"
          ? a.extend({}, a.datepicker._defaults)
          : j
          ? m === "all"
            ? a.extend({}, j.settings)
            : this._get(j, m)
          : null;
      }
      n = m || {};
      if (typeof m === "string") {
        n = {};
        n[m] = p;
      }
      if (j) {
        if (this._curInst === j) {
          this._hideDatepicker();
        }
        h = this._getDateDatepicker(o, true);
        l = this._getMinMaxDate(j, "min");
        k = this._getMinMaxDate(j, "max");
        d(j.settings, n);
        if (l !== null && n.dateFormat !== g && n.minDate === g) {
          j.settings.minDate = this._formatDate(j, l);
        }
        if (k !== null && n.dateFormat !== g && n.maxDate === g) {
          j.settings.maxDate = this._formatDate(j, k);
        }
        if ("disabled" in n) {
          if (n.disabled) {
            this._disableDatepicker(o);
          } else {
            this._enableDatepicker(o);
          }
        }
        this._attachments(a(o), j);
        this._autoSize(j);
        this._setDate(j, h);
        this._updateAlternate(j);
        this._updateDatepicker(j);
      }
    },
    _changeDatepicker: function (j, h, k) {
      this._optionDatepicker(j, h, k);
    },
    _refreshDatepicker: function (j) {
      var h = this._getInst(j);
      if (h) {
        this._updateDatepicker(h);
      }
    },
    _setDateDatepicker: function (k, h) {
      var j = this._getInst(k);
      if (j) {
        this._setDate(j, h);
        this._updateDatepicker(j);
        this._updateAlternate(j);
      }
    },
    _getDateDatepicker: function (k, j) {
      var h = this._getInst(k);
      if (h && !h.inline) {
        this._setDateFromField(h, j);
      }
      return h ? this._getDate(h) : null;
    },
    _doKeyDown: function (j) {
      var n,
        h,
        o,
        l = a.datepicker._getInst(j.target),
        k = true,
        m = l.dpDiv.is(".ui-datepicker-rtl");
      l._keyEvent = true;
      if (a.datepicker._datepickerShowing) {
        switch (j.keyCode) {
          case 9:
            a.datepicker._hideDatepicker();
            k = false;
            break;
          case 13:
            o = a(
              "td." +
                a.datepicker._dayOverClass +
                ":not(." +
                a.datepicker._currentClass +
                ")",
              l.dpDiv
            );
            if (o[0]) {
              a.datepicker._selectDay(
                j.target,
                l.selectedMonth,
                l.selectedYear,
                o[0]
              );
            }
            n = a.datepicker._get(l, "onSelect");
            if (n) {
              h = a.datepicker._formatDate(l);
              n.apply(l.input ? l.input[0] : null, [h, l]);
            } else {
              a.datepicker._hideDatepicker();
            }
            return false;
          case 27:
            a.datepicker._hideDatepicker();
            break;
          case 33:
            a.datepicker._adjustDate(
              j.target,
              j.ctrlKey
                ? -a.datepicker._get(l, "stepBigMonths")
                : -a.datepicker._get(l, "stepMonths"),
              "M"
            );
            break;
          case 34:
            a.datepicker._adjustDate(
              j.target,
              j.ctrlKey
                ? +a.datepicker._get(l, "stepBigMonths")
                : +a.datepicker._get(l, "stepMonths"),
              "M"
            );
            break;
          case 35:
            if (j.ctrlKey || j.metaKey) {
              a.datepicker._clearDate(j.target);
            }
            k = j.ctrlKey || j.metaKey;
            break;
          case 36:
            if (j.ctrlKey || j.metaKey) {
              a.datepicker._gotoToday(j.target);
            }
            k = j.ctrlKey || j.metaKey;
            break;
          case 37:
            if (j.ctrlKey || j.metaKey) {
              a.datepicker._adjustDate(j.target, m ? +1 : -1, "D");
            }
            k = j.ctrlKey || j.metaKey;
            if (j.originalEvent.altKey) {
              a.datepicker._adjustDate(
                j.target,
                j.ctrlKey
                  ? -a.datepicker._get(l, "stepBigMonths")
                  : -a.datepicker._get(l, "stepMonths"),
                "M"
              );
            }
            break;
          case 38:
            if (j.ctrlKey || j.metaKey) {
              a.datepicker._adjustDate(j.target, -7, "D");
            }
            k = j.ctrlKey || j.metaKey;
            break;
          case 39:
            if (j.ctrlKey || j.metaKey) {
              a.datepicker._adjustDate(j.target, m ? -1 : +1, "D");
            }
            k = j.ctrlKey || j.metaKey;
            if (j.originalEvent.altKey) {
              a.datepicker._adjustDate(
                j.target,
                j.ctrlKey
                  ? +a.datepicker._get(l, "stepBigMonths")
                  : +a.datepicker._get(l, "stepMonths"),
                "M"
              );
            }
            break;
          case 40:
            if (j.ctrlKey || j.metaKey) {
              a.datepicker._adjustDate(j.target, +7, "D");
            }
            k = j.ctrlKey || j.metaKey;
            break;
          default:
            k = false;
        }
      } else {
        if (j.keyCode === 36 && j.ctrlKey) {
          a.datepicker._showDatepicker(this);
        } else {
          k = false;
        }
      }
      if (k) {
        j.preventDefault();
        j.stopPropagation();
      }
    },
    _doKeyPress: function (k) {
      var h,
        j,
        l = a.datepicker._getInst(k.target);
      if (a.datepicker._get(l, "constrainInput")) {
        h = a.datepicker._possibleChars(a.datepicker._get(l, "dateFormat"));
        j = String.fromCharCode(k.charCode == null ? k.keyCode : k.charCode);
        return k.ctrlKey || k.metaKey || j < " " || !h || h.indexOf(j) > -1;
      }
    },
    _doKeyUp: function (k) {
      var h,
        l = a.datepicker._getInst(k.target);
      if (l.input.val() !== l.lastVal) {
        try {
          h = a.datepicker.parseDate(
            a.datepicker._get(l, "dateFormat"),
            l.input ? l.input.val() : null,
            a.datepicker._getFormatConfig(l)
          );
          if (h) {
            a.datepicker._setDateFromField(l);
            a.datepicker._updateAlternate(l);
            a.datepicker._updateDatepicker(l);
          }
        } catch (j) {}
      }
      return true;
    },
    _showDatepicker: function (l) {
      l = l.target || l;
      if (l.nodeName.toLowerCase() !== "input") {
        l = a("input", l.parentNode)[0];
      }
      if (
        a.datepicker._isDisabledDatepicker(l) ||
        a.datepicker._lastInput === l
      ) {
        return;
      }
      var m, h, j, n, o, p, k;
      m = a.datepicker._getInst(l);
      if (a.datepicker._curInst && a.datepicker._curInst !== m) {
        a.datepicker._curInst.dpDiv.stop(true, true);
        if (m && a.datepicker._datepickerShowing) {
          a.datepicker._hideDatepicker(a.datepicker._curInst.input[0]);
        }
      }
      h = a.datepicker._get(m, "beforeShow");
      j = h ? h.apply(l, [l, m]) : {};
      if (j === false) {
        return;
      }
      d(m.settings, j);
      m.lastVal = null;
      a.datepicker._lastInput = l;
      a.datepicker._setDateFromField(m);
      if (a.datepicker._inDialog) {
        l.value = "";
      }
      if (!a.datepicker._pos) {
        a.datepicker._pos = a.datepicker._findPos(l);
        a.datepicker._pos[1] += l.offsetHeight;
      }
      n = false;
      a(l)
        .parents()
        .each(function () {
          n |= a(this).css("position") === "fixed";
          return !n;
        });
      o = { left: a.datepicker._pos[0], top: a.datepicker._pos[1] };
      a.datepicker._pos = null;
      m.dpDiv.empty();
      m.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" });
      a.datepicker._updateDatepicker(m);
      o = a.datepicker._checkOffset(m, o, n);
      m.dpDiv.css({
        position:
          a.datepicker._inDialog && a.blockUI
            ? "static"
            : n
            ? "fixed"
            : "absolute",
        display: "none",
        left: o.left + "px",
        top: o.top + "px",
      });
      if (!m.inline) {
        p = a.datepicker._get(m, "showAnim");
        k = a.datepicker._get(m, "duration");
        m.dpDiv.zIndex(a(l).zIndex() + 1);
        a.datepicker._datepickerShowing = true;
        if (a.effects && a.effects.effect[p]) {
          m.dpDiv.show(p, a.datepicker._get(m, "showOptions"), k);
        } else {
          m.dpDiv[p || "show"](p ? k : null);
        }
        if (a.datepicker._shouldFocusInput(m)) {
          m.input.focus();
        }
        a.datepicker._curInst = m;
      }
    },
    _updateDatepicker: function (j) {
      this.maxRows = 4;
      e = j;
      j.dpDiv.empty().append(this._generateHTML(j));
      this._attachHandlers(j);
      j.dpDiv.find("." + this._dayOverClass + " a").mouseover();
      var l,
        k = this._getNumberOfMonths(j),
        h = k[1],
        m = 17;
      j.dpDiv
        .removeClass(
          "ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4"
        )
        .width("");
      if (h > 1) {
        j.dpDiv.addClass("ui-datepicker-multi-" + h).css("width", m * h + "em");
      }
      j.dpDiv[(k[0] !== 1 || k[1] !== 1 ? "add" : "remove") + "Class"](
        "ui-datepicker-multi"
      );
      j.dpDiv[(this._get(j, "isRTL") ? "add" : "remove") + "Class"](
        "ui-datepicker-rtl"
      );
      if (
        j === a.datepicker._curInst &&
        a.datepicker._datepickerShowing &&
        a.datepicker._shouldFocusInput(j)
      ) {
        j.input.focus();
      }
      if (j.yearshtml) {
        l = j.yearshtml;
        setTimeout(function () {
          if (l === j.yearshtml && j.yearshtml) {
            j.dpDiv
              .find("select.ui-datepicker-year:first")
              .replaceWith(j.yearshtml);
          }
          l = j.yearshtml = null;
        }, 0);
      }
    },
    _shouldFocusInput: function (h) {
      return (
        h.input &&
        h.input.is(":visible") &&
        !h.input.is(":disabled") &&
        !h.input.is(":focus")
      );
    },
    _checkOffset: function (m, o, n) {
      var j = m.dpDiv.outerWidth(),
        h = m.dpDiv.outerHeight(),
        l = m.input ? m.input.outerWidth() : 0,
        k = m.input ? m.input.outerHeight() : 0,
        q =
          document.documentElement.clientWidth +
          (n ? 0 : a(document).scrollLeft()),
        p =
          document.documentElement.clientHeight +
          (n ? 0 : a(document).scrollTop());
      o.left -= this._get(m, "isRTL") ? j - l : 0;
      o.left -=
        n && o.left === m.input.offset().left ? a(document).scrollLeft() : 0;
      o.top -=
        n && o.top === m.input.offset().top + k ? a(document).scrollTop() : 0;
      o.left -= Math.min(
        o.left,
        o.left + j > q && q > j ? Math.abs(o.left + j - q) : 0
      );
      o.top -= Math.min(o.top, o.top + h > p && p > h ? Math.abs(h + k) : 0);
      return o;
    },
    _findPos: function (k) {
      var l,
        h = this._getInst(k),
        j = this._get(h, "isRTL");
      while (
        k &&
        (k.type === "hidden" || k.nodeType !== 1 || a.expr.filters.hidden(k))
      ) {
        k = k[j ? "previousSibling" : "nextSibling"];
      }
      l = a(k).offset();
      return [l.left, l.top];
    },
    _hideDatepicker: function (j) {
      var n,
        h,
        m,
        l,
        k = this._curInst;
      if (!k || (j && k !== a.data(j, f))) {
        return;
      }
      if (this._datepickerShowing) {
        n = this._get(k, "showAnim");
        h = this._get(k, "duration");
        m = function () {
          a.datepicker._tidyDialog(k);
        };
        if (a.effects && (a.effects.effect[n] || a.effects[n])) {
          k.dpDiv.hide(n, a.datepicker._get(k, "showOptions"), h, m);
        } else {
          k.dpDiv[
            n === "slideDown" ? "slideUp" : n === "fadeIn" ? "fadeOut" : "hide"
          ](n ? h : null, m);
        }
        if (!n) {
          m();
        }
        this._datepickerShowing = false;
        l = this._get(k, "onClose");
        if (l) {
          l.apply(k.input ? k.input[0] : null, [
            k.input ? k.input.val() : "",
            k,
          ]);
        }
        this._lastInput = null;
        if (this._inDialog) {
          this._dialogInput.css({
            position: "absolute",
            left: "0",
            top: "-100px",
          });
          if (a.blockUI) {
            a.unblockUI();
            a("body").append(this.dpDiv);
          }
        }
        this._inDialog = false;
      }
    },
    _tidyDialog: function (h) {
      h.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
    },
    _checkExternalClick: function (j) {
      if (!a.datepicker._curInst) {
        return;
      }
      var h = a(j.target),
        k = a.datepicker._getInst(h[0]);
      if (
        (h[0].id !== a.datepicker._mainDivId &&
          h.parents("#" + a.datepicker._mainDivId).length === 0 &&
          !h.hasClass(a.datepicker.markerClassName) &&
          !h.closest("." + a.datepicker._triggerClass).length &&
          a.datepicker._datepickerShowing &&
          !(a.datepicker._inDialog && a.blockUI)) ||
        (h.hasClass(a.datepicker.markerClassName) &&
          a.datepicker._curInst !== k)
      ) {
        a.datepicker._hideDatepicker();
      }
    },
    _adjustDate: function (h, k, l) {
      var m = a(h),
        j = this._getInst(m[0]);
      if (this._isDisabledDatepicker(m[0])) {
        return;
      }
      this._adjustInstDate(
        j,
        k + (l === "M" ? this._get(j, "showCurrentAtPos") : 0),
        l
      );
      this._updateDatepicker(j);
    },
    _gotoToday: function (j) {
      var h,
        l = a(j),
        k = this._getInst(l[0]);
      if (this._get(k, "gotoCurrent") && k.currentDay) {
        k.selectedDay = k.currentDay;
        k.drawMonth = k.selectedMonth = k.currentMonth;
        k.drawYear = k.selectedYear = k.currentYear;
      } else {
        h = new Date();
        k.selectedDay = h.getDate();
        k.drawMonth = k.selectedMonth = h.getMonth();
        k.drawYear = k.selectedYear = h.getFullYear();
      }
      this._notifyChange(k);
      this._adjustDate(l);
    },
    _selectMonthYear: function (h, l, k) {
      var m = a(h),
        j = this._getInst(m[0]);
      j["selected" + (k === "M" ? "Month" : "Year")] = j[
        "draw" + (k === "M" ? "Month" : "Year")
      ] = parseInt(l.options[l.selectedIndex].value, 10);
      this._notifyChange(j);
      this._adjustDate(m);
    },
    _selectDay: function (h, k, n, m) {
      var j,
        l = a(h);
      if (
        a(m).hasClass(this._unselectableClass) ||
        this._isDisabledDatepicker(l[0])
      ) {
        return;
      }
      j = this._getInst(l[0]);
      j.selectedDay = j.currentDay = a("a", m).html();
      j.selectedMonth = j.currentMonth = k;
      j.selectedYear = j.currentYear = n;
      this._selectDate(
        h,
        this._formatDate(j, j.currentDay, j.currentMonth, j.currentYear)
      );
    },
    _clearDate: function (h) {
      var j = a(h);
      this._selectDate(j, "");
    },
    _selectDate: function (j, h) {
      var l,
        m = a(j),
        k = this._getInst(m[0]);
      h = h != null ? h : this._formatDate(k);
      if (k.input) {
        k.input.val(h);
      }
      this._updateAlternate(k);
      l = this._get(k, "onSelect");
      if (l) {
        l.apply(k.input ? k.input[0] : null, [h, k]);
      } else {
        if (k.input) {
          k.input.trigger("change");
        }
      }
      if (k.inline) {
        this._updateDatepicker(k);
      } else {
        this._hideDatepicker();
        this._lastInput = k.input[0];
        if (typeof k.input[0] !== "object") {
          k.input.focus();
        }
        this._lastInput = null;
      }
    },
    _updateAlternate: function (m) {
      var j,
        k,
        l,
        h = this._get(m, "altField");
      if (h) {
        j = this._get(m, "altFormat") || this._get(m, "dateFormat");
        k = this._getDate(m);
        l = this.formatDate(j, k, this._getFormatConfig(m));
        a(h).each(function () {
          a(this).val(l);
        });
      }
    },
    noWeekends: function (h) {
      var j = h.getDay();
      return [j > 0 && j < 6, ""];
    },
    iso8601Week: function (j) {
      var k,
        h = new Date(j.getTime());
      h.setDate(h.getDate() + 4 - (h.getDay() || 7));
      k = h.getTime();
      h.setMonth(0);
      h.setDate(1);
      return Math.floor(Math.round((k - h) / 86400000) / 7) + 1;
    },
    parseDate: function (q, D, A) {
      if (q == null || D == null) {
        throw "Invalid arguments";
      }
      D = typeof D === "object" ? D.toString() : D + "";
      if (D === "") {
        return null;
      }
      var t,
        n,
        p,
        u = 0,
        C = (A ? A.shortYearCutoff : null) || this._defaults.shortYearCutoff,
        B =
          typeof C !== "string"
            ? C
            : (new Date().getFullYear() % 100) + parseInt(C, 10),
        m = (A ? A.dayNamesShort : null) || this._defaults.dayNamesShort,
        l = (A ? A.dayNames : null) || this._defaults.dayNames,
        z = (A ? A.monthNamesShort : null) || this._defaults.monthNamesShort,
        y = (A ? A.monthNames : null) || this._defaults.monthNames,
        E = -1,
        x = -1,
        k = -1,
        o = -1,
        v = false,
        j,
        w = function (F) {
          var G = t + 1 < q.length && q.charAt(t + 1) === F;
          if (G) {
            t++;
          }
          return G;
        },
        s = function (H) {
          var G = w(H),
            J =
              H === "@"
                ? 14
                : H === "!"
                ? 20
                : H === "y" && G
                ? 4
                : H === "o"
                ? 3
                : 2,
            F = new RegExp("^\\d{1," + J + "}"),
            I = D.substring(u).match(F);
          if (!I) {
            throw "Missing number at position " + u;
          }
          u += I[0].length;
          return parseInt(I[0], 10);
        },
        r = function (H, J, G) {
          var F = -1,
            I = a
              .map(w(H) ? G : J, function (L, K) {
                return [[K, L]];
              })
              .sort(function (K, L) {
                return -(K[1].length - L[1].length);
              });
          a.each(I, function (K, M) {
            var L = M[1];
            if (D.substr(u, L.length).toLowerCase() === L.toLowerCase()) {
              F = M[0];
              u += L.length;
              return false;
            }
          });
          if (F !== -1) {
            return F + 1;
          } else {
            throw "Unknown name at position " + u;
          }
        },
        h = function () {
          if (D.charAt(u) !== q.charAt(t)) {
            throw "Unexpected literal at position " + u;
          }
          u++;
        };
      for (t = 0; t < q.length; t++) {
        if (v) {
          if (q.charAt(t) === "'" && !w("'")) {
            v = false;
          } else {
            h();
          }
        } else {
          switch (q.charAt(t)) {
            case "d":
              k = s("d");
              break;
            case "D":
              r("D", m, l);
              break;
            case "o":
              o = s("o");
              break;
            case "m":
              x = s("m");
              break;
            case "M":
              x = r("M", z, y);
              break;
            case "y":
              E = s("y");
              break;
            case "@":
              j = new Date(s("@"));
              E = j.getFullYear();
              x = j.getMonth() + 1;
              k = j.getDate();
              break;
            case "!":
              j = new Date((s("!") - this._ticksTo1970) / 10000);
              E = j.getFullYear();
              x = j.getMonth() + 1;
              k = j.getDate();
              break;
            case "'":
              if (w("'")) {
                h();
              } else {
                v = true;
              }
              break;
            default:
              h();
          }
        }
      }
      if (u < D.length) {
        p = D.substr(u);
        if (!/^\s+/.test(p)) {
          throw "Extra/unparsed characters found in date: " + p;
        }
      }
      if (E === -1) {
        E = new Date().getFullYear();
      } else {
        if (E < 100) {
          E +=
            new Date().getFullYear() -
            (new Date().getFullYear() % 100) +
            (E <= B ? 0 : -100);
        }
      }
      if (o > -1) {
        x = 1;
        k = o;
        do {
          n = this._getDaysInMonth(E, x - 1);
          if (k <= n) {
            break;
          }
          x++;
          k -= n;
        } while (true);
      }
      j = this._daylightSavingAdjust(new Date(E, x - 1, k));
      if (
        j.getFullYear() !== E ||
        j.getMonth() + 1 !== x ||
        j.getDate() !== k
      ) {
        throw "Invalid date";
      }
      return j;
    },
    ATOM: "yy-mm-dd",
    COOKIE: "D, dd M yy",
    ISO_8601: "yy-mm-dd",
    RFC_822: "D, d M y",
    RFC_850: "DD, dd-M-y",
    RFC_1036: "D, d M y",
    RFC_1123: "D, d M yy",
    RFC_2822: "D, d M yy",
    RSS: "D, d M y",
    TICKS: "!",
    TIMESTAMP: "@",
    W3C: "yy-mm-dd",
    _ticksTo1970:
      ((1970 - 1) * 365 +
        Math.floor(1970 / 4) -
        Math.floor(1970 / 100) +
        Math.floor(1970 / 400)) *
      24 *
      60 *
      60 *
      10000000,
    formatDate: function (l, h, u) {
      if (!h) {
        return "";
      }
      var o,
        k = (u ? u.dayNamesShort : null) || this._defaults.dayNamesShort,
        j = (u ? u.dayNames : null) || this._defaults.dayNames,
        s = (u ? u.monthNamesShort : null) || this._defaults.monthNamesShort,
        r = (u ? u.monthNames : null) || this._defaults.monthNames,
        q = function (v) {
          var w = o + 1 < l.length && l.charAt(o + 1) === v;
          if (w) {
            o++;
          }
          return w;
        },
        n = function (w, y, v) {
          var x = "" + y;
          if (q(w)) {
            while (x.length < v) {
              x = "0" + x;
            }
          }
          return x;
        },
        m = function (w, y, x, v) {
          return q(w) ? v[y] : x[y];
        },
        t = "",
        p = false;
      if (h) {
        for (o = 0; o < l.length; o++) {
          if (p) {
            if (l.charAt(o) === "'" && !q("'")) {
              p = false;
            } else {
              t += l.charAt(o);
            }
          } else {
            switch (l.charAt(o)) {
              case "d":
                t += n("d", h.getDate(), 2);
                break;
              case "D":
                t += m("D", h.getDay(), k, j);
                break;
              case "o":
                t += n(
                  "o",
                  Math.round(
                    (new Date(
                      h.getFullYear(),
                      h.getMonth(),
                      h.getDate()
                    ).getTime() -
                      new Date(h.getFullYear(), 0, 0).getTime()) /
                      86400000
                  ),
                  3
                );
                break;
              case "m":
                t += n("m", h.getMonth() + 1, 2);
                break;
              case "M":
                t += m("M", h.getMonth(), s, r);
                break;
              case "y":
                t += q("y")
                  ? h.getFullYear()
                  : (h.getYear() % 100 < 10 ? "0" : "") + (h.getYear() % 100);
                break;
              case "@":
                t += h.getTime();
                break;
              case "!":
                t += h.getTime() * 10000 + this._ticksTo1970;
                break;
              case "'":
                if (q("'")) {
                  t += "'";
                } else {
                  p = true;
                }
                break;
              default:
                t += l.charAt(o);
            }
          }
        }
      }
      return t;
    },
    _possibleChars: function (j) {
      var k,
        h = "",
        l = false,
        m = function (n) {
          var o = k + 1 < j.length && j.charAt(k + 1) === n;
          if (o) {
            k++;
          }
          return o;
        };
      for (k = 0; k < j.length; k++) {
        if (l) {
          if (j.charAt(k) === "'" && !m("'")) {
            l = false;
          } else {
            h += j.charAt(k);
          }
        } else {
          switch (j.charAt(k)) {
            case "d":
            case "m":
            case "y":
            case "@":
              h += "0123456789";
              break;
            case "D":
            case "M":
              return null;
            case "'":
              if (m("'")) {
                h += "'";
              } else {
                l = true;
              }
              break;
            default:
              h += j.charAt(k);
          }
        }
      }
      return h;
    },
    _get: function (h, j) {
      return h.settings[j] !== g ? h.settings[j] : this._defaults[j];
    },
    _setDateFromField: function (n, o) {
      if (n.input.val() === n.lastVal) {
        return;
      }
      var j = this._get(n, "dateFormat"),
        k = (n.lastVal = n.input ? n.input.val() : null),
        l = this._getDefaultDate(n),
        h = l,
        p = this._getFormatConfig(n);
      try {
        h = this.parseDate(j, k, p) || l;
      } catch (m) {
        k = o ? "" : k;
      }
      n.selectedDay = h.getDate();
      n.drawMonth = n.selectedMonth = h.getMonth();
      n.drawYear = n.selectedYear = h.getFullYear();
      n.currentDay = k ? h.getDate() : 0;
      n.currentMonth = k ? h.getMonth() : 0;
      n.currentYear = k ? h.getFullYear() : 0;
      this._adjustInstDate(n);
    },
    _getDefaultDate: function (h) {
      return this._restrictMinMax(
        h,
        this._determineDate(h, this._get(h, "defaultDate"), new Date())
      );
    },
    _determineDate: function (k, h, j) {
      var m = function (p) {
          var o = new Date();
          o.setDate(o.getDate() + p);
          return o;
        },
        n = function (t) {
          try {
            return a.datepicker.parseDate(
              a.datepicker._get(k, "dateFormat"),
              t,
              a.datepicker._getFormatConfig(k)
            );
          } catch (q) {}
          var o =
              (t.toLowerCase().match(/^c/) ? a.datepicker._getDate(k) : null) ||
              new Date(),
            v = o.getFullYear(),
            s = o.getMonth(),
            p = o.getDate(),
            u = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
            r = u.exec(t);
          while (r) {
            switch (r[2] || "d") {
              case "d":
              case "D":
                p += parseInt(r[1], 10);
                break;
              case "w":
              case "W":
                p += parseInt(r[1], 10) * 7;
                break;
              case "m":
              case "M":
                s += parseInt(r[1], 10);
                p = Math.min(p, a.datepicker._getDaysInMonth(v, s));
                break;
              case "y":
              case "Y":
                v += parseInt(r[1], 10);
                p = Math.min(p, a.datepicker._getDaysInMonth(v, s));
                break;
            }
            r = u.exec(t);
          }
          return new Date(v, s, p);
        },
        l =
          h == null || h === ""
            ? j
            : typeof h === "string"
            ? n(h)
            : typeof h === "number"
            ? isNaN(h)
              ? j
              : m(h)
            : new Date(h.getTime());
      l = l && l.toString() === "Invalid Date" ? j : l;
      if (l) {
        l.setHours(0);
        l.setMinutes(0);
        l.setSeconds(0);
        l.setMilliseconds(0);
      }
      return this._daylightSavingAdjust(l);
    },
    _daylightSavingAdjust: function (h) {
      if (!h) {
        return null;
      }
      h.setHours(h.getHours() > 12 ? h.getHours() + 2 : 0);
      return h;
    },
    _setDate: function (k, j, m) {
      var h = !j,
        n = k.selectedMonth,
        o = k.selectedYear,
        l = this._restrictMinMax(k, this._determineDate(k, j, new Date()));
      k.selectedDay = k.currentDay = l.getDate();
      k.drawMonth = k.selectedMonth = k.currentMonth = l.getMonth();
      k.drawYear = k.selectedYear = k.currentYear = l.getFullYear();
      if ((n !== k.selectedMonth || o !== k.selectedYear) && !m) {
        this._notifyChange(k);
      }
      this._adjustInstDate(k);
      if (k.input) {
        k.input.val(h ? "" : this._formatDate(k));
      }
    },
    _getDate: function (h) {
      var j =
        !h.currentYear || (h.input && h.input.val() === "")
          ? null
          : this._daylightSavingAdjust(
              new Date(h.currentYear, h.currentMonth, h.currentDay)
            );
      return j;
    },
    _attachHandlers: function (j) {
      var k = this._get(j, "stepMonths"),
        h = "#" + j.id.replace(/\\\\/g, "\\");
      j.dpDiv.find("[data-handler]").map(function () {
        var l = {
          prev: function () {
            a.datepicker._adjustDate(h, -k, "M");
          },
          next: function () {
            a.datepicker._adjustDate(h, +k, "M");
          },
          hide: function () {
            a.datepicker._hideDatepicker();
          },
          today: function () {
            a.datepicker._gotoToday(h);
          },
          selectDay: function () {
            a.datepicker._selectDay(
              h,
              +this.getAttribute("data-month"),
              +this.getAttribute("data-year"),
              this
            );
            return false;
          },
          selectMonth: function () {
            a.datepicker._selectMonthYear(h, this, "M");
            return false;
          },
          selectYear: function () {
            a.datepicker._selectMonthYear(h, this, "Y");
            return false;
          },
        };
        a(this).bind(
          this.getAttribute("data-event"),
          l[this.getAttribute("data-handler")]
        );
      });
    },
    _generateHTML: function (G) {
      var L,
        W,
        V,
        R,
        Q,
        p,
        C,
        m,
        j,
        B,
        ae,
        s,
        t,
        N,
        O,
        h,
        ad,
        aa,
        w,
        F,
        x,
        Y,
        D,
        l,
        Z,
        n,
        k,
        ai,
        r,
        v,
        J,
        q,
        T,
        X,
        A,
        ag,
        u,
        U,
        ak,
        ah = new Date(),
        aj = this._daylightSavingAdjust(
          new Date(ah.getFullYear(), ah.getMonth(), ah.getDate())
        ),
        I = this._get(G, "isRTL"),
        ab = this._get(G, "showButtonPanel"),
        E = this._get(G, "hideIfNoPrevNext"),
        P = this._get(G, "navigationAsDateFormat"),
        S = this._getNumberOfMonths(G),
        ac = this._get(G, "showCurrentAtPos"),
        af = this._get(G, "stepMonths"),
        H = S[0] !== 1 || S[1] !== 1,
        o = this._daylightSavingAdjust(
          !G.currentDay
            ? new Date(9999, 9, 9)
            : new Date(G.currentYear, G.currentMonth, G.currentDay)
        ),
        M = this._getMinMaxDate(G, "min"),
        K = this._getMinMaxDate(G, "max"),
        y = G.drawMonth - ac,
        z = G.drawYear;
      if (y < 0) {
        y += 12;
        z--;
      }
      if (K) {
        L = this._daylightSavingAdjust(
          new Date(K.getFullYear(), K.getMonth() - S[0] * S[1] + 1, K.getDate())
        );
        L = M && L < M ? M : L;
        while (this._daylightSavingAdjust(new Date(z, y, 1)) > L) {
          y--;
          if (y < 0) {
            y = 11;
            z--;
          }
        }
      }
      G.drawMonth = y;
      G.drawYear = z;
      W = this._get(G, "prevText");
      W = !P
        ? W
        : this.formatDate(
            W,
            this._daylightSavingAdjust(new Date(z, y - af, 1)),
            this._getFormatConfig(G)
          );
      V = this._canAdjustMonth(G, -1, z, y)
        ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" +
          W +
          "'><span class='ui-icon ui-icon-circle-triangle-" +
          (I ? "e" : "w") +
          "'>" +
          W +
          "</span></a>"
        : E
        ? ""
        : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" +
          W +
          "'><span class='ui-icon ui-icon-circle-triangle-" +
          (I ? "e" : "w") +
          "'>" +
          W +
          "</span></a>";
      R = this._get(G, "nextText");
      R = !P
        ? R
        : this.formatDate(
            R,
            this._daylightSavingAdjust(new Date(z, y + af, 1)),
            this._getFormatConfig(G)
          );
      Q = this._canAdjustMonth(G, +1, z, y)
        ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" +
          R +
          "'><span class='ui-icon ui-icon-circle-triangle-" +
          (I ? "w" : "e") +
          "'>" +
          R +
          "</span></a>"
        : E
        ? ""
        : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" +
          R +
          "'><span class='ui-icon ui-icon-circle-triangle-" +
          (I ? "w" : "e") +
          "'>" +
          R +
          "</span></a>";
      p = this._get(G, "currentText");
      C = this._get(G, "gotoCurrent") && G.currentDay ? o : aj;
      p = !P ? p : this.formatDate(p, C, this._getFormatConfig(G));
      m = !G.inline
        ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
          this._get(G, "closeText") +
          "</button>"
        : "";
      j = ab
        ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" +
          (I ? m : "") +
          (this._isInRange(G, C)
            ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" +
              p +
              "</button>"
            : "") +
          (I ? "" : m) +
          "</div>"
        : "";
      B = parseInt(this._get(G, "firstDay"), 10);
      B = isNaN(B) ? 0 : B;
      ae = this._get(G, "showWeek");
      s = this._get(G, "dayNames");
      t = this._get(G, "dayNamesMin");
      N = this._get(G, "monthNames");
      O = this._get(G, "monthNamesShort");
      h = this._get(G, "beforeShowDay");
      ad = this._get(G, "showOtherMonths");
      aa = this._get(G, "selectOtherMonths");
      w = this._getDefaultDate(G);
      F = "";
      x;
      for (Y = 0; Y < S[0]; Y++) {
        D = "";
        this.maxRows = 4;
        for (l = 0; l < S[1]; l++) {
          Z = this._daylightSavingAdjust(new Date(z, y, G.selectedDay));
          n = " ui-corner-all";
          k = "";
          if (H) {
            k += "<div class='ui-datepicker-group";
            if (S[1] > 1) {
              switch (l) {
                case 0:
                  k += " ui-datepicker-group-first";
                  n = " ui-corner-" + (I ? "right" : "left");
                  break;
                case S[1] - 1:
                  k += " ui-datepicker-group-last";
                  n = " ui-corner-" + (I ? "left" : "right");
                  break;
                default:
                  k += " ui-datepicker-group-middle";
                  n = "";
                  break;
              }
            }
            k += "'>";
          }
          k +=
            "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" +
            n +
            "'>" +
            (/all|left/.test(n) && Y === 0 ? (I ? Q : V) : "") +
            (/all|right/.test(n) && Y === 0 ? (I ? V : Q) : "") +
            this._generateMonthYearHeader(G, y, z, M, K, Y > 0 || l > 0, N, O) +
            "</div><table class='ui-datepicker-calendar'><thead><tr>";
          ai = ae
            ? "<th class='ui-datepicker-week-col'>" +
              this._get(G, "weekHeader") +
              "</th>"
            : "";
          for (x = 0; x < 7; x++) {
            r = (x + B) % 7;
            ai +=
              "<th" +
              ((x + B + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") +
              "><span title='" +
              s[r] +
              "'>" +
              t[r] +
              "</span></th>";
          }
          k += ai + "</tr></thead><tbody>";
          v = this._getDaysInMonth(z, y);
          if (z === G.selectedYear && y === G.selectedMonth) {
            G.selectedDay = Math.min(G.selectedDay, v);
          }
          J = (this._getFirstDayOfMonth(z, y) - B + 7) % 7;
          q = Math.ceil((J + v) / 7);
          T = H ? (this.maxRows > q ? this.maxRows : q) : q;
          this.maxRows = T;
          X = this._daylightSavingAdjust(new Date(z, y, 1 - J));
          for (A = 0; A < T; A++) {
            k += "<tr>";
            ag = !ae
              ? ""
              : "<td class='ui-datepicker-week-col'>" +
                this._get(G, "calculateWeek")(X) +
                "</td>";
            for (x = 0; x < 7; x++) {
              u = h ? h.apply(G.input ? G.input[0] : null, [X]) : [true, ""];
              U = X.getMonth() !== y;
              ak = (U && !aa) || !u[0] || (M && X < M) || (K && X > K);
              ag +=
                "<td class='" +
                ((x + B + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") +
                (U ? " ui-datepicker-other-month" : "") +
                ((X.getTime() === Z.getTime() &&
                  y === G.selectedMonth &&
                  G._keyEvent) ||
                (w.getTime() === X.getTime() && w.getTime() === Z.getTime())
                  ? " " + this._dayOverClass
                  : "") +
                (ak
                  ? " " + this._unselectableClass + " ui-state-disabled"
                  : "") +
                (U && !ad
                  ? ""
                  : " " +
                    u[1] +
                    (X.getTime() === o.getTime()
                      ? " " + this._currentClass
                      : "") +
                    (X.getTime() === aj.getTime()
                      ? " ui-datepicker-today"
                      : "")) +
                "'" +
                ((!U || ad) && u[2]
                  ? " title='" + u[2].replace(/'/g, "&#39;") + "'"
                  : "") +
                (ak
                  ? ""
                  : " data-handler='selectDay' data-event='click' data-month='" +
                    X.getMonth() +
                    "' data-year='" +
                    X.getFullYear() +
                    "'") +
                ">" +
                (U && !ad
                  ? "&#xa0;"
                  : ak
                  ? "<span class='ui-state-default'>" + X.getDate() + "</span>"
                  : "<a class='ui-state-default" +
                    (X.getTime() === aj.getTime()
                      ? " ui-state-highlight"
                      : "") +
                    (X.getTime() === o.getTime() ? " ui-state-active" : "") +
                    (U ? " ui-priority-secondary" : "") +
                    "' href='#'>" +
                    X.getDate() +
                    "</a>") +
                "</td>";
              X.setDate(X.getDate() + 1);
              X = this._daylightSavingAdjust(X);
            }
            k += ag + "</tr>";
          }
          y++;
          if (y > 11) {
            y = 0;
            z++;
          }
          k +=
            "</tbody></table>" +
            (H
              ? "</div>" +
                (S[0] > 0 && l === S[1] - 1
                  ? "<div class='ui-datepicker-row-break'></div>"
                  : "")
              : "");
          D += k;
        }
        F += D;
      }
      F += j;
      G._keyEvent = false;
      return F;
    },
    _generateMonthYearHeader: function (r, l, m, t, s, y, w, x) {
      var q,
        p,
        u,
        C,
        A,
        k,
        B,
        n,
        h = this._get(r, "changeMonth"),
        j = this._get(r, "changeYear"),
        z = this._get(r, "showMonthAfterYear"),
        o = "<div class='ui-datepicker-title'>",
        v = "";
      if (y || !h) {
        v += "<span class='ui-datepicker-month'>" + w[l] + "</span>";
      } else {
        q = t && t.getFullYear() === m;
        p = s && s.getFullYear() === m;
        v +=
          "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
        for (u = 0; u < 12; u++) {
          if ((!q || u >= t.getMonth()) && (!p || u <= s.getMonth())) {
            v +=
              "<option value='" +
              u +
              "'" +
              (u === l ? " selected='selected'" : "") +
              ">" +
              x[u] +
              "</option>";
          }
        }
        v += "</select>";
      }
      if (!z) {
        o += v + (y || !(h && j) ? "&#xa0;" : "");
      }
      if (!r.yearshtml) {
        r.yearshtml = "";
        if (y || !j) {
          o += "<span class='ui-datepicker-year'>" + m + "</span>";
        } else {
          C = this._get(r, "yearRange").split(":");
          A = new Date().getFullYear();
          k = function (D) {
            var E = D.match(/c[+\-].*/)
              ? m + parseInt(D.substring(1), 10)
              : D.match(/[+\-].*/)
              ? A + parseInt(D, 10)
              : parseInt(D, 10);
            return isNaN(E) ? A : E;
          };
          B = k(C[0]);
          n = Math.max(B, k(C[1] || ""));
          B = t ? Math.max(B, t.getFullYear()) : B;
          n = s ? Math.min(n, s.getFullYear()) : n;
          r.yearshtml +=
            "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
          for (; B <= n; B++) {
            r.yearshtml +=
              "<option value='" +
              B +
              "'" +
              (B === m ? " selected='selected'" : "") +
              ">" +
              B +
              "</option>";
          }
          r.yearshtml += "</select>";
          o += r.yearshtml;
          r.yearshtml = null;
        }
      }
      o += this._get(r, "yearSuffix");
      if (z) {
        o += (y || !(h && j) ? "&#xa0;" : "") + v;
      }
      o += "</div>";
      return o;
    },
    _adjustInstDate: function (k, m, n) {
      var o = k.drawYear + (n === "Y" ? m : 0),
        l = k.drawMonth + (n === "M" ? m : 0),
        j =
          Math.min(k.selectedDay, this._getDaysInMonth(o, l)) +
          (n === "D" ? m : 0),
        h = this._restrictMinMax(
          k,
          this._daylightSavingAdjust(new Date(o, l, j))
        );
      k.selectedDay = h.getDate();
      k.drawMonth = k.selectedMonth = h.getMonth();
      k.drawYear = k.selectedYear = h.getFullYear();
      if (n === "M" || n === "Y") {
        this._notifyChange(k);
      }
    },
    _restrictMinMax: function (j, h) {
      var l = this._getMinMaxDate(j, "min"),
        k = this._getMinMaxDate(j, "max"),
        m = l && h < l ? l : h;
      return k && m > k ? k : m;
    },
    _notifyChange: function (h) {
      var j = this._get(h, "onChangeMonthYear");
      if (j) {
        j.apply(h.input ? h.input[0] : null, [
          h.selectedYear,
          h.selectedMonth + 1,
          h,
        ]);
      }
    },
    _getNumberOfMonths: function (h) {
      var j = this._get(h, "numberOfMonths");
      return j == null ? [1, 1] : typeof j === "number" ? [1, j] : j;
    },
    _getMinMaxDate: function (h, j) {
      return this._determineDate(h, this._get(h, j + "Date"), null);
    },
    _getDaysInMonth: function (j, h) {
      return 32 - this._daylightSavingAdjust(new Date(j, h, 32)).getDate();
    },
    _getFirstDayOfMonth: function (j, h) {
      return new Date(j, h, 1).getDay();
    },
    _canAdjustMonth: function (l, n, j, h) {
      var m = this._getNumberOfMonths(l),
        k = this._daylightSavingAdjust(
          new Date(j, h + (n < 0 ? n : m[0] * m[1]), 1)
        );
      if (n < 0) {
        k.setDate(this._getDaysInMonth(k.getFullYear(), k.getMonth()));
      }
      return this._isInRange(l, k);
    },
    _isInRange: function (k, j) {
      var q,
        h,
        n = this._getMinMaxDate(k, "min"),
        l = this._getMinMaxDate(k, "max"),
        o = null,
        m = null,
        p = this._get(k, "yearRange");
      if (p) {
        q = p.split(":");
        h = new Date().getFullYear();
        o = parseInt(q[0], 10);
        m = parseInt(q[1], 10);
        if (q[0].match(/[+\-].*/)) {
          o += h;
        }
        if (q[1].match(/[+\-].*/)) {
          m += h;
        }
      }
      return (
        (!n || j.getTime() >= n.getTime()) &&
        (!l || j.getTime() <= l.getTime()) &&
        (!o || j.getFullYear() >= o) &&
        (!m || j.getFullYear() <= m)
      );
    },
    _getFormatConfig: function (h) {
      var j = this._get(h, "shortYearCutoff");
      j =
        typeof j !== "string"
          ? j
          : (new Date().getFullYear() % 100) + parseInt(j, 10);
      return {
        shortYearCutoff: j,
        dayNamesShort: this._get(h, "dayNamesShort"),
        dayNames: this._get(h, "dayNames"),
        monthNamesShort: this._get(h, "monthNamesShort"),
        monthNames: this._get(h, "monthNames"),
      };
    },
    _formatDate: function (k, j, l, m) {
      if (!j) {
        k.currentDay = k.selectedDay;
        k.currentMonth = k.selectedMonth;
        k.currentYear = k.selectedYear;
      }
      var h = j
        ? typeof j === "object"
          ? j
          : this._daylightSavingAdjust(new Date(m, l, j))
        : this._daylightSavingAdjust(
            new Date(k.currentYear, k.currentMonth, k.currentDay)
          );
      return this.formatDate(
        this._get(k, "dateFormat"),
        h,
        this._getFormatConfig(k)
      );
    },
  });
  function b(h) {
    var j =
      "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
    return h
      .delegate(j, "mouseout", function () {
        a(this).removeClass("ui-state-hover");
        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
          a(this).removeClass("ui-datepicker-prev-hover");
        }
        if (this.className.indexOf("ui-datepicker-next") !== -1) {
          a(this).removeClass("ui-datepicker-next-hover");
        }
      })
      .delegate(j, "mouseover", function () {
        if (
          !a.datepicker._isDisabledDatepicker(
            e.inline ? h.parent()[0] : e.input[0]
          )
        ) {
          a(this)
            .parents(".ui-datepicker-calendar")
            .find("a")
            .removeClass("ui-state-hover");
          a(this).addClass("ui-state-hover");
          if (this.className.indexOf("ui-datepicker-prev") !== -1) {
            a(this).addClass("ui-datepicker-prev-hover");
          }
          if (this.className.indexOf("ui-datepicker-next") !== -1) {
            a(this).addClass("ui-datepicker-next-hover");
          }
        }
      });
  }
  function d(k, j) {
    a.extend(k, j);
    for (var h in j) {
      if (j[h] == null) {
        k[h] = j[h];
      }
    }
    return k;
  }
  a.fn.datepicker = function (h) {
    if (!this.length) {
      return this;
    }
    if (!a.datepicker.initialized) {
      a(document).mousedown(a.datepicker._checkExternalClick);
      a.datepicker.initialized = true;
    }
    if (a("#" + a.datepicker._mainDivId).length === 0) {
      a("body").append(a.datepicker.dpDiv);
    }
    var j = Array.prototype.slice.call(arguments, 1);
    if (
      typeof h === "string" &&
      (h === "isDisabled" || h === "getDate" || h === "widget")
    ) {
      return a.datepicker["_" + h + "Datepicker"].apply(
        a.datepicker,
        [this[0]].concat(j)
      );
    }
    if (
      h === "option" &&
      arguments.length === 2 &&
      typeof arguments[1] === "string"
    ) {
      return a.datepicker["_" + h + "Datepicker"].apply(
        a.datepicker,
        [this[0]].concat(j)
      );
    }
    return this.each(function () {
      typeof h === "string"
        ? a.datepicker["_" + h + "Datepicker"].apply(
            a.datepicker,
            [this].concat(j)
          )
        : a.datepicker._attachDatepicker(this, h);
    });
  };
  a.datepicker = new c();
  a.datepicker.initialized = false;
  a.datepicker.uuid = new Date().getTime();
  a.datepicker.version = "1.10.4";
})(jQuery);
(function (a, d) {
  var c = {
      buttons: true,
      height: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      width: true,
    },
    b = { maxHeight: true, maxWidth: true, minHeight: true, minWidth: true };
  a.widget("ui.dialog", {
    version: "1.10.4",
    options: {
      appendTo: "body",
      autoOpen: true,
      buttons: [],
      extendButtons: null,
      closeOnEscape: true,
      closeText: "close",
      dialogClass: "",
      draggable: true,
      hide: null,
      height: "auto",
      maxHeight: null,
      maxWidth: null,
      minHeight: 150,
      minWidth: 150,
      modal: false,
      position: {
        my: "center",
        at: "center",
        of: window,
        collision: "fit",
        using: function (e) {
          var f = a(this).css(e).offset().top;
          if (f < 0) {
            a(this).css("top", e.top - f);
          }
        },
      },
      resizable: true,
      show: null,
      title: null,
      width: 300,
      beforeClose: null,
      close: null,
      drag: null,
      dragStart: null,
      dragStop: null,
      focus: null,
      open: null,
      resize: null,
      resizeStart: null,
      resizeStop: null,
    },
    _create: function () {
      this.originalCss = {
        display: this.element[0].style.display,
        width: this.element[0].style.width,
        minHeight: this.element[0].style.minHeight,
        maxHeight: this.element[0].style.maxHeight,
        height: this.element[0].style.height,
      };
      this.originalPosition = {
        parent: this.element.parent(),
        index: this.element.parent().children().index(this.element),
      };
      this.originalTitle = this.element.attr("title");
      this.options.title = this.options.title || this.originalTitle;
      this._createWrapper();
      this.element
        .show()
        .removeAttr("title")
        .addClass("ui-dialog-content ui-widget-content")
        .appendTo(this.uiDialog);
      this._createTitlebar();
      this._createButtonPane();
      if (this.options.draggable && a.fn.draggable) {
        this._makeDraggable();
      }
      if (this.options.resizable && a.fn.resizable) {
        this._makeResizable();
      }
      this._isOpen = false;
    },
    _init: function () {
      if (this.options.autoOpen) {
        this.open();
      }
    },
    _appendTo: function () {
      var e = this.options.appendTo;
      if (e && (e.jquery || e.nodeType)) {
        return a(e);
      }
      return this.document.find(e || "body").eq(0);
    },
    _destroy: function () {
      var e,
        f = this.originalPosition;
      this._destroyOverlay();
      this.element
        .removeUniqueId()
        .removeClass("ui-dialog-content ui-widget-content")
        .css(this.originalCss)
        .detach();
      this.uiDialog.stop(true, true).remove();
      if (this.originalTitle) {
        this.element.attr("title", this.originalTitle);
      }
      e = f.parent.children().eq(f.index);
      if (e.length && e[0] !== this.element[0]) {
        e.before(this.element);
      } else {
        f.parent.append(this.element);
      }
    },
    widget: function () {
      return this.uiDialog;
    },
    disable: a.noop,
    enable: a.noop,
    close: function (g) {
      var e,
        h = this;
      if (!this._isOpen || this._trigger("beforeClose", g) === false) {
        return;
      }
      this._isOpen = false;
      this._destroyOverlay();
      if (!this.opener.filter(":focusable").focus().length) {
        try {
          e = this.document[0].activeElement;
          if (e && e.nodeName.toLowerCase() !== "body") {
            a(e).blur();
          }
        } catch (f) {}
      }
      this._hide(this.uiDialog, this.options.hide, function () {
        h._trigger("close", g);
      });
    },
    isOpen: function () {
      return this._isOpen;
    },
    moveToTop: function () {
      this._moveToTop();
    },
    _moveToTop: function (e, g) {
      var f = !!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog)
        .length;
      if (f && !g) {
        this._trigger("focus", e);
      }
      return f;
    },
    open: function () {
      var e = this;
      if (this._isOpen) {
        if (this._moveToTop()) {
          this._focusTabbable();
        }
        return;
      }
      this._isOpen = true;
      this.opener = a(this.document[0].activeElement);
      this._size();
      this._position();
      this._createOverlay();
      this._moveToTop(null, true);
      this._show(this.uiDialog, this.options.show, function () {
        e._focusTabbable();
        e._trigger("focus");
      });
      this._trigger("open");
    },
    _focusTabbable: function () {
      var e = this.element.find("[autofocus]");
      if (!e.length) {
        e = this.element.find(":tabbable");
      }
      if (!e.length) {
        e = this.uiDialogButtonPane.find(":tabbable");
      }
      if (!e.length) {
        e = this.uiDialogTitlebarClose.filter(":tabbable");
      }
      if (!e.length) {
        e = this.uiDialog;
      }
      e.eq(0).focus();
    },
    _keepFocus: function (f) {
      function e() {
        var g = this.document[0].activeElement,
          h = this.uiDialog[0] === g || a.contains(this.uiDialog[0], g);
        if (!h) {
          this._focusTabbable();
        }
      }
      f.preventDefault();
      e.call(this);
      this._delay(e);
    },
    _createWrapper: function () {
      this.uiDialog = a("<div>")
        .addClass(
          "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
            this.options.dialogClass
        )
        .hide()
        .attr({ tabIndex: -1, role: "dialog" })
        .appendTo(this._appendTo());
      this._on(this.uiDialog, {
        keydown: function (e) {
          if (
            this.options.closeOnEscape &&
            !e.isDefaultPrevented() &&
            e.keyCode &&
            e.keyCode === a.ui.keyCode.ESCAPE
          ) {
            e.preventDefault();
            this.close(e);
            return;
          }
          if (e.keyCode !== a.ui.keyCode.TAB) {
            return;
          }
          var h = this.uiDialog.find(":tabbable"),
            f = h.filter(":first"),
            g = h.filter(":last");
          if (
            (e.target === g[0] || e.target === this.uiDialog[0]) &&
            !e.shiftKey
          ) {
            f.focus(1);
            e.preventDefault();
          } else {
            if (
              (e.target === f[0] || e.target === this.uiDialog[0]) &&
              e.shiftKey
            ) {
              g.focus(1);
              e.preventDefault();
            }
          }
        },
        mousedown: function (e) {
          if (this._moveToTop(e)) {
            this._focusTabbable();
          }
        },
      });
      if (!this.element.find("[aria-describedby]").length) {
        this.uiDialog.attr({
          "aria-describedby": this.element.uniqueId().attr("id"),
        });
      }
    },
    _createTitlebar: function () {
      var e;
      this.uiDialogTitlebar = a("<div>")
        .addClass(
          "ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix"
        )
        .prependTo(this.uiDialog);
      this._on(this.uiDialogTitlebar, {
        mousedown: function (f) {
          if (!a(f.target).closest(".ui-dialog-titlebar-close")) {
            this.uiDialog.focus();
          }
        },
      });
      this.uiDialogTitlebarClose = a("<button type='button'></button>")
        .button({
          label: this.options.closeText,
          icons: { primary: "ui-icon-closethick" },
          text: false,
        })
        .addClass("ui-dialog-titlebar-close")
        .appendTo(this.uiDialogTitlebar);
      this._on(this.uiDialogTitlebarClose, {
        click: function (f) {
          f.preventDefault();
          this.close(f);
        },
      });
      e = a("<span>")
        .uniqueId()
        .addClass("ui-dialog-title")
        .prependTo(this.uiDialogTitlebar);
      this._title(e);
      this.uiDialog.attr({ "aria-labelledby": e.attr("id") });
    },
    _title: function (e) {
      if (!this.options.title) {
        e.html("&#160;");
      }
      e.text(this.options.title);
    },
    _createButtonPane: function () {
      this.uiDialogButtonPane = a("<div>").addClass(
        "ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"
      );
      this.uiButtonSet = a("<div>")
        .addClass("ui-dialog-buttonset")
        .appendTo(this.uiDialogButtonPane);
      this._createButtons();
    },
    _createButtons: function () {
      var g = this,
        e = this.options.buttons;
      this.uiDialogButtonPane.remove();
      this.uiButtonSet.empty();
      if (a.isEmptyObject(e) || (a.isArray(e) && !e.length)) {
        this.uiDialog.removeClass("ui-dialog-buttons");
        return;
      }
      a.each(e, function (k, l) {
        var j, h;
        l = a.isFunction(l) ? { click: l, text: k } : l;
        l = a.extend({ type: "button" }, l);
        j = l.click;
        l.click = function () {
          j.apply(g.element[0], arguments);
        };
        h = { icons: l.icons, text: l.showText };
        delete l.icons;
        delete l.showText;
        a("<button></button>", l).button(h).appendTo(g.uiButtonSet);
      });
      this.uiDialog.addClass("ui-dialog-buttons");
      var f = this.options.extendButtons;
      if (f) {
        this.uiDialog.append(f);
      }
      this.uiDialogButtonPane.appendTo(this.uiDialog);
    },
    _makeDraggable: function () {
      var g = this,
        f = this.options;
      function e(h) {
        return { position: h.position, offset: h.offset };
      }
      this.uiDialog.draggable({
        cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
        handle: ".ui-dialog-titlebar",
        containment: "document",
        start: function (h, j) {
          a(this).addClass("ui-dialog-dragging");
          g._blockFrames();
          g._trigger("dragStart", h, e(j));
        },
        drag: function (h, j) {
          g._trigger("drag", h, e(j));
        },
        stop: function (h, j) {
          f.position = [
            j.position.left - g.document.scrollLeft(),
            j.position.top - g.document.scrollTop(),
          ];
          a(this).removeClass("ui-dialog-dragging");
          g._unblockFrames();
          g._trigger("dragStop", h, e(j));
        },
      });
    },
    _makeResizable: function () {
      var k = this,
        g = this.options,
        f = g.resizable,
        h = this.uiDialog.css("position"),
        j = typeof f === "string" ? f : "n,e,s,w,se,sw,ne,nw";
      function e(l) {
        return {
          originalPosition: l.originalPosition,
          originalSize: l.originalSize,
          position: l.position,
          size: l.size,
        };
      }
      this.uiDialog
        .resizable({
          cancel: ".ui-dialog-content",
          containment: "document",
          alsoResize: this.element,
          maxWidth: g.maxWidth,
          maxHeight: g.maxHeight,
          minWidth: g.minWidth,
          minHeight: this._minHeight(),
          handles: j,
          start: function (l, m) {
            a(this).addClass("ui-dialog-resizing");
            k._blockFrames();
            k._trigger("resizeStart", l, e(m));
          },
          resize: function (l, m) {
            k._trigger("resize", l, e(m));
          },
          stop: function (l, m) {
            g.height = a(this).height();
            g.width = a(this).width();
            a(this).removeClass("ui-dialog-resizing");
            k._unblockFrames();
            k._trigger("resizeStop", l, e(m));
          },
        })
        .css("position", h);
    },
    _minHeight: function () {
      var e = this.options;
      return e.height === "auto"
        ? e.minHeight
        : Math.min(e.minHeight, e.height);
    },
    _position: function () {
      var e = this.uiDialog.is(":visible");
      if (!e) {
        this.uiDialog.show();
      }
      this.uiDialog.position(this.options.position);
      if (!e) {
        this.uiDialog.hide();
      }
    },
    _setOptions: function (e) {
      var h = this,
        g = false,
        f = {};
      a.each(e, function (j, k) {
        h._setOption(j, k);
        if (j in c) {
          g = true;
        }
        if (j in b) {
          f[j] = k;
        }
      });
      if (g) {
        this._size();
        this._position();
      }
      if (this.uiDialog.is(":data(ui-resizable)")) {
        this.uiDialog.resizable("option", f);
      }
    },
    _setOption: function (g, j) {
      var e,
        f,
        h = this.uiDialog;
      if (g === "dialogClass") {
        h.removeClass(this.options.dialogClass).addClass(j);
      }
      if (g === "disabled") {
        return;
      }
      this._super(g, j);
      if (g === "appendTo") {
        this.uiDialog.appendTo(this._appendTo());
      }
      if (g === "buttons") {
        this._createButtons();
      }
      if (g === "closeText") {
        this.uiDialogTitlebarClose.button({ label: "" + j });
      }
      if (g === "draggable") {
        e = h.is(":data(ui-draggable)");
        if (e && !j) {
          h.draggable("destroy");
        }
        if (!e && j) {
          this._makeDraggable();
        }
      }
      if (g === "position") {
        this._position();
      }
      if (g === "resizable") {
        f = h.is(":data(ui-resizable)");
        if (f && !j) {
          h.resizable("destroy");
        }
        if (f && typeof j === "string") {
          h.resizable("option", "handles", j);
        }
        if (!f && j !== false) {
          this._makeResizable();
        }
      }
      if (g === "title") {
        this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
      }
    },
    _size: function () {
      var g,
        f,
        e,
        h = this.options;
      this.element
        .show()
        .css({ width: "auto", minHeight: 0, maxHeight: "none", height: 0 });
      if (h.minWidth > h.width) {
        h.width = h.minWidth;
      }
      g = this.uiDialog.css({ height: "auto", width: h.width }).outerHeight();
      f = Math.max(0, h.minHeight - g);
      e =
        typeof h.maxHeight === "number" ? Math.max(0, h.maxHeight - g) : "none";
      if (h.height === "auto") {
        this.element.css({ minHeight: f, maxHeight: e, height: "auto" });
      } else {
        this.element.height(Math.max(0, h.height - g));
      }
      if (this.uiDialog.is(":data(ui-resizable)")) {
        this.uiDialog.resizable("option", "minHeight", this._minHeight());
      }
    },
    _blockFrames: function () {
      this.iframeBlocks = this.document.find("iframe").map(function () {
        var e = a(this);
        return a("<div>")
          .css({
            position: "absolute",
            width: e.outerWidth(),
            height: e.outerHeight(),
          })
          .appendTo(e.parent())
          .offset(e.offset())[0];
      });
    },
    _unblockFrames: function () {
      if (this.iframeBlocks) {
        this.iframeBlocks.remove();
        delete this.iframeBlocks;
      }
    },
    _allowInteraction: function (e) {
      if (a(e.target).closest(".ui-dialog").length) {
        return true;
      }
      return !!a(e.target).closest(".ui-datepicker").length;
    },
    _createOverlay: function () {
      if (!this.options.modal) {
        return;
      }
      var e = this,
        f = this.widgetFullName;
      if (!a.ui.dialog.overlayInstances) {
        this._delay(function () {
          if (a.ui.dialog.overlayInstances) {
            this.document.bind("focusin.dialog", function (g) {
              if (!e._allowInteraction(g)) {
                g.preventDefault();
                a(".ui-dialog:visible:last .ui-dialog-content")
                  .data(f)
                  ._focusTabbable();
              }
            });
          }
        });
      }
      this.overlay = a("<div>")
        .addClass("ui-widget-overlay ui-front")
        .appendTo(this._appendTo());
      this._on(this.overlay, { mousedown: "_keepFocus" });
      a.ui.dialog.overlayInstances++;
    },
    _destroyOverlay: function () {
      if (!this.options.modal) {
        return;
      }
      if (this.overlay) {
        a.ui.dialog.overlayInstances--;
        if (!a.ui.dialog.overlayInstances) {
          this.document.unbind("focusin.dialog");
        }
        this.overlay.remove();
        this.overlay = null;
      }
    },
  });
  a.ui.dialog.overlayInstances = 0;
  if (a.uiBackCompat !== false) {
    a.widget("ui.dialog", a.ui.dialog, {
      _position: function () {
        var h = this.options.position,
          f = [],
          g = [0, 0],
          e;
        if (h) {
          if (typeof h === "string" || (typeof h === "object" && "0" in h)) {
            f = h.split ? h.split(" ") : [h[0], h[1]];
            if (f.length === 1) {
              f[1] = f[0];
            }
            a.each(["left", "top"], function (j, k) {
              if (+f[j] === f[j]) {
                g[j] = f[j];
                f[j] = k;
              }
            });
            h = {
              my:
                f[0] +
                (g[0] < 0 ? g[0] : "+" + g[0]) +
                " " +
                f[1] +
                (g[1] < 0 ? g[1] : "+" + g[1]),
              at: f.join(" "),
            };
          }
          h = a.extend({}, a.ui.dialog.prototype.options.position, h);
        } else {
          h = a.ui.dialog.prototype.options.position;
        }
        e = this.uiDialog.is(":visible");
        if (!e) {
          this.uiDialog.show();
        }
        this.uiDialog.position(h);
        if (!e) {
          this.uiDialog.hide();
        }
      },
    });
  }
})(jQuery);
(function (a, b) {
  a.widget("ui.menu", {
    version: "1.10.4",
    defaultElement: "<ul>",
    delay: 300,
    options: {
      icons: { submenu: "ui-icon-carat-1-e" },
      menus: "ul",
      position: { my: "left top", at: "right top" },
      role: "menu",
      blur: null,
      focus: null,
      select: null,
    },
    _create: function () {
      this.activeMenu = this.element;
      this.mouseHandled = false;
      this.element
        .uniqueId()
        .addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
        .toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length)
        .attr({ role: this.options.role, tabIndex: 0 })
        .bind(
          "click" + this.eventNamespace,
          a.proxy(function (c) {
            if (this.options.disabled) {
              c.preventDefault();
            }
          }, this)
        );
      if (this.options.disabled) {
        this.element
          .addClass("ui-state-disabled")
          .attr("aria-disabled", "true");
      }
      this._on({
        "mousedown .ui-menu-item > a": function (c) {
          c.preventDefault();
        },
        "click .ui-state-disabled > a": function (c) {
          c.preventDefault();
        },
        "click .ui-menu-item:has(a)": function (c) {
          var d = a(c.target).closest(".ui-menu-item");
          if (!this.mouseHandled && d.not(".ui-state-disabled").length) {
            this.select(c);
            if (!c.isPropagationStopped()) {
              this.mouseHandled = true;
            }
            if (d.has(".ui-menu").length) {
              this.expand(c);
            } else {
              if (
                !this.element.is(":focus") &&
                a(this.document[0].activeElement).closest(".ui-menu").length
              ) {
                this.element.trigger("focus", [true]);
                if (
                  this.active &&
                  this.active.parents(".ui-menu").length === 1
                ) {
                  clearTimeout(this.timer);
                }
              }
            }
          }
        },
        "mouseenter .ui-menu-item": function (c) {
          var d = a(c.currentTarget);
          d.siblings()
            .children(".ui-state-active")
            .removeClass("ui-state-active");
          this.focus(c, d);
        },
        mouseleave: "collapseAll",
        "mouseleave .ui-menu": "collapseAll",
        focus: function (c, e) {
          var d = this.active || this.element.children(".ui-menu-item").eq(0);
          if (!e) {
            this.focus(c, d);
          }
        },
        blur: function (c) {
          this._delay(function () {
            if (!a.contains(this.element[0], this.document[0].activeElement)) {
              this.collapseAll(c);
            }
          });
        },
        keydown: "_keydown",
      });
      this.refresh();
      this._on(this.document, {
        click: function (c) {
          if (!a(c.target).closest(".ui-menu").length) {
            this.collapseAll(c);
          }
          this.mouseHandled = false;
        },
      });
    },
    _destroy: function () {
      this.element
        .removeAttr("aria-activedescendant")
        .find(".ui-menu")
        .addBack()
        .removeClass(
          "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons"
        )
        .removeAttr("role")
        .removeAttr("tabIndex")
        .removeAttr("aria-labelledby")
        .removeAttr("aria-expanded")
        .removeAttr("aria-hidden")
        .removeAttr("aria-disabled")
        .removeUniqueId()
        .show();
      this.element
        .find(".ui-menu-item")
        .removeClass("ui-menu-item")
        .removeAttr("role")
        .removeAttr("aria-disabled")
        .children("a")
        .removeUniqueId()
        .removeClass("ui-corner-all ui-state-hover")
        .removeAttr("tabIndex")
        .removeAttr("role")
        .removeAttr("aria-haspopup")
        .children()
        .each(function () {
          var c = a(this);
          if (c.data("ui-menu-submenu-carat")) {
            c.remove();
          }
        });
      this.element
        .find(".ui-menu-divider")
        .removeClass("ui-menu-divider ui-widget-content");
    },
    _keydown: function (e) {
      var f,
        g,
        c,
        k,
        j,
        h = true;
      function d(l) {
        return l.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
      }
      switch (e.keyCode) {
        case a.ui.keyCode.PAGE_UP:
          this.previousPage(e);
          break;
        case a.ui.keyCode.PAGE_DOWN:
          this.nextPage(e);
          break;
        case a.ui.keyCode.HOME:
          this._move("first", "first", e);
          break;
        case a.ui.keyCode.END:
          this._move("last", "last", e);
          break;
        case a.ui.keyCode.UP:
          this.previous(e);
          break;
        case a.ui.keyCode.DOWN:
          this.next(e);
          break;
        case a.ui.keyCode.LEFT:
          this.collapse(e);
          break;
        case a.ui.keyCode.RIGHT:
          if (this.active && !this.active.is(".ui-state-disabled")) {
            this.expand(e);
          }
          break;
        case a.ui.keyCode.ENTER:
        case a.ui.keyCode.SPACE:
          this._activate(e);
          break;
        case a.ui.keyCode.ESCAPE:
          this.collapse(e);
          break;
        default:
          h = false;
          g = this.previousFilter || "";
          c = String.fromCharCode(e.keyCode);
          k = false;
          clearTimeout(this.filterTimer);
          if (c === g) {
            k = true;
          } else {
            c = g + c;
          }
          j = new RegExp("^" + d(c), "i");
          f = this.activeMenu.children(".ui-menu-item").filter(function () {
            return j.test(a(this).children("a").text());
          });
          f =
            k && f.index(this.active.next()) !== -1
              ? this.active.nextAll(".ui-menu-item")
              : f;
          if (!f.length) {
            c = String.fromCharCode(e.keyCode);
            j = new RegExp("^" + d(c), "i");
            f = this.activeMenu.children(".ui-menu-item").filter(function () {
              return j.test(a(this).children("a").text());
            });
          }
          if (f.length) {
            this.focus(e, f);
            if (f.length > 1) {
              this.previousFilter = c;
              this.filterTimer = this._delay(function () {
                delete this.previousFilter;
              }, 1000);
            } else {
              delete this.previousFilter;
            }
          } else {
            delete this.previousFilter;
          }
      }
      if (h) {
        e.preventDefault();
      }
    },
    _activate: function (c) {
      if (!this.active.is(".ui-state-disabled")) {
        if (this.active.children("a[aria-haspopup='true']").length) {
          this.expand(c);
        } else {
          this.select(c);
        }
      }
    },
    refresh: function () {
      var d,
        c = this.options.icons.submenu,
        e = this.element.find(this.options.menus);
      this.element.toggleClass(
        "ui-menu-icons",
        !!this.element.find(".ui-icon").length
      );
      e.filter(":not(.ui-menu)")
        .addClass("ui-menu ui-widget ui-widget-content ui-corner-all")
        .hide()
        .attr({
          role: this.options.role,
          "aria-hidden": "true",
          "aria-expanded": "false",
        })
        .each(function () {
          var g = a(this),
            f = g.prev("a"),
            h = a("<span>")
              .addClass("ui-menu-icon ui-icon " + c)
              .data("ui-menu-submenu-carat", true);
          f.attr("aria-haspopup", "true").prepend(h);
          g.attr("aria-labelledby", f.attr("id"));
        });
      d = e.add(this.element);
      d.children(":not(.ui-menu-item):has(a)")
        .addClass("ui-menu-item")
        .attr("role", "presentation")
        .children("a")
        .uniqueId()
        .addClass("ui-corner-all")
        .attr({ tabIndex: -1, role: this._itemRole() });
      d.children(":not(.ui-menu-item)").each(function () {
        var f = a(this);
        if (!/[^\-\u2014\u2013\s]/.test(f.text())) {
          f.addClass("ui-widget-content ui-menu-divider");
        }
      });
      d.children(".ui-state-disabled").attr("aria-disabled", "true");
      if (this.active && !a.contains(this.element[0], this.active[0])) {
        this.blur();
      }
    },
    _itemRole: function () {
      return { menu: "menuitem", listbox: "option" }[this.options.role];
    },
    _setOption: function (c, d) {
      if (c === "icons") {
        this.element
          .find(".ui-menu-icon")
          .removeClass(this.options.icons.submenu)
          .addClass(d.submenu);
      }
      this._super(c, d);
    },
    focus: function (c, e) {
      var f, d;
      this.blur(c, c && c.type === "focus");
      this._scrollIntoView(e);
      this.active = e.first();
      d = this.active.children("a").addClass("ui-state-focus");
      if (this.options.role) {
        this.element.attr("aria-activedescendant", d.attr("id"));
      }
      this.active
        .parent()
        .closest(".ui-menu-item")
        .children("a:first")
        .addClass("ui-state-active");
      if (c && c.type === "keydown") {
        this._close();
      } else {
        this.timer = this._delay(function () {
          this._close();
        }, this.delay);
      }
      f = e.children(".ui-menu");
      if (f.length && c && /^mouse/.test(c.type)) {
        this._startOpening(f);
      }
      this.activeMenu = e.parent();
      this._trigger("focus", c, { item: e });
    },
    _scrollIntoView: function (e) {
      var c, h, g, j, d, f;
      if (this._hasScroll()) {
        c = parseFloat(a.css(this.activeMenu[0], "borderTopWidth")) || 0;
        h = parseFloat(a.css(this.activeMenu[0], "paddingTop")) || 0;
        g = e.offset().top - this.activeMenu.offset().top - c - h;
        j = this.activeMenu.scrollTop();
        d = this.activeMenu.height();
        f = e.height();
        if (g < 0) {
          this.activeMenu.scrollTop(j + g);
        } else {
          if (g + f > d) {
            this.activeMenu.scrollTop(j + g - d + f);
          }
        }
      }
    },
    blur: function (c, d) {
      if (!d) {
        clearTimeout(this.timer);
      }
      if (!this.active) {
        return;
      }
      this.active.children("a").removeClass("ui-state-focus");
      this.active = null;
      this._trigger("blur", c, { item: this.active });
    },
    _startOpening: function (c) {
      clearTimeout(this.timer);
      if (c.attr("aria-hidden") !== "true") {
        return;
      }
      this.timer = this._delay(function () {
        this._close();
        this._open(c);
      }, this.delay);
    },
    _open: function (d) {
      var c = a.extend({ of: this.active }, this.options.position);
      clearTimeout(this.timer);
      this.element
        .find(".ui-menu")
        .not(d.parents(".ui-menu"))
        .hide()
        .attr("aria-hidden", "true");
      d.show()
        .removeAttr("aria-hidden")
        .attr("aria-expanded", "true")
        .position(c);
    },
    collapseAll: function (d, c) {
      clearTimeout(this.timer);
      this.timer = this._delay(function () {
        var e = c
          ? this.element
          : a(d && d.target).closest(this.element.find(".ui-menu"));
        if (!e.length) {
          e = this.element;
        }
        this._close(e);
        this.blur(d);
        this.activeMenu = e;
      }, this.delay);
    },
    _close: function (c) {
      if (!c) {
        c = this.active ? this.active.parent() : this.element;
      }
      c.find(".ui-menu")
        .hide()
        .attr("aria-hidden", "true")
        .attr("aria-expanded", "false")
        .end()
        .find("a.ui-state-active")
        .removeClass("ui-state-active");
    },
    collapse: function (c) {
      var d =
        this.active &&
        this.active.parent().closest(".ui-menu-item", this.element);
      if (d && d.length) {
        this._close();
        this.focus(c, d);
      }
    },
    expand: function (c) {
      var d =
        this.active &&
        this.active.children(".ui-menu ").children(".ui-menu-item").first();
      if (d && d.length) {
        this._open(d.parent());
        this._delay(function () {
          this.focus(c, d);
        });
      }
    },
    next: function (c) {
      this._move("next", "first", c);
    },
    previous: function (c) {
      this._move("prev", "last", c);
    },
    isFirstItem: function () {
      return this.active && !this.active.prevAll(".ui-menu-item").length;
    },
    isLastItem: function () {
      return this.active && !this.active.nextAll(".ui-menu-item").length;
    },
    _move: function (c, e, d) {
      var f;
      if (this.active) {
        if (c === "first" || c === "last") {
          f = this.active[c === "first" ? "prevAll" : "nextAll"](
            ".ui-menu-item"
          ).eq(-1);
        } else {
          f = this.active[c + "All"](".ui-menu-item").eq(0);
        }
      }
      if (!f || !f.length || !this.active) {
        f = this.activeMenu.children(".ui-menu-item")[e]();
      }
      this.focus(d, f);
    },
    nextPage: function (d) {
      var f, c, e;
      if (!this.active) {
        this.next(d);
        return;
      }
      if (this.isLastItem()) {
        return;
      }
      if (this._hasScroll()) {
        c = this.active.offset().top;
        e = this.element.height();
        this.active.nextAll(".ui-menu-item").each(function () {
          f = a(this);
          return f.offset().top - c - e < 0;
        });
        this.focus(d, f);
      } else {
        this.focus(
          d,
          this.activeMenu
            .children(".ui-menu-item")
            [!this.active ? "first" : "last"]()
        );
      }
    },
    previousPage: function (d) {
      var f, c, e;
      if (!this.active) {
        this.next(d);
        return;
      }
      if (this.isFirstItem()) {
        return;
      }
      if (this._hasScroll()) {
        c = this.active.offset().top;
        e = this.element.height();
        this.active.prevAll(".ui-menu-item").each(function () {
          f = a(this);
          return f.offset().top - c + e > 0;
        });
        this.focus(d, f);
      } else {
        this.focus(d, this.activeMenu.children(".ui-menu-item").first());
      }
    },
    _hasScroll: function () {
      return this.element.outerHeight() < this.element.prop("scrollHeight");
    },
    select: function (c) {
      this.active = this.active || a(c.target).closest(".ui-menu-item");
      var d = { item: this.active };
      if (!this.active.has(".ui-menu").length) {
        this.collapseAll(c, true);
      }
      this._trigger("select", c, d);
    },
  });
})(jQuery);
(function (a, b) {
  a.widget("ui.progressbar", {
    version: "1.10.4",
    options: { max: 100, value: 0, change: null, complete: null },
    min: 0,
    _create: function () {
      this.oldValue = this.options.value = this._constrainedValue();
      this.element
        .addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all")
        .attr({ role: "progressbar", "aria-valuemin": this.min });
      this.valueDiv = a(
        "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>"
      ).appendTo(this.element);
      this._refreshValue();
    },
    _destroy: function () {
      this.element
        .removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all")
        .removeAttr("role")
        .removeAttr("aria-valuemin")
        .removeAttr("aria-valuemax")
        .removeAttr("aria-valuenow");
      this.valueDiv.remove();
    },
    value: function (c) {
      if (c === b) {
        return this.options.value;
      }
      this.options.value = this._constrainedValue(c);
      this._refreshValue();
    },
    _constrainedValue: function (c) {
      if (c === b) {
        c = this.options.value;
      }
      this.indeterminate = c === false;
      if (typeof c !== "number") {
        c = 0;
      }
      return this.indeterminate
        ? false
        : Math.min(this.options.max, Math.max(this.min, c));
    },
    _setOptions: function (c) {
      var d = c.value;
      delete c.value;
      this._super(c);
      this.options.value = this._constrainedValue(d);
      this._refreshValue();
    },
    _setOption: function (c, d) {
      if (c === "max") {
        d = Math.max(this.min, d);
      }
      this._super(c, d);
    },
    _percentage: function () {
      return this.indeterminate
        ? 100
        : (100 * (this.options.value - this.min)) /
            (this.options.max - this.min);
    },
    _refreshValue: function () {
      var d = this.options.value,
        c = this._percentage();
      this.valueDiv
        .toggle(this.indeterminate || d > this.min)
        .toggleClass("ui-corner-right", d === this.options.max)
        .width(c.toFixed(0) + "%");
      this.element.toggleClass(
        "ui-progressbar-indeterminate",
        this.indeterminate
      );
      if (this.indeterminate) {
        this.element.removeAttr("aria-valuenow");
        if (!this.overlayDiv) {
          this.overlayDiv = a(
            "<div class='ui-progressbar-overlay'></div>"
          ).appendTo(this.valueDiv);
        }
      } else {
        this.element.attr({
          "aria-valuemax": this.options.max,
          "aria-valuenow": d,
        });
        if (this.overlayDiv) {
          this.overlayDiv.remove();
          this.overlayDiv = null;
        }
      }
      if (this.oldValue !== d) {
        this.oldValue = d;
        this._trigger("change");
      }
      if (d === this.options.max) {
        this._trigger("complete");
      }
    },
  });
})(jQuery);
(function (a, c) {
  var b = 5;
  a.widget("ui.slider", a.ui.mouse, {
    version: "1.10.4",
    widgetEventPrefix: "slide",
    options: {
      animate: false,
      distance: 0,
      max: 100,
      min: 0,
      orientation: "horizontal",
      range: false,
      step: 1,
      value: 0,
      values: null,
      change: null,
      slide: null,
      start: null,
      stop: null,
    },
    _create: function () {
      this._keySliding = false;
      this._mouseSliding = false;
      this._animateOff = true;
      this._handleIndex = null;
      this._detectOrientation();
      this._mouseInit();
      this.element.addClass(
        "ui-slider ui-slider-" +
          this.orientation +
          " ui-widget ui-widget-content ui-corner-all"
      );
      this._refresh();
      this._setOption("disabled", this.options.disabled);
      this._animateOff = false;
    },
    _refresh: function () {
      this._createRange();
      this._createHandles();
      this._setupEvents();
      this._refreshValue();
    },
    _createHandles: function () {
      var h,
        f,
        j = this.options,
        d = this.element
          .find(".ui-slider-handle")
          .addClass("ui-state-default ui-corner-all"),
        e =
          "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
        g = [];
      f = (j.values && j.values.length) || 1;
      if (d.length > f) {
        d.slice(f).remove();
        d = d.slice(0, f);
      }
      for (h = d.length; h < f; h++) {
        g.push(e);
      }
      this.handles = d.add(a(g.join("")).appendTo(this.element));
      this.handle = this.handles.eq(0);
      this.handles.each(function (k) {
        a(this).data("ui-slider-handle-index", k);
      });
    },
    _createRange: function () {
      var e = this.options,
        d = "";
      if (e.range) {
        if (e.range === true) {
          if (!e.values) {
            e.values = [this._valueMin(), this._valueMin()];
          } else {
            if (e.values.length && e.values.length !== 2) {
              e.values = [e.values[0], e.values[0]];
            } else {
              if (a.isArray(e.values)) {
                e.values = e.values.slice(0);
              }
            }
          }
        }
        if (!this.range || !this.range.length) {
          this.range = a("<div></div>").appendTo(this.element);
          d = "ui-slider-range ui-widget-header ui-corner-all";
        } else {
          this.range
            .removeClass("ui-slider-range-min ui-slider-range-max")
            .css({ left: "", bottom: "" });
        }
        this.range.addClass(
          d +
            (e.range === "min" || e.range === "max"
              ? " ui-slider-range-" + e.range
              : "")
        );
      } else {
        if (this.range) {
          this.range.remove();
        }
        this.range = null;
      }
    },
    _setupEvents: function () {
      var d = this.handles.add(this.range).filter("a");
      this._off(d);
      this._on(d, this._handleEvents);
      this._hoverable(d);
      this._focusable(d);
    },
    _destroy: function () {
      this.handles.remove();
      if (this.range) {
        this.range.remove();
      }
      this.element.removeClass(
        "ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all"
      );
      this._mouseDestroy();
    },
    _mouseCapture: function (g) {
      var n,
        k,
        f,
        e,
        h,
        d,
        m,
        j,
        p = this,
        l = this.options;
      if (l.disabled) {
        return false;
      }
      this.elementSize = {
        width: this.element.outerWidth(),
        height: this.element.outerHeight(),
      };
      this.elementOffset = this.element.offset();
      n = { x: g.pageX, y: g.pageY };
      k = this._normValueFromMouse(n);
      f = this._valueMax() - this._valueMin() + 1;
      this.handles.each(function (o) {
        var q = Math.abs(k - p.values(o));
        if (
          f > q ||
          (f === q && (o === p._lastChangedValue || p.values(o) === l.min))
        ) {
          f = q;
          e = a(this);
          h = o;
        }
      });
      d = this._start(g, h);
      if (d === false) {
        return false;
      }
      this._mouseSliding = true;
      this._handleIndex = h;
      e.addClass("ui-state-active").focus();
      m = e.offset();
      j = !a(g.target).parents().addBack().is(".ui-slider-handle");
      this._clickOffset = j
        ? { left: 0, top: 0 }
        : {
            left: g.pageX - m.left - e.width() / 2,
            top:
              g.pageY -
              m.top -
              e.height() / 2 -
              (parseInt(e.css("borderTopWidth"), 10) || 0) -
              (parseInt(e.css("borderBottomWidth"), 10) || 0) +
              (parseInt(e.css("marginTop"), 10) || 0),
          };
      if (!this.handles.hasClass("ui-state-hover")) {
        this._slide(g, h, k);
      }
      this._animateOff = true;
      return true;
    },
    _mouseStart: function () {
      return true;
    },
    _mouseDrag: function (d) {
      var f = { x: d.pageX, y: d.pageY },
        e = this._normValueFromMouse(f);
      this._slide(d, this._handleIndex, e);
      return false;
    },
    _mouseStop: function (d) {
      this.handles.removeClass("ui-state-active");
      this._mouseSliding = false;
      this._stop(d, this._handleIndex);
      this._change(d, this._handleIndex);
      this._handleIndex = null;
      this._clickOffset = null;
      this._animateOff = false;
      return false;
    },
    _detectOrientation: function () {
      this.orientation =
        this.options.orientation === "vertical" ? "vertical" : "horizontal";
    },
    _normValueFromMouse: function (g) {
      var f, e, d, j, h;
      if (this.orientation === "horizontal") {
        f = this.elementSize.width;
        e =
          g.x -
          this.elementOffset.left -
          (this._clickOffset ? this._clickOffset.left : 0);
      } else {
        f = this.elementSize.height;
        e =
          g.y -
          this.elementOffset.top -
          (this._clickOffset ? this._clickOffset.top : 0);
      }
      d = e / f;
      if (d > 1) {
        d = 1;
      }
      if (d < 0) {
        d = 0;
      }
      if (this.orientation === "vertical") {
        d = 1 - d;
      }
      j = this._valueMax() - this._valueMin();
      h = this._valueMin() + d * j;
      return this._trimAlignValue(h);
    },
    _start: function (d, e) {
      var f = { handle: this.handles[e], value: this.value() };
      if (this.options.values && this.options.values.length) {
        f.value = this.values(e);
        f.values = this.values();
      }
      return this._trigger("start", d, f);
    },
    _slide: function (e, f, g) {
      var j, h, d;
      if (this.options.values && this.options.values.length) {
        j = this.values(f ? 0 : 1);
        if (
          this.options.values.length === 2 &&
          this.options.range === true &&
          ((f === 0 && g > j) || (f === 1 && g < j))
        ) {
          g = j;
        }
        if (g !== this.values(f)) {
          h = this.values();
          h[f] = g;
          d = this._trigger("slide", e, {
            handle: this.handles[f],
            value: g,
            values: h,
          });
          j = this.values(f ? 0 : 1);
          if (d !== false) {
            this.values(f, g);
          }
        }
      } else {
        if (g !== this.value()) {
          d = this._trigger("slide", e, { handle: this.handles[f], value: g });
          if (d !== false) {
            this.value(g);
          }
        }
      }
    },
    _stop: function (d, e) {
      var f = { handle: this.handles[e], value: this.value() };
      if (this.options.values && this.options.values.length) {
        f.value = this.values(e);
        f.values = this.values();
      }
      this._trigger("stop", d, f);
    },
    _change: function (d, e) {
      if (!this._keySliding && !this._mouseSliding) {
        var f = { handle: this.handles[e], value: this.value() };
        if (this.options.values && this.options.values.length) {
          f.value = this.values(e);
          f.values = this.values();
        }
        this._lastChangedValue = e;
        this._trigger("change", d, f);
      }
    },
    value: function (d) {
      if (arguments.length) {
        this.options.value = this._trimAlignValue(d);
        this._refreshValue();
        this._change(null, 0);
        return;
      }
      return this._value();
    },
    values: function (e, f) {
      var h, g, d;
      if (arguments.length > 1) {
        this.options.values[e] = this._trimAlignValue(f);
        this._refreshValue();
        this._change(null, e);
        return;
      }
      if (arguments.length) {
        if (a.isArray(arguments[0])) {
          h = this.options.values;
          g = arguments[0];
          for (d = 0; d < h.length; d += 1) {
            h[d] = this._trimAlignValue(g[d]);
            this._change(null, d);
          }
          this._refreshValue();
        } else {
          if (this.options.values && this.options.values.length) {
            return this._values(e);
          } else {
            return this.value();
          }
        }
      } else {
        return this._values();
      }
    },
    _setOption: function (e, g) {
      var d,
        f = 0;
      if (e === "range" && this.options.range === true) {
        if (g === "min") {
          this.options.value = this._values(0);
          this.options.values = null;
        } else {
          if (g === "max") {
            this.options.value = this._values(this.options.values.length - 1);
            this.options.values = null;
          }
        }
      }
      if (a.isArray(this.options.values)) {
        f = this.options.values.length;
      }
      a.Widget.prototype._setOption.apply(this, arguments);
      switch (e) {
        case "orientation":
          this._detectOrientation();
          this.element
            .removeClass("ui-slider-horizontal ui-slider-vertical")
            .addClass("ui-slider-" + this.orientation);
          this._refreshValue();
          break;
        case "value":
          this._animateOff = true;
          this._refreshValue();
          this._change(null, 0);
          this._animateOff = false;
          break;
        case "values":
          this._animateOff = true;
          this._refreshValue();
          for (d = 0; d < f; d += 1) {
            this._change(null, d);
          }
          this._animateOff = false;
          break;
        case "min":
        case "max":
          this._animateOff = true;
          this._refreshValue();
          this._animateOff = false;
          break;
        case "range":
          this._animateOff = true;
          this._refresh();
          this._animateOff = false;
          break;
      }
    },
    _value: function () {
      var d = this.options.value;
      d = this._trimAlignValue(d);
      return d;
    },
    _values: function (e) {
      var f, g, d;
      if (arguments.length) {
        f = this.options.values[e];
        f = this._trimAlignValue(f);
        return f;
      } else {
        if (this.options.values && this.options.values.length) {
          g = this.options.values.slice();
          for (d = 0; d < g.length; d += 1) {
            g[d] = this._trimAlignValue(g[d]);
          }
          return g;
        } else {
          return [];
        }
      }
    },
    _trimAlignValue: function (f) {
      if (f <= this._valueMin()) {
        return this._valueMin();
      }
      if (f >= this._valueMax()) {
        return this._valueMax();
      }
      var e = this.options.step > 0 ? this.options.step : 1,
        g = (f - this._valueMin()) % e,
        d = f - g;
      if (Math.abs(g) * 2 >= e) {
        d += g > 0 ? e : -e;
      }
      return parseFloat(d.toFixed(5));
    },
    _valueMin: function () {
      return this.options.min;
    },
    _valueMax: function () {
      return this.options.max;
    },
    _refreshValue: function () {
      var f,
        k,
        l,
        n,
        m,
        h = this.options.range,
        g = this.options,
        j = this,
        e = !this._animateOff ? g.animate : false,
        d = {};
      if (this.options.values && this.options.values.length) {
        this.handles.each(function (o) {
          k =
            ((j.values(o) - j._valueMin()) / (j._valueMax() - j._valueMin())) *
            100;
          d[j.orientation === "horizontal" ? "left" : "bottom"] = k + "%";
          a(this).stop(1, 1)[e ? "animate" : "css"](d, g.animate);
          if (j.options.range === true) {
            if (j.orientation === "horizontal") {
              if (o === 0) {
                j.range
                  .stop(1, 1)
                  [e ? "animate" : "css"]({ left: k + "%" }, g.animate);
              }
              if (o === 1) {
                j.range[e ? "animate" : "css"](
                  { width: k - f + "%" },
                  { queue: false, duration: g.animate }
                );
              }
            } else {
              if (o === 0) {
                j.range
                  .stop(1, 1)
                  [e ? "animate" : "css"]({ bottom: k + "%" }, g.animate);
              }
              if (o === 1) {
                j.range[e ? "animate" : "css"](
                  { height: k - f + "%" },
                  { queue: false, duration: g.animate }
                );
              }
            }
          }
          f = k;
        });
      } else {
        l = this.value();
        n = this._valueMin();
        m = this._valueMax();
        k = m !== n ? ((l - n) / (m - n)) * 100 : 0;
        d[this.orientation === "horizontal" ? "left" : "bottom"] = k + "%";
        this.handle.stop(1, 1)[e ? "animate" : "css"](d, g.animate);
        if (h === "min" && this.orientation === "horizontal") {
          this.range
            .stop(1, 1)
            [e ? "animate" : "css"]({ width: k + "%" }, g.animate);
        }
        if (h === "max" && this.orientation === "horizontal") {
          this.range[e ? "animate" : "css"](
            { width: 100 - k + "%" },
            { queue: false, duration: g.animate }
          );
        }
        if (h === "min" && this.orientation === "vertical") {
          this.range
            .stop(1, 1)
            [e ? "animate" : "css"]({ height: k + "%" }, g.animate);
        }
        if (h === "max" && this.orientation === "vertical") {
          this.range[e ? "animate" : "css"](
            { height: 100 - k + "%" },
            { queue: false, duration: g.animate }
          );
        }
      }
    },
    _handleEvents: {
      keydown: function (f) {
        var d,
          e,
          h,
          j,
          g = a(f.target).data("ui-slider-handle-index");
        switch (f.keyCode) {
          case a.ui.keyCode.HOME:
          case a.ui.keyCode.END:
          case a.ui.keyCode.PAGE_UP:
          case a.ui.keyCode.PAGE_DOWN:
          case a.ui.keyCode.UP:
          case a.ui.keyCode.RIGHT:
          case a.ui.keyCode.DOWN:
          case a.ui.keyCode.LEFT:
            f.preventDefault();
            if (!this._keySliding) {
              this._keySliding = true;
              a(f.target).addClass("ui-state-active");
              d = this._start(f, g);
              if (d === false) {
                return;
              }
            }
            break;
        }
        j = this.options.step;
        if (this.options.values && this.options.values.length) {
          e = h = this.values(g);
        } else {
          e = h = this.value();
        }
        switch (f.keyCode) {
          case a.ui.keyCode.HOME:
            h = this._valueMin();
            break;
          case a.ui.keyCode.END:
            h = this._valueMax();
            break;
          case a.ui.keyCode.PAGE_UP:
            h = this._trimAlignValue(
              e + (this._valueMax() - this._valueMin()) / b
            );
            break;
          case a.ui.keyCode.PAGE_DOWN:
            h = this._trimAlignValue(
              e - (this._valueMax() - this._valueMin()) / b
            );
            break;
          case a.ui.keyCode.UP:
          case a.ui.keyCode.RIGHT:
            if (e === this._valueMax()) {
              return;
            }
            h = this._trimAlignValue(e + j);
            break;
          case a.ui.keyCode.DOWN:
          case a.ui.keyCode.LEFT:
            if (e === this._valueMin()) {
              return;
            }
            h = this._trimAlignValue(e - j);
            break;
        }
        this._slide(f, g, h);
      },
      click: function (d) {
        d.preventDefault();
      },
      keyup: function (d) {
        var e = a(d.target).data("ui-slider-handle-index");
        if (this._keySliding) {
          this._keySliding = false;
          this._stop(d, e);
          this._change(d, e);
          a(d.target).removeClass("ui-state-active");
        }
      },
    },
  });
})(jQuery);
(function (a) {
  function b(c) {
    return function () {
      var d = this.element.val();
      c.apply(this, arguments);
      this._refresh();
      if (d !== this.element.val()) {
        this._trigger("change");
      }
    };
  }
  a.widget("ui.spinner", {
    version: "1.10.4",
    defaultElement: "<input>",
    widgetEventPrefix: "spin",
    options: {
      culture: null,
      icons: { down: "ui-icon-triangle-1-s", up: "ui-icon-triangle-1-n" },
      incremental: true,
      max: null,
      min: null,
      numberFormat: null,
      page: 10,
      step: 1,
      change: null,
      spin: null,
      start: null,
      stop: null,
    },
    _create: function () {
      this._setOption("max", this.options.max);
      this._setOption("min", this.options.min);
      this._setOption("step", this.options.step);
      if (this.value() !== "") {
        this._value(this.element.val(), true);
      }
      this._draw();
      this._on(this._events);
      this._refresh();
      this._on(this.window, {
        beforeunload: function () {
          this.element.removeAttr("autocomplete");
        },
      });
    },
    _getCreateOptions: function () {
      var d = {},
        c = this.element;
      a.each(["min", "max", "step"], function (e, f) {
        var g = c.attr(f);
        if (g !== undefined && g.length) {
          d[f] = g;
        }
      });
      return d;
    },
    _events: {
      keydown: function (c) {
        if (this._start(c) && this._keydown(c)) {
          c.preventDefault();
        }
      },
      keyup: "_stop",
      focus: function () {
        this.previous = this.element.val();
      },
      blur: function (c) {
        if (this.cancelBlur) {
          delete this.cancelBlur;
          return;
        }
        this._stop();
        this._refresh();
        if (this.previous !== this.element.val()) {
          this._trigger("change", c);
        }
      },
      mousewheel: function (d, c) {
        if (!c) {
          return;
        }
        if (!this.spinning && !this._start(d)) {
          return false;
        }
        this._spin((c > 0 ? 1 : -1) * this.options.step, d);
        clearTimeout(this.mousewheelTimer);
        this.mousewheelTimer = this._delay(function () {
          if (this.spinning) {
            this._stop(d);
          }
        }, 100);
        d.preventDefault();
      },
      "mousedown .ui-spinner-button": function (d) {
        var e;
        e =
          this.element[0] === this.document[0].activeElement
            ? this.previous
            : this.element.val();
        function c() {
          var f = this.element[0] === this.document[0].activeElement;
          if (!f) {
            this.element.focus();
            this.previous = e;
            this._delay(function () {
              this.previous = e;
            });
          }
        }
        d.preventDefault();
        c.call(this);
        this.cancelBlur = true;
        this._delay(function () {
          delete this.cancelBlur;
          c.call(this);
        });
        if (this._start(d) === false) {
          return;
        }
        this._repeat(
          null,
          a(d.currentTarget).hasClass("ui-spinner-up") ? 1 : -1,
          d
        );
      },
      "mouseup .ui-spinner-button": "_stop",
      "mouseenter .ui-spinner-button": function (c) {
        if (!a(c.currentTarget).hasClass("ui-state-active")) {
          return;
        }
        if (this._start(c) === false) {
          return false;
        }
        this._repeat(
          null,
          a(c.currentTarget).hasClass("ui-spinner-up") ? 1 : -1,
          c
        );
      },
      "mouseleave .ui-spinner-button": "_stop",
    },
    _draw: function () {
      var c = (this.uiSpinner = this.element
        .addClass("ui-spinner-input")
        .attr("autocomplete", "off")
        .wrap(this._uiSpinnerHtml())
        .parent()
        .append(this._buttonHtml()));
      this.element.attr("role", "spinbutton");
      this.buttons = c
        .find(".ui-spinner-button")
        .attr("tabIndex", -1)
        .button()
        .removeClass("ui-corner-all");
      if (
        this.buttons.height() > Math.ceil(c.height() * 0.5) &&
        c.height() > 0
      ) {
        c.height(c.height());
      }
      if (this.options.disabled) {
        this.disable();
      }
    },
    _keydown: function (c) {
      var e = this.options,
        d = a.ui.keyCode;
      switch (c.keyCode) {
        case d.UP:
          this._repeat(null, 1, c);
          return true;
        case d.DOWN:
          this._repeat(null, -1, c);
          return true;
        case d.PAGE_UP:
          this._repeat(null, e.page, c);
          return true;
        case d.PAGE_DOWN:
          this._repeat(null, -e.page, c);
          return true;
      }
      return false;
    },
    _uiSpinnerHtml: function () {
      return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
    },
    _buttonHtml: function () {
      return (
        "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " +
        this.options.icons.up +
        "'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " +
        this.options.icons.down +
        "'>&#9660;</span></a>"
      );
    },
    _start: function (c) {
      if (!this.spinning && this._trigger("start", c) === false) {
        return false;
      }
      if (!this.counter) {
        this.counter = 1;
      }
      this.spinning = true;
      return true;
    },
    _repeat: function (d, e, c) {
      d = d || 500;
      clearTimeout(this.timer);
      this.timer = this._delay(function () {
        this._repeat(40, e, c);
      }, d);
      this._spin(e * this.options.step, c);
    },
    _spin: function (d, c) {
      var e = this.value() || 0;
      if (!this.counter) {
        this.counter = 1;
      }
      e = this._adjustValue(e + d * this._increment(this.counter));
      if (!this.spinning || this._trigger("spin", c, { value: e }) !== false) {
        this._value(e);
        this.counter++;
      }
    },
    _increment: function (c) {
      var d = this.options.incremental;
      if (d) {
        return a.isFunction(d)
          ? d(c)
          : Math.floor(
              (c * c * c) / 50000 - (c * c) / 500 + (17 * c) / 200 + 1
            );
      }
      return 1;
    },
    _precision: function () {
      var c = this._precisionOf(this.options.step);
      if (this.options.min !== null) {
        c = Math.max(c, this._precisionOf(this.options.min));
      }
      return c;
    },
    _precisionOf: function (d) {
      var e = d.toString(),
        c = e.indexOf(".");
      return c === -1 ? 0 : e.length - c - 1;
    },
    _adjustValue: function (f) {
      var d,
        c,
        e = this.options;
      d = e.min !== null ? e.min : 0;
      c = f - d;
      c = Math.round(c / e.step) * e.step;
      f = d + c;
      f = parseFloat(f.toFixed(this._precision()));
      if (e.max !== null && f > e.max) {
        return e.max;
      }
      if (e.min !== null && f < e.min) {
        return e.min;
      }
      return f;
    },
    _stop: function (c) {
      if (!this.spinning) {
        return;
      }
      clearTimeout(this.timer);
      clearTimeout(this.mousewheelTimer);
      this.counter = 0;
      this.spinning = false;
      this._trigger("stop", c);
    },
    _setOption: function (c, e) {
      if (c === "culture" || c === "numberFormat") {
        var d = this._parse(this.element.val());
        this.options[c] = e;
        this.element.val(this._format(d));
        return;
      }
      if (c === "max" || c === "min" || c === "step") {
        if (typeof e === "string") {
          e = this._parse(e);
        }
      }
      if (c === "icons") {
        this.buttons
          .first()
          .find(".ui-icon")
          .removeClass(this.options.icons.up)
          .addClass(e.up);
        this.buttons
          .last()
          .find(".ui-icon")
          .removeClass(this.options.icons.down)
          .addClass(e.down);
      }
      this._super(c, e);
      if (c === "disabled") {
        if (e) {
          this.element.prop("disabled", true);
          this.buttons.button("disable");
        } else {
          this.element.prop("disabled", false);
          this.buttons.button("enable");
        }
      }
    },
    _setOptions: b(function (c) {
      this._super(c);
      this._value(this.element.val());
    }),
    _parse: function (c) {
      if (typeof c === "string" && c !== "") {
        c =
          window.Globalize && this.options.numberFormat
            ? Globalize.parseFloat(c, 10, this.options.culture)
            : +c;
      }
      return c === "" || isNaN(c) ? null : c;
    },
    _format: function (c) {
      if (c === "") {
        return "";
      }
      return window.Globalize && this.options.numberFormat
        ? Globalize.format(c, this.options.numberFormat, this.options.culture)
        : c;
    },
    _refresh: function () {
      this.element.attr({
        "aria-valuemin": this.options.min,
        "aria-valuemax": this.options.max,
        "aria-valuenow": this._parse(this.element.val()),
      });
    },
    _value: function (e, c) {
      var d;
      if (e !== "") {
        d = this._parse(e);
        if (d !== null) {
          if (!c) {
            d = this._adjustValue(d);
          }
          e = this._format(d);
        }
      }
      this.element.val(e);
      this._refresh();
    },
    _destroy: function () {
      this.element
        .removeClass("ui-spinner-input")
        .prop("disabled", false)
        .removeAttr("autocomplete")
        .removeAttr("role")
        .removeAttr("aria-valuemin")
        .removeAttr("aria-valuemax")
        .removeAttr("aria-valuenow");
      this.uiSpinner.replaceWith(this.element);
    },
    stepUp: b(function (c) {
      this._stepUp(c);
    }),
    _stepUp: function (c) {
      if (this._start()) {
        this._spin((c || 1) * this.options.step);
        this._stop();
      }
    },
    stepDown: b(function (c) {
      this._stepDown(c);
    }),
    _stepDown: function (c) {
      if (this._start()) {
        this._spin((c || 1) * -this.options.step);
        this._stop();
      }
    },
    pageUp: b(function (c) {
      this._stepUp((c || 1) * this.options.page);
    }),
    pageDown: b(function (c) {
      this._stepDown((c || 1) * this.options.page);
    }),
    value: function (c) {
      if (!arguments.length) {
        return this._parse(this.element.val());
      }
      b(this._value).call(this, c);
    },
    widget: function () {
      return this.uiSpinner;
    },
  });
})(jQuery);
(function (a, f) {
  var e = 0,
    d = /#.*$/;
  function b() {
    return ++e;
  }
  function c(g) {
    g = g.cloneNode(false);
    return (
      g.hash.length > 1 &&
      decodeURIComponent(g.href.replace(d, "")) ===
        decodeURIComponent(location.href.replace(d, ""))
    );
  }
  a.widget("ui.tabs", {
    version: "1.10.4",
    delay: 300,
    options: {
      active: null,
      collapsible: false,
      event: "click",
      heightStyle: "content",
      hide: null,
      show: null,
      activate: null,
      beforeActivate: null,
      beforeLoad: null,
      load: null,
    },
    _create: function () {
      var h = this,
        g = this.options;
      this.running = false;
      this.element
        .addClass("ui-tabs ui-widget ui-widget-content ui-corner-all")
        .toggleClass("ui-tabs-collapsible", g.collapsible)
        .delegate(
          ".ui-tabs-nav > li",
          "mousedown" + this.eventNamespace,
          function (j) {
            if (a(this).is(".ui-state-disabled")) {
              j.preventDefault();
            }
          }
        )
        .delegate(
          ".ui-tabs-anchor",
          "focus" + this.eventNamespace,
          function () {
            if (a(this).closest("li").is(".ui-state-disabled")) {
              this.blur();
            }
          }
        );
      this._processTabs();
      g.active = this._initialActive();
      if (a.isArray(g.disabled)) {
        g.disabled = a
          .unique(
            g.disabled.concat(
              a.map(this.tabs.filter(".ui-state-disabled"), function (j) {
                return h.tabs.index(j);
              })
            )
          )
          .sort();
      }
      if (this.options.active !== false && this.anchors.length) {
        this.active = this._findActive(g.active);
      } else {
        this.active = a();
      }
      this._refresh();
      if (this.active.length) {
        this.load(g.active);
      }
    },
    _initialActive: function () {
      var g = this.options.active,
        h = this.options.collapsible,
        j = location.hash.substring(1);
      if (g === null) {
        if (j) {
          this.tabs.each(function (k, l) {
            if (a(l).attr("aria-controls") === j) {
              g = k;
              return false;
            }
          });
        }
        if (g === null) {
          g = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
        }
        if (g === null || g === -1) {
          g = this.tabs.length ? 0 : false;
        }
      }
      if (g !== false) {
        g = this.tabs.index(this.tabs.eq(g));
        if (g === -1) {
          g = h ? false : 0;
        }
      }
      if (!h && g === false && this.anchors.length) {
        g = 0;
      }
      return g;
    },
    _getCreateEventData: function () {
      return {
        tab: this.active,
        panel: !this.active.length ? a() : this._getPanelForTab(this.active),
      };
    },
    _tabKeydown: function (g) {
      var h = a(this.document[0].activeElement).closest("li"),
        k = this.tabs.index(h),
        j = true;
      if (this._handlePageNav(g)) {
        return;
      }
      switch (g.keyCode) {
        case a.ui.keyCode.RIGHT:
        case a.ui.keyCode.DOWN:
          k++;
          break;
        case a.ui.keyCode.UP:
        case a.ui.keyCode.LEFT:
          j = false;
          k--;
          break;
        case a.ui.keyCode.END:
          k = this.anchors.length - 1;
          break;
        case a.ui.keyCode.HOME:
          k = 0;
          break;
        case a.ui.keyCode.SPACE:
          g.preventDefault();
          clearTimeout(this.activating);
          this._activate(k);
          return;
        case a.ui.keyCode.ENTER:
          g.preventDefault();
          clearTimeout(this.activating);
          this._activate(k === this.options.active ? false : k);
          return;
        default:
          return;
      }
      g.preventDefault();
      clearTimeout(this.activating);
      k = this._focusNextTab(k, j);
      if (!g.ctrlKey) {
        h.attr("aria-selected", "false");
        this.tabs.eq(k).attr("aria-selected", "true");
        this.activating = this._delay(function () {
          this.option("active", k);
        }, this.delay);
      }
    },
    _panelKeydown: function (g) {
      if (this._handlePageNav(g)) {
        return;
      }
      if (g.ctrlKey && g.keyCode === a.ui.keyCode.UP) {
        g.preventDefault();
        this.active.focus();
      }
    },
    _handlePageNav: function (g) {
      if (g.altKey && g.keyCode === a.ui.keyCode.PAGE_UP) {
        this._activate(this._focusNextTab(this.options.active - 1, false));
        return true;
      }
      if (g.altKey && g.keyCode === a.ui.keyCode.PAGE_DOWN) {
        this._activate(this._focusNextTab(this.options.active + 1, true));
        return true;
      }
    },
    _findNextTab: function (j, h) {
      var k = this.tabs.length - 1;
      function g() {
        if (j > k) {
          j = 0;
        }
        if (j < 0) {
          j = k;
        }
        return j;
      }
      while (a.inArray(g(), this.options.disabled) !== -1) {
        j = h ? j + 1 : j - 1;
      }
      return j;
    },
    _focusNextTab: function (h, g) {
      h = this._findNextTab(h, g);
      this.tabs.eq(h).focus();
      return h;
    },
    _setOption: function (g, h) {
      if (g === "active") {
        this._activate(h);
        return;
      }
      if (g === "disabled") {
        this._setupDisabled(h);
        return;
      }
      this._super(g, h);
      if (g === "collapsible") {
        this.element.toggleClass("ui-tabs-collapsible", h);
        if (!h && this.options.active === false) {
          this._activate(0);
        }
      }
      if (g === "event") {
        this._setupEvents(h);
      }
      if (g === "heightStyle") {
        this._setupHeightStyle(h);
      }
    },
    _tabId: function (g) {
      return g.attr("aria-controls") || "ui-tabs-" + b();
    },
    _sanitizeSelector: function (g) {
      return g ? g.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
    },
    refresh: function () {
      var h = this.options,
        g = this.tablist.children(":has(a[href])");
      h.disabled = a.map(g.filter(".ui-state-disabled"), function (j) {
        return g.index(j);
      });
      this._processTabs();
      if (h.active === false || !this.anchors.length) {
        h.active = false;
        this.active = a();
      } else {
        if (
          this.active.length &&
          !a.contains(this.tablist[0], this.active[0])
        ) {
          if (this.tabs.length === h.disabled.length) {
            h.active = false;
            this.active = a();
          } else {
            this._activate(this._findNextTab(Math.max(0, h.active - 1), false));
          }
        } else {
          h.active = this.tabs.index(this.active);
        }
      }
      this._refresh();
    },
    _refresh: function () {
      this._setupDisabled(this.options.disabled);
      this._setupEvents(this.options.event);
      this._setupHeightStyle(this.options.heightStyle);
      this.tabs
        .not(this.active)
        .attr({ "aria-selected": "false", tabIndex: -1 });
      this.panels
        .not(this._getPanelForTab(this.active))
        .hide()
        .attr({ "aria-expanded": "false", "aria-hidden": "true" });
      if (!this.active.length) {
        this.tabs.eq(0).attr("tabIndex", 0);
      } else {
        this.active
          .addClass("ui-tabs-active ui-state-active")
          .attr({ "aria-selected": "true", tabIndex: 0 });
        this._getPanelForTab(this.active)
          .show()
          .attr({ "aria-expanded": "true", "aria-hidden": "false" });
      }
    },
    _processTabs: function () {
      var g = this;
      this.tablist = this._getList()
        .addClass(
          "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"
        )
        .attr("role", "tablist");
      this.tabs = this.tablist
        .find("> li:has(a[href])")
        .addClass("ui-state-default ui-corner-top")
        .attr({ role: "tab", tabIndex: -1 });
      this.anchors = this.tabs
        .map(function () {
          return a("a", this)[0];
        })
        .addClass("ui-tabs-anchor")
        .attr({ role: "presentation", tabIndex: -1 });
      this.panels = a();
      this.anchors.each(function (k, h) {
        var o,
          m,
          n,
          j = a(h).uniqueId().attr("id"),
          p = a(h).closest("li"),
          l = p.attr("aria-controls");
        if (c(h)) {
          o = h.hash;
          m = g.element.find(g._sanitizeSelector(o));
        } else {
          n = g._tabId(p);
          o = "#" + n;
          m = g.element.find(o);
          if (!m.length) {
            m = g._createPanel(n);
            m.insertAfter(g.panels[k - 1] || g.tablist);
          }
          m.attr("aria-live", "polite");
        }
        if (m.length) {
          g.panels = g.panels.add(m);
        }
        if (l) {
          p.data("ui-tabs-aria-controls", l);
        }
        p.attr({ "aria-controls": o.substring(1), "aria-labelledby": j });
        m.attr("aria-labelledby", j);
      });
      this.panels
        .addClass("ui-tabs-panel ui-widget-content ui-corner-bottom")
        .attr("role", "tabpanel");
    },
    _getList: function () {
      return this.tablist || this.element.find("ol,ul").eq(0);
    },
    _createPanel: function (g) {
      return a("<div>")
        .attr("id", g)
        .addClass("ui-tabs-panel ui-widget-content ui-corner-bottom")
        .data("ui-tabs-destroy", true);
    },
    _setupDisabled: function (g) {
      if (a.isArray(g)) {
        if (!g.length) {
          g = false;
        } else {
          if (g.length === this.anchors.length) {
            g = true;
          }
        }
      }
      for (var h = 0, j; (j = this.tabs[h]); h++) {
        if (g === true || a.inArray(h, g) !== -1) {
          a(j).addClass("ui-state-disabled").attr("aria-disabled", "true");
        } else {
          a(j).removeClass("ui-state-disabled").removeAttr("aria-disabled");
        }
      }
      this.options.disabled = g;
    },
    _setupEvents: function (g) {
      var h = {
        click: function (j) {
          j.preventDefault();
        },
      };
      if (g) {
        a.each(g.split(" "), function (k, j) {
          h[j] = "_eventHandler";
        });
      }
      this._off(this.anchors.add(this.tabs).add(this.panels));
      this._on(this.anchors, h);
      this._on(this.tabs, { keydown: "_tabKeydown" });
      this._on(this.panels, { keydown: "_panelKeydown" });
      this._focusable(this.tabs);
      this._hoverable(this.tabs);
    },
    _setupHeightStyle: function (g) {
      var h,
        j = this.element.parent();
      if (g === "fill") {
        h = j.height();
        h -= this.element.outerHeight() - this.element.height();
        this.element.siblings(":visible").each(function () {
          var k = a(this),
            l = k.css("position");
          if (l === "absolute" || l === "fixed") {
            return;
          }
          h -= k.outerHeight(true);
        });
        this.element
          .children()
          .not(this.panels)
          .each(function () {
            h -= a(this).outerHeight(true);
          });
        this.panels
          .each(function () {
            a(this).height(
              Math.max(0, h - a(this).innerHeight() + a(this).height())
            );
          })
          .css("overflow", "auto");
      } else {
        if (g === "auto") {
          h = 0;
          this.panels
            .each(function () {
              h = Math.max(h, a(this).height("").height());
            })
            .height(h);
        }
      }
    },
    _eventHandler: function (l) {
      var n = this.options,
        g = this.active,
        h = a(l.currentTarget),
        o = h.closest("li"),
        j = o[0] === g[0],
        k = j && n.collapsible,
        q = k ? a() : this._getPanelForTab(o),
        p = !g.length ? a() : this._getPanelForTab(g),
        m = { oldTab: g, oldPanel: p, newTab: k ? a() : o, newPanel: q };
      l.preventDefault();
      if (
        o.hasClass("ui-state-disabled") ||
        o.hasClass("ui-tabs-loading") ||
        this.running ||
        (j && !n.collapsible) ||
        this._trigger("beforeActivate", l, m) === false
      ) {
        return;
      }
      n.active = k ? false : this.tabs.index(o);
      this.active = j ? a() : o;
      if (this.xhr) {
        this.xhr.abort();
      }
      if (!p.length && !q.length) {
        a.error("jQuery UI Tabs: Mismatching fragment identifier.");
      }
      if (q.length) {
        this.load(this.tabs.index(o), l);
      }
      this._toggle(l, m);
    },
    _toggle: function (h, j) {
      var l = this,
        n = j.newPanel,
        m = j.oldPanel;
      this.running = true;
      function g() {
        l.running = false;
        l._trigger("activate", h, j);
      }
      function k() {
        j.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
        if (n.length && l.options.show) {
          l._show(n, l.options.show, g);
        } else {
          n.show();
          g();
        }
      }
      if (m.length && this.options.hide) {
        this._hide(m, this.options.hide, function () {
          j.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
          k();
        });
      } else {
        j.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
        m.hide();
        k();
      }
      m.attr({ "aria-expanded": "false", "aria-hidden": "true" });
      j.oldTab.attr("aria-selected", "false");
      if (n.length && m.length) {
        j.oldTab.attr("tabIndex", -1);
      } else {
        if (n.length) {
          this.tabs
            .filter(function () {
              return a(this).attr("tabIndex") === 0;
            })
            .attr("tabIndex", -1);
        }
      }
      n.attr({ "aria-expanded": "true", "aria-hidden": "false" });
      j.newTab.attr({ "aria-selected": "true", tabIndex: 0 });
    },
    _activate: function (j) {
      var h,
        g = this._findActive(j);
      if (g[0] === this.active[0]) {
        return;
      }
      if (!g.length) {
        g = this.active;
      }
      h = g.find(".ui-tabs-anchor")[0];
      this._eventHandler({
        target: h,
        currentTarget: h,
        preventDefault: a.noop,
      });
    },
    _findActive: function (g) {
      return g === false ? a() : this.tabs.eq(g);
    },
    _getIndex: function (g) {
      if (typeof g === "string") {
        g = this.anchors.index(this.anchors.filter("[href$='" + g + "']"));
      }
      return g;
    },
    _destroy: function () {
      if (this.xhr) {
        this.xhr.abort();
      }
      this.element.removeClass(
        "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"
      );
      this.tablist
        .removeClass(
          "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"
        )
        .removeAttr("role");
      this.anchors
        .removeClass("ui-tabs-anchor")
        .removeAttr("role")
        .removeAttr("tabIndex")
        .removeUniqueId();
      this.tabs.add(this.panels).each(function () {
        if (a.data(this, "ui-tabs-destroy")) {
          a(this).remove();
        } else {
          a(this)
            .removeClass(
              "ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel"
            )
            .removeAttr("tabIndex")
            .removeAttr("aria-live")
            .removeAttr("aria-busy")
            .removeAttr("aria-selected")
            .removeAttr("aria-labelledby")
            .removeAttr("aria-hidden")
            .removeAttr("aria-expanded")
            .removeAttr("role");
        }
      });
      this.tabs.each(function () {
        var g = a(this),
          h = g.data("ui-tabs-aria-controls");
        if (h) {
          g.attr("aria-controls", h).removeData("ui-tabs-aria-controls");
        } else {
          g.removeAttr("aria-controls");
        }
      });
      this.panels.show();
      if (this.options.heightStyle !== "content") {
        this.panels.css("height", "");
      }
    },
    enable: function (h) {
      var g = this.options.disabled;
      if (g === false) {
        return;
      }
      if (h === f) {
        g = false;
      } else {
        h = this._getIndex(h);
        if (a.isArray(g)) {
          g = a.map(g, function (j) {
            return j !== h ? j : null;
          });
        } else {
          g = a.map(this.tabs, function (j, k) {
            return k !== h ? k : null;
          });
        }
      }
      this._setupDisabled(g);
    },
    disable: function (h) {
      var g = this.options.disabled;
      if (g === true) {
        return;
      }
      if (h === f) {
        g = true;
      } else {
        h = this._getIndex(h);
        if (a.inArray(h, g) !== -1) {
          return;
        }
        if (a.isArray(g)) {
          g = a.merge([h], g).sort();
        } else {
          g = [h];
        }
      }
      this._setupDisabled(g);
    },
    load: function (k, h) {
      k = this._getIndex(k);
      var n = this,
        m = this.tabs.eq(k),
        g = m.find(".ui-tabs-anchor"),
        l = this._getPanelForTab(m),
        j = { tab: m, panel: l };
      if (c(g[0])) {
        return;
      }
      this.xhr = a.ajax(this._ajaxSettings(g, h, j));
      if (this.xhr && this.xhr.statusText !== "canceled") {
        m.addClass("ui-tabs-loading");
        l.attr("aria-busy", "true");
        this.xhr
          .success(function (o) {
            setTimeout(function () {
              l.html(o);
              n._trigger("load", h, j);
            }, 1);
          })
          .complete(function (o, p) {
            setTimeout(function () {
              if (p === "abort") {
                n.panels.stop(false, true);
              }
              m.removeClass("ui-tabs-loading");
              l.removeAttr("aria-busy");
              if (o === n.xhr) {
                delete n.xhr;
              }
            }, 1);
          });
      }
    },
    _ajaxSettings: function (g, h, j) {
      var k = this;
      return {
        url: g.attr("href"),
        beforeSend: function (l, m) {
          return k._trigger(
            "beforeLoad",
            h,
            a.extend({ jqXHR: l, ajaxSettings: m }, j)
          );
        },
      };
    },
    _getPanelForTab: function (h) {
      var g = a(h).attr("aria-controls");
      return this.element.find(this._sanitizeSelector("#" + g));
    },
  });
})(jQuery);
(function (a) {
  var c = 0;
  function b(f, g) {
    var e = (f.attr("aria-describedby") || "").split(/\s+/);
    e.push(g);
    f.data("ui-tooltip-id", g).attr("aria-describedby", a.trim(e.join(" ")));
  }
  function d(f) {
    var g = f.data("ui-tooltip-id"),
      e = (f.attr("aria-describedby") || "").split(/\s+/),
      h = a.inArray(g, e);
    if (h !== -1) {
      e.splice(h, 1);
    }
    f.removeData("ui-tooltip-id");
    e = a.trim(e.join(" "));
    if (e) {
      f.attr("aria-describedby", e);
    } else {
      f.removeAttr("aria-describedby");
    }
  }
  a.widget("ui.tooltip", {
    version: "1.10.4",
    options: {
      content: function () {
        var e = a(this).attr("title") || "";
        return a("<a>").text(e).html();
      },
      hide: true,
      items: "[title]:not([disabled])",
      position: {
        my: "left top+15",
        at: "left bottom",
        collision: "flipfit flip",
      },
      show: true,
      tooltipClass: null,
      track: false,
      close: null,
      open: null,
    },
    _create: function () {
      this._on({ mouseover: "open", focusin: "open" });
      this.tooltips = {};
      this.parents = {};
      if (this.options.disabled) {
        this._disable();
      }
    },
    _setOption: function (e, g) {
      var f = this;
      if (e === "disabled") {
        this[g ? "_disable" : "_enable"]();
        this.options[e] = g;
        return;
      }
      this._super(e, g);
      if (e === "content") {
        a.each(this.tooltips, function (j, h) {
          f._updateContent(h);
        });
      }
    },
    _disable: function () {
      var e = this;
      a.each(this.tooltips, function (h, f) {
        var g = a.Event("blur");
        g.target = g.currentTarget = f[0];
        e.close(g, true);
      });
      this.element
        .find(this.options.items)
        .addBack()
        .each(function () {
          var f = a(this);
          if (f.is("[title]")) {
            f.data("ui-tooltip-title", f.attr("title")).attr("title", "");
          }
        });
    },
    _enable: function () {
      this.element
        .find(this.options.items)
        .addBack()
        .each(function () {
          var e = a(this);
          if (e.data("ui-tooltip-title")) {
            e.attr("title", e.data("ui-tooltip-title"));
          }
        });
    },
    open: function (e) {
      var g = this,
        f = a(e ? e.target : this.element).closest(this.options.items);
      if (!f.length || f.data("ui-tooltip-id")) {
        return;
      }
      if (f.attr("title")) {
        f.data("ui-tooltip-title", f.attr("title"));
      }
      f.data("ui-tooltip-open", true);
      if (e && e.type === "mouseover") {
        f.parents().each(function () {
          var j = a(this),
            h;
          if (j.data("ui-tooltip-open")) {
            h = a.Event("blur");
            h.target = h.currentTarget = this;
            g.close(h, true);
          }
          if (j.attr("title")) {
            j.uniqueId();
            g.parents[this.id] = { element: this, title: j.attr("title") };
            j.attr("title", "");
          }
        });
      }
      this._updateContent(f, e);
    },
    _updateContent: function (j, g) {
      var e,
        f = this.options.content,
        k = this,
        h = g ? g.type : null;
      if (typeof f === "string") {
        return this._open(g, j, f);
      }
      e = f.call(j[0], function (l) {
        if (!j.data("ui-tooltip-open")) {
          return;
        }
        k._delay(function () {
          if (g) {
            g.type = h;
          }
          this._open(g, j, l);
        });
      });
      if (e) {
        this._open(g, j, e);
      }
    },
    _open: function (g, l, e) {
      var m,
        h,
        f,
        k = a.extend({}, this.options.position);
      if (!e) {
        return;
      }
      m = this._find(l);
      if (m.length) {
        m.find(".ui-tooltip-content").html(e);
        return;
      }
      if (l.is("[title]")) {
        if (g && g.type === "mouseover") {
          l.attr("title", "");
        } else {
          l.removeAttr("title");
        }
      }
      m = this._tooltip(l);
      b(l, m.attr("id"));
      m.find(".ui-tooltip-content").html(e);
      function j(n) {
        k.of = n;
        if (m.is(":hidden")) {
          return;
        }
        m.position(k);
      }
      if (this.options.track && g && /^mouse/.test(g.type)) {
        this._on(this.document, { mousemove: j });
        j(g);
      } else {
        m.position(a.extend({ of: l }, this.options.position));
      }
      m.hide();
      this._show(m, this.options.show);
      if (this.options.show && this.options.show.delay) {
        f = this.delayedShow = setInterval(function () {
          if (m.is(":visible")) {
            j(k.of);
            clearInterval(f);
          }
        }, a.fx.interval);
      }
      this._trigger("open", g, { tooltip: m });
      h = {
        keyup: function (n) {
          if (n.keyCode === a.ui.keyCode.ESCAPE) {
            var o = a.Event(n);
            o.currentTarget = l[0];
            this.close(o, true);
          }
        },
        remove: function () {
          this._removeTooltip(m);
        },
      };
      if (!g || g.type === "mouseover") {
        h.mouseleave = "close";
      }
      if (!g || g.type === "focusin") {
        h.focusout = "close";
      }
      this._on(true, l, h);
    },
    close: function (e) {
      var g = this,
        f = a(e ? e.currentTarget : this.element),
        h = this._find(f);
      if (this.closing) {
        return;
      }
      clearInterval(this.delayedShow);
      if (f.data("ui-tooltip-title")) {
        f.attr("title", f.data("ui-tooltip-title"));
      }
      d(f);
      h.stop(true);
      this._hide(h, this.options.hide, function () {
        g._removeTooltip(a(this));
      });
      f.removeData("ui-tooltip-open");
      this._off(f, "mouseleave focusout keyup");
      if (f[0] !== this.element[0]) {
        this._off(f, "remove");
      }
      this._off(this.document, "mousemove");
      if (e && e.type === "mouseleave") {
        a.each(this.parents, function (j, k) {
          a(k.element).attr("title", k.title);
          delete g.parents[j];
        });
      }
      this.closing = true;
      this._trigger("close", e, { tooltip: h });
      this.closing = false;
    },
    _tooltip: function (e) {
      var f = "ui-tooltip-" + c++,
        g = a("<div>")
          .attr({ id: f, role: "tooltip" })
          .addClass(
            "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
              (this.options.tooltipClass || "")
          );
      a("<div>").addClass("ui-tooltip-content").appendTo(g);
      g.appendTo(this.document[0].body);
      this.tooltips[f] = e;
      return g;
    },
    _find: function (f) {
      var e = f.data("ui-tooltip-id");
      return e ? a("#" + e) : a();
    },
    _removeTooltip: function (e) {
      e.remove();
      delete this.tooltips[e.attr("id")];
    },
    _destroy: function () {
      var e = this;
      a.each(this.tooltips, function (h, f) {
        var g = a.Event("blur");
        g.target = g.currentTarget = f[0];
        e.close(g, true);
        a("#" + h).remove();
        if (f.data("ui-tooltip-title")) {
          f.attr("title", f.data("ui-tooltip-title"));
          f.removeData("ui-tooltip-title");
        }
      });
    },
  });
})(jQuery);
(function (a, c) {
  var b = "ui-effects-";
  a.effects = { effect: {} };

  (function (j, s) {
    var n =
        "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
      l = /^([\-+])=\s*(\d+\.?\d*)/,
      p = [
        {
          re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
          parse: function (t) {
            return [t[1], t[2], t[3], t[4]];
          },
        },
        {
          re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
          parse: function (t) {
            return [t[1] * 2.55, t[2] * 2.55, t[3] * 2.55, t[4]];
          },
        },
        {
          re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
          parse: function (t) {
            return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
          },
        },
        {
          re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
          parse: function (t) {
            return [
              parseInt(t[1] + t[1], 16),
              parseInt(t[2] + t[2], 16),
              parseInt(t[3] + t[3], 16),
            ];
          },
        },
        {
          re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
          space: "hsla",
          parse: function (t) {
            return [t[1], t[2] / 100, t[3] / 100, t[4]];
          },
        },
      ],
      e = (j.Color = function (v, w, u, t) {
        return new j.Color.fn.parse(v, w, u, t);
      }),
      m = {
        rgba: {
          props: {
            red: { idx: 0, type: "byte" },
            green: { idx: 1, type: "byte" },
            blue: { idx: 2, type: "byte" },
          },
        },
        hsla: {
          props: {
            hue: { idx: 0, type: "degrees" },
            saturation: { idx: 1, type: "percent" },
            lightness: { idx: 2, type: "percent" },
          },
        },
      },
      k = {
        byte: { floor: true, max: 255 },
        percent: { max: 1 },
        degrees: { mod: 360, floor: true },
      },
      q = (e.support = {}),
      r = j("<p>")[0],
      f,
      g = j.each;
    r.style.cssText = "background-color:rgba(1,1,1,.5)";
    q.rgba = r.style.backgroundColor.indexOf("rgba") > -1;
    g(m, function (u, t) {
      t.cache = "_" + u;
      t.props.alpha = { idx: 3, type: "percent", def: 1 };
    });
    function d(w, u, t) {
      var v = k[u.type] || {};
      if (w == null) {
        return t || !u.def ? null : u.def;
      }
      w = v.floor ? ~~w : parseFloat(w);
      if (isNaN(w)) {
        return u.def;
      }
      if (v.mod) {
        return (w + v.mod) % v.mod;
      }
      return 0 > w ? 0 : v.max < w ? v.max : w;
    }
    function o(v) {
      var t = e(),
        u = (t._rgba = []);
      v = v.toLowerCase();
      g(p, function (w, z) {
        var y,
          x = z.re.exec(v),
          B = x && z.parse(x),
          A = z.space || "rgba";
        if (B) {
          y = t[A](B);
          t[m[A].cache] = y[m[A].cache];
          u = t._rgba = y._rgba;
          return false;
        }
      });
      if (u.length) {
        if (u.join() === "0,0,0,0") {
          j.extend(u, f.transparent);
        }
        return t;
      }
      return f[v];
    }
    e.fn = j.extend(e.prototype, {
      parse: function (x, v, u, t) {
        if (x === s) {
          this._rgba = [null, null, null, null];
          return this;
        }
        if (x.jquery || x.nodeType) {
          x = j(x).css(v);
          v = s;
        }
        var w = this,
          z = j.type(x),
          y = (this._rgba = []);
        if (v !== s) {
          x = [x, v, u, t];
          z = "array";
        }
        if (z === "string") {
          return this.parse(o(x) || f._default);
        }
        if (z === "array") {
          g(m.rgba.props, function (A, B) {
            y[B.idx] = d(x[B.idx], B);
          });
          return this;
        }
        if (z === "object") {
          if (x instanceof e) {
            g(m, function (B, A) {
              if (x[A.cache]) {
                w[A.cache] = x[A.cache].slice();
              }
            });
          } else {
            g(m, function (C, B) {
              var A = B.cache;
              g(B.props, function (D, E) {
                if (!w[A] && B.to) {
                  if (D === "alpha" || x[D] == null) {
                    return;
                  }
                  w[A] = B.to(w._rgba);
                }
                w[A][E.idx] = d(x[D], E, true);
              });
              if (w[A] && j.inArray(null, w[A].slice(0, 3)) < 0) {
                w[A][3] = 1;
                if (B.from) {
                  w._rgba = B.from(w[A]);
                }
              }
            });
          }
          return this;
        }
      },
      is: function (t) {
        var v = e(t),
          w = true,
          u = this;
        g(m, function (x, A) {
          var z,
            y = v[A.cache];
          if (y) {
            z = u[A.cache] || (A.to && A.to(u._rgba)) || [];
            g(A.props, function (B, C) {
              if (y[C.idx] != null) {
                w = y[C.idx] === z[C.idx];
                return w;
              }
            });
          }
          return w;
        });
        return w;
      },
      _space: function () {
        var u = [],
          t = this;
        g(m, function (w, v) {
          if (t[v.cache]) {
            u.push(w);
          }
        });
        return u.pop();
      },
      transition: function (v, t) {
        var u = e(v),
          y = u._space(),
          x = m[y],
          A = this.alpha() === 0 ? e("transparent") : this,
          z = A[x.cache] || x.to(A._rgba),
          w = z.slice();
        u = u[x.cache];
        g(x.props, function (D, E) {
          var C = E.idx,
            F = z[C],
            B = u[C],
            G = k[E.type] || {};
          if (B === null) {
            return;
          }
          if (F === null) {
            w[C] = B;
          } else {
            if (G.mod) {
              if (B - F > G.mod / 2) {
                F += G.mod;
              } else {
                if (F - B > G.mod / 2) {
                  F -= G.mod;
                }
              }
            }
            w[C] = d((B - F) * t + F, E);
          }
        });
        return this[y](w);
      },
      blend: function (v) {
        if (this._rgba[3] === 1) {
          return this;
        }
        var w = this._rgba.slice(),
          t = w.pop(),
          u = e(v)._rgba;
        return e(
          j.map(w, function (y, x) {
            return (1 - t) * u[x] + t * y;
          })
        );
      },
      toRgbaString: function () {
        var t = "rgba(",
          u = j.map(this._rgba, function (x, w) {
            return x == null ? (w > 2 ? 1 : 0) : x;
          });
        if (u[3] === 1) {
          u.pop();
          t = "rgb(";
        }
        return t + u.join() + ")";
      },
      toHslaString: function () {
        var u = "hsla(",
          t = j.map(this.hsla(), function (x, w) {
            if (x == null) {
              x = w > 2 ? 1 : 0;
            }
            if (w && w < 3) {
              x = Math.round(x * 100) + "%";
            }
            return x;
          });
        if (t[3] === 1) {
          t.pop();
          u = "hsl(";
        }
        return u + t.join() + ")";
      },
      toHexString: function (u) {
        var v = this._rgba.slice(),
          t = v.pop();
        if (u) {
          v.push(~~(t * 255));
        }
        return (
          "#" +
          j
            .map(v, function (w) {
              w = (w || 0).toString(16);
              return w.length === 1 ? "0" + w : w;
            })
            .join("")
        );
      },
      toString: function () {
        return this._rgba[3] === 0 ? "transparent" : this.toRgbaString();
      },
    });
    e.fn.parse.prototype = e.fn;
    function h(u, v, t) {
      t = (t + 1) % 1;
      if (t * 6 < 1) {
        return u + (v - u) * t * 6;
      }
      if (t * 2 < 1) {
        return v;
      }
      if (t * 3 < 2) {
        return u + (v - u) * (2 / 3 - t) * 6;
      }
      return u;
    }
    m.hsla.to = function (D) {
      if (D[0] == null || D[1] == null || D[2] == null) {
        return [null, null, null, D[3]];
      }
      var C = D[0] / 255,
        x = D[1] / 255,
        v = D[2] / 255,
        t = D[3],
        A = Math.max(C, x, v),
        B = Math.min(C, x, v),
        w = A - B,
        u = A + B,
        z = u * 0.5,
        y,
        E;
      if (B === A) {
        y = 0;
      } else {
        if (C === A) {
          y = (60 * (x - v)) / w + 360;
        } else {
          if (x === A) {
            y = (60 * (v - C)) / w + 120;
          } else {
            y = (60 * (C - x)) / w + 240;
          }
        }
      }
      if (w === 0) {
        E = 0;
      } else {
        if (z <= 0.5) {
          E = w / u;
        } else {
          E = w / (2 - u);
        }
      }
      return [Math.round(y) % 360, E, z, t == null ? 1 : t];
    };
    m.hsla.from = function (v) {
      if (v[0] == null || v[1] == null || v[2] == null) {
        return [null, null, null, v[3]];
      }
      var u = v[0] / 360,
        z = v[1],
        w = v[2],
        t = v[3],
        y = w <= 0.5 ? w * (1 + z) : w + z - w * z,
        x = 2 * w - y;
      return [
        Math.round(h(x, y, u + 1 / 3) * 255),
        Math.round(h(x, y, u) * 255),
        Math.round(h(x, y, u - 1 / 3) * 255),
        t,
      ];
    };
    g(m, function (x, w) {
      var v = w.props,
        t = w.cache,
        y = w.to,
        u = w.from;
      e.fn[x] = function (D) {
        if (y && !this[t]) {
          this[t] = y(this._rgba);
        }
        if (D === s) {
          return this[t].slice();
        }
        var B,
          C = j.type(D),
          z = C === "array" || C === "object" ? D : arguments,
          A = this[t].slice();
        g(v, function (E, F) {
          var G = z[C === "object" ? E : F.idx];
          if (G == null) {
            G = A[F.idx];
          }
          A[F.idx] = d(G, F);
        });
        if (u) {
          B = e(u(A));
          B[t] = A;
          return B;
        } else {
          return e(A);
        }
      };
      g(v, function (z, A) {
        if (e.fn[z]) {
          return;
        }
        e.fn[z] = function (F) {
          var G = j.type(F),
            C = z === "alpha" ? (this._hsla ? "hsla" : "rgba") : x,
            D = this[C](),
            B = D[A.idx],
            E;
          if (G === "undefined") {
            return B;
          }
          if (G === "function") {
            F = F.call(this, B);
            G = j.type(F);
          }
          if (F == null && A.empty) {
            return this;
          }
          if (G === "string") {
            E = l.exec(F);
            if (E) {
              F = B + parseFloat(E[2]) * (E[1] === "+" ? 1 : -1);
            }
          }
          D[A.idx] = F;
          return this[C](D);
        };
      });
    });
    e.hook = function (t) {
      var u = t.split(" ");
      g(u, function (w, v) {
        j.cssHooks[v] = {
          set: function (A, C) {
            var B,
              y,
              x = "";
            if (C !== "transparent" && (j.type(C) !== "string" || (B = o(C)))) {
              C = e(B || C);
              if (!q.rgba && C._rgba[3] !== 1) {
                y = v === "backgroundColor" ? A.parentNode : A;
                while ((x === "" || x === "transparent") && y && y.style) {
                  try {
                    x = j.css(y, "backgroundColor");
                    y = y.parentNode;
                  } catch (z) {}
                }
                C = C.blend(x && x !== "transparent" ? x : "_default");
              }
              C = C.toRgbaString();
            }
            try {
              A.style[v] = C;
            } catch (z) {}
          },
        };
        j.fx.step[v] = function (x) {
          if (!x.colorInit) {
            x.start = e(x.elem, v);
            x.end = e(x.end);
            x.colorInit = true;
          }
          j.cssHooks[v].set(x.elem, x.start.transition(x.end, x.pos));
        };
      });
    };
    e.hook(n);
    j.cssHooks.borderColor = {
      expand: function (u) {
        var t = {};
        g(["Top", "Right", "Bottom", "Left"], function (v, w) {
          t["border" + w + "Color"] = u;
        });
        return t;
      },
    };
    f = j.Color.names = {
      aqua: "#00ffff",
      black: "#000000",
      blue: "#0000ff",
      fuchsia: "#ff00ff",
      gray: "#808080",
      green: "#008000",
      lime: "#00ff00",
      maroon: "#800000",
      navy: "#000080",
      olive: "#808000",
      purple: "#800080",
      red: "#ff0000",
      silver: "#c0c0c0",
      teal: "#008080",
      white: "#ffffff",
      yellow: "#ffff00",
      transparent: [null, null, null, 0],
      _default: "#ffffff",
    };
  })(jQuery);
  (function () {
    var d = ["add", "remove", "toggle"],
      f = {
        border: 1,
        borderBottom: 1,
        borderColor: 1,
        borderLeft: 1,
        borderRight: 1,
        borderTop: 1,
        borderWidth: 1,
        margin: 1,
        padding: 1,
      };
    a.each(
      [
        "borderLeftStyle",
        "borderRightStyle",
        "borderBottomStyle",
        "borderTopStyle",
      ],
      function (h, j) {
        a.fx.step[j] = function (k) {
          if ((k.end !== "none" && !k.setAttr) || (k.pos === 1 && !k.setAttr)) {
            jQuery.style(k.elem, j, k.end);
            k.setAttr = true;
          }
        };
      }
    );
    function e(h) {
      var j,
        k,
        l = h.ownerDocument.defaultView
          ? h.ownerDocument.defaultView.getComputedStyle(h, null)
          : h.currentStyle,
        m = {};
      if (l && l.length && l[0] && l[l[0]]) {
        k = l.length;
        while (k--) {
          j = l[k];
          if (typeof l[j] === "string") {
            m[a.camelCase(j)] = l[j];
          }
        }
      } else {
        for (j in l) {
          if (typeof l[j] === "string") {
            m[j] = l[j];
          }
        }
      }
      return m;
    }
    function g(l, k) {
      var h = {},
        j,
        m;
      for (j in k) {
        m = k[j];
        if (l[j] !== m) {
          if (!f[j]) {
            if (a.fx.step[j] || !isNaN(parseFloat(m))) {
              h[j] = m;
            }
          }
        }
      }
      return h;
    }
    if (!a.fn.addBack) {
      a.fn.addBack = function (h) {
        return this.add(
          h == null ? this.prevObject : this.prevObject.filter(h)
        );
      };
    }
    a.effects.animateClass = function (m, j, k, h) {
      var l = a.speed(j, k, h);
      return this.queue(function () {
        var o = a(this),
          q = o.attr("class") || "",
          p,
          n = l.children ? o.find("*").addBack() : o;
        n = n.map(function () {
          var r = a(this);
          return { el: r, start: e(this) };
        });
        p = function () {
          a.each(d, function (s, r) {
            if (m[r]) {
              o[r + "Class"](m[r]);
            }
          });
        };
        p();
        n = n.map(function () {
          this.end = e(this.el[0]);
          this.diff = g(this.start, this.end);
          return this;
        });
        o.attr("class", q);
        n = n.map(function () {
          var t = this,
            r = a.Deferred(),
            s = a.extend({}, l, {
              queue: false,
              complete: function () {
                r.resolve(t);
              },
            });
          this.el.animate(this.diff, s);
          return r.promise();
        });
        a.when.apply(a, n.get()).done(function () {
          p();
          a.each(arguments, function () {
            var r = this.el;
            a.each(this.diff, function (s) {
              r.css(s, "");
            });
          });
          l.complete.call(o[0]);
        });
      });
    };
    a.fn.extend({
      addClass: (function (h) {
        return function (k, m, l, j) {
          return m
            ? a.effects.animateClass.call(this, { add: k }, m, l, j)
            : h.apply(this, arguments);
        };
      })(a.fn.addClass),
      removeClass: (function (h) {
        return function (k, m, l, j) {
          return arguments.length > 1
            ? a.effects.animateClass.call(this, { remove: k }, m, l, j)
            : h.apply(this, arguments);
        };
      })(a.fn.removeClass),
      toggleClass: (function (h) {
        return function (k, m, n, l, j) {
          if (typeof m === "boolean" || m === c) {
            if (!n) {
              return h.apply(this, arguments);
            } else {
              return a.effects.animateClass.call(
                this,
                m ? { add: k } : { remove: k },
                n,
                l,
                j
              );
            }
          } else {
            return a.effects.animateClass.call(this, { toggle: k }, m, n, l);
          }
        };
      })(a.fn.toggleClass),
      switchClass: function (l, h, m, k, j) {
        return a.effects.animateClass.call(
          this,
          { add: h, remove: l },
          m,
          k,
          j
        );
      },
    });
  })();
  (function () {
    a.extend(a.effects, {
      version: "1.10.4",
      save: function (f, h) {
        for (var g = 0; g < h.length; g++) {
          if (h[g] !== null) {
            f.data(b + h[g], f[0].style[h[g]]);
          }
        }
      },
      restore: function (f, h) {
        var j, g;
        for (g = 0; g < h.length; g++) {
          if (h[g] !== null) {
            j = f.data(b + h[g]);
            if (j === c) {
              j = "";
            }
            f.css(h[g], j);
          }
        }
      },
      setMode: function (f, g) {
        if (g === "toggle") {
          g = f.is(":hidden") ? "show" : "hide";
        }
        return g;
      },
      getBaseline: function (f, g) {
        var j, h;
        switch (f[0]) {
          case "top":
            j = 0;
            break;
          case "middle":
            j = 0.5;
            break;
          case "bottom":
            j = 1;
            break;
          default:
            j = f[0] / g.height;
        }
        switch (f[1]) {
          case "left":
            h = 0;
            break;
          case "center":
            h = 0.5;
            break;
          case "right":
            h = 1;
            break;
          default:
            h = f[1] / g.width;
        }
        return { x: h, y: j };
      },
      createWrapper: function (h) {
        if (h.parent().is(".ui-effects-wrapper")) {
          return h.parent();
        }
        var j = {
            width: h.outerWidth(true),
            height: h.outerHeight(true),
            float: h.css("float"),
          },
          l = a("<div></div>")
            .addClass("ui-effects-wrapper")
            .css({
              fontSize: "100%",
              background: "transparent",
              border: "none",
              margin: 0,
              padding: 0,
            }),
          k = { width: h.width(), height: h.height() },
          f = document.activeElement;
        try {
          f.id;
        } catch (g) {
          f = document.body;
        }
        h.wrap(l);
        if (h[0] === f || a.contains(h[0], f)) {
          a(f).focus();
        }
        l = h.parent();
        if (h.css("position") === "static") {
          l.css({ position: "relative" });
          h.css({ position: "relative" });
        } else {
          a.extend(j, {
            position: h.css("position"),
            zIndex: h.css("z-index"),
          });
          a.each(["top", "left", "bottom", "right"], function (m, n) {
            j[n] = h.css(n);
            if (isNaN(parseInt(j[n], 10))) {
              j[n] = "auto";
            }
          });
          h.css({
            position: "relative",
            top: 0,
            left: 0,
            right: "auto",
            bottom: "auto",
          });
        }
        h.css(k);
        return l.css(j).show();
      },
      removeWrapper: function (g) {
        var f = document.activeElement;
        if (g.parent().is(".ui-effects-wrapper")) {
          g.parent().replaceWith(g);
          if (g[0] === f || a.contains(g[0], f)) {
            a(f).focus();
          }
        }
        return g;
      },
      setTransition: function (f, h, g, j) {
        j = j || {};
        a.each(h, function (k, m) {
          var l = f.cssUnit(m);
          if (l[0] > 0) {
            j[m] = l[0] * g + l[1];
          }
        });
        return j;
      },
    });
    function d(g, h, j, f) {
      if (a.isPlainObject(g)) {
        h = g;
        g = g.effect;
      }
      g = { effect: g };
      if (h == null) {
        h = {};
      }
      if (a.isFunction(h)) {
        f = h;
        j = null;
        h = {};
      }
      if (typeof h === "number" || a.fx.speeds[h]) {
        f = j;
        j = h;
        h = {};
      }
      if (a.isFunction(j)) {
        f = j;
        j = null;
      }
      if (h) {
        a.extend(g, h);
      }
      j = j || h.duration;
      g.duration = a.fx.off
        ? 0
        : typeof j === "number"
        ? j
        : j in a.fx.speeds
        ? a.fx.speeds[j]
        : a.fx.speeds._default;
      g.complete = f || h.complete;
      return g;
    }
    function e(f) {
      if (!f || typeof f === "number" || a.fx.speeds[f]) {
        return true;
      }
      if (typeof f === "string" && !a.effects.effect[f]) {
        return true;
      }
      if (a.isFunction(f)) {
        return true;
      }
      if (typeof f === "object" && !f.effect) {
        return true;
      }
      return false;
    }
    a.fn.extend({
      effect: function () {
        var f = d.apply(this, arguments),
          h = f.mode,
          j = f.queue,
          g = a.effects.effect[f.effect];
        if (a.fx.off || !g) {
          if (h) {
            return this[h](f.duration, f.complete);
          } else {
            return this.each(function () {
              if (f.complete) {
                f.complete.call(this);
              }
            });
          }
        }
        function k(p) {
          var n = a(this),
            l = f.complete,
            o = f.mode;
          function m() {
            if (a.isFunction(l)) {
              l.call(n[0]);
            }
            if (a.isFunction(p)) {
              p();
            }
          }
          if (n.is(":hidden") ? o === "hide" : o === "show") {
            n[o]();
            m();
          } else {
            g.call(n[0], f, m);
          }
        }
        return j === false ? this.each(k) : this.queue(j || "fx", k);
      },
      show: (function (f) {
        return function (h) {
          if (e(h)) {
            return f.apply(this, arguments);
          } else {
            var g = d.apply(this, arguments);
            g.mode = "show";
            return this.effect.call(this, g);
          }
        };
      })(a.fn.show),
      hide: (function (f) {
        return function (h) {
          if (e(h)) {
            return f.apply(this, arguments);
          } else {
            var g = d.apply(this, arguments);
            g.mode = "hide";
            return this.effect.call(this, g);
          }
        };
      })(a.fn.hide),
      toggle: (function (f) {
        return function (h) {
          if (e(h) || typeof h === "boolean") {
            return f.apply(this, arguments);
          } else {
            var g = d.apply(this, arguments);
            g.mode = "toggle";
            return this.effect.call(this, g);
          }
        };
      })(a.fn.toggle),
      cssUnit: function (f) {
        var g = this.css(f),
          h = [];
        a.each(["em", "px", "%", "pt"], function (j, k) {
          if (g.indexOf(k) > 0) {
            h = [parseFloat(g), k];
          }
        });
        return h;
      },
    });
  })();
  (function () {
    var d = {};
    a.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (e, f) {
      d[f] = function (g) {
        return Math.pow(g, e + 2);
      };
    });
    a.extend(d, {
      Sine: function (e) {
        return 1 - Math.cos((e * Math.PI) / 2);
      },
      Circ: function (e) {
        return 1 - Math.sqrt(1 - e * e);
      },
      Elastic: function (e) {
        return e === 0 || e === 1
          ? e
          : -Math.pow(2, 8 * (e - 1)) *
              Math.sin((((e - 1) * 80 - 7.5) * Math.PI) / 15);
      },
      Back: function (e) {
        return e * e * (3 * e - 2);
      },
      Bounce: function (f) {
        var g,
          e = 4;
        while (f < ((g = Math.pow(2, --e)) - 1) / 11) {}
        return (
          1 / Math.pow(4, 3 - e) - 7.5625 * Math.pow((g * 3 - 2) / 22 - f, 2)
        );
      },
    });
    a.each(d, function (f, e) {
      a.easing["easeIn" + f] = e;
      a.easing["easeOut" + f] = function (g) {
        return 1 - e(1 - g);
      };
      a.easing["easeInOut" + f] = function (g) {
        return g < 0.5 ? e(g * 2) / 2 : 1 - e(g * -2 + 2) / 2;
      };
    });
  })();
})(jQuery);
(function (a, d) {
  var c = /up|down|vertical/,
    b = /up|left|vertical|horizontal/;
  a.effects.effect.blind = function (n, h) {
    var j = a(this),
      p = ["position", "top", "bottom", "left", "right", "height", "width"],
      l = a.effects.setMode(j, n.mode || "hide"),
      f = n.direction || "up",
      t = c.test(f),
      q = t ? "height" : "width",
      r = t ? "top" : "left",
      m = b.test(f),
      e = {},
      s = l === "show",
      u,
      g,
      k;
    if (j.parent().is(".ui-effects-wrapper")) {
      a.effects.save(j.parent(), p);
    } else {
      a.effects.save(j, p);
    }
    j.show();
    u = a.effects.createWrapper(j).css({ overflow: "hidden" });
    g = u[q]();
    k = parseFloat(u.css(r)) || 0;
    e[q] = s ? g : 0;
    if (!m) {
      j.css(t ? "bottom" : "right", 0)
        .css(t ? "top" : "left", "auto")
        .css({ position: "absolute" });
      e[r] = s ? k : g + k;
    }
    if (s) {
      u.css(q, 0);
      if (!m) {
        u.css(r, k + g);
      }
    }
    u.animate(e, {
      duration: n.duration,
      easing: n.easing,
      queue: false,
      complete: function () {
        if (l === "hide") {
          j.hide();
        }
        a.effects.restore(j, p);
        a.effects.removeWrapper(j);
        h();
      },
    });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.bounce = function (p, f) {
    var j = a(this),
      q = ["position", "top", "bottom", "left", "right", "height", "width"],
      m = a.effects.setMode(j, p.mode || "effect"),
      k = m === "hide",
      u = m === "show",
      d = p.direction || "up",
      e = p.distance,
      w = p.times || 5,
      c = w * 2 + (u || k ? 1 : 0),
      v = p.duration / c,
      h = p.easing,
      t = d === "up" || d === "down" ? "top" : "left",
      n = d === "up" || d === "left",
      l,
      x,
      g,
      r = j.queue(),
      s = r.length;
    if (u || k) {
      q.push("opacity");
    }
    a.effects.save(j, q);
    j.show();
    a.effects.createWrapper(j);
    if (!e) {
      e = j[t === "top" ? "outerHeight" : "outerWidth"]() / 3;
    }
    if (u) {
      g = { opacity: 1 };
      g[t] = 0;
      j.css("opacity", 0)
        .css(t, n ? -e * 2 : e * 2)
        .animate(g, v, h);
    }
    if (k) {
      e = e / Math.pow(2, w - 1);
    }
    g = {};
    g[t] = 0;
    for (l = 0; l < w; l++) {
      x = {};
      x[t] = (n ? "-=" : "+=") + e;
      j.animate(x, v, h).animate(g, v, h);
      e = k ? e * 2 : e / 2;
    }
    if (k) {
      x = { opacity: 0 };
      x[t] = (n ? "-=" : "+=") + e;
      j.animate(x, v, h);
    }
    j.queue(function () {
      if (k) {
        j.hide();
      }
      a.effects.restore(j, q);
      a.effects.removeWrapper(j);
      f();
    });
    if (s > 1) {
      r.splice.apply(r, [1, 0].concat(r.splice(s, c + 1)));
    }
    j.dequeue();
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.clip = function (k, g) {
    var h = a(this),
      m = ["position", "top", "bottom", "left", "right", "height", "width"],
      j = a.effects.setMode(h, k.mode || "hide"),
      n = j === "show",
      e = k.direction || "vertical",
      q = e === "vertical",
      p = q ? "height" : "width",
      l = q ? "top" : "left",
      d = {},
      r,
      c,
      f;
    a.effects.save(h, m);
    h.show();
    r = a.effects.createWrapper(h).css({ overflow: "hidden" });
    c = h[0].tagName === "IMG" ? r : h;
    f = c[p]();
    if (n) {
      c.css(p, 0);
      c.css(l, f / 2);
    }
    d[p] = n ? f : 0;
    d[l] = n ? 0 : f / 2;
    c.animate(d, {
      queue: false,
      duration: k.duration,
      easing: k.easing,
      complete: function () {
        if (!n) {
          h.hide();
        }
        a.effects.restore(h, m);
        a.effects.removeWrapper(h);
        g();
      },
    });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.drop = function (k, f) {
    var g = a(this),
      l = [
        "position",
        "top",
        "bottom",
        "left",
        "right",
        "opacity",
        "height",
        "width",
      ],
      h = a.effects.setMode(g, k.mode || "hide"),
      n = h === "show",
      d = k.direction || "left",
      m = d === "up" || d === "down" ? "top" : "left",
      j = d === "up" || d === "left" ? "pos" : "neg",
      c = { opacity: n ? 1 : 0 },
      e;
    a.effects.save(g, l);
    g.show();
    a.effects.createWrapper(g);
    e = k.distance || g[m === "top" ? "outerHeight" : "outerWidth"](true) / 2;
    if (n) {
      g.css("opacity", 0).css(m, j === "pos" ? -e : e);
    }
    c[m] = (n ? (j === "pos" ? "+=" : "-=") : j === "pos" ? "-=" : "+=") + e;
    g.animate(c, {
      queue: false,
      duration: k.duration,
      easing: k.easing,
      complete: function () {
        if (h === "hide") {
          g.hide();
        }
        a.effects.restore(g, l);
        a.effects.removeWrapper(g);
        f();
      },
    });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.explode = function (r, f) {
    var u = r.pieces ? Math.round(Math.sqrt(r.pieces)) : 3,
      d = u,
      g = a(this),
      n = a.effects.setMode(g, r.mode || "hide"),
      v = n === "show",
      s = g.show().css("visibility", "hidden").offset(),
      x = Math.ceil(g.outerWidth() / d),
      h = Math.ceil(g.outerHeight() / u),
      t = [],
      k,
      l,
      m,
      w,
      p,
      q;
    function e() {
      t.push(this);
      if (t.length === u * d) {
        c();
      }
    }
    for (k = 0; k < u; k++) {
      w = s.top + k * h;
      q = k - (u - 1) / 2;
      for (l = 0; l < d; l++) {
        m = s.left + l * x;
        p = l - (d - 1) / 2;
        g.clone()
          .appendTo("body")
          .wrap("<div></div>")
          .css({
            position: "absolute",
            visibility: "visible",
            left: -l * x,
            top: -k * h,
          })
          .parent()
          .addClass("ui-effects-explode")
          .css({
            position: "absolute",
            overflow: "hidden",
            width: x,
            height: h,
            left: m + (v ? p * x : 0),
            top: w + (v ? q * h : 0),
            opacity: v ? 0 : 1,
          })
          .animate(
            {
              left: m + (v ? 0 : p * x),
              top: w + (v ? 0 : q * h),
              opacity: v ? 1 : 0,
            },
            r.duration || 500,
            r.easing,
            e
          );
      }
    }
    function c() {
      g.css({ visibility: "visible" });
      a(t).remove();
      if (!v) {
        g.hide();
      }
      f();
    }
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.fade = function (f, c) {
    var d = a(this),
      e = a.effects.setMode(d, f.mode || "toggle");
    d.animate(
      { opacity: e },
      { queue: false, duration: f.duration, easing: f.easing, complete: c }
    );
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.fold = function (m, f) {
    var h = a(this),
      p = ["position", "top", "bottom", "left", "right", "height", "width"],
      l = a.effects.setMode(h, m.mode || "hide"),
      r = l === "show",
      j = l === "hide",
      s = m.size || 15,
      n = /([0-9]+)%/.exec(s),
      k = !!m.horizFirst,
      t = r !== k,
      q = t ? ["width", "height"] : ["height", "width"],
      g = m.duration / 2,
      u,
      e,
      c = {},
      d = {};
    a.effects.save(h, p);
    h.show();
    u = a.effects.createWrapper(h).css({ overflow: "hidden" });
    e = t ? [u.width(), u.height()] : [u.height(), u.width()];
    if (n) {
      s = (parseInt(n[1], 10) / 100) * e[j ? 0 : 1];
    }
    if (r) {
      u.css(k ? { height: 0, width: s } : { height: s, width: 0 });
    }
    c[q[0]] = r ? e[0] : s;
    d[q[1]] = r ? e[1] : 0;
    u.animate(c, g, m.easing).animate(d, g, m.easing, function () {
      if (j) {
        h.hide();
      }
      a.effects.restore(h, p);
      a.effects.removeWrapper(h);
      f();
    });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.highlight = function (g, d) {
    var e = a(this),
      h = ["backgroundImage", "backgroundColor", "opacity"],
      f = a.effects.setMode(e, g.mode || "show"),
      c = { backgroundColor: e.css("backgroundColor") };
    if (f === "hide") {
      c.opacity = 0;
    }
    a.effects.save(e, h);
    e.show()
      .css({ backgroundImage: "none", backgroundColor: g.color || "#ffff99" })
      .animate(c, {
        queue: false,
        duration: g.duration,
        easing: g.easing,
        complete: function () {
          if (f === "hide") {
            e.hide();
          }
          a.effects.restore(e, h);
          d();
        },
      });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.pulsate = function (l, e) {
    var g = a(this),
      k = a.effects.setMode(g, l.mode || "show"),
      p = k === "show",
      h = k === "hide",
      q = p || k === "hide",
      d = (l.times || 5) * 2 + (q ? 1 : 0),
      f = l.duration / d,
      c = 0,
      m = g.queue(),
      n = m.length,
      j;
    if (p || !g.is(":visible")) {
      g.css("opacity", 0).show();
      c = 1;
    }
    for (j = 1; j < d; j++) {
      g.animate({ opacity: c }, f, l.easing);
      c = 1 - c;
    }
    g.animate({ opacity: c }, f, l.easing);
    g.queue(function () {
      if (h) {
        g.hide();
      }
      e();
    });
    if (n > 1) {
      m.splice.apply(m, [1, 0].concat(m.splice(n, d + 1)));
    }
    g.dequeue();
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.puff = function (h, c) {
    var d = a(this),
      g = a.effects.setMode(d, h.mode || "hide"),
      f = g === "hide",
      k = parseInt(h.percent, 10) || 150,
      e = k / 100,
      j = {
        height: d.height(),
        width: d.width(),
        outerHeight: d.outerHeight(),
        outerWidth: d.outerWidth(),
      };
    a.extend(h, {
      effect: "scale",
      queue: false,
      fade: true,
      mode: g,
      complete: c,
      percent: f ? k : 100,
      from: f
        ? j
        : {
            height: j.height * e,
            width: j.width * e,
            outerHeight: j.outerHeight * e,
            outerWidth: j.outerWidth * e,
          },
    });
    d.effect(h);
  };
  a.effects.effect.scale = function (h, d) {
    var e = a(this),
      j = a.extend(true, {}, h),
      g = a.effects.setMode(e, h.mode || "effect"),
      m =
        parseInt(h.percent, 10) ||
        (parseInt(h.percent, 10) === 0 ? 0 : g === "hide" ? 0 : 100),
      c = h.direction || "both",
      k = h.origin,
      l = {
        height: e.height(),
        width: e.width(),
        outerHeight: e.outerHeight(),
        outerWidth: e.outerWidth(),
      },
      f = {
        y: c !== "horizontal" ? m / 100 : 1,
        x: c !== "vertical" ? m / 100 : 1,
      };
    j.effect = "size";
    j.queue = false;
    j.complete = d;
    if (g !== "effect") {
      j.origin = k || ["middle", "center"];
      j.restore = true;
    }
    j.from =
      h.from ||
      (g === "show"
        ? { height: 0, width: 0, outerHeight: 0, outerWidth: 0 }
        : l);
    j.to = {
      height: l.height * f.y,
      width: l.width * f.x,
      outerHeight: l.outerHeight * f.y,
      outerWidth: l.outerWidth * f.x,
    };
    if (j.fade) {
      if (g === "show") {
        j.from.opacity = 0;
        j.to.opacity = 1;
      }
      if (g === "hide") {
        j.from.opacity = 1;
        j.to.opacity = 0;
      }
    }
    e.effect(j);
  };
  a.effects.effect.size = function (k, e) {
    var m,
      c,
      g,
      f = a(this),
      q = [
        "position",
        "top",
        "bottom",
        "left",
        "right",
        "width",
        "height",
        "overflow",
        "opacity",
      ],
      r = ["position", "top", "bottom", "left", "right", "overflow", "opacity"],
      s = ["width", "height", "overflow"],
      d = ["fontSize"],
      v = [
        "borderTopWidth",
        "borderBottomWidth",
        "paddingTop",
        "paddingBottom",
      ],
      h = [
        "borderLeftWidth",
        "borderRightWidth",
        "paddingLeft",
        "paddingRight",
      ],
      j = a.effects.setMode(f, k.mode || "effect"),
      t = k.restore || j !== "effect",
      u = k.scale || "both",
      l = k.origin || ["middle", "center"],
      n = f.css("position"),
      p = t ? q : r,
      w = { height: 0, width: 0, outerHeight: 0, outerWidth: 0 };
    if (j === "show") {
      f.show();
    }
    m = {
      height: f.height(),
      width: f.width(),
      outerHeight: f.outerHeight(),
      outerWidth: f.outerWidth(),
    };
    if (k.mode === "toggle" && j === "show") {
      f.from = k.to || w;
      f.to = k.from || m;
    } else {
      f.from = k.from || (j === "show" ? w : m);
      f.to = k.to || (j === "hide" ? w : m);
    }
    g = {
      from: { y: f.from.height / m.height, x: f.from.width / m.width },
      to: { y: f.to.height / m.height, x: f.to.width / m.width },
    };
    if (u === "box" || u === "both") {
      if (g.from.y !== g.to.y) {
        p = p.concat(v);
        f.from = a.effects.setTransition(f, v, g.from.y, f.from);
        f.to = a.effects.setTransition(f, v, g.to.y, f.to);
      }
      if (g.from.x !== g.to.x) {
        p = p.concat(h);
        f.from = a.effects.setTransition(f, h, g.from.x, f.from);
        f.to = a.effects.setTransition(f, h, g.to.x, f.to);
      }
    }
    if (u === "content" || u === "both") {
      if (g.from.y !== g.to.y) {
        p = p.concat(d).concat(s);
        f.from = a.effects.setTransition(f, d, g.from.y, f.from);
        f.to = a.effects.setTransition(f, d, g.to.y, f.to);
      }
    }
    a.effects.save(f, p);
    f.show();
    a.effects.createWrapper(f);
    f.css("overflow", "hidden").css(f.from);
    if (l) {
      c = a.effects.getBaseline(l, m);
      f.from.top = (m.outerHeight - f.outerHeight()) * c.y;
      f.from.left = (m.outerWidth - f.outerWidth()) * c.x;
      f.to.top = (m.outerHeight - f.to.outerHeight) * c.y;
      f.to.left = (m.outerWidth - f.to.outerWidth) * c.x;
    }
    f.css(f.from);
    if (u === "content" || u === "both") {
      v = v.concat(["marginTop", "marginBottom"]).concat(d);
      h = h.concat(["marginLeft", "marginRight"]);
      s = q.concat(v).concat(h);
      f.find("*[width]").each(function () {
        var x = a(this),
          o = {
            height: x.height(),
            width: x.width(),
            outerHeight: x.outerHeight(),
            outerWidth: x.outerWidth(),
          };
        if (t) {
          a.effects.save(x, s);
        }
        x.from = {
          height: o.height * g.from.y,
          width: o.width * g.from.x,
          outerHeight: o.outerHeight * g.from.y,
          outerWidth: o.outerWidth * g.from.x,
        };
        x.to = {
          height: o.height * g.to.y,
          width: o.width * g.to.x,
          outerHeight: o.height * g.to.y,
          outerWidth: o.width * g.to.x,
        };
        if (g.from.y !== g.to.y) {
          x.from = a.effects.setTransition(x, v, g.from.y, x.from);
          x.to = a.effects.setTransition(x, v, g.to.y, x.to);
        }
        if (g.from.x !== g.to.x) {
          x.from = a.effects.setTransition(x, h, g.from.x, x.from);
          x.to = a.effects.setTransition(x, h, g.to.x, x.to);
        }
        x.css(x.from);
        x.animate(x.to, k.duration, k.easing, function () {
          if (t) {
            a.effects.restore(x, s);
          }
        });
      });
    }
    f.animate(f.to, {
      queue: false,
      duration: k.duration,
      easing: k.easing,
      complete: function () {
        if (f.to.opacity === 0) {
          f.css("opacity", f.from.opacity);
        }
        if (j === "hide") {
          f.hide();
        }
        a.effects.restore(f, p);
        if (!t) {
          if (n === "static") {
            f.css({ position: "relative", top: f.to.top, left: f.to.left });
          } else {
            a.each(["top", "left"], function (o, x) {
              f.css(x, function (y, z) {
                var B = parseInt(z, 10),
                  A = o ? f.to.left : f.to.top;
                if (z === "auto") {
                  return A + "px";
                }
                return B + A + "px";
              });
            });
          }
        }
        a.effects.removeWrapper(f);
        e();
      },
    });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.shake = function (n, j) {
    var k = a(this),
      q = ["position", "top", "bottom", "left", "right", "height", "width"],
      m = a.effects.setMode(k, n.mode || "effect"),
      g = n.direction || "left",
      h = n.distance || 20,
      v = n.times || 3,
      f = v * 2 + 1,
      u = Math.round(n.duration / f),
      t = g === "up" || g === "down" ? "top" : "left",
      p = g === "up" || g === "left",
      c = {},
      d = {},
      e = {},
      l,
      r = k.queue(),
      s = r.length;
    a.effects.save(k, q);
    k.show();
    a.effects.createWrapper(k);
    c[t] = (p ? "-=" : "+=") + h;
    d[t] = (p ? "+=" : "-=") + h * 2;
    e[t] = (p ? "-=" : "+=") + h * 2;
    k.animate(c, u, n.easing);
    for (l = 1; l < v; l++) {
      k.animate(d, u, n.easing).animate(e, u, n.easing);
    }
    k.animate(d, u, n.easing)
      .animate(c, u / 2, n.easing)
      .queue(function () {
        if (m === "hide") {
          k.hide();
        }
        a.effects.restore(k, q);
        a.effects.removeWrapper(k);
        j();
      });
    if (s > 1) {
      r.splice.apply(r, [1, 0].concat(r.splice(s, f + 1)));
    }
    k.dequeue();
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.slide = function (j, f) {
    var g = a(this),
      l = ["position", "top", "bottom", "left", "right", "width", "height"],
      h = a.effects.setMode(g, j.mode || "show"),
      n = h === "show",
      d = j.direction || "left",
      m = d === "up" || d === "down" ? "top" : "left",
      k = d === "up" || d === "left",
      e,
      c = {};
    a.effects.save(g, l);
    g.show();
    e = j.distance || g[m === "top" ? "outerHeight" : "outerWidth"](true);
    a.effects.createWrapper(g).css({ overflow: "hidden" });
    if (n) {
      g.css(m, k ? (isNaN(e) ? "-" + e : -e) : e);
    }
    c[m] = (n ? (k ? "+=" : "-=") : k ? "-=" : "+=") + e;
    g.animate(c, {
      queue: false,
      duration: j.duration,
      easing: j.easing,
      complete: function () {
        if (h === "hide") {
          g.hide();
        }
        a.effects.restore(g, l);
        a.effects.removeWrapper(g);
        f();
      },
    });
  };
})(jQuery);
(function (a, b) {
  a.effects.effect.transfer = function (k, e) {
    var f = a(this),
      m = a(k.to),
      n = m.css("position") === "fixed",
      d = a("body"),
      j = n ? d.scrollTop() : 0,
      h = n ? d.scrollLeft() : 0,
      g = m.offset(),
      c = {
        top: g.top - j,
        left: g.left - h,
        height: m.innerHeight(),
        width: m.innerWidth(),
      },
      l = f.offset(),
      p = a("<div class='ui-effects-transfer'></div>")
        .appendTo(document.body)
        .addClass(k.className)
        .css({
          top: l.top - j,
          left: l.left - h,
          height: f.innerHeight(),
          width: f.innerWidth(),
          position: n ? "fixed" : "absolute",
        })
        .animate(c, k.duration, k.easing, function () {
          p.remove();
          e();
        });
  };
})(jQuery);
if (typeof JSON !== "object") {
  JSON = {};
}
(function () {
  function f(n) {
    return n < 10 ? "0" + n : n;
  }
  if (typeof Date.prototype.toJSON !== "function") {
    Date.prototype.toJSON = function (key) {
      return isFinite(this.valueOf())
        ? this.getUTCFullYear() +
            "-" +
            f(this.getUTCMonth() + 1) +
            "-" +
            f(this.getUTCDate()) +
            "T" +
            f(this.getUTCHours()) +
            ":" +
            f(this.getUTCMinutes()) +
            ":" +
            f(this.getUTCSeconds()) +
            "Z"
        : null;
    };
    String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (
      key
    ) {
      return this.valueOf();
    };
  }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {
      "\b": "\\b",
      "\t": "\\t",
      "\n": "\\n",
      "\f": "\\f",
      "\r": "\\r",
      '"': '\\"',
      "\\": "\\\\",
    },
    rep;
  function quote(string) {
    escapable.lastIndex = 0;
    return escapable.test(string)
      ? '"' +
          string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === "string"
              ? c
              : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
          }) +
          '"'
      : '"' + string + '"';
  }
  function str(key, holder) {
    var i,
      k,
      v,
      length,
      mind = gap,
      partial,
      value = holder[key];
    if (
      value &&
      typeof value === "object" &&
      typeof value.toJSON === "function"
    ) {
      value = value.toJSON(key);
    }
    if (typeof rep === "function") {
      value = rep.call(holder, key, value);
    }
    switch (typeof value) {
      case "string":
        return quote(value);
      case "number":
        return isFinite(value) ? String(value) : "null";
      case "boolean":
      case "null":
        return String(value);
      case "object":
        if (!value) {
          return "null";
        }
        gap += indent;
        partial = [];
        if (Object.prototype.toString.apply(value) === "[object Array]") {
          length = value.length;
          for (i = 0; i < length; i += 1) {
            partial[i] = str(i, value) || "null";
          }
          v =
            partial.length === 0
              ? "[]"
              : gap
              ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
              : "[" + partial.join(",") + "]";
          gap = mind;
          return v;
        }
        if (rep && typeof rep === "object") {
          length = rep.length;
          for (i = 0; i < length; i += 1) {
            if (typeof rep[i] === "string") {
              k = rep[i];
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ": " : ":") + v);
              }
            }
          }
        } else {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ": " : ":") + v);
              }
            }
          }
        }
        v =
          partial.length === 0
            ? "{}"
            : gap
            ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
            : "{" + partial.join(",") + "}";
        gap = mind;
        return v;
    }
  }
  if (typeof JSON.stringify !== "function") {
    JSON.stringify = function (value, replacer, space) {
      var i;
      gap = "";
      indent = "";
      if (typeof space === "number") {
        for (i = 0; i < space; i += 1) {
          indent += " ";
        }
      } else {
        if (typeof space === "string") {
          indent = space;
        }
      }
      rep = replacer;
      if (
        replacer &&
        typeof replacer !== "function" &&
        (typeof replacer !== "object" || typeof replacer.length !== "number")
      ) {
        throw new Error("JSON.stringify");
      }
      return str("", { "": value });
    };
  }
  if (typeof JSON.parse !== "function") {
    JSON.parse = function (text, reviver) {
      var j;
      function walk(holder, key) {
        var k,
          v,
          value = holder[key];
        if (value && typeof value === "object") {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            }
          }
        }
        return reviver.call(holder, key, value);
      }
      text = String(text);
      cx.lastIndex = 0;
      if (cx.test(text)) {
        text = text.replace(cx, function (a) {
          return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        });
      }
      if (
        /^[\],:{}\s]*$/.test(
          text
            .replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@")
            .replace(
              /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
              "]"
            )
            .replace(/(?:^|:|,)(?:\s*\[)+/g, "")
        )
      ) {
        j = eval("(" + text + ")");
        return typeof reviver === "function" ? walk({ "": j }, "") : j;
      }
      throw new SyntaxError("JSON.parse");
    };
  }
})();
window.IAS = window.IAS || {};
var localSettings = {};
localSettings.currentLanguage = localStorage.getItem("localizationId") || 1;
IAS.localization;
IAS.getLocalization = function (b, a) {
  var c = { languageId: b };
  $.post("/Localization/UpdateLocalizationByLanguageID", c, function (d) {
    IAS.localization = d;
    localStorage.setItem("localization", JSON.stringify(IAS.localization));
    a();
  });
};
IAS.L = function (e) {
  var d = this;
  var a;
  var f;
  var b = false;
  if (IAS.localization == undefined && localStorage) {
    IAS.localization = JSON.parse(localStorage.getItem("localization"));
  }
  if (IAS.localization && e) {
    a = IAS.localization;
    var g;
    var c = e.trim().toLowerCase();
    if (a[c]) {
      g = a[c];
      b = true;
    }
    if (g) {
      f = e.replace(e, g);
    } else {
      f = e;
    }
  } else {
    f = e;
  }
  if (!b) {
    IAS.LazyAddToLocalization(e);
  }
  return f;
};
IAS.LazyAddToLocalization = function (a) {
  if (IAS.dummyLocalized) {
    IAS.dummyLocalized.push(a);
  } else {
    IAS.dummyLocalized = [a];
    setInterval(function () {
      if (IAS.dummyLocalized && IAS.dummyLocalized.length > 0) {
        $.post(
          "/Renderer/AddToLocalization",
          { keys: JSON.stringify(IAS.dummyLocalized) },
          function (b) {}
        );
        IAS.dummyLocalized = [];
      }
    }, 60000);
  }
};
IAS.bind = function (c, b, d) {
  if (arguments.length > 2) {
    var a = Array.prototype.slice.call(arguments, 2);
    return function () {
      var e = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(e, a);
      return c[b].apply(c, e);
    };
  } else {
    return function () {
      return c[b].apply(c, arguments);
    };
  }
};
IAS.getQueryString = function () {
  var d = {},
    b = location.search.substring(1),
    c = /([^&=]+)=([^&]*)/g,
    a;
  while ((a = c.exec(b))) {
    d[decodeURIComponent(a[1])] = decodeURIComponent(a[2]);
  }
  return d;
};
IAS.checkCapsLock = function (a, c) {
  var b = c ? c : window.event;
  if (!b) {
    return;
  }
  var e = b.target ? b.target : b.srcElement;
  var f = -1;
  if (b.which) {
    f = b.which;
  } else {
    if (b.keyCode) {
      f = b.keyCode;
    }
  }
  var d = false;
  if (b.shiftKey) {
    d = b.shiftKey;
  } else {
    if (b.modifiers) {
      d = !!(b.modifiers & 4);
    }
  }
  if ((f >= 65 && f <= 90 && !d) || (f >= 97 && f <= 122 && d)) {
    a.html("&nbspCaps Lock is on");
  } else {
    a.html("&nbsp");
  }
};
String.format = function () {
  var c = arguments[0];
  for (var a = 0; a < arguments.length - 1; a++) {
    var b = new RegExp("\\{" + a + "\\}", "gm");
    c = c.replace(b, arguments[a + 1]);
  }
  return c;
};
Object.size = function (b) {
  var c = 0;
  for (var a in b) {
    if (b.hasOwnProperty(a)) {
      c++;
    }
  }
  return c;
};
Object.defineProperties(Array.prototype, {
  removeValue: {
    configurable: false,
    enumerable: false,
    get: function () {
      return function (b) {
        var a = $.inArray(b, this);
        a > -1 && this.splice(a, 1);
        return this;
      };
    },
  },
  clone: {
    configurable: false,
    enumerable: false,
    get: function () {
      return function () {
        return this.slice(0);
      };
    },
  },
  InsertAt: {
    configurable: false,
    enumerable: false,
    get: function () {
      return function (a, b) {
        this.splice(a, 0, b);
        return this;
      };
    },
  },
  pushValues: {
    configurable: false,
    enumerable: false,
    get: function () {
      return function (a) {
        if (typeof a === "number") {
          a = [a];
        }
        Array.prototype.push.apply(this, a);
        return this;
      };
    },
  },
});
$.datepicker.setDefaults({ dateFormat: "yy-mm-dd" });
$.fn.appendBr = function () {
  return this.each(function (c, b) {
    var a = document.createElement("BR");
    b.appendChild(a);
  });
};
$.fn.appendHr = function () {
  return this.each(function (c, a) {
    var b = document.createElement("HR");
    a.appendChild(b);
  });
};
$.fn.appendSpan = function (a) {
  return this.each(function (c, b) {
    var d = $("<span>");
    d.html(a);
    b.appendChild(d[0]);
  });
};
$.createDiv = function (c, b) {
  var a = $("<div>");
  if (c) {
    a.attr("id", c);
  }
  if (b) {
    a.addClass(b);
  }
  return a;
};
$.appendAtIndex = function (b, a, c) {
  if (c === 0) {
    b.prepend(a);
    return;
  }
  b.find("> :nth-child(" + c + ")").after(a);
};
$.fn.clearFields = $.fn.clearInputs = function (a) {
  var b = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
  return this.each(function () {
    var c = this.type,
      d = this.tagName.toLowerCase();
    if (b.test(c) || d == "textarea") {
      this.value = "";
    } else {
      if (c == "checkbox" || c == "radio") {
        this.checked = false;
      } else {
        if (d == "select") {
          this.selectedIndex = -1;
        } else {
          if (c == "file") {
            if (/MSIE/.test(navigator.userAgent)) {
              $(this).replaceWith($(this).clone(true));
            } else {
              $(this).val("");
            }
          } else {
            if (a) {
              if (
                (a === true && /hidden/.test(c)) ||
                (typeof a == "string" && $(this).is(a))
              ) {
                this.value = "";
              }
            }
          }
        }
      }
    }
  });
};
$.fn.setID = function (a) {
  return this.each(function (c, b) {
    var d = $(b);
    d.attr("iasKey", a);
  });
};
$.fn.getID = function () {
  return $(this).attr("iasKey");
};
$.fn.spin = function (b, a) {
  var c = {
    tiny: { lines: 8, length: 2, width: 2, radius: 3 },
    small: { lines: 8, length: 4, width: 3, radius: 5 },
    large: { lines: 20, length: 20, width: 4, radius: 25 },
    circle: {
      lines: 10,
      length: 1,
      width: 10,
      radius: 30,
      top: "auto",
      left: "auto",
    },
  };
  if (Spinner != undefined) {
    return this.each(function () {
      var d = $(this),
        e = d.data();
      if (e.spinner) {
        e.spinner.stop();
        delete e.spinner;
      }
      if (b !== false) {
        if (typeof b === "string") {
          if (b in c) {
            b = c[b];
          } else {
            b = {};
          }
          if (a) {
            b.color = a;
          }
        }
        e.spinner = new Spinner($.extend({ color: d.css("color") }, b)).spin(
          this
        );
      }
    });
  } else {
    throw "Spinner class not available.";
  }
};
var originalAppend = $.fn.append;
$.fn.append = function () {
  return originalAppend.apply(this, arguments).trigger("append");
};
$.fn.onAppend = function () {
  var a = $(this);
  if (arguments.length == 0) {
    a.trigger("append");
  } else {
    if (arguments[0] instanceof Function) {
      a.bind("append", arguments[0]);
    }
  }
};
(function (a, d) {
  var c = /[<>&\r\n"']/gm;
  var b = {
    "<": "lt;",
    ">": "gt;",
    "&": "amp;",
    "\r": "#13;",
    "\n": "#10;",
    '"': "quot;",
    "'": "#39;",
  };
  a.extend({
    fileDownload: function (m, w) {
      var y = a.extend(
        {
          preparingMessageHtml: null,
          failMessageHtml: null,
          androidPostUnsupportedMessageHtml:
            "Unfortunately your Android browser doesn't support this type of file download. Please try again with a different browser.",
          dialogOptions: { modal: true },
          prepareCallback: function (A) {},
          successCallback: function (A) {},
          failCallback: function (A, B) {},
          httpMethod: "GET",
          data: null,
          checkInterval: 100,
          cookieName: "fileDownload",
          cookieValue: "true",
          cookiePath: "/",
          cookieDomain: null,
          popupWindowTitle: "Initiating file download...",
          encodeHTMLEntities: true,
        },
        w
      );
      var k = new a.Deferred();
      var z = (
        navigator.userAgent ||
        navigator.vendor ||
        d.opera
      ).toLowerCase();
      var u;
      var t;
      var v;
      if (/ip(ad|hone|od)/.test(z)) {
        u = true;
      } else {
        if (z.indexOf("android") !== -1) {
          t = true;
        } else {
          v =
            /avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|playbook|silk|iemobile|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(
              z
            ) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(
              z.substr(0, 4)
            );
        }
      }
      var r = y.httpMethod.toUpperCase();
      if (t && r !== "GET") {
        if (a().dialog) {
          a("<div>")
            .html(y.androidPostUnsupportedMessageHtml)
            .dialog(y.dialogOptions);
        } else {
          alert(y.androidPostUnsupportedMessageHtml);
        }
        return k.reject();
      }
      var g = null;
      var s = {
        onPrepare: function (A) {
          if (y.preparingMessageHtml) {
            g = a("<div>").html(y.preparingMessageHtml).dialog(y.dialogOptions);
          } else {
            if (y.prepareCallback) {
              y.prepareCallback(A);
            }
          }
        },
        onSuccess: function (A) {
          if (g) {
            g.dialog("close");
          }
          y.successCallback(A);
          k.resolve(A);
        },
        onFail: function (A, B) {
          if (g) {
            g.dialog("close");
          }
          if (y.failMessageHtml) {
            a("<div>").html(y.failMessageHtml).dialog(y.dialogOptions);
          }
          y.failCallback(A, B);
          k.reject(A, B);
        },
      };
      s.onPrepare(m);
      if (y.data !== null && typeof y.data !== "string") {
        y.data = a.param(y.data);
      }
      var f, l, n, e;
      if (r === "GET") {
        if (y.data !== null) {
          var x = m.indexOf("?");
          if (x !== -1) {
            if (m.substring(m.length - 1) !== "&") {
              m = m + "&";
            }
          } else {
            m = m + "?";
          }
          m = m + y.data;
        }
        if (u || t) {
          l = d.open(m);
          l.document.title = y.popupWindowTitle;
          d.focus();
        } else {
          if (v) {
            d.location(m);
          } else {
            f = a("<iframe>").hide().prop("src", m).appendTo("body");
          }
        }
      } else {
        var o = "";
        if (y.data !== null) {
          a.each(y.data.replace(/\+/g, " ").split("&"), function () {
            var B = this.split("=");
            var A = y.encodeHTMLEntities
              ? q(decodeURIComponent(B[0]))
              : decodeURIComponent(B[0]);
            if (A) {
              var C = y.encodeHTMLEntities
                ? q(decodeURIComponent(B[1]))
                : decodeURIComponent(B[1]);
              o += '<input type="hidden" name="' + A + '" value="' + C + '" />';
            }
          });
        }
        if (v) {
          e = a("<form>").appendTo("body");
          e.hide().prop("method", y.httpMethod).prop("action", m).html(o);
        } else {
          if (u) {
            l = d.open("about:blank");
            l.document.title = y.popupWindowTitle;
            n = l.document;
            d.focus();
          } else {
            f = a(
              "<iframe style='display: none' src='about:blank'></iframe>"
            ).appendTo("body");
            n = p(f);
          }
          n.write(
            "<html><head></head><body><form method='" +
              y.httpMethod +
              "' action='" +
              m +
              "'>" +
              o +
              "</form>" +
              y.popupWindowTitle +
              "</body></html>"
          );
          e = a(n).find("form");
        }
        e.submit();
      }
      setTimeout(h, y.checkInterval);
      function h() {
        if (document.cookie.indexOf(y.cookieName + "=" + y.cookieValue) != -1) {
          s.onSuccess(m);
          var B =
            y.cookieName +
            "=; path=" +
            y.cookiePath +
            "; expires=" +
            new Date(0).toUTCString() +
            ";";
          if (y.cookieDomain) {
            B += " domain=" + y.cookieDomain + ";";
          }
          document.cookie = B;
          j(false);
          return;
        }
        if (l || f) {
          try {
            var E = l ? l.document : p(f);
            if (E && E.body != null && E.body.innerHTML.length) {
              var F = true;
              if (e && e.length) {
                var A = a(E.body).contents().first();
                try {
                  if (A.length && A[0] === e[0]) {
                    F = false;
                  }
                } catch (C) {
                  if (C && C.number == -2146828218) {
                    F = true;
                  } else {
                    throw C;
                  }
                }
              }
              if (F) {
                setTimeout(function () {
                  s.onFail(E.body.innerHTML, m);
                  j(true);
                }, 100);
                return;
              }
            }
          } catch (D) {
            s.onFail("", m);
            j(true);
            return;
          }
        }
        setTimeout(h, y.checkInterval);
      }
      function p(A) {
        var B = A[0].contentWindow || A[0].contentDocument;
        if (B.document) {
          B = B.document;
        }
        return B;
      }
      function j(A) {
        setTimeout(function () {
          if (l) {
            if (t) {
              l.close();
            }
            if (u) {
              if (l.focus) {
                l.focus();
                if (A) {
                  l.close();
                }
              }
            }
          }
        }, 0);
      }
      function q(A) {
        return A.replace(c, function (B) {
          return "&" + b[B];
        });
      }
      return k.promise();
    },
  });
})(jQuery, this);

(function (a) {
  a.fn.jqte = function (h) {
    var l = [
      { title: "Text Format" },
      { title: "Font Size" },
      { title: "Color" },
      { title: "Bold", hotkey: "B" },
      { title: "Italic", hotkey: "I" },
      { title: "Underline", hotkey: "U" },
      { title: "Ordered List", hotkey: "." },
      { title: "Unordered List", hotkey: "," },
      { title: "Subscript", hotkey: "down arrow" },
      { title: "Superscript", hotkey: "up arrow" },
      { title: "Outdent", hotkey: "left arrow" },
      { title: "Indent", hotkey: "right arrow" },
      { title: "Justify Left" },
      { title: "Justify Center" },
      { title: "Justify Right" },
      { title: "Strike Through", hotkey: "K" },
      { title: "Add Link", hotkey: "L" },
      { title: "Remove Link" },
      { title: "Cleaner Style", hotkey: "Delete" },
      { title: "Horizontal Rule", hotkey: "H" },
      { title: "Source" },
    ];
    var e = [
      ["p", "Normal"],
      ["h1", "Header 1"],
      ["h2", "Header 2"],
      ["h3", "Header 3"],
      ["h4", "Header 4"],
      ["h5", "Header 5"],
      ["h6", "Header 6"],
      ["pre", "Preformatted"],
    ];
    var f = ["10", "12", "16", "18", "20", "24", "28"];
    var d = [
      "0,0,0",
      "68,68,68",
      "102,102,102",
      "153,153,153",
      "204,204,204",
      "238,238,238",
      "243,243,243",
      "255,255,255",
      null,
      "255,0,0",
      "255,153,0",
      "255,255,0",
      "0,255,0",
      "0,255,255",
      "0,0,255",
      "153,0,255",
      "255,0,255",
      null,
      "244,204,204",
      "252,229,205",
      "255,242,204",
      "217,234,211",
      "208,224,227",
      "207,226,243",
      "217,210,233",
      "234,209,220",
      "234,153,153",
      "249,203,156",
      "255,229,153",
      "182,215,168",
      "162,196,201",
      "159,197,232",
      "180,167,214",
      "213,166,189",
      "224,102,102",
      "246,178,107",
      "255,217,102",
      "147,196,125",
      "118,165,175",
      "111,168,220",
      "142,124,195",
      "194,123,160",
      "204,0,0",
      "230,145,56",
      "241,194,50",
      "106,168,79",
      "69,129,142",
      "61,133,198",
      "103,78,167",
      "166,77,121",
      "153,0,0",
      "180,95,6",
      "191,144,0",
      "56,118,29",
      "19,79,92",
      "11,83,148",
      "53,28,117",
      "116,27,71",
      "102,0,0",
      "120,63,4",
      "127,96,0",
      "39,78,19",
      "12,52,61",
      "7,55,99",
      "32,18,77",
      "76,17,48",
    ];
    var g = ["Web Address", "E-mail Address", "Picture URL"];
    var k = a.extend(
      {
        status: true,
        css: "jqte",
        title: true,
        titletext: l,
        button: "OK",
        format: true,
        formats: e,
        fsize: true,
        fsizes: f,
        funit: "px",
        color: true,
        linktypes: g,
        b: true,
        i: true,
        u: true,
        ol: true,
        ul: true,
        sub: true,
        sup: true,
        outdent: true,
        indent: true,
        left: true,
        center: true,
        right: true,
        strike: true,
        link: true,
        unlink: true,
        remove: true,
        rule: true,
        source: true,
        placeholder: false,
        br: true,
        p: true,
        change: "",
        focus: "",
        blur: "",
      },
      h
    );
    a.fn.jqteVal = function (m) {
      a(this)
        .closest("." + k.css)
        .find("." + k.css + "_editor")
        .html(m);
    };
    var j = navigator.userAgent.toLowerCase();
    if (/msie [1-7]./.test(j)) {
      k.title = false;
    }
    var c = [];
    function b(p, m, o, q, n) {
      var r = c.length + 1;
      return c.push({
        name: p,
        cls: r,
        command: m,
        key: o,
        tag: q,
        emphasis: n,
      });
    }
    b("format", "formats", "", "", false);
    b("fsize", "fSize", "", "", false);
    b("color", "colors", "", "", false);
    b("b", "Bold", "B", ["b", "strong"], true);
    b("i", "Italic", "I", ["i", "em"], true);
    b("u", "Underline", "U", ["u"], true);
    b("ol", "insertorderedlist", "Â¾", ["ol"], true);
    b("ul", "insertunorderedlist", "Â¼", ["ul"], true);
    b("sub", "subscript", "(", ["sub"], true);
    b("sup", "superscript", "&", ["sup"], true);
    b("outdent", "outdent", "%", ["blockquote"], false);
    b("indent", "indent", "'", ["blockquote"], true);
    b("left", "justifyLeft", "", "", false);
    b("center", "justifyCenter", "", "", false);
    b("right", "justifyRight", "", "", false);
    b("strike", "strikeThrough", "K", ["strike"], true);
    b("link", "linkcreator", "L", ["a"], true);
    b("unlink", "unlink", "", ["a"], false);
    b("remove", "removeformat", ".", "", false);
    b("rule", "inserthorizontalrule", "H", ["hr"], false);
    b("source", "displaysource", "", "", false);
    return this.each(function () {
      if (
        !a(this).data("jqte") ||
        a(this).data("jqte") == null ||
        a(this).data("jqte") == "undefined"
      ) {
        a(this).data("jqte", true);
      } else {
        a(this).data("jqte", false);
      }
      if (!k.status) {
        a(this)
          .closest("." + k.css)
          .find("." + k.css + "_toolbar")
          .css({ display: "none" });
        return;
      }
      var ag = a(this);
      var ai = a(this).prop("tagName").toLowerCase();
      a(this).attr("data-origin", ai);
      var aj =
        a(this).is("[value]") || ai == "textarea"
          ? a(this).val()
          : a(this).html();
      aj = aj
        .replace(/&#34;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&lt;/g, "<")
        .replace(/&gt;/g, ">")
        .replace(/&amp;/g, "&");
      a(this).after('<div class="' + k.css + '"></div>');
      var F = a(this).next("." + k.css);
      F.html(
        '<div class="' +
          k.css +
          '_toolbar" role="toolbar" unselectable></div><div class="' +
          k.css +
          '_linkform" style="display:none" role="dialog"></div><div class="' +
          k.css +
          '_editor"></div>'
      );
      var ak = F.find("." + k.css + "_toolbar");
      var I = F.find("." + k.css + "_linkform");
      var v = F.find("." + k.css + "_editor");
      var x = k.css + "_tool_depressed";
      I.append(
        '<div class="' +
          k.css +
          '_linktypeselect" unselectable></div><input class="' +
          k.css +
          '_linkinput" type="text/css" value=""><div class="' +
          k.css +
          '_linkbutton" unselectable>' +
          k.button +
          '</div> <div style="height:1px;float:none;clear:both"></div>'
      );
      var N = I.find("." + k.css + "_linktypeselect");
      var J = I.find("." + k.css + "_linkinput");
      var H = I.find("." + k.css + "_linkbutton");
      N.append(
        '<div class="' +
          k.css +
          '_linktypeview" unselectable></div><div class="' +
          k.css +
          '_linktypes" role="menu" unselectable></div>'
      );
      var M = N.find("." + k.css + "_linktypes");
      var P = N.find("." + k.css + "_linktypeview");
      var ad = k.css + "-setlink";
      v.after(
        '<div class="' + k.css + "_source " + k.css + '_hiddenField"></div>'
      );
      var ae = F.find("." + k.css + "_source");
      ag.appendTo(ae);
      if (ai != "textarea") {
        var ah = "";
        a(ag[0].attributes).each(function () {
          if (this.nodeName != "type" && this.nodeName != "value") {
            ah = ah + " " + this.nodeName + '="' + this.nodeValue + '"';
          }
        });
        ag.replaceWith("<textarea " + ah + ">" + aj + "</textarea>");
        ag = ae.find("textarea");
      }
      v.attr("contenteditable", "true").html(aj);
      for (var Q = 0; Q < c.length; Q++) {
        if (k[c[Q].name]) {
          var p =
            c[Q].key.length > 0
              ? k.titletext[Q].hotkey != null &&
                k.titletext[Q].hotkey != "undefined" &&
                k.titletext[Q].hotkey != ""
                ? " (Ctrl+" + k.titletext[Q].hotkey + ")"
                : ""
              : "";
          var q =
            k.titletext[Q].title != null &&
            k.titletext[Q].title != "undefined" &&
            k.titletext[Q].title != ""
              ? k.titletext[Q].title + p
              : "";
          ak.append(
            '<div class="' +
              k.css +
              "_tool " +
              k.css +
              "_tool_" +
              c[Q].cls +
              '" role="button" data-tool="' +
              Q +
              '" unselectable><a class="' +
              k.css +
              '_tool_icon" unselectable></a></div>'
          );
          ak.find("." + k.css + "_tool[data-tool=" + Q + "]").data({
            tag: c[Q].tag,
            command: c[Q].command,
            emphasis: c[Q].emphasis,
            title: q,
          });
          if (c[Q].name == "format" && a.isArray(k.formats)) {
            var am =
              k.formats[0][1].length > 0 && k.formats[0][1] != "undefined"
                ? k.formats[0][1]
                : "";
            ak.find("." + k.css + "_tool_" + c[Q].cls)
              .find("." + k.css + "_tool_icon")
              .replaceWith(
                '<a class="' +
                  k.css +
                  '_tool_label" unselectable><span class="' +
                  k.css +
                  '_tool_text" unselectable>' +
                  am +
                  '</span><span class="' +
                  k.css +
                  '_tool_icon" unselectable></span></a>'
              );
            ak.find("." + k.css + "_tool_" + c[Q].cls).append(
              '<div class="' + k.css + '_formats" unselectable></div>'
            );
            for (var z = 0; z < k.formats.length; z++) {
              ak.find("." + k.css + "_formats").append(
                "<a " +
                  k.css +
                  '-formatval="' +
                  k.formats[z][0] +
                  '" class="' +
                  k.css +
                  "_format " +
                  k.css +
                  "_format_" +
                  z +
                  '" role="menuitem" unselectable>' +
                  k.formats[z][1] +
                  "</a>"
              );
            }
            ak.find("." + k.css + "_formats").data("status", false);
          } else {
            if (c[Q].name == "fsize" && a.isArray(k.fsizes)) {
              ak.find("." + k.css + "_tool_" + c[Q].cls).append(
                '<div class="' + k.css + '_fontsizes" unselectable></div>'
              );
              for (var z = 0; z < k.fsizes.length; z++) {
                ak.find("." + k.css + "_fontsizes").append(
                  "<a " +
                    k.css +
                    '-styleval="' +
                    k.fsizes[z] +
                    '" class="' +
                    k.css +
                    '_fontsize" style="font-size:' +
                    k.fsizes[z] +
                    k.funit +
                    '" role="menuitem" unselectable>Abcdefgh...</a>'
                );
              }
            } else {
              if (c[Q].name == "color" && a.isArray(d)) {
                ak.find("." + k.css + "_tool_" + c[Q].cls).append(
                  '<div class="' + k.css + '_cpalette" unselectable></div>'
                );
                for (var r = 0; r < d.length; r++) {
                  if (d[r] != null) {
                    ak.find("." + k.css + "_cpalette").append(
                      "<a " +
                        k.css +
                        '-styleval="' +
                        d[r] +
                        '" class="' +
                        k.css +
                        '_color" style="background-color: rgb(' +
                        d[r] +
                        ')" role="gridcell" unselectable></a>'
                    );
                  } else {
                    ak.find("." + k.css + "_cpalette").append(
                      '<div class="' + k.css + '_colorSeperator"></div>'
                    );
                  }
                }
              }
            }
          }
        }
      }
      M.data("linktype", "0");
      for (var Q = 0; Q < 3; Q++) {
        M.append(
          "<a " +
            k.css +
            '-linktype="' +
            Q +
            '" unselectable>' +
            k.linktypes[Q] +
            "</a>"
        );
        P.html(
          '<div class="' +
            k.css +
            '_linktypearrow" unselectable></div><div class="' +
            k.css +
            '_linktypetext">' +
            M.find("a:eq(" + M.data("linktype") + ")").text() +
            "</div>"
        );
      }
      var U = "";
      if (/msie/.test(j)) {
        U = "-ms-";
      } else {
        if (/chrome/.test(j) || /safari/.test(j) || /yandex/.test(j)) {
          U = "-webkit-";
        } else {
          if (/mozilla/.test(j)) {
            U = "-moz-";
          } else {
            if (/opera/.test(j)) {
              U = "-o-";
            } else {
              if (/konqueror/.test(j)) {
                U = "-khtml-";
              } else {
                U = "";
              }
            }
          }
        }
      }
      if (k.placeholder && k.placeholder != "") {
        F.prepend(
          '<div class="' +
            k.css +
            '_placeholder" unselectable><div class="' +
            k.css +
            '_placeholder_text">' +
            k.placeholder +
            "</div></div>"
        );
        var R = F.find("." + k.css + "_placeholder");
        R.click(function () {
          v.focus();
        });
      }
      F.find("[unselectable]")
        .css(U + "user-select", "none")
        .addClass("unselectable")
        .attr("unselectable", "on")
        .on("selectstart mousedown", false);
      var al = ak.find("." + k.css + "_tool");
      var A = ak.find("." + k.css + "_formats");
      var D = ak.find("." + k.css + "_fontsizes");
      var t = ak.find("." + k.css + "_cpalette");
      function aa() {
        if (window.getSelection) {
          return window.getSelection();
        } else {
          if (
            document.selection &&
            document.selection.createRange &&
            document.selection.type != "None"
          ) {
            return document.selection.createRange();
          }
        }
      }
      function ab(n, ap) {
        var an,
          ao = aa();
        if (window.getSelection) {
          if (ao.anchorNode && ao.getRangeAt) {
            an = ao.getRangeAt(0);
          }
          if (an) {
            ao.removeAllRanges();
            ao.addRange(an);
          }
          if (!j.match(/msie/)) {
            document.execCommand("StyleWithCSS", false, false);
          }
          document.execCommand(n, false, ap);
        } else {
          if (
            document.selection &&
            document.selection.createRange &&
            document.selection.type != "None"
          ) {
            an = document.selection.createRange();
            an.execCommand(n, false, ap);
          }
        }
        m(false, false);
      }
      function W(av, au, aw) {
        if (v.not(":focus")) {
          v.focus();
        }
        if (window.getSelection) {
          var ar = aa(),
            at,
            an,
            n;
          if (ar.anchorNode && ar.getRangeAt) {
            at = ar.getRangeAt(0);
            an = document.createElement(av);
            a(an).attr(au, aw);
            n = at.extractContents();
            an.appendChild(n);
            at.insertNode(an);
            ar.removeAllRanges();
            if (au == "style") {
              m(a(an), aw);
            } else {
              m(a(an), false);
            }
          }
        } else {
          if (
            document.selection &&
            document.selection.createRange &&
            document.selection.type != "None"
          ) {
            var ap = document.selection.createRange();
            var aq = ap.htmlText;
            var ao =
              "<" + av + " " + au + '="' + aw + '">' + aq + "</" + av + ">";
            document.selection.createRange().pasteHTML(ao);
          }
        }
      }
      var E = function () {
        var n, ao;
        if (window.getSelection) {
          ao = getSelection();
          n = ao.anchorNode;
        }
        if (
          !n &&
          document.selection &&
          document.selection.createRange &&
          document.selection.type != "None"
        ) {
          ao = document.selection;
          var an = ao.getRangeAt ? ao.getRangeAt(0) : ao.createRange();
          n = an.commonAncestorContainer
            ? an.commonAncestorContainer
            : an.parentElement
            ? an.parentElement()
            : an.item(0);
        }
        if (n) {
          return n.nodeName == "#text" ? a(n.parentNode) : a(n);
        } else {
          return false;
        }
      };
      function m(n, ao) {
        var an = E();
        an = an ? an : n;
        if (an && ao == false) {
          if (an.parent().is("[style]")) {
            an.attr("style", an.parent().attr("style"));
          }
          if (an.is("[style]")) {
            an.find("*").attr("style", an.attr("style"));
          }
        } else {
          if (n && ao && n.is("[style]")) {
            var ap = ao.split(";");
            ap = ap[0].split(":");
            if (n.is("[style*=" + ap[0] + "]")) {
              n.find("*").css(ap[0], ap[1]);
            }
            ac(n);
          }
        }
      }
      function ac(n) {
        if (n) {
          var n = n[0];
          if (document.body.createTextRange) {
            var an = document.body.createTextRange();
            an.moveToElementText(n);
            an.select();
          } else {
            if (window.getSelection) {
              var ao = window.getSelection();
              var an = document.createRange();
              if (n != "undefined" && n != null) {
                an.selectNodeContents(n);
                ao.removeAllRanges();
                ao.addRange(an);
                if (a(n).is(":empty")) {
                  a(n).append("&nbsp;");
                  ac(a(n));
                }
              }
            }
          }
        }
      }
      function Y() {
        if (!ak.data("sourceOpened")) {
          var n = E();
          var an = "http://";
          G(true);
          if (n) {
            var ao = n.prop("tagName").toLowerCase();
            if (ao == "a" && n.is("[href]")) {
              an = n.attr("href");
              n.attr(ad, "");
            } else {
              W("a", ad, "");
            }
          } else {
            J.val(an).focus();
          }
          N.click(function (ap) {
            if (
              a(ap.target).hasClass(k.css + "_linktypetext") ||
              a(ap.target).hasClass(k.css + "_linktypearrow")
            ) {
              O(true);
            }
          });
          M.find("a").click(function () {
            var ap = a(this).attr(k.css + "-linktype");
            M.data("linktype", ap);
            P.find("." + k.css + "_linktypetext").html(
              M.find("a:eq(" + M.data("linktype") + ")").text()
            );
            K(an);
            O();
          });
          K(an);
          J.focus()
            .val(an)
            .bind("keypress keyup", function (ap) {
              if (ap.keyCode == 13) {
                L(F.find("[" + ad + "]"));
                return false;
              }
            });
          H.click(function () {
            L(F.find("[" + ad + "]"));
          });
        } else {
          G(false);
        }
      }
      function L(n) {
        J.focus();
        ac(n);
        n.removeAttr(ad);
        if (M.data("linktype") != "2") {
          ab("createlink", J.val());
        } else {
          ab("insertImage", J.val());
          v.find("img").each(function () {
            var ao = a(this).prev("a");
            var an = a(this).next("a");
            if (ao.length > 0 && ao.html() == "") {
              ao.remove();
            } else {
              if (an.length > 0 && an.html() == "") {
                an.remove();
              }
            }
          });
        }
        G();
        v.trigger("change");
      }
      function G(n) {
        s("[" + ad + "]:not([href])");
        F.find("[" + ad + "][href]").removeAttr(ad);
        if (n) {
          ak.data("linkOpened", true);
          I.show();
        } else {
          ak.data("linkOpened", false);
          I.hide();
        }
        O();
      }
      function O(n) {
        if (n) {
          M.show();
        } else {
          M.hide();
        }
      }
      function K(an) {
        var n = M.data("linktype");
        if (
          n == "1" &&
          (J.val() == "http://" ||
            J.is("[value^=http://]") ||
            !J.is("[value^=mailto]"))
        ) {
          J.val("mailto:");
        } else {
          if (n != "1" && !J.is("[value^=http://]")) {
            J.val("http://");
          } else {
            J.val(an);
          }
        }
      }
      function Z(n) {
        if (!ak.data("sourceOpened")) {
          if (n == "fSize") {
            styleField = D;
          } else {
            if (n == "colors") {
              styleField = t;
            }
          }
          af(styleField, true);
          styleField
            .find("a")
            .unbind("click")
            .click(function () {
              var ao = a(this).attr(k.css + "-styleval");
              if (n == "fSize") {
                styleType = "font-size";
                ao = ao + k.funit;
              } else {
                if (n == "colors") {
                  styleType = "color";
                  ao = "rgb(" + ao + ")";
                }
              }
              var an = V(styleType);
              W("span", "style", styleType + ":" + ao + ";" + an);
              af("", false);
              a("." + k.css + "_title").remove();
              v.trigger("change");
            });
        } else {
          af(styleField, false);
        }
        G(false);
      }
      function af(aq, ap) {
        var an = "",
          n = [
            { d: "fsizeOpened", f: D },
            { d: "cpallOpened", f: t },
          ];
        if (aq != "") {
          for (var ao = 0; ao < n.length; ao++) {
            if (aq == n[ao]["f"]) {
              an = n[ao];
            }
          }
        }
        if (ap) {
          ak.data(an.d, true);
          an.f.slideDown(100);
          for (var ao = 0; ao < n.length; ao++) {
            if (an.d != n[ao]["d"]) {
              ak.data(n[ao]["d"], false);
              n[ao]["f"].slideUp(100);
            }
          }
        } else {
          for (var ao = 0; ao < n.length; ao++) {
            ak.data(n[ao]["d"], false);
            n[ao]["f"].slideUp(100);
          }
        }
      }
      function s(n) {
        F.find(n).each(function () {
          a(this).before(a(this).html()).remove();
        });
      }
      function V(an) {
        var ap = E();
        if (ap && ap.is("[style]") && ap.css(an) != "") {
          var ao = ap.css(an);
          ap.css(an, "");
          var n = ap.attr("style");
          ap.css(an, ao);
          return n;
        } else {
          return "";
        }
      }
      function X() {
        B(true);
        A.find("a").click(function () {
          a("*", this).click(function (an) {
            an.preventDefault();
            return false;
          });
          C(a(this).text());
          var n = a(this).attr(k.css + "-formatval");
          ab("formatBlock", "<" + n + ">");
          B(false);
        });
      }
      function B(n) {
        var an = n ? true : false;
        an = n && A.data("status") ? true : false;
        if (an || !n) {
          A.data("status", false).slideUp(200);
        } else {
          A.data("status", true).slideDown(200);
        }
      }
      function C(an) {
        var n = A.closest("." + k.css + "_tool")
          .find("." + k.css + "_tool_label")
          .find("." + k.css + "_tool_text");
        if (an.length > 10) {
          an = an.substr(0, 7) + "...";
        }
        n.html(an);
      }
      function y(aq) {
        var n, an, ao;
        n = aq
          .replace(/\n/gim, "")
          .replace(/\r/gim, "")
          .replace(/\t/gim, "")
          .replace(/&nbsp;/gim, " ");
        an = [
          /\<span(|\s+.*?)><span(|\s+.*?)>(.*?)<\/span><\/span>/gim,
          /<(\w*[^p])\s*[^\/>]*>\s*<\/\1>/gim,
          /\<div(|\s+.*?)>(.*?)\<\/div>/gim,
          /\<strong(|\s+.*?)>(.*?)\<\/strong>/gim,
          /\<em(|\s+.*?)>(.*?)\<\/em>/gim,
        ];
        ao = [
          "<span$2>$3</span>",
          "",
          "<p$1>$2</p>",
          "<b$1>$2</b>",
          "<i$1>$2</i>",
        ];
        for (r = 0; r < 5; r++) {
          for (var ap = 0; ap < an.length; ap++) {
            n = n.replace(an[ap], ao[ap]);
          }
        }
        if (!k.p) {
          n = n.replace(/\<p(|\s+.*?)>(.*?)\<\/p>/gi, "<br/>$2");
        }
        if (!k.br) {
          an = [/\<br>(.*?)/gi, /\<br\/>(.*?)/gi];
          ao = ["<p>$1</p>", "<p>$1</p>"];
          for (var ap = 0; ap < an.length; ap++) {
            n = n.replace(an[ap], ao[ap]);
          }
        }
        if (!k.p && !k.br) {
          n = n.replace(/\<p>(.*?)\<\/p>/gi, "<div>$1</div>");
        }
        return n;
      }
      function T() {
        var n = v.text() == "" && v.html().length < 12 ? "" : v.html();
        ag.val(y(n));
      }
      function S() {
        v.html(y(ag.val()));
      }
      function u(ap) {
        var ao = false,
          n = E(),
          an;
        if (n) {
          a.each(ap, function (aq, ar) {
            an = n.prop("tagName").toLowerCase();
            if (an == ar) {
              ao = true;
            } else {
              n.parents().each(function () {
                an = a(this).prop("tagName").toLowerCase();
                if (an == ar) {
                  ao = true;
                }
              });
            }
          });
          return ao;
        } else {
          return false;
        }
      }
      function o(an) {
        for (var aq = 0; aq < c.length; aq++) {
          if (k[c[aq].name] && c[aq].emphasis && c[aq].tag != "") {
            u(c[aq].tag)
              ? ak.find("." + k.css + "_tool_" + c[aq].cls).addClass(x)
              : a("." + k.css + "_tool_" + c[aq].cls).removeClass(x);
          }
        }
        if (k.format && a.isArray(k.formats)) {
          var ap = false;
          for (var ao = 0; ao < k.formats.length; ao++) {
            var ar = [];
            ar[0] = k.formats[ao][0];
            if (k.formats[ao][0].length > 0 && u(ar)) {
              C(k.formats[ao][1]);
              ap = true;
              break;
            }
          }
          if (!ap) {
            C(k.formats[0][1]);
          }
        }
        af("", false);
        B(false);
      }
      al.unbind("click")
        .click(function (n) {
          if (
            a(this).data("command") == "displaysource" &&
            !ak.data("sourceOpened")
          ) {
            ak.find("." + k.css + "_tool").addClass(k.css + "_hiddenField");
            a(this).removeClass(k.css + "_hiddenField");
            ak.data("sourceOpened", true);
            ag.css("height", v.outerHeight());
            ae.removeClass(k.css + "_hiddenField");
            v.addClass(k.css + "_hiddenField");
            ag.focus();
            G(false);
            af("", false);
            B();
            if (k.placeholder && k.placeholder != "") {
              R.hide();
            }
          } else {
            if (!ak.data("sourceOpened")) {
              if (a(this).data("command") == "linkcreator") {
                if (!ak.data("linkOpened")) {
                  Y();
                } else {
                  G(false);
                  B(false);
                }
              } else {
                if (a(this).data("command") == "formats") {
                  if (
                    a(this).data("command") == "formats" &&
                    !a(n.target).hasClass(k.css + "_format")
                  ) {
                    X();
                  }
                  af("", false);
                  if (v.not(":focus")) {
                    v.focus();
                  }
                } else {
                  if (
                    a(this).data("command") == "fSize" ||
                    a(this).data("command") == "colors"
                  ) {
                    if (
                      (a(this).data("command") == "fSize" &&
                        !a(n.target).hasClass(k.css + "_fontsize")) ||
                      (a(this).data("command") == "colors" &&
                        !a(n.target).hasClass(k.css + "_color"))
                    ) {
                      Z(a(this).data("command"));
                    }
                    B(false);
                    if (v.not(":focus")) {
                      v.focus();
                    }
                  } else {
                    if (v.not(":focus")) {
                      v.focus();
                    }
                    ab(a(this).data("command"), null);
                    af("", false);
                    B(false);
                    O();
                    a(this).data("emphasis") == true && !a(this).hasClass(x)
                      ? a(this).addClass(x)
                      : a(this).removeClass(x);
                    ae.addClass(k.css + "_hiddenField");
                    v.removeClass(k.css + "_hiddenField");
                  }
                }
              }
            } else {
              ak.data("sourceOpened", false);
              ak.find("." + k.css + "_tool").removeClass(
                k.css + "_hiddenField"
              );
              ae.addClass(k.css + "_hiddenField");
              v.removeClass(k.css + "_hiddenField");
            }
            if (k.placeholder && k.placeholder != "") {
              v.html() != "" ? R.hide() : R.show();
            }
          }
          v.trigger("change");
        })
        .hover(
          function (n) {
            if (
              k.title &&
              a(this).data("title") != "" &&
              (a(n.target).hasClass(k.css + "_tool") ||
                a(n.target).hasClass(k.css + "_tool_icon"))
            ) {
              a("." + k.css + "_title").remove();
              F.append(
                '<div class="' +
                  k.css +
                  '_title"><div class="' +
                  k.css +
                  '_titleArrow"><div class="' +
                  k.css +
                  '_titleArrowIcon"></div></div><div class="' +
                  k.css +
                  '_titleText">' +
                  a(this).data("title") +
                  "</div></div>"
              );
              var ar = a("." + k.css + "_title:first");
              var ap = ar.find("." + k.css + "_titleArrowIcon");
              var aq = a(this).position();
              var an =
                aq.left +
                a(this).outerWidth() -
                ar.outerWidth() / 2 -
                a(this).outerWidth() / 2;
              var ao = aq.top + a(this).outerHeight() + 5;
              ar.delay(400).css({ top: ao, left: an }).fadeIn(200);
            }
          },
          function () {
            a("." + k.css + "_title").remove();
          }
        );
      var w = null;
      v.bind(
        "keypress keyup keydown drop cut copy paste DOMCharacterDataModified DOMSubtreeModified",
        function () {
          if (!ak.data("sourceOpened")) {
            a(this).trigger("change");
          }
          O();
          if (a.isFunction(k.change)) {
            k.change();
          }
          if (k.placeholder && k.placeholder != "") {
            a(this).text() != "" ? R.hide() : R.show();
          }
        }
      )
        .bind("change", function () {
          if (!ak.data("sourceOpened")) {
            clearTimeout(w);
            w = setTimeout(T, 10);
          }
        })
        .keydown(function (an) {
          if (an.ctrlKey) {
            for (var ao = 0; ao < c.length; ao++) {
              if (k[c[ao].name] && an.keyCode == c[ao].key.charCodeAt(0)) {
                if (c[ao].command != "" && c[ao].command != "linkcreator") {
                  ab(c[ao].command, null);
                } else {
                  if (c[ao].command == "linkcreator") {
                    Y();
                  }
                }
                return false;
              }
            }
          }
        })
        .bind("mouseup keyup", o)
        .focus(function () {
          if (a.isFunction(k.focus)) {
            k.focus();
          }
          F.addClass(k.css + "_focused");
          if (/opera/.test(j)) {
            var n = document.createRange();
            n.selectNodeContents(v[0]);
            n.collapse(false);
            var an = window.getSelection();
            an.removeAllRanges();
            an.addRange(n);
          }
        })
        .focusout(function () {
          al.removeClass(x);
          af("", false);
          B(false);
          O();
          if (a.isFunction(k.blur)) {
            k.blur();
          }
          F.removeClass(k.css + "_focused");
          if (a.isArray(k.formats)) {
            C(k.formats[0][1]);
          }
        });
      ag.bind("keydown keyup", function () {
        setTimeout(S, 0);
        a(this).height(a(this)[0].scrollHeight);
        if (a(this).val() == "") {
          a(this).height(0);
        }
      })
        .focus(function () {
          F.addClass(k.css + "_focused");
        })
        .focusout(function () {
          F.removeClass(k.css + "_focused");
        });
    });
  };
})(jQuery);
(function (a) {
  if (typeof a.fn.each2 == "undefined") {
    a.extend(a.fn, {
      each2: function (b) {
        var e = a([0]),
          d = -1,
          f = this.length;
        while (
          ++d < f &&
          (e.context = e[0] = this[d]) &&
          b.call(e[0], d, e) !== false
        ) {}
        return this;
      },
    });
  }
})(jQuery);
(function (a, P) {
  if (window.Select2 !== P) {
    return;
  }
  var w,
    c,
    J,
    F,
    G,
    K,
    z = { x: 0, y: 0 },
    b,
    I,
    w = {
      TAB: 9,
      ENTER: 13,
      ESC: 27,
      SPACE: 32,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      SHIFT: 16,
      CTRL: 17,
      ALT: 18,
      PAGE_UP: 33,
      PAGE_DOWN: 34,
      HOME: 36,
      END: 35,
      BACKSPACE: 8,
      DELETE: 46,
      isArrow: function (Q) {
        Q = Q.which ? Q.which : Q;
        switch (Q) {
          case w.LEFT:
          case w.RIGHT:
          case w.UP:
          case w.DOWN:
            return true;
        }
        return false;
      },
      isControl: function (Q) {
        var R = Q.which;
        switch (R) {
          case w.SHIFT:
          case w.CTRL:
          case w.ALT:
            return true;
        }
        if (Q.metaKey) {
          return true;
        }
        return false;
      },
      isFunctionKey: function (Q) {
        Q = Q.which ? Q.which : Q;
        return Q >= 112 && Q <= 123;
      },
    },
    C = "<div class='select2-measure-scrollbar'></div>",
    m = {
      "\u24B6": "A",
      Ａ: "A",
      À: "A",
      Á: "A",
      Â: "A",
      Ầ: "A",
      Ấ: "A",
      Ẫ: "A",
      Ẩ: "A",
      Ã: "A",
      Ā: "A",
      Ă: "A",
      Ằ: "A",
      Ắ: "A",
      Ẵ: "A",
      Ẳ: "A",
      Ȧ: "A",
      Ǡ: "A",
      Ä: "A",
      Ǟ: "A",
      Ả: "A",
      Å: "A",
      Ǻ: "A",
      Ǎ: "A",
      Ȁ: "A",
      Ȃ: "A",
      Ạ: "A",
      Ậ: "A",
      Ặ: "A",
      Ḁ: "A",
      Ą: "A",
      Ⱥ: "A",
      Ɐ: "A",
      Ꜳ: "AA",
      Æ: "AE",
      Ǽ: "AE",
      Ǣ: "AE",
      Ꜵ: "AO",
      Ꜷ: "AU",
      Ꜹ: "AV",
      Ꜻ: "AV",
      Ꜽ: "AY",
      "\u24B7": "B",
      Ｂ: "B",
      Ḃ: "B",
      Ḅ: "B",
      Ḇ: "B",
      Ƀ: "B",
      Ƃ: "B",
      Ɓ: "B",
      "\u24B8": "C",
      Ｃ: "C",
      Ć: "C",
      Ĉ: "C",
      Ċ: "C",
      Č: "C",
      Ç: "C",
      Ḉ: "C",
      Ƈ: "C",
      Ȼ: "C",
      Ꜿ: "C",
      "\u24B9": "D",
      Ｄ: "D",
      Ḋ: "D",
      Ď: "D",
      Ḍ: "D",
      Ḑ: "D",
      Ḓ: "D",
      Ḏ: "D",
      Đ: "D",
      Ƌ: "D",
      Ɗ: "D",
      Ɖ: "D",
      Ꝺ: "D",
      Ǳ: "DZ",
      Ǆ: "DZ",
      ǲ: "Dz",
      ǅ: "Dz",
      "\u24BA": "E",
      Ｅ: "E",
      È: "E",
      É: "E",
      Ê: "E",
      Ề: "E",
      Ế: "E",
      Ễ: "E",
      Ể: "E",
      Ẽ: "E",
      Ē: "E",
      Ḕ: "E",
      Ḗ: "E",
      Ĕ: "E",
      Ė: "E",
      Ë: "E",
      Ẻ: "E",
      Ě: "E",
      Ȅ: "E",
      Ȇ: "E",
      Ẹ: "E",
      Ệ: "E",
      Ȩ: "E",
      Ḝ: "E",
      Ę: "E",
      Ḙ: "E",
      Ḛ: "E",
      Ɛ: "E",
      Ǝ: "E",
      "\u24BB": "F",
      Ｆ: "F",
      Ḟ: "F",
      Ƒ: "F",
      Ꝼ: "F",
      "\u24BC": "G",
      Ｇ: "G",
      Ǵ: "G",
      Ĝ: "G",
      Ḡ: "G",
      Ğ: "G",
      Ġ: "G",
      Ǧ: "G",
      Ģ: "G",
      Ǥ: "G",
      Ɠ: "G",
      Ꞡ: "G",
      Ᵹ: "G",
      Ꝿ: "G",
      "\u24BD": "H",
      Ｈ: "H",
      Ĥ: "H",
      Ḣ: "H",
      Ḧ: "H",
      Ȟ: "H",
      Ḥ: "H",
      Ḩ: "H",
      Ḫ: "H",
      Ħ: "H",
      Ⱨ: "H",
      Ⱶ: "H",
      Ɥ: "H",
      "\u24BE": "I",
      Ｉ: "I",
      Ì: "I",
      Í: "I",
      Î: "I",
      Ĩ: "I",
      Ī: "I",
      Ĭ: "I",
      İ: "I",
      Ï: "I",
      Ḯ: "I",
      Ỉ: "I",
      Ǐ: "I",
      Ȉ: "I",
      Ȋ: "I",
      Ị: "I",
      Į: "I",
      Ḭ: "I",
      Ɨ: "I",
      "\u24BF": "J",
      Ｊ: "J",
      Ĵ: "J",
      Ɉ: "J",
      "\u24C0": "K",
      Ｋ: "K",
      Ḱ: "K",
      Ǩ: "K",
      Ḳ: "K",
      Ķ: "K",
      Ḵ: "K",
      Ƙ: "K",
      Ⱪ: "K",
      Ꝁ: "K",
      Ꝃ: "K",
      Ꝅ: "K",
      Ꞣ: "K",
      "\u24C1": "L",
      Ｌ: "L",
      Ŀ: "L",
      Ĺ: "L",
      Ľ: "L",
      Ḷ: "L",
      Ḹ: "L",
      Ļ: "L",
      Ḽ: "L",
      Ḻ: "L",
      Ł: "L",
      Ƚ: "L",
      Ɫ: "L",
      Ⱡ: "L",
      Ꝉ: "L",
      Ꝇ: "L",
      Ꞁ: "L",
      Ǉ: "LJ",
      ǈ: "Lj",
      "\u24C2": "M",
      Ｍ: "M",
      Ḿ: "M",
      Ṁ: "M",
      Ṃ: "M",
      Ɱ: "M",
      Ɯ: "M",
      "\u24C3": "N",
      Ｎ: "N",
      Ǹ: "N",
      Ń: "N",
      Ñ: "N",
      Ṅ: "N",
      Ň: "N",
      Ṇ: "N",
      Ņ: "N",
      Ṋ: "N",
      Ṉ: "N",
      Ƞ: "N",
      Ɲ: "N",
      Ꞑ: "N",
      Ꞥ: "N",
      Ǌ: "NJ",
      ǋ: "Nj",
      "\u24C4": "O",
      Ｏ: "O",
      Ò: "O",
      Ó: "O",
      Ô: "O",
      Ồ: "O",
      Ố: "O",
      Ỗ: "O",
      Ổ: "O",
      Õ: "O",
      Ṍ: "O",
      Ȭ: "O",
      Ṏ: "O",
      Ō: "O",
      Ṑ: "O",
      Ṓ: "O",
      Ŏ: "O",
      Ȯ: "O",
      Ȱ: "O",
      Ö: "O",
      Ȫ: "O",
      Ỏ: "O",
      Ő: "O",
      Ǒ: "O",
      Ȍ: "O",
      Ȏ: "O",
      Ơ: "O",
      Ờ: "O",
      Ớ: "O",
      Ỡ: "O",
      Ở: "O",
      Ợ: "O",
      Ọ: "O",
      Ộ: "O",
      Ǫ: "O",
      Ǭ: "O",
      Ø: "O",
      Ǿ: "O",
      Ɔ: "O",
      Ɵ: "O",
      Ꝋ: "O",
      Ꝍ: "O",
      Ƣ: "OI",
      Ꝏ: "OO",
      Ȣ: "OU",
      "\u24C5": "P",
      Ｐ: "P",
      Ṕ: "P",
      Ṗ: "P",
      Ƥ: "P",
      Ᵽ: "P",
      Ꝑ: "P",
      Ꝓ: "P",
      Ꝕ: "P",
      "\u24C6": "Q",
      Ｑ: "Q",
      Ꝗ: "Q",
      Ꝙ: "Q",
      Ɋ: "Q",
      "\u24C7": "R",
      Ｒ: "R",
      Ŕ: "R",
      Ṙ: "R",
      Ř: "R",
      Ȑ: "R",
      Ȓ: "R",
      Ṛ: "R",
      Ṝ: "R",
      Ŗ: "R",
      Ṟ: "R",
      Ɍ: "R",
      Ɽ: "R",
      Ꝛ: "R",
      Ꞧ: "R",
      Ꞃ: "R",
      "\u24C8": "S",
      Ｓ: "S",
      ẞ: "S",
      Ś: "S",
      Ṥ: "S",
      Ŝ: "S",
      Ṡ: "S",
      Š: "S",
      Ṧ: "S",
      Ṣ: "S",
      Ṩ: "S",
      Ș: "S",
      Ş: "S",
      Ȿ: "S",
      Ꞩ: "S",
      Ꞅ: "S",
      "\u24C9": "T",
      Ｔ: "T",
      Ṫ: "T",
      Ť: "T",
      Ṭ: "T",
      Ț: "T",
      Ţ: "T",
      Ṱ: "T",
      Ṯ: "T",
      Ŧ: "T",
      Ƭ: "T",
      Ʈ: "T",
      Ⱦ: "T",
      Ꞇ: "T",
      Ꜩ: "TZ",
      "\u24CA": "U",
      Ｕ: "U",
      Ù: "U",
      Ú: "U",
      Û: "U",
      Ũ: "U",
      Ṹ: "U",
      Ū: "U",
      Ṻ: "U",
      Ŭ: "U",
      Ü: "U",
      Ǜ: "U",
      Ǘ: "U",
      Ǖ: "U",
      Ǚ: "U",
      Ủ: "U",
      Ů: "U",
      Ű: "U",
      Ǔ: "U",
      Ȕ: "U",
      Ȗ: "U",
      Ư: "U",
      Ừ: "U",
      Ứ: "U",
      Ữ: "U",
      Ử: "U",
      Ự: "U",
      Ụ: "U",
      Ṳ: "U",
      Ų: "U",
      Ṷ: "U",
      Ṵ: "U",
      Ʉ: "U",
      "\u24CB": "V",
      Ｖ: "V",
      Ṽ: "V",
      Ṿ: "V",
      Ʋ: "V",
      Ꝟ: "V",
      Ʌ: "V",
      Ꝡ: "VY",
      "\u24CC": "W",
      Ｗ: "W",
      Ẁ: "W",
      Ẃ: "W",
      Ŵ: "W",
      Ẇ: "W",
      Ẅ: "W",
      Ẉ: "W",
      Ⱳ: "W",
      "\u24CD": "X",
      Ｘ: "X",
      Ẋ: "X",
      Ẍ: "X",
      "\u24CE": "Y",
      Ｙ: "Y",
      Ỳ: "Y",
      Ý: "Y",
      Ŷ: "Y",
      Ỹ: "Y",
      Ȳ: "Y",
      Ẏ: "Y",
      Ÿ: "Y",
      Ỷ: "Y",
      Ỵ: "Y",
      Ƴ: "Y",
      Ɏ: "Y",
      Ỿ: "Y",
      "\u24CF": "Z",
      Ｚ: "Z",
      Ź: "Z",
      Ẑ: "Z",
      Ż: "Z",
      Ž: "Z",
      Ẓ: "Z",
      Ẕ: "Z",
      Ƶ: "Z",
      Ȥ: "Z",
      Ɀ: "Z",
      Ⱬ: "Z",
      Ꝣ: "Z",
      "\u24D0": "a",
      ａ: "a",
      ẚ: "a",
      à: "a",
      á: "a",
      â: "a",
      ầ: "a",
      ấ: "a",
      ẫ: "a",
      ẩ: "a",
      ã: "a",
      ā: "a",
      ă: "a",
      ằ: "a",
      ắ: "a",
      ẵ: "a",
      ẳ: "a",
      ȧ: "a",
      ǡ: "a",
      ä: "a",
      ǟ: "a",
      ả: "a",
      å: "a",
      ǻ: "a",
      ǎ: "a",
      ȁ: "a",
      ȃ: "a",
      ạ: "a",
      ậ: "a",
      ặ: "a",
      ḁ: "a",
      ą: "a",
      ⱥ: "a",
      ɐ: "a",
      ꜳ: "aa",
      æ: "ae",
      ǽ: "ae",
      ǣ: "ae",
      ꜵ: "ao",
      ꜷ: "au",
      ꜹ: "av",
      ꜻ: "av",
      ꜽ: "ay",
      "\u24D1": "b",
      ｂ: "b",
      ḃ: "b",
      ḅ: "b",
      ḇ: "b",
      ƀ: "b",
      ƃ: "b",
      ɓ: "b",
      "\u24D2": "c",
      ｃ: "c",
      ć: "c",
      ĉ: "c",
      ċ: "c",
      č: "c",
      ç: "c",
      ḉ: "c",
      ƈ: "c",
      ȼ: "c",
      ꜿ: "c",
      ↄ: "c",
      "\u24D3": "d",
      ｄ: "d",
      ḋ: "d",
      ď: "d",
      ḍ: "d",
      ḑ: "d",
      ḓ: "d",
      ḏ: "d",
      đ: "d",
      ƌ: "d",
      ɖ: "d",
      ɗ: "d",
      ꝺ: "d",
      ǳ: "dz",
      ǆ: "dz",
      "\u24D4": "e",
      ｅ: "e",
      è: "e",
      é: "e",
      ê: "e",
      ề: "e",
      ế: "e",
      ễ: "e",
      ể: "e",
      ẽ: "e",
      ē: "e",
      ḕ: "e",
      ḗ: "e",
      ĕ: "e",
      ė: "e",
      ë: "e",
      ẻ: "e",
      ě: "e",
      ȅ: "e",
      ȇ: "e",
      ẹ: "e",
      ệ: "e",
      ȩ: "e",
      ḝ: "e",
      ę: "e",
      ḙ: "e",
      ḛ: "e",
      ɇ: "e",
      ɛ: "e",
      ǝ: "e",
      "\u24D5": "f",
      ｆ: "f",
      ḟ: "f",
      ƒ: "f",
      ꝼ: "f",
      "\u24D6": "g",
      ｇ: "g",
      ǵ: "g",
      ĝ: "g",
      ḡ: "g",
      ğ: "g",
      ġ: "g",
      ǧ: "g",
      ģ: "g",
      ǥ: "g",
      ɠ: "g",
      ꞡ: "g",
      ᵹ: "g",
      ꝿ: "g",
      "\u24D7": "h",
      ｈ: "h",
      ĥ: "h",
      ḣ: "h",
      ḧ: "h",
      ȟ: "h",
      ḥ: "h",
      ḩ: "h",
      ḫ: "h",
      ẖ: "h",
      ħ: "h",
      ⱨ: "h",
      ⱶ: "h",
      ɥ: "h",
      ƕ: "hv",
      "\u24D8": "i",
      ｉ: "i",
      ì: "i",
      í: "i",
      î: "i",
      ĩ: "i",
      ī: "i",
      ĭ: "i",
      ï: "i",
      ḯ: "i",
      ỉ: "i",
      ǐ: "i",
      ȉ: "i",
      ȋ: "i",
      ị: "i",
      į: "i",
      ḭ: "i",
      ɨ: "i",
      ı: "i",
      "\u24D9": "j",
      ｊ: "j",
      ĵ: "j",
      ǰ: "j",
      ɉ: "j",
      "\u24DA": "k",
      ｋ: "k",
      ḱ: "k",
      ǩ: "k",
      ḳ: "k",
      ķ: "k",
      ḵ: "k",
      ƙ: "k",
      ⱪ: "k",
      ꝁ: "k",
      ꝃ: "k",
      ꝅ: "k",
      ꞣ: "k",
      "\u24DB": "l",
      ｌ: "l",
      ŀ: "l",
      ĺ: "l",
      ľ: "l",
      ḷ: "l",
      ḹ: "l",
      ļ: "l",
      ḽ: "l",
      ḻ: "l",
      ſ: "l",
      ł: "l",
      ƚ: "l",
      ɫ: "l",
      ⱡ: "l",
      ꝉ: "l",
      ꞁ: "l",
      ꝇ: "l",
      ǉ: "lj",
      "\u24DC": "m",
      ｍ: "m",
      ḿ: "m",
      ṁ: "m",
      ṃ: "m",
      ɱ: "m",
      ɯ: "m",
      "\u24DD": "n",
      ｎ: "n",
      ǹ: "n",
      ń: "n",
      ñ: "n",
      ṅ: "n",
      ň: "n",
      ṇ: "n",
      ņ: "n",
      ṋ: "n",
      ṉ: "n",
      ƞ: "n",
      ɲ: "n",
      ŉ: "n",
      ꞑ: "n",
      ꞥ: "n",
      ǌ: "nj",
      "\u24DE": "o",
      ｏ: "o",
      ò: "o",
      ó: "o",
      ô: "o",
      ồ: "o",
      ố: "o",
      ỗ: "o",
      ổ: "o",
      õ: "o",
      ṍ: "o",
      ȭ: "o",
      ṏ: "o",
      ō: "o",
      ṑ: "o",
      ṓ: "o",
      ŏ: "o",
      ȯ: "o",
      ȱ: "o",
      ö: "o",
      ȫ: "o",
      ỏ: "o",
      ő: "o",
      ǒ: "o",
      ȍ: "o",
      ȏ: "o",
      ơ: "o",
      ờ: "o",
      ớ: "o",
      ỡ: "o",
      ở: "o",
      ợ: "o",
      ọ: "o",
      ộ: "o",
      ǫ: "o",
      ǭ: "o",
      ø: "o",
      ǿ: "o",
      ɔ: "o",
      ꝋ: "o",
      ꝍ: "o",
      ɵ: "o",
      ƣ: "oi",
      ȣ: "ou",
      ꝏ: "oo",
      "\u24DF": "p",
      ｐ: "p",
      ṕ: "p",
      ṗ: "p",
      ƥ: "p",
      ᵽ: "p",
      ꝑ: "p",
      ꝓ: "p",
      ꝕ: "p",
      "\u24E0": "q",
      ｑ: "q",
      ɋ: "q",
      ꝗ: "q",
      ꝙ: "q",
      "\u24E1": "r",
      ｒ: "r",
      ŕ: "r",
      ṙ: "r",
      ř: "r",
      ȑ: "r",
      ȓ: "r",
      ṛ: "r",
      ṝ: "r",
      ŗ: "r",
      ṟ: "r",
      ɍ: "r",
      ɽ: "r",
      ꝛ: "r",
      ꞧ: "r",
      ꞃ: "r",
      "\u24E2": "s",
      ｓ: "s",
      ß: "s",
      ś: "s",
      ṥ: "s",
      ŝ: "s",
      ṡ: "s",
      š: "s",
      ṧ: "s",
      ṣ: "s",
      ṩ: "s",
      ș: "s",
      ş: "s",
      ȿ: "s",
      ꞩ: "s",
      ꞅ: "s",
      ẛ: "s",
      "\u24E3": "t",
      ｔ: "t",
      ṫ: "t",
      ẗ: "t",
      ť: "t",
      ṭ: "t",
      ț: "t",
      ţ: "t",
      ṱ: "t",
      ṯ: "t",
      ŧ: "t",
      ƭ: "t",
      ʈ: "t",
      ⱦ: "t",
      ꞇ: "t",
      ꜩ: "tz",
      "\u24E4": "u",
      ｕ: "u",
      ù: "u",
      ú: "u",
      û: "u",
      ũ: "u",
      ṹ: "u",
      ū: "u",
      ṻ: "u",
      ŭ: "u",
      ü: "u",
      ǜ: "u",
      ǘ: "u",
      ǖ: "u",
      ǚ: "u",
      ủ: "u",
      ů: "u",
      ű: "u",
      ǔ: "u",
      ȕ: "u",
      ȗ: "u",
      ư: "u",
      ừ: "u",
      ứ: "u",
      ữ: "u",
      ử: "u",
      ự: "u",
      ụ: "u",
      ṳ: "u",
      ų: "u",
      ṷ: "u",
      ṵ: "u",
      ʉ: "u",
      "\u24E5": "v",
      ｖ: "v",
      ṽ: "v",
      ṿ: "v",
      ʋ: "v",
      ꝟ: "v",
      ʌ: "v",
      ꝡ: "vy",
      "\u24E6": "w",
      ｗ: "w",
      ẁ: "w",
      ẃ: "w",
      ŵ: "w",
      ẇ: "w",
      ẅ: "w",
      ẘ: "w",
      ẉ: "w",
      ⱳ: "w",
      "\u24E7": "x",
      ｘ: "x",
      ẋ: "x",
      ẍ: "x",
      "\u24E8": "y",
      ｙ: "y",
      ỳ: "y",
      ý: "y",
      ŷ: "y",
      ỹ: "y",
      ȳ: "y",
      ẏ: "y",
      ÿ: "y",
      ỷ: "y",
      ẙ: "y",
      ỵ: "y",
      ƴ: "y",
      ɏ: "y",
      ỿ: "y",
      "\u24E9": "z",
      ｚ: "z",
      ź: "z",
      ẑ: "z",
      ż: "z",
      ž: "z",
      ẓ: "z",
      ẕ: "z",
      ƶ: "z",
      ȥ: "z",
      ɀ: "z",
      ⱬ: "z",
      ꝣ: "z",
      Ά: "\u0391",
      Έ: "\u0395",
      Ή: "\u0397",
      Ί: "\u0399",
      Ϊ: "\u0399",
      Ό: "\u039F",
      Ύ: "\u03A5",
      Ϋ: "\u03A5",
      Ώ: "\u03A9",
      ά: "\u03B1",
      έ: "\u03B5",
      ή: "\u03B7",
      ί: "\u03B9",
      ϊ: "\u03B9",
      ΐ: "\u03B9",
      ό: "\u03BF",
      ύ: "\u03C5",
      ϋ: "\u03C5",
      ΰ: "\u03C5",
      ω: "\u03C9",
      ς: "\u03C3",
    };
  b = a(document);
  G = (function () {
    var Q = 1;
    return function () {
      return Q++;
    };
  })();
  function H(Q) {
    var R = a(document.createTextNode(""));
    Q.before(R);
    R.before(Q);
    R.remove();
  }
  function M(R) {
    function Q(S) {
      return m[S] || S;
    }
    return R.replace(/[^\u0000-\u007E]/g, Q);
  }
  function s(T, Q) {
    var R = 0,
      S = Q.length;
    for (; R < S; R = R + 1) {
      if (n(T, Q[R])) {
        return R;
      }
    }
    return -1;
  }
  function D() {
    var Q = a(C);
    Q.appendTo("body");
    var R = {
      width: Q.width() - Q[0].clientWidth,
      height: Q.height() - Q[0].clientHeight,
    };
    Q.remove();
    return R;
  }
  function n(Q, R) {
    if (Q === R) {
      return true;
    }
    if (Q === P || R === P) {
      return false;
    }
    if (Q === null || R === null) {
      return false;
    }
    if (Q.constructor === String) {
      return Q + "" === R + "";
    }
    if (R.constructor === String) {
      return R + "" === Q + "";
    }
    return false;
  }
  function L(T, S) {
    var U, Q, R;
    if (T === null || T.length < 1) {
      return [];
    }
    U = T.split(S);
    for (Q = 0, R = U.length; Q < R; Q = Q + 1) {
      U[Q] = a.trim(U[Q]);
    }
    return U;
  }
  function r(Q) {
    return Q.outerWidth(false) - Q.width();
  }
  function v(Q) {
    var R = "keyup-change-value";
    Q.on("keydown", function () {
      if (a.data(Q, R) === P) {
        a.data(Q, R, Q.val());
      }
    });
    Q.on("keyup", function () {
      var S = a.data(Q, R);
      if (S !== P && Q.val() !== S) {
        a.removeData(Q, R);
        Q.trigger("keyup-change");
      }
    });
  }
  function u(Q) {
    Q.on("mousemove", function (R) {
      var S = z;
      if (S === P || S.x !== R.pageX || S.y !== R.pageY) {
        a(R.target).trigger("mousemove-filtered", R);
      }
    });
  }
  function j(S, R, Q) {
    Q = Q || P;
    var T;
    return function () {
      var U = arguments;
      window.clearTimeout(T);
      T = window.setTimeout(function () {
        R.apply(Q, U);
      }, S);
    };
  }
  function t(S, Q) {
    var R = j(S, function (T) {
      Q.trigger("scroll-debounced", T);
    });
    Q.on("scroll", function (T) {
      if (s(T.target, Q.get()) >= 0) {
        R(T);
      }
    });
  }
  function p(Q) {
    if (Q[0] === document.activeElement) {
      return;
    }
    window.setTimeout(function () {
      var R = Q[0],
        T = Q.val().length,
        U;
      Q.focus();
      var S = R.offsetWidth > 0 || R.offsetHeight > 0;
      if (S && R === document.activeElement) {
        if (R.setSelectionRange) {
          R.setSelectionRange(T, T);
        } else {
          if (R.createTextRange) {
            U = R.createTextRange();
            U.collapse(false);
            U.select();
          }
        }
      }
    }, 0);
  }
  function q(Q) {
    Q = a(Q)[0];
    var S = 0;
    var R = 0;
    if ("selectionStart" in Q) {
      S = Q.selectionStart;
      R = Q.selectionEnd - S;
    } else {
      if ("selection" in document) {
        Q.focus();
        var T = document.selection.createRange();
        R = document.selection.createRange().text.length;
        T.moveStart("character", -Q.value.length);
        S = T.text.length - R;
      }
    }
    return { offset: S, length: R };
  }
  function x(Q) {
    Q.preventDefault();
    Q.stopPropagation();
  }
  function y(Q) {
    Q.preventDefault();
    Q.stopImmediatePropagation();
  }
  function E(Q) {
    if (!K) {
      var R = Q[0].currentStyle || window.getComputedStyle(Q[0], null);
      K = a(document.createElement("div")).css({
        position: "absolute",
        left: "-10000px",
        top: "-10000px",
        display: "none",
        fontSize: R.fontSize,
        fontFamily: R.fontFamily,
        fontStyle: R.fontStyle,
        fontWeight: R.fontWeight,
        letterSpacing: R.letterSpacing,
        textTransform: R.textTransform,
        whiteSpace: "nowrap",
      });
      K.attr("class", "select2-sizer");
      a("body").append(K);
    }
    K.text(Q.val());
    return K.width();
  }
  function N(T, V, R) {
    var S,
      U = [],
      Q;
    S = a.trim(T.attr("class"));
    if (S) {
      S = "" + S;
      a(S.split(/\s+/)).each2(function () {
        if (this.indexOf("select2-") === 0) {
          U.push(this);
        }
      });
    }
    S = a.trim(V.attr("class"));
    if (S) {
      S = "" + S;
      a(S.split(/\s+/)).each2(function () {
        if (this.indexOf("select2-") !== 0) {
          Q = R(this);
          if (Q) {
            U.push(Q);
          }
        }
      });
    }
    T.attr("class", U.join(" "));
  }
  function B(U, T, R, Q) {
    var S = M(U.toUpperCase()).indexOf(M(T.toUpperCase())),
      V = T.length;
    if (S < 0) {
      R.push(Q(U));
      return;
    }
    R.push(Q(U.substring(0, S)));
    R.push("<span class='select2-match'>");
    R.push(Q(U.substring(S, S + V)));
    R.push("</span>");
    R.push(Q(U.substring(S + V, U.length)));
  }
  function k(Q) {
    var R = {
      "\\": "&#92;",
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "/": "&#47;",
    };
    return String(Q).replace(/[&<>"'\/\\]/g, function (S) {
      return R[S];
    });
  }
  function d(S) {
    var V,
      R = null,
      T = S.quietMillis || 100,
      Q = S.url,
      U = this;
    return function (W) {
      window.clearTimeout(V);
      V = window.setTimeout(function () {
        var X = S.data,
          ab = Q,
          aa = S.transport || a.fn.select2.ajaxDefaults.transport,
          Y = {
            type: S.type || "GET",
            cache: S.cache || false,
            jsonpCallback: S.jsonpCallback || P,
            dataType: S.dataType || "json",
          },
          Z = a.extend({}, a.fn.select2.ajaxDefaults.params, Y);
        X = X ? X.call(U, W.term, W.page, W.context) : null;
        ab =
          typeof ab === "function" ? ab.call(U, W.term, W.page, W.context) : ab;
        if (R && typeof R.abort === "function") {
          R.abort();
        }
        if (S.params) {
          if (a.isFunction(S.params)) {
            a.extend(Z, S.params.call(U));
          } else {
            a.extend(Z, S.params);
          }
        }
        a.extend(Z, {
          url: ab,
          dataType: S.dataType,
          data: X,
          success: function (ac) {
            var ad = S.results(ac, W.page, W);
            W.callback(ad);
          },
          error: function (ad, af, ac) {
            var ae = {
              hasError: true,
              jqXHR: ad,
              textStatus: af,
              errorThrown: ac,
            };
            W.callback(ae);
          },
        });
        R = aa.call(U, Z);
      }, T);
    };
  }
  function A(T) {
    var Q = T,
      S,
      V,
      U = function (W) {
        return "" + W.text;
      };
    if (a.isArray(Q)) {
      V = Q;
      Q = { results: V };
    }
    if (a.isFunction(Q) === false) {
      V = Q;
      Q = function () {
        return V;
      };
    }
    var R = Q();
    if (R.text) {
      U = R.text;
      if (!a.isFunction(U)) {
        S = R.text;
        U = function (W) {
          return W[S];
        };
      }
    }
    return function (Y) {
      var Z = Y.term,
        W = { results: [] },
        X;
      if (Z === "") {
        Y.callback(Q());
        return;
      }
      X = function (ac, ab) {
        var ad, aa;
        ac = ac[0];
        if (ac.children) {
          ad = {};
          for (aa in ac) {
            if (ac.hasOwnProperty(aa)) {
              ad[aa] = ac[aa];
            }
          }
          ad.children = [];
          a(ac.children).each2(function (af, ae) {
            X(ae, ad.children);
          });
          if (ad.children.length || Y.matcher(Z, U(ad), ac)) {
            ab.push(ad);
          }
        } else {
          if (Y.matcher(Z, U(ac), ac)) {
            ab.push(ac);
          }
        }
      };
      a(Q().results).each2(function (ab, aa) {
        X(aa, W.results);
      });
      Y.callback(W);
    };
  }
  function O(Q) {
    var R = a.isFunction(Q);
    return function (T) {
      var V = T.term,
        S = { results: [] };
      var U = R ? Q(T) : Q;
      if (a.isArray(U)) {
        a(U).each(function () {
          var W = this.text !== P,
            X = W ? this.text : this;
          if (V === "" || T.matcher(V, X)) {
            S.results.push(W ? this : { id: this, text: this });
          }
        });
        T.callback(S);
      }
    };
  }
  function e(Q, R) {
    if (a.isFunction(Q)) {
      return true;
    }
    if (!Q) {
      return false;
    }
    if (typeof Q === "string") {
      return true;
    }
    throw new Error(R + " must be a string, function, or falsy value");
  }
  function o(S, R) {
    if (a.isFunction(S)) {
      var Q = Array.prototype.slice.call(arguments, 2);
      return S.apply(R, Q);
    }
    return S;
  }
  function h(R) {
    var Q = 0;
    a.each(R, function (S, T) {
      if (T.children) {
        Q += h(T.children);
      } else {
        Q++;
      }
    });
    return Q;
  }
  function l(T, Y, X, V) {
    var W = T,
      Q = false,
      aa,
      S,
      R,
      U,
      Z;
    if (
      !V.createSearchChoice ||
      !V.tokenSeparators ||
      V.tokenSeparators.length < 1
    ) {
      return P;
    }
    while (true) {
      S = -1;
      for (R = 0, U = V.tokenSeparators.length; R < U; R++) {
        Z = V.tokenSeparators[R];
        S = T.indexOf(Z);
        if (S >= 0) {
          break;
        }
      }
      if (S < 0) {
        break;
      }
      aa = T.substring(0, S);
      T = T.substring(S + Z.length);
      if (aa.length > 0) {
        aa = V.createSearchChoice.call(this, aa, Y);
        if (aa !== P && aa !== null && V.id(aa) !== P && V.id(aa) !== null) {
          Q = false;
          for (R = 0, U = Y.length; R < U; R++) {
            if (n(V.id(aa), V.id(Y[R]))) {
              Q = true;
              break;
            }
          }
          if (!Q) {
            X(aa);
          }
        }
      }
    }
    if (W !== T) {
      return T;
    }
  }
  function g() {
    var Q = this;
    a.each(arguments, function (S, R) {
      Q[R].remove();
      Q[R] = null;
    });
  }
  function f(S, R) {
    var Q = function () {};
    Q.prototype = new S();
    Q.prototype.constructor = Q;
    Q.prototype.parent = S.prototype;
    Q.prototype = a.extend(Q.prototype, R);
    return Q;
  }
  c = f(Object, {
    bind: function (Q) {
      var R = this;
      return function () {
        Q.apply(R, arguments);
      };
    },
    init: function (R) {
      var T,
        V,
        U = ".select2-results";
      this.opts = R = this.prepareOpts(R);
      this.id = R.id;
      if (
        R.element.data("select2") !== P &&
        R.element.data("select2") !== null
      ) {
        R.element.data("select2").destroy();
      }
      this.container = this.createContainer();
      this.liveRegion = a("<span>", { role: "status", "aria-live": "polite" })
        .addClass("select2-hidden-accessible")
        .appendTo(document.body);
      this.containerId = "s2id_" + (R.element.attr("id") || "autogen" + G());
      this.containerEventName = this.containerId
        .replace(/([.])/g, "_")
        .replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
      this.container.attr("id", this.containerId);
      this.container.attr("title", R.element.attr("title"));
      this.body = a("body");
      N(this.container, this.opts.element, this.opts.adaptContainerCssClass);
      this.container.attr("style", R.element.attr("style"));
      this.container.css(o(R.containerCss, this.opts.element));
      this.container.addClass(o(R.containerCssClass, this.opts.element));
      this.elementTabIndex = this.opts.element.attr("tabindex");
      this.opts.element
        .data("select2", this)
        .attr("tabindex", "-1")
        .before(this.container)
        .on("click.select2", x);
      this.container.data("select2", this);
      this.dropdown = this.container.find(".select2-drop");
      N(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
      this.dropdown.addClass(o(R.dropdownCssClass, this.opts.element));
      this.dropdown.data("select2", this);
      this.dropdown.on("click", x);
      this.results = T = this.container.find(U);
      this.search = V = this.container.find("input.select2-input");
      this.queryCount = 0;
      this.resultsPage = 0;
      this.context = null;
      this.initContainer();
      this.container.on("click", x);
      u(this.results);
      this.dropdown.on(
        "mousemove-filtered",
        U,
        this.bind(this.highlightUnderEvent)
      );
      this.dropdown.on(
        "touchstart touchmove touchend",
        U,
        this.bind(function (W) {
          this._touchEvent = true;
          this.highlightUnderEvent(W);
        })
      );
      this.dropdown.on("touchmove", U, this.bind(this.touchMoved));
      this.dropdown.on(
        "touchstart touchend",
        U,
        this.bind(this.clearTouchMoved)
      );
      this.dropdown.on(
        "click",
        this.bind(function (W) {
          if (this._touchEvent) {
            this._touchEvent = false;
            this.selectHighlighted();
          }
        })
      );
      t(80, this.results);
      this.dropdown.on("scroll-debounced", U, this.bind(this.loadMoreIfNeeded));
      a(this.container).on("change", ".select2-input", function (W) {
        W.stopPropagation();
      });
      a(this.dropdown).on("change", ".select2-input", function (W) {
        W.stopPropagation();
      });
      if (a.fn.mousewheel) {
        T.mousewheel(function (Z, W, X, Y) {
          var aa = T.scrollTop();
          if (Y > 0 && aa - Y <= 0) {
            T.scrollTop(0);
            x(Z);
          } else {
            if (
              Y < 0 &&
              T.get(0).scrollHeight - T.scrollTop() + Y <= T.height()
            ) {
              T.scrollTop(T.get(0).scrollHeight - T.height());
              x(Z);
            }
          }
        });
      }
      v(V);
      V.on("keyup-change input paste", this.bind(this.updateResults));
      V.on("focus", function () {
        V.addClass("select2-focused");
      });
      V.on("blur", function () {
        V.removeClass("select2-focused");
      });
      this.dropdown.on(
        "mouseup",
        U,
        this.bind(function (W) {
          if (a(W.target).closest(".select2-result-selectable").length > 0) {
            this.highlightUnderEvent(W);
            this.selectHighlighted(W);
          }
        })
      );
      this.dropdown.on(
        "click mouseup mousedown touchstart touchend focusin",
        function (W) {
          W.stopPropagation();
        }
      );
      this.nextSearchTerm = P;
      if (a.isFunction(this.opts.initSelection)) {
        this.initSelection();
        this.monitorSource();
      }
      if (R.maximumInputLength !== null) {
        this.search.attr("maxlength", R.maximumInputLength);
      }
      var Q = R.element.prop("disabled");
      if (Q === P) {
        Q = false;
      }
      this.enable(!Q);
      var S = R.element.prop("readonly");
      if (S === P) {
        S = false;
      }
      this.readonly(S);
      I = I || D();
      this.autofocus = R.element.prop("autofocus");
      R.element.prop("autofocus", false);
      if (this.autofocus) {
        this.focus();
      }
      this.search.attr("placeholder", R.searchInputPlaceholder);
    },
    destroy: function () {
      var Q = this.opts.element,
        R = Q.data("select2"),
        S = this;
      this.close();
      if (Q.length && Q[0].detachEvent) {
        Q.each(function () {
          this.detachEvent("onpropertychange", S._sync);
        });
      }
      if (this.propertyObserver) {
        this.propertyObserver.disconnect();
        this.propertyObserver = null;
      }
      this._sync = null;
      if (R !== P) {
        R.container.remove();
        R.liveRegion.remove();
        R.dropdown.remove();
        Q.removeClass("select2-offscreen")
          .removeData("select2")
          .off(".select2")
          .prop("autofocus", this.autofocus || false);
        if (this.elementTabIndex) {
          Q.attr({ tabindex: this.elementTabIndex });
        } else {
          Q.removeAttr("tabindex");
        }
        Q.show();
      }
      g.call(this, "container", "liveRegion", "dropdown", "results", "search");
    },
    optionToData: function (Q) {
      if (Q.is("option")) {
        return {
          id: Q.prop("value"),
          text: Q.text(),
          element: Q.get(),
          css: Q.attr("class"),
          disabled: Q.prop("disabled"),
          locked: n(Q.attr("locked"), "locked") || n(Q.data("locked"), true),
        };
      } else {
        if (Q.is("optgroup")) {
          return {
            text: Q.attr("label"),
            children: [],
            element: Q.get(),
            css: Q.attr("class"),
          };
        }
      }
    },
    prepareOpts: function (T) {
      var R,
        U,
        S,
        Q,
        V = this;
      R = T.element;
      if (R.get(0).tagName.toLowerCase() === "select") {
        this.select = U = T.element;
      }
      if (U) {
        a.each(
          [
            "id",
            "multiple",
            "ajax",
            "query",
            "createSearchChoice",
            "initSelection",
            "data",
            "tags",
          ],
          function () {
            if (this in T) {
              throw new Error(
                "Option '" +
                  this +
                  "' is not allowed for Select2 when attached to a <select> element."
              );
            }
          }
        );
      }
      T = a.extend(
        {},
        {
          populateResults: function (W, ab, aa) {
            var Z,
              X = this.opts.id,
              Y = this.liveRegion;
            Z = function (ao, ad, ae) {
              var ah, aj, an, ap, af, ac, al, ak, ai, ag;
              ao = T.sortResults(ao, ad, aa);
              var am = [];
              for (ah = 0, aj = ao.length; ah < aj; ah = ah + 1) {
                an = ao[ah];
                af = an.disabled === true;
                ap = !af && X(an) !== P;
                ac = an.children && an.children.length > 0;
                al = a("<li></li>");
                al.addClass("select2-results-dept-" + ae);
                al.addClass("select2-result");
                al.addClass(
                  ap
                    ? "select2-result-selectable"
                    : "select2-result-unselectable"
                );
                if (af) {
                  al.addClass("select2-disabled");
                }
                if (ac) {
                  al.addClass("select2-result-with-children");
                }
                al.addClass(V.opts.formatResultCssClass(an));
                al.attr("role", "presentation");
                ak = a(document.createElement("div"));
                ak.addClass("select2-result-label");
                ak.attr("id", "select2-result-label-" + G());
                ak.attr("role", "option");
                ag = T.formatResult(an, ak, aa, V.opts.escapeMarkup);
                if (ag !== P) {
                  ak.html(ag);
                  al.append(ak);
                }
                if (ac) {
                  ai = a("<ul></ul>");
                  ai.addClass("select2-result-sub");
                  Z(an.children, ai, ae + 1);
                  al.append(ai);
                }
                al.data("select2-data", an);
                am.push(al[0]);
              }
              ad.append(am);
              Y.text(T.formatMatches(ao.length));
            };
            Z(ab, W, 0);
          },
        },
        a.fn.select2.defaults,
        T
      );
      if (typeof T.id !== "function") {
        S = T.id;
        T.id = function (W) {
          return W[S];
        };
      }
      if (a.isArray(T.element.data("select2Tags"))) {
        if ("tags" in T) {
          throw (
            "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " +
            T.element.attr("id")
          );
        }
        T.tags = T.element.data("select2Tags");
      }
      if (U) {
        T.query = this.bind(function (aa) {
          var X = { results: [], more: false },
            ab = aa.term,
            W,
            Y,
            Z;
          Z = function (ad, ac) {
            var ae;
            if (ad.is("option")) {
              if (aa.matcher(ab, ad.text(), ad)) {
                ac.push(V.optionToData(ad));
              }
            } else {
              if (ad.is("optgroup")) {
                ae = V.optionToData(ad);
                ad.children().each2(function (ag, af) {
                  Z(af, ae.children);
                });
                if (ae.children.length > 0) {
                  ac.push(ae);
                }
              }
            }
          };
          W = R.children();
          if (this.getPlaceholder() !== P && W.length > 0) {
            Y = this.getPlaceholderOption();
            if (Y) {
              W = W.not(Y);
            }
          }
          W.each2(function (ad, ac) {
            Z(ac, X.results);
          });
          aa.callback(X);
        });
        T.id = function (W) {
          return W.id;
        };
      } else {
        if (!("query" in T)) {
          if ("ajax" in T) {
            Q = T.element.data("ajax-url");
            if (Q && Q.length > 0) {
              T.ajax.url = Q;
            }
            T.query = d.call(T.element, T.ajax);
          } else {
            if ("data" in T) {
              T.query = A(T.data);
            } else {
              if ("tags" in T) {
                T.query = O(T.tags);
                if (T.createSearchChoice === P) {
                  T.createSearchChoice = function (W) {
                    return { id: a.trim(W), text: a.trim(W) };
                  };
                }
                if (T.initSelection === P) {
                  T.initSelection = function (Y, W) {
                    var X = [];
                    a(L(Y.val(), T.separator)).each(function () {
                      var Z = { id: this, text: this },
                        aa = T.tags;
                      if (a.isFunction(aa)) {
                        aa = aa();
                      }
                      a(aa).each(function () {
                        if (n(this.id, Z.id)) {
                          Z = this;
                          return false;
                        }
                      });
                      X.push(Z);
                    });
                    W(X);
                  };
                }
              }
            }
          }
        }
      }
      if (typeof T.query !== "function") {
        throw "query function not defined for Select2 " + T.element.attr("id");
      }
      if (T.createSearchChoicePosition === "top") {
        T.createSearchChoicePosition = function (X, W) {
          X.unshift(W);
        };
      } else {
        if (T.createSearchChoicePosition === "bottom") {
          T.createSearchChoicePosition = function (X, W) {
            X.push(W);
          };
        } else {
          if (typeof T.createSearchChoicePosition !== "function") {
            throw "invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";
          }
        }
      }
      return T;
    },
    monitorSource: function () {
      var Q = this.opts.element,
        R,
        S = this;
      Q.on(
        "change.select2",
        this.bind(function (T) {
          if (this.opts.element.data("select2-change-triggered") !== true) {
            this.initSelection();
          }
        })
      );
      this._sync = this.bind(function () {
        var T = Q.prop("disabled");
        if (T === P) {
          T = false;
        }
        this.enable(!T);
        var U = Q.prop("readonly");
        if (U === P) {
          U = false;
        }
        this.readonly(U);
        N(this.container, this.opts.element, this.opts.adaptContainerCssClass);
        this.container.addClass(
          o(this.opts.containerCssClass, this.opts.element)
        );
        N(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
        this.dropdown.addClass(
          o(this.opts.dropdownCssClass, this.opts.element)
        );
      });
      if (Q.length && Q[0].attachEvent) {
        Q.each(function () {
          this.attachEvent("onpropertychange", S._sync);
        });
      }
      R =
        window.MutationObserver ||
        window.WebKitMutationObserver ||
        window.MozMutationObserver;
      if (R !== P) {
        if (this.propertyObserver) {
          delete this.propertyObserver;
          this.propertyObserver = null;
        }
        this.propertyObserver = new R(function (T) {
          a.each(T, S._sync);
        });
        this.propertyObserver.observe(Q.get(0), {
          attributes: true,
          subtree: false,
        });
      }
    },
    triggerSelect: function (Q) {
      var R = a.Event("select2-selecting", {
        val: this.id(Q),
        object: Q,
        choice: Q,
      });
      this.opts.element.trigger(R);
      return !R.isDefaultPrevented();
    },
    triggerChange: function (Q) {
      Q = Q || {};
      Q = a.extend({}, Q, { type: "change", val: this.val() });
      this.opts.element.data("select2-change-triggered", true);
      this.opts.element.trigger(Q);
      this.opts.element.data("select2-change-triggered", false);
      this.opts.element.click();
      if (this.opts.blurOnChange) {
        this.opts.element.blur();
      }
    },
    isInterfaceEnabled: function () {
      return this.enabledInterface === true;
    },
    enableInterface: function () {
      var R = this._enabled && !this._readonly,
        Q = !R;
      if (R === this.enabledInterface) {
        return false;
      }
      this.container.toggleClass("select2-container-disabled", Q);
      this.close();
      this.enabledInterface = R;
      return true;
    },
    enable: function (Q) {
      if (Q === P) {
        Q = true;
      }
      if (this._enabled === Q) {
        return;
      }
      this._enabled = Q;
      this.opts.element.prop("disabled", !Q);
      this.enableInterface();
    },
    disable: function () {
      this.enable(false);
    },
    readonly: function (Q) {
      if (Q === P) {
        Q = false;
      }
      if (this._readonly === Q) {
        return;
      }
      this._readonly = Q;
      this.opts.element.prop("readonly", Q);
      this.enableInterface();
    },
    opened: function () {
      return this.container
        ? this.container.hasClass("select2-dropdown-open")
        : false;
    },
    positionDropdown: function () {
      var Q = this.dropdown,
        af = this.container.offset(),
        ae = this.container.outerHeight(false),
        aj = this.container.outerWidth(false),
        X = Q.outerHeight(false),
        R = a(window),
        al = R.width(),
        ak = R.height(),
        ai = R.scrollLeft() + al,
        ah = R.scrollTop() + ak,
        Z = af.top + ae,
        Y = af.left,
        ac = Z + X <= ah,
        ab = af.top - X >= R.scrollTop(),
        aa = Q.outerWidth(false),
        ad = Y + aa <= ai,
        T = Q.hasClass("select2-drop-above"),
        U,
        S,
        V,
        W,
        ag;
      if (T) {
        S = true;
        if (!ab && ac) {
          V = true;
          S = false;
        }
      } else {
        S = false;
        if (!ac && ab) {
          V = true;
          S = true;
        }
      }
      if (V) {
        Q.hide();
        af = this.container.offset();
        ae = this.container.outerHeight(false);
        aj = this.container.outerWidth(false);
        X = Q.outerHeight(false);
        ai = R.scrollLeft() + al;
        ah = R.scrollTop() + ak;
        Z = af.top + ae;
        Y = af.left;
        aa = Q.outerWidth(false);
        ad = Y + aa <= ai;
        Q.show();
        this.focusSearch();
      }
      if (this.opts.dropdownAutoWidth) {
        ag = a(".select2-results", Q)[0];
        Q.addClass("select2-drop-auto-width");
        Q.css("width", "");
        aa =
          Q.outerWidth(false) +
          (ag.scrollHeight === ag.clientHeight ? 0 : I.width);
        aa > aj ? (aj = aa) : (aa = aj);
        X = Q.outerHeight(false);
        ad = Y + aa <= ai;
      } else {
        this.container.removeClass("select2-drop-auto-width");
      }
      if (this.body.css("position") !== "static") {
        U = this.body.offset();
        Z -= U.top;
        Y -= U.left;
      }
      if (!ad) {
        Y = af.left + this.container.outerWidth(false) - aa;
      }
      W = { left: Y, width: aj };
      if (S) {
        W.top = af.top - X;
        W.bottom = "auto";
        this.container.addClass("select2-drop-above");
        Q.addClass("select2-drop-above");
      } else {
        W.top = Z;
        W.bottom = "auto";
        this.container.removeClass("select2-drop-above");
        Q.removeClass("select2-drop-above");
      }
      W = a.extend(W, o(this.opts.dropdownCss, this.opts.element));
      Q.css(W);
    },
    shouldOpen: function () {
      var Q;
      if (this.opened()) {
        return false;
      }
      if (this._enabled === false || this._readonly === true) {
        return false;
      }
      Q = a.Event("select2-opening");
      this.opts.element.trigger(Q);
      return !Q.isDefaultPrevented();
    },
    clearDropdownAlignmentPreference: function () {
      this.container.removeClass("select2-drop-above");
      this.dropdown.removeClass("select2-drop-above");
    },
    open: function () {
      if (!this.shouldOpen()) {
        return false;
      }
      this.opening();
      b.on("mousemove.select2Event", function (Q) {
        z.x = Q.pageX;
        z.y = Q.pageY;
      });
      return true;
    },
    opening: function () {
      var Q = this.containerEventName,
        U = "scroll." + Q,
        T = "resize." + Q,
        S = "orientationchange." + Q,
        R;
      this.container
        .addClass("select2-dropdown-open")
        .addClass("select2-container-active");
      this.clearDropdownAlignmentPreference();
      if (this.dropdown[0] !== this.body.children().last()[0]) {
        this.dropdown.detach().appendTo(this.body);
      }
      R = a("#select2-drop-mask");
      if (R.length == 0) {
        R = a(document.createElement("div"));
        R.attr("id", "select2-drop-mask").attr("class", "select2-drop-mask");
        R.hide();
        R.appendTo(this.body);
        R.on("mousedown touchstart click", function (X) {
          H(R);
          var W = a("#select2-drop"),
            Y;
          if (W.length > 0) {
            Y = W.data("select2");
            if (Y.opts.selectOnBlur) {
              Y.selectHighlighted({ noFocus: true });
            }
            Y.close();
            X.preventDefault();
            X.stopPropagation();
          }
        });
      }
      if (this.dropdown.prev()[0] !== R[0]) {
        this.dropdown.before(R);
      }
      a("#select2-drop").removeAttr("id");
      this.dropdown.attr("id", "select2-drop");
      R.show();
      this.positionDropdown();
      this.dropdown.show();
      this.positionDropdown();
      this.dropdown.addClass("select2-drop-active");
      var V = this;
      this.container
        .parents()
        .add(window)
        .each(function () {
          a(this).on(T + " " + U + " " + S, function (W) {
            if (V.opened()) {
              V.positionDropdown();
            }
          });
        });
    },
    close: function () {
      if (!this.opened()) {
        return;
      }
      var Q = this.containerEventName,
        T = "scroll." + Q,
        S = "resize." + Q,
        R = "orientationchange." + Q;
      this.container
        .parents()
        .add(window)
        .each(function () {
          a(this).off(T).off(S).off(R);
        });
      this.clearDropdownAlignmentPreference();
      a("#select2-drop-mask").hide();
      this.dropdown.removeAttr("id");
      this.dropdown.hide();
      this.container
        .removeClass("select2-dropdown-open")
        .removeClass("select2-container-active");
      this.results.empty();
      b.off("mousemove.select2Event");
      this.clearSearch();
      this.search.removeClass("select2-active");
      this.opts.element.trigger(a.Event("select2-close"));
    },
    externalSearch: function (Q) {
      this.open();
      this.search.val(Q);
      this.updateResults(false);
    },
    clearSearch: function () {},
    getMaximumSelectionSize: function () {
      return o(this.opts.maximumSelectionSize, this.opts.element);
    },
    ensureHighlightVisible: function () {
      var W = this.results,
        R,
        T,
        Q,
        S,
        V,
        Y,
        U,
        X;
      T = this.highlight();
      if (T < 0) {
        return;
      }
      if (T == 0) {
        W.scrollTop(0);
        return;
      }
      R = this.findHighlightableChoices().find(".select2-result-label");
      Q = a(R[T]);
      X = (Q.offset() || {}).top || 0;
      S = X + Q.outerHeight(true);
      if (T === R.length - 1) {
        U = W.find("li.select2-more-results");
        if (U.length > 0) {
          S = U.offset().top + U.outerHeight(true);
        }
      }
      V = W.offset().top + W.outerHeight(true);
      if (S > V) {
        W.scrollTop(W.scrollTop() + (S - V));
      }
      Y = X - W.offset().top;
      if (Y < 0 && Q.css("display") != "none") {
        W.scrollTop(W.scrollTop() + Y);
      }
    },
    findHighlightableChoices: function () {
      return this.results.find(
        ".select2-result-selectable:not(.select2-disabled):not(.select2-selected)"
      );
    },
    moveHighlight: function (S) {
      var R = this.findHighlightableChoices(),
        T = this.highlight();
      while (T > -1 && T < R.length) {
        T += S;
        var Q = a(R[T]);
        if (
          Q.hasClass("select2-result-selectable") &&
          !Q.hasClass("select2-disabled") &&
          !Q.hasClass("select2-selected")
        ) {
          this.highlight(T);
          break;
        }
      }
    },
    highlight: function (T) {
      var R = this.findHighlightableChoices(),
        Q,
        S;
      if (arguments.length === 0) {
        return s(R.filter(".select2-highlighted")[0], R.get());
      }
      if (T >= R.length) {
        T = R.length - 1;
      }
      if (T < 0) {
        T = 0;
      }
      this.removeHighlight();
      Q = a(R[T]);
      Q.addClass("select2-highlighted");
      this.search.attr(
        "aria-activedescendant",
        Q.find(".select2-result-label").attr("id")
      );
      this.ensureHighlightVisible();
      this.liveRegion.text(Q.text());
      S = Q.data("select2-data");
      if (S) {
        this.opts.element.trigger({
          type: "select2-highlight",
          val: this.id(S),
          choice: S,
        });
      }
    },
    removeHighlight: function () {
      this.results
        .find(".select2-highlighted")
        .removeClass("select2-highlighted");
    },
    touchMoved: function () {
      this._touchMoved = true;
    },
    clearTouchMoved: function () {
      this._touchMoved = false;
    },
    countSelectableResults: function () {
      return this.findHighlightableChoices().length;
    },
    highlightUnderEvent: function (S) {
      var R = a(S.target).closest(".select2-result-selectable");
      if (R.length > 0 && !R.is(".select2-highlighted")) {
        var Q = this.findHighlightableChoices();
        this.highlight(Q.index(R));
      } else {
        if (R.length == 0) {
          this.removeHighlight();
        }
      }
    },
    loadMoreIfNeeded: function () {
      var U = this.results,
        S = U.find("li.select2-more-results"),
        Q,
        T = this.resultsPage + 1,
        V = this,
        W = this.search.val(),
        R = this.context;
      if (S.length === 0) {
        return;
      }
      Q = S.offset().top - U.offset().top - U.height();
      if (Q <= this.opts.loadMorePadding) {
        S.addClass("select2-active");
        this.opts.query({
          element: this.opts.element,
          term: W,
          page: T,
          context: R,
          matcher: this.opts.matcher,
          callback: this.bind(function (X) {
            if (!V.opened()) {
              return;
            }
            V.opts.populateResults.call(this, U, X.results, {
              term: W,
              page: T,
              context: R,
            });
            V.postprocessResults(X, false, false);
            if (X.more === true) {
              S.detach()
                .appendTo(U)
                .text(o(V.opts.formatLoadMore, V.opts.element, T + 1));
              window.setTimeout(function () {
                V.loadMoreIfNeeded();
              }, 10);
            } else {
              S.remove();
            }
            V.positionDropdown();
            V.resultsPage = T;
            V.context = X.context;
            this.opts.element.trigger({ type: "select2-loaded", items: X });
          }),
        });
      }
    },
    tokenize: function () {},
    updateResults: function (R) {
      var aa = this.search,
        Z = this.results,
        V = this.opts,
        Q,
        ab = this,
        S,
        ac = aa.val(),
        T = a.data(this.container, "select2-last-term"),
        X;
      if (R !== true && T && n(ac, T)) {
        return;
      }
      a.data(this.container, "select2-last-term", ac);
      if (R !== true && (this.showSearchInput === false || !this.opened())) {
        return;
      }
      function W() {
        aa.removeClass("select2-active");
        ab.positionDropdown();
        if (
          Z.find(
            ".select2-no-results,.select2-selection-limit,.select2-searching"
          ).length
        ) {
          ab.liveRegion.text(Z.text());
        } else {
          ab.liveRegion.text(
            ab.opts.formatMatches(Z.find(".select2-result-selectable").length)
          );
        }
      }
      function Y(ad) {
        Z.html(ad);
        W();
      }
      X = ++this.queryCount;
      var U = this.getMaximumSelectionSize();
      if (U >= 1) {
        Q = this.data();
        if (
          a.isArray(Q) &&
          Q.length >= U &&
          e(V.formatSelectionTooBig, "formatSelectionTooBig")
        ) {
          Y(
            "<li class='select2-selection-limit'>" +
              o(V.formatSelectionTooBig, V.element, U) +
              "</li>"
          );
          return;
        }
      }
      if (aa.val().length < V.minimumInputLength) {
        if (e(V.formatInputTooShort, "formatInputTooShort")) {
          Y(
            "<li class='select2-no-results'>" +
              o(
                V.formatInputTooShort,
                V.element,
                aa.val(),
                V.minimumInputLength
              ) +
              "</li>"
          );
        } else {
          Y("");
        }
        if (R && this.showSearch) {
          this.showSearch(true);
        }
        return;
      }
      if (V.maximumInputLength && aa.val().length > V.maximumInputLength) {
        if (e(V.formatInputTooLong, "formatInputTooLong")) {
          Y(
            "<li class='select2-no-results'>" +
              o(
                V.formatInputTooLong,
                V.element,
                aa.val(),
                V.maximumInputLength
              ) +
              "</li>"
          );
        } else {
          Y("");
        }
        return;
      }
      if (V.formatSearching && this.findHighlightableChoices().length === 0) {
        Y(
          "<li class='select2-searching'>" +
            o(V.formatSearching, V.element) +
            "</li>"
        );
      }
      aa.addClass("select2-active");
      this.removeHighlight();
      S = this.tokenize();
      if (S != P && S != null) {
        aa.val(S);
      }
      this.resultsPage = 1;
      V.query({
        element: V.element,
        term: aa.val(),
        page: this.resultsPage,
        context: null,
        matcher: V.matcher,
        callback: this.bind(function (ad) {
          var ae;
          if (X != this.queryCount) {
            return;
          }
          if (!this.opened()) {
            this.search.removeClass("select2-active");
            return;
          }
          if (ad.hasError !== P && e(V.formatAjaxError, "formatAjaxError")) {
            Y(
              "<li class='select2-ajax-error'>" +
                o(
                  V.formatAjaxError,
                  V.element,
                  ad.jqXHR,
                  ad.textStatus,
                  ad.errorThrown
                ) +
                "</li>"
            );
            return;
          }
          this.context = ad.context === P ? null : ad.context;
          if (this.opts.createSearchChoice && aa.val() !== "") {
            ae = this.opts.createSearchChoice.call(ab, aa.val(), ad.results);
            if (
              ae !== P &&
              ae !== null &&
              ab.id(ae) !== P &&
              ab.id(ae) !== null
            ) {
              if (
                a(ad.results).filter(function () {
                  return n(ab.id(this), ab.id(ae));
                }).length === 0
              ) {
                this.opts.createSearchChoicePosition(ad.results, ae);
              }
            }
          }
          if (
            ad.results.length === 0 &&
            e(V.formatNoMatches, "formatNoMatches")
          ) {
            Y(
              "<li class='select2-no-results'>" +
                o(V.formatNoMatches, V.element, aa.val()) +
                "</li>"
            );
            return;
          }
          Z.empty();
          ab.opts.populateResults.call(this, Z, ad.results, {
            term: aa.val(),
            page: this.resultsPage,
            context: null,
          });
          if (ad.more === true && e(V.formatLoadMore, "formatLoadMore")) {
            Z.append(
              "<li class='select2-more-results'>" +
                V.escapeMarkup(
                  o(V.formatLoadMore, V.element, this.resultsPage)
                ) +
                "</li>"
            );
            window.setTimeout(function () {
              ab.loadMoreIfNeeded();
            }, 10);
          }
          this.postprocessResults(ad, R);
          W();
          this.opts.element.trigger({ type: "select2-loaded", items: ad });
        }),
      });
    },
    cancel: function () {
      this.close();
    },
    blur: function () {
      if (this.opts.selectOnBlur) {
        this.selectHighlighted({ noFocus: true });
      }
      this.close();
      this.container.removeClass("select2-container-active");
      if (this.search[0] === document.activeElement) {
        this.search.blur();
      }
      this.clearSearch();
      this.selection
        .find(".select2-search-choice-focus")
        .removeClass("select2-search-choice-focus");
    },
    focusSearch: function () {
      p(this.search);
    },
    selectHighlighted: function (T) {
      if (this._touchMoved) {
        this.clearTouchMoved();
        return;
      }
      var S = this.highlight(),
        R = this.results.find(".select2-highlighted"),
        Q = R.closest(".select2-result").data("select2-data");
      if (Q) {
        this.highlight(S);
        this.onSelect(Q, T);
      } else {
        if (T && T.noFocus) {
          this.close();
        }
      }
    },
    getPlaceholder: function () {
      var Q;
      return (
        this.opts.element.attr("placeholder") ||
        this.opts.element.attr("data-placeholder") ||
        this.opts.element.data("placeholder") ||
        this.opts.placeholder ||
        ((Q = this.getPlaceholderOption()) !== P ? Q.text() : P)
      );
    },
    getPlaceholderOption: function () {
      if (this.select) {
        var Q = this.select.children("option").first();
        if (this.opts.placeholderOption !== P) {
          return (
            (this.opts.placeholderOption === "first" && Q) ||
            (typeof this.opts.placeholderOption === "function" &&
              this.opts.placeholderOption(this.select))
          );
        } else {
          if (a.trim(Q.text()) === "" && Q.val() === "") {
            return Q;
          }
        }
      }
    },
    initContainerWidth: function () {
      function Q() {
        var X, T, W, U, V, S;
        if (this.opts.width === "off") {
          return null;
        } else {
          if (this.opts.width === "element") {
            return this.opts.element.outerWidth(false) === 0
              ? "auto"
              : this.opts.element.outerWidth(false) + "px";
          } else {
            if (this.opts.width === "copy" || this.opts.width === "resolve") {
              X = this.opts.element.attr("style");
              if (X !== P) {
                T = X.split(";");
                for (U = 0, V = T.length; U < V; U = U + 1) {
                  S = T[U].replace(/\s/g, "");
                  W = S.match(
                    /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i
                  );
                  if (W !== null && W.length >= 1) {
                    return W[1];
                  }
                }
              }
              if (this.opts.width === "resolve") {
                X = this.opts.element.css("width");
                if (X.indexOf("%") > 0) {
                  return X;
                }
                return this.opts.element.outerWidth(false) === 0
                  ? "auto"
                  : this.opts.element.outerWidth(false) + "px";
              }
              return null;
            } else {
              if (a.isFunction(this.opts.width)) {
                return this.opts.width();
              } else {
                return this.opts.width;
              }
            }
          }
        }
      }
      var R = Q.call(this);
      if (R !== null) {
        this.container.css("width", R);
      }
    },
  });
  J = f(c, {
    createContainer: function () {
      var Q = a(document.createElement("div"))
        .attr({ class: "select2-container" })
        .html(
          [
            "<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>",
            "   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>",
            "   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>",
            "</a>",
            "<label for='' class='select2-offscreen'></label>",
            "<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />",
            "<div class='select2-drop select2-display-none'>",
            "   <div class='select2-search'>",
            "       <label for='' class='select2-offscreen'></label>",
            "       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'",
            "       aria-autocomplete='list' />",
            "   </div>",
            "   <ul class='select2-results' role='listbox'>",
            "   </ul>",
            "</div>",
          ].join("")
        );
      return Q;
    },
    enableInterface: function () {
      if (this.parent.enableInterface.apply(this, arguments)) {
        this.focusser.prop("disabled", !this.isInterfaceEnabled());
      }
    },
    opening: function () {
      var Q, S, R;
      if (this.opts.minimumResultsForSearch >= 0) {
        this.showSearch(true);
      }
      this.parent.opening.apply(this, arguments);
      if (this.showSearchInput !== false) {
        this.search.val(this.focusser.val());
      }
      if (this.opts.shouldFocusInput(this)) {
        this.search.focus();
        Q = this.search.get(0);
        if (Q.createTextRange) {
          S = Q.createTextRange();
          S.collapse(false);
          S.select();
        } else {
          if (Q.setSelectionRange) {
            R = this.search.val().length;
            Q.setSelectionRange(R, R);
          }
        }
      }
      if (this.search.val() === "") {
        if (this.nextSearchTerm != P) {
          this.search.val(this.nextSearchTerm);
          this.search.select();
        }
      }
      this.focusser.prop("disabled", true).val("");
      this.updateResults(true);
      this.opts.element.trigger(a.Event("select2-open"));
    },
    close: function () {
      if (!this.opened()) {
        return;
      }
      this.parent.close.apply(this, arguments);
      this.focusser.prop("disabled", false);
      if (this.opts.shouldFocusInput(this)) {
        this.focusser.focus();
      }
    },
    focus: function () {
      if (this.opened()) {
        this.close();
      } else {
        this.focusser.prop("disabled", false);
        if (this.opts.shouldFocusInput(this)) {
          this.focusser.focus();
        }
      }
    },
    isFocused: function () {
      return this.container.hasClass("select2-container-active");
    },
    cancel: function () {
      this.parent.cancel.apply(this, arguments);
      this.focusser.prop("disabled", false);
      if (this.opts.shouldFocusInput(this)) {
        this.focusser.focus();
      }
    },
    destroy: function () {
      a("label[for='" + this.focusser.attr("id") + "']").attr(
        "for",
        this.opts.element.attr("id")
      );
      this.parent.destroy.apply(this, arguments);
      g.call(this, "selection", "focusser");
    },
    initContainer: function () {
      var V,
        Q = this.container,
        R = this.dropdown,
        T = G(),
        S;
      if (this.opts.minimumResultsForSearch < 0) {
        this.showSearch(false);
      } else {
        this.showSearch(true);
      }
      this.selection = V = Q.find(".select2-choice");
      this.focusser = Q.find(".select2-focusser");
      V.find(".select2-chosen").attr("id", "select2-chosen-" + T);
      this.focusser.attr("aria-labelledby", "select2-chosen-" + T);
      this.results.attr("id", "select2-results-" + T);
      this.search.attr("aria-owns", "select2-results-" + T);
      this.focusser.attr("id", "s2id_autogen" + T);
      S = a("label[for='" + this.opts.element.attr("id") + "']");
      this.focusser.prev().text(S.text()).attr("for", this.focusser.attr("id"));
      var U = this.opts.element.attr("title");
      this.opts.element.attr("title", U || S.text());
      this.focusser.attr("tabindex", this.elementTabIndex);
      this.search.attr("id", this.focusser.attr("id") + "_search");
      this.search
        .prev()
        .text(a("label[for='" + this.focusser.attr("id") + "']").text())
        .attr("for", this.search.attr("id"));
      this.search.on(
        "keydown",
        this.bind(function (W) {
          if (!this.isInterfaceEnabled()) {
            return;
          }
          if (229 == W.keyCode) {
            return;
          }
          if (W.which === w.PAGE_UP || W.which === w.PAGE_DOWN) {
            x(W);
            return;
          }
          switch (W.which) {
            case w.UP:
            case w.DOWN:
              this.moveHighlight(W.which === w.UP ? -1 : 1);
              x(W);
              return;
            case w.ENTER:
              this.selectHighlighted();
              x(W);
              return;
            case w.TAB:
              this.selectHighlighted({ noFocus: true });
              return;
            case w.ESC:
              this.cancel(W);
              x(W);
              return;
          }
        })
      );
      this.search.on(
        "blur",
        this.bind(function (W) {
          if (document.activeElement === this.body.get(0)) {
            window.setTimeout(
              this.bind(function () {
                if (this.opened()) {
                  this.search.focus();
                }
              }),
              0
            );
          }
        })
      );
      this.focusser.on(
        "keydown",
        this.bind(function (W) {
          if (!this.isInterfaceEnabled()) {
            return;
          }
          if (
            W.which === w.TAB ||
            w.isControl(W) ||
            w.isFunctionKey(W) ||
            W.which === w.ESC
          ) {
            return;
          }
          if (this.opts.openOnEnter === false && W.which === w.ENTER) {
            x(W);
            return;
          }
          if (
            W.which == w.DOWN ||
            W.which == w.UP ||
            (W.which == w.ENTER && this.opts.openOnEnter)
          ) {
            if (W.altKey || W.ctrlKey || W.shiftKey || W.metaKey) {
              return;
            }
            this.open();
            x(W);
            return;
          }
          if (W.which == w.DELETE || W.which == w.BACKSPACE) {
            if (this.opts.allowClear) {
              this.clear();
            }
            x(W);
            return;
          }
        })
      );
      v(this.focusser);
      this.focusser.on(
        "keyup-change input",
        this.bind(function (W) {
          if (this.opts.minimumResultsForSearch >= 0) {
            W.stopPropagation();
            if (this.opened()) {
              return;
            }
            this.open();
          }
        })
      );
      V.on(
        "mousedown touchstart",
        "abbr",
        this.bind(function (W) {
          if (!this.isInterfaceEnabled()) {
            return;
          }
          this.clear();
          y(W);
          this.close();
          this.selection.focus();
        })
      );
      V.on(
        "mousedown touchstart",
        this.bind(function (W) {
          H(V);
          if (!this.container.hasClass("select2-container-active")) {
            this.opts.element.trigger(a.Event("select2-focus"));
          }
          if (this.opened()) {
            this.close();
          } else {
            if (this.isInterfaceEnabled()) {
              this.open();
            }
          }
          x(W);
        })
      );
      R.on(
        "mousedown touchstart",
        this.bind(function () {
          if (this.opts.shouldFocusInput(this)) {
            this.search.focus();
          }
        })
      );
      V.on(
        "focus",
        this.bind(function (W) {
          x(W);
        })
      );
      this.focusser
        .on(
          "focus",
          this.bind(function () {
            if (!this.container.hasClass("select2-container-active")) {
              this.opts.element.trigger(a.Event("select2-focus"));
            }
            this.container.addClass("select2-container-active");
          })
        )
        .on(
          "blur",
          this.bind(function () {
            if (!this.opened()) {
              this.container.removeClass("select2-container-active");
              this.opts.element.trigger(a.Event("select2-blur"));
            }
          })
        );
      this.search.on(
        "focus",
        this.bind(function () {
          if (!this.container.hasClass("select2-container-active")) {
            this.opts.element.trigger(a.Event("select2-focus"));
          }
          this.container.addClass("select2-container-active");
        })
      );
      this.initContainerWidth();
      this.opts.element.addClass("select2-offscreen");
      this.setPlaceholder();
    },
    clear: function (T) {
      var Q = this.selection.data("select2-data");
      if (Q) {
        var R = a.Event("select2-clearing");
        this.opts.element.trigger(R);
        if (R.isDefaultPrevented()) {
          return;
        }
        var S = this.getPlaceholderOption();
        this.opts.element.val(S ? S.val() : "");
        this.selection.find(".select2-chosen").empty();
        this.selection.removeData("select2-data");
        this.setPlaceholder();
        if (T !== false) {
          this.opts.element.trigger({
            type: "select2-removed",
            val: this.id(Q),
            choice: Q,
          });
          this.triggerChange({ removed: Q });
        }
      }
    },
    initSelection: function () {
      var Q;
      if (this.isPlaceholderOptionSelected()) {
        this.updateSelection(null);
        this.close();
        this.setPlaceholder();
      } else {
        var R = this;
        this.opts.initSelection.call(null, this.opts.element, function (S) {
          if (S !== P && S !== null) {
            R.updateSelection(S);
            R.close();
            R.setPlaceholder();
            R.nextSearchTerm = R.opts.nextSearchTerm(S, R.search.val());
          }
        });
      }
    },
    isPlaceholderOptionSelected: function () {
      var Q;
      if (this.getPlaceholder() === P) {
        return false;
      }
      return (
        ((Q = this.getPlaceholderOption()) !== P && Q.prop("selected")) ||
        this.opts.element.val() === "" ||
        this.opts.element.val() === P ||
        this.opts.element.val() === null
      );
    },
    prepareOpts: function () {
      var Q = this.parent.prepareOpts.apply(this, arguments),
        R = this;
      if (Q.element.get(0).tagName.toLowerCase() === "select") {
        Q.initSelection = function (T, S) {
          var U = T.find("option").filter(function () {
            return this.selected && !this.disabled;
          });
          S(R.optionToData(U));
        };
      } else {
        if ("data" in Q) {
          Q.initSelection =
            Q.initSelection ||
            function (T, S) {
              var U = T.val();
              var V = null;
              Q.query({
                matcher: function (Y, Z, W) {
                  var X = n(U, Q.id(W));
                  if (X) {
                    V = W;
                  }
                  return X;
                },
                callback: !a.isFunction(S)
                  ? a.noop
                  : function () {
                      S(V);
                    },
              });
            };
        }
      }
      return Q;
    },
    getPlaceholder: function () {
      if (this.select) {
        if (this.getPlaceholderOption() === P) {
          return P;
        }
      }
      return this.parent.getPlaceholder.apply(this, arguments);
    },
    setPlaceholder: function () {
      var Q = this.getPlaceholder();
      if (this.isPlaceholderOptionSelected() && Q !== P) {
        if (this.select && this.getPlaceholderOption() === P) {
          return;
        }
        this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(Q));
        this.selection.addClass("select2-default");
        this.container.removeClass("select2-allowclear");
      }
    },
    postprocessResults: function (Q, R, T) {
      var U = 0,
        V = this,
        W = true;
      this.findHighlightableChoices().each2(function (Y, X) {
        if (n(V.id(X.data("select2-data")), V.opts.element.val())) {
          U = Y;
          return false;
        }
      });
      if (T !== false) {
        if (R === true && U >= 0) {
          this.highlight(U);
        } else {
          this.highlight(0);
        }
      }
      if (R === true) {
        var S = this.opts.minimumResultsForSearch;
        if (S >= 0) {
          this.showSearch(h(Q.results) >= S);
        }
      }
    },
    showSearch: function (Q) {
      if (this.showSearchInput === Q) {
        return;
      }
      this.showSearchInput = Q;
      this.dropdown
        .find(".select2-search")
        .toggleClass("select2-search-hidden", !Q);
      this.dropdown
        .find(".select2-search")
        .toggleClass("select2-offscreen", !Q);
      a(this.dropdown, this.container).toggleClass("select2-with-searchbox", Q);
    },
    onSelect: function (Q, T) {
      if (!this.triggerSelect(Q)) {
        return;
      }
      var R = this.opts.element.val(),
        S = this.data();
      this.opts.element.val(this.id(Q));
      this.updateSelection(Q);
      this.opts.element.trigger({
        type: "select2-selected",
        val: this.id(Q),
        choice: Q,
      });
      this.nextSearchTerm = this.opts.nextSearchTerm(Q, this.search.val());
      this.close();
      if ((!T || !T.noFocus) && this.opts.shouldFocusInput(this)) {
        this.focusser.focus();
      }
      if (!n(R, this.id(Q))) {
        this.triggerChange({ added: Q, removed: S });
      }
    },
    updateSelection: function (S) {
      var Q = this.selection.find(".select2-chosen"),
        T,
        R;
      this.selection.data("select2-data", S);
      Q.empty();
      if (S !== null) {
        T = this.opts.formatSelection(S, Q, this.opts.escapeMarkup);
      }
      if (T !== P) {
        Q.append(T);
      }
      R = this.opts.formatSelectionCssClass(S, Q);
      if (R !== P) {
        Q.addClass(R);
      }
      this.selection.removeClass("select2-default");
      if (this.opts.allowClear && this.getPlaceholder() !== P) {
        this.container.addClass("select2-allowclear");
      }
    },
    val: function () {
      var U,
        T = false,
        Q = null,
        S = this,
        R = this.data();
      if (arguments.length === 0) {
        return this.opts.element.val();
      }
      U = arguments[0];
      if (arguments.length > 1) {
        T = arguments[1];
      }
      if (this.select) {
        this.select
          .val(U)
          .find("option")
          .filter(function () {
            return this.selected;
          })
          .each2(function (W, V) {
            Q = S.optionToData(V);
            return false;
          });
        this.updateSelection(Q);
        this.setPlaceholder();
        if (T) {
          this.triggerChange({ added: Q, removed: R });
        }
      } else {
        if (!U && U !== 0) {
          this.clear(T);
          return;
        }
        if (this.opts.initSelection === P) {
          throw new Error(
            "cannot call val() if initSelection() is not defined"
          );
        }
        this.opts.element.val(U);
        this.opts.initSelection(this.opts.element, function (V) {
          S.opts.element.val(!V ? "" : S.id(V));
          S.updateSelection(V);
          S.setPlaceholder();
          if (T) {
            S.triggerChange({ added: V, removed: R });
          }
        });
      }
    },
    clearSearch: function () {
      this.search.val("");
      this.focusser.val("");
    },
    data: function (S) {
      var Q,
        R = false;
      if (arguments.length === 0) {
        Q = this.selection.data("select2-data");
        if (Q == P) {
          Q = null;
        }
        return Q;
      } else {
        if (arguments.length > 1) {
          R = arguments[1];
        }
        if (!S) {
          this.clear(R);
        } else {
          Q = this.data();
          this.opts.element.val(!S ? "" : this.id(S));
          this.updateSelection(S);
          if (R) {
            this.triggerChange({ added: S, removed: Q });
          }
        }
      }
    },
  });
  F = f(c, {
    createContainer: function () {
      var Q = a(document.createElement("div"))
        .attr({ class: "select2-container select2-container-multi" })
        .html(
          [
            "<ul class='select2-choices'>",
            "  <li class='select2-search-field'>",
            "    <label for='' class='select2-offscreen'></label>",
            "    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>",
            "  </li>",
            "</ul>",
            "<div class='select2-drop select2-drop-multi select2-display-none'>",
            "   <ul class='select2-results'>",
            "   </ul>",
            "</div>",
          ].join("")
        );
      return Q;
    },
    prepareOpts: function () {
      var Q = this.parent.prepareOpts.apply(this, arguments),
        R = this;
      if (Q.element.get(0).tagName.toLowerCase() === "select") {
        Q.initSelection = function (U, S) {
          var T = [];
          U.find("option")
            .filter(function () {
              return this.selected && !this.disabled;
            })
            .each2(function (W, V) {
              T.push(R.optionToData(V));
            });
          S(T);
        };
      } else {
        if ("data" in Q) {
          Q.initSelection =
            Q.initSelection ||
            function (T, S) {
              var U = L(T.val(), Q.separator);
              var V = [];
              Q.query({
                matcher: function (Y, Z, W) {
                  var X = a.grep(U, function (aa) {
                    return n(aa, Q.id(W));
                  }).length;
                  if (X) {
                    V.push(W);
                  }
                  return X;
                },
                callback: !a.isFunction(S)
                  ? a.noop
                  : function () {
                      var aa = [];
                      for (var W = 0; W < U.length; W++) {
                        var X = U[W];
                        for (var Y = 0; Y < V.length; Y++) {
                          var Z = V[Y];
                          if (n(X, Q.id(Z))) {
                            aa.push(Z);
                            V.splice(Y, 1);
                            break;
                          }
                        }
                      }
                      S(aa);
                    },
              });
            };
        }
      }
      return Q;
    },
    selectChoice: function (Q) {
      var R = this.container.find(".select2-search-choice-focus");
      if (R.length && Q && Q[0] == R[0]) {
      } else {
        if (R.length) {
          this.opts.element.trigger("choice-deselected", R);
        }
        R.removeClass("select2-search-choice-focus");
        if (Q && Q.length) {
          this.close();
          Q.addClass("select2-search-choice-focus");
          this.opts.element.trigger("choice-selected", Q);
        }
      }
    },
    destroy: function () {
      a("label[for='" + this.search.attr("id") + "']").attr(
        "for",
        this.opts.element.attr("id")
      );
      this.parent.destroy.apply(this, arguments);
      g.call(this, "searchContainer", "selection");
    },
    initContainer: function () {
      var S = ".select2-choices",
        R;
      this.searchContainer = this.container.find(".select2-search-field");
      this.selection = R = this.container.find(S);
      var Q = this;
      this.selection.on(
        "click",
        ".select2-search-choice:not(.select2-locked)",
        function (T) {
          Q.search[0].focus();
          Q.selectChoice(a(this));
        }
      );
      this.search.attr("id", "s2id_autogen" + G());
      this.search
        .prev()
        .text(a("label[for='" + this.opts.element.attr("id") + "']").text())
        .attr("for", this.search.attr("id"));
      this.search.on(
        "input paste",
        this.bind(function () {
          if (
            this.search.attr("placeholder") &&
            this.search.val().length == 0
          ) {
            return;
          }
          if (!this.isInterfaceEnabled()) {
            return;
          }
          if (!this.opened()) {
            this.open();
          }
        })
      );
      this.search.attr("tabindex", this.elementTabIndex);
      this.keydowns = 0;
      this.search.on(
        "keydown",
        this.bind(function (T) {
          if (!this.isInterfaceEnabled()) {
            return;
          }
          ++this.keydowns;
          var X = R.find(".select2-search-choice-focus");
          var W = X.prev(".select2-search-choice:not(.select2-locked)");
          var U = X.next(".select2-search-choice:not(.select2-locked)");
          var V = q(this.search);
          if (
            X.length &&
            (T.which == w.LEFT ||
              T.which == w.RIGHT ||
              T.which == w.BACKSPACE ||
              T.which == w.DELETE ||
              T.which == w.ENTER)
          ) {
            var Y = X;
            if (T.which == w.LEFT && W.length) {
              Y = W;
            } else {
              if (T.which == w.RIGHT) {
                Y = U.length ? U : null;
              } else {
                if (T.which === w.BACKSPACE) {
                  if (this.unselect(X.first())) {
                    this.search.width(10);
                    Y = W.length ? W : U;
                  }
                } else {
                  if (T.which == w.DELETE) {
                    if (this.unselect(X.first())) {
                      this.search.width(10);
                      Y = U.length ? U : null;
                    }
                  } else {
                    if (T.which == w.ENTER) {
                      Y = null;
                    }
                  }
                }
              }
            }
            this.selectChoice(Y);
            x(T);
            if (!Y || !Y.length) {
              this.open();
            }
            return;
          } else {
            if (
              ((T.which === w.BACKSPACE && this.keydowns == 1) ||
                T.which == w.LEFT) &&
              V.offset == 0 &&
              !V.length
            ) {
              this.selectChoice(
                R.find(".select2-search-choice:not(.select2-locked)").last()
              );
              x(T);
              return;
            } else {
              this.selectChoice(null);
            }
          }
          if (this.opened()) {
            switch (T.which) {
              case w.UP:
              case w.DOWN:
                this.moveHighlight(T.which === w.UP ? -1 : 1);
                x(T);
                return;
              case w.ENTER:
                this.selectHighlighted();
                x(T);
                return;
              case w.TAB:
                this.selectHighlighted({ noFocus: true });
                this.close();
                return;
              case w.ESC:
                this.cancel(T);
                x(T);
                return;
            }
          }
          if (
            T.which === w.TAB ||
            w.isControl(T) ||
            w.isFunctionKey(T) ||
            T.which === w.BACKSPACE ||
            T.which === w.ESC
          ) {
            return;
          }
          if (T.which === w.ENTER) {
            if (this.opts.openOnEnter === false) {
              return;
            } else {
              if (T.altKey || T.ctrlKey || T.shiftKey || T.metaKey) {
                return;
              }
            }
          }
          this.open();
          if (T.which === w.PAGE_UP || T.which === w.PAGE_DOWN) {
            x(T);
          }
          if (T.which === w.ENTER) {
            x(T);
          }
        })
      );
      this.search.on(
        "keyup",
        this.bind(function (T) {
          this.keydowns = 0;
          this.resizeSearch();
        })
      );
      this.search.on(
        "blur",
        this.bind(function (T) {
          this.container.removeClass("select2-container-active");
          this.search.removeClass("select2-focused");
          this.selectChoice(null);
          if (!this.opened()) {
            this.clearSearch();
          }
          T.stopImmediatePropagation();
          this.opts.element.trigger(a.Event("select2-blur"));
        })
      );
      this.container.on(
        "click",
        S,
        this.bind(function (T) {
          if (!this.isInterfaceEnabled()) {
            return;
          }
          if (a(T.target).closest(".select2-search-choice").length > 0) {
            return;
          }
          this.selectChoice(null);
          this.clearPlaceholder();
          if (!this.container.hasClass("select2-container-active")) {
            this.opts.element.trigger(a.Event("select2-focus"));
          }
          this.open();
          this.focusSearch();
          T.preventDefault();
        })
      );
      this.container.on(
        "focus",
        S,
        this.bind(function () {
          if (!this.isInterfaceEnabled()) {
            return;
          }
          if (!this.container.hasClass("select2-container-active")) {
            this.opts.element.trigger(a.Event("select2-focus"));
          }
          this.container.addClass("select2-container-active");
          this.dropdown.addClass("select2-drop-active");
          this.clearPlaceholder();
        })
      );
      this.initContainerWidth();
      this.opts.element.addClass("select2-offscreen");
      this.clearSearch();
    },
    enableInterface: function () {
      if (this.parent.enableInterface.apply(this, arguments)) {
        this.search.prop("disabled", !this.isInterfaceEnabled());
      }
    },
    initSelection: function () {
      var Q;
      if (this.opts.element.val() === "" && this.opts.element.text() === "") {
        this.updateSelection([]);
        this.close();
        this.clearSearch();
      }
      if (this.select || this.opts.element.val() !== "") {
        var R = this;
        this.opts.initSelection.call(null, this.opts.element, function (S) {
          if (S !== P && S !== null) {
            R.updateSelection(S);
            R.close();
            R.clearSearch();
          }
        });
      }
    },
    clearSearch: function () {
      var R = this.getPlaceholder(),
        Q = this.getMaxSearchWidth();
      if (
        R !== P &&
        this.getVal().length === 0 &&
        this.search.hasClass("select2-focused") === false
      ) {
        this.search.val(R).addClass("select2-default");
        this.search.width(Q > 0 ? Q : this.container.css("width"));
      } else {
        this.search.val("").width(10);
      }
    },
    clearPlaceholder: function () {
      if (this.search.hasClass("select2-default")) {
        this.search.val("").removeClass("select2-default");
      }
    },
    opening: function () {
      this.clearPlaceholder();
      this.resizeSearch();
      this.parent.opening.apply(this, arguments);
      this.focusSearch();
      if (this.search.val() === "") {
        if (this.nextSearchTerm != P) {
          this.search.val(this.nextSearchTerm);
          this.search.select();
        }
      }
      this.updateResults(true);
      if (this.opts.shouldFocusInput(this)) {
        this.search.focus();
      }
      this.opts.element.trigger(a.Event("select2-open"));
    },
    close: function () {
      if (!this.opened()) {
        return;
      }
      this.parent.close.apply(this, arguments);
    },
    focus: function () {
      this.close();
      this.search.focus();
    },
    isFocused: function () {
      return this.search.hasClass("select2-focused");
    },
    updateSelection: function (Q) {
      var S = [],
        R = [],
        T = this;
      a(Q).each(function () {
        if (s(T.id(this), S) < 0) {
          S.push(T.id(this));
          R.push(this);
        }
      });
      Q = R;
      this.selection.find(".select2-search-choice").remove();
      a(Q).each(function () {
        T.addSelectedChoice(this);
      });
      T.postprocessResults();
    },
    tokenize: function () {
      var Q = this.search.val();
      Q = this.opts.tokenizer.call(
        this,
        Q,
        this.data(),
        this.bind(this.onSelect),
        this.opts
      );
      if (Q != null && Q != P) {
        this.search.val(Q);
        if (Q.length > 0) {
          this.open();
        }
      }
    },
    onSelect: function (Q, R) {
      if (!this.triggerSelect(Q) || Q.text === "") {
        return;
      }
      this.addSelectedChoice(Q);
      this.opts.element.trigger({
        type: "selected",
        val: this.id(Q),
        choice: Q,
      });
      this.nextSearchTerm = this.opts.nextSearchTerm(Q, this.search.val());
      this.clearSearch();
      this.updateResults();
      if (this.select || !this.opts.closeOnSelect) {
        this.postprocessResults(Q, false, this.opts.closeOnSelect === true);
      }
      if (this.opts.closeOnSelect) {
        this.close();
        this.search.width(10);
      } else {
        if (this.countSelectableResults() > 0) {
          this.search.width(10);
          this.resizeSearch();
          if (
            this.getMaximumSelectionSize() > 0 &&
            this.val().length >= this.getMaximumSelectionSize()
          ) {
            this.updateResults(true);
          } else {
            if (this.nextSearchTerm != P) {
              this.search.val(this.nextSearchTerm);
              this.updateResults();
              this.search.select();
            }
          }
          this.positionDropdown();
        } else {
          this.close();
          this.search.width(10);
        }
      }
      this.triggerChange({ added: Q });
      if (!R || !R.noFocus) {
        this.focusSearch();
      }
    },
    cancel: function () {
      this.close();
      this.focusSearch();
    },
    addSelectedChoice: function (S) {
      var U = !S.locked,
        V = a(
          "<li class='select2-search-choice'>    <div></div>    <a href='#' class='select2-search-choice-close' tabindex='-1'></a></li>"
        ),
        T = a(
          "<li class='select2-search-choice select2-locked'><div></div></li>"
        );
      var Q = U ? V : T,
        X = this.id(S),
        Y = this.getVal(),
        W,
        R;
      W = this.opts.formatSelection(S, Q.find("div"), this.opts.escapeMarkup);
      if (W != P) {
        Q.find("div").replaceWith("<div>" + W + "</div>");
      }
      R = this.opts.formatSelectionCssClass(S, Q.find("div"));
      if (R != P) {
        Q.addClass(R);
      }
      if (U) {
        Q.find(".select2-search-choice-close")
          .on("mousedown", x)
          .on(
            "click dblclick",
            this.bind(function (Z) {
              if (!this.isInterfaceEnabled()) {
                return;
              }
              this.unselect(a(Z.target));
              this.selection
                .find(".select2-search-choice-focus")
                .removeClass("select2-search-choice-focus");
              x(Z);
              this.close();
              this.focusSearch();
            })
          )
          .on(
            "focus",
            this.bind(function () {
              if (!this.isInterfaceEnabled()) {
                return;
              }
              this.container.addClass("select2-container-active");
              this.dropdown.addClass("select2-drop-active");
            })
          );
      }
      Q.data("select2-data", S);
      Q.insertBefore(this.searchContainer);
      Y.push(X);
      this.setVal(Y);
    },
    unselect: function (T) {
      var U = this.getVal(),
        Q,
        S;
      T = T.closest(".select2-search-choice");
      if (T.length === 0) {
        throw "Invalid argument: " + T + ". Must be .select2-search-choice";
      }
      Q = T.data("select2-data");
      if (!Q) {
        return;
      }
      var R = a.Event("select2-removing");
      R.val = this.id(Q);
      R.choice = Q;
      this.opts.element.trigger(R);
      if (R.isDefaultPrevented()) {
        return false;
      }
      while ((S = s(this.id(Q), U)) >= 0) {
        U.splice(S, 1);
        this.setVal(U);
        if (this.select) {
          this.postprocessResults();
        }
      }
      T.remove();
      this.opts.element.trigger({
        type: "select2-removed",
        val: this.id(Q),
        choice: Q,
      });
      this.triggerChange({ removed: Q });
      return true;
    },
    postprocessResults: function (S, T, U) {
      var W = this.getVal(),
        Q = this.results.find(".select2-result"),
        R = this.results.find(".select2-result-with-children"),
        V = this;
      Q.each2(function (Y, X) {
        var Z = V.id(X.data("select2-data"));
        if (s(Z, W) >= 0) {
          X.addClass("select2-selected");
          X.find(".select2-result-selectable").addClass("select2-selected");
        }
      });
      R.each2(function (Y, X) {
        if (
          !X.is(".select2-result-selectable") &&
          X.find(".select2-result-selectable:not(.select2-selected)").length ===
            0
        ) {
          X.addClass("select2-selected");
        }
      });
      if (this.highlight() == -1 && U !== false) {
        V.highlight(0);
      }
      if (
        !this.opts.createSearchChoice &&
        !Q.filter(".select2-result:not(.select2-selected)").length > 0
      ) {
        if (
          !S ||
          (S &&
            !S.more &&
            this.results.find(".select2-no-results").length === 0)
        ) {
          if (e(V.opts.formatNoMatches, "formatNoMatches")) {
            this.results.append(
              "<li class='select2-no-results'>" +
                o(V.opts.formatNoMatches, V.opts.element, V.search.val()) +
                "</li>"
            );
          }
        }
      }
    },
    getMaxSearchWidth: function () {
      return this.selection.width() - r(this.search);
    },
    resizeSearch: function () {
      var T,
        R,
        S,
        Q,
        U,
        V = r(this.search);
      T = E(this.search) + 10;
      R = this.search.offset().left;
      S = this.selection.width();
      Q = this.selection.offset().left;
      U = S - (R - Q) - V;
      if (U < T) {
        U = S - V;
      }
      if (U < 40) {
        U = S - V;
      }
      if (U <= 0) {
        U = T;
      }
      this.search.width(Math.floor(U));
    },
    getVal: function () {
      var Q;
      if (this.select) {
        Q = this.select.val();
        return Q === null ? [] : Q;
      } else {
        Q = this.opts.element.val();
        return L(Q, this.opts.separator);
      }
    },
    setVal: function (R) {
      var Q;
      if (this.select) {
        this.select.val(R);
      } else {
        Q = [];
        a(R).each(function () {
          if (s(this, Q) < 0) {
            Q.push(this);
          }
        });
        this.opts.element.val(
          Q.length === 0 ? "" : Q.join(this.opts.separator)
        );
      }
    },
    buildChangeDetails: function (T, Q) {
      var Q = Q.slice(0),
        T = T.slice(0);
      for (var R = 0; R < Q.length; R++) {
        for (var S = 0; S < T.length; S++) {
          if (n(this.opts.id(Q[R]), this.opts.id(T[S]))) {
            Q.splice(R, 1);
            if (R > 0) {
              R--;
            }
            T.splice(S, 1);
            S--;
          }
        }
      }
      return { added: Q, removed: T };
    },
    val: function (T, S) {
      var Q,
        R = this;
      if (arguments.length === 0) {
        return this.getVal();
      }
      Q = this.data();
      if (!Q.length) {
        Q = [];
      }
      if (!T && T !== 0) {
        this.opts.element.val("");
        this.updateSelection([]);
        this.clearSearch();
        if (S) {
          this.triggerChange({ added: this.data(), removed: Q });
        }
        return;
      }
      this.setVal(T);
      if (this.select) {
        this.opts.initSelection(this.select, this.bind(this.updateSelection));
        if (S) {
          this.triggerChange(this.buildChangeDetails(Q, this.data()));
        }
      } else {
        if (this.opts.initSelection === P) {
          throw new Error(
            "val() cannot be called if initSelection() is not defined"
          );
        }
        this.opts.initSelection(this.opts.element, function (U) {
          var V = a.map(U, R.id);
          R.setVal(V);
          R.updateSelection(U);
          R.clearSearch();
          if (S) {
            R.triggerChange(R.buildChangeDetails(Q, R.data()));
          }
        });
      }
      this.clearSearch();
    },
    onSortStart: function () {
      if (this.select) {
        throw new Error(
          "Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead."
        );
      }
      this.search.width(0);
      this.searchContainer.hide();
    },
    onSortEnd: function () {
      var R = [],
        Q = this;
      this.searchContainer.show();
      this.searchContainer.appendTo(this.searchContainer.parent());
      this.resizeSearch();
      this.selection.find(".select2-search-choice").each(function () {
        R.push(Q.opts.id(a(this).data("select2-data")));
      });
      this.setVal(R);
      this.triggerChange();
    },
    data: function (U, T) {
      var S = this,
        Q,
        R;
      if (arguments.length === 0) {
        return this.selection
          .children(".select2-search-choice")
          .map(function () {
            return a(this).data("select2-data");
          })
          .get();
      } else {
        R = this.data();
        if (!U) {
          U = [];
        }
        Q = a.map(U, function (V) {
          return S.opts.id(V);
        });
        this.setVal(Q);
        this.updateSelection(U);
        this.clearSearch();
        if (T) {
          this.triggerChange(this.buildChangeDetails(R, this.data()));
        }
      }
    },
  });
  a.fn.select2 = function () {
    var R = Array.prototype.slice.call(arguments, 0),
      V,
      X,
      S,
      Y,
      U,
      Q = [
        "val",
        "destroy",
        "opened",
        "open",
        "close",
        "focus",
        "isFocused",
        "container",
        "dropdown",
        "onSortStart",
        "onSortEnd",
        "enable",
        "disable",
        "readonly",
        "positionDropdown",
        "data",
        "search",
      ],
      Z = ["opened", "isFocused", "container", "dropdown"],
      W = ["val", "data"],
      T = { search: "externalSearch" };
    this.each(function () {
      if (R.length === 0 || typeof R[0] === "object") {
        V = R.length === 0 ? {} : a.extend({}, R[0]);
        V.element = a(this);
        if (V.element.get(0).tagName.toLowerCase() === "select") {
          U = V.element.prop("multiple");
        } else {
          U = V.multiple || false;
          if ("tags" in V) {
            V.multiple = U = true;
          }
        }
        X = U
          ? new window.Select2["class"].multi()
          : new window.Select2["class"].single();
        X.init(V);
      } else {
        if (typeof R[0] === "string") {
          if (s(R[0], Q) < 0) {
            throw "Unknown method: " + R[0];
          }
          Y = P;
          X = a(this).data("select2");
          if (X === P) {
            return;
          }
          S = R[0];
          if (S === "container") {
            Y = X.container;
          } else {
            if (S === "dropdown") {
              Y = X.dropdown;
            } else {
              if (T[S]) {
                S = T[S];
              }
              Y = X[S].apply(X, R.slice(1));
            }
          }
          if (s(R[0], Z) >= 0 || (s(R[0], W) >= 0 && R.length == 1)) {
            return false;
          }
        } else {
          throw "Invalid arguments to select2 plugin: " + R;
        }
      }
    });
    return Y === P ? this : Y;
  };
  a.fn.select2.defaults = {
    width: "copy",
    loadMorePadding: 0,
    closeOnSelect: true,
    openOnEnter: true,
    containerCss: {},
    dropdownCss: {},
    containerCssClass: "",
    dropdownCssClass: "",
    formatResult: function (U, Q, T, R) {
      var S = [];
      B(U.text, T.term, S, R);
      return S.join("");
    },
    formatSelection: function (R, Q, S) {
      return R ? S(R.text) : P;
    },
    sortResults: function (S, Q, R) {
      return S;
    },
    formatResultCssClass: function (Q) {
      return Q.css;
    },
    formatSelectionCssClass: function (R, Q) {
      return P;
    },
    minimumResultsForSearch: 0,
    minimumInputLength: 0,
    maximumInputLength: null,
    maximumSelectionSize: 0,
    id: function (Q) {
      return Q == P ? null : Q.id;
    },
    matcher: function (Q, R) {
      return (
        M("" + R)
          .toUpperCase()
          .indexOf(M("" + Q).toUpperCase()) >= 0
      );
    },
    separator: ",",
    tokenSeparators: [],
    tokenizer: l,
    escapeMarkup: k,
    blurOnChange: false,
    selectOnBlur: false,
    adaptContainerCssClass: function (Q) {
      return Q;
    },
    adaptDropdownCssClass: function (Q) {
      return null;
    },
    nextSearchTerm: function (R, Q) {
      return P;
    },
    searchInputPlaceholder: "",
    createSearchChoicePosition: "top",
    shouldFocusInput: function (Q) {
      var R = "ontouchstart" in window || navigator.msMaxTouchPoints > 0;
      if (!R) {
        return true;
      }
      if (Q.opts.minimumResultsForSearch < 0) {
        return false;
      }
      return true;
    },
  };
  a.fn.select2.locales = [];
  a.fn.select2.locales.en = {
    formatMatches: function (Q) {
      if (Q === 1) {
        return "One result is available, press enter to select it.";
      }
      return (
        Q + " results are available, use up and down arrow keys to navigate."
      );
    },
    formatNoMatches: function () {
      return IAS.L("No matches found");
    },
    formatAjaxError: function (R, S, Q) {
      return "Loading failed";
    },
    formatInputTooShort: function (Q, R) {
      var S = R - Q.length;
      return "Please enter " + S + " or more character" + (S == 1 ? "" : "s");
    },
    formatInputTooLong: function (Q, R) {
      var S = Q.length - R;
      return "Please delete " + S + " character" + (S == 1 ? "" : "s");
    },
    formatSelectionTooBig: function (Q) {
      return "You can only select " + Q + " item" + (Q == 1 ? "" : "s");
    },
    formatLoadMore: function (Q) {
      return "Loading more resultsâ¦";
    },
    formatSearching: function () {
      return "Searchingâ¦";
    },
  };
  a.extend(a.fn.select2.defaults, a.fn.select2.locales.en);
  a.fn.select2.ajaxDefaults = {
    transport: a.ajax,
    params: { type: "GET", cache: false, dataType: "json" },
  };
  window.Select2 = {
    query: { ajax: d, local: A, tags: O },
    util: { debounce: j, markMatch: B, escapeMarkup: k, stripDiacritics: M },
    class: { abstract: c, single: J, multi: F },
  };
})(jQuery);
$.fn.iasTooltip = function (e, a, b) {
  var d = $("#tooltipdiv");
  var c = d.find(".tooltip-arrow");
  if (d.length == 0) {
    d = $('<div id="tooltipdiv" class="header-ui-tooltip">').appendTo(
      $("body")
    );
    c = $('<b class="tooltip-arrow tooltip-arrow-up">').appendTo(d);
    d.append('<span id="tooltiptext"></span>');
  }
  return this.each(function (j, f) {
    var g = $(f);
    var n = IAS.L(e ? e : g.attr("data-tooltip"));
    g.attr("data-tooltip", n);
    g.unbind("mouseenter.tooltip").unbind("mouseleave.tooltip");
    if (n) {
      g.removeAttr("title");
      var m = null;
      var h = null;
      var k = function (p) {
        var o = a || "#2E5C8A";
        $("#tooltiptext").empty().html(n);
        var r = f.getBoundingClientRect();
        var v = d.outerWidth();
        var q = window.scrollX || document.documentElement.scrollLeft;
        var w = window.scrollY || document.documentElement.scrollTop;
        var u = r.top + r.height + 12 + w;
        var t = r.left + (r.width - v) / 2 + q;
        if (screen.availWidth < t + v + 20) {
          t = screen.availWidth - v - 30;
        }
        if (t < 0) {
          t = 0;
        }
        if (screen.availHeight < u + d.outerHeight() + 42 - w) {
          u -= d.outerHeight() + 42;
          c.addClass("tooltip-arrow-down").removeClass("tooltip-arrow-up");
        } else {
          c.removeClass("tooltip-arrow-down").addClass("tooltip-arrow-up");
        }
        d.css({ top: u, left: t, "background-color": o });
        var s = r.left - t + r.width / 2 - c.innerWidth() * Math.sqrt(2) + q;
        c.css({ "margin-left": s, "margin-right": s });
        m = setTimeout(function () {
          d.addClass("tooltip-active");
          if (!b) {
            h = setTimeout(function () {
              d.removeClass("tooltip-active");
            }, 10000);
          }
        }, 300);
      };
      var l = function () {
        clearTimeout(m);
        d.removeClass("tooltip-active");
        clearTimeout(h);
      };
      g.bind("mouseenter.tooltip", k).bind("mouseleave.tooltip", l);
    }
  });
};
IAS.tabs = {
  _tabsDef: null,
  _tabDivs: null,
  _titlesUl: null,
  _defaultOptions: { showPreviousNextButtons: false },
  createTabs: function (c, b) {
    this._tabsDef = c;
    this._tabDivs = [];
    this._titlesUl = $("<ul>");
    this._createTabsFromDefinition();
    var a = this._prepareTabsContainer();
    this._prepareUserOptions(b);
    this._appendControlButtons(a);
    return a;
  },
  _createTitle: function (b, a) {
    var e = $("<li>");
    if (this._defaultOptions.titleCssClass) {
      e.addClass(this._defaultOptions.titleCssClass);
    }
    var d = String.format("<a href=#{0}>{1}</a>", a, b);
    var c = $(d);
    e.append(c);
    this._titlesUl.append(e);
  },
  _createTabContainer: function (c, d) {
    var b = String.format("<div id={0}>", d);
    var a = $(b).append(c);
    this._tabDivs.push(a);
  },
  _createTabsFromDefinition: function () {
    var d = this._tabsDef;
    var c;
    for (var a = 0, b = d.length; a < b; a++) {
      var e = d[a];
      c = "title_" + a + "_" + this._getRandomNumber();
      this._createTitle(e.title, c);
      this._createTabContainer(e.content, c);
    }
  },
  _prepareTabsContainer: function () {
    var a = $.createDiv()
      .append(this._titlesUl)
      .append(this._tabDivs)
      .addClass("main-tabs-div");
    a.tabs();
    return a;
  },
  _getRandomNumber: function () {
    var a = Math.random() * 10000;
    return Math.floor(a) + 1;
  },
  _prepareUserOptions: function (c) {
    if (c && c instanceof Object) {
      var a = this._defaultOptions;
      for (var b in c) {
        if (a.hasOwnProperty(b)) {
          a[b] = c[b];
        }
      }
    }
  },
  _appendControlButtons: function (b) {
    if (this._defaultOptions.showPreviousNextButtons) {
      var d = b.find(".ui-tabs-panel").length;
      var a = function (e, f) {
        return $("<button class='nonPopupButton'>")
          .attr("href", "#tabs")
          .attr("rel", e)
          .addClass("tab-nav")
          .append(f);
      };
      b.find(".ui-tabs-panel").each(function (f) {
        var e = $.createDiv(null, "tabsControlButtonsContainer");
        if (f + 1 < d) {
          e.append(a(f + 1, "Next"));
        }
        if (f != 0) {
          e.append(a(f - 1, "Back"));
        }
        $(this).append(e);
      });
      b.find(".tab-nav").click(function () {
        b.tabs("option", "active", $(this).attr("rel"));
      });
    }
    var c = this._defaultOptions.optionalButtons;
    if (c && c instanceof Array) {
    }
  },
};
(function (ad) {
  function ah() {
    return {
      empty: !1,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: !1,
      invalidMonth: null,
      invalidFormat: !1,
      userInvalidated: !1,
      iso: !1,
    };
  }
  function al(c, d) {
    return function (a) {
      return aS(c.call(this, a), d);
    };
  }
  function ap(c, d) {
    return function (a) {
      return this.lang().ordinal(c.call(this, a), d);
    };
  }
  function au() {}
  function ay(b) {
    bF(b), aG(this, b);
  }
  function aC(k) {
    var l = bh(k),
      m = l.year || 0,
      n = l.month || 0,
      o = l.week || 0,
      p = l.day || 0,
      q = l.hour || 0,
      r = l.minute || 0,
      s = l.second || 0,
      t = l.millisecond || 0;
    (this._milliseconds = +t + 1000 * s + 60000 * r + 3600000 * q),
      (this._days = +p + 7 * o),
      (this._months = +n + 12 * m),
      (this._data = {}),
      this._bubble();
  }
  function aG(d, e) {
    for (var f in e) {
      e.hasOwnProperty(f) && (d[f] = e[f]);
    }
    return (
      e.hasOwnProperty("toString") && (d.toString = e.toString),
      e.hasOwnProperty("valueOf") && (d.valueOf = e.valueOf),
      d
    );
  }
  function aK(d) {
    var e,
      f = {};
    for (e in d) {
      d.hasOwnProperty(e) && bj.hasOwnProperty(e) && (f[e] = d[e]);
    }
    return f;
  }
  function aO(b) {
    return 0 > b ? Math.ceil(b) : Math.floor(b);
  }
  function aS(f, g, h) {
    for (var j = "" + Math.abs(f), k = f >= 0; j.length < g; ) {
      j = "0" + j;
    }
    return (k ? (h ? "+" : "") : "-") + j;
  }
  function aW(j, k, l, m) {
    var n,
      o,
      p = k._milliseconds,
      q = k._days,
      r = k._months;
    p && j._d.setTime(+j._d + p * l),
      (q || r) && ((n = j.minute()), (o = j.hour())),
      q && j.date(j.date() + q * l),
      r && j.month(j.month() + r * l),
      p && !m && ar.updateOffset(j),
      (q || r) && (j.minute(n), j.hour(o));
  }
  function a0(b) {
    return "[object Array]" === Object.prototype.toString.call(b);
  }
  function a4(b) {
    return (
      "[object Date]" === Object.prototype.toString.call(b) || b instanceof Date
    );
  }
  function a8(h, j, k) {
    var l,
      m = Math.min(h.length, j.length),
      n = Math.abs(h.length - j.length),
      o = 0;
    for (l = 0; m > l; l++) {
      ((k && h[l] !== j[l]) || (!k && bp(h[l]) !== bp(j[l]))) && o++;
    }
    return o + n;
  }
  function bd(c) {
    if (c) {
      var d = c.toLowerCase().replace(/(.)s$/, "$1");
      c = bw[c] || bA[d] || d;
    }
    return c;
  }
  function bh(e) {
    var f,
      g,
      h = {};
    for (g in e) {
      e.hasOwnProperty(g) && ((f = bd(g)), f && (h[f] = e[g]));
    }
    return h;
  }
  function bl(a) {
    var e, f;
    if (0 === a.indexOf("week")) {
      (e = 7), (f = "day");
    } else {
      if (0 !== a.indexOf("month")) {
        return;
      }
      (e = 12), (f = "month");
    }
    ar[a] = function (b, c) {
      var d,
        k,
        l = ar.fn._lang[a],
        m = [];
      if (
        ("number" == typeof b && ((c = b), (b = ad)),
        (k = function (g) {
          var h = ar().utc().set(f, g);
          return l.call(ar.fn._lang, h, b || "");
        }),
        null != c)
      ) {
        return k(c);
      }
      for (d = 0; e > d; d++) {
        m.push(k(d));
      }
      return m;
    };
  }
  function bp(d) {
    var e = +d,
      f = 0;
    return (
      0 !== e && isFinite(e) && (f = e >= 0 ? Math.floor(e) : Math.ceil(e)), f
    );
  }
  function bt(c, d) {
    return new Date(Date.UTC(c, d + 1, 0)).getUTCDate();
  }
  function bx(b) {
    return bB(b) ? 366 : 365;
  }
  function bB(b) {
    return (b % 4 === 0 && b % 100 !== 0) || b % 400 === 0;
  }
  function bF(c) {
    var d;
    c._a &&
      -2 === c._pf.overflow &&
      ((d =
        c._a[aQ] < 0 || c._a[aQ] > 11
          ? aQ
          : c._a[aU] < 1 || c._a[aU] > bt(c._a[aM], c._a[aQ])
          ? aU
          : c._a[aY] < 0 || c._a[aY] > 23
          ? aY
          : c._a[a2] < 0 || c._a[a2] > 59
          ? a2
          : c._a[a6] < 0 || c._a[a6] > 59
          ? a6
          : c._a[ba] < 0 || c._a[ba] > 999
          ? ba
          : -1),
      c._pf._overflowDayOfYear && (aM > d || d > aU) && (d = aU),
      (c._pf.overflow = d));
  }
  function bJ(b) {
    return (
      null == b._isValid &&
        ((b._isValid =
          !isNaN(b._d.getTime()) &&
          b._pf.overflow < 0 &&
          !b._pf.empty &&
          !b._pf.invalidMonth &&
          !b._pf.nullInput &&
          !b._pf.invalidFormat &&
          !b._pf.userInvalidated),
        b._strict &&
          (b._isValid =
            b._isValid &&
            0 === b._pf.charsLeftOver &&
            0 === b._pf.unusedTokens.length)),
      b._isValid
    );
  }
  function bN(b) {
    return b ? b.toLowerCase().replace("_", "-") : b;
  }
  function bR(c, d) {
    return d._isUTC ? ar(c).zone(d._offset || 0) : ar(c).local();
  }
  function ae(c, d) {
    return (d.abbr = c), bf[c] || (bf[c] = new au()), bf[c].set(d), bf[c];
  }
  function ai(b) {
    delete bf[b];
  }
  function am(h) {
    var j,
      k,
      l,
      m,
      n = 0,
      o = function (c) {
        if (!bf[c] && bn) {
          try {
            require("./lang/" + c);
          } catch (d) {}
        }
        return bf[c];
      };
    if (!h) {
      return ar.fn._lang;
    }
    if (!a0(h)) {
      if ((k = o(h))) {
        return k;
      }
      h = [h];
    }
    for (; n < h.length; ) {
      for (
        m = bN(h[n]).split("-"),
          j = m.length,
          l = bN(h[n + 1]),
          l = l ? l.split("-") : null;
        j > 0;

      ) {
        if ((k = o(m.slice(0, j).join("-")))) {
          return k;
        }
        if (l && l.length >= j && a8(m, l, !0) >= j - 1) {
          break;
        }
        j--;
      }
      n++;
    }
    return ar.fn._lang;
  }
  function aq(b) {
    return b.match(/\[[\s\S]/)
      ? b.replace(/^\[|\]$/g, "")
      : b.replace(/\\/g, "");
  }
  function av(e) {
    var f,
      g,
      h = e.match(bD);
    for (f = 0, g = h.length; g > f; f++) {
      h[f] = bQ[h[f]] ? bQ[h[f]] : aq(h[f]);
    }
    return function (a) {
      var b = "";
      for (f = 0; g > f; f++) {
        b += h[f] instanceof Function ? h[f].call(a, e) : h[f];
      }
      return b;
    };
  }
  function az(c, d) {
    return c.isValid()
      ? ((d = aD(d, c.lang())), bE[d] || (bE[d] = av(d)), bE[d](c))
      : c.lang().invalidDate();
  }
  function aD(e, f) {
    function g(b) {
      return f.longDateFormat(b) || b;
    }
    var h = 5;
    for (bH.lastIndex = 0; h >= 0 && bH.test(e); ) {
      (e = e.replace(bH, g)), (bH.lastIndex = 0), (h -= 1);
    }
    return e;
  }
  function aH(e, f) {
    var g,
      h = f._strict;
    switch (e) {
      case "DDDD":
        return aN;
      case "YYYY":
      case "GGGG":
      case "gggg":
        return h ? aR : bT;
      case "Y":
      case "G":
      case "g":
        return aZ;
      case "YYYYYY":
      case "YYYYY":
      case "GGGGG":
      case "ggggg":
        return h ? aV : ag;
      case "S":
        if (h) {
          return aF;
        }
      case "SS":
        if (h) {
          return aJ;
        }
      case "SSS":
        if (h) {
          return aN;
        }
      case "DDD":
        return bP;
      case "MMM":
      case "MMMM":
      case "dd":
      case "ddd":
      case "dddd":
        return ao;
      case "a":
      case "A":
        return am(f._l)._meridiemParse;
      case "X":
        return aB;
      case "Z":
      case "ZZ":
        return at;
      case "T":
        return ax;
      case "SSSS":
        return ak;
      case "MM":
      case "DD":
      case "YY":
      case "GG":
      case "gg":
      case "HH":
      case "hh":
      case "mm":
      case "ss":
      case "ww":
      case "WW":
        return h ? aJ : bL;
      case "M":
      case "D":
      case "d":
      case "H":
      case "h":
      case "m":
      case "s":
      case "w":
      case "W":
      case "e":
      case "E":
        return bL;
      default:
        return (g = new RegExp(be(a9(e.replace("\\", "")), "i")));
    }
  }
  function aL(f) {
    f = f || "";
    var g = f.match(at) || [],
      h = g[g.length - 1] || [],
      j = (h + "").match(bk) || ["-", 0, 0],
      k = +(60 * j[1]) + bp(j[2]);
    return "+" === j[0] ? -k : k;
  }
  function aP(f, g, h) {
    var j,
      k = h._a;
    switch (f) {
      case "M":
      case "MM":
        null != g && (k[aQ] = bp(g) - 1);
        break;
      case "MMM":
      case "MMMM":
        (j = am(h._l).monthsParse(g)),
          null != j ? (k[aQ] = j) : (h._pf.invalidMonth = g);
        break;
      case "D":
      case "DD":
        null != g && (k[aU] = bp(g));
        break;
      case "DDD":
      case "DDDD":
        null != g && (h._dayOfYear = bp(g));
        break;
      case "YY":
        k[aM] = bp(g) + (bp(g) > 68 ? 1900 : 2000);
        break;
      case "YYYY":
      case "YYYYY":
      case "YYYYYY":
        k[aM] = bp(g);
        break;
      case "a":
      case "A":
        h._isPm = am(h._l).isPM(g);
        break;
      case "H":
      case "HH":
      case "h":
      case "hh":
        k[aY] = bp(g);
        break;
      case "m":
      case "mm":
        k[a2] = bp(g);
        break;
      case "s":
      case "ss":
        k[a6] = bp(g);
        break;
      case "S":
      case "SS":
      case "SSS":
      case "SSSS":
        k[ba] = bp(1000 * ("0." + g));
        break;
      case "X":
        h._d = new Date(1000 * parseFloat(g));
        break;
      case "Z":
      case "ZZ":
        (h._useUTC = !0), (h._tzm = aL(g));
        break;
      case "w":
      case "ww":
      case "W":
      case "WW":
      case "d":
      case "dd":
      case "ddd":
      case "dddd":
      case "e":
      case "E":
        f = f.substr(0, 1);
      case "gg":
      case "gggg":
      case "GG":
      case "GGGG":
      case "GGGGG":
        (f = f.substr(0, 2)), g && ((h._w = h._w || {}), (h._w[f] = g));
    }
  }
  function aT(m) {
    var n,
      o,
      p,
      q,
      r,
      s,
      t,
      u,
      v,
      w,
      x = [];
    if (!m._d) {
      for (
        p = a1(m),
          m._w &&
            null == m._a[aU] &&
            null == m._a[aQ] &&
            ((r = function (a) {
              var d = parseInt(a, 10);
              return a
                ? a.length < 3
                  ? d > 68
                    ? 1900 + d
                    : 2000 + d
                  : d
                : null == m._a[aM]
                ? ar().weekYear()
                : m._a[aM];
            }),
            (s = m._w),
            null != s.GG || null != s.W || null != s.E
              ? (t = bS(r(s.GG), s.W || 1, s.E, 4, 1))
              : ((u = am(m._l)),
                (v =
                  null != s.d
                    ? bC(s.d, u)
                    : null != s.e
                    ? parseInt(s.e, 10) + u._week.dow
                    : 0),
                (w = parseInt(s.w, 10) || 1),
                null != s.d && v < u._week.dow && w++,
                (t = bS(r(s.gg), w, v, u._week.doy, u._week.dow))),
            (m._a[aM] = t.year),
            (m._dayOfYear = t.dayOfYear)),
          m._dayOfYear &&
            ((q = null == m._a[aM] ? p[aM] : m._a[aM]),
            m._dayOfYear > bx(q) && (m._pf._overflowDayOfYear = !0),
            (o = by(q, 0, m._dayOfYear)),
            (m._a[aQ] = o.getUTCMonth()),
            (m._a[aU] = o.getUTCDate())),
          n = 0;
        3 > n && null == m._a[n];
        ++n
      ) {
        m._a[n] = x[n] = p[n];
      }
      for (; 7 > n; n++) {
        m._a[n] = x[n] = null == m._a[n] ? (2 === n ? 1 : 0) : m._a[n];
      }
      (x[aY] += bp((m._tzm || 0) / 60)),
        (x[a2] += bp((m._tzm || 0) % 60)),
        (m._d = (m._useUTC ? by : bu).apply(null, x));
    }
  }
  function aX(c) {
    var d;
    c._d ||
      ((d = bh(c._i)),
      (c._a = [
        d.year,
        d.month,
        d.day,
        d.hour,
        d.minute,
        d.second,
        d.millisecond,
      ]),
      aT(c));
  }
  function a1(c) {
    var d = new Date();
    return c._useUTC
      ? [d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate()]
      : [d.getFullYear(), d.getMonth(), d.getDate()];
  }
  function a5(k) {
    (k._a = []), (k._pf.empty = !0);
    var l,
      m,
      n,
      o,
      p,
      q = am(k._l),
      r = "" + k._i,
      s = r.length,
      t = 0;
    for (n = aD(k._f, q).match(bD) || [], l = 0; l < n.length; l++) {
      (o = n[l]),
        (m = (r.match(aH(o, k)) || [])[0]),
        m &&
          ((p = r.substr(0, r.indexOf(m))),
          p.length > 0 && k._pf.unusedInput.push(p),
          (r = r.slice(r.indexOf(m) + m.length)),
          (t += m.length)),
        bQ[o]
          ? (m ? (k._pf.empty = !1) : k._pf.unusedTokens.push(o), aP(o, m, k))
          : k._strict && !m && k._pf.unusedTokens.push(o);
    }
    (k._pf.charsLeftOver = s - t),
      r.length > 0 && k._pf.unusedInput.push(r),
      k._isPm && k._a[aY] < 12 && (k._a[aY] += 12),
      k._isPm === !1 && 12 === k._a[aY] && (k._a[aY] = 0),
      aT(k),
      bF(k);
  }
  function a9(b) {
    return b.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
      f,
      g,
      h,
      j,
      k
    ) {
      return g || h || j || k;
    });
  }
  function be(b) {
    return b.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
  }
  function bi(b) {
    var h, j, k, l, m;
    if (0 === b._f.length) {
      return (b._pf.invalidFormat = !0), (b._d = new Date(0 / 0)), void 0;
    }
    for (l = 0; l < b._f.length; l++) {
      (m = 0),
        (h = aG({}, b)),
        (h._pf = ah()),
        (h._f = b._f[l]),
        a5(h),
        bJ(h) &&
          ((m += h._pf.charsLeftOver),
          (m += 10 * h._pf.unusedTokens.length),
          (h._pf.score = m),
          (null == k || k > m) && ((k = m), (j = h)));
    }
    aG(b, j || h);
  }
  function bm(f) {
    var g,
      h,
      j = f._i,
      k = a3.exec(j);
    if (k) {
      for (f._pf.iso = !0, g = 0, h = bc.length; h > g; g++) {
        if (bc[g][1].exec(j)) {
          f._f = bc[g][0] + (k[6] || " ");
          break;
        }
      }
      for (g = 0, h = bg.length; h > g; g++) {
        if (bg[g][1].exec(j)) {
          f._f += bg[g][0];
          break;
        }
      }
      j.match(at) && (f._f += "Z"), a5(f);
    } else {
      f._d = new Date(j);
    }
  }
  function bq(a) {
    var e = a._i,
      f = br.exec(e);
    e === ad
      ? (a._d = new Date())
      : f
      ? (a._d = new Date(+f[1]))
      : "string" == typeof e
      ? bm(a)
      : a0(e)
      ? ((a._a = e.slice(0)), aT(a))
      : a4(e)
      ? (a._d = new Date(+e))
      : "object" == typeof e
      ? aX(a)
      : (a._d = new Date(e));
  }
  function bu(j, k, l, m, n, o, p) {
    var q = new Date(j, k, l, m, n, o, p);
    return 1970 > j && q.setFullYear(j), q;
  }
  function by(c) {
    var d = new Date(Date.UTC.apply(null, arguments));
    return 1970 > c && d.setUTCFullYear(c), d;
  }
  function bC(c, d) {
    if ("string" == typeof c) {
      if (isNaN(c)) {
        if (((c = d.weekdaysParse(c)), "number" != typeof c)) {
          return null;
        }
      } else {
        c = parseInt(c, 10);
      }
    }
    return c;
  }
  function bG(f, g, h, j, k) {
    return k.relativeTime(g || 1, !!h, f, j);
  }
  function bK(j, k, l) {
    var m = aI(Math.abs(j) / 1000),
      n = aI(m / 60),
      o = aI(n / 60),
      p = aI(o / 24),
      q = aI(p / 365),
      r = (45 > m && ["s", m]) ||
        (1 === n && ["m"]) ||
        (45 > n && ["mm", n]) ||
        (1 === o && ["h"]) ||
        (22 > o && ["hh", o]) ||
        (1 === p && ["d"]) ||
        (25 >= p && ["dd", p]) ||
        (45 >= p && ["M"]) ||
        (345 > p && ["MM", aI(p / 30)]) ||
        (1 === q && ["y"]) || ["yy", q];
    return (r[2] = k), (r[3] = j > 0), (r[4] = l), bG.apply({}, r);
  }
  function bO(g, h, j) {
    var k,
      l = j - h,
      m = j - g.day();
    return (
      m > l && (m -= 7),
      l - 7 > m && (m += 7),
      (k = ar(g).add("d", m)),
      { week: Math.ceil(k.dayOfYear() / 7), year: k.year() }
    );
  }
  function bS(j, k, l, m, n) {
    var o,
      p,
      q = by(j, 0, 1).getUTCDay();
    return (
      (l = null != l ? l : n),
      (o = n - q + (q > m ? 7 : 0) - (n > q ? 7 : 0)),
      (p = 7 * (k - 1) + (l - n) + o + 1),
      { year: p > 0 ? j : j - 1, dayOfYear: p > 0 ? p : bx(j - 1) + p }
    );
  }
  function aa(d) {
    var e = d._i,
      f = d._f;
    return null === e
      ? ar.invalid({ nullInput: !0 })
      : ("string" == typeof e && (d._i = e = am().preparse(e)),
        ar.isMoment(e)
          ? ((d = aK(e)), (d._d = new Date(+e._d)))
          : f
          ? a0(f)
            ? bi(d)
            : a5(d)
          : bq(d),
        new ay(d));
  }
  function ac(c, d) {
    ar.fn[c] = ar.fn[c + "s"] = function (b) {
      var e = this._isUTC ? "UTC" : "";
      return null != b
        ? (this._d["set" + e + d](b), ar.updateOffset(this), this)
        : this._d["get" + e + d]();
    };
  }
  function af(b) {
    ar.duration.fn[b] = function () {
      return this._data[b];
    };
  }
  function aj(c, d) {
    ar.duration.fn["as" + c] = function () {
      return +this / d;
    };
  }
  function an(d) {
    var e = !1,
      f = ar;
    "undefined" == typeof ender &&
      (d
        ? ((aE.moment = function () {
            return (
              !e &&
                console &&
                console.warn &&
                ((e = !0),
                console.warn(
                  "Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release."
                )),
              f.apply(null, arguments)
            );
          }),
          aG(aE.moment, f))
        : (aE.moment = ar));
  }
  for (
    var ar,
      aw,
      aA = "2.5.1",
      aE = this,
      aI = Math.round,
      aM = 0,
      aQ = 1,
      aU = 2,
      aY = 3,
      a2 = 4,
      a6 = 5,
      ba = 6,
      bf = {},
      bj = {
        _isAMomentObject: null,
        _i: null,
        _f: null,
        _l: null,
        _strict: null,
        _isUTC: null,
        _offset: null,
        _pf: null,
        _lang: null,
      },
      bn =
        "undefined" != typeof module &&
        module.exports &&
        "undefined" != typeof require,
      br = /^\/?Date\((\-?\d+)/i,
      bv = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,
      bz = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,
      bD = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
      bH = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,
      bL = /\d\d?/,
      bP = /\d{1,3}/,
      bT = /\d{1,4}/,
      ag = /[+\-]?\d{1,6}/,
      ak = /\d+/,
      ao = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
      at = /Z|[\+\-]\d\d:?\d\d/gi,
      ax = /T/i,
      aB = /[\+\-]?\d+(\.\d{1,3})?/,
      aF = /\d/,
      aJ = /\d\d/,
      aN = /\d{3}/,
      aR = /\d{4}/,
      aV = /[+-]?\d{6}/,
      aZ = /[+-]?\d+/,
      a3 = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      a7 = "YYYY-MM-DDTHH:mm:ssZ",
      bc = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/],
        ["YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/],
        ["GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d{2}/],
        ["YYYY-DDD", /\d{4}-\d{3}/],
      ],
      bg = [
        ["HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d{1,3}/],
        ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/],
        ["HH:mm", /(T| )\d\d:\d\d/],
        ["HH", /(T| )\d\d/],
      ],
      bk = /([\+\-]|\d\d)/gi,
      bo = "Date|Hours|Minutes|Seconds|Milliseconds".split("|"),
      bs = {
        Milliseconds: 1,
        Seconds: 1000,
        Minutes: 60000,
        Hours: 3600000,
        Days: 86400000,
        Months: 2592000000,
        Years: 31536000000,
      },
      bw = {
        ms: "millisecond",
        s: "second",
        m: "minute",
        h: "hour",
        d: "day",
        D: "date",
        w: "week",
        W: "isoWeek",
        M: "month",
        y: "year",
        DDD: "dayOfYear",
        e: "weekday",
        E: "isoWeekday",
        gg: "weekYear",
        GG: "isoWeekYear",
      },
      bA = {
        dayofyear: "dayOfYear",
        isoweekday: "isoWeekday",
        isoweek: "isoWeek",
        weekyear: "weekYear",
        isoweekyear: "isoWeekYear",
      },
      bE = {},
      bI = "DDD w W M D d".split(" "),
      bM = "M D H h m s w W".split(" "),
      bQ = {
        M: function () {
          return this.month() + 1;
        },
        MMM: function (b) {
          return this.lang().monthsShort(this, b);
        },
        MMMM: function (b) {
          return this.lang().months(this, b);
        },
        D: function () {
          return this.date();
        },
        DDD: function () {
          return this.dayOfYear();
        },
        d: function () {
          return this.day();
        },
        dd: function (b) {
          return this.lang().weekdaysMin(this, b);
        },
        ddd: function (b) {
          return this.lang().weekdaysShort(this, b);
        },
        dddd: function (b) {
          return this.lang().weekdays(this, b);
        },
        w: function () {
          return this.week();
        },
        W: function () {
          return this.isoWeek();
        },
        YY: function () {
          return aS(this.year() % 100, 2);
        },
        YYYY: function () {
          return aS(this.year(), 4);
        },
        YYYYY: function () {
          return aS(this.year(), 5);
        },
        YYYYYY: function () {
          var c = this.year(),
            d = c >= 0 ? "+" : "-";
          return d + aS(Math.abs(c), 6);
        },
        gg: function () {
          return aS(this.weekYear() % 100, 2);
        },
        gggg: function () {
          return aS(this.weekYear(), 4);
        },
        ggggg: function () {
          return aS(this.weekYear(), 5);
        },
        GG: function () {
          return aS(this.isoWeekYear() % 100, 2);
        },
        GGGG: function () {
          return aS(this.isoWeekYear(), 4);
        },
        GGGGG: function () {
          return aS(this.isoWeekYear(), 5);
        },
        e: function () {
          return this.weekday();
        },
        E: function () {
          return this.isoWeekday();
        },
        a: function () {
          return this.lang().meridiem(this.hours(), this.minutes(), !0);
        },
        A: function () {
          return this.lang().meridiem(this.hours(), this.minutes(), !1);
        },
        H: function () {
          return this.hours();
        },
        h: function () {
          return this.hours() % 12 || 12;
        },
        m: function () {
          return this.minutes();
        },
        s: function () {
          return this.seconds();
        },
        S: function () {
          return bp(this.milliseconds() / 100);
        },
        SS: function () {
          return aS(bp(this.milliseconds() / 10), 2);
        },
        SSS: function () {
          return aS(this.milliseconds(), 3);
        },
        SSSS: function () {
          return aS(this.milliseconds(), 3);
        },
        Z: function () {
          var c = -this.zone(),
            d = "+";
          return (
            0 > c && ((c = -c), (d = "-")),
            d + aS(bp(c / 60), 2) + ":" + aS(bp(c) % 60, 2)
          );
        },
        ZZ: function () {
          var c = -this.zone(),
            d = "+";
          return (
            0 > c && ((c = -c), (d = "-")),
            d + aS(bp(c / 60), 2) + aS(bp(c) % 60, 2)
          );
        },
        z: function () {
          return this.zoneAbbr();
        },
        zz: function () {
          return this.zoneName();
        },
        X: function () {
          return this.unix();
        },
        Q: function () {
          return this.quarter();
        },
      },
      bU = [
        "months",
        "monthsShort",
        "weekdays",
        "weekdaysShort",
        "weekdaysMin",
      ];
    bI.length;

  ) {
    (aw = bI.pop()), (bQ[aw + "o"] = ap(bQ[aw], aw));
  }
  for (; bM.length; ) {
    (aw = bM.pop()), (bQ[aw + aw] = al(bQ[aw], 2));
  }
  for (
    bQ.DDDD = al(bQ.DDD, 3),
      aG(au.prototype, {
        set: function (d) {
          var e, f;
          for (f in d) {
            (e = d[f]),
              "function" == typeof e ? (this[f] = e) : (this["_" + f] = e);
          }
        },
        _months: "January_February_March_April_May_June_July_August_September_October_November_December".split(
          "_"
        ),
        months: function (b) {
          return this._months[b.month()];
        },
        _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split(
          "_"
        ),
        monthsShort: function (b) {
          return this._monthsShort[b.month()];
        },
        monthsParse: function (e) {
          var f, g, h;
          for (
            this._monthsParse || (this._monthsParse = []), f = 0;
            12 > f;
            f++
          ) {
            if (
              (this._monthsParse[f] ||
                ((g = ar.utc([2000, f])),
                (h = "^" + this.months(g, "") + "|^" + this.monthsShort(g, "")),
                (this._monthsParse[f] = new RegExp(h.replace(".", ""), "i"))),
              this._monthsParse[f].test(e))
            ) {
              return f;
            }
          }
        },
        _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split(
          "_"
        ),
        weekdays: function (b) {
          return this._weekdays[b.day()];
        },
        _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort: function (b) {
          return this._weekdaysShort[b.day()];
        },
        _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin: function (b) {
          return this._weekdaysMin[b.day()];
        },
        weekdaysParse: function (e) {
          var f, g, h;
          for (
            this._weekdaysParse || (this._weekdaysParse = []), f = 0;
            7 > f;
            f++
          ) {
            if (
              (this._weekdaysParse[f] ||
                ((g = ar([2000, 1]).day(f)),
                (h =
                  "^" +
                  this.weekdays(g, "") +
                  "|^" +
                  this.weekdaysShort(g, "") +
                  "|^" +
                  this.weekdaysMin(g, "")),
                (this._weekdaysParse[f] = new RegExp(h.replace(".", ""), "i"))),
              this._weekdaysParse[f].test(e))
            ) {
              return f;
            }
          }
        },
        _longDateFormat: {
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D YYYY",
          LLL: "MMMM D YYYY LT",
          LLLL: "dddd, MMMM D YYYY LT",
        },
        longDateFormat: function (c) {
          var d = this._longDateFormat[c];
          return (
            !d &&
              this._longDateFormat[c.toUpperCase()] &&
              ((d = this._longDateFormat[c.toUpperCase()].replace(
                /MMMM|MM|DD|dddd/g,
                function (b) {
                  return b.slice(1);
                }
              )),
              (this._longDateFormat[c] = d)),
            d
          );
        },
        isPM: function (b) {
          return "p" === (b + "").toLowerCase().charAt(0);
        },
        _meridiemParse: /[ap]\.?m?\.?/i,
        meridiem: function (d, e, f) {
          return d > 11 ? (f ? "pm" : "PM") : f ? "am" : "AM";
        },
        _calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L",
        },
        calendar: function (d, e) {
          var f = this._calendar[d];
          return "function" == typeof f ? f.apply(e) : f;
        },
        _relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years",
        },
        relativeTime: function (f, g, h, j) {
          var k = this._relativeTime[h];
          return "function" == typeof k ? k(f, g, h, j) : k.replace(/%d/i, f);
        },
        pastFuture: function (d, e) {
          var f = this._relativeTime[d > 0 ? "future" : "past"];
          return "function" == typeof f ? f(e) : f.replace(/%s/i, e);
        },
        ordinal: function (b) {
          return this._ordinal.replace("%d", b);
        },
        _ordinal: "%d",
        preparse: function (b) {
          return b;
        },
        postformat: function (b) {
          return b;
        },
        week: function (b) {
          return bO(b, this._week.dow, this._week.doy).week;
        },
        _week: { dow: 0, doy: 6 },
        _invalidDate: "Invalid date",
        invalidDate: function () {
          return this._invalidDate;
        },
      }),
      ar = function (a, b, h, j) {
        var k;
        return (
          "boolean" == typeof h && ((j = h), (h = ad)),
          (k = {}),
          (k._isAMomentObject = !0),
          (k._i = a),
          (k._f = b),
          (k._l = h),
          (k._strict = j),
          (k._isUTC = !1),
          (k._pf = ah()),
          aa(k)
        );
      },
      ar.utc = function (a, b, h, j) {
        var k;
        return (
          "boolean" == typeof h && ((j = h), (h = ad)),
          (k = {}),
          (k._isAMomentObject = !0),
          (k._useUTC = !0),
          (k._isUTC = !0),
          (k._l = h),
          (k._i = a),
          (k._f = b),
          (k._strict = j),
          (k._pf = ah()),
          aa(k).utc()
        );
      },
      ar.unix = function (b) {
        return ar(1000 * b);
      },
      ar.duration = function (g, j) {
        var k,
          l,
          m,
          n = g,
          o = null;
        return (
          ar.isDuration(g)
            ? (n = { ms: g._milliseconds, d: g._days, M: g._months })
            : "number" == typeof g
            ? ((n = {}), j ? (n[j] = g) : (n.milliseconds = g))
            : (o = bv.exec(g))
            ? ((k = "-" === o[1] ? -1 : 1),
              (n = {
                y: 0,
                d: bp(o[aU]) * k,
                h: bp(o[aY]) * k,
                m: bp(o[a2]) * k,
                s: bp(o[a6]) * k,
                ms: bp(o[ba]) * k,
              }))
            : (o = bz.exec(g)) &&
              ((k = "-" === o[1] ? -1 : 1),
              (m = function (c) {
                var d = c && parseFloat(c.replace(",", "."));
                return (isNaN(d) ? 0 : d) * k;
              }),
              (n = {
                y: m(o[2]),
                M: m(o[3]),
                d: m(o[4]),
                h: m(o[5]),
                m: m(o[6]),
                s: m(o[7]),
                w: m(o[8]),
              })),
          (l = new aC(n)),
          ar.isDuration(g) && g.hasOwnProperty("_lang") && (l._lang = g._lang),
          l
        );
      },
      ar.version = aA,
      ar.defaultFormat = a7,
      ar.updateOffset = function () {},
      ar.lang = function (d, e) {
        var f;
        return d
          ? (e
              ? ae(bN(d), e)
              : null === e
              ? (ai(d), (d = "en"))
              : bf[d] || am(d),
            (f = ar.duration.fn._lang = ar.fn._lang = am(d)),
            f._abbr)
          : ar.fn._lang._abbr;
      },
      ar.langData = function (b) {
        return b && b._lang && b._lang._abbr && (b = b._lang._abbr), am(b);
      },
      ar.isMoment = function (b) {
        return (
          b instanceof ay || (null != b && b.hasOwnProperty("_isAMomentObject"))
        );
      },
      ar.isDuration = function (b) {
        return b instanceof aC;
      },
      aw = bU.length - 1;
    aw >= 0;
    --aw
  ) {
    bl(bU[aw]);
  }
  for (
    ar.normalizeUnits = function (b) {
      return bd(b);
    },
      ar.invalid = function (c) {
        var d = ar.utc(0 / 0);
        return null != c ? aG(d._pf, c) : (d._pf.userInvalidated = !0), d;
      },
      ar.parseZone = function (b) {
        return ar(b).parseZone();
      },
      aG((ar.fn = ay.prototype), {
        clone: function () {
          return ar(this);
        },
        valueOf: function () {
          return +this._d + 60000 * (this._offset || 0);
        },
        unix: function () {
          return Math.floor(+this / 1000);
        },
        toString: function () {
          return this.clone()
            .lang("en")
            .format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },
        toDate: function () {
          return this._offset ? new Date(+this) : this._d;
        },
        toISOString: function () {
          var b = ar(this).utc();
          return 0 < b.year() && b.year() <= 9999
            ? az(b, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")
            : az(b, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
        },
        toArray: function () {
          var b = this;
          return [
            b.year(),
            b.month(),
            b.date(),
            b.hours(),
            b.minutes(),
            b.seconds(),
            b.milliseconds(),
          ];
        },
        isValid: function () {
          return bJ(this);
        },
        isDSTShifted: function () {
          return this._a
            ? this.isValid() &&
                a8(
                  this._a,
                  (this._isUTC ? ar.utc(this._a) : ar(this._a)).toArray()
                ) > 0
            : !1;
        },
        parsingFlags: function () {
          return aG({}, this._pf);
        },
        invalidAt: function () {
          return this._pf.overflow;
        },
        utc: function () {
          return this.zone(0);
        },
        local: function () {
          return this.zone(0), (this._isUTC = !1), this;
        },
        format: function (c) {
          var d = az(this, c || ar.defaultFormat);
          return this.lang().postformat(d);
        },
        add: function (d, e) {
          var f;
          return (
            (f = "string" == typeof d ? ar.duration(+e, d) : ar.duration(d, e)),
            aW(this, f, 1),
            this
          );
        },
        subtract: function (d, e) {
          var f;
          return (
            (f = "string" == typeof d ? ar.duration(+e, d) : ar.duration(d, e)),
            aW(this, f, -1),
            this
          );
        },
        diff: function (h, j, k) {
          var l,
            m,
            n = bR(h, this),
            o = 60000 * (this.zone() - n.zone());
          return (
            (j = bd(j)),
            "year" === j || "month" === j
              ? ((l = 43200000 * (this.daysInMonth() + n.daysInMonth())),
                (m =
                  12 * (this.year() - n.year()) + (this.month() - n.month())),
                (m +=
                  (this -
                    ar(this).startOf("month") -
                    (n - ar(n).startOf("month"))) /
                  l),
                (m -=
                  (60000 *
                    (this.zone() -
                      ar(this).startOf("month").zone() -
                      (n.zone() - ar(n).startOf("month").zone()))) /
                  l),
                "year" === j && (m /= 12))
              : ((l = this - n),
                (m =
                  "second" === j
                    ? l / 1000
                    : "minute" === j
                    ? l / 60000
                    : "hour" === j
                    ? l / 3600000
                    : "day" === j
                    ? (l - o) / 86400000
                    : "week" === j
                    ? (l - o) / 604800000
                    : l)),
            k ? m : aO(m)
          );
        },
        from: function (c, d) {
          return ar.duration(this.diff(c)).lang(this.lang()._abbr).humanize(!d);
        },
        fromNow: function (b) {
          return this.from(ar(), b);
        },
        calendar: function () {
          var d = bR(ar(), this).startOf("day"),
            e = this.diff(d, "days", !0),
            f =
              -6 > e
                ? "sameElse"
                : -1 > e
                ? "lastWeek"
                : 0 > e
                ? "lastDay"
                : 1 > e
                ? "sameDay"
                : 2 > e
                ? "nextDay"
                : 7 > e
                ? "nextWeek"
                : "sameElse";
          return this.format(this.lang().calendar(f, this));
        },
        isLeapYear: function () {
          return bB(this.year());
        },
        isDST: function () {
          return (
            this.zone() < this.clone().month(0).zone() ||
            this.zone() < this.clone().month(5).zone()
          );
        },
        day: function (c) {
          var d = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          return null != c
            ? ((c = bC(c, this.lang())), this.add({ d: c - d }))
            : d;
        },
        month: function (d) {
          var e,
            f = this._isUTC ? "UTC" : "";
          return null != d
            ? "string" == typeof d &&
              ((d = this.lang().monthsParse(d)), "number" != typeof d)
              ? this
              : ((e = this.date()),
                this.date(1),
                this._d["set" + f + "Month"](d),
                this.date(Math.min(e, this.daysInMonth())),
                ar.updateOffset(this),
                this)
            : this._d["get" + f + "Month"]();
        },
        startOf: function (b) {
          switch ((b = bd(b))) {
            case "year":
              this.month(0);
            case "month":
              this.date(1);
            case "week":
            case "isoWeek":
            case "day":
              this.hours(0);
            case "hour":
              this.minutes(0);
            case "minute":
              this.seconds(0);
            case "second":
              this.milliseconds(0);
          }
          return (
            "week" === b
              ? this.weekday(0)
              : "isoWeek" === b && this.isoWeekday(1),
            this
          );
        },
        endOf: function (b) {
          return (
            (b = bd(b)),
            this.startOf(b)
              .add("isoWeek" === b ? "week" : b, 1)
              .subtract("ms", 1)
          );
        },
        isAfter: function (c, d) {
          return (
            (d = "undefined" != typeof d ? d : "millisecond"),
            +this.clone().startOf(d) > +ar(c).startOf(d)
          );
        },
        isBefore: function (c, d) {
          return (
            (d = "undefined" != typeof d ? d : "millisecond"),
            +this.clone().startOf(d) < +ar(c).startOf(d)
          );
        },
        isSame: function (c, d) {
          return (
            (d = d || "ms"),
            +this.clone().startOf(d) === +bR(c, this).startOf(d)
          );
        },
        min: function (b) {
          return (b = ar.apply(null, arguments)), this > b ? this : b;
        },
        max: function (b) {
          return (b = ar.apply(null, arguments)), b > this ? this : b;
        },
        zone: function (c) {
          var d = this._offset || 0;
          return null == c
            ? this._isUTC
              ? d
              : this._d.getTimezoneOffset()
            : ("string" == typeof c && (c = aL(c)),
              Math.abs(c) < 16 && (c = 60 * c),
              (this._offset = c),
              (this._isUTC = !0),
              d !== c && aW(this, ar.duration(d - c, "m"), 1, !0),
              this);
        },
        zoneAbbr: function () {
          return this._isUTC ? "UTC" : "";
        },
        zoneName: function () {
          return this._isUTC ? "Coordinated Universal Time" : "";
        },
        parseZone: function () {
          return (
            this._tzm
              ? this.zone(this._tzm)
              : "string" == typeof this._i && this.zone(this._i),
            this
          );
        },
        hasAlignedHourOffset: function (b) {
          return (b = b ? ar(b).zone() : 0), (this.zone() - b) % 60 === 0;
        },
        daysInMonth: function () {
          return bt(this.year(), this.month());
        },
        dayOfYear: function (c) {
          var d =
            aI(
              (ar(this).startOf("day") - ar(this).startOf("year")) / 86400000
            ) + 1;
          return null == c ? d : this.add("d", c - d);
        },
        quarter: function () {
          return Math.ceil((this.month() + 1) / 3);
        },
        weekYear: function (c) {
          var d = bO(this, this.lang()._week.dow, this.lang()._week.doy).year;
          return null == c ? d : this.add("y", c - d);
        },
        isoWeekYear: function (c) {
          var d = bO(this, 1, 4).year;
          return null == c ? d : this.add("y", c - d);
        },
        week: function (c) {
          var d = this.lang().week(this);
          return null == c ? d : this.add("d", 7 * (c - d));
        },
        isoWeek: function (c) {
          var d = bO(this, 1, 4).week;
          return null == c ? d : this.add("d", 7 * (c - d));
        },
        weekday: function (c) {
          var d = (this.day() + 7 - this.lang()._week.dow) % 7;
          return null == c ? d : this.add("d", c - d);
        },
        isoWeekday: function (b) {
          return null == b
            ? this.day() || 7
            : this.day(this.day() % 7 ? b : b - 7);
        },
        get: function (b) {
          return (b = bd(b)), this[b]();
        },
        set: function (c, d) {
          return (c = bd(c)), "function" == typeof this[c] && this[c](d), this;
        },
        lang: function (a) {
          return a === ad ? this._lang : ((this._lang = am(a)), this);
        },
      }),
      aw = 0;
    aw < bo.length;
    aw++
  ) {
    ac(bo[aw].toLowerCase().replace(/s$/, ""), bo[aw]);
  }
  ac("year", "FullYear"),
    (ar.fn.days = ar.fn.day),
    (ar.fn.months = ar.fn.month),
    (ar.fn.weeks = ar.fn.week),
    (ar.fn.isoWeeks = ar.fn.isoWeek),
    (ar.fn.toJSON = ar.fn.toISOString),
    aG((ar.duration.fn = aC.prototype), {
      _bubble: function () {
        var j,
          k,
          l,
          m,
          n = this._milliseconds,
          o = this._days,
          p = this._months,
          q = this._data;
        (q.milliseconds = n % 1000),
          (j = aO(n / 1000)),
          (q.seconds = j % 60),
          (k = aO(j / 60)),
          (q.minutes = k % 60),
          (l = aO(k / 60)),
          (q.hours = l % 24),
          (o += aO(l / 24)),
          (q.days = o % 30),
          (p += aO(o / 30)),
          (q.months = p % 12),
          (m = aO(p / 12)),
          (q.years = m);
      },
      weeks: function () {
        return aO(this.days() / 7);
      },
      valueOf: function () {
        return (
          this._milliseconds +
          86400000 * this._days +
          (this._months % 12) * 2592000000 +
          31536000000 * bp(this._months / 12)
        );
      },
      humanize: function (d) {
        var e = +this,
          f = bK(e, !d, this.lang());
        return (
          d && (f = this.lang().pastFuture(e, f)), this.lang().postformat(f)
        );
      },
      add: function (d, e) {
        var f = ar.duration(d, e);
        return (
          (this._milliseconds += f._milliseconds),
          (this._days += f._days),
          (this._months += f._months),
          this._bubble(),
          this
        );
      },
      subtract: function (d, e) {
        var f = ar.duration(d, e);
        return (
          (this._milliseconds -= f._milliseconds),
          (this._days -= f._days),
          (this._months -= f._months),
          this._bubble(),
          this
        );
      },
      get: function (b) {
        return (b = bd(b)), this[b.toLowerCase() + "s"]();
      },
      as: function (b) {
        return (
          (b = bd(b)),
          this["as" + b.charAt(0).toUpperCase() + b.slice(1) + "s"]()
        );
      },
      lang: ar.fn.lang,
      toIsoString: function () {
        var g = Math.abs(this.years()),
          h = Math.abs(this.months()),
          j = Math.abs(this.days()),
          k = Math.abs(this.hours()),
          l = Math.abs(this.minutes()),
          m = Math.abs(this.seconds() + this.milliseconds() / 1000);
        return this.asSeconds()
          ? (this.asSeconds() < 0 ? "-" : "") +
              "P" +
              (g ? g + "Y" : "") +
              (h ? h + "M" : "") +
              (j ? j + "D" : "") +
              (k || l || m ? "T" : "") +
              (k ? k + "H" : "") +
              (l ? l + "M" : "") +
              (m ? m + "S" : "")
          : "P0D";
      },
    });
  for (aw in bs) {
    bs.hasOwnProperty(aw) && (aj(aw, bs[aw]), af(aw.toLowerCase()));
  }
  aj("Weeks", 604800000),
    (ar.duration.fn.asMonths = function () {
      return (
        (+this - 31536000000 * this.years()) / 2592000000 + 12 * this.years()
      );
    }),
    ar.lang("en", {
      ordinal: function (d) {
        var e = d % 10,
          f =
            1 === bp((d % 100) / 10)
              ? "th"
              : 1 === e
              ? "st"
              : 2 === e
              ? "nd"
              : 3 === e
              ? "rd"
              : "th";
        return d + f;
      },
    }),
    bn
      ? ((module.exports = ar), an(!0))
      : "function" == typeof define && define.amd
      ? define("moment", function (a, e, f) {
          return (
            f.config &&
              f.config() &&
              f.config().noGlobal !== !0 &&
              an(f.config().noGlobal === ad),
            ar
          );
        })
      : an();
}.call(this));
!(function (c, d) {
  "object" == typeof exports
    ? (module.exports = d())
    : "function" == typeof define && define.amd
    ? define(d)
    : (c.Spinner = d());
})(this, function () {
  function q(e, f) {
    var g,
      h = document.createElement(e || "div");
    for (g in f) {
      h[g] = f[g];
    }
    return h;
  }
  function r(d) {
    for (var e = 1, f = arguments.length; f > e; e++) {
      d.appendChild(arguments[e]);
    }
    return d;
  }
  function s(j, k, l, m) {
    var n = ["opacity", k, ~~(100 * j), l, m].join("-"),
      o = 0.01 + (l / m) * 100,
      p = Math.max(1 - ((1 - j) / k) * (100 - o), j),
      G = A.substring(0, A.indexOf("Animation")).toLowerCase(),
      H = (G && "-" + G + "-") || "";
    return (
      C[n] ||
        (D.insertRule(
          "@" +
            H +
            "keyframes " +
            n +
            "{0%{opacity:" +
            p +
            "}" +
            o +
            "%{opacity:" +
            j +
            "}" +
            (o + 0.01) +
            "%{opacity:1}" +
            ((o + k) % 100) +
            "%{opacity:" +
            j +
            "}100%{opacity:" +
            p +
            "}}",
          D.cssRules.length
        ),
        (C[n] = 1)),
      n
    );
  }
  function t(f, g) {
    var h,
      j,
      k = f.style;
    for (g = g.charAt(0).toUpperCase() + g.slice(1), j = 0; j < B.length; j++) {
      if (((h = B[j] + g), void 0 !== k[h])) {
        return h;
      }
    }
    return void 0 !== k[g] ? g : void 0;
  }
  function u(d, e) {
    for (var f in e) {
      d.style[t(d, f) || f] = e[f];
    }
    return d;
  }
  function v(e) {
    for (var f = 1; f < arguments.length; f++) {
      var g = arguments[f];
      for (var h in g) {
        void 0 === e[h] && (e[h] = g[h]);
      }
    }
    return e;
  }
  function w(c) {
    for (var d = { x: c.offsetLeft, y: c.offsetTop }; (c = c.offsetParent); ) {
      (d.x += c.offsetLeft), (d.y += c.offsetTop);
    }
    return d;
  }
  function x(c, d) {
    return "string" == typeof c ? c : c[d % c.length];
  }
  function y(b) {
    return "undefined" == typeof this
      ? new y(b)
      : ((this.opts = v(b || {}, y.defaults, E)), void 0);
  }
  function z() {
    function a(d, e) {
      return q(
        "<" + d + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',
        e
      );
    }
    D.addRule(".spin-vml", "behavior:url(#default#VML)"),
      (y.prototype.lines = function (b, c) {
        function e() {
          return u(
            a("group", { coordsize: p + " " + p, coordorigin: -o + " " + -o }),
            { width: p, height: p }
          );
        }
        function h(d, f, j) {
          r(
            H,
            r(
              u(e(), { rotation: (360 / c.lines) * d + "deg", left: ~~f }),
              r(
                u(a("roundrect", { arcsize: c.corners }), {
                  width: o,
                  height: c.width,
                  left: c.radius,
                  top: -c.width >> 1,
                  filter: j,
                }),
                a("fill", { color: x(c.color, d), opacity: c.opacity }),
                a("stroke", { opacity: 0 })
              )
            )
          );
        }
        var n,
          o = c.length + c.width,
          p = 2 * o,
          G = 2 * -(c.width + c.length) + "px",
          H = u(e(), { position: "absolute", top: G, left: G });
        if (c.shadow) {
          for (n = 1; n <= c.lines; n++) {
            h(
              n,
              -2,
              "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)"
            );
          }
        }
        for (n = 1; n <= c.lines; n++) {
          h(n);
        }
        return r(b, H);
      }),
      (y.prototype.opacity = function (f, g, h, j) {
        var k = f.firstChild;
        (j = (j.shadow && j.lines) || 0),
          k &&
            g + j < k.childNodes.length &&
            ((k = k.childNodes[g + j]),
            (k = k && k.firstChild),
            (k = k && k.firstChild),
            k && (k.opacity = h));
      });
  }
  var A,
    B = ["webkit", "Moz", "ms", "O"],
    C = {},
    D = (function () {
      var a = q("style", { type: "text/css" });
      return (
        r(document.getElementsByTagName("head")[0], a), a.sheet || a.styleSheet
      );
    })(),
    E = {
      lines: 12,
      length: 7,
      width: 5,
      radius: 10,
      rotate: 0,
      corners: 1,
      color: "#000",
      direction: 1,
      speed: 1,
      trail: 100,
      opacity: 0.25,
      fps: 20,
      zIndex: 2000000000,
      className: "spinner",
      top: "auto",
      left: "auto",
      position: "relative",
    };
  (y.defaults = {}),
    v(y.prototype, {
      spin: function (a) {
        this.stop();
        var e,
          g,
          k = this,
          G = k.opts,
          H = (k.el = u(q(0, { className: G.className }), {
            position: G.position,
            width: 0,
            zIndex: G.zIndex,
          })),
          I = G.radius + G.length + G.width;
        if (
          (a &&
            (a.insertBefore(H, a.firstChild || null),
            (g = w(a)),
            (e = w(H)),
            u(H, {
              left:
                ("auto" == G.left
                  ? g.x - e.x + (a.offsetWidth >> 1)
                  : parseInt(G.left, 10) + I) + "px",
              top:
                ("auto" == G.top
                  ? g.y - e.y + (a.offsetHeight >> 1)
                  : parseInt(G.top, 10) + I) + "px",
            })),
          H.setAttribute("role", "progressbar"),
          k.lines(H, k.opts),
          !A)
        ) {
          var J,
            K = 0,
            L = ((G.lines - 1) * (1 - G.direction)) / 2,
            M = G.fps,
            N = M / G.speed,
            O = (1 - G.opacity) / ((N * G.trail) / 100),
            P = N / G.lines;
          !(function Q() {
            K++;
            for (var b = 0; b < G.lines; b++) {
              (J = Math.max(1 - ((K + (G.lines - b) * P) % N) * O, G.opacity)),
                k.opacity(H, b * G.direction + L, J, G);
            }
            k.timeout = k.el && setTimeout(Q, ~~(1000 / M));
          })();
        }
        return k;
      },
      stop: function () {
        var b = this.el;
        return (
          b &&
            (clearTimeout(this.timeout),
            b.parentNode && b.parentNode.removeChild(b),
            (this.el = void 0)),
          this
        );
      },
      lines: function (a, b) {
        function c(d, f) {
          return u(q(), {
            position: "absolute",
            width: b.length + b.width + "px",
            height: b.width + "px",
            background: d,
            boxShadow: f,
            transformOrigin: "left",
            transform:
              "rotate(" +
              ~~((360 / b.lines) * h + b.rotate) +
              "deg) translate(" +
              b.radius +
              "px,0)",
            borderRadius: ((b.corners * b.width) >> 1) + "px",
          });
        }
        for (
          var e, h = 0, k = ((b.lines - 1) * (1 - b.direction)) / 2;
          h < b.lines;
          h++
        ) {
          (e = u(q(), {
            position: "absolute",
            top: 1 + ~(b.width / 2) + "px",
            transform: b.hwaccel ? "translate3d(0,0,0)" : "",
            opacity: b.opacity,
            animation:
              A &&
              s(b.opacity, b.trail, k + h * b.direction, b.lines) +
                " " +
                1 / b.speed +
                "s linear infinite",
          })),
            b.shadow && r(e, u(c("#000", "0 0 4px #000"), { top: "2px" })),
            r(a, r(e, c(x(b.color, h), "0 0 1px rgba(0,0,0,.1)")));
        }
        return a;
      },
      opacity: function (d, e, f) {
        e < d.childNodes.length && (d.childNodes[e].style.opacity = f);
      },
    });
  var F = u(q("group"), { behavior: "url(#default#VML)" });
  return !t(F, "transform") && F.adj ? z() : (A = t(F, "animation")), y;
});
LOGIN_BASE_URL = "";
var authWindow = null;
var loginFrame = null;
var loginDiv = null;
var title = null;
loginProgress =
  window.loginProgress || (parent && parent.loginProgress) || null;
var cancelButton = null;
var blockingDiv = null;
IAS.promptSecureLoginOrAuthenticate = function (c, b, a) {
  if (!loginFrame) {
    var d = "../Login";
    if (a) {
      d = String.format("{0}?nru={1}", d, a);
    }
    loginFrame = $('<iframe id="loginIFrame">').attr("src", d);
    cancelButton = $('<img src="/css/icons/close.png" id="cancelLogin">').click(
      IAS.removeLoginForm
    );
    title = $('<div id="titleDiv">')
      .append($("<label id='loginTitle'>"))
      .append(cancelButton);
    blockingDiv = $('<div id="loginBloking">')
      .css({
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        "background-color": "#777777",
        display: "block",
        visibility: "visible",
        opacity: 0.4,
      })
      .click(function () {
        loginDiv.removeClass("active");
        setTimeout(function () {
          loginDiv.addClass("active");
        }, 500);
      });
    $(document.body).append(blockingDiv);
    loginDiv = $("#loginDiv")
      .removeClass("resetPassword errorDivLength resizeMember")
      .append(title)
      .append(loginFrame)
      .slideDown(700);
    IAS.registerForIncomingMessages(IAS.bind(IAS, "MessageEventHandler", a, b));
  } else {
    loginDiv.removeClass("active");
    setTimeout(function () {
      loginDiv.addClass("active");
    }, 500);
  }
};
IAS.registerForIncomingMessages = function (a) {
  if (window.addEventListener) {
    window.addEventListener("message", a, false);
  } else {
    window.attachEvent("onmessage", a);
  }
};
IAS.removeLoginForm = function () {
  if (loginFrame) {
    loginDiv.hide();
    loginDiv.html("");
    loginFrame = null;
    blockingDiv.remove();
    blockingDiv = null;
  }
};
IAS.MessageEventHandler = function (b, d, a) {
  switch (true) {
    case a.data.indexOf("block") == 0:
      loginProgress = IAS.progress();
      break;
    case a.data.indexOf("auth:") == 0:
      var e = a.data.split(":");
      var c = e[2];
      IAS.removeLoginForm();
      if (b && b != "") {
        window.location.href = b;
      } else {
        window.location.href = c;
      }
      if (d instanceof Function) {
        d();
      }
      break;
    case a.data.indexOf("closeForm") == 0:
      IAS.removeLoginForm();
      break;
    case a.data.indexOf("resizeMember") == 0:
      loginDiv.addClass("resizeMember");
      loginFrame.addClass("resizeMemberFrame");
      title.children().text(IAS.L(IAS.L("Create New Member Account")));
      break;
    case a.data.indexOf("resizePassowrd") == 0:
      loginDiv.addClass("resetPassword");
      loginFrame.addClass("resetPasswordFrame");
      break;
    case a.data.indexOf("resizeSecurityCodeCaptcha") == 0:
      loginDiv.addClass("resizeSecuruityCodeCaptcha");
      loginFrame.addClass("resizeSecuruityCodeCaptchaFrame");
      break;
    case a.data.indexOf("resizeSecurityCode") == 0:
      loginDiv.addClass("resizeSecurityCode");
      loginFrame.addClass("resizeSecurityCodeFrame");
      break;
    case a.data.indexOf("resizeChangePasswordError") == 0:
      loginDiv.addClass("resizeChangePasswordError");
      loginFrame.addClass("resizeChangePasswordFrameError");
      loginDiv.removeClass("resizeChangePassword");
      loginFrame.removeClass("resizeChangePasswordFrame");
      break;
    case a.data.indexOf("resizeChangePassword") == 0:
      loginDiv.addClass("resizeChangePassword");
      loginFrame.addClass("resizeChangePasswordFrame");
      loginDiv.removeClass("resizeChangePasswordError");
      loginFrame.removeClass("resizeChangePasswordFrameError");
      break;
    case a.data.indexOf("reset") == 0:
      loginDiv.removeClass(
        "resetPassword resizeMember resizeSecurityCode resizeSecuruityCodeCaptcha resizeChangePassword errorDivLength resizeChangePasswordError"
      );
      loginFrame.removeClass(
        "resetPasswordFrame resizeMemberFrame resizeSecurityCodeFrame resizeSecuruityCodeCaptchaFrame resizeChangePasswordFrame errorFrameLength resizeChangePasswordFrameError"
      );
      IAS.removeLoginSpinner();
      break;
    case a.data.indexOf("setTitle") == 0:
      title.children().text(IAS.L(a.data.split("-")[1]));
      break;
    case a.data.indexOf("increaseLength") == 0:
      loginDiv.addClass("errorDivLength");
      loginFrame.addClass("errorFrameLength");
      break;
    default:
      throw "Unrecognized message" + a.data;
  }
};
IAS.removeLoginSpinner = function () {
  if (window.loginProgress) {
    window.loginProgress.close();
    delete loginProgress;
    parent && delete parent.loginProgress;
  }
};
LOGIN_BASE_URL = "";
var memberAccountIFrame = null;
var memberAccountCancelButton = null;
var memberAccountContainer = null;
var memberAccountHeader = null;
var memberAccountBlockingDiv = null;
IAS.removeCreateNewMemberAccountForm = function () {
  if (memberAccountIFrame) {
    if (memberAccountContainer) {
      memberAccountContainer.hide();
      memberAccountContainer.empty();
      window.location.href = "/";
    }
    memberAccountIFrame = null;
    memberAccountBlockingDiv.remove();
    memberAccountBlockingDiv = null;
  }
};
IAS.promptSecureNewMemberRegistration = function (a, b) {
  if (!memberAccountIFrame) {
    var c = "/member";
    if (a) {
      c = String.format("{0}?nru={1}", c, a);
    }
    memberAccountContainer = $("#createMemberAccountDiv");
    memberAccountIFrame = $('<iframe id="createMemberAccountIFrame">');
    memberAccountIFrame.attr("src", c);
    memberAccountCancelButton = $(
      '<img src="/css/icons/close.png" id="cancelCreateMemberAccount">'
    ).click(IAS.removeCreateNewMemberAccountForm);
    memberAccountHeader = $('<div id="memberAccountHeader">')
      .append(
        $('<label id="memberAccountTitle">').text(
          IAS.L("Create New Member Account")
        )
      )
      .append(memberAccountCancelButton);
    memberAccountBlockingDiv = $('<div id="memberAccountBlocking">')
      .css({
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        "background-color": "#777777",
        display: "block",
        visibility: "visible",
        opacity: 0.4,
      })
      .click(function () {
        memberAccountContainer.removeClass("active");
        setTimeout(function () {
          memberAccountContainer.addClass("active");
        }, 500);
      });
    $(document.body).append(memberAccountBlockingDiv);
    memberAccountContainer
      .append(memberAccountHeader)
      .append(memberAccountIFrame)
      .slideDown(700);
    IAS.registerForIncomingMessages(function (d) {
      var f = d.data.split(":");
      var e = f[2];
      IAS.removeCreateNewMemberAccountForm();
      if (a && a != "") {
        window.location.href = a;
      } else {
        window.location.href = e;
      }
      if (b instanceof Function) {
        b();
      }
    });
  } else {
    memberAccountContainer.removeClass("active");
    setTimeout(function () {
      memberAccountContainer.addClass("active");
    });
  }
};
IAS.sendMessageToOpenerWindow = function (a) {
  if (window.postMessage && window.opener) {
    window.opener.postMessage(a);
  }
};
IAS.registerForIncomingMessages = function (a) {
  if (window.addEventListener) {
    window.addEventListener("message", a, false);
  } else {
    window.attachEvent("onmessage", a);
  }
};
IAS.CreateNewMemberAccount = function (c, d, h, k, g, j, l, m, f) {
  var e = this;
  e.dropdownOptions = "";
  var b = h;
  var a = j;
  this.optRegisterUrl = l;
  this.optRegisterUrlPostData = m;
  this.optAfterRegisterCallback = f;
  $.post("/Member/GetDropdownValues", { countryId: b, centerId: a }, function (
    r
  ) {
    e.countries = r.countryOptions;
    var o = r.languageOptions;
    var q = r.nationalityOptions;
    var n = r.genderOptions;
    e.setPhoneValue = r.setZipcode;
    c.append("<h4>" + IAS.L("Required fields are marked with an *"));
    var p = $("<div id='memberAccount'>");
    $.post("/Member/GetCountryWithZipCode", function (A) {
      e.dropdownOptions = A.countryZipCodeOptions;
      var w = new UIRenderer(
        {
          fields: [
            {
              label: IAS.L("Username"),
              type: "text",
              id: "userName",
              required: true,
              pattern: d
                ? d.usernamePattern
                  ? d.usernamePattern
                  : null
                : null,
              valueNotMatchPatternMessage: d
                ? d.usernameNotMatchPattern
                  ? d.usernameNotMatchPattern
                  : null
                : null,
            },
            {
              label: IAS.L("Password"),
              type: "password",
              id: "password",
              required: true,
              pattern: d ? (d.textPattern ? d.textPattern : null) : null,
              valueNotMatchPatternMessage: d
                ? d.textNotMatchPattern
                  ? d.textNotMatchPattern
                  : null
                : null,
              passwordPattern: d
                ? d.passwordPattern
                  ? d.passwordPattern
                  : null
                : null,
              valueNotMatchPasswordPatternMessage: d
                ? d.passwordNotMatchPattern
                  ? d.passwordNotMatchPattern
                  : null
                : null,
            },
            {
              label: IAS.L("Retype Password"),
              type: "password",
              id: "retypePassword",
              required: true,
              pattern: d ? (d.textPattern ? d.textPattern : null) : null,
              valueNotMatchPatternMessage: d
                ? d.textNotMatchPattern
                  ? d.textNotMatchPattern
                  : null
                : null,
              passwordPattern: d
                ? d.passwordPattern
                  ? d.passwordPattern
                  : null
                : null,
              valueNotMatchPasswordPatternMessage: d
                ? d.passwordNotMatchPattern
                  ? d.passwordNotMatchPattern
                  : null
                : null,
            },
            {
              label: IAS.L("Primary Name"),
              type: "name",
              id: "primaryName",
              required: true,
            },
            {
              label: IAS.L("Secondary Name"),
              type: "name",
              id: "secondaryName",
              required: true,
            },
            {
              label: IAS.L("Date of Birth"),
              type: "olddate",
              id: "dateOfBirth",
              required: true,
            },
            {
              label: IAS.L("Gender"),
              type: "dropdown",
              id: "gender",
              options: n,
              required: true,
            },
            {
              label: IAS.L("Email"),
              type: "email",
              id: "email",
              required: true,
              pattern: d ? (d.textPattern ? d.textPattern : null) : null,
              valueNotMatchPatternMessage: d
                ? d.textNotMatchPattern
                  ? d.textNotMatchPattern
                  : null
                : null,
            },
            {
              label: IAS.L("Phone Number"),
              type: "dropdowncountryrenderer",
              id: "phoneNumber",
              options: e.dropdownOptions,
              required: true,
            },
            {
              label: IAS.L("Address"),
              type: "bigtext",
              id: "address",
              required: true,
              attributes: {
                placeholder: IAS.L(
                  "office no.; floor no.; building no.; street name; region"
                ),
              },
            },
            {
              label: IAS.L("Country"),
              type: "countryrenderer",
              id: "country",
              required: true,
              options: e.countries,
            },
            {
              label: IAS.L("Nationality"),
              type: "dropdown",
              id: "nationality",
              options: q,
              required: true,
            },
            {
              label: IAS.L("Default Language"),
              type: "dropdown",
              id: "language",
              options: o,
              required: true,
            },
            {
              label: IAS.L("Captcha"),
              type: "captcha",
              id: "capMemberRegistration",
            },
          ],
        },
        p,
        null,
        null,
        null,
        true,
        true
      );
      var y = w.getRendererByID("phoneNumber");
      y.inputField.phoneField.countryCode.change();
      y.inputField.phoneField.countryCode.change(function () {
        var B = y.inputField.phoneField.getCountryCodeValue();
      });
      if (e.setPhoneValue) {
        var y = w.getRendererByID("phoneNumber");
        y.setValue(e.setPhoneValue);
      }
      if (b || a) {
        var v = w.getRendererByID("country");
        var t = [];
        if (b || a) {
          if (e.countries[1]) {
            var u = e.countries[1];
          } else {
            if (e.countries[0]) {
              var u = e.countries[0];
            }
          }
          t.push(u.countryCod);
          t.push(u.label);
          t.push(u.id);
        }
        if (t.length > 0) {
          v.setValue(t);
          v.setAttributes({ disabled: true, readOnly: true });
        }
      }
      var x = w.getRendererByID("capMemberRegistration");
      var z = new ButtonRenderer({
        id: "registerButton",
        label: IAS.L("Register"),
        css: {
          float: "right",
          height: "35px",
          width: "100px",
          margin: "20px -11px 0 0",
        },
      });
      z.renderOn(p);
      z.click(function () {
        var D = w.getRendererByID("password").getValue();
        var E = w.getRendererByID("retypePassword").getValue();
        var C = w.validateAndCheckErrors({
          anyFieldRequired: true,
          allFieldsRequired: true,
        });
        var B = false;
        var F = x.getValue();
        $.post("/Captcha/ValidateCaptcha", { captchaText: F }, function (J) {
          if (J == true) {
            B = true;
          }
          if (D != E) {
            IAS.popupMsg(
              IAS.L("The password does not match"),
              IAS.L("Password")
            );
          } else {
            if (w.getRendererByID("email").getError() != null) {
              new IAS.popupMsg(
                IAS.L("The email format is incorrect"),
                IAS.L("Incorrect Format")
              );
            } else {
              if (C == false) {
                if (B == true) {
                  var H = w.getValues();
                  H.nru = d
                    ? d.nextRedirectUrl
                      ? d.nextRedirectUrl
                      : null
                    : null;
                  var K = "";
                  var I = {};
                  I.Member = H;
                  I.MemberDetailsStr = JSON.stringify(H);
                  if (e.optRegisterUrl) {
                    K = e.optRegisterUrl;
                    if (e.optRegisterUrlPostData) {
                      for (var G in e.optRegisterUrlPostData) {
                        I[G] = e.optRegisterUrlPostData[G];
                      }
                    }
                  } else {
                    K = "/Member/MemberRegister";
                  }
                  IAS.post(K, I, function (L) {
                    IAS.popupMsg(
                      L.message,
                      IAS.L("Member Registration"),
                      function () {
                        if (L.added) {
                          w.clearFields();
                          g && g instanceof Function && g();
                          if (e.optAfterRegisterCallback) {
                            e.optAfterRegisterCallback(L);
                          }
                        }
                      }
                    );
                    x.ReloadImage();
                  });
                } else {
                  IAS.popupMsg(
                    IAS.L("Incorrect captcha entered"),
                    IAS.L("Wrong Entry")
                  );
                }
              }
            }
          }
        });
      });
      var s = IAS.createCollapsDiv(p, IAS.L("Basic Information"));
      c.append(s);
    });
  });
};
IAS.ContactUsForm = function () {
  var d = this;
  var a = $.createDiv();
  var c = $.createDiv();
  var g = $("<div>");
  var e = false;
  var f = [];
  c.append(a);
  var b = $("<hr>").attr("id", "hrId").css({ border: "1px solid #1681AD" });
  g.append("<b><h3>" + IAS.L("Contact Us") + "</h3></b>").append(b);
  a.append(g);
  $.post("/Link/GetDropdownValues", null, function (l) {
    if (l) {
      var m = l.subject;
      var k = l.problem;
      e = l.memberLogedIn;
      f = l.operationalCountries;
    }
    if (e == false) {
      var j = new UIRenderer(
        {
          fields: [
            {
              label: IAS.L("First Name"),
              type: "text",
              id: "firstNameId",
              required: true,
            },
            {
              label: IAS.L("Last Name"),
              type: "text",
              id: "lastNameId",
              required: true,
            },
            {
              label: IAS.L("Phone"),
              type: "phone",
              id: "PhoneId",
              required: true,
            },
            {
              label: IAS.L("Email Address"),
              type: "email",
              id: "emailAddressId",
              required: true,
            },
            {
              label: IAS.L("Subject"),
              type: "dropdown",
              options: m,
              id: "subjectId",
              required: true,
            },
            {
              label: IAS.L("Proplem Type"),
              type: "dropdown",
              options: k,
              id: "problemId",
              required: true,
              only_show_if: "$subjectId=='3'",
            },
            {
              label: IAS.L("Message"),
              type: "htmleditorrenderer",
              id: "messageTextId",
              required: true,
            },
            {
              label: IAS.L("Operational Country"),
              type: "dropdown",
              id: "operationalCountry",
              required: true,
              options: f,
            },
          ],
        },
        c,
        null,
        null,
        null,
        true,
        true
      );
    } else {
      if (e == true) {
        var j = new UIRenderer(
          {
            fields: [
              {
                label: IAS.L("Subject"),
                type: "dropdown",
                options: m,
                id: "subjectId",
                required: true,
              },
              {
                label: IAS.L("Proplem Type"),
                type: "dropdown",
                options: k,
                id: "problemId",
                required: true,
                only_show_if: "$subjectId=='3'",
              },
              {
                label: IAS.L("Message"),
                type: "htmleditorrenderer",
                id: "messageTextId",
                required: true,
              },
              {
                label: IAS.L("Operational Country"),
                type: "dropdown",
                id: "operationalCountry",
                required: true,
                options: f,
              },
            ],
          },
          c,
          null,
          null,
          null,
          true,
          true
        );
      }
    }
    c.append($("<br>"));
    var h = new IAS.popup(c, "", null, [
      {
        label: IAS.L("Send"),
        bindFunction: function () {
          var o = j.validateAndCheckErrors({ anyFieldRequired: true });
          if (!o) {
            var p = "";
            var q = "";
            var t = "";
            var n = "";
            if (e == false) {
              p = j.getRendererByID("firstNameId").getValue();
              q = j.getRendererByID("lastNameId").getValue();
              t = j.getRendererByID("PhoneId").getValue();
              n = j.getRendererByID("emailAddressId").getValue();
            }
            var v = j.getRendererByID("subjectId").getValue();
            var u = j.getRendererByID("problemId").getValue();
            var r = j.getRendererByID("messageTextId").getValue();
            var s = j.getRendererByID("operationalCountry").getValue();
            IAS.post(
              "/Link/SendContactUsEmail",
              {
                subject: v,
                emailBody: r,
                proplemType: u,
                firstName: p,
                LastName: q,
                phone: t,
                emailAddress: n,
                memberLogedIn: e,
                operationalCountry: s,
              },
              function (w) {
                if (w) {
                  if (w.SendSuccessfully == "true") {
                    IAS.popupMsg(
                      "Data Sent Successfully, Thank you for sending",
                      null,
                      function () {
                        h.close();
                      }
                    );
                  }
                }
              }
            );
          }
        },
      },
    ]);
  });
};
IAS.CandidateResults = function () {
  var d = this;
  var c = $.createDiv();
  c.empty();
  var a = $.createDiv("skillCardId");
  var g = new TextRenderer({ id: "candidateSkillCardText", type: "text" });
  var b = $("<span>").append(IAS.L("Candidate Skills Card:"));
  a.append(b);
  g.renderOn(a);
  var f = function () {
    var h = g.getHumanValue();
    IAS.searchButtonClick(h, c);
  };
  var e = $(
    '<i data-tooltip="Check Candidate" src="/css/icons/search.png" id="searchIcon">'
  ).click(f);
  g.inputField.keyup(function (h) {
    if (h.keyCode == 13) {
      f();
    }
  });
  a.append(e);
  c.append(a);
  $("div#searchCandidate").append(c);
};
IAS.searchButtonClick = function (b, a) {
  IAS.post("/Public/GetMemberPassedModules", { skillCardID: b }, function (f) {
    if (f) {
      if (f.SkillCardUsed == true) {
        $("#tableDiv").remove();
        var h = $("<div id='tableDiv' style= 'margin-top:10px;'>").hide();
        a.append(h.slideToggle(500));
        var d = $("<div>");
        var c = $("<span>")
          .append(f.MemberFullName)
          .css({ "font-weight": "bold" });
        d.append(c);
        h.append(d);
        var e = f.PassedModules;
        if (e && e.length > 0) {
          var j = $("<div>");
          var k = IAS.L("Passed Modules");
          this.centerStaffTable = new IAS.TableRenderer(
            [
              {
                label: IAS.L("Passed Modules"),
                id: "modulesId",
                type: "label",
              },
            ],
            j,
            f.PassedModules
          );
          h.append($("<br>")).append(j);
        } else {
          var g = $("<span>")
            .append(IAS.L("No passed exams for this skill card"))
            .css({ color: "red" });
          h.append("<br>").append(g);
        }
      } else {
        new IAS.popupMsg(
          IAS.L("Please check your skill card"),
          IAS.L("Warning Message")
        );
      }
    }
  });
};
IAS.Data = IAS.Data || {};
IAS.ShowCenterAccreditationAgreementForm = function (b, c, e, a) {
  var d = this;
  IAS.Data.countryOptions = c.countryOptions;
  d.div = $("<div>");
  d.div.append("<h2>" + IAS.L("Center Accreditation Requirements"));
  d.agreementForm = new UIRenderer(c.agreement, d.div);
  d.fileID = 0;
  d.operationalCountryDropDownRenderer = d.agreementForm.getRendererByID(
    "operationalCountry"
  );
  d.agreementContentRenderer = d.agreementForm.getRendererByID("agreementText");
  d.agreementContentRenderer.fixInputFieldInsideTd();
  d.downloadFileRenderer = d.agreementForm.getRendererByID(
    "downloadRequirementFile"
  );
  d.acceptCheckBoxRenderer = d.agreementForm.getRendererByID("accept");
  d.operationalCountryDropDown =
    d.operationalCountryDropDownRenderer.inputField;
  d.operationalCountryDropDownRenderer.changeCountry(function () {
    var f = d.div.find(".collapsibleContainerContent");
    d.agreementContentRenderer.setValue("");
    var j = d.operationalCountryDropDownRenderer.getValue();
    if (j) {
      var g = window.screen.availHeight - 510;
      $(f).css({ "overflow-y": "scroll", height: g + "px" });
      var h = { operationalCountryID: j };
      $.post(
        "/AccreditationAgreement/ShowOperationalCountryAgreement",
        h,
        function (k) {
          d.agreementContentRenderer.setValue(k.agreementContent);
          d.acceptCheckBoxRenderer.inputField.prop("disabled", false);
          d.downloadFileRenderer.setValue(k.fileID);
          if (k.fileID) {
            d.downloadFileRenderer.hideLink(false);
          } else {
            d.downloadFileRenderer.hideLink();
          }
        }
      );
    } else {
      $(f).css({ "overflow-y": "none", height: "auto" });
      d.acceptCheckBoxRenderer.inputField.prop("disabled", true);
      d.nextButton.setAttribute("disabled", true);
      d.downloadFileRenderer.hideLink();
      d.acceptCheckBoxRenderer.inputField.attr("checked", false);
    }
    d.agreementContentRenderer.inputField.attr(
      "style",
      "width:98%;height:200px;"
    );
  });
  d.acceptCheckBoxRenderer.inputField.change(function () {
    var f = d.acceptCheckBoxRenderer.getValue();
    if (f === true) {
      d.nextButton.setAttribute("disabled", false);
    } else {
      d.nextButton.setAttribute("disabled", true);
    }
  });
  d.nextButton = new ButtonRenderer({ id: "nextButton", label: IAS.L("Next") });
  d.nextButton.setAttribute("disabled", true);
  d.nextButton.click(function () {
    var g = true;
    var f = d.operationalCountryDropDownRenderer.getValue(g);
    a(f, d.div);
  });
  if (e) {
    d.operationalCountryDropDownRenderer.setValue(e);
    d.downloadFileRenderer.hideLink(false);
    d.acceptCheckBoxRenderer.setValue(true);
    d.acceptCheckBoxRenderer.inputField.change();
  } else {
    d.downloadFileRenderer.hideLink();
    d.acceptCheckBoxRenderer.inputField.prop("disabled", true);
  }
  if (d.operationalCountryDropDownRenderer.getValue()) {
    d.operationalCountryDropDownRenderer.changeCountry();
  }
  d.div.append("</br>");
  d.nextButton.renderOn(d.div);
  b.append(d.div);
};
IAS.PersonnelProfile = function (g, b, f, c, e, d) {
  var a = (this.mainDiv = $("<div>"));
  this.onAfterSaveCallback = b;
  if (g) {
    var h = {};
    if (e && Object.keys(e).length > 0) {
      g = IAS.FormHelper.mergeModifiedPersonnelRolesForms(e, g);
      h = this.getPersonnelProfileRendererList(g, a, f, d);
      this.savePersonnelProfile(h, true);
    } else {
      h = this.getPersonnelProfileRendererList(g, a, f, d);
    }
    a.append($("<div>"));
    var j = new ButtonRenderer({
      id: "submitPersonnelProfile",
      label: IAS.L("Save Profile"),
    });
    j.click(IAS.bind(this, "savePersonnelProfile", h, false));
    j.renderOn(a);
    this.autoSave = c || false;
    if (this.autoSave) {
      this.savePersonnelProfile(h, true);
    }
  }
};
IAS.PersonnelProfile.prototype.getPersonnelProfileRendererList = function (
  k,
  g,
  j,
  h
) {
  var n = {};
  var l = j && j.isFieldsReadOnly ? j.isFieldsReadOnly : false;
  var b = { canViewOnly: true };
  var a = j && j.categoryNote ? j.categoryNote : b;
  for (var o in k) {
    var f = {};
    var m = k[o];
    for (var d in m) {
      var c = m[d];
      var e = new UIRenderer(c, g, false, false, l, a, null, h);
      g.append("<br>");
      f[d] = e;
    }
    n[o] = f;
  }
  return n;
};
IAS.PersonnelProfile.prototype.savePersonnelProfile = function (h, l) {
  var d = this;
  var k = {};
  for (var j in h) {
    for (var b in h[j]) {
      var g = h[j][b];
      var c = {};
      if (g instanceof UIRenderer) {
        var a = g.getFileIDs();
        IAS.confirmeOrDeleteFileIDs(a);
      }
      c[b] = g.formWithValuesToJson();
      k[j] = c;
    }
  }
  var f = "/Link/EditPersonnelProfile";
  var e = { profileForms: k };
  $.post(f, e, function (o) {
    var m = o.personnelForms || o;
    var n = {};
    personnelForms = o;
    if (!l) {
      if (o.hasOwnProperty("message")) {
        IAS.popupMsg(o.message);
      } else {
        IAS.popupMsg(IAS.L("Your profile is saved successfully"));
      }
    }
    d.autoSave = false;
    if (d.onAfterSaveCallback instanceof Function) {
      d.onAfterSaveCallback(personnelForms);
    }
  });
};
IAS.PersonnelProfile.prototype.drawProfile = function () {
  return this.mainDiv;
};
IAS.EditMemberInfoForm = function (e, a, d) {
  this.memberInfo = a;
  this.readonly = d;
  var c = $("<div class='panelview'>");
  var b = $("<div>");
  if (!d) {
    b.append(
      $("<strong>")
        .html(
          IAS.L(
            "Please Verify your member information, they will be used as a candidate info to issue the ICDL certificate"
          )
        )
        .css("color", "red")
    );
  }
  this._renderInputForm(b);
  c.append(b);
  if (!d) {
    this.renderButtons(c);
  }
  e.append(c);
  return this.memberRegistration;
};
IAS.EditMemberInfoForm.prototype.renderButtons = function (b) {
  var c = new ButtonRenderer({
    id: "submitButton",
    label: IAS.L("Confirm Information"),
    css: {
      width: "200px",
      height: "30px",
      "margin-Left": "35%",
      "margin-top": ".5%",
    },
  });
  var a = new ButtonRenderer({
    id: "cancelButton",
    label: IAS.L("Cancel Request"),
    css: {
      width: "200px",
      height: "30px",
      marginTop: ".5%",
      "margin-left": "3px",
    },
  });
  c.click(IAS.bind(this, "SubmitFunction"));
  a.click(IAS.bind(this, "CancelFunction"));
  c.renderOn(b);
  a.renderOn(b);
};
IAS.EditMemberInfoForm.prototype.SubmitFunction = function () {
  var a = this;
  IAS.popupYesNo(
    IAS.L(
      "Are you sure you want to submit these information, it cannot be edited after submission?"
    ),
    "",
    function () {
      var b = a.memberRegistration.validateAndCheckErrors({
        anyFieldRequired: true,
      });
      if (!b) {
        var c = { Member: a.memberRegistration.getValues() };
        IAS.post("/Link/ConfirmAssignedSkillsCards", c, function (d) {
          $("#panel").empty();
          location.href = "/";
        });
      }
    }
  );
};
IAS.EditMemberInfoForm.prototype.CancelFunction = function () {
  IAS.popupYesNo(
    IAS.L("Are you sure you want to cancel this request?"),
    "",
    function () {
      IAS.post("/Link/CancelAssignSkillsCardRequest", {}, function () {
        $("#panel").empty();
        location.href = "/";
      });
    }
  );
};
IAS.EditMemberInfoForm.prototype._renderInputForm = function (a) {
  var b = this;
  $.post("/Link/GetDropdownUIValues", null, function (m) {
    var f = m.languageOptions;
    var j = m.nationalityOptions;
    var e = m.genderOptions;
    var l = m.RemainingSkillsCards;
    var k = m.organizations;
    var c = m.CertificationsProfile;
    var d = m.countryZipCodeOptions;
    var h = $("<div>");
    var g = $("<div id='basicCategory'>");
    g.attr("collapsibleDivTitle", "Basic Information");
    g.addClass("collapsibleContainer");
    h.append(g);
    b.memberRegistration = new UIRenderer(
      {
        fields: [
          {
            label: IAS.L("Primary Name"),
            type: "name",
            id: "primaryName",
            required: true,
          },
          {
            label: IAS.L("Secondary Name"),
            type: "name",
            id: "secondaryName",
            required: true,
          },
          {
            label: IAS.L("National ID"),
            type: "text",
            id: "nationalID",
            required: true,
          },
          {
            label: IAS.L("Nationality"),
            type: "dropdown",
            id: "nationality",
            options: j,
            required: true,
          },
          {
            label: IAS.L("Date of Birth"),
            type: "olddate",
            id: "dateOfBirth",
            required: true,
          },
          {
            label: IAS.L("Gender"),
            type: "dropdown",
            id: "gender",
            options: e,
            required: true,
          },
          { label: IAS.L("Email"), type: "email", id: "email" },
          {
            label: IAS.L("Phone Number"),
            type: "dropdowncountryrenderer",
            id: "phoneNumber",
            options: d,
            required: true,
          },
          {
            label: IAS.L("Address"),
            type: "bigtext",
            id: "address",
            required: true,
            attributes: {
              placeholder: IAS.L(
                "office no.; floor no.; building no.; street name; region"
              ),
            },
          },
          {
            label: IAS.L("Organizations"),
            type: "checkboxlist",
            id: "organizations",
            attributes: { readonly: true },
          },
          {
            label: IAS.L("Default Certification Profile"),
            type: "dropdown",
            id: "defaultProfile",
            options: c,
          },
          {
            label: IAS.L("Testing Language"),
            type: "dropdown",
            id: "language",
            options: f,
            required: true,
          },
        ],
      },
      g,
      null,
      null,
      b.readonly,
      true
    );
    a.append(h);
    b.memberRegistration.setValues(b.memberInfo);
  });
};
IAS.RejectStaffRegistrationForm = function (a) {
  this.mainDiv = $("<div id='rejectDiv'>");
  this.formData = a;
};
IAS.RejectStaffRegistrationForm.prototype.show = function () {
  this.mainDiv
    .append("<br/>")
    .append($("<strong>").html(this.formData.message))
    .append("<br/>")
    .append("<br>");
  var b = [
    {
      id: "centerPrimaryName",
      label: this.formData.centerPrimaryName.label,
      type: "text",
      value: this.formData.centerPrimaryName.value,
      attributes: { readonly: true },
    },
    {
      id: "centerLocalName",
      label: this.formData.centerLocalName.label,
      type: "text",
      value: this.formData.centerLocalName.value,
      attributes: { readonly: true },
    },
  ];
  var c = new UIRenderer({ fields: b }, this.mainDiv);
  this.mainDiv.append("<br/>");
  var e = new IAS.TableRenderer(
    this.formData.positions.header,
    this.mainDiv,
    this.formData.positions.value,
    null,
    null
  );
  this.mainDiv.append("<br/>");
  var d = this;
  url = "/Link/RejectStaffRegistration";
  postData = {
    centerApplicationID: this.formData.centerApplicationID,
    linkID: this.formData.n,
  };
  var a = new ButtonRenderer(
    { id: "btnReject", label: d.formData.reject.label },
    function () {
      IAS.popupYesNo(
        d.formData.reject.confirmMsg,
        d.formData.reject.confirmMsgTitle,
        function () {
          IAS.post(url, postData, function (f) {
            IAS.popupMsg(f.successMessage, f.successMessageTitle, function () {
              window.location.href = "/";
            });
          });
        }
      );
    },
    this.mainDiv
  );
  this.mainDiv.css(
    "style",
    "{align-content: center;align-self: center;align-items: center;}"
  );
  return this.mainDiv;
};
IAS.confirmeOrDeleteFileIDs = function (a) {
  if (a && a != {}) {
    if (a.added.length > 0 || a.deleted.length > 0) {
      var b = {
        added: JSON.stringify(a.added),
        deleted: JSON.stringify(a.deleted || 0),
      };
      IAS.post("/Renderer/ConfirmedOrDeleteFile", b, function () {});
    }
  }
};
IAS.saveFile = function (b, c, a, e, d, f) {
  var g = {};
  g.fileID = b;
  g.fileData = a;
  g.fileName = c;
  g.isNew = e;
  g.href = window.location.href;
  g.fileType = d;
  IAS.post("/Renderer/SaveFile", g, function (h) {
    f(h);
  });
};
IAS.getFileName = function (b, a) {
  if (b) {
    $.post("/Renderer/GetFileName", { fileID: b }, function (c) {
      if (a && c) {
        a(c);
      }
    });
  }
};
IAS.post = function () {
  var f = arguments[0];
  postArgs = [arguments[0]];
  var d = arguments[1];
  if (arguments.length >= 3 && typeof arguments[2] == "function") {
    d = arguments[2];
    postArgs.push(arguments[1]);
  }
  var c = arguments[3] || false;
  var a = arguments[4] || null;
  var e = null;
  if (a) {
    e = new IAS.blockingProgress(a);
  } else {
    if (!c) {
      e = new IAS.progress();
    }
  }
  postArgs.push(function (g, j, h) {
    if (h.getResponseHeader("sign_out")) {
      IAS.messagingManager &&
        IAS.messagingManager.disposeMessagesRefreshTimer();
      IAS.PanelRenderer.callPanelOnExit();
      iasAlert(IAS.L(h.getResponseHeader("time_out_message")), function () {
        location.href = "/";
      });
      return;
    } else {
      if (g.Messages) {
        IAS.messagingManager.setMessages(g.Messages, true);
      }
      if (g.removeMessage) {
        IAS.messagingManager.removeMessage(g.removeMessage, true);
      }
      if (g.removeMessages) {
        IAS.messagingManager.removeMessages(g.removeMessages, true);
      }
      if (g.IncrementalMessages) {
        IAS.messagingManager.incrementMessages(g.IncrementalMessages, true);
      }
      d(g, j, h);
      if (e) {
        e.close();
      }
    }
  });
  if (
    postArgs[1] &&
    !(postArgs[1] instanceof Function) &&
    postArgs[1] instanceof Object
  ) {
    postArgs[1]["dataStr"] = JSON.stringify(postArgs[1]);
  }
  var b = $.post.apply($, postArgs).fail(function (m) {
    if (m.statusText != "error") {
      if (f === "/Message/GetLastMessages" && IAS.messagingManager) {
        IAS.messagingManager.disposeMessagesRefreshTimer();
      }
      if (e) {
        e.close();
      }
      var g = $.createDiv();
      var l = IAS.popupOptions();
      l.fullScreen = true;
      IAS.popup(g, IAS.L("Error Acction"), l);
      if (m.responseText) {
        var j = $("<iframe>").css({ height: "95%", width: "99%" });
        g.append(j);
        var k = j[0].contentDocument || j[0].contentWindow.document;
        if (
          m.statusText != "Server Error" &&
          m.statusText != "Internal Server Error"
        ) {
          IAS.syncPost(
            "/Error/ShowErrorView",
            { statusCode: m.status, statusText: m.statusText, url: f },
            function (n) {
              k.write(n);
            }
          );
        } else {
          k.write(m.responseText);
        }
        k.close();
        var h = $("<span style='font-weight:bold;font-size:13px'>");
        h.append("Error status code " + m.status);
        g.append(h);
      }
    }
  });
  return b;
};
IAS.syncPost = function (c, a, b) {
  $.ajax({ type: "POST", url: c, async: false, data: a, success: b });
};
IAS.popupOptions = function () {
  return {
    fullScreen: false,
    width: "auto",
    height: "auto",
    maxWidth: null,
    maxHight: null,
    minWidth: null,
    minHeigth: null,
    leftPosition: null,
    topPosition: null,
    autoOpen: true,
    autoCenterOnResize: true,
    resizable: true,
    centerOnAppend: true,
    okCallback: null,
    onPopupOpenCallback: null,
    onPopupFocusCallback: null,
    onPopupCloseCallback: null,
    beforeClose: null,
    extendButtons: null,
  };
};
IAS.popup = function (k, m, g, h) {
  m = m || "";
  var f = g || IAS.popupOptions();
  var j = {
    open: function () {
      k.dialog("open");
    },
    close: function () {
      if (f.onPopupCloseCallback instanceof Function) {
        f.onPopupCloseCallback();
      }
      k.remove();
    },
    destroy: function () {
      k.remove();
    },
  };
  if (f.beforeClose instanceof Function) {
    var b = f.beforeClose;
    f.beforeClose = function (o) {
      return b.apply(j, [o]);
    };
  }
  var e = function () {
    if (f.okCallback instanceof Function) {
      f.okCallback();
    }
    if (j) {
      j.close();
    }
  };
  var d = function (o) {
    var p = function (q) {
      $(q.currentTarget).attr("disabled", true);
      o.call(this, j);
      $(q.currentTarget).attr("disabled", false);
    };
    return p;
  };
  var l = {};
  if (h) {
    for (var n in h) {
      var a = null;
      if (h[n].bindFunction instanceof Function) {
        a = IAS.Common.generateRandomID(h[n].label, {});
        j[a] = d(h[n].bindFunction);
      } else {
        a = "close";
      }
      l[h[n].label] = IAS.bind(j, a);
    }
  } else {
    j.ok = e;
    l[IAS.L("OK")] = IAS.bind(j, "ok");
  }
  var c = $(window);
  if (f.fullScreen) {
    f.width = c.outerWidth() / 1.06;
    f.height = c.outerHeight() / 1.03;
  }
  if (f.extendButtons) {
    f.extendButtons.css({ padding: "5px" });
  }
  k.dialog({
    autoOpen: f.autoOpen,
    height: f.height ? f.height : "auto",
    width: f.width ? f.width : "auto",
    maxWidth: f.maxWidth ? f.maxWidth : c.outerWidth() / 1.06,
    maxHeight: f.maxHeight ? f.maxHeight : c.outerHeight() / 1.03,
    minWidth: f.minWidth,
    minHeight: f.minHeight,
    resizable: f.resizable,
    show: { effect: "fade", duration: 300 },
    hide: { effect: "fade", duration: 200 },
    title: m,
    modal: true,
    buttons: l,
    extendButtons: f.extendButtons,
    close: function () {
      j.close();
    },
    open: function (o, q) {
      var p = $(this).parent();
      p.css({
        position: "fixed",
        left: f.leftPosition
          ? f.leftPosition
          : 0.5 * (c.width() - p.outerWidth()),
        top: f.topPosition
          ? f.topPosition
          : 0.28 * (c.height() - p.outerHeight()),
      });
      if (f.onPopupOpenCallback instanceof Function) {
        f.onPopupOpenCallback();
      }
    },
    focus: function () {
      if (f.onPopupFocusCallback instanceof Function) {
        f.onPopupFocusCallback();
      }
    },
    beforeClose: f.beforeClose,
  });
  if (f.centerOnAppend) {
    k.onAppend(function () {
      k.dialog("option", "position", [
        "middle",
        f.topPosition
          ? f.topPosition
          : 0.28 * (c.height() - k.parent().outerHeight()),
      ]);
    });
  }
  return j;
};
IAS.popupMsg = function (a, c, d, e, f) {
  var b = IAS.popupOptions();
  b.width = f || "auto";
  b.height = e || "auto";
  b.okCallback = d || null;
  var g = new IAS.popup($("<div>").append("<br>").append(a), c || "", b);
  return g;
};
IAS.popupYesNo = function (b, h, f, j, k, l) {
  var c = $("<div>").append("<br>").append(b);
  var d = h || "";
  var a = k || null;
  var n = l || null;
  var o = {
    label: IAS.L("Yes"),
    bindFunction: function () {
      f();
      m.close();
    },
  };
  var e = !j
    ? { label: IAS.L("No") }
    : {
        label: IAS.L("No"),
        bindFunction: function () {
          j();
          m.close();
        },
      };
  var g = IAS.popupOptions();
  g.width = l || "auto";
  g.height = k || "auto";
  if (j) {
    g.onPopupCloseCallback = j;
  }
  var m = new IAS.popup(c, d, g, [o, e]);
  return m;
};
IAS.blockingPopup = function (b, d, c) {
  b = b || "";
  var e = $("<div>").html("<br><br>" + b);
  var a = {
    close: function () {
      e.remove();
    },
  };
  e.dialog({
    autoOpen: true,
    height: "auto",
    width: "auto",
    show: "fast",
    hide: "fast",
    title: "",
    position: "center",
    modal: true,
    open: function (f, g) {
      $(this).parent().css("position", "fixed");
      $(this).parent().css("center", "100px");
    },
    dialogClass: d ? "no-close" : "",
    close: c,
  });
  return a;
};
IAS.blockingProgress = function (b) {
  b.attr("id", "progressBar");
  b.css({
    width: "200px",
    height: "200px",
    "margin-left": "auto",
    "margin-right": "auto",
    "vertical-align": "center",
  });
  $(b).spin("circle", "#0066FF");
  var a = {
    selectorDiv: b,
    close: function () {
      if (this.selectorDiv) {
        this.selectorDiv.remove();
        this.selectorDiv = null;
      }
    },
  };
  return a;
};
IAS.progress = function () {
  if (!IAS.waitPopupDiv || IAS.waitPopupDiv.length < 1) {
    IAS.waitPopupDiv = $("<div>").attr("id", "progressBar");
    IAS.waitPopupDiv.dialog({
      autoOpen: true,
      height: "150",
      width: "100",
      show: "fast",
      hide: "fast",
      position: "center",
      modal: true,
      resizable: false,
      open: function (c, f) {
        var e = $(window);
        var d = $(this).parent();
        d.css({
          position: "fixed",
          left: 0.5 * (e.width() - d.outerWidth()),
          top: 0.5 * (e.height() - d.outerHeight()),
        });
      },
    });
    $(IAS.waitPopupDiv).spin("circle", "#0066FF");
    $(IAS.waitPopupDiv).parent().find(".ui-dialog-titlebar").hide();
    var a = IAS.cookies.getCookieByName("LanguageId") == 2 ? "176px" : "154px";
    $(IAS.waitPopupDiv).parent().css("width", a);
  }
  var b = {
    close: function () {
      if (IAS.waitPopupDiv) {
        IAS.waitPopupDiv.remove();
        IAS.waitPopupDiv = null;
      }
    },
  };
  return b;
};
IAS.cookies = {
  defaultOptions: { path: "/" },
  getCookieByName: function (a, b) {
    return $.cookie(a, b);
  },
  clearCookie: function (a, b) {
    b = this.getCallerOptions(b);
    $.removeCookie(a, b);
  },
  getAllCookies: function () {
    return $.cookie();
  },
  createCookie: function (a, d, b) {
    var c = this.getCallerOptions(b);
    $.cookie(a, d, c);
  },
  getCallerOptions: function (b) {
    var a = $.extend(true, this.defaultOptions, b);
    return a;
  },
  updateCookie: function (a, b) {
    this.createCookie(a, b);
  },
};
IAS.LocalizationManager = IAS.LocalizationManager || {};
IAS.LocalizationManager.setCssFileLanguge = function (g, b, d, c) {
  var h = parseInt(g);
  b.each(function (j) {
    if (!$.isEmptyObject(d) && $(b[j])[0] != d[0]) {
      $(b[j])[0].remove();
    }
  });
  var e = 0;
  var f = h;
  var a = c[f] || c["1"];
  for (e = 0; e < a.length; e++) {
    $("head").append(a[e]);
  }
};
IAS.GetPrimaryOrSecondaryName = function (d, e) {
  var c = null;
  var b = IAS.cookies.getCookieByName("LanguageId", String);
  var a = IAS.cookies.getCookieByName("secondaryNameLanguageID", String);
  if (a && b == a && e) {
    c = e;
  } else {
    c = d;
  }
  return c;
};
IAS.IsCurrentSelectedLanguageSameAsSecondaryLanguage = function () {
  var c = false;
  var b = IAS.cookies.getCookieByName("LanguageId", String);
  var a = IAS.cookies.getCookieByName("secondaryNameLanguageID", String);
  if (a && b == a) {
    c = true;
  }
  return c;
};
IAS.Common = IAS.Common || {};
IAS.Common.redirectToHostUrl = function () {
  window.location = window.location.protocol + "//" + window.location.host;
};
IAS.Common.createListBoxFromPrimitiveArray = function (b, d) {
  var e = d || 5;
  var c = $("<select class='customListbox'>").attr("size", e);
  for (var a = 0; a < b.length; a += 1) {
    c.append($("<option>").html(b[a]).val(b[a]));
  }
  return c;
};
IAS.Common.getLanguages = function (a) {
  var b = {};
  $.post("/Localization/GetAllLanguages", function (c) {
    if (c) {
      b = c;
      a(b);
    }
  });
};
IAS.Common.createListBoxFromObjectArray = function (c, d, l, f, j, h, g, k) {
  var e = f || $("<select>").attr("size", j || 5);
  if (g) {
    e.addClass(g);
  } else {
    e.addClass("customListbox");
  }
  if (h) {
    e.attr("id", h);
  }
  e.children().remove();
  for (var b = 0; b < c.length; b += 1) {
    var a;
    if (k) {
      a = IAS.GetPrimaryOrSecondaryName(c[b][l], c[b][k]);
    } else {
      if (c[b] && l) {
        a = c[b][l];
      }
    }
    if (c[b] && c[b] != "") {
      e.append($("<option>").val(c[b][d]).html(a));
    }
  }
  return e;
};
IAS.Common.DrawSearchUi = function (b, l, o, p, g) {
  var j = $("<div class='searchDiv'>");
  var k = $.extend(true, {}, l);
  var m = function () {
    p.Search({ currentPage: 1, totalRows: 0, url: o, sortorder: "asc" }, n);
  };
  k.categories[0].fields.push({
    id: "searchButton",
    label: "",
    type: "button",
    callBack: m,
  });
  g &&
    k.categories[0].fields.push({
      id: "hiddenMore",
      type: "hidden",
      label: "",
    });
  var n = new UIRenderer(k, j);
  var a = n.renderers;
  for (var h in a) {
    if (a.hasOwnProperty(h)) {
      var e = a[h].getFields();
      if (e) {
        for (var d in e) {
          if (e[d]) {
            e[d].keyup(function (q) {
              if (q.keyCode == 13) {
                m();
                this.focus();
              }
            });
          }
        }
      }
    }
  }
  n.getRendererByID("searchButton").inputField.click(m).html(IAS.L("Search"));
  var c = n.getRendererByID("hiddenMore");
  if (g) {
    var f = $('<span class="moreSpan">')
      .text(IAS.L("Extended search"))
      .click(function (q) {
        var r = c.getValue();
        if (r == "true") {
          c.setValue(false);
          this.innerText = IAS.L("Extended Search");
        } else {
          c.setValue(true);
          this.innerText = IAS.L("Basic Search");
        }
        n.onChangeInForm();
      });
    j.append(f);
  }
  j.append("<br>");
  b.append(j);
  return n;
};
IAS.Common.generateRandomID = function (d, b) {
  var a;
  if (d) {
    d = d.replace(/\s+/g, "").replace(/[^a-zA-Z 0-9]+/g, "");
    do {
      a = null;
      var c = Math.floor(Math.random() * 1000000);
      a = d + c;
    } while (b.hasOwnProperty(a));
    return a;
  }
};
IAS.Common.htmlify = function (a) {
  if (a) {
    return a.replace("&gt;", ">").replace("&lt;", "<");
  }
};
IAS.createCollapsDiv = function (a, c) {
  var b = $("<div>");
  b.attr("collapsibleDivTitle", c);
  b.addClass("collapsibleContainer");
  b.append(a);
  b.collapsiblePanel();
  return b;
};
IAS.GetKeys = function (b) {
  if (!b) {
    return;
  }
  var a = [];
  a = Object.keys(b);
  if (a.length > 1) {
    return a;
  } else {
    return a[0];
  }
};
IAS.printForm = function (d, a) {
  var b = $("<div>");
  var c = new IAS.TableRenderer(
    [
      { id: "label", type: "label", label: "" },
      { id: "value", type: "label", label: "" },
    ],
    b,
    d
  );
  if (!a) {
    IAS.printDiv(b);
  } else {
    return b;
  }
};
IAS.printDiv = function (a) {
  a.printElement();
};
Date.prototype.timeNow = function () {
  return (
    (this.getHours() < 10 ? "0" : "") +
    this.getHours() +
    ":" +
    (this.getMinutes() < 10 ? "0" : "") +
    this.getMinutes() +
    ":" +
    (this.getSeconds() < 10 ? "0" : "") +
    this.getSeconds()
  );
};
IAS.getDateInt = function () {
  var a = new Date();
  var h = a.getMonth() + 1;
  var g = (h < 10 ? "0" : "") + h;
  var c = (a.getDate() < 10 ? "0" : "") + a.getDate();
  var d = (a.getHours() < 10 ? "0" : "") + a.getHours();
  var f = (a.getMinutes() < 10 ? "0" : "") + a.getMinutes();
  var j = (a.getSeconds() < 10 ? "0" : "") + a.getSeconds();
  var b = String.format("{0}{1}{2}{3}{4}{5}", a.getFullYear(), g, c, d, f, j);
  var e = Number(b);
  return e;
};
IAS.getFontFamilies = function () {
  if (!IAS.fontFamilies) {
    IAS.post("/Renderer/GetFontFamily", {}, function (a) {
      IAS.fontFamilies = a;
    });
  }
  return IAS.fontFamilies;
};
IAS.reflectPagination = function (a) {
  a = {
    currentPage: a.Page,
    totalRows: a.TotalRowsCount,
    pageSize: a.PageSize,
    url: a.Url,
    sortorder: "asc",
  };
  return a;
};
IAS.updateDictionary = function (c, b) {
  for (var a in b) {
    c[a] = b[a];
  }
  return c;
};
IAS.Common.GetCheckBoxRandomID = function (b) {
  var a = [];
  $("input[type=checkbox]").each(function (d) {
    a.push(this.id);
  });
  var c = 0;
  do {
    c = IAS.Common.generateRandomID(b, {});
  } while (a.indexOf(c) > -1);
  return c;
};
IAS.Common.createDropDownCountryListWithPhoneNumberFromObjectArray = function (
  h,
  l
) {
  var j = this;
  var k = l;
  var n = $("<ul id='countryList' class='country-list-hide'>")
    .css("list-style-type", "none")
    .on("click focus", "li", function () {
      $(this)
        .css("background-color", "#BFD5EA")
        .siblings()
        .css("background", "");
    });
  $(document).on("keypress", function (q) {
    var u = false;
    if (n.attr("class") == "country-list") {
      var r = false;
      window.globalVar;
      var o = q.keyCode || q.charCode;
      window.newList;
      if ((o < 65 || o > 90) && o != 13) {
        var w = String.fromCharCode(o);
        window.globalindex;
        if (window.globalVar != w) {
          window.globalVar = w;
          window.globalindex = 0;
          window.newList = [];
          $("#countryList li").each(function (y) {
            var z = this;
            var A = $(this).find("span[class='countryName']");
            var x = A.text();
            if (x.charAt(0).toLowerCase() == w.toLowerCase()) {
              newList.push($(this));
            }
          });
        } else {
          window.globalindex = window.globalindex + 1;
          r = true;
        }
        if (window.newList.length > 0) {
          for (i = window.globalindex; i < window.newList.length; i++) {
            if (n.attr("class") == "country-list") {
              var t = $(window.newList)[i];
              $(t)
                .css("background-color", "#BFD5EA")
                .siblings()
                .css("background", "");
              var s = $(t);
              var p = $("#countryList");
              if (r) {
                var v = p.scrollTop();
                p.animate({ scrollTop: v + 1 });
              } else {
                p.scrollTop(0);
                p.animate({ scrollTop: s.position().top });
              }
            }
            break;
          }
        }
      }
    }
  });
  var b;
  if (h.length == 2) {
    var a = h[1].countryCod;
    b = h[1].countryPhoneCod;
    var g = $("<div id='imag'>");
    g.addClass(String.format("flag flag-{0}", a));
  } else {
    var g = $("<div id='imag' class='flag flag-jo'>");
  }
  var e = $("<div>");
  var c = $("<div id='dropdownDiv>");
  this.arrowDivDiv = $("<div class='arrow' id='arrowDiv'>");
  showHidList = function (p) {
    if (p && p.stopPropagation) {
      p.stopPropagation();
    }
    var o = $("#arrowDiv");
    if (o.attr("class") == "arrow") {
      o.removeClass("arrow").addClass("arrow Up");
      n.removeClass("country-list-hide").addClass("country-list");
      n.show();
    } else {
      o.removeClass("arrow Up").addClass("arrow");
      n.removeClass("country-list").addClass("country-list-hide");
      n.hide();
      $(document).off("keydown");
    }
  };
  $("html").click(function () {
    var o = $("#arrowDiv");
    if (o.attr("class") == "arrow Up") {
      o.removeClass();
      o.addClass("arrow");
      n.hide();
    }
  });
  var d = $("<i id='contentDiv'>").on("click", showHidList);
  d.append(g).append(this.arrowDivDiv);
  var m = $("<div id='phoneNumber'>").css("display", "inline-block");
  if (!b) {
    b = 962;
  }
  this.mobileNumber = new PhoneRenderer(
    { id: "countryPhoneNumber", label: "", value: "" },
    k,
    b
  );
  this.mobileNumber.renderOn(m, d);
  this.mobileNumber.setAttributes();
  var f = $("<div id='dropdown'>");
  var j = this;
  $.each(h, function (p) {
    var o = $("<div id='icon'>");
    var r = $("<span class='CountryCod'>");
    var s = $("<span class='countryName'>");
    if (p != 0) {
      var q = $("<li/>")
        .addClass("ui-menu-item")
        .attr("id", String.format("{0}", h[p]["id"]))
        .attr("countryCod", String.format("flag flag-{0}", h[p]["countryCod"]))
        .attr("countryPhoneCod", String.format("{0}", h[p]["countryPhoneCod"]))
        .append(
          o
            .addClass(String.format("flag flag-{0}", h[p]["countryCod"]))
            .append(s.html(h[p]["label"]))
            .append(r.html(String.format("{0}", h[p]["countryPhoneCod"])))
        )
        .appendTo(n)
        .click(function () {
          var t = $("#arrowDiv");
          if (t.attr("class") == "arrow Up") {
            t.removeClass("arrow Up").addClass("arrow");
          }
          var v = $(this).attr("countryPhoneCod");
          var w = this.id;
          var u = $(this).attr("countrycod");
          g.removeAttr("class");
          g.addClass(String.format("flag flag-{0}", u));
          j.mobileNumber.setCountryCodeValue(String.format("{0}", v));
          j.mobileNumber.countryCode.change();
          n.hide();
          j.mobileNumber.setAttributes();
          document.getElementById("phoneNumbers").focus();
        });
    }
  });
  f.append(m).append(n);
  j.mobileNumber.countryCode.change();
  return { inputField: f, phoneField: j.mobileNumber };
};
isNumber = function (a) {
  return /^-?[\d.]+(?:e-?\d+)?$/.test(a);
};
IAS.sectionArray = function (a, c) {
  var d = a.slice(0);
  var b = [];
  while (d.length > 0) {
    b.push(d.splice(0, c));
  }
  return b;
};
IAS.Common.getSelectionText = function () {
  var a = "";
  if (window.getSelection) {
    a = window.getSelection().toString();
  } else {
    if (document.selection && document.selection.type != "Control") {
      a = document.selection.createRange().text;
    }
  }
  return a.trim();
};
IAS.createVerifiedAndSecuredHttps = function () {
  var b = $("<div>");
  var a = $("<span>").attr("id", "siteseal");
  a.append(
    '<script type="text/javascript" src="https://seal.godaddy.com/getSeal?sealID=2XaLUtAl3yCFPpbyg2VJDiAQ7p62SgwW16vPHu6i5PzdB1Xui7nxam"></script>'
  );
  a.append(
    $(
      '<img style="cursor:pointer;cursor:hand" src="https://seal.godaddy.com/images/3/en/siteseal_gd_3_h_l_m.gif" onclick="verifySeal();">'
    )
  );
  var c = $("<span>").css({
    color: "#0D72BA",
    "font-size": "15px",
    "font-family": "arial",
    height: "20px",
    width: "376px",
    top: "100px",
    align: "left",
  });
  c.append(
    IAS.L("Make sure the website URL starts with") +
      " <b>" +
      IAS.L("HTTPS") +
      "</b> " +
      IAS.L("not HTTP")
  );
  b.append(a).append(c);
  return b;
};
IAS.Common.exportToExcel = function (c, d, b) {
  c.exportToExcel = true;
  if (!b) {
    var a = new IAS.fileDownload(c, d);
    delete a;
  } else {
    IAS.post(d, c, function (f) {
      if (f.fileName) {
        var e = new IAS.fileDownload(
          { fileName: f.fileName },
          "/Renderer/DownloadExcelSearchFile"
        );
        delete e;
      }
    });
  }
};
IAS.Common.getCheckedOptionsFromCheckBoxList = function (c) {
  var a = [];
  for (var b = 0; b < c.length; b++) {
    if (c[b] instanceof Object == false) {
      a.push(c[b]);
    } else {
      if (c[b].checked == true) {
        a.push(c[b].id);
      }
    }
  }
  return a;
};
IAS.Common.SerializeSearchValues = function (d) {
  var b = {};
  for (var a in d) {
    var c = d[a];
    switch (true) {
      case c instanceof Array:
        b[a] = IAS.Common.getCheckedOptionsFromCheckBoxList(d[a]);
        break;
      case c instanceof Object:
        b[a + "{}"] = JSON.stringify(c);
        break;
      default:
        b[a] = d[a];
        break;
    }
  }
  return b;
};
IAS.ProgressBar = IAS.ProgressBar || {};
IAS.ProgressBar = function (d, a) {
  var b = a || 100;
  var c = (b * d.width()) / 100;
  d.find("div")
    .animate({ width: c }, 5000)
    .html(b + "%&nbsp;");
};
IAS.createListControl = function (a, c) {
  var b = $("<div class=list>")[0];
  b.items = a;
  b.renderFn =
    c.render ||
    function (d) {
      return $("<p>").html(d);
    };
  b.actions = c.actions || [];
  b.table = $("<table>");
  $(b).append(b.table);
  b.redraw = IAS.createListControl.prototype.redraw;
  b.actionClicked = IAS.createListControl.prototype.actionClicked;
  b.pushItem = IAS.createListControl.prototype.pushItem;
  b.redraw();
  return b;
};
IAS.createListControl.prototype.redraw = function () {
  this.table.children().remove();
  $(this).find("#noitems").remove();
  if (this.items.length == 0) {
    $(this).append($("<p id='noitems'>").html("No items in list"));
    return;
  }
  for (var a = 0; a < this.items.fieldsList.length; a += 1) {
    var b = a;
    this.pushItem(b);
  }
};
IAS.createListControl.prototype.actionClicked = function (a, b) {
  this.actions[a][1].call(this, this.items.fieldsList[b].fields, b);
};
IAS.createListControl.prototype.pushItem = function (b) {
  var d = this;
  var f = $("<tr>").attr("rowId", b);
  var e = $("<td>").append(this.renderFn(b));
  f.append(e);
  if (this.actions.length > 0) {
    e = $("<td>");
    for (var c = 0; c < this.actions.length; c += 1) {
      var a = this.actions[c][0].clone();
      a.click(IAS.bind(this, "actionClicked", c, this.table[0].rows.length));
      e.append(a);
    }
    f.append(e);
  }
  this.table.append(f);
};
IAS.createCustomUIList = function (a, c) {
  var b = $("<div class=list>")[0];
  b.items = a;
  b.renderFn =
    c && c.render
      ? c.render
      : function (d) {
          return $("<p>").html(d);
        };
  b.actions = c && c.actions ? c.actions : [];
  b.emptyMessage =
    c && c.emptyMessage ? c.emptyMessage : IAS.L("No items in list");
  b.table = $("<table>");
  $(b).append(b.table);
  b.redraw = IAS.createCustomUIList.prototype.redraw;
  b.actionClicked = IAS.createCustomUIList.prototype.actionClicked;
  b.pushItem = IAS.createCustomUIList.prototype.pushItem;
  b.redraw();
  return b;
};
IAS.createCustomUIList.prototype.redraw = function (f) {
  this.table.children().remove();
  var e = $(this);
  e.find("#noitems").remove();
  if (this.items.length == 0) {
    e.append($("<p id='noitems'>").html(this.emptyMessage));
    return;
  }
  var d = this.items;
  var a = isNumber(f) && f <= d.length ? f : d.length;
  for (var b = 0; b < a; b += 1) {
    var c = d[b];
    this.pushItem(c);
  }
};
IAS.createCustomUIList.prototype.actionClicked = function (a, b) {
  $(event.currentTarget).attr("disabled", true);
  this.actions[a][1].call(this, this.items[b], b);
  $(event.currentTarget).attr("disabled", false);
};
IAS.createCustomUIList.prototype.pushItem = function (b) {
  var d = this;
  var f = $("<tr>").attr("rowId", b);
  var e = $("<td>").append(this.renderFn(b));
  f.append(e);
  if (this.actions.length > 0) {
    e = $("<td>");
    for (var c = 0; c < this.actions.length; c += 1) {
      var a = this.actions[c][0].clone();
      a.click(IAS.bind(this, "actionClicked", c, this.table[0].rows.length));
      e.append(a);
    }
    f.append(e);
  }
  this.table.append(f);
};
var dateFormat = (function () {
  var d = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
    b = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
    c = /[^-+\dA-Z]/g,
    a = function (f, e) {
      f = String(f);
      e = e || 2;
      while (f.length < e) {
        f = "0" + f;
      }
      return f;
    };
  return function (h, r, v) {
    var j = dateFormat;
    if (
      arguments.length == 1 &&
      Object.prototype.toString.call(h) == "[object String]" &&
      !/\d/.test(h)
    ) {
      r = h;
      h = undefined;
    }
    h = h ? new Date(h) : new Date();
    if (isNaN(h)) {
      throw SyntaxError("invalid date");
    }
    r = String(j.masks[r] || r || j.masks["default"]);
    if (r.slice(0, 4) == "UTC:") {
      r = r.slice(4);
      v = true;
    }
    var e = v ? "getUTC" : "get",
      f = h[e + "Date"](),
      g = h[e + "Day"](),
      p = h[e + "Month"](),
      w = h[e + "FullYear"](),
      l = h[e + "Hours"](),
      q = h[e + "Minutes"](),
      u = h[e + "Seconds"](),
      n = h[e + "Milliseconds"](),
      t = v ? 0 : h.getTimezoneOffset(),
      k = {
        d: f,
        dd: a(f),
        ddd: j.i18n.dayNames[g],
        dddd: j.i18n.dayNames[g + 7],
        m: p + 1,
        mm: a(p + 1),
        mmm: j.i18n.monthNames[p],
        mmmm: j.i18n.monthNames[p + 12],
        yy: String(w).slice(2),
        yyyy: w,
        h: l % 12 || 12,
        hh: a(l % 12 || 12),
        H: l,
        HH: a(l),
        M: q,
        MM: a(q),
        s: u,
        ss: a(u),
        l: a(n, 3),
        L: a(n > 99 ? Math.round(n / 10) : n),
        t: l < 12 ? "a" : "p",
        tt: l < 12 ? "am" : "pm",
        T: l < 12 ? "A" : "P",
        TT: l < 12 ? "AM" : "PM",
        Z: v ? "UTC" : (String(h).match(b) || [""]).pop().replace(c, ""),
        o:
          (t > 0 ? "-" : "+") +
          a(Math.floor(Math.abs(t) / 60) * 100 + (Math.abs(t) % 60), 4),
        S: ["th", "st", "nd", "rd"][
          f % 10 > 3 ? 0 : (((f % 100) - (f % 10) != 10) * f) % 10
        ],
      };
    return r.replace(d, function (m) {
      return m in k ? k[m] : m.slice(1, m.length - 1);
    });
  };
})();
dateFormat.masks = {
  default: "dd-mmm-yyyy",
  shortDate: "m/d/yy",
  mediumDate: "mmm d, yyyy",
  longDate: "mmmm d, yyyy",
  fullDate: "dddd, mmmm d, yyyy",
  shortTime: "h:MM TT",
  mediumTime: "h:MM:ss TT",
  longTime: "h:MM:ss TT Z",
  isoDate: "yyyy-mm-dd",
  isoTime: "HH:MM:ss",
  isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
  isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'",
};
dateFormat.i18n = {
  dayNames: [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat",
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ],
  monthNames: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
};
Date.prototype.format = function (a, b) {
  return dateFormat(this, a, b);
};
Date.prototype.getDaysPerMonth = function (b) {
  var a = new Array(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
  var c = this.getFullYear();
  if (typeof b == "undefined") {
    b = this.getMonth();
  }
  if (0 == c % 4 && (0 != c % 100 || 0 == c % 400) && b == 1) {
    return 29;
  }
  return a[b];
};
weekDaysString = function () {
  var a = {
    longDay: [
      { id: 0, label: IAS.L("Sunday") },
      { id: 1, label: IAS.L("Monday") },
      { id: 2, label: IAS.L("Tuesday") },
      { id: 3, label: IAS.L("Wednesday") },
      { id: 4, label: IAS.L("Thursday") },
      { id: 5, label: IAS.L("Friday") },
      { id: 6, label: IAS.L("Saturday") },
    ],
    shortDay: [
      { id: 0, label: IAS.L("Sun") },
      { id: 1, label: IAS.L("Mon") },
      { id: 2, label: IAS.L("Tue") },
      { id: 3, label: IAS.L("Wed") },
      { id: 4, label: IAS.L("Thu") },
      { id: 5, label: IAS.L("Fri") },
      { id: 6, label: IAS.L("Sat") },
    ],
    minDay: [
      { id: 0, label: IAS.L("Su") },
      { id: 1, label: IAS.L("Mo") },
      { id: 2, label: IAS.L("Tu") },
      { id: 3, label: IAS.L("We") },
      { id: 4, label: IAS.L("Th") },
      { id: 5, label: IAS.L("Fr") },
      { id: 6, label: IAS.L("Sa") },
    ],
  };
  return a;
};
monthString = function () {
  var a = {
    longMonth: [
      { id: 1, label: IAS.L("January") },
      { id: 2, label: IAS.L("February") },
      { id: 3, label: IAS.L("March") },
      { id: 4, label: IAS.L("April") },
      { id: 5, label: IAS.L("May") },
      { id: 6, label: IAS.L("June") },
      { id: 7, label: IAS.L("July") },
      { id: 8, label: IAS.L("August") },
      { id: 9, label: IAS.L("September") },
      { id: 10, label: IAS.L("October") },
      { id: 11, label: IAS.L("November") },
      { id: 12, label: IAS.L("December") },
    ],
    shortMonth: [
      { id: 1, label: IAS.L("Jan") },
      { id: 2, label: IAS.L("Feb") },
      { id: 3, label: IAS.L("Mar") },
      { id: 4, label: IAS.L("Apr") },
      { id: 5, label: IAS.L("May") },
      { id: 6, label: IAS.L("Jun") },
      { id: 7, label: IAS.L("Jul") },
      { id: 8, label: IAS.L("Aug") },
      { id: 9, label: IAS.L("Sep") },
      { id: 10, label: IAS.L("Oct") },
      { id: 11, label: IAS.L("Nov") },
      { id: 12, label: IAS.L("Dec") },
    ],
  };
  return a;
};
getDateFullInfo = function (e, c) {
  var a = function (k, g) {
    var f = 5;
    var h = new Date(k, g - 1, f);
    var j = new Date(h.valueOf());
    j.setDate(j.getDate() - 10);
    while (true) {
      j.setDate(j.getDate() + 1);
      if (j.getMonth() + 1 == g) {
        break;
      }
    }
    return j;
  };
  var d = a(e, c);
  var b = {
    dateDay: 1,
    dateMonth: c,
    dateYear: e,
    firstDate: 1,
    today: 1,
    numberOfDaysPerMonth: d.getDaysPerMonth(),
    startWeekDay: d.getDay(),
    spectoMonth: d.format("mmm"),
    spectoYear: d.format("yyyy"),
    from: d.format("dd") + "-" + d.format("mmm") + "-" + d.format("yyyy"),
    to: d.getDaysPerMonth() + "-" + d.format("mmm") + "-" + d.format("yyyy"),
  };
  return b;
};
IAS.soundManager = {
  _n_audio_elements: 0,
  playSound: function (b) {
    var c = String.format(
      '<audio id={0} src={1} preload="auto">',
      "audioE" + ++this._n_audio_elements,
      b
    );
    var a = $(c);
    a[0].play();
  },
  yesNoSound: function () {
    this.playSound("/sounds/yes_no_sound.mp3");
  },
  loginSound: function () {
    this.playSound("/sounds/login.mp3");
  },
  navigateSound: function () {
    this.playSound("/sounds/panel_navigate.mp3");
  },
  messageSound: function () {
    this.playSound("/sounds/message_sound.mp3");
  },
  logoffSound: function () {
    this.playSound("/sounds/logoff.mp3");
  },
  newChatMessageSound: function () {
    this.playSound("/sounds/newChatMessage.mp3");
  },
  newNotification: function () {
    this.playSound("/sounds/alert_49.mp3");
  },
};
IAS.fileDownload = function (b, c, a) {
  if (!(b || b instanceof Object || c)) {
    throw "Both postValues and url must be specifeid";
  }
  this.options = a;
  this._prepareOptions();
  this.postValues = b;
  this.url = c;
  this.prepareValuesAndForm();
  this.checkDownloadProgress();
  this._submitForm();
};
$.extend(IAS.fileDownload.prototype, {
  prepareValuesAndForm: function () {
    var d = this.url;
    var b = this.postValues;
    var f = (this.form = $('<form style="display:none;" method="POST">')
      .attr("action", d)
      .appendTo("body"));
    b.exportToExcel = true;
    for (var a in b) {
      if (b.hasOwnProperty(a) && b[a]) {
        var e = b[a];
        switch (true) {
          case e instanceof Array && e.length > 0:
            e = IAS.Common.getCheckedOptionsFromCheckBoxList(e);
            a = a + "[]";
            e = e.join();
            this.appendValueToForm(a, e);
            break;
          case e instanceof Object:
            for (var c in e) {
              this.appendValueToForm(String.format("{0}[{1}]", a, c), e[c]);
            }
            break;
          default:
            this.appendValueToForm(a, e);
            break;
        }
      }
    }
  },
  appendValueToForm: function (b, c) {
    var a = $('<input type="hidden">').attr({ name: b, value: c });
    this.form.append(a);
  },
  checkDownloadProgress: function () {
    var e = null;
    if (this.options.showWait) {
      e = IAS.progress();
    }
    var c = "checkDownloadProgress";
    var d = this;
    var a = window.setInterval(function () {
      if (IAS.cookies.getCookieByName(c, Boolean) === true) {
        b.apply(d);
      }
    }, 300);
    var b = function () {
      if (this.options.showWait) {
        e.close();
      }
      IAS.cookies.clearCookie(c);
      window.clearInterval(a);
      var f = this.options.onFinishCallBack;
      if (f && f instanceof Function) {
        f();
      }
    };
  },
  _prepareOptions: function () {
    var a = { showWait: true, onFinishCallBack: null };
    var c = this.options;
    if (c && c instanceof Object) {
      for (var b in c) {
        if (a.hasOwnProperty(b)) {
          a[b] = c[b];
        }
      }
    }
    this.options = a;
  },
  _submitForm: function () {
    var a = this.form;
    a.submit();
    a.remove();
  },
});

(function () {
  var aj = this,
    U = aj.Chart,
    J = function (d) {
      (this.canvas = d.canvas), (this.ctx = d);
      var b = function (f, e) {
          return f["offset" + e]
            ? f["offset" + e]
            : document.defaultView.getComputedStyle(f).getPropertyValue(e);
        },
        a = (this.width = b(d.canvas, "Width")),
        c = (this.height = b(d.canvas, "Height"));
      (d.canvas.width = a), (d.canvas.height = c);
      var a = (this.width = d.canvas.width),
        c = (this.height = d.canvas.height);
      return (
        (this.aspectRatio = this.width / this.height),
        ah.retinaScale(this),
        this
      );
    };
  (J.defaults = {
    global: {
      animation: !0,
      animationSteps: 60,
      animationEasing: "easeOutQuart",
      showScale: !0,
      scaleOverride: !1,
      scaleSteps: null,
      scaleStepWidth: null,
      scaleStartValue: null,
      scaleLineColor: "rgba(0,0,0,.1)",
      scaleLineWidth: 1,
      scaleShowLabels: !0,
      scaleLabel: "<%=value%>",
      scaleIntegersOnly: !0,
      scaleBeginAtZero: !1,
      scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      scaleFontSize: 12,
      scaleFontStyle: "normal",
      scaleFontColor: "#666",
      responsive: !1,
      maintainAspectRatio: !0,
      showTooltips: !0,
      customTooltips: !1,
      tooltipEvents: ["mousemove", "touchstart", "touchmove", "mouseout"],
      tooltipFillColor: "rgba(0,0,0,0.8)",
      tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      tooltipFontSize: 14,
      tooltipFontStyle: "normal",
      tooltipFontColor: "#fff",
      tooltipTitleFontFamily:
        "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      tooltipTitleFontSize: 14,
      tooltipTitleFontStyle: "bold",
      tooltipTitleFontColor: "#fff",
      tooltipYPadding: 6,
      tooltipXPadding: 6,
      tooltipCaretSize: 8,
      tooltipCornerRadius: 6,
      tooltipXOffset: 10,
      tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",
      multiTooltipTemplate: "<%= value %>",
      multiTooltipKeyBackground: "#fff",
      onAnimationProgress: function () {},
      onAnimationComplete: function () {},
    },
  }),
    (J.types = {});
  var ah = (J.helpers = {}),
    ab = (ah.each = function (g, b, a) {
      var f = Array.prototype.slice.call(arguments, 3);
      if (g) {
        if (g.length === +g.length) {
          var c;
          for (c = 0; c < g.length; c++) {
            b.apply(a, [g[c], c].concat(f));
          }
        } else {
          for (var d in g) {
            b.apply(a, [g[d], d].concat(f));
          }
        }
      }
    }),
    ac = (ah.clone = function (b) {
      var a = {};
      return (
        ab(b, function (c, d) {
          b.hasOwnProperty(d) && (a[d] = c);
        }),
        a
      );
    }),
    j = (ah.extend = function (a) {
      return (
        ab(Array.prototype.slice.call(arguments, 1), function (b) {
          ab(b, function (c, d) {
            b.hasOwnProperty(d) && (a[d] = c);
          });
        }),
        a
      );
    }),
    Q = (ah.merge = function () {
      var a = Array.prototype.slice.call(arguments, 0);
      return a.unshift({}), j.apply(null, a);
    }),
    X = (ah.indexOf = function (c, b) {
      if (Array.prototype.indexOf) {
        return c.indexOf(b);
      }
      for (var a = 0; a < c.length; a++) {
        if (c[a] === b) {
          return a;
        }
      }
      return -1;
    }),
    af =
      ((ah.where = function (c, b) {
        var a = [];
        return (
          ah.each(c, function (d) {
            b(d) && a.push(d);
          }),
          a
        );
      }),
      (ah.findNextWhere = function (f, b, a) {
        a || (a = -1);
        for (var d = a + 1; d < f.length; d++) {
          var c = f[d];
          if (b(c)) {
            return c;
          }
        }
      }),
      (ah.findPreviousWhere = function (f, b, a) {
        a || (a = f.length);
        for (var d = a - 1; d >= 0; d--) {
          var c = f[d];
          if (b(c)) {
            return c;
          }
        }
      }),
      (ah.inherits = function (d) {
        var b = this,
          a =
            d && d.hasOwnProperty("constructor")
              ? d.constructor
              : function () {
                  return b.apply(this, arguments);
                },
          c = function () {
            this.constructor = a;
          };
        return (
          (c.prototype = b.prototype),
          (a.prototype = new c()),
          (a.extend = af),
          d && j(a.prototype, d),
          (a.__super__ = b.prototype),
          a
        );
      })),
    G = (ah.noop = function () {}),
    al = (ah.uid = (function () {
      var a = 0;
      return function () {
        return "chart-" + a++;
      };
    })()),
    I = (ah.warn = function (a) {
      window.console &&
        "function" == typeof window.console.warn &&
        console.warn(a);
    }),
    ad = (ah.amd = "function" == typeof define && define.amd),
    K = (ah.isNumber = function (a) {
      return !isNaN(parseFloat(a)) && isFinite(a);
    }),
    O = (ah.max = function (a) {
      return Math.max.apply(Math, a);
    }),
    Z = (ah.min = function (a) {
      return Math.min.apply(Math, a);
    }),
    am =
      ((ah.cap = function (c, b, a) {
        if (K(b)) {
          if (c > b) {
            return b;
          }
        } else {
          if (K(a) && a > c) {
            return a;
          }
        }
        return c;
      }),
      (ah.getDecimalPlaces = function (a) {
        return a % 1 !== 0 && K(a) ? a.toString().split(".")[1].length : 0;
      })),
    ai = (ah.radians = function (a) {
      return a * (Math.PI / 180);
    }),
    ap =
      ((ah.getAngleFromPoint = function (g, b) {
        var a = b.x - g.x,
          f = b.y - g.y,
          c = Math.sqrt(a * a + f * f),
          d = 2 * Math.PI + Math.atan2(f, a);
        return 0 > a && 0 > f && (d += 2 * Math.PI), { angle: d, distance: c };
      }),
      (ah.aliasPixel = function (a) {
        return a % 2 === 0 ? 0 : 0.5;
      })),
    aq =
      ((ah.splineCurve = function (m, f, c, l) {
        var g = Math.sqrt(Math.pow(f.x - m.x, 2) + Math.pow(f.y - m.y, 2)),
          k = Math.sqrt(Math.pow(c.x - f.x, 2) + Math.pow(c.y - f.y, 2)),
          b = (l * g) / (g + k),
          d = (l * k) / (g + k);
        return {
          inner: { x: f.x - b * (c.x - m.x), y: f.y - b * (c.y - m.y) },
          outer: { x: f.x + d * (c.x - m.x), y: f.y + d * (c.y - m.y) },
        };
      }),
      (ah.calculateOrderOfMagnitude = function (a) {
        return Math.floor(Math.log(a) / Math.LN10);
      })),
    H =
      ((ah.calculateScaleRange = function (P, y, m, L, A) {
        var B = 2,
          b = Math.floor(y / (1.5 * m)),
          x = B >= b,
          z = O(P),
          F = Z(P);
        z === F && ((z += 0.5), F >= 0.5 && !L ? (F -= 0.5) : (z += 0.5));
        for (
          var g = Math.abs(z - F),
            R = aq(g),
            k = Math.ceil(z / (1 * Math.pow(10, R))) * Math.pow(10, R),
            C = L ? 0 : Math.floor(F / (1 * Math.pow(10, R))) * Math.pow(10, R),
            w = k - C,
            T = Math.pow(10, R),
            M = Math.round(w / T);
          (M > b || b > 2 * M) && !x;

        ) {
          if (M > b) {
            (T *= 2), (M = Math.round(w / T)), M % 1 !== 0 && (x = !0);
          } else {
            if (A && R >= 0) {
              if ((T / 2) % 1 !== 0) {
                break;
              }
              (T /= 2), (M = Math.round(w / T));
            } else {
              (T /= 2), (M = Math.round(w / T));
            }
          }
        }
        return (
          x && ((M = B), (T = w / M)),
          { steps: M, stepValue: T, min: C, max: C + M * T }
        );
      }),
      (ah.template = function (d, b) {
        function a(h, g) {
          var f = /\W/.test(h)
            ? new Function(
                "obj",
                "var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('" +
                  h
                    .replace(/[\r\t\n]/g, " ")
                    .split("<%")
                    .join("	")
                    .replace(/((^|%>)[^\t]*)'/g, "$1\r")
                    .replace(/\t=(.*?)%>/g, "',$1,'")
                    .split("	")
                    .join("');")
                    .split("%>")
                    .join("p.push('")
                    .split("\r")
                    .join("\\'") +
                  "');}return p.join('');"
              )
            : (c[h] = c[h]);
          return g ? f(g) : f;
        }
        if (d instanceof Function) {
          return d(b);
        }
        var c = {};
        return a(d, b);
      })),
    an =
      ((ah.generateLabels = function (f, b, a, d) {
        var c = new Array(b);
        return (
          labelTemplateString &&
            ab(c, function (e, g) {
              c[g] = H(f, { value: a + d * (g + 1) });
            }),
          c
        );
      }),
      (ah.easingEffects = {
        linear: function (a) {
          return a;
        },
        easeInQuad: function (a) {
          return a * a;
        },
        easeOutQuad: function (a) {
          return -1 * a * (a - 2);
        },
        easeInOutQuad: function (a) {
          return (a /= 0.5) < 1 ? 0.5 * a * a : -0.5 * (--a * (a - 2) - 1);
        },
        easeInCubic: function (a) {
          return a * a * a;
        },
        easeOutCubic: function (a) {
          return 1 * ((a = a / 1 - 1) * a * a + 1);
        },
        easeInOutCubic: function (a) {
          return (a /= 0.5) < 1
            ? 0.5 * a * a * a
            : 0.5 * ((a -= 2) * a * a + 2);
        },
        easeInQuart: function (a) {
          return a * a * a * a;
        },
        easeOutQuart: function (a) {
          return -1 * ((a = a / 1 - 1) * a * a * a - 1);
        },
        easeInOutQuart: function (a) {
          return (a /= 0.5) < 1
            ? 0.5 * a * a * a * a
            : -0.5 * ((a -= 2) * a * a * a - 2);
        },
        easeInQuint: function (a) {
          return 1 * (a /= 1) * a * a * a * a;
        },
        easeOutQuint: function (a) {
          return 1 * ((a = a / 1 - 1) * a * a * a * a + 1);
        },
        easeInOutQuint: function (a) {
          return (a /= 0.5) < 1
            ? 0.5 * a * a * a * a * a
            : 0.5 * ((a -= 2) * a * a * a * a + 2);
        },
        easeInSine: function (a) {
          return -1 * Math.cos((a / 1) * (Math.PI / 2)) + 1;
        },
        easeOutSine: function (a) {
          return 1 * Math.sin((a / 1) * (Math.PI / 2));
        },
        easeInOutSine: function (a) {
          return -0.5 * (Math.cos((Math.PI * a) / 1) - 1);
        },
        easeInExpo: function (a) {
          return 0 === a ? 1 : 1 * Math.pow(2, 10 * (a / 1 - 1));
        },
        easeOutExpo: function (a) {
          return 1 === a ? 1 : 1 * (-Math.pow(2, (-10 * a) / 1) + 1);
        },
        easeInOutExpo: function (a) {
          return 0 === a
            ? 0
            : 1 === a
            ? 1
            : (a /= 0.5) < 1
            ? 0.5 * Math.pow(2, 10 * (a - 1))
            : 0.5 * (-Math.pow(2, -10 * --a) + 2);
        },
        easeInCirc: function (a) {
          return a >= 1 ? a : -1 * (Math.sqrt(1 - (a /= 1) * a) - 1);
        },
        easeOutCirc: function (a) {
          return 1 * Math.sqrt(1 - (a = a / 1 - 1) * a);
        },
        easeInOutCirc: function (a) {
          return (a /= 0.5) < 1
            ? -0.5 * (Math.sqrt(1 - a * a) - 1)
            : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1);
        },
        easeInElastic: function (d) {
          var b = 1.70158,
            a = 0,
            c = 1;
          return 0 === d
            ? 0
            : 1 == (d /= 1)
            ? 1
            : (a || (a = 0.3),
              c < Math.abs(1)
                ? ((c = 1), (b = a / 4))
                : (b = (a / (2 * Math.PI)) * Math.asin(1 / c)),
              -(
                c *
                Math.pow(2, 10 * (d -= 1)) *
                Math.sin((2 * (1 * d - b) * Math.PI) / a)
              ));
        },
        easeOutElastic: function (d) {
          var b = 1.70158,
            a = 0,
            c = 1;
          return 0 === d
            ? 0
            : 1 == (d /= 1)
            ? 1
            : (a || (a = 0.3),
              c < Math.abs(1)
                ? ((c = 1), (b = a / 4))
                : (b = (a / (2 * Math.PI)) * Math.asin(1 / c)),
              c *
                Math.pow(2, -10 * d) *
                Math.sin((2 * (1 * d - b) * Math.PI) / a) +
                1);
        },
        easeInOutElastic: function (d) {
          var b = 1.70158,
            a = 0,
            c = 1;
          return 0 === d
            ? 0
            : 2 == (d /= 0.5)
            ? 1
            : (a || (a = 0.3 * 1.5),
              c < Math.abs(1)
                ? ((c = 1), (b = a / 4))
                : (b = (a / (2 * Math.PI)) * Math.asin(1 / c)),
              1 > d
                ? -0.5 *
                  c *
                  Math.pow(2, 10 * (d -= 1)) *
                  Math.sin((2 * (1 * d - b) * Math.PI) / a)
                : c *
                    Math.pow(2, -10 * (d -= 1)) *
                    Math.sin((2 * (1 * d - b) * Math.PI) / a) *
                    0.5 +
                  1);
        },
        easeInBack: function (b) {
          var a = 1.70158;
          return 1 * (b /= 1) * b * ((a + 1) * b - a);
        },
        easeOutBack: function (b) {
          var a = 1.70158;
          return 1 * ((b = b / 1 - 1) * b * ((a + 1) * b + a) + 1);
        },
        easeInOutBack: function (b) {
          var a = 1.70158;
          return (b /= 0.5) < 1
            ? 0.5 * b * b * (((a *= 1.525) + 1) * b - a)
            : 0.5 * ((b -= 2) * b * (((a *= 1.525) + 1) * b + a) + 2);
        },
        easeInBounce: function (a) {
          return 1 - an.easeOutBounce(1 - a);
        },
        easeOutBounce: function (a) {
          return (a /= 1) < 1 / 2.75
            ? 7.5625 * a * a
            : 2 / 2.75 > a
            ? 1 * (7.5625 * (a -= 1.5 / 2.75) * a + 0.75)
            : 2.5 / 2.75 > a
            ? 1 * (7.5625 * (a -= 2.25 / 2.75) * a + 0.9375)
            : 1 * (7.5625 * (a -= 2.625 / 2.75) * a + 0.984375);
        },
        easeInOutBounce: function (a) {
          return 0.5 > a
            ? 0.5 * an.easeInBounce(2 * a)
            : 0.5 * an.easeOutBounce(2 * a - 1) + 0.5;
        },
      })),
    D = (ah.requestAnimFrame = (function () {
      return (
        window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function (a) {
          return window.setTimeout(a, 1000 / 60);
        }
      );
    })()),
    ae = (ah.cancelAnimFrame = (function () {
      return (
        window.cancelAnimationFrame ||
        window.webkitCancelAnimationFrame ||
        window.mozCancelAnimationFrame ||
        window.oCancelAnimationFrame ||
        window.msCancelAnimationFrame ||
        function (a) {
          return window.clearTimeout(a, 1000 / 60);
        }
      );
    })()),
    Y =
      ((ah.animationLoop = function (r, f, c, p, k, m) {
        var b = 0,
          d = an[c] || an.linear,
          g = function () {
            b++;
            var a = b / f,
              h = d(a);
            r.call(m, h, a, b),
              p.call(m, h, a),
              f > b ? (m.animationFrame = D(g)) : k.apply(m);
          };
        D(g);
      }),
      (ah.getRelativePosition = function (g) {
        var b,
          a,
          f = g.originalEvent || g,
          c = g.currentTarget || g.srcElement,
          d = c.getBoundingClientRect();
        return (
          f.touches
            ? ((b = f.touches[0].clientX - d.left),
              (a = f.touches[0].clientY - d.top))
            : ((b = f.clientX - d.left), (a = f.clientY - d.top)),
          { x: b, y: a }
        );
      }),
      (ah.addEvent = function (c, b, a) {
        c.addEventListener
          ? c.addEventListener(b, a)
          : c.attachEvent
          ? c.attachEvent("on" + b, a)
          : (c["on" + b] = a);
      })),
    V = (ah.removeEvent = function (c, b, a) {
      c.removeEventListener
        ? c.removeEventListener(b, a, !1)
        : c.detachEvent
        ? c.detachEvent("on" + b, a)
        : (c["on" + b] = G);
    }),
    N =
      ((ah.bindEvents = function (c, b, a) {
        c.events || (c.events = {}),
          ab(b, function (d) {
            (c.events[d] = function () {
              a.apply(c, arguments);
            }),
              Y(c.chart.canvas, d, c.events[d]);
          });
      }),
      (ah.unbindEvents = function (b, a) {
        ab(a, function (d, c) {
          V(b.chart.canvas, c, d);
        });
      })),
    ag = (ah.getMaximumWidth = function (b) {
      var a = b.parentNode;
      return a.clientWidth;
    }),
    ak = (ah.getMaximumHeight = function (b) {
      var a = b.parentNode;
      return a.clientHeight;
    }),
    q =
      ((ah.getMaximumSize = ah.getMaximumWidth),
      (ah.retinaScale = function (d) {
        var b = d.ctx,
          a = d.canvas.width,
          c = d.canvas.height;
        window.devicePixelRatio &&
          ((b.canvas.style.width = a + "px"),
          (b.canvas.style.height = c + "px"),
          (b.canvas.height = c * window.devicePixelRatio),
          (b.canvas.width = a * window.devicePixelRatio),
          b.scale(window.devicePixelRatio, window.devicePixelRatio));
      })),
    aa = (ah.clear = function (a) {
      a.ctx.clearRect(0, 0, a.width, a.height);
    }),
    ao = (ah.fontString = function (c, b, a) {
      return b + " " + c + "px " + a;
    }),
    ar = (ah.longestText = function (d, b, a) {
      d.font = b;
      var c = 0;
      return (
        ab(a, function (g) {
          var f = d.measureText(g).width;
          c = f > c ? f : c;
        }),
        c
      );
    }),
    E = (ah.drawRoundedRectangle = function (g, b, a, f, c, d) {
      g.beginPath(),
        g.moveTo(b + d, a),
        g.lineTo(b + f - d, a),
        g.quadraticCurveTo(b + f, a, b + f, a + d),
        g.lineTo(b + f, a + c - d),
        g.quadraticCurveTo(b + f, a + c, b + f - d, a + c),
        g.lineTo(b + d, a + c),
        g.quadraticCurveTo(b, a + c, b, a + c - d),
        g.lineTo(b, a + d),
        g.quadraticCurveTo(b, a, b + d, a),
        g.closePath();
    });
  (J.instances = {}),
    (J.Type = function (c, a, b) {
      (this.options = a),
        (this.chart = b),
        (this.id = al()),
        (J.instances[this.id] = this),
        a.responsive && this.resize(),
        this.initialize.call(this, c);
    }),
    j(J.Type.prototype, {
      initialize: function () {
        return this;
      },
      clear: function () {
        return aa(this.chart), this;
      },
      stop: function () {
        return ae(this.animationFrame), this;
      },
      resize: function (d) {
        this.stop();
        var b = this.chart.canvas,
          a = ag(this.chart.canvas),
          c = this.options.maintainAspectRatio
            ? a / this.chart.aspectRatio
            : ak(this.chart.canvas);
        return (
          (b.width = this.chart.width = a),
          (b.height = this.chart.height = c),
          q(this.chart),
          "function" == typeof d &&
            d.apply(this, Array.prototype.slice.call(arguments, 1)),
          this
        );
      },
      reflow: G,
      render: function (a) {
        return (
          a && this.reflow(),
          this.options.animation && !a
            ? ah.animationLoop(
                this.draw,
                this.options.animationSteps,
                this.options.animationEasing,
                this.options.onAnimationProgress,
                this.options.onAnimationComplete,
                this
              )
            : (this.draw(), this.options.onAnimationComplete.call(this)),
          this
        );
      },
      generateLegend: function () {
        return H(this.options.legendTemplate, this);
      },
      destroy: function () {
        this.clear(), N(this, this.events);
        var a = this.chart.canvas;
        (a.width = this.chart.width),
          (a.height = this.chart.height),
          a.style.removeProperty
            ? (a.style.removeProperty("width"),
              a.style.removeProperty("height"))
            : (a.style.removeAttribute("width"),
              a.style.removeAttribute("height")),
          delete J.instances[this.id];
      },
      showTooltip: function (n, k) {
        "undefined" == typeof this.activeElements && (this.activeElements = []);
        var l = function (c) {
          var a = !1;
          return c.length !== this.activeElements.length
            ? (a = !0)
            : (ab(
                c,
                function (h, d) {
                  h !== this.activeElements[d] && (a = !0);
                },
                this
              ),
              a);
        }.call(this, n);
        if (l || k) {
          if (
            ((this.activeElements = n),
            this.draw(),
            this.options.customTooltips && this.options.customTooltips(!1),
            n.length > 0)
          ) {
            if (this.datasets && this.datasets.length > 1) {
              for (
                var b, g, m = this.datasets.length - 1;
                m >= 0 &&
                ((b =
                  this.datasets[m].points ||
                  this.datasets[m].bars ||
                  this.datasets[m].segments),
                (g = X(b, n[0])),
                -1 === g);
                m--
              ) {}
              var e = [],
                p = [],
                f = function () {
                  var x,
                    h,
                    d,
                    u,
                    v,
                    c = [],
                    s = [],
                    w = [];
                  return (
                    ah.each(this.datasets, function (a) {
                      (x = a.points || a.bars || a.segments),
                        x[g] && x[g].hasValue() && c.push(x[g]);
                    }),
                    ah.each(
                      c,
                      function (a) {
                        s.push(a.x),
                          w.push(a.y),
                          e.push(
                            ah.template(this.options.multiTooltipTemplate, a)
                          ),
                          p.push({
                            fill: a._saved.fillColor || a.fillColor,
                            stroke: a._saved.strokeColor || a.strokeColor,
                          });
                      },
                      this
                    ),
                    (v = Z(w)),
                    (d = O(w)),
                    (u = Z(s)),
                    (h = O(s)),
                    { x: u > this.chart.width / 2 ? u : h, y: (v + d) / 2 }
                  );
                }.call(this, g);
              new J.MultiTooltip({
                x: f.x,
                y: f.y,
                xPadding: this.options.tooltipXPadding,
                yPadding: this.options.tooltipYPadding,
                xOffset: this.options.tooltipXOffset,
                fillColor: this.options.tooltipFillColor,
                textColor: this.options.tooltipFontColor,
                fontFamily: this.options.tooltipFontFamily,
                fontStyle: this.options.tooltipFontStyle,
                fontSize: this.options.tooltipFontSize,
                titleTextColor: this.options.tooltipTitleFontColor,
                titleFontFamily: this.options.tooltipTitleFontFamily,
                titleFontStyle: this.options.tooltipTitleFontStyle,
                titleFontSize: this.options.tooltipTitleFontSize,
                cornerRadius: this.options.tooltipCornerRadius,
                labels: e,
                legendColors: p,
                legendColorBackground: this.options.multiTooltipKeyBackground,
                title: n[0].label,
                chart: this.chart,
                ctx: this.chart.ctx,
                custom: this.options.customTooltips,
              }).draw();
            } else {
              ab(
                n,
                function (c) {
                  var a = c.tooltipPosition();
                  new J.Tooltip({
                    x: Math.round(a.x),
                    y: Math.round(a.y),
                    xPadding: this.options.tooltipXPadding,
                    yPadding: this.options.tooltipYPadding,
                    fillColor: this.options.tooltipFillColor,
                    textColor: this.options.tooltipFontColor,
                    fontFamily: this.options.tooltipFontFamily,
                    fontStyle: this.options.tooltipFontStyle,
                    fontSize: this.options.tooltipFontSize,
                    caretHeight: this.options.tooltipCaretSize,
                    cornerRadius: this.options.tooltipCornerRadius,
                    text: H(this.options.tooltipTemplate, c),
                    chart: this.chart,
                    custom: this.options.customTooltips,
                  }).draw();
                },
                this
              );
            }
          }
          return this;
        }
      },
      toBase64Image: function () {
        return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
      },
    }),
    (J.Type.extend = function (e) {
      var a = this,
        d = function () {
          return a.apply(this, arguments);
        };
      if (
        ((d.prototype = ac(a.prototype)),
        j(d.prototype, e),
        (d.extend = J.Type.extend),
        e.name || a.prototype.name)
      ) {
        var c = e.name || a.prototype.name,
          b = J.defaults[a.prototype.name]
            ? ac(J.defaults[a.prototype.name])
            : {};
        (J.defaults[c] = j(b, e.defaults)),
          (J.types[c] = d),
          (J.prototype[c] = function (h, f) {
            var g = Q(J.defaults.global, J.defaults[c], f || {});
            return new d(h, g, this);
          });
      } else {
        I("Name not provided for this chart, so it hasn't been registered");
      }
      return a;
    }),
    (J.Element = function (a) {
      j(this, a), this.initialize.apply(this, arguments), this.save();
    }),
    j(J.Element.prototype, {
      initialize: function () {},
      restore: function (a) {
        return (
          a
            ? ab(
                a,
                function (b) {
                  this[b] = this._saved[b];
                },
                this
              )
            : j(this, this._saved),
          this
        );
      },
      save: function () {
        return (this._saved = ac(this)), delete this._saved._saved, this;
      },
      update: function (a) {
        return (
          ab(
            a,
            function (c, b) {
              (this._saved[b] = this[b]), (this[b] = c);
            },
            this
          ),
          this
        );
      },
      transition: function (b, a) {
        return (
          ab(
            b,
            function (d, c) {
              this[c] = (d - this._saved[c]) * a + this._saved[c];
            },
            this
          ),
          this
        );
      },
      tooltipPosition: function () {
        return { x: this.x, y: this.y };
      },
      hasValue: function () {
        return K(this.value);
      },
    }),
    (J.Element.extend = af),
    (J.Point = J.Element.extend({
      display: !0,
      inRange: function (c, b) {
        var a = this.hitDetectionRadius + this.radius;
        return (
          Math.pow(c - this.x, 2) + Math.pow(b - this.y, 2) < Math.pow(a, 2)
        );
      },
      draw: function () {
        if (this.display) {
          var a = this.ctx;
          a.beginPath(),
            a.arc(this.x, this.y, this.radius, 0, 2 * Math.PI),
            a.closePath(),
            (a.strokeStyle = this.strokeColor),
            (a.lineWidth = this.strokeWidth),
            (a.fillStyle = this.fillColor),
            a.fill(),
            a.stroke();
        }
      },
    })),
    (J.Arc = J.Element.extend({
      inRange: function (f, b) {
        var a = ah.getAngleFromPoint(this, { x: f, y: b }),
          c = a.angle >= this.startAngle && a.angle <= this.endAngle,
          d = a.distance >= this.innerRadius && a.distance <= this.outerRadius;
        return c && d;
      },
      tooltipPosition: function () {
        var b = this.startAngle + (this.endAngle - this.startAngle) / 2,
          a = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;
        return { x: this.x + Math.cos(b) * a, y: this.y + Math.sin(b) * a };
      },
      draw: function (b) {
        var a = this.ctx;
        a.beginPath(),
          a.arc(
            this.x,
            this.y,
            this.outerRadius,
            this.startAngle,
            this.endAngle
          ),
          a.arc(
            this.x,
            this.y,
            this.innerRadius,
            this.endAngle,
            this.startAngle,
            !0
          ),
          a.closePath(),
          (a.strokeStyle = this.strokeColor),
          (a.lineWidth = this.strokeWidth),
          (a.fillStyle = this.fillColor),
          a.fill(),
          (a.lineJoin = "bevel"),
          this.showStroke && a.stroke();
      },
    })),
    (J.Rectangle = J.Element.extend({
      draw: function () {
        var g = this.ctx,
          b = this.width / 2,
          a = this.x - b,
          f = this.x + b,
          c = this.base - (this.base - this.y),
          d = this.strokeWidth / 2;
        this.showStroke && ((a += d), (f -= d), (c += d)),
          g.beginPath(),
          (g.fillStyle = this.fillColor),
          (g.strokeStyle = this.strokeColor),
          (g.lineWidth = this.strokeWidth),
          g.moveTo(a, this.base),
          g.lineTo(a, c),
          g.lineTo(f, c),
          g.lineTo(f, this.base),
          g.fill(),
          this.showStroke && g.stroke();
      },
      height: function () {
        return this.base - this.y;
      },
      inRange: function (b, a) {
        return (
          b >= this.x - this.width / 2 &&
          b <= this.x + this.width / 2 &&
          a >= this.y &&
          a <= this.base
        );
      },
    })),
    (J.Tooltip = J.Element.extend({
      draw: function () {
        var k = this.chart.ctx;
        (k.font = ao(this.fontSize, this.fontStyle, this.fontFamily)),
          (this.xAlign = "center"),
          (this.yAlign = "above");
        var d = (this.caretPadding = 2),
          c = k.measureText(this.text).width + 2 * this.xPadding,
          h = this.fontSize + 2 * this.yPadding,
          f = h + this.caretHeight + d;
        this.x + c / 2 > this.chart.width
          ? (this.xAlign = "left")
          : this.x - c / 2 < 0 && (this.xAlign = "right"),
          this.y - f < 0 && (this.yAlign = "below");
        var g = this.x - c / 2,
          b = this.y - f;
        if (((k.fillStyle = this.fillColor), this.custom)) {
          this.custom(this);
        } else {
          switch (this.yAlign) {
            case "above":
              k.beginPath(),
                k.moveTo(this.x, this.y - d),
                k.lineTo(
                  this.x + this.caretHeight,
                  this.y - (d + this.caretHeight)
                ),
                k.lineTo(
                  this.x - this.caretHeight,
                  this.y - (d + this.caretHeight)
                ),
                k.closePath(),
                k.fill();
              break;
            case "below":
              (b = this.y + d + this.caretHeight),
                k.beginPath(),
                k.moveTo(this.x, this.y + d),
                k.lineTo(
                  this.x + this.caretHeight,
                  this.y + d + this.caretHeight
                ),
                k.lineTo(
                  this.x - this.caretHeight,
                  this.y + d + this.caretHeight
                ),
                k.closePath(),
                k.fill();
          }
          switch (this.xAlign) {
            case "left":
              g = this.x - c + (this.cornerRadius + this.caretHeight);
              break;
            case "right":
              g = this.x - (this.cornerRadius + this.caretHeight);
          }
          E(k, g, b, c, h, this.cornerRadius),
            k.fill(),
            (k.fillStyle = this.textColor),
            (k.textAlign = "center"),
            (k.textBaseline = "middle"),
            k.fillText(this.text, g + c / 2, b + h / 2);
        }
      },
    })),
    (J.MultiTooltip = J.Element.extend({
      initialize: function () {
        (this.font = ao(this.fontSize, this.fontStyle, this.fontFamily)),
          (this.titleFont = ao(
            this.titleFontSize,
            this.titleFontStyle,
            this.titleFontFamily
          )),
          (this.height =
            this.labels.length * this.fontSize +
            (this.labels.length - 1) * (this.fontSize / 2) +
            2 * this.yPadding +
            1.5 * this.titleFontSize),
          (this.ctx.font = this.titleFont);
        var d = this.ctx.measureText(this.title).width,
          b = ar(this.ctx, this.font, this.labels) + this.fontSize + 3,
          a = O([b, d]);
        this.width = a + 2 * this.xPadding;
        var c = this.height / 2;
        this.y - c < 0
          ? (this.y = c)
          : this.y + c > this.chart.height && (this.y = this.chart.height - c),
          this.x > this.chart.width / 2
            ? (this.x -= this.xOffset + this.width)
            : (this.x += this.xOffset);
      },
      getLineHeight: function (c) {
        var b = this.y - this.height / 2 + this.yPadding,
          a = c - 1;
        return 0 === c
          ? b + this.titleFontSize / 2
          : b +
              (1.5 * this.fontSize * a + this.fontSize / 2) +
              1.5 * this.titleFontSize;
      },
      draw: function () {
        if (this.custom) {
          this.custom(this);
        } else {
          E(
            this.ctx,
            this.x,
            this.y - this.height / 2,
            this.width,
            this.height,
            this.cornerRadius
          );
          var a = this.ctx;
          (a.fillStyle = this.fillColor),
            a.fill(),
            a.closePath(),
            (a.textAlign = "left"),
            (a.textBaseline = "middle"),
            (a.fillStyle = this.titleTextColor),
            (a.font = this.titleFont),
            a.fillText(
              this.title,
              this.x + this.xPadding,
              this.getLineHeight(0)
            ),
            (a.font = this.font),
            ah.each(
              this.labels,
              function (c, b) {
                (a.fillStyle = this.textColor),
                  a.fillText(
                    c,
                    this.x + this.xPadding + this.fontSize + 3,
                    this.getLineHeight(b + 1)
                  ),
                  (a.fillStyle = this.legendColorBackground),
                  a.fillRect(
                    this.x + this.xPadding,
                    this.getLineHeight(b + 1) - this.fontSize / 2,
                    this.fontSize,
                    this.fontSize
                  ),
                  (a.fillStyle = this.legendColors[b].fill),
                  a.fillRect(
                    this.x + this.xPadding,
                    this.getLineHeight(b + 1) - this.fontSize / 2,
                    this.fontSize,
                    this.fontSize
                  );
              },
              this
            );
        }
      },
    })),
    (J.Scale = J.Element.extend({
      initialize: function () {
        this.fit();
      },
      buildYLabels: function () {
        this.yLabels = [];
        for (var b = am(this.stepValue), a = 0; a <= this.steps; a++) {
          this.yLabels.push(
            H(this.templateString, {
              value: (this.min + a * this.stepValue).toFixed(b),
            })
          );
        }
        this.yLabelWidth =
          this.display && this.showLabels
            ? ar(this.ctx, this.font, this.yLabels)
            : 0;
      },
      addXLabel: function (a) {
        this.xLabels.push(a), this.valuesCount++, this.fit();
      },
      removeXLabel: function () {
        this.xLabels.shift(), this.valuesCount--, this.fit();
      },
      fit: function () {
        (this.startPoint = this.display ? this.fontSize : 0),
          (this.endPoint = this.display
            ? this.height - 1.5 * this.fontSize - 5
            : this.height),
          (this.startPoint += this.padding),
          (this.endPoint -= this.padding);
        var b,
          a = this.endPoint - this.startPoint;
        for (
          this.calculateYRange(a),
            this.buildYLabels(),
            this.calculateXLabelRotation();
          a > this.endPoint - this.startPoint;

        ) {
          (a = this.endPoint - this.startPoint),
            (b = this.yLabelWidth),
            this.calculateYRange(a),
            this.buildYLabels(),
            b < this.yLabelWidth && this.calculateXLabelRotation();
        }
      },
      calculateXLabelRotation: function () {
        this.ctx.font = this.font;
        var k,
          d,
          c = this.ctx.measureText(this.xLabels[0]).width,
          h = this.ctx.measureText(this.xLabels[this.xLabels.length - 1]).width;
        if (
          ((this.xScalePaddingRight = h / 2 + 3),
          (this.xScalePaddingLeft =
            c / 2 > this.yLabelWidth + 10 ? c / 2 : this.yLabelWidth + 10),
          (this.xLabelRotation = 0),
          this.display)
        ) {
          var f,
            g = ar(this.ctx, this.font, this.xLabels);
          this.xLabelWidth = g;
          for (
            var b = Math.floor(this.calculateX(1) - this.calculateX(0)) - 6;
            (this.xLabelWidth > b && 0 === this.xLabelRotation) ||
            (this.xLabelWidth > b &&
              this.xLabelRotation <= 90 &&
              this.xLabelRotation > 0);

          ) {
            (f = Math.cos(ai(this.xLabelRotation))),
              (k = f * c),
              (d = f * h),
              k + this.fontSize / 2 > this.yLabelWidth + 8 &&
                (this.xScalePaddingLeft = k + this.fontSize / 2),
              (this.xScalePaddingRight = this.fontSize / 2),
              this.xLabelRotation++,
              (this.xLabelWidth = f * g);
          }
          this.xLabelRotation > 0 &&
            (this.endPoint -= Math.sin(ai(this.xLabelRotation)) * g + 3);
        } else {
          (this.xLabelWidth = 0),
            (this.xScalePaddingRight = this.padding),
            (this.xScalePaddingLeft = this.padding);
        }
      },
      calculateYRange: G,
      drawingArea: function () {
        return this.startPoint - this.endPoint;
      },
      calculateY: function (b) {
        var a = this.drawingArea() / (this.min - this.max);
        return this.endPoint - a * (b - this.min);
      },
      calculateX: function (d) {
        var b =
            (this.xLabelRotation > 0,
            this.width - (this.xScalePaddingLeft + this.xScalePaddingRight)),
          a =
            b / Math.max(this.valuesCount - (this.offsetGridLines ? 0 : 1), 1),
          c = a * d + this.xScalePaddingLeft;
        return this.offsetGridLines && (c += a / 2), Math.round(c);
      },
      update: function (a) {
        ah.extend(this, a), this.fit();
      },
      draw: function () {
        var c = this.ctx,
          b = (this.endPoint - this.startPoint) / this.steps,
          a = Math.round(this.xScalePaddingLeft);
        this.display &&
          ((c.fillStyle = this.textColor),
          (c.font = this.font),
          ab(
            this.yLabels,
            function (g, k) {
              var d = this.endPoint - b * k,
                e = Math.round(d),
                f = this.showHorizontalLines;
              (c.textAlign = "right"),
                (c.textBaseline = "middle"),
                this.showLabels && c.fillText(g, a - 10, d),
                0 !== k || f || (f = !0),
                f && c.beginPath(),
                k > 0
                  ? ((c.lineWidth = this.gridLineWidth),
                    (c.strokeStyle = this.gridLineColor))
                  : ((c.lineWidth = this.lineWidth),
                    (c.strokeStyle = this.lineColor)),
                (e += ah.aliasPixel(c.lineWidth)),
                f &&
                  (c.moveTo(a, e),
                  c.lineTo(this.width, e),
                  c.stroke(),
                  c.closePath()),
                (c.lineWidth = this.lineWidth),
                (c.strokeStyle = this.lineColor),
                c.beginPath(),
                c.moveTo(a - 5, e),
                c.lineTo(a, e),
                c.stroke(),
                c.closePath();
            },
            this
          ),
          ab(
            this.xLabels,
            function (g, f) {
              var l = this.calculateX(f) + ap(this.lineWidth),
                h =
                  this.calculateX(f - (this.offsetGridLines ? 0.5 : 0)) +
                  ap(this.lineWidth),
                k = this.xLabelRotation > 0,
                d = this.showVerticalLines;
              0 !== f || d || (d = !0),
                d && c.beginPath(),
                f > 0
                  ? ((c.lineWidth = this.gridLineWidth),
                    (c.strokeStyle = this.gridLineColor))
                  : ((c.lineWidth = this.lineWidth),
                    (c.strokeStyle = this.lineColor)),
                d &&
                  (c.moveTo(h, this.endPoint),
                  c.lineTo(h, this.startPoint - 3),
                  c.stroke(),
                  c.closePath()),
                (c.lineWidth = this.lineWidth),
                (c.strokeStyle = this.lineColor),
                c.beginPath(),
                c.moveTo(h, this.endPoint),
                c.lineTo(h, this.endPoint + 5),
                c.stroke(),
                c.closePath(),
                c.save(),
                c.translate(l, k ? this.endPoint + 12 : this.endPoint + 8),
                c.rotate(-1 * ai(this.xLabelRotation)),
                (c.font = this.font),
                (c.textAlign = k ? "right" : "center"),
                (c.textBaseline = k ? "middle" : "top"),
                c.fillText(g, 0, 0),
                c.restore();
            },
            this
          ));
      },
    })),
    (J.RadialScale = J.Element.extend({
      initialize: function () {
        (this.size = Z([this.height, this.width])),
          (this.drawingArea = this.display
            ? this.size / 2 - (this.fontSize / 2 + this.backdropPaddingY)
            : this.size / 2);
      },
      calculateCenterOffset: function (b) {
        var a = this.drawingArea / (this.max - this.min);
        return (b - this.min) * a;
      },
      update: function () {
        this.lineArc
          ? (this.drawingArea = this.display
              ? this.size / 2 - (this.fontSize / 2 + this.backdropPaddingY)
              : this.size / 2)
          : this.setScaleSize(),
          this.buildYLabels();
      },
      buildYLabels: function () {
        this.yLabels = [];
        for (var b = am(this.stepValue), a = 0; a <= this.steps; a++) {
          this.yLabels.push(
            H(this.templateString, {
              value: (this.min + a * this.stepValue).toFixed(b),
            })
          );
        }
      },
      getCircumference: function () {
        return (2 * Math.PI) / this.valuesCount;
      },
      setScaleSize: function () {
        var L,
          x,
          m,
          F,
          z,
          A,
          b,
          w,
          y,
          C,
          f,
          M,
          k = Z([
            this.height / 2 - this.pointLabelFontSize - 5,
            this.width / 2,
          ]),
          B = this.width,
          v = 0;
        for (
          this.ctx.font = ao(
            this.pointLabelFontSize,
            this.pointLabelFontStyle,
            this.pointLabelFontFamily
          ),
            x = 0;
          x < this.valuesCount;
          x++
        ) {
          (L = this.getPointPosition(x, k)),
            (m =
              this.ctx.measureText(
                H(this.templateString, { value: this.labels[x] })
              ).width + 5),
            0 === x || x === this.valuesCount / 2
              ? ((F = m / 2),
                L.x + F > B && ((B = L.x + F), (z = x)),
                L.x - F < v && ((v = L.x - F), (b = x)))
              : x < this.valuesCount / 2
              ? L.x + m > B && ((B = L.x + m), (z = x))
              : x > this.valuesCount / 2 &&
                L.x - m < v &&
                ((v = L.x - m), (b = x));
        }
        (y = v),
          (C = Math.ceil(B - this.width)),
          (A = this.getIndexAngle(z)),
          (w = this.getIndexAngle(b)),
          (f = C / Math.sin(A + Math.PI / 2)),
          (M = y / Math.sin(w + Math.PI / 2)),
          (f = K(f) ? f : 0),
          (M = K(M) ? M : 0),
          (this.drawingArea = k - (M + f) / 2),
          this.setCenterPoint(M, f);
      },
      setCenterPoint: function (d, b) {
        var a = this.width - b - this.drawingArea,
          c = d + this.drawingArea;
        (this.xCenter = (c + a) / 2), (this.yCenter = this.height / 2);
      },
      getIndexAngle: function (b) {
        var a = (2 * Math.PI) / this.valuesCount;
        return b * a - Math.PI / 2;
      },
      getPointPosition: function (c, b) {
        var a = this.getIndexAngle(c);
        return {
          x: Math.cos(a) * b + this.xCenter,
          y: Math.sin(a) * b + this.yCenter,
        };
      },
      draw: function () {
        if (this.display) {
          var p = this.ctx;
          if (
            (ab(
              this.yLabels,
              function (u, r) {
                if (r > 0) {
                  var x,
                    v = r * (this.drawingArea / this.steps),
                    w = this.yCenter - v;
                  if (this.lineWidth > 0) {
                    if (
                      ((p.strokeStyle = this.lineColor),
                      (p.lineWidth = this.lineWidth),
                      this.lineArc)
                    ) {
                      p.beginPath(),
                        p.arc(this.xCenter, this.yCenter, v, 0, 2 * Math.PI),
                        p.closePath(),
                        p.stroke();
                    } else {
                      p.beginPath();
                      for (var l = 0; l < this.valuesCount; l++) {
                        (x = this.getPointPosition(
                          l,
                          this.calculateCenterOffset(
                            this.min + r * this.stepValue
                          )
                        )),
                          0 === l ? p.moveTo(x.x, x.y) : p.lineTo(x.x, x.y);
                      }
                      p.closePath(), p.stroke();
                    }
                  }
                  if (this.showLabels) {
                    if (
                      ((p.font = ao(
                        this.fontSize,
                        this.fontStyle,
                        this.fontFamily
                      )),
                      this.showLabelBackdrop)
                    ) {
                      var t = p.measureText(u).width;
                      (p.fillStyle = this.backdropColor),
                        p.fillRect(
                          this.xCenter - t / 2 - this.backdropPaddingX,
                          w - this.fontSize / 2 - this.backdropPaddingY,
                          t + 2 * this.backdropPaddingX,
                          this.fontSize + 2 * this.backdropPaddingY
                        );
                    }
                    (p.textAlign = "center"),
                      (p.textBaseline = "middle"),
                      (p.fillStyle = this.fontColor),
                      p.fillText(u, this.xCenter, w);
                  }
                }
              },
              this
            ),
            !this.lineArc)
          ) {
            (p.lineWidth = this.angleLineWidth),
              (p.strokeStyle = this.angleLineColor);
            for (var f = this.valuesCount - 1; f >= 0; f--) {
              if (this.angleLineWidth > 0) {
                var c = this.getPointPosition(
                  f,
                  this.calculateCenterOffset(this.max)
                );
                p.beginPath(),
                  p.moveTo(this.xCenter, this.yCenter),
                  p.lineTo(c.x, c.y),
                  p.stroke(),
                  p.closePath();
              }
              var n = this.getPointPosition(
                f,
                this.calculateCenterOffset(this.max) + 5
              );
              (p.font = ao(
                this.pointLabelFontSize,
                this.pointLabelFontStyle,
                this.pointLabelFontFamily
              )),
                (p.fillStyle = this.pointLabelFontColor);
              var k = this.labels.length,
                b = this.labels.length / 2,
                d = b / 2,
                g = d > f || f > k - d,
                m = f === d || f === k - d;
              (p.textAlign =
                0 === f
                  ? "center"
                  : f === b
                  ? "center"
                  : b > f
                  ? "left"
                  : "right"),
                (p.textBaseline = m ? "middle" : g ? "bottom" : "top"),
                p.fillText(this.labels[f], n.x, n.y);
            }
          }
        }
      },
    })),
    ah.addEvent(
      window,
      "resize",
      (function () {
        var a;
        return function () {
          clearTimeout(a),
            (a = setTimeout(function () {
              ab(J.instances, function (b) {
                b.options.responsive && b.resize(b.render, !0);
              });
            }, 50));
        };
      })()
    ),
    ad
      ? define(function () {
          return J;
        })
      : "object" == typeof module && module.exports && (module.exports = J),
    (aj.Chart = J),
    (J.noConflict = function () {
      return (aj.Chart = U), J;
    });
}.call(this),
  function () {
    var d = this,
      b = d.Chart,
      a = b.helpers,
      c = {
        scaleBeginAtZero: !0,
        scaleShowGridLines: !0,
        scaleGridLineColor: "rgba(0,0,0,.05)",
        scaleGridLineWidth: 1,
        scaleShowHorizontalLines: !0,
        scaleShowVerticalLines: !0,
        barShowStroke: !0,
        barStrokeWidth: 2,
        barValueSpacing: 5,
        barDatasetSpacing: 1,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
      };
    b.Type.extend({
      name: "Bar",
      defaults: c,
      initialize: function (f) {
        var e = this.options;
        (this.ScaleClass = b.Scale.extend({
          offsetGridLines: !0,
          calculateBarX: function (m, j, h) {
            var k = this.calculateBaseWidth(),
              l = this.calculateX(h) - k / 2,
              g = this.calculateBarWidth(m);
            return l + g * j + j * e.barDatasetSpacing + g / 2;
          },
          calculateBaseWidth: function () {
            return (
              this.calculateX(1) - this.calculateX(0) - 2 * e.barValueSpacing
            );
          },
          calculateBarWidth: function (h) {
            var g = this.calculateBaseWidth() - (h - 1) * e.barDatasetSpacing;
            return g / h;
          },
        })),
          (this.datasets = []),
          this.options.showTooltips &&
            a.bindEvents(this, this.options.tooltipEvents, function (h) {
              var g = "mouseout" !== h.type ? this.getBarsAtEvent(h) : [];
              this.eachBars(function (j) {
                j.restore(["fillColor", "strokeColor"]);
              }),
                a.each(g, function (j) {
                  (j.fillColor = j.highlightFill),
                    (j.strokeColor = j.highlightStroke);
                }),
                this.showTooltip(g);
            }),
          (this.BarClass = b.Rectangle.extend({
            strokeWidth: this.options.barStrokeWidth,
            showStroke: this.options.barShowStroke,
            ctx: this.chart.ctx,
          })),
          a.each(
            f.datasets,
            function (g) {
              var h = {
                label: g.label || null,
                fillColor: g.fillColor,
                strokeColor: g.strokeColor,
                bars: [],
              };
              this.datasets.push(h),
                a.each(
                  g.data,
                  function (j, k) {
                    h.bars.push(
                      new this.BarClass({
                        value: j,
                        label: f.labels[k],
                        datasetLabel: g.label,
                        strokeColor: g.strokeColor,
                        fillColor: g.fillColor,
                        highlightFill: g.highlightFill || g.fillColor,
                        highlightStroke: g.highlightStroke || g.strokeColor,
                      })
                    );
                  },
                  this
                );
            },
            this
          ),
          this.buildScale(f.labels),
          (this.BarClass.prototype.base = this.scale.endPoint),
          this.eachBars(function (j, g, h) {
            a.extend(j, {
              width: this.scale.calculateBarWidth(this.datasets.length),
              x: this.scale.calculateBarX(this.datasets.length, h, g),
              y: this.scale.endPoint,
            }),
              j.save();
          }, this),
          this.render();
      },
      update: function () {
        this.scale.update(),
          a.each(this.activeElements, function (e) {
            e.restore(["fillColor", "strokeColor"]);
          }),
          this.eachBars(function (e) {
            e.save();
          }),
          this.render();
      },
      eachBars: function (e) {
        a.each(
          this.datasets,
          function (f, g) {
            a.each(f.bars, e, this, g);
          },
          this
        );
      },
      getBarsAtEvent: function (k) {
        for (
          var f,
            j = [],
            g = a.getRelativePosition(k),
            h = function (l) {
              j.push(l.bars[f]);
            },
            e = 0;
          e < this.datasets.length;
          e++
        ) {
          for (f = 0; f < this.datasets[e].bars.length; f++) {
            if (this.datasets[e].bars[f].inRange(g.x, g.y)) {
              return a.each(this.datasets, h), j;
            }
          }
        }
        return j;
      },
      buildScale: function (h) {
        var e = this,
          g = function () {
            var j = [];
            return (
              e.eachBars(function (k) {
                j.push(k.value);
              }),
              j
            );
          },
          f = {
            templateString: this.options.scaleLabel,
            height: this.chart.height,
            width: this.chart.width,
            ctx: this.chart.ctx,
            textColor: this.options.scaleFontColor,
            fontSize: this.options.scaleFontSize,
            fontStyle: this.options.scaleFontStyle,
            fontFamily: this.options.scaleFontFamily,
            valuesCount: h.length,
            beginAtZero: this.options.scaleBeginAtZero,
            integersOnly: this.options.scaleIntegersOnly,
            calculateYRange: function (k) {
              var j = a.calculateScaleRange(
                g(),
                k,
                this.fontSize,
                this.beginAtZero,
                this.integersOnly
              );
              a.extend(this, j);
            },
            xLabels: h,
            font: a.fontString(
              this.options.scaleFontSize,
              this.options.scaleFontStyle,
              this.options.scaleFontFamily
            ),
            lineWidth: this.options.scaleLineWidth,
            lineColor: this.options.scaleLineColor,
            showHorizontalLines: this.options.scaleShowHorizontalLines,
            showVerticalLines: this.options.scaleShowVerticalLines,
            gridLineWidth: this.options.scaleShowGridLines
              ? this.options.scaleGridLineWidth
              : 0,
            gridLineColor: this.options.scaleShowGridLines
              ? this.options.scaleGridLineColor
              : "rgba(0,0,0,0)",
            padding: this.options.showScale
              ? 0
              : this.options.barShowStroke
              ? this.options.barStrokeWidth
              : 0,
            showLabels: this.options.scaleShowLabels,
            display: this.options.showScale,
          };
        this.options.scaleOverride &&
          a.extend(f, {
            calculateYRange: a.noop,
            steps: this.options.scaleSteps,
            stepValue: this.options.scaleStepWidth,
            min: this.options.scaleStartValue,
            max:
              this.options.scaleStartValue +
              this.options.scaleSteps * this.options.scaleStepWidth,
          }),
          (this.scale = new this.ScaleClass(f));
      },
      addData: function (f, e) {
        a.each(
          f,
          function (h, g) {
            this.datasets[g].bars.push(
              new this.BarClass({
                value: h,
                label: e,
                x: this.scale.calculateBarX(
                  this.datasets.length,
                  g,
                  this.scale.valuesCount + 1
                ),
                y: this.scale.endPoint,
                width: this.scale.calculateBarWidth(this.datasets.length),
                base: this.scale.endPoint,
                strokeColor: this.datasets[g].strokeColor,
                fillColor: this.datasets[g].fillColor,
              })
            );
          },
          this
        ),
          this.scale.addXLabel(e),
          this.update();
      },
      removeData: function () {
        this.scale.removeXLabel(),
          a.each(
            this.datasets,
            function (e) {
              e.bars.shift();
            },
            this
          ),
          this.update();
      },
      reflow: function () {
        a.extend(this.BarClass.prototype, {
          y: this.scale.endPoint,
          base: this.scale.endPoint,
        });
        var e = a.extend({
          height: this.chart.height,
          width: this.chart.width,
        });
        this.scale.update(e);
      },
      draw: function (f) {
        var e = f || 1;
        this.clear();
        this.chart.ctx;
        this.scale.draw(e),
          a.each(
            this.datasets,
            function (h, g) {
              a.each(
                h.bars,
                function (k, j) {
                  k.hasValue() &&
                    ((k.base = this.scale.endPoint),
                    k
                      .transition(
                        {
                          x: this.scale.calculateBarX(
                            this.datasets.length,
                            g,
                            j
                          ),
                          y: this.scale.calculateY(k.value),
                          width: this.scale.calculateBarWidth(
                            this.datasets.length
                          ),
                        },
                        e
                      )
                      .draw());
                },
                this
              );
            },
            this
          );
      },
    });
  }.call(this),
  function () {
    var d = this,
      b = d.Chart,
      a = b.helpers,
      c = {
        segmentShowStroke: !0,
        segmentStrokeColor: "#fff",
        segmentStrokeWidth: 2,
        percentageInnerCutout: 50,
        animationSteps: 100,
        animationEasing: "easeOutBounce",
        animateRotate: !0,
        animateScale: !1,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>',
      };
    b.Type.extend({
      name: "Doughnut",
      defaults: c,
      initialize: function (e) {
        (this.segments = []),
          (this.outerRadius =
            (a.min([this.chart.width, this.chart.height]) -
              this.options.segmentStrokeWidth / 2) /
            2),
          (this.SegmentArc = b.Arc.extend({
            ctx: this.chart.ctx,
            x: this.chart.width / 2,
            y: this.chart.height / 2,
          })),
          this.options.showTooltips &&
            a.bindEvents(this, this.options.tooltipEvents, function (g) {
              var f = "mouseout" !== g.type ? this.getSegmentsAtEvent(g) : [];
              a.each(this.segments, function (h) {
                h.restore(["fillColor"]);
              }),
                a.each(f, function (h) {
                  h.fillColor = h.highlightColor;
                }),
                this.showTooltip(f);
            }),
          this.calculateTotal(e),
          a.each(
            e,
            function (g, f) {
              this.addData(g, f, !0);
            },
            this
          ),
          this.render();
      },
      getSegmentsAtEvent: function (g) {
        var e = [],
          f = a.getRelativePosition(g);
        return (
          a.each(
            this.segments,
            function (h) {
              h.inRange(f.x, f.y) && e.push(h);
            },
            this
          ),
          e
        );
      },
      addData: function (j, g, f) {
        var h = g || this.segments.length;
        this.segments.splice(
          h,
          0,
          new this.SegmentArc({
            value: j.value,
            outerRadius: this.options.animateScale ? 0 : this.outerRadius,
            innerRadius: this.options.animateScale
              ? 0
              : (this.outerRadius / 100) * this.options.percentageInnerCutout,
            fillColor: j.color,
            highlightColor: j.highlight || j.color,
            showStroke: this.options.segmentShowStroke,
            strokeWidth: this.options.segmentStrokeWidth,
            strokeColor: this.options.segmentStrokeColor,
            startAngle: 1.5 * Math.PI,
            circumference: this.options.animateRotate
              ? 0
              : this.calculateCircumference(j.value),
            label: j.label,
          })
        ),
          f || (this.reflow(), this.update());
      },
      calculateCircumference: function (e) {
        return 2 * Math.PI * (Math.abs(e) / this.total);
      },
      calculateTotal: function (e) {
        (this.total = 0),
          a.each(
            e,
            function (f) {
              this.total += Math.abs(f.value);
            },
            this
          );
      },
      update: function () {
        this.calculateTotal(this.segments),
          a.each(this.activeElements, function (e) {
            e.restore(["fillColor"]);
          }),
          a.each(this.segments, function (e) {
            e.save();
          }),
          this.render();
      },
      removeData: function (f) {
        var e = a.isNumber(f) ? f : this.segments.length - 1;
        this.segments.splice(e, 1), this.reflow(), this.update();
      },
      reflow: function () {
        a.extend(this.SegmentArc.prototype, {
          x: this.chart.width / 2,
          y: this.chart.height / 2,
        }),
          (this.outerRadius =
            (a.min([this.chart.width, this.chart.height]) -
              this.options.segmentStrokeWidth / 2) /
            2),
          a.each(
            this.segments,
            function (e) {
              e.update({
                outerRadius: this.outerRadius,
                innerRadius:
                  (this.outerRadius / 100) * this.options.percentageInnerCutout,
              });
            },
            this
          );
      },
      draw: function (f) {
        var e = f ? f : 1;
        this.clear(),
          a.each(
            this.segments,
            function (h, g) {
              h.transition(
                {
                  circumference: this.calculateCircumference(h.value),
                  outerRadius: this.outerRadius,
                  innerRadius:
                    (this.outerRadius / 100) *
                    this.options.percentageInnerCutout,
                },
                e
              ),
                (h.endAngle = h.startAngle + h.circumference),
                h.draw(),
                0 === g && (h.startAngle = 1.5 * Math.PI),
                g < this.segments.length - 1 &&
                  (this.segments[g + 1].startAngle = h.endAngle);
            },
            this
          );
      },
    }),
      b.types.Doughnut.extend({
        name: "Pie",
        defaults: a.merge(c, { percentageInnerCutout: 0 }),
      });
  }.call(this),
  function () {
    var d = this,
      b = d.Chart,
      a = b.helpers,
      c = {
        scaleShowGridLines: !0,
        scaleGridLineColor: "rgba(0,0,0,.05)",
        scaleGridLineWidth: 1,
        scaleShowHorizontalLines: !0,
        scaleShowVerticalLines: !0,
        bezierCurve: !0,
        bezierCurveTension: 0.4,
        pointDot: !0,
        pointDotRadius: 4,
        pointDotStrokeWidth: 1,
        pointHitDetectionRadius: 20,
        datasetStroke: !0,
        datasetStrokeWidth: 2,
        datasetFill: !0,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
      };
    b.Type.extend({
      name: "Line",
      defaults: c,
      initialize: function (e) {
        (this.PointClass = b.Point.extend({
          strokeWidth: this.options.pointDotStrokeWidth,
          radius: this.options.pointDotRadius,
          display: this.options.pointDot,
          hitDetectionRadius: this.options.pointHitDetectionRadius,
          ctx: this.chart.ctx,
          inRange: function (f) {
            return (
              Math.pow(f - this.x, 2) <
              Math.pow(this.radius + this.hitDetectionRadius, 2)
            );
          },
        })),
          (this.datasets = []),
          this.options.showTooltips &&
            a.bindEvents(this, this.options.tooltipEvents, function (g) {
              var f = "mouseout" !== g.type ? this.getPointsAtEvent(g) : [];
              this.eachPoints(function (h) {
                h.restore(["fillColor", "strokeColor"]);
              }),
                a.each(f, function (h) {
                  (h.fillColor = h.highlightFill),
                    (h.strokeColor = h.highlightStroke);
                }),
                this.showTooltip(f);
            }),
          a.each(
            e.datasets,
            function (f) {
              var g = {
                label: f.label || null,
                fillColor: f.fillColor,
                strokeColor: f.strokeColor,
                pointColor: f.pointColor,
                pointStrokeColor: f.pointStrokeColor,
                points: [],
              };
              this.datasets.push(g),
                a.each(
                  f.data,
                  function (h, j) {
                    g.points.push(
                      new this.PointClass({
                        value: h,
                        label: e.labels[j],
                        datasetLabel: f.label,
                        strokeColor: f.pointStrokeColor,
                        fillColor: f.pointColor,
                        highlightFill: f.pointHighlightFill || f.pointColor,
                        highlightStroke:
                          f.pointHighlightStroke || f.pointStrokeColor,
                      })
                    );
                  },
                  this
                ),
                this.buildScale(e.labels),
                this.eachPoints(function (j, h) {
                  a.extend(j, {
                    x: this.scale.calculateX(h),
                    y: this.scale.endPoint,
                  }),
                    j.save();
                }, this);
            },
            this
          ),
          this.render();
      },
      update: function () {
        this.scale.update(),
          a.each(this.activeElements, function (e) {
            e.restore(["fillColor", "strokeColor"]);
          }),
          this.eachPoints(function (e) {
            e.save();
          }),
          this.render();
      },
      eachPoints: function (e) {
        a.each(
          this.datasets,
          function (f) {
            a.each(f.points, e, this);
          },
          this
        );
      },
      getPointsAtEvent: function (g) {
        var e = [],
          f = a.getRelativePosition(g);
        return (
          a.each(
            this.datasets,
            function (h) {
              a.each(h.points, function (j) {
                j.inRange(f.x, f.y) && e.push(j);
              });
            },
            this
          ),
          e
        );
      },
      buildScale: function (h) {
        var g = this,
          e = function () {
            var j = [];
            return (
              g.eachPoints(function (k) {
                j.push(k.value);
              }),
              j
            );
          },
          f = {
            templateString: this.options.scaleLabel,
            height: this.chart.height,
            width: this.chart.width,
            ctx: this.chart.ctx,
            textColor: this.options.scaleFontColor,
            fontSize: this.options.scaleFontSize,
            fontStyle: this.options.scaleFontStyle,
            fontFamily: this.options.scaleFontFamily,
            valuesCount: h.length,
            beginAtZero: this.options.scaleBeginAtZero,
            integersOnly: this.options.scaleIntegersOnly,
            calculateYRange: function (k) {
              var j = a.calculateScaleRange(
                e(),
                k,
                this.fontSize,
                this.beginAtZero,
                this.integersOnly
              );
              a.extend(this, j);
            },
            xLabels: h,
            font: a.fontString(
              this.options.scaleFontSize,
              this.options.scaleFontStyle,
              this.options.scaleFontFamily
            ),
            lineWidth: this.options.scaleLineWidth,
            lineColor: this.options.scaleLineColor,
            showHorizontalLines: this.options.scaleShowHorizontalLines,
            showVerticalLines: this.options.scaleShowVerticalLines,
            gridLineWidth: this.options.scaleShowGridLines
              ? this.options.scaleGridLineWidth
              : 0,
            gridLineColor: this.options.scaleShowGridLines
              ? this.options.scaleGridLineColor
              : "rgba(0,0,0,0)",
            padding: this.options.showScale
              ? 0
              : this.options.pointDotRadius + this.options.pointDotStrokeWidth,
            showLabels: this.options.scaleShowLabels,
            display: this.options.showScale,
          };
        this.options.scaleOverride &&
          a.extend(f, {
            calculateYRange: a.noop,
            steps: this.options.scaleSteps,
            stepValue: this.options.scaleStepWidth,
            min: this.options.scaleStartValue,
            max:
              this.options.scaleStartValue +
              this.options.scaleSteps * this.options.scaleStepWidth,
          }),
          (this.scale = new b.Scale(f));
      },
      addData: function (f, e) {
        a.each(
          f,
          function (h, g) {
            this.datasets[g].points.push(
              new this.PointClass({
                value: h,
                label: e,
                x: this.scale.calculateX(this.scale.valuesCount + 1),
                y: this.scale.endPoint,
                strokeColor: this.datasets[g].pointStrokeColor,
                fillColor: this.datasets[g].pointColor,
              })
            );
          },
          this
        ),
          this.scale.addXLabel(e),
          this.update();
      },
      removeData: function () {
        this.scale.removeXLabel(),
          a.each(
            this.datasets,
            function (e) {
              e.points.shift();
            },
            this
          ),
          this.update();
      },
      reflow: function () {
        var e = a.extend({
          height: this.chart.height,
          width: this.chart.width,
        });
        this.scale.update(e);
      },
      draw: function (k) {
        var f = k || 1;
        this.clear();
        var j = this.chart.ctx,
          g = function (l) {
            return null !== l.value;
          },
          h = function (n, l, m) {
            return a.findNextWhere(l, g, m) || n;
          },
          e = function (n, l, m) {
            return a.findPreviousWhere(l, g, m) || n;
          };
        this.scale.draw(f),
          a.each(
            this.datasets,
            function (m) {
              var l = a.where(m.points, g);
              a.each(
                m.points,
                function (o, n) {
                  o.hasValue() &&
                    o.transition(
                      {
                        y: this.scale.calculateY(o.value),
                        x: this.scale.calculateX(n),
                      },
                      f
                    );
                },
                this
              ),
                this.options.bezierCurve &&
                  a.each(
                    l,
                    function (p, n) {
                      var o =
                        n > 0 && n < l.length - 1
                          ? this.options.bezierCurveTension
                          : 0;
                      (p.controlPoints = a.splineCurve(
                        e(p, l, n),
                        p,
                        h(p, l, n),
                        o
                      )),
                        p.controlPoints.outer.y > this.scale.endPoint
                          ? (p.controlPoints.outer.y = this.scale.endPoint)
                          : p.controlPoints.outer.y < this.scale.startPoint &&
                            (p.controlPoints.outer.y = this.scale.startPoint),
                        p.controlPoints.inner.y > this.scale.endPoint
                          ? (p.controlPoints.inner.y = this.scale.endPoint)
                          : p.controlPoints.inner.y < this.scale.startPoint &&
                            (p.controlPoints.inner.y = this.scale.startPoint);
                    },
                    this
                  ),
                (j.lineWidth = this.options.datasetStrokeWidth),
                (j.strokeStyle = m.strokeColor),
                j.beginPath(),
                a.each(
                  l,
                  function (p, o) {
                    if (0 === o) {
                      j.moveTo(p.x, p.y);
                    } else {
                      if (this.options.bezierCurve) {
                        var n = e(p, l, o);
                        j.bezierCurveTo(
                          n.controlPoints.outer.x,
                          n.controlPoints.outer.y,
                          p.controlPoints.inner.x,
                          p.controlPoints.inner.y,
                          p.x,
                          p.y
                        );
                      } else {
                        j.lineTo(p.x, p.y);
                      }
                    }
                  },
                  this
                ),
                j.stroke(),
                this.options.datasetFill &&
                  l.length > 0 &&
                  (j.lineTo(l[l.length - 1].x, this.scale.endPoint),
                  j.lineTo(l[0].x, this.scale.endPoint),
                  (j.fillStyle = m.fillColor),
                  j.closePath(),
                  j.fill()),
                a.each(l, function (n) {
                  n.draw();
                });
            },
            this
          );
      },
    });
  }.call(this),
  function () {
    var d = this,
      b = d.Chart,
      a = b.helpers,
      c = {
        scaleShowLabelBackdrop: !0,
        scaleBackdropColor: "rgba(255,255,255,0.75)",
        scaleBeginAtZero: !0,
        scaleBackdropPaddingY: 2,
        scaleBackdropPaddingX: 2,
        scaleShowLine: !0,
        segmentShowStroke: !0,
        segmentStrokeColor: "#fff",
        segmentStrokeWidth: 2,
        animationSteps: 100,
        animationEasing: "easeOutBounce",
        animateRotate: !0,
        animateScale: !1,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>',
      };
    b.Type.extend({
      name: "PolarArea",
      defaults: c,
      initialize: function (e) {
        (this.segments = []),
          (this.SegmentArc = b.Arc.extend({
            showStroke: this.options.segmentShowStroke,
            strokeWidth: this.options.segmentStrokeWidth,
            strokeColor: this.options.segmentStrokeColor,
            ctx: this.chart.ctx,
            innerRadius: 0,
            x: this.chart.width / 2,
            y: this.chart.height / 2,
          })),
          (this.scale = new b.RadialScale({
            display: this.options.showScale,
            fontStyle: this.options.scaleFontStyle,
            fontSize: this.options.scaleFontSize,
            fontFamily: this.options.scaleFontFamily,
            fontColor: this.options.scaleFontColor,
            showLabels: this.options.scaleShowLabels,
            showLabelBackdrop: this.options.scaleShowLabelBackdrop,
            backdropColor: this.options.scaleBackdropColor,
            backdropPaddingY: this.options.scaleBackdropPaddingY,
            backdropPaddingX: this.options.scaleBackdropPaddingX,
            lineWidth: this.options.scaleShowLine
              ? this.options.scaleLineWidth
              : 0,
            lineColor: this.options.scaleLineColor,
            lineArc: !0,
            width: this.chart.width,
            height: this.chart.height,
            xCenter: this.chart.width / 2,
            yCenter: this.chart.height / 2,
            ctx: this.chart.ctx,
            templateString: this.options.scaleLabel,
            valuesCount: e.length,
          })),
          this.updateScaleRange(e),
          this.scale.update(),
          a.each(
            e,
            function (g, f) {
              this.addData(g, f, !0);
            },
            this
          ),
          this.options.showTooltips &&
            a.bindEvents(this, this.options.tooltipEvents, function (g) {
              var f = "mouseout" !== g.type ? this.getSegmentsAtEvent(g) : [];
              a.each(this.segments, function (h) {
                h.restore(["fillColor"]);
              }),
                a.each(f, function (h) {
                  h.fillColor = h.highlightColor;
                }),
                this.showTooltip(f);
            }),
          this.render();
      },
      getSegmentsAtEvent: function (g) {
        var e = [],
          f = a.getRelativePosition(g);
        return (
          a.each(
            this.segments,
            function (h) {
              h.inRange(f.x, f.y) && e.push(h);
            },
            this
          ),
          e
        );
      },
      addData: function (j, g, f) {
        var h = g || this.segments.length;
        this.segments.splice(
          h,
          0,
          new this.SegmentArc({
            fillColor: j.color,
            highlightColor: j.highlight || j.color,
            label: j.label,
            value: j.value,
            outerRadius: this.options.animateScale
              ? 0
              : this.scale.calculateCenterOffset(j.value),
            circumference: this.options.animateRotate
              ? 0
              : this.scale.getCircumference(),
            startAngle: 1.5 * Math.PI,
          })
        ),
          f || (this.reflow(), this.update());
      },
      removeData: function (f) {
        var e = a.isNumber(f) ? f : this.segments.length - 1;
        this.segments.splice(e, 1), this.reflow(), this.update();
      },
      calculateTotal: function (e) {
        (this.total = 0),
          a.each(
            e,
            function (f) {
              this.total += f.value;
            },
            this
          ),
          (this.scale.valuesCount = this.segments.length);
      },
      updateScaleRange: function (g) {
        var e = [];
        a.each(g, function (h) {
          e.push(h.value);
        });
        var f = this.options.scaleOverride
          ? {
              steps: this.options.scaleSteps,
              stepValue: this.options.scaleStepWidth,
              min: this.options.scaleStartValue,
              max:
                this.options.scaleStartValue +
                this.options.scaleSteps * this.options.scaleStepWidth,
            }
          : a.calculateScaleRange(
              e,
              a.min([this.chart.width, this.chart.height]) / 2,
              this.options.scaleFontSize,
              this.options.scaleBeginAtZero,
              this.options.scaleIntegersOnly
            );
        a.extend(this.scale, f, {
          size: a.min([this.chart.width, this.chart.height]),
          xCenter: this.chart.width / 2,
          yCenter: this.chart.height / 2,
        });
      },
      update: function () {
        this.calculateTotal(this.segments),
          a.each(this.segments, function (e) {
            e.save();
          }),
          this.reflow(),
          this.render();
      },
      reflow: function () {
        a.extend(this.SegmentArc.prototype, {
          x: this.chart.width / 2,
          y: this.chart.height / 2,
        }),
          this.updateScaleRange(this.segments),
          this.scale.update(),
          a.extend(this.scale, {
            xCenter: this.chart.width / 2,
            yCenter: this.chart.height / 2,
          }),
          a.each(
            this.segments,
            function (e) {
              e.update({
                outerRadius: this.scale.calculateCenterOffset(e.value),
              });
            },
            this
          );
      },
      draw: function (f) {
        var e = f || 1;
        this.clear(),
          a.each(
            this.segments,
            function (h, g) {
              h.transition(
                {
                  circumference: this.scale.getCircumference(),
                  outerRadius: this.scale.calculateCenterOffset(h.value),
                },
                e
              ),
                (h.endAngle = h.startAngle + h.circumference),
                0 === g && (h.startAngle = 1.5 * Math.PI),
                g < this.segments.length - 1 &&
                  (this.segments[g + 1].startAngle = h.endAngle),
                h.draw();
            },
            this
          ),
          this.scale.draw();
      },
    });
  }.call(this),
  function () {
    var c = this,
      b = c.Chart,
      a = b.helpers;
    b.Type.extend({
      name: "Radar",
      defaults: {
        scaleShowLine: !0,
        angleShowLineOut: !0,
        scaleShowLabels: !1,
        scaleBeginAtZero: !0,
        angleLineColor: "rgba(0,0,0,.1)",
        angleLineWidth: 1,
        pointLabelFontFamily: "'Arial'",
        pointLabelFontStyle: "normal",
        pointLabelFontSize: 10,
        pointLabelFontColor: "#666",
        pointDot: !0,
        pointDotRadius: 3,
        pointDotStrokeWidth: 1,
        pointHitDetectionRadius: 20,
        datasetStroke: !0,
        datasetStrokeWidth: 2,
        datasetFill: !0,
        legendTemplate:
          '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
      },
      initialize: function (d) {
        (this.PointClass = b.Point.extend({
          strokeWidth: this.options.pointDotStrokeWidth,
          radius: this.options.pointDotRadius,
          display: this.options.pointDot,
          hitDetectionRadius: this.options.pointHitDetectionRadius,
          ctx: this.chart.ctx,
        })),
          (this.datasets = []),
          this.buildScale(d),
          this.options.showTooltips &&
            a.bindEvents(this, this.options.tooltipEvents, function (f) {
              var e = "mouseout" !== f.type ? this.getPointsAtEvent(f) : [];
              this.eachPoints(function (g) {
                g.restore(["fillColor", "strokeColor"]);
              }),
                a.each(e, function (g) {
                  (g.fillColor = g.highlightFill),
                    (g.strokeColor = g.highlightStroke);
                }),
                this.showTooltip(e);
            }),
          a.each(
            d.datasets,
            function (e) {
              var f = {
                label: e.label || null,
                fillColor: e.fillColor,
                strokeColor: e.strokeColor,
                pointColor: e.pointColor,
                pointStrokeColor: e.pointStrokeColor,
                points: [],
              };
              this.datasets.push(f),
                a.each(
                  e.data,
                  function (g, h) {
                    var j;
                    this.scale.animation ||
                      (j = this.scale.getPointPosition(
                        h,
                        this.scale.calculateCenterOffset(g)
                      )),
                      f.points.push(
                        new this.PointClass({
                          value: g,
                          label: d.labels[h],
                          datasetLabel: e.label,
                          x: this.options.animation ? this.scale.xCenter : j.x,
                          y: this.options.animation ? this.scale.yCenter : j.y,
                          strokeColor: e.pointStrokeColor,
                          fillColor: e.pointColor,
                          highlightFill: e.pointHighlightFill || e.pointColor,
                          highlightStroke:
                            e.pointHighlightStroke || e.pointStrokeColor,
                        })
                      );
                  },
                  this
                );
            },
            this
          ),
          this.render();
      },
      eachPoints: function (d) {
        a.each(
          this.datasets,
          function (e) {
            a.each(e.points, d, this);
          },
          this
        );
      },
      getPointsAtEvent: function (j) {
        var e = a.getRelativePosition(j),
          h = a.getAngleFromPoint(
            { x: this.scale.xCenter, y: this.scale.yCenter },
            e
          ),
          f = (2 * Math.PI) / this.scale.valuesCount,
          g = Math.round((h.angle - 1.5 * Math.PI) / f),
          d = [];
        return (
          (g >= this.scale.valuesCount || 0 > g) && (g = 0),
          h.distance <= this.scale.drawingArea &&
            a.each(this.datasets, function (k) {
              d.push(k.points[g]);
            }),
          d
        );
      },
      buildScale: function (d) {
        (this.scale = new b.RadialScale({
          display: this.options.showScale,
          fontStyle: this.options.scaleFontStyle,
          fontSize: this.options.scaleFontSize,
          fontFamily: this.options.scaleFontFamily,
          fontColor: this.options.scaleFontColor,
          showLabels: this.options.scaleShowLabels,
          showLabelBackdrop: this.options.scaleShowLabelBackdrop,
          backdropColor: this.options.scaleBackdropColor,
          backdropPaddingY: this.options.scaleBackdropPaddingY,
          backdropPaddingX: this.options.scaleBackdropPaddingX,
          lineWidth: this.options.scaleShowLine
            ? this.options.scaleLineWidth
            : 0,
          lineColor: this.options.scaleLineColor,
          angleLineColor: this.options.angleLineColor,
          angleLineWidth: this.options.angleShowLineOut
            ? this.options.angleLineWidth
            : 0,
          pointLabelFontColor: this.options.pointLabelFontColor,
          pointLabelFontSize: this.options.pointLabelFontSize,
          pointLabelFontFamily: this.options.pointLabelFontFamily,
          pointLabelFontStyle: this.options.pointLabelFontStyle,
          height: this.chart.height,
          width: this.chart.width,
          xCenter: this.chart.width / 2,
          yCenter: this.chart.height / 2,
          ctx: this.chart.ctx,
          templateString: this.options.scaleLabel,
          labels: d.labels,
          valuesCount: d.datasets[0].data.length,
        })),
          this.scale.setScaleSize(),
          this.updateScaleRange(d.datasets),
          this.scale.buildYLabels();
      },
      updateScaleRange: function (f) {
        var d = (function () {
            var g = [];
            return (
              a.each(f, function (h) {
                h.data
                  ? (g = g.concat(h.data))
                  : a.each(h.points, function (j) {
                      g.push(j.value);
                    });
              }),
              g
            );
          })(),
          e = this.options.scaleOverride
            ? {
                steps: this.options.scaleSteps,
                stepValue: this.options.scaleStepWidth,
                min: this.options.scaleStartValue,
                max:
                  this.options.scaleStartValue +
                  this.options.scaleSteps * this.options.scaleStepWidth,
              }
            : a.calculateScaleRange(
                d,
                a.min([this.chart.width, this.chart.height]) / 2,
                this.options.scaleFontSize,
                this.options.scaleBeginAtZero,
                this.options.scaleIntegersOnly
              );
        a.extend(this.scale, e);
      },
      addData: function (e, d) {
        this.scale.valuesCount++,
          a.each(
            e,
            function (h, f) {
              var g = this.scale.getPointPosition(
                this.scale.valuesCount,
                this.scale.calculateCenterOffset(h)
              );
              this.datasets[f].points.push(
                new this.PointClass({
                  value: h,
                  label: d,
                  x: g.x,
                  y: g.y,
                  strokeColor: this.datasets[f].pointStrokeColor,
                  fillColor: this.datasets[f].pointColor,
                })
              );
            },
            this
          ),
          this.scale.labels.push(d),
          this.reflow(),
          this.update();
      },
      removeData: function () {
        this.scale.valuesCount--,
          this.scale.labels.shift(),
          a.each(
            this.datasets,
            function (d) {
              d.points.shift();
            },
            this
          ),
          this.reflow(),
          this.update();
      },
      update: function () {
        this.eachPoints(function (d) {
          d.save();
        }),
          this.reflow(),
          this.render();
      },
      reflow: function () {
        a.extend(this.scale, {
          width: this.chart.width,
          height: this.chart.height,
          size: a.min([this.chart.width, this.chart.height]),
          xCenter: this.chart.width / 2,
          yCenter: this.chart.height / 2,
        }),
          this.updateScaleRange(this.datasets),
          this.scale.setScaleSize(),
          this.scale.buildYLabels();
      },
      draw: function (f) {
        var d = f || 1,
          e = this.chart.ctx;
        this.clear(),
          this.scale.draw(),
          a.each(
            this.datasets,
            function (g) {
              a.each(
                g.points,
                function (j, h) {
                  j.hasValue() &&
                    j.transition(
                      this.scale.getPointPosition(
                        h,
                        this.scale.calculateCenterOffset(j.value)
                      ),
                      d
                    );
                },
                this
              ),
                (e.lineWidth = this.options.datasetStrokeWidth),
                (e.strokeStyle = g.strokeColor),
                e.beginPath(),
                a.each(
                  g.points,
                  function (j, h) {
                    0 === h ? e.moveTo(j.x, j.y) : e.lineTo(j.x, j.y);
                  },
                  this
                ),
                e.closePath(),
                e.stroke(),
                (e.fillStyle = g.fillColor),
                e.fill(),
                a.each(g.points, function (h) {
                  h.hasValue() && h.draw();
                });
            },
            this
          );
      },
    });
  }.call(this));
var categoryRightClickCallBack;
function ConfigureCollapsiblePanel() {
  $(this).addClass("ui-widget");
  $(this)
    .children()
    .wrapAll(
      "<div class='collapsibleContainerContent ui-widget-content'></div>"
    );
  var a = $(
    "<div class='collapsibleContainerTitle ui-widget-header'><div>" +
      $(this).attr("collapsibleDivTitle") +
      "</div></div>"
  ).prependTo($(this));
  a.click(CollapsibleContainerTitleOnClick);
}
function CollapsibleContainerTitleOnClick(a) {
  a.stopPropagation();
  $(".collapsibleContainerContent", $(this).parent()).slideToggle();
}
function ApplyCollapseSettings(a) {
  var b = $(".collapsibleContainerTitle").last();
  if (a) {
    $(b, $(this).parent()).css("display", "none");
  } else {
    $(b, $(this).parent()).css("display", true);
  }
}
$.fn.collapsiblePanel = function (a, b) {
  categoryRightClickCallBack = b;
  this.tempFunc = function () {
    ConfigureCollapsiblePanel(b);
  };
  var c = $(this).each(ConfigureCollapsiblePanel);
  ApplyCollapseSettings(a);
  return c;
};
IAS.setCategoryErrorMarker = function (a) {
  if (a) {
    $(a).addClass("CollapsibleErrorStyle");
  }
};
IAS.removeCategoryErrorMarker = function (a) {
  if (a) {
    $(a).removeClass("CollapsibleErrorStyle");
  }
};
IAS.isCategoryHasErrorMarker = function (a) {
  var b = false;
  if (a) {
    b = $(a).hasClass("CollapsibleErrorStyle");
  }
  return b;
};
IAS.JsonConverter = IAS.JsonConverter || {};
IAS.JsonConverter.fromObjectToJsonString = function (b) {
  var a = JSON.stringify(b);
  return a.replace("null", '""');
};
IAS.JsonConverter.fromJsonStringToObject = function (a) {
  if (!a || typeof a != "string") {
    return a;
  } else {
    return JSON.parse(a);
  }
};
IAS.JsonConverter.fromJsonArrayToObject = function (d, f) {
  var a = f || null;
  var e = [];
  if (d) {
    for (var b = 0; b < d.length; b++) {
      var c = d[b] || f;
      e.push(IAS.JsonConverter.fromJsonStringToObject(c));
    }
  }
  return e;
};
IAS.JsonConverter.fromJsonKeyValueToObject = function (c, f) {
  var a = f || null;
  var e = {};
  for (var d in c) {
    var b = c[d] || a;
    e[d] = IAS.JsonConverter.fromJsonStringToObject(b);
  }
  return e;
};
IAS.FormMergeManager = function (b, a) {
  this.onlyUpdateAttributes = b || false;
  this.keepDeletedCategoriesAndFields = a || false;
  this.hasNewCateroryOrField = false;
  this.hasDeletedCategoriesOrFields = false;
};
IAS.FormMergeManager = IAS.FormMergeManager || FormMergeManager;
IAS.FormMergeManager.prototype.getFormWithUpdatedTemplate = function (c, a) {
  c = IAS.JsonConverter.fromJsonStringToObject(c);
  a = IAS.JsonConverter.fromJsonStringToObject(a);
  if (c && a) {
    var d = c.Form.FormDesign.categories;
    var b = a.Form.FormDesign.categories;
    a.Form.FormDesign.categories = this.mergeCategories(d, b);
  }
  return a;
};
IAS.FormMergeManager.prototype.hasNew = function () {
  return this.hasNewCateroryOrField;
};
IAS.FormMergeManager.prototype.getMessage = function () {
  if (this.hasNew()) {
    return IAS.L(
      "There is some changes on form application, please update your profile"
    );
  }
};
IAS.FormMergeManager.prototype.showMessage = function () {
  var a = false;
  var b = this.getMessage();
  if (b) {
    IAS.popupMsg(b);
    a = true;
  }
  return a;
};
IAS.FormMergeManager.prototype.mergeCategories = function (c, a) {
  var e = [];
  for (var d = 0; d < c.length; d++) {
    var b = c[d];
    this.updateOrAddCategory(b, a, e);
  }
  if (a.length > 0) {
    if (this.keepDeletedCategoriesAndFields || this.onlyUpdateAttributes) {
      e = e.concat(a);
    } else {
      this.hasDeletedCategoriesOrFields = true;
    }
  }
  return e;
};
IAS.FormMergeManager.prototype.updateOrAddCategory = function (d, b, f) {
  var e = false;
  for (var a = 0; a < b.length; a++) {
    var c = b[a];
    if (d.category_id == c.category_id) {
      e = true;
      this.updateCategoryAttributes(d, c);
      f.push(c);
      b.splice(a, 1);
      break;
    }
  }
  if (!e && !this.onlyUpdateAttributes) {
    f.push(d);
    this.hasNewCateroryOrField = true;
  }
};
IAS.FormMergeManager.prototype.updateCategoryAttributes = function (d, a) {
  for (var c in d) {
    if (c != "category_id" && c != "fields") {
      a[c] = d[c];
    }
  }
  var e = d.fields;
  var b = a.fields;
  a.fields = this.mergeFields(e, b);
};
IAS.FormMergeManager.prototype.mergeFields = function (d, a) {
  var e = [];
  for (var c = 0; c < d.length; c++) {
    var b = d[c];
    this.updateOrAddField(b, a, e);
  }
  if (a.length > 0) {
    if (this.keepDeletedCategoriesAndFields || this.onlyUpdateAttributes) {
      e = e.concat(a);
    } else {
      this.hasDeletedCategoriesOrFields = true;
    }
  }
  return e;
};
IAS.FormMergeManager.prototype.updateOrAddField = function (d, b, f) {
  var e = false;
  for (var a = 0; a < b.length; a++) {
    var c = b[a];
    if (d.id == c.id) {
      e = true;
      this.updateFieldAttributes(d, c);
      f.push(c);
      b.splice(a, 1);
      break;
    }
  }
  if (!e && !this.onlyUpdateAttributes) {
    f.push(d);
    this.hasNewCateroryOrField = true;
  }
};
IAS.FormMergeManager.prototype.updateFieldAttributes = function (c, b) {
  for (var d in c) {
    if (d != "id" && d != "type" && d != "value" && d != "template") {
      b[d] = c[d];
    }
  }
  if (c.type == "list") {
    var f = c.template.fields;
    var a = b.template.fields;
    var e = new IAS.FormMergeManager();
    b.template.fields = e.mergeFields(f, a);
  }
};
IAS.FormHelper = IAS.FormHelper || {};
IAS.FormHelper.mergeModifiedPersonnelRolesForms = function (f, e, k) {
  if (f && e) {
    var a = false;
    var d;
    for (var g in f) {
      var j = f[g];
      var h = e[g][1];
      var c = new IAS.FormMergeManager();
      var b = c.getFormWithUpdatedTemplate(j, h);
      e[g][1] = IAS.JsonConverter.fromObjectToJsonString(b);
      a = true;
      if (c.hasNew() && !d) {
        d = c.getMessage();
      }
    }
    if (a) {
      if (k) {
        k(e, true);
      }
    }
  }
  return e;
};
IAS.AssignEbook = IAS.AssignEbook || {};
IAS.AssignEbook.createAvailableEBooksBundleTree = function (d, c, b) {
  var a = new TreeListRenderer();
  a.isCheckable = true;
  a.initializeTree(d, -1);
  a.renderOn(b);
  var e = function () {
    var h = a.getCheckedNodes();
    var f = [];
    for (var g = 0; g < h.length; g++) {
      if (h[g].bookID) {
        f.push(h[g].bookID);
      }
    }
    return f;
  };
  if (c) {
    return null;
  } else {
    return e;
  }
};
IAS.AssignEbook.createAvailableEBooksTable = function (b, d) {
  var c = [
    { label: IAS.L(""), id: "selected", type: "checkbox" },
    { id: "name", label: IAS.L("Book Name"), type: "label" },
    { id: "version", label: IAS.L("Version"), type: "label" },
    { id: "language", label: IAS.L("Language"), type: "label" },
  ];
  var a = new IAS.TableRenderer(c, d, b, null, null, IAS.L("Assign eBooks"));
  var e = function () {
    var h = a.getSelectedRowsData();
    var f = [];
    for (var g = 0; g < h.length; g++) {
      f.push(h[g].id);
    }
    return f;
  };
  return e;
};
IAS.MessagingManager = function (b) {
  this.panelMessageManagers = {};
  IAS.messageTypeToPanels = {};
  this.messageSpanes = [];
  this.messageCount = 0;
  var a = this;
  this.listGlobalMessage = IAS.createCustomUIList(this.messageSpanes, {
    render: function (c) {
      return $(c);
    },
    emptyMessage: IAS.L("You have no messages"),
  });
  $(this.listGlobalMessage).attr(
    "style",
    "width: 97%; max-height: 500px; border-width: 0 !important;"
  );
  this.listGlobalMessage.table
    .css({ width: "100%", border: "none" })
    .addClass("messagesSpanTable");
  this.hideMessages = true;
  this.drawMessageGlobal();
  if (b) {
    this.setMessages(b);
  }
};
IAS.MessagingManager.prototype.refreshGlobalMessaege = function (d) {
  var a = [];
  var c = 0;
  this.messageSpanes.length = 0;
  this.panelMessageSpane = [];
  this.hideMessages = true;
  for (var b in this.panelMessageManagers) {
    var e = this.getPanelMessageManager(b);
    var f = e.getAllMessages();
    c = c + e.messageCount;
    this.messageSpanes = this.messageSpanes.concat(f);
    if (e.messages.length > 0) {
      a.push(e.getMessagesList());
    }
  }
  if (this.messageWithoutPanlelManager) {
    a.push(this.messageWithoutPanlelManager.getMessagesList());
  }
  this.listGlobalMessage.items = a;
  this.listGlobalMessage.redraw();
  this.drawMessageCount(c);
};
IAS.MessagingManager.prototype.refreshGlobalMessaegeList = function () {
  var a = [];
  var c = 0;
  this.hideMessages = true;
  for (var b in this.panelMessageManagers) {
    var d = this.getPanelMessageManager(b);
    c = c + d.messageCount;
    a.push(d.getMessagesList());
  }
  if (this.messageWithoutPanlelManager) {
    a.push(this.messageWithoutPanlelManager.getMessagesList());
  }
  this.listGlobalMessage.items = a;
  this.listGlobalMessage.redraw();
  this.drawMessageCount(c);
};
IAS.MessagingManager.prototype.getMessageCount = function () {
  var b = 0;
  for (var a in this.panelMessageManagers) {
    b = b + this.getPanelMessageManager(a).messageCount;
  }
  if (this.messageWithoutPanlelManager) {
    b = b + this.messageWithoutPanlelManager.messageCount;
  }
  return b;
};
IAS.MessagingManager.prototype.setMessageCount = function (b) {
  this.messageCount = 0;
  if (b) {
    for (var a in b) {
      if (a == "MESSAGE_WITHOUT_PANEL") {
        this.messageWithoutPanlelManager =
          this.messageWithoutPanlelManager ||
          new IAS.MessageWithoutPanelManager();
        this.messageWithoutPanlelManager.setMessageCount(b[a]);
      } else {
        this.getPanelMessageManager(a).setMessageCount(b[a]);
      }
      this.messageCount += b[a].unReadMessageCount;
    }
  }
  this.drawMessageCount(this.messageCount);
  this.refreshGlobalMessaegeList();
};
IAS.MessagingManager.prototype.incrementMessageCount = function (c) {
  if (c) {
    var a = 0;
    for (var b in c) {
      this.getPanelMessageManager(b).incrementMessageCount(c[b]);
      a += c[b].unReadMessageCount;
    }
    this.messageCount += a;
    this.drawMessageCount(this.messageCount);
    this.viewAlterBox(a);
    this.refreshGlobalMessaegeList();
  }
};
IAS.MessagingManager.prototype.setMessages = function (d, b) {
  if (d && d.length > 0) {
    var f = this.populatePanelToMessagesDictionary(d);
    var a = b || false;
    for (var c in f) {
      this.getPanelMessageManager(c).setMessages(f[c], a);
    }
    var e = this.getMessagesWithoutPanel(d);
    if (e && e.length > 0) {
      this.messageWithoutPanlelManager = new IAS.MessageWithoutPanelManager();
      this.messageWithoutPanlelManager.setMessages(e);
    }
    this.refreshGlobalMessaege();
  }
};
IAS.MessagingManager.prototype.incrementMessages = function (d, b) {
  if (d && d.length > 0) {
    var f = this.populatePanelToMessagesDictionary(d);
    var a = b || false;
    for (var c in f) {
      var d = f[c];
      this.getPanelMessageManager(c).incrementMessages(d, a);
    }
    var e = this.getMessagesWithoutPanel(d);
    if (e && e.length > 0) {
      this.messageWithoutPanlelManager =
        this.messageWithoutPanlelManager ||
        new IAS.MessageWithoutPanelManager();
      this.messageWithoutPanlelManager.incrementMessages(e);
    }
    this.viewAlterBox(d.length);
    this.refreshGlobalMessaege();
  }
};
IAS.MessagingManager.prototype.viewAlterBox = function (a) {
  if (a > 0) {
    var b = $.createDiv()
      .attr(
        "style",
        String.format(
          "display: none; top: {0}; left: {1};",
          screen.availHeight - 170 + "px",
          30 + "px"
        )
      )
      .addClass("newMessagesDiv")
      .append($('<img src="/css/icons/info.png">'))
      .appendSpan(String.format("You have {0} new messages", a))
      .click(function () {
        $("#notButton").click();
      })
      .appendTo($(document.body))
      .fadeIn(1000);
    setTimeout(function () {
      b.fadeOut(1000);
    }, 7000);
  }
};
IAS.MessagingManager.prototype.incrementMessagesCount = function (d, b) {
  if (d && d.length > 0) {
    var f = this.populatePanelToMessagesDictionary(d);
    var a = b || false;
    for (var c in f) {
      var d = f[c];
      this.getPanelMessageManager(c).incrementMessageCount({
        unReadMessageCount: 1,
      });
    }
    var e = this.getMessagesWithoutPanel(d);
    if (e && e.length > 0) {
      this.messageWithoutPanlelManager =
        this.messageWithoutPanlelManager ||
        new IAS.MessageWithoutPanelManager();
      this.messageWithoutPanlelManager.incrementMessageCount({
        unReadMessageCount: 1,
      });
    }
    this.viewAlterBox(d.length);
    this.drawMessageCount(this.messageCount);
    this.refreshGlobalMessaegeList();
  }
};
IAS.MessagingManager.prototype.removeMessage = function (h, c) {
  var f = h.messageID;
  var g = h.messageTypes;
  var a = c || false;
  if (f && g.length > 0) {
    for (var b = 0; b < g.length; b += 1) {
      if (IAS.messageTypeToPanels[g[b]]) {
        for (var d = 0; d < IAS.messageTypeToPanels[g[b]].length; d += 1) {
          var e = IAS.messageTypeToPanels[g[b]][d];
          this.getPanelMessageManager(e).removeMessage(f, a);
        }
      }
    }
  }
};
IAS.MessagingManager.prototype.removeMessages = function (c, a) {
  for (var b = 0; b < c.length; b += 1) {
    this.removeMessage(c[b], a);
  }
};
IAS.MessagingManager.prototype.getPanelMessageManager = function (a) {
  this.panelMessageManagers[a] =
    this.panelMessageManagers[a] || new IAS.PanelMessageManager(a);
  return this.panelMessageManagers[a];
};
IAS.MessagingManager.prototype.setPanelMessageType = function (d, c) {
  for (var a = 0; a < c.length; a += 1) {
    var b = c[a];
    if (IAS.messageTypeToPanels[b]) {
      IAS.messageTypeToPanels[b].push(d);
    } else {
      IAS.messageTypeToPanels[b] = [d];
    }
  }
};
IAS.MessagingManager.prototype.populatePanelToMessagesDictionary = function (
  e
) {
  var f = {};
  for (var a = 0; a < e.length; a += 1) {
    var d = e[a];
    if (IAS.messageTypeToPanels[d.Type]) {
      for (var b = 0; b < IAS.messageTypeToPanels[d.Type].length; b += 1) {
        var c = IAS.messageTypeToPanels[d.Type][b];
        if (f[c]) {
          f[c].push(d);
        } else {
          f[c] = [d];
        }
      }
    }
  }
  return f;
};
IAS.MessagingManager.prototype.getMessagesWithoutPanel = function (c) {
  var d = [];
  for (var a = 0; a < c.length; a += 1) {
    var b = c[a];
    if (!IAS.messageTypeToPanels[b.Type] && b.AllowNonPanelMessage) {
      d.push(b);
    }
  }
  return d;
};
IAS.MessagingManager.prototype.drawMessageCount = function (b) {
  var a = b || this.getMessageCount();
  var c = $("#numOfMsgs");
  if (a > 0) {
    c.show();
    c.text(a);
  } else {
    c.text("").hide();
  }
};
IAS.MessagingManager.prototype.drawMessageGlobal = function () {
  var b = this;
  $.extend($.connection.notificationHub.client, {
    pushMessage: function (c) {
      b.incrementMessagesCount(c, true);
    },
  });
  var a = $.connection.notificationHub;
  $.connection.hub.start();
  $(document).ready(function () {
    var d = b.listGlobalMessage;
    var e = $("#notificationsDiv");
    var f = $("#numOfMsgs");
    if (e && e.length > 0) {
      var c = $("#notButton");
      c.unbind("click");
      f.unbind("click");
      var g = b;
      c.click(function () {
        var h = $(this);
        e = $("#notificationsDiv");
        var l = false;
        for (var j in g.panelMessageManagers) {
          if (g.panelMessageManagers[j].isMessagesDivDisplayed) {
            g.panelMessageManagers[j].isMessagesDivDisplayed = false;
            l = true;
          }
        }
        if (l) {
          g.refreshGlobalMessaegeList();
          $("div[id^=panelMsgdivDialog]").remove();
        }
        var m = h.position();
        var n = h.outerWidth();
        var k = localSettings.currentLanguage;
        if (!h.hasClass("menuImgClicked")) {
          if (k && k == "2") {
            $("#notificationsDivArrow").css("margin-right", "367px");
            e.css({
              position: "absolute",
              top: m.top + 40 + "px",
              left: m.left - 50 + "px",
              width: 444 + "px",
            });
          } else {
            e.css({
              position: "absolute",
              top: m.top + 40 + "px",
              left: m.left - 360 + "px",
              width: 444 + "px",
            });
            $("#notificationsDivArrow").css("margin-left", "365px");
          }
        }
        if (h.hasClass("menuImgClicked")) {
          h.removeClass("menuImgClicked");
        } else {
          h.addClass("menuImgClicked");
        }
        e.fadeToggle(300);
      });
      f.click(function () {
        c.click();
      });
      e.append($(d));
    }
  });
};
IAS.MessagingManager.prototype.disposeMessagesRefreshTimer = function () {
  if (window.mt) {
    clearInterval(window.mt);
    delete window.mt;
  }
};
IAS.PanelMessageManager = function (c) {
  this.panelId = c;
  this.messages = [];
  this.messageCount = 0;
  this.callbackOnMessgeSet = null;
  this.newMessages = [];
  this.isMessageDirty = true;
  this.maxMessagesShow = 5;
  this.haveMoreMessages = false;
  this.loadMoreSpan = $("<span>")
    .css({
      "font-style": "Italic",
      cursor: "pointer",
      color: "blue ",
      "font-weight": "bold",
      "text-aline": "center",
    })
    .append(IAS.L("Load More") + " ,, ");
  this.panel = IAS.PanelObjects[this.panelId];
  var b = this.panel.notificationListDiv;
  this.callbackOnMessgeSet = null;
  this.messageTitle = this.panel.VocabularyTerm;
  this.messageSpan = [];
  var a = this;
  this.renderMessageFn = function (f, e) {
    var g = IAS.PanelRenderer.Renderers[c];
    var h;
    var k = $("<span>").addClass("msgDateSpan").text(f.MessageDate);
    var j = $("<div class='msgSpanDiv'>");
    if (g.renderMessageFn) {
      h = g.renderMessageFn(f, e);
    } else {
      h = $("<span>").html(f.Title).addClass("msgSpan");
    }
    if (f.IsNew == true) {
      j.append(
        $("<img src = '/css/icons/bullet_red.png' class='msgImageSmall'>")
      );
      h.css({ cursor: "pointer", color: "red " });
      j.click(function () {
        a.setMessageRead(f);
        h.css("color", "black");
      });
    } else {
      j.append(
        $("<img src = '/css/icons/bullet_blue.png' class='msgImageSmall'>")
      );
    }
    if (g.onMessageClickCallBack) {
      j.click(IAS.bind(g, "onMessageClickCallBack", f));
    }
    j.append(h).append(k);
    var d = $("<a class='msgPanelLink' href='#" + a.panelId + "'>").append(j);
    return d;
  };
  this.listControl = IAS.createCustomUIList(this.messages, {
    render: this.renderMessageFn,
    emptyMessage: IAS.L("You have no messages"),
  });
  $(this.listControl).css({ "max-height": "200px", width: "100%" });
  $(this.listControl)
    .attr("style", "width: 97%; max-height: 200px; border-width: 0 !important;")
    .addClass("messagesTable");
  this.listControl.table.css({
    width: "100%",
    border: "none",
    "white-space": "normal",
  });
  this.mainMessagesDiv = $("<div>");
};
IAS.PanelMessageManager.prototype.render = function () {
  var a = this;
  if (!this.haveMoreMessages) {
    $(this.loadMoreSpan).hide();
  }
  this.listControl.items = this.messages;
  if (
    !(this.messageCount > 0 && (!this.messages || this.messages.length == 0))
  ) {
    this.renderMessageList();
  }
  this.renderMessageCount();
  IAS.messagingManager.drawMessageCount();
};
IAS.PanelMessageManager.prototype.renderMessageCount = function () {
  var d = this.panel.linkDiv.find(".panelLinkNumMessages");
  var c = this.mainMessagesDiv.find(".subNewMsgCount");
  var a = this.mainMessagesDiv.find(".msgImage");
  if (this.messageCount == 0) {
    d.html("");
    d.hide();
    c.html("");
    c.hide();
    a.attr("src", "/css/icons/bullet_blue.png");
  } else {
    var b = this;
    c.show();
    c.html(this.messageCount.toString());
    a.attr("src", "/css/icons/bullet_red.png");
    d.show();
    d.html(this.messageCount);
    d.iasTooltip(IAS.L("Notifications"));
    d.off("click").on("click", function (f) {
      if (b.messages && b.messages.length > 0 && !b.isMessageDirty) {
        b.renderPanelMessageDialog.call(b, d, f);
      } else {
        b.loadPanelMessage.call(b, function (e) {
          b.listControl.redraw(b.maxMessagesShow);
          b.renderPanelMessageDialog.call(b, d, f);
        });
      }
    });
  }
};
IAS.PanelMessageManager.prototype.renderPanelMessageDialog = function (k, c) {
  var h = this;
  var g = $(h.mainMessagesDiv).find(".panelMsgdiv").show();
  var a = "panelMsgdivDialog" + h.panelId;
  var b = a;
  var f = $(document.getElementsByClassName(a));
  if (f.length > 0) {
    if (f.dialog("isOpen")) {
      f.effect("pulsate");
    } else {
      try {
        $("div[id^=panelMsgdivDialog]").dialog("close");
      } catch (d) {
        console.log(d.toString());
      }
      f.dialog("open");
    }
  }
  if (f.length == 0) {
    try {
      $("div[id^=panelMsgdivDialog]").dialog("close");
    } catch (d) {
      console.log(d.toString());
    }
    var j = $("<div id='" + b + "' class= '" + a + "' >");
    j.append(h.mainMessagesDiv);
    var l = {
      id: "divOptions",
      autoOpen: true,
      closeOnEscape: true,
      width: 650,
      height: 333,
      resizable: false,
      title: IAS.L("Notifications:"),
      show: { effect: "fold", size: 20, duration: 300, direction: "left" },
      hide: { effect: "fold", size: 20, duration: 300, direction: "left" },
      position: { of: k, my: "left top", at: "right top" },
    };
    if (localSettings.currentLanguage == 2) {
      l.show.direction = "right";
      l.hide.direction = "right";
      l.position.my = "right top";
      l.position.at = "left top";
    }
    j.dialog(l);
    $(".ui-dialog-titlebar").hide();
  } else {
  }
  h.isMessagesDivDisplayed = true;
};
IAS.PanelMessageManager.prototype.renderMessageList = function () {
  var a = this.mainMessagesDiv;
  a.hide();
  if (this.messages.length > 0) {
    a.show();
    this.listControl.redraw(this.maxMessagesShow);
  }
};
IAS.PanelMessageManager.prototype.incrementMessages = function (e, c, b) {
  for (var d in e) {
    var a = e[d];
    if (!this.getMessageByID(a.ID)) {
      this.messages.push(a);
    }
  }
  if (typeof c != "undefined") {
    this.panel.isDirty = c;
  }
  this.haveMoreMessages = b;
  this.render();
};
IAS.PanelMessageManager.prototype.setMessages = function (c, b, a) {
  this.messages.length = 0;
  this.newMessages.length = 0;
  this.incrementMessages(c, b, a);
};
IAS.PanelMessageManager.prototype.setMessageCount = function (a) {
  this.messageCount = a.unReadMessageCount;
  this.renderMessageCount();
};
IAS.PanelMessageManager.prototype.incrementMessageCount = function (a) {
  this.messageCount += a.unReadMessageCount;
  this.isMessageDirty = true;
  this.renderMessageCount();
};
IAS.PanelMessageManager.prototype.getMessageByDistinationID = function (a) {
  var c = null;
  if (a && a != 0) {
    for (var b = 0; b < this.messageCount; b++) {
      if (this.messages[b].DestinationID == a) {
        c = this.messages[b];
        break;
      }
    }
  }
  return c;
};
IAS.PanelMessageManager.prototype.isFoundMessage = function (a) {
  var c = false;
  if (a && a != 0) {
    for (var b = 0; b < this.messageCount; b++) {
      if (this.messages[b].DestinationID == a) {
        c = true;
        break;
      }
    }
  }
  return c;
};
IAS.PanelMessageManager.prototype.setAllMessageRead = function (a) {
  if (this.messageCount != 0) {
    this.messages.forEach(function (b) {
      if (b.IsNew) {
        b.IsNew = false;
      }
    });
    this.messageCount = 0;
    $.post(
      a || "/Message/ChangeMessageState",
      { panelID: this.panelId, isNew: false },
      function (b) {}
    );
    IAS.messagingManager.hideMessages = false;
    if (this.messages && this.messages.length > 0) {
      this.render();
    } else {
      this.renderMessageCount();
      IAS.messagingManager.drawMessageCount();
    }
  }
};
IAS.PanelMessageManager.prototype.setAllMessageUnRead = function (b) {
  this.messages.forEach(function (c) {
    if (!c.IsNew) {
      c.IsNew = true;
    }
  });
  var a = this;
  $.post(
    b || "/Message/ChangeMessageState",
    { panelID: this.panelId, isNew: true },
    function (c) {
      a.messageCount = c;
      if (a.messages && a.messages.length > 0) {
        a.render();
      } else {
        a.renderMessageCount();
        IAS.messagingManager.drawMessageCount();
      }
    }
  );
  IAS.messagingManager.hideMessages = false;
};
IAS.PanelMessageManager.prototype.setMessageRead = function (b, a, d, e) {
  var c = b || {};
  var f = a || true;
  if (b.IsNew == true) {
    if (f == true) {
      $.post(
        e || "/Message/MarkMessageAsRead",
        { MessageID: b.ID },
        function () {}
      );
    }
    b.IsNew = false;
    this.messageCount--;
    this.isMessageDirty = true;
    this.render();
    if (d) {
      d(b);
    }
  }
};
IAS.PanelMessageManager.prototype.setMessageProcessed = function (a) {
  $.post(
    "/Message/MarkMessageAsProcessed",
    { MessageID: a.ID },
    function () {}
  );
  var b = this.messages.indexOf(a);
  if (b >= 0) {
    this.messages.splice(b, 1);
  }
  this.isMessageDirty = true;
  if (a.IsNew) {
    this.messageCount--;
  }
  this.render();
};
IAS.PanelMessageManager.prototype.removeMessage = function (c, a) {
  if (c) {
    var b = this.getMessageByID(c);
    if (b) {
      messageIndex = this.messages.indexOf(b);
      if (messageIndex >= 0) {
        this.messages.splice(messageIndex, 1);
      }
      if (b.IsNew) {
        b.IsNew = false;
        this.messageCount--;
      }
      this.render();
      if (typeof a != "undefined") {
        this.panel.isDirty = a;
      }
    }
  }
};
IAS.PanelMessageManager.prototype.getMessageByID = function (b) {
  if (b) {
    for (var a = 0; a < this.messages.length; a += 1) {
      if (this.messages[a].ID == b) {
        return this.messages[a];
      }
    }
  }
  return null;
};
IAS.PanelMessageManager.prototype.getAllMessages = function () {
  var b = [];
  var a = this;
  $.each(this.messages, function (d, c) {
    b.push({ message: c, renderFunction: a.renderMessageFn, ref: a });
  });
  return b;
};
IAS.PanelMessageManager.prototype.getMessagesList = function () {
  this.mainMessagesDiv = $("<div>");
  var c = $("<div id = 'outerDiv' class='msgSpanDiv'>");
  var g = $('<div class="panelMsgdiv">');
  var b = $("<span>").addClass("subNewMsgCount").hide();
  this.listControl.items = this.messages;
  this.listControl.redraw(this.maxMessagesShow);
  g.append($(this.listControl));
  var f = this;
  c.click(function (h) {
    var k = $(h.target);
    if (
      k.attr("id") === "outerDiv" ||
      h.target.nodeName.toLowerCase().toString() === "span"
    ) {
      var l = function (m) {
        g.toggle(200);
        $(m).toggleClass("panelMessagesItemClicked");
      };
      if (f.messages != null && f.messages.length > 0 && !f.isMessageDirty) {
        l(this);
      } else {
        var j = this;
        f.loadPanelMessage.call(f, function (m) {
          f.listControl.redraw(f.maxMessagesShow);
          l(j);
        });
      }
    }
  });
  if (this.messageCount > 0) {
    c.append($("<img src='/css/icons/bullet_red.png' class='msgImage'>"));
    b.append(this.messageCount.toString()).show();
  } else {
    c.append($("<img src='/css/icons/bullet_blue.png' class='msgImage'>"));
  }
  if (IAS.messagingManager.hideMessages == true) {
    g.hide();
  }
  c.appendSpan(this.messageTitle).append(b).addClass("msgSpan headerMsg");
  var f = this;
  var a = $("<div>").addClass("messageButton");
  var d = $(
    "<img id='messageIcon', src='/css/icons/mark_message_read.png'>"
  ).iasTooltip("Mark message as read");
  d.click(function () {
    f.setAllMessageRead();
  });
  a.append(d);
  var e = $(
    "<img style='margin-top: 7px;' src='/css/icons/mark_message_unread.png' >"
  ).iasTooltip("Mark message as unread");
  e.click(function () {
    f.setAllMessageUnRead();
  });
  a.append(e);
  c.append(a);
  this.loadMoreSpan.click(function () {
    f.maxMessagesShow = f.maxMessagesShow + 5;
    f.loadPanelMessage.call(f, function (h) {
      f.render();
      $(f.listControl).scrollTop($(f.listControl).height() * f.maxMessagesShow);
    });
  });
  g.append(this.loadMoreSpan);
  this.mainMessagesDiv.append(c).append(g);
  return this.mainMessagesDiv;
};
IAS.PanelMessageManager.prototype.loadPanelMessage = function (b) {
  var a = this;
  IAS.post(
    "/Message/GetPanelMessage",
    { panelID: a.panelId, maxNumberOfResult: a.maxMessagesShow },
    function (c) {
      a.messages = a.listControl.items = c.messageList;
      a.haveMoreMessages = c.haveMore;
      a.isMessageDirty = false;
      if (b && b instanceof Function) {
        b(c);
      }
    }
  );
};
IAS.MessageWithoutPanelManager = function () {
  this.messages = [];
  this.messageCount = 0;
  this.newMessages = [];
  this.messageTitle = IAS.L("All Messages");
  this.panelId = "MESSAGE_WITHOUT_PANEL";
  this.maxMessagesShow = 5;
  this.loadMoreSpan = $("<span>")
    .css({
      "font-style": "Italic",
      cursor: "pointer",
      color: "blue ",
      "font-weight": "bold",
      "text-aline": "center",
    })
    .append(IAS.L("Load More") + " ,, ");
  var b = $("<div>");
  var a = this;
  this.renderMessageFn = function (d, c) {
    var e;
    var g = $("<span>").addClass("msgDateSpan").text(d.MessageDate);
    var f = $("<div class='msgSpanDiv'>");
    e = $("<span>").html(d.Title).addClass("msgSpan");
    if (d.IsNew == true) {
      f.append(
        $("<img src = '/css/icons/bullet_red.png' class='msgImageSmall'>")
      );
      e.css({ cursor: "pointer", color: "red " });
      f.click(function () {
        a.setMessageArchived(d, false);
        e.css("color", "black");
      });
    } else {
      f.append(
        $("<img src = '/css/icons/bullet_blue.png' class='msgImageSmall'>")
      );
    }
    f.append(e).append(g);
    return f;
  };
  this.listControl = IAS.createCustomUIList(this.messages, {
    render: this.renderMessageFn,
    emptyMessage: IAS.L("You have no messages"),
  });
  $(this.listControl).css({ "max-height": "200px", width: "100%" });
  $(this.listControl)
    .attr("style", "width: 97%; max-height: 200px; border-width: 0 !important;")
    .addClass("messagesTable");
  this.listControl.table.css({
    width: "100%",
    border: "none",
    "white-space": "normal",
  });
  this.mainMessagesDiv = $("<div>");
};
IAS.MessageWithoutPanelManager.prototype.render = function () {
  IAS.PanelMessageManager.prototype.render.call(this);
};
IAS.MessageWithoutPanelManager.prototype.renderMessageCount = function () {
  var b = this.mainMessagesDiv.find(".subNewMsgCount");
  var a = this.mainMessagesDiv.find(".msgImage");
  if (this.messageCount == 0) {
    b.html("");
    b.hide();
    a.attr("src", "/css/icons/bullet_blue.png");
  } else {
    b.show();
    b.html(this.messageCount.toString());
    a.attr("src", "/css/icons/bullet_red.png");
  }
};
IAS.MessageWithoutPanelManager.prototype.renderMessageList = function () {
  IAS.PanelMessageManager.prototype.renderMessageList.call(this);
};
IAS.MessageWithoutPanelManager.prototype.incrementMessages = function (a) {
  IAS.PanelMessageManager.prototype.incrementMessages.call(this, a);
};
IAS.MessageWithoutPanelManager.prototype.setMessages = function (a) {
  IAS.PanelMessageManager.prototype.setMessages.call(this, a);
};
IAS.MessageWithoutPanelManager.prototype.incrementMessageCount = function (a) {
  IAS.PanelMessageManager.prototype.incrementMessageCount.call(this, a);
};
IAS.MessageWithoutPanelManager.prototype.setMessageCount = function (a) {
  IAS.PanelMessageManager.prototype.setMessageCount.call(this, a);
};
IAS.MessageWithoutPanelManager.prototype.setAllMessageRead = function () {
  IAS.PanelMessageManager.prototype.setAllMessageRead.call(
    this,
    "/Message/ChangeMessagesArchevedStatus"
  );
};
IAS.MessageWithoutPanelManager.prototype.setAllMessageUnRead = function () {
  IAS.PanelMessageManager.prototype.setAllMessageUnRead.call(
    this,
    "/Message/ChangeMessagesArchevedStatus"
  );
};
IAS.MessageWithoutPanelManager.prototype.setMessageArchived = function (
  b,
  a,
  c
) {
  IAS.PanelMessageManager.prototype.setMessageRead.call(
    this,
    b,
    null,
    null,
    "/Message/MarkMessageAsArchived"
  );
};
IAS.MessageWithoutPanelManager.prototype.getMessageByID = function (a) {
  return IAS.PanelMessageManager.prototype.getMessageByID.call(this, a);
};
IAS.MessageWithoutPanelManager.prototype.removeMessage = function (a) {
  IAS.PanelMessageManager.prototype.removeMessage.call(this, a);
};
IAS.MessageWithoutPanelManager.prototype.getAllMessages = function () {
  return IAS.PanelMessageManager.prototype.getAllMessages.call(this);
};
IAS.MessageWithoutPanelManager.prototype.getMessagesList = function () {
  return IAS.PanelMessageManager.prototype.getMessagesList.call(this);
};
IAS.MessageWithoutPanelManager.prototype.loadPanelMessage = function (a) {
  return IAS.PanelMessageManager.prototype.loadPanelMessage.call(this, a);
};
IAS.PanelRenderer = IAS.PanelRenderer || {};
IAS.PanelRenderer.CachedRenderers = {};
IAS.PanelObjects = {};
IAS.PanelRenderer.Renderers = IAS.PanelRenderer.Renderers || {};
IAS.PanelRenderer.getPanelTitle = function (b) {
  var a = IAS.PanelObjects[b];
  if (a) {
    return a.VocabularyTerm;
  } else {
    return "";
  }
};
IAS.PanelRenderer.renderMenu = function (a) {
  this.appendToTable = a;
  $("#showhide_menu_button").click(IAS.PanelRenderer.onShowHideNavigationLinks);
  IAS.messagingManager = IAS.messagingManager || new IAS.MessagingManager();
  IAS.Data.chartKeys = [];
  for (var c = 0; c < IAS.Panels.length; c += 1) {
    var b = IAS.Panels[c].Category;
    var h = IAS.Panels[c].Panels;
    var l = $("<td>");
    a.append($("<tr>").append(l));
    var k = $.createDiv(
      String.format("panelLinksContainer{0}", c),
      "panelLinksContainers"
    ).hide();
    var m = $("<div class='panelGroupLinksTitle'>")
      .append($("<i class='arrowsImg' id='arrowImg'>"))
      .append($("<span class='titleSpan'>").html(b));
    m.click(IAS.bind(this, "togglePanelLinksContainer", m, k));
    l.append(m);
    l.append(k);
    for (var e = 0; e < h.length; e += 1) {
      var d = h[e];
      if (d.ShowHomeChart) {
        IAS.Data.chartKeys.push(d.JavascriptName);
        IAS.cookies.clearCookie("NextUrl");
      }
      IAS.PanelObjects[d.JavascriptName] = d;
      var f = $("<div class='panelLinkContainer'>");
      IAS.messagingManager.setPanelMessageType(
        d.JavascriptName,
        d.MessageTypes
      );
      var g = $("<div class='panelLinkNumMessages'>");
      g.hide();
      f.append(g);
      f.append($("<span>").html(d.VocabularyTerm));
      k.append(
        $("<a class='panelLink'>")
          .append(f)
          .attr("href", "#" + d.JavascriptName)
      );
      d.linkDiv = f;
    }
  }
};
IAS.PanelRenderer._isMenuVisible = true;
IAS.PanelRenderer.onShowHideNavigationLinks = function () {
  if (IAS.PanelRenderer._isMenuVisible) {
    $("#linksOptionsDiv").css({
      "margin-left": 18.37 + 0.006318 * screen.availWidth + "%",
      "margin-right": 18.37 + 0.006318 * screen.availWidth + "%",
    });
  } else {
    $("#linksOptionsDiv").css({ "margin-left": "0", "margin-right": "0" });
  }
  IAS.PanelRenderer._isMenuVisible = !IAS.PanelRenderer._isMenuVisible;
  $("#links").toggleClass("hiddenLinks");
  $("#panel").toggleClass("expandedPanel");
  $("#showhide_menu_button").toggleClass("css-striped_images-sub_blue_prev");
  $("#linksOptionsDiv").toggleClass("linksOptionsDivVertical");
};
IAS.PanelRenderer._lastPanelRenderer = null;
IAS.PanelRenderer.currentPanelId = null;
IAS.PanelRenderer.isPanelHasErrorMarker = function (c) {
  var a = false;
  IAS.syncPost("/Renderer/RefreshPanelData", { panelID: c }, function (d) {
    IAS.updateDictionary(IAS.Data, d);
  });
  var b = IAS.PanelRenderer.Renderers[c];
  a = b.hasErrorMarkerOnCenterApplications();
  return a;
};
IAS.PanelRenderer.renderPanelFromHash = function (h) {
  var g = window.location.hash.split("#")[1];
  if (!g) {
    var a = false;
    var d;
    var f = {
      "perosnnel.centerManager.CenterProfile": false,
      "personnel.center.memberCenterApplications": false,
      "guest.center.memberCenterApplications": false,
    };
    for (var b = 0, c = $(".panelLink").length; b < c; b++) {
      var e = $(".panelLink")[b].attributes[1];
      d = e.value.split("#")[1];
      if (f.hasOwnProperty(d)) {
        a = IAS.PanelRenderer.isPanelHasErrorMarker(d);
        if (a) {
          break;
        }
      }
    }
    if (a) {
      IAS.cookies.updateCookie("NextUrl", d);
      g = d;
      IAS.PanelRenderer.reDirectPanel(h, g);
    } else {
      IAS.PanelRenderer.reDirectPanel(h, g);
    }
  } else {
    IAS.PanelRenderer.reDirectPanel(h, g);
  }
};
IAS.PanelRenderer.reDirectPanel = function (j, h) {
  if (!h) {
    var d = $.cookie("NextUrl");
    if (d) {
      for (var b = 0, c = $(".panelLink").length; b < c; b++) {
        var f = $(".panelLink")[b].attributes[1];
        if (d === f.value.split("#")[1]) {
          h = d;
          break;
        }
      }
    }
  }
  if (!h) {
    IAS.post("/Renderer/showSudanIcon", {}, function (l) {
      var m = false;
      if (l) {
        m = l;
      }
      var k = IAS.PanelRenderer.Renderers.welcome;
      j.append(k.getPanelControl(m));
      if (k.afterRenderCallBack && k.afterRenderCallBack instanceof Function) {
        k.afterRenderCallBack();
      }
    });
  } else {
    if (h == IAS.PanelRenderer.currentPanelId) {
      return;
    }
    if (IAS.Panels._lastPanelRenderer) {
      if (IAS.PanelRenderer._lastPanelRenderer.onUnrendering) {
        var a = IAS.PanelRenderer._lastPanelRenderer.onUnrendering();
        if (a) {
          window.location.href = "#" + IAS.PanelRenderer.currentPanelId;
          return;
        }
      }
    }
    if (!h) {
      var h = window.location.hash.split("#")[1];
    }
    var g = IAS.PanelRenderer.Renderers[h];
    IAS.PanelRenderer._lastPanelRenderer = g;
    if (g) {
      var e = IAS.PanelObjects[h];
      e.isDirty = true;
      if (e.isDirty) {
        IAS.post("/Renderer/RefreshPanelData", { panelID: h }, function (k) {
          IAS.updateDictionary(IAS.Data, k);
          IAS.PanelRenderer.renderPanel(h, j);
          IAS.cookies.createCookie("NextUrl", h, { path: "/" });
        });
      } else {
        IAS.PanelRenderer.renderPanel(h, j);
      }
    } else {
      j.append($("<p>").html("Javascript Renderer Not Found: " + h));
    }
  }
};
IAS.PanelRenderer.togglePanelLinksContainer = function (c, a) {
  var b = c.hasClass("titleClicked");
  $(".panelLinksContainers").slideUp(250, "swing");
  $(".panelGroupLinksTitle").removeClass("titleClicked");
  $(".arrowsImg").removeClass("orderUP");
  if (!b) {
    a.slideDown(250, "swing");
    c.addClass("titleClicked");
    c.find(".arrowsImg").addClass("orderUP");
  }
};
IAS.PanelRenderer.renderPanel = function (f, g) {
  var e = g.parent();
  g.detach();
  g.empty();
  this.callPanelOnExit();
  var c = IAS.PanelRenderer.Renderers[f];
  var b = null;
  if (c.onEnter instanceof Function) {
    c.onEnter();
  }
  b = c.getPanelControl();
  g.append(b);
  if (c.afterRenderCallBack && c.afterRenderCallBack instanceof Function) {
    c.afterRenderCallBack();
  }
  var d = IAS.PanelRenderer.getPanelTitle(f);
  if (d) {
    d = " : " + d;
  } else {
    d = "";
  }
  if (IAS.PanelRenderer.currentPanelId) {
    var a = IAS.PanelObjects[IAS.PanelRenderer.currentPanelId].linkDiv;
    a.removeClass("clicked");
  }
  IAS.PanelRenderer.currentPanelId = f;
  var a = IAS.PanelObjects[f].linkDiv;
  a.addClass("clicked");
  $("#header #title h1").text(IAS.L("ICDL Administration System") + d);
  if (!a.is(":visible")) {
    IAS.PanelRenderer.togglePanelLinksContainer(
      a.parent().parent().siblings(),
      a.parent().parent()
    );
  }
  g.appendTo(e);
};
IAS.PanelRenderer.callPanelOnExit = function () {
  var a = IAS.PanelRenderer.Renderers[IAS.PanelRenderer.currentPanelId];
  if (a && a.onExit instanceof Function) {
    a.onExit();
  }
};
IAS.NewsRenderer = {
  _internalRenderNews: function (a, b) {
    var c = a;
    var d = b;
    var f = {
      render: this.RendererFunction,
      emptyMessage: IAS.L("No news posted."),
    };
    var e = IAS.createCustomUIList(d, f);
    $(e)
      .attr(
        "style",
        "width: 97%; max-height: 200px; border-width: 0 !important;"
      )
      .addClass("messagesTable");
    e.table.css({ width: "100%", border: "none", "white-space": "normal" });
    c.append(e);
  },
  RenderNewsForMember: function (a) {
    this._internalRenderNews(a, IAS.Data.News);
  },
  RenderLatestNewsForMember: function (a) {
    var b = IAS.Data.News.filter(function (d) {
      return d.isNew;
    });
    this._internalRenderNews(a, b);
    var c = b.length;
    this.showNewsCount(c);
    return c > 0;
  },
  RendererFunction: function (a) {
    var b = $.createDiv().addClass("newsItemDiv");
    var c = $("<span class='newsItemSpan'>")
      .text(a.title)
      .iasTooltip(IAS.L("Click for more details"));
    b.append(
      $(
        "<img src='/css/icons/bullet_" +
          (a.isNew ? "red" : "blue") +
          ".png' class='msgImage'>"
      )
    )
      .append(c)
      .click(IAS.bind(IAS.NewsRenderer, "Item_Click", a));
    return b;
  },
  Item_Click: function (d) {
    var e = $.createDiv();
    var a = $("<i style='color: Blue;'>").text("@ " + d.postDate);
    var c = new HtmlEditorRenderer({
      id: "details",
      label: "Details",
      size: { rows: 18, cols: 88 },
    });
    e.append(a).appendBr().appendBr();
    c.renderOn(e);
    c.setValue(d.description);
    c.inputField.attr("readonly", true);
    c.HideHtmlEditorToolBar();
    var b = IAS.popup(e, d.title, { width: "600", height: "400" });
  },
  showNewsCount: function (a) {
    if (a > 0) {
      var c = this.parseNewsString();
      if (!c) {
        var b = $("#numOfNews");
        b.text(a.toString()).show();
      }
    }
  },
  parseNewsString: function () {
    var a = localStorage.getItem("news");
    return a && a === "true";
  },
};
IAS.Calendar = {};
IAS.Calendar.BigCalendarOptions = function () {
  var a = {
    longDay: false,
    longMonth: true,
    dateRangeStart: 2002,
    dateRangeEnd: parseInt(new Date().getFullYear()) + 1,
    cellWidth: 100,
    cellHeight: 100,
    onPagingCreateContainerWithoutSetValue: false,
  };
  return a;
};
IAS.Calendar.BigCalendarEvents = function () {};
IAS.Calendar.GetBigCalendarRenderDetailsByType = function (b) {
  var a = {};
  a.dateKey = "date";
  switch (b) {
    case "label":
      a.type = "label";
      break;
    case "link":
      a.type = "link";
      break;
    case "tableRenderer":
      a.type = "tableRenderer";
      a.options = IAS.TableRendererOptions();
      break;
    case "filter":
      a.type = "filter";
      a.filterKey = null;
      a.filterLabel = null;
      a.filterKeyUrl = null;
      a.filterKeyDetails = {};
      break;
  }
  return a;
};
IAS.Calendar.CheckBigCalendarRenderType = function (a) {
  switch (a) {
    case "label":
      break;
    case "link":
      break;
    case "tableRenderer":
      break;
    case "filter":
      break;
    default:
      throw "Error on Render type.. the type must be label, link, tableRenderer or filter..";
  }
};
IAS.Calendar = IAS.Calendar || {};
IAS.Calendar.BigCalendarRenderer = function (b, c, f, g, d, e) {
  this.divSelector = b;
  this.options = c || IAS.Calendar.BigCalendarOptions();
  this.renderDetails =
    f || IAS.Calendar.GetBigCalendarRenderDetailsByType("label");
  this.checkRenderDetails();
  this.renderers = {};
  this.bigCalendarPaging = d;
  this.externalData = e || {};
  this.drawCalendar();
  if (g) {
    var a = false;
    if (this.options.onPagingCreateContainerWithoutSetValue == true) {
      a = true;
    }
    this.setValues(g, a);
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.checkRenderDetails = function () {
  if (this.renderDetails.hasOwnProperty("type")) {
    IAS.Calendar.CheckBigCalendarRenderType(this.renderDetails.type);
  } else {
    throw "Error on Render Details.. you should specify the type of the data..";
  }
  if (!this.renderDetails.hasOwnProperty("dateKey")) {
    this.renderDetails.dateKey = "date";
  }
  if (this.renderDetails.type == "filter") {
    if (
      !this.renderDetails.hasOwnProperty("filterKey") ||
      !this.renderDetails.hasOwnProperty("filterLabel") ||
      !this.renderDetails.hasOwnProperty("filterKeyDetails")
    ) {
      throw "On using type: filter, you should declare the three main keys filterKey, filterLabel, filterKeyDetails";
    } else {
      if (
        !this.renderDetails.filterKey ||
        !this.renderDetails.filterLabel ||
        !this.renderDetails.filterKeyDetails ||
        Object.keys(this.renderDetails.filterKeyDetails).length == 0
      ) {
        throw "On using type: filter, you should implement the three main keys filterKey, filterLabel, filterKeyDetails";
      }
      var a = Object.keys(this.renderDetails.filterKeyDetails)[0];
      if (!this.renderDetails.filterKeyDetails[a].hasOwnProperty("callback")) {
        throw 'Please check on filterKeyDetails, each key value should has at least a "callback" function';
      }
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.drawCalendar = function () {
  this.calendarTable = $("<table>").addClass("BigCalendarTable");
  this.divSelector.append(this.calendarTable);
  this.drawCalendarPagingHeader();
  this.drawWeekDaysHeader();
  this._storeCurrentDateInfo();
  this.drawDatesContainer();
};
IAS.Calendar.BigCalendarRenderer.prototype.drawCalendarPagingHeader = function () {
  var f = $("<span>")
    .append("<<")
    .addClass("BigCalendar")
    .attr({ id: "leftCalendarPaging" });
  f.click(IAS.bind(this, "onLeftPagingClick"));
  var j = $("<div>").addClass("BigCalendar").attr({ id: "monthYearContainer" });
  var h =
    this.options.longMonth == true
      ? monthString().longMonth
      : monthString().shortMonth;
  this.monthRenderer = new DropdownRenderer(
    { id: "calendarMonth", options: h, disallowedNull: true, dontSort: true },
    IAS.bind(this, "onMonthYearChange")
  );
  this.monthRenderer.renderOn(j);
  var o = [];
  for (
    var n = this.options.dateRangeStart;
    n <= this.options.dateRangeEnd;
    n++
  ) {
    o.push({ id: n, label: n });
  }
  this.yearRenderer = new DropdownRenderer(
    { id: "calendarYear", options: o, disallowedNull: true },
    IAS.bind(this, "onMonthYearChange")
  );
  this.yearRenderer.renderOn(j);
  var c;
  var d;
  if (this.bigCalendarPaging) {
    var a = moment(this.bigCalendarPaging.from, "DD-MMM-YYYY");
    var c = a.month() + 1;
    var d = a.year();
  } else {
    var b = new Date();
    c = b.getMonth() + 1;
    d = b.getFullYear();
  }
  this.monthRenderer.setValue(c);
  this.yearRenderer.setValue(d);
  var l = $("<span>")
    .append(">>")
    .addClass("BigCalendar")
    .attr({ id: "rigntCalendarPaging" });
  l.click(IAS.bind(this, "onRightPagingClick"));
  var e = $("<tr>").addClass("CalendarHeader");
  var g = $("<th>").append(f);
  var k = $("<th>").append(j).attr({ colspan: "5" });
  var m = $("<th>").append(l);
  e.append(g).append(k).append(m);
  this.calendarTable.append(e);
};
IAS.Calendar.BigCalendarRenderer.prototype._storeCurrentDateInfo = function () {
  var b = parseInt(this.yearRenderer.getValue());
  var a = parseInt(this.monthRenderer.getValue());
  this.currentDateInfo = getDateFullInfo(b, a);
};
IAS.Calendar.BigCalendarRenderer.prototype.onLeftPagingClick = function () {
  var a = false;
  var d = parseInt(this.monthRenderer.getValue());
  if (d == 1) {
    var e = parseInt(this.yearRenderer.getValue());
    if (e != this.options.dateRangeStart) {
      var c = e - 1;
      this.yearRenderer.setValue(c);
      var b = 12;
      this.monthRenderer.setValue(b);
      a = true;
    }
  } else {
    var b = d - 1;
    this.monthRenderer.setValue(b);
    a = true;
  }
  if (a) {
    this.onCalendarPagingChange();
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.onMonthYearChange = function () {
  this.onCalendarPagingChange();
};
IAS.Calendar.BigCalendarRenderer.prototype.onRightPagingClick = function () {
  var a = false;
  var d = parseInt(this.monthRenderer.getValue());
  if (d == 12) {
    var e = parseInt(this.yearRenderer.getValue());
    if (e != this.options.dateRangeEnd) {
      var c = e + 1;
      this.yearRenderer.setValue(c);
      var b = 1;
      this.monthRenderer.setValue(b);
      a = true;
    }
  } else {
    var b = d + 1;
    this.monthRenderer.setValue(b);
    a = true;
  }
  if (a) {
    this.onCalendarPagingChange();
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.onCalendarPagingChange = function () {
  var a = this;
  this._storeCurrentDateInfo();
  this.drawDatesContainer();
  if (this.bigCalendarPaging) {
    if (this.bigCalendarPaging.callBackFunction) {
      var b = {
        from: this.currentDateInfo.from,
        to: this.currentDateInfo.to,
        Url: this.bigCalendarPaging.url,
      };
      this.bigCalendarPaging.callBackFunction(b);
    } else {
      var b = {
        From: this.currentDateInfo.from,
        To: this.currentDateInfo.to,
        Url: this.bigCalendarPaging.url,
        ExternalData: this.externalData,
      };
      IAS.post(this.bigCalendarPaging.url, b, function (d) {
        var e;
        if (d.Data) {
          e = d.Data;
        } else {
          e = d;
        }
        var c = false;
        if (a.options.onPagingCreateContainerWithoutSetValue == true) {
          c = true;
        }
        a.setValues(e, c);
      });
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.drawWeekDaysHeader = function () {
  var a = $("<tr>").addClass("BigCalendar").attr({ id: "WeekDaysHeader" });
  var d = this.options.longDays
    ? weekDaysString().longDay
    : weekDaysString().shortDay;
  for (var c = 0; c < d.length; c++) {
    var b = $("<th>").attr({ id: d[c].id, label: d[c].label });
    b.append(d[c].label);
    a.append(b);
  }
  this.calendarTable.append(a);
};
IAS.Calendar.BigCalendarRenderer.prototype.drawDatesContainer = function () {
  $(this.calendarTable).find("tr[class=week]").remove();
  this.renderers = {};
  var a = false;
  var e = false;
  var f = 0;
  var d = 0;
  while (!a) {
    f++;
    var g = $("<tr>").addClass("week").attr({ id: f });
    for (var c = 0; c <= 6; c++) {
      if (f == 1 && c == this.currentDateInfo.startWeekDay) {
        e = true;
      }
      var b = $("<td>").addClass("DateTd");
      b.css({ width: this.options.cellWidth, height: this.options.cellHeight });
      g.append(b);
      if (e) {
        d++;
        this.renderDateContainer(b, d);
        if (d == this.currentDateInfo.numberOfDaysPerMonth) {
          e = false;
        }
      }
    }
    this.calendarTable.append(g);
    if (d >= this.currentDateInfo.numberOfDaysPerMonth && e == false) {
      a = true;
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.renderDateContainer = function (
  b,
  c
) {
  var g = this;
  var a = $("<div>").addClass("DateContainer");
  a.css({ width: "94%", height: this.options.cellHeight - 10 });
  var d = $("<span>").addClass("DayNumberContainer").append(c);
  d.css({ height: "33px" });
  var e = $("<div>").addClass("DayValuesContainer");
  var h = this.options.cellHeight - 33;
  e.css({ width: this.options.cellWidth - 15, height: h });
  var j = c.toString().length == 1 ? "0" + c.toString() : c.toString();
  var f =
    j +
    "-" +
    this.currentDateInfo.spectoMonth +
    "-" +
    this.currentDateInfo.spectoYear;
  e.attr({
    d: j,
    m: this.currentDateInfo.spectoMonth,
    y: this.currentDateInfo.spectoYear,
    id: f,
  });
  this.renderers[f] = { container: e };
  a.append(d).append(e);
  b.append(a);
};
IAS.Calendar.BigCalendarRenderer.prototype.setValues = function (b, a) {
  if (b instanceof Array) {
    this.setArrayOfValues(b, a);
  } else {
    if (b instanceof Object) {
      this.setValuesByDates(b, a);
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.setArrayOfValues = function (c, b) {
  for (var a in c) {
    this.createValueContainerIfNotExistAndSetValue(c[a], b);
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.setValuesByDates = function (a, d) {
  for (var b in a) {
    this.emptyDateValues(b);
    var c = a[b];
    this.setArrayOfValues(c, d);
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.setFilterValuesByDates = function (
  a,
  f
) {
  for (var c in a) {
    var b = a[c];
    for (var d in b) {
      this.emptyDateValues(c, d);
      var e = b[d];
      this.setValues(e, f);
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.emptyDateValues = function (a, b) {
  switch (this.renderDetails.type) {
    case "label":
      break;
    case "link":
      break;
    case "tableRenderer":
      var c = this.renderers[a];
      if (c) {
        if (c.hasOwnProperty("tableRendererValues")) {
          c.tableRendererValues = [];
        }
      }
      break;
    case "filter":
      this.filterRemoveValues(a, b);
      break;
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.createValueContainerIfNotExistAndSetValue = function (
  f,
  d
) {
  var a = d || false;
  var c = this.renderDetails.dateKey ? this.renderDetails.dateKey : "date";
  if (!f.hasOwnProperty(c)) {
    throw "The dateKey is not defined on the value object";
  }
  var b = f[c];
  var e = this.renderers[b];
  if (e) {
    switch (this.renderDetails.type) {
      case "label":
        break;
      case "link":
        break;
      case "tableRenderer":
        this.createTableRendererObjectIfNotExist(e);
        if (!a) {
          this.tableRendererAppendValue(f, e);
        }
        break;
      case "filter":
        this.createDateMainTableIfNotExist(b);
        this.createMainTableRowIfNotExist(b, f);
        if (!a) {
          this.filterAppendValue(e, f);
        }
        break;
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.createTableRendererObjectIfNotExist = function (
  a
) {
  if (!a.hasOwnProperty("tableRendererObject")) {
    var b = IAS.CreateTableRendererFromOptions(
      a.container,
      [],
      this.renderDetails.options
    );
    $(b.table).css({
      width: this.options.cellWidth - 40,
      height: this.options.cellHeight - 70,
      "font-size": "1px",
    });
    a.tableRendererObject = b;
    a.tableRendererValues = [];
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.tableRendererAppendValue = function (
  b,
  a
) {
  a.tableRendererValues.push(b);
  a.tableRendererObject.setValues(a.tableRendererValues);
};
IAS.Calendar.BigCalendarRenderer.prototype.createDateMainTableIfNotExist = function (
  a
) {
  var c = this.renderers[a];
  if (!c.hasOwnProperty("mainTable")) {
    var b = $("<table>").addClass("dateMainTable");
    c.mainTable = b;
    c.container.append(b);
    c.filterKeyDetails = {};
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.createMainTableRowIfNotExist = function (
  a,
  j
) {
  var g = this;
  var h = this.renderers[a];
  var c = this.renderDetails.filterKey;
  var e = this.renderDetails.filterLabel;
  var d = j[c];
  var f = j[e];
  if (!h.filterKeyDetails.hasOwnProperty(d)) {
    h.filterKeyDetails[d] = { label: f, values: [] };
    var l = $("<tr>").attr({ date: a, key: d });
    var k = $("<td>").append(f);
    l.append(k);
    h.mainTable.append(l);
    var b = this.renderDetails.filterKeyDetails[d];
    if (b.hasOwnProperty("keyCSS") && b.keyCSS) {
      l.css(b.keyCSS);
    }
    if (b.hasOwnProperty("callback") && b.callback) {
      l.css({ cursor: "pointer" });
      l.click(function (m) {
        g.onMainTableRowClick(this);
      });
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.onMainTableRowClick = function (a) {
  var d = this;
  var b = $(a).attr("date");
  var c = $(a).attr("key");
  var e = this.renderers[b];
  if (d.renderDetails.filterKeyUrl) {
    IAS.post(
      d.renderDetails.filterKeyUrl,
      { From: b, To: b, filterKey: c },
      function (f) {
        d.emptyDateValues(b, c);
        var g;
        if (f.Data) {
          g = f.Data;
        } else {
          g = f;
        }
        d.setValues(g);
        d.afterMainTableRowClick(e, c);
      }
    );
  } else {
    d.afterMainTableRowClick(e, c);
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.afterMainTableRowClick = function (
  e,
  a
) {
  var c = $("<div>");
  var b = e.filterKeyDetails[a].label;
  var g = e.filterKeyDetails[a].values;
  var f = this.renderDetails.filterKeyDetails[a].callback(c);
  f.setValues(g);
  var d = IAS.popupOptions();
  new IAS.popup(c, IAS.L(b), d, [{ label: IAS.L("Close") }]);
};
IAS.Calendar.BigCalendarRenderer.prototype.filterAppendValue = function (d, e) {
  var a = this.renderDetails.filterKey;
  var c = this.renderDetails.filterLabel;
  if (!e.hasOwnProperty(a) || !e.hasOwnProperty(c)) {
    throw "The filterKey or the filterLabel is not defined on the value object";
  } else {
    var b = e[a];
    d.filterKeyDetails[b].values.push(e);
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.filterRemoveValues = function (
  a,
  d
) {
  var c = false;
  if (!d) {
    var c = true;
  }
  var e = this.renderers[a];
  if (e) {
    if (e.hasOwnProperty("filterKeyDetails")) {
      if (c == true) {
        for (var b in e.filterKeyDetails) {
          e.filterKeyDetails[b]["values"] = [];
        }
      } else {
        if (e.filterKeyDetails.hasOwnProperty(d)) {
          e.filterKeyDetails[d]["values"] = [];
        }
      }
    }
  }
};
IAS.Calendar.BigCalendarRenderer.prototype.removeMainTableRow = function (
  a,
  b
) {
  var c = this.renderers[a];
  if (c && c.filterKeyDetails.hasOwnProperty(b)) {
    $(c.mainTable)
      .find("tr[key=" + b + "]")
      .remove();
    delete c.filterKeyDetails[b];
    if ($(c.mainTable).find("tr").length == 0) {
      $(c.mainTable).remove();
      delete c.mainTable;
      delete c.filterKeyDetails;
    }
  }
};
DragDropRenderer = function (b, c, a, d, e) {
  this.dragMainObjects = b;
  this.dragObjects = $.extend(true, [], b);
  this.dropSelector = c;
  this.dropSelector.addClass("droppable");
  this.isReadOnly = d || false;
  this.onClickCallBack = e;
  this.createdragDropTable(a);
};
DragDropRenderer.prototype.createdragDropTable = function (a) {
  var b = $("<table>").addClass("dragDropTable");
  var c = $("<tr>");
  this.dragBoxContainerTd = $("<td>").attr("id", "dragBoxContainer");
  this.renderDraggableObjects();
  this.dropBoxContainerTd = $("<td>").attr("id", "dropBoxContainer");
  this.renderDroppableObjects();
  c.append(this.dragBoxContainerTd).append(this.dropBoxContainerTd);
  b.append(c);
  a.append(b);
};
DragDropRenderer.prototype.renderDraggableObjects = function () {
  var g = this;
  this.dragContentSelectors = {};
  var a = [];
  for (var f = 0; f < this.dragObjects.length; f++) {
    var c = this.dragObjects[f];
    var d = $("<div>").addClass("draggable");
    d.attr("id", c.id);
    var e = $("<div>").addClass("draggableContent");
    if (c.contentDiv) {
      e.append(c.contentDiv).css({ width: "inherit", left: "0", right: "0" });
    } else {
      e.html(c.label);
    }
    e.attr("id", c.id);
    this.dragContentSelectors[c.id] = {
      draggableDiv: d,
      contentDiv: e,
      objectData: c,
    };
    var b = { fun: c.onClickCallBack || this.onClickCallBack || null };
    if (b.fun) {
      e.css("cursor", "pointer");
      e.click(
        IAS.bind(
          b,
          "fun",
          this.dragContentSelectors[c.id].objectData,
          f,
          this.dragContentSelectors[c.id].contentDiv
        )
      );
    }
    d.append(e);
    d.draggable({
      containment: ".dragDropTable",
      snap: ".dragDropTable",
      cursor: "move",
      stack: "#dragBoxContainer div.draggable",
      drag: function (h, k) {
        if (
          !window.clientInformation ||
          window.clientInformation.appVersion.indexOf("Chrome") == -1
        ) {
          var j = document.body.getBoundingClientRect();
          k.position.top += j.top;
          k.position.left += j.left;
        }
      },
      start: function () {
        $(this).data("dropped", false);
      },
      stop: function () {
        var h = $(this);
        if (h.data("dropped") == false) {
          g.removeSizeAndOffsetAttributes(h);
        }
      },
    });
    d.resizable();
    if (this.isReadOnly) {
      c.draggable("disable");
    }
    a.push({ cells: d });
  }
  new IAS.TableLayoutRenderer(
    a,
    this.dragBoxContainerTd,
    null,
    300,
    60 * a.length
  )
    .css("border", "none")
    .removeBorder();
  this.dragBoxContainerTd.append("<br><br><br><br><br>");
};
DragDropRenderer.prototype.renderDroppableObjects = function (b) {
  var a = this;
  if (b) {
    $(this.dropSelector).attr("id", b);
  }
  $(this.dropSelector).droppable({
    accept: "#dragBoxContainer .draggable",
    drop: function (e, f) {
      var d = f.draggable.attr("id");
      var c = $(this);
      f.draggable.data("dropped", true);
      a.setSizeAndOffsetAttributes(c, d, true);
    },
  });
  this.dropBoxContainerTd.append($(this.dropSelector));
};
DragDropRenderer.prototype.setSizeAndOffsetAttributes = function (b, a, e) {
  if (a) {
    var c = $(b).offset().left - $(b).scrollLeft();
    var d = $(b).offset().top - $(b).scrollTop();
    var f = $(this.dragContentSelectors[a].draggableDiv);
    f.attr("offset-left", f.offset().left - c);
    f.attr("offset-top", f.offset().top - d);
    f.attr("size-width", f.width());
    f.attr("size-height", f.height());
    f.attr("isDropped", e);
  }
};
DragDropRenderer.prototype.removeSizeAndOffsetAttributes = function (a) {
  a.removeAttr("offset-left");
  a.removeAttr("offset-top");
  a.removeAttr("size-width");
  a.removeAttr("size-height");
  a.removeAttr("isDropped");
};
DragDropRenderer.prototype.isAllObjectsDropped = function () {
  var c = true;
  for (var a in this.dragContentSelectors) {
    var b = this.dragContentSelectors[a].draggableDiv;
    if ($(b).attr("isDropped") == false) {
      c = false;
    }
  }
  return c;
};
DragDropRenderer.prototype.resetDragDrop = function () {
  this.dragObjects = $.extend(true, [], this.dragMainObjects);
  this.dragBoxContainerTd.empty();
  this.renderDraggableObjects();
  this.dropBoxContainerTd.empty();
  this.renderDroppableObjects();
};
DragDropRenderer.prototype.setValue = function (h, e) {
  this.resetDragDrop();
  if (e) {
    this.dropSelector = e;
  }
  $(this.dropBoxContainerTd).append($(this.dropSelector));
  for (var d = 0; d < h.length; d++) {
    var b = h[d];
    var c = $(this.dragContentSelectors[b.id].draggableDiv);
    var a = $(this.dragContentSelectors[b.id].contentDiv);
    if (b.x > 0 && b.y > 0) {
      var f =
        b.x +
        $(this.dropSelector).offset().left +
        $(this.dropSelector).scrollLeft();
      var g =
        b.y +
        $(this.dropSelector).offset().top +
        $(this.dropSelector).scrollTop();
      c.offset({ left: f, top: g });
      this.setSizeAndOffsetAttributes(e, b.id, true);
    } else {
      var f = 300;
      var g = 300;
      c.offset({ left: f, top: g });
    }
    if (b.width > 0) {
      c.width(b.width);
    }
    if (b.height > 0) {
      c.height(b.height);
    }
    this.dragContentSelectors[b.id].objectData = b;
    if (b.onClickCallBack) {
      a.unbind("click");
      a.click(
        IAS.bind(
          b,
          "onClickCallBack",
          this.dragContentSelectors[b.id].objectData,
          d,
          this.dragContentSelectors[b.id].contentDiv
        )
      );
    } else {
      if (this.onClickCallBack) {
        a.unbind("click");
        a.click(
          IAS.bind(
            this,
            "onClickCallBack",
            this.dragContentSelectors[b.id].objectData,
            d,
            this.dragContentSelectors[b.id].contentDiv
          )
        );
      }
    }
    c.css("z-index", 3);
    this.dragContentSelectors[b.id].objectData = b;
  }
  this.reflectDrageObjectSelectorToDrageObject();
};
DragDropRenderer.prototype.reflectDrageObjectSelectorToDrageObject = function () {
  for (var a = 0; a < this.dragObjects.length; a++) {
    this.dragObjects[a] = this.dragContentSelectors[
      this.dragObjects[a].id
    ].objectData;
  }
};
DragDropRenderer.prototype.getValue = function () {
  var g = [];
  this.reflectDrageObjectSelectorToDrageObject();
  var f = $.extend(true, [], this.dragObjects);
  for (var c = 0; c < f.length; c++) {
    var a = f[c];
    var b = $(this.dragContentSelectors[a.id].draggableDiv);
    var d = b.attr("offset-left");
    var e = b.attr("offset-top");
    if (d > 0 && e > 0) {
      if (a.contentDiv) {
        delete a.contentDiv;
      }
      a.x = d;
      a.y = e;
      a.width = b.css("width").replace("px", "");
      a.height = b.css("height").replace("px", "");
      a.isDropped = b.attr("isDropped") || false;
      g.push(a);
    }
  }
  return g;
};
DragDropRenderer.prototype.getDraggableContentSelectors = function () {
  return this.dragContentSelectors;
};
DragDropRenderer.prototype.getDraggableSelectorByID = function (a) {
  return this.dragContentSelectors[a].contentDiv;
};
FontRenderer = function (a) {
  if (a) {
    this.cssObject;
  } else {
    this.cssObject = {
      "font-style": "",
      "font-weight": "",
      "text-decoration": "",
      color: "",
      "font-family": "",
      "font-size": "",
      "text-align": "",
    };
  }
};
FontRenderer.prototype.renderOn = function (a) {
  this.exampleTextDiv = $("<div>").attr("id", "changeMe");
  this.exampleTextDiv.html(IAS.L("Example"));
  a.append(this.exampleTextDiv).append("<br>");
  this.fontStyle(a);
  this.textAlign(a);
  this.fontColor(a);
  a.appendBr();
  this.fontFamily(a);
  this.fontSize(a);
};
FontRenderer.prototype.fontStyle = function (a) {
  this.fontStyleCheckBox = new CheckboxListRenderer(
    {
      checkBoxOptions: [
        { id: "Bold", label: IAS.L("Bold") },
        { id: "Italic", label: IAS.L("Italic") },
        { id: "Underline", label: IAS.L("Underline") },
      ],
    },
    null,
    false,
    IAS.bind(this, "onStyleCheckBoxChange"),
    true
  );
  this.fontStyleCheckBox.renderOn(a);
};
FontRenderer.prototype.onStyleCheckBoxChange = function (b, a) {
  b = b.toLowerCase();
  if (b == "italic") {
    $(this.exampleTextDiv).css("font-style", a ? "Italic" : "");
    this.cssObject["font-style"] = a ? "Italic" : "";
  } else {
    if (b == "bold") {
      $(this.exampleTextDiv).css("font-weight", a ? "Bold" : "");
      this.cssObject["font-weight"] = a ? "Bold" : "";
    } else {
      if (b == "underline") {
        $(this.exampleTextDiv).css("text-decoration", a ? "Underline" : "");
        this.cssObject["text-decoration"] = a ? "Underline" : "";
      }
    }
  }
};
FontRenderer.prototype.fontColor = function (a) {
  var b = this;
  this.colorPicker = new ColorRenderer(
    { label: IAS.L("Font color"), id: "fontColor" },
    function (c) {
      $(b.exampleTextDiv).css("color", $(c.inputField).val());
      b.cssObject.color = $(c.inputField).val();
    }
  );
  this.colorPicker.renderOn(a);
};
FontRenderer.prototype.fontFamily = function (a) {
  var b = this;
  this.fontFamilyDropDown = new DropdownRenderer(
    { options: IAS.fontFamilies, placeholder: IAS.L("Select Font Family") },
    function (c) {
      var d = $(c.inputField).val();
      if (d == "Defaultfont") {
        $(b.exampleTextDiv).css("font-family", "");
      } else {
        $(b.exampleTextDiv).css("font-family", d);
      }
      b.cssObject["font-family"] = d;
    }
  );
  if (!IAS.fontFamilies) {
    IAS.post("/Renderer/GetFontFamily", {}, function (c) {
      IAS.fontFamilies = c;
      b.fontFamilyDropDown.appendNewValues(c);
    });
  }
  this.fontFamilyDropDown.renderOn(a);
};
FontRenderer.prototype.textAlign = function (a) {
  var b = this;
  var c = [
    { id: "left", label: "Left" },
    { id: "center", label: "Center" },
    { id: "right", label: "Right" },
  ];
  this.textAlignDropdown = new DropdownRenderer(
    { options: c, dontSort: true, placeholder: IAS.L("Select Aligment") },
    function (d) {
      var e = $(d.inputField).val();
      if (e) {
        $(b.exampleTextDiv).css("text-align", e);
        b.cssObject["text-align"] = e;
      }
    }
  );
  this.textAlignDropdown.renderOn(a);
};
FontRenderer.prototype.fontSize = function (a) {
  var c = this;
  var b = [
    { id: "8", label: "8" },
    { id: "10", label: "10" },
    { id: "12", label: "12" },
    { id: "14", label: "14" },
    { id: "16", label: "16" },
    { id: "18", label: "18" },
    { id: "20", label: "20" },
    { id: "22", label: "22" },
    { id: "24", label: "24" },
    { id: "26", label: "26" },
    { id: "28", label: "28" },
    { id: "30", label: "30" },
    { id: "32", label: "32" },
    { id: "34", label: "34" },
    { id: "36", label: "36" },
    { id: "0", label: "custom" },
  ];
  this.fontSizeDropDown = new DropdownRenderer(
    { options: b, placeholder: IAS.L("Select Font Size") },
    function (f) {
      var h = f.getValue();
      if (h && h == "0") {
        var e = this;
        var d = $("<div>").append(IAS.L("Font size"));
        var g = $.map(b, function (j) {
          return j.id;
        });
        txtSizeRenderer = new TextRenderer({
          id: "txtSizeRenderer",
          label: "txtSizeRenderer",
        });
        txtSizeRenderer.renderOn(d);
        d.append();
        new IAS.popup(d, IAS.L("Font size"), null, [
          {
            label: IAS.L("OK"),
            bindFunction: function () {
              var j = txtSizeRenderer.getValue();
              if (j && g.indexOf(j) == -1) {
                c.fontSizeDropDown.appendValue({ id: j, label: j });
              }
              c.fontSizeDropDown.setValue(j);
              c.fontSizeDropDown.inputField.change();
              this.close();
            },
          },
        ]);
      } else {
        $(c.exampleTextDiv).css("font-size", Number(h || 12));
        c.cssObject["font-size"] = Number(h || 12);
      }
    }
  );
  this.fontSizeDropDown.renderOn(a);
};
FontRenderer.prototype.applyCss = function (a) {
  for (var b in this.cssObject) {
    a.css(b, this.cssObject[b]);
  }
};
FontRenderer.prototype.getValue = function () {
  return this.cssObject;
};
FontRenderer.prototype.setValue = function (d) {
  var a = this;
  var b = function (e, f) {
    $(a.exampleTextDiv).css(e, f);
    a.cssObject[e] = f;
  };
  var c = [];
  if (d["font-style"]) {
    c.push("italic");
    this.onStyleCheckBoxChange("italic", true);
  }
  if (d["font-weight"]) {
    c.push("Bold");
    this.onStyleCheckBoxChange("Bold", true);
  }
  if (d["text-decoration"]) {
    c.push("underline");
    this.onStyleCheckBoxChange("underline", true);
  }
  this.fontStyleCheckBox.setSelectedValue(c);
  if (d.color) {
    this.colorPicker.setValue(d.color);
    b("color", d.color);
  }
  if (d["font-family"]) {
    this.fontFamilyDropDown.setValue(d["font-family"]);
    b("font-family", d["font-family"]);
  }
  if (d["font-size"]) {
    this.fontSizeDropDown.setValue(Number(d["font-size"] || 11));
    b("font-size", Number(d["font-size"] || 11));
  }
  if (d["text-align"]) {
    this.textAlignDropdown.setValue(d["text-align"].toLowerCase());
    b("text-align", d["text-align"]);
  }
};
ChartRenderer = function (b, c, a) {
  this.containerDiv = a;
  this.chartRendererDiv = $("<div>").addClass("chartRenderer");
  this.field = b;
  this.chartType = b.chartType;
  this.legends = b.legends;
  this.values = c || b.result;
  this.renderOn(this.containerDiv, this.values);
};
ChartRenderer.prototype.renderOn = function (a, b) {
  this.reDraw(a, b);
};
ChartRenderer.prototype.calculateCanvasWidthBasedOnMultipleColumns = function (
  b,
  d
) {
  var c = b * d;
  if (c <= 20) {
    a = c * 50;
  } else {
    var a = 4 * c;
    if (a <= 500) {
      a = 1000;
    } else {
      if (a > 500 && a < 6000) {
        a *= 3;
      } else {
        if (a >= 6000) {
          a *= 2;
        }
      }
    }
    if (a >= 30000) {
      a = 30000;
    }
  }
  return a;
};
ChartRenderer.prototype.calculateCanvasWidthBasedOnSingleColumn = function (b) {
  var a;
  if (b <= 5) {
    a = b * 50;
  } else {
    if (b <= 15) {
      a = 500;
    } else {
      if (b <= 30) {
        a = 800;
      } else {
        a = this.calculateCanvasWidthBasedOnMultipleColumns(1, b);
      }
    }
  }
  return a;
};
ChartRenderer.prototype.getWidth = function () {
  var a = $(this.chartRendererDiv);
  return a.outerWidth() + 100;
};
ChartRenderer.prototype.getHeight = function () {
  var a = $(this.chartRendererDiv);
  return a.outerHeight() + 100;
};
ChartRenderer.prototype.reDraw = function (d, g) {
  $(this.chartRendererDiv).empty();
  d.append(this.chartRendererDiv);
  this.generateColors(this.legends.length);
  if (g && g.length > 0) {
    if (this.currentChart) {
      delete this.currentChart;
    }
    var b;
    if (this.field.hasOwnProperty("width")) {
      if (this.legends.length == 1 && g.length <= 5) {
        b = this.calculateCanvasWidthBasedOnSingleColumn(g.length);
      } else {
        b = this.field.width;
      }
    } else {
      if (this.legends.length == 1) {
        b = this.calculateCanvasWidthBasedOnSingleColumn(g.length);
      } else {
        if (g.length == 1) {
          b = this.calculateCanvasWidthBasedOnSingleColumn(this.legends.length);
        } else {
          b = this.calculateCanvasWidthBasedOnMultipleColumns(
            this.legends.length,
            g.length
          );
        }
      }
    }
    var a;
    if (this.field.hasOwnProperty("height")) {
      a = this.field.height;
    } else {
      a = "500";
    }
    this.canvas = $("<canvas>")
      .addClass("chartCanvas")
      .attr({ id: this.field.id })
      .css({ width: b, height: a });
    if (this.field.name) {
      var c = $("<h3>").addClass("chartTitle").append(this.field.name);
      this.chartRendererDiv.append("<br />").append(c);
    }
    var h;
    if (this.field.verticalTitle) {
      h = $("<label>")
        .addClass("chartVerticalTitle")
        .append(this.field.verticalTitle);
      this.chartRendererDiv.append(h);
      if (this.field.keepRealSize) {
        this.chartRendererDiv.css("width", "inherit");
      } else {
        this.chartRendererDiv.css("width", b < 500 ? 500 : b + 200);
      }
    }
    this.chartRendererDiv.append(this.canvas);
    var e = this.canvas.get(0).getContext("2d");
    this.currentChart = new Chart(e);
    this.setValues(g);
    if (this.field.horizontalTitle) {
      this.chartRendererDiv.append("<br /><br />");
      var f = $("<label>")
        .addClass("chartHorizontalTitle")
        .append(this.field.horizontalTitle);
      this.chartRendererDiv.append(f);
    }
    this.chartRendererDiv.append("<br /><br />");
    this.chartRendererDiv.append(this.renderLegend(b));
    this.chartRendererDiv.append("<br />");
    if (h) {
      h.css("margin-top", $(this.canvas).height() / 2);
    }
    if (!this.field.hideChartButtons) {
      this.createSaveChartButton();
    }
  } else {
    this.chartRendererDiv
      .append("<br />")
      .append("<b>" + IAS.L("There is no data to show") + "</b>");
  }
};
ChartRenderer.prototype.setValues = function (a) {
  if (a && a.length > 0) {
    switch (this.chartType) {
      case "bar":
        this.currentChart.Bar(this.reflectBarChartValue(a));
        break;
      case "line":
        this.currentChart.Line(this.reflectLineChartValue(a));
        break;
    }
  }
};
ChartRenderer.prototype.renderLegend = function (e) {
  var c = $("<div>").addClass("chartLegend");
  if (e) {
    c.css("width", e <= 200 ? 200 : e);
  }
  for (var a = 0; a < this.legends.length; a++) {
    var b = $("<div>")
      .addClass("chartLegendColor")
      .css({
        "background-color": this.getFillColor(a),
        "border-color": this.getStrokeColor(a),
      });
    var d = $("<span>").addClass("chartLegendLabel").append(this.legends[a]);
    c.append(b).append(d).append("<br />");
  }
  return c;
};
ChartRenderer.prototype.onSaveChartButtonClick = function (c, a, b) {
  c.href = a.toDataURL();
  c.download = b;
};
ChartRenderer.prototype.createSaveChartButton = function () {
  this.saveChartDiv = $("<div>");
  this.saveChartLink = $("<a>");
  this.saveChartDiv.append(this.saveChartLink);
  var c = new ButtonRenderer({
    id: "saveChartBtn",
    label: IAS.L("Save Chart As Image"),
  });
  c.renderOn(this.saveChartLink);
  var b = this;
  var a = this.field.name;
  this.saveChartLink[0].addEventListener(
    "click",
    function () {
      b.onSaveChartButtonClick(this, b.canvas[0], a + ".png");
    },
    false
  );
  this.containerDiv.append("<br />").append(this.saveChartDiv);
};
ChartRenderer.prototype.reflectLineChartValue = function (f) {
  var h = [];
  var c = [];
  var a = [];
  if (f[0].value) {
    var b = [];
    for (var d = 0; d < f.length; d++) {
      var e = f[d];
      h.push(e.label);
      b.push(e.value);
    }
    c.push({
      label: "My dataset",
      fillColor: this.getFillColor(0),
      strokeColor: this.getStrokeColor(0),
      pointColor: this.getStrokeColor(0),
      pointStrokeColor: "#fff",
      pointHighlightFill: "#fff",
      pointHighlightStroke: this.getHighlightStrokeColor(0),
      data: b,
    });
  } else {
    if (f[0].values) {
      var b = [,];
      for (var d = 0; d < f.length; d++) {
        var e = f[d];
        h.push(e.label);
        for (var g = 0; g < e.values.length; g++) {
          if (!c[g]) {
            c[g] = {
              label: "My dataset",
              fillColor: this.getFillColor(g),
              strokeColor: this.getStrokeColor(g),
              pointColor: this.getStrokeColor(g),
              pointStrokeColor: "#fff",
              pointHighlightFill: "#fff",
              pointHighlightStroke: this.getHighlightStrokeColor(g),
              data: [e.values[g]],
            };
          } else {
            c[g].data.push(e.values[g]);
          }
        }
      }
    }
  }
  return { labels: h, datasets: c };
};
ChartRenderer.prototype.reflectBarChartValue = function (g) {
  var k = [];
  var c = [];
  var a = [];
  if (g[0].value) {
    var b = [];
    for (var e = 0; e < g.length; e++) {
      var f = g[e];
      k.push(f.label);
      b.push(f.value);
    }
    c.push({
      label: "My dataset",
      fillColor: this.getFillColor(0),
      strokeColor: this.getStrokeColor(0),
      highlightFill: this.getHighlightFillColor(0),
      highlightStroke: this.getHighlightStrokeColor(0),
      data: b,
    });
  } else {
    if (g[0].values) {
      var d = g[0].values.length;
      for (var e = 0; e < g.length; e++) {
        var f = g[e];
        if (f.values.length != d) {
          window.alert("invalid data!");
          throw "Invalid data send to chat renderer";
        }
        k.push(f.label);
        for (var h = 0; h < f.values.length; h++) {
          if (!c[h]) {
            c[h] = {
              label: "My dataset",
              fillColor: this.getFillColor(h),
              strokeColor: this.getStrokeColor(h),
              highlightFill: this.getHighlightFillColor(h),
              highlightStroke: this.getHighlightStrokeColor(h),
              data: [f.values[h]],
            };
          } else {
            c[h].data.push(f.values[h]);
          }
        }
      }
    }
  }
  foo = c;
  foo1 = g;
  return { labels: k, datasets: c };
};
ChartRenderer.prototype.colorList = [
  "rgb(151,187,205)",
  "rgb(100,137,195)",
  "rgb(255,0,0)",
  "rgb(0,255,0)",
  "rgb(0,0,255)",
  "rgb(255,255,0)",
  "rgb(0,255,255)",
  "rgb(255,0,255)",
  "rgb(109,76,65)",
  "rgb(0,150,136)",
  "rgb(76,175,80)",
  "rgb(255,160,0)",
  "rgb(62,39,35)",
  "rgb(233,30,99)",
  "rgb(197,17,98)",
  "rgb(103,58,183)",
  "rgb(100,0,0)",
  "rgb(0,100,0)",
  "rgb(0,0,100)",
  "rgb(100,100,0)",
  "rgb(0,100,100)",
  "rgb(100,0,100)",
];
ChartRenderer.prototype.generateColors = function (h) {
  var g = 60;
  var f = 240;
  var d = g;
  var j = 20;
  var c = ["r", "g", "b"];
  var e = 0;
  var b = c[e];
  while (h > this.colorList.length) {
    var a = this.createColor(d, j, b);
    this.colorList.push(a);
    d = d - j;
    if (d > f) {
      d = g;
      b = c[++e];
    }
  }
};
ChartRenderer.prototype.createColor = function (j, m, h) {
  var c = j;
  var d = j - m;
  var e = d - m;
  var l, k, a;
  if (h == "r") {
    l = c;
    k = d;
    a = e;
  } else {
    if (h == "g") {
      k = c;
      a = d;
      l = e;
    } else {
      if (h == "b") {
        a = c;
        l = d;
        k = e;
      }
    }
  }
  var f = String.format("rgb({0},{1},{2})", l, k, a);
  return f;
};
ChartRenderer.prototype.getFillColor = function (a) {
  return this.colorList[a].replace(/rgb/i, "rgba").replace(")", ",0.5)");
};
ChartRenderer.prototype.getStrokeColor = function (a) {
  return this.colorList[a].replace(/rgb/i, "rgba").replace(")", ",0.8)");
};
ChartRenderer.prototype.getHighlightFillColor = function (a) {
  return this.colorList[a].replace(/rgb/i, "rgba").replace(")", ",0.75)");
};
ChartRenderer.prototype.getHighlightStrokeColor = function (a) {
  return this.colorList[a].replace(/rgb/i, "rgba").replace(")", ",1)");
};
ChartDesigner = function (a, e, c, b, d) {
  this.field = a;
  this.items = e || a.result;
  this.redirectPanelKey = d;
  if (c) {
    this.createClickableChart(b);
  } else {
    this.createPopupChart();
  }
};
ChartDesigner.prototype.onGoToPanelBtn_click = function (a) {
  window.location.hash = a;
  this.chartResultsPopup.close();
};
ChartDesigner.prototype.createClickableChart = function (a) {
  var c = $.extend({}, this.field);
  c.hideChartButtons = true;
  c.keepRealSize = true;
  var b = $("<div>")
    .css({ height: "inherit" })
    .click(IAS.bind(this, "createPopupChart"));
  $(a).addClass("clickableChart").append(b);
  new ChartRenderer(c, this.items, b);
};
ChartDesigner.prototype.createPopupChart = function () {
  this.chartDiv = $("<div>");
  delete this.field.width;
  delete this.field.height;
  this.popupOptions = IAS.popupOptions();
  this.popupOptions.maxWidth = window.innerWidth - 50;
  this.popupOptions.extendButtons = $("<div>");
  this.chartResultsPopup = new IAS.popup(
    this.chartDiv,
    this.field.name,
    this.popupOptions,
    [{ label: IAS.L("Close") }]
  );
  var a = this.drawChart(this.field, this.values);
};
ChartDesigner.prototype.createPopupExtendedButtons = function (a) {
  $(this.popupOptions.extendButtons).empty();
  if (this.items && this.items.length > 0) {
    this.createChartSettingsButton(this.popupOptions.extendButtons);
  }
  this.saveChartAsImageContainer = a.saveChartLink;
  this.popupOptions.extendButtons.append(this.saveChartAsImageContainer);
  if (this.redirectPanelKey) {
    var b = new ButtonRenderer(
      { id: "goToPanelBtn", label: IAS.L("Specify Criteria") },
      IAS.bind(this, "onGoToPanelBtn_click", this.redirectPanelKey)
    );
    b.renderOn(this.popupOptions.extendButtons);
  }
};
ChartDesigner.prototype.createChartSettingsButton = function (b) {
  this.settingsInfo = this.settingsInfo || {
    selectedLegends: null,
    selectedChartType: null,
  };
  var a = new ButtonRenderer(
    { id: "chartSettingsBtn", label: IAS.L("Chart Settings") },
    IAS.bind(this, "onChartSettingsBtn_click")
  );
  a.renderOn(b);
};
ChartDesigner.prototype.getChartSettings = function () {
  if (!this.chartSettings) {
  }
};
ChartDesigner.prototype.onChartSettingsBtn_click = function () {
  this.chartSettingsDiv = $("<div>");
  var a = $("<h2>")
    .addClass("chartSettingsLabel")
    .append(IAS.L("Chart Settings"));
  this.chartSettingsDiv.append(a).append("<br />");
  var b = this.field.legends && this.field.legends.length > 1;
  if (b) {
    this.renderLegendOptions();
    this.chartSettingsDiv.append("<br /><br />");
  }
  this.renderChartTypeOptions();
  this.chartSettingsDiv.append("<br /><br /><br />");
  var c = IAS.popupOptions();
  c.width = "600px";
  this.chartSettingsPopup = new IAS.popup(this.chartSettingsDiv, "", c, [
    {
      label: IAS.L("Draw Chart"),
      bindFunction: IAS.bind(this, "onDrawChartBtn_click"),
    },
  ]);
};
ChartDesigner.prototype.renderLegendOptions = function () {
  var c = [];
  for (var b = 0; b < this.field.legends.length; b++) {
    c.push({ id: b.toString(), label: this.field.legends[b] });
  }
  var a = $("<label>").append(IAS.L("Chart Columns") + ": ");
  this.checkBoxListRenderer = new CheckboxListRenderer({
    id: "legendOptions",
    checkAllHeader: true,
    checkBoxOptions: c,
  });
  this.chartSettingsDiv.append(a);
  this.checkBoxListRenderer.renderOn(this.chartSettingsDiv);
  if (this.settingsInfo.selectedLegends) {
    this.checkBoxListRenderer.setValue(this.settingsInfo.selectedLegends);
  } else {
    this.checkBoxListRenderer.setAllOptions(true);
  }
};
ChartDesigner.prototype.renderChartTypeOptions = function () {
  var b = [
    { id: "bar", label: "bar" },
    { id: "line", label: "line" },
  ];
  var a = $("<label>").append(IAS.L("Chart Type") + ": ");
  this.chartTypeRenderer = new DropdownRenderer({
    id: "chartType",
    options: b,
    disallowedNull: true,
  });
  this.chartSettingsDiv.append(a);
  this.chartTypeRenderer.renderOn(this.chartSettingsDiv);
  if (this.settingsInfo.selectedChartType) {
    this.chartTypeRenderer.setValue(this.settingsInfo.selectedChartType);
  }
};
ChartDesigner.prototype.onDrawChartBtn_click = function () {
  var b = null;
  var c = null;
  if (this.checkBoxListRenderer) {
    b = this.getValuesBasedOnSelectedColumns();
    c = this.getLegendsBasedOnSelectedColumns();
  } else {
    b = this.items;
    c = this.field.legends;
  }
  if (b && b.length > 0) {
    var d = this.chartTypeRenderer.getValue();
    var a = $.extend({}, this.field);
    a.chartType = d;
    a.legends = c;
    var e = this.checkBoxListRenderer
      ? this.checkBoxListRenderer.getSelectedIDs()
      : [];
    this.settingsInfo = { selectedLegends: e, selectedChartType: d };
    this.drawChart(a, b);
    this.chartSettingsPopup.close();
  }
};
ChartDesigner.prototype.getValuesBasedOnSelectedColumns = function () {
  var a = null;
  var f = this.checkBoxListRenderer.getSelectedIDs();
  if (!f || f.length == 0) {
    IAS.popupMsg(IAS.L("Please select at least one column to show the chart"));
  } else {
    if (f.length > 15) {
      IAS.popupMsg(
        IAS.L("You can only select up to 15 column to show the chart")
      );
    } else {
      a = [];
      for (var c = 0; c < this.items.length; c++) {
        var d = this.items[c];
        var b = [];
        for (var e = 0; e < d.values.length; e++) {
          if (f.indexOf(e.toString()) != -1) {
            b.push(d.values[e]);
          }
        }
        a.push({ label: d.label, values: b });
      }
      if (a.length == 0) {
        IAS.popupMsg(IAS.L("There are no data to show"));
      }
    }
  }
  return a;
};
ChartDesigner.prototype.getLegendsBasedOnSelectedColumns = function () {
  var a = null;
  var b = this.checkBoxListRenderer.getSelectedTextList();
  if (b && b.length > 0) {
    a = b;
  }
  return a;
};
ChartDesigner.prototype.drawChart = function (b, c) {
  this.chartDiv.empty();
  var a = new ChartRenderer(b, c, this.chartDiv);
  var d = window.innerWidth - 50;
  this.chartDiv.css("width", a.getWidth() > d ? d : a.getWidth());
  this.createPopupExtendedButtons(a);
  return a;
};
ImageFileRenderer = function (a, d) {
  this.field = a;
  this.onChangeCallback = d;
  this.tableLayoutID = a.id;
  var c = this;
  this.imageDiv = $("<div>");
  var b = a;
  b.type = "image";
  this.imageRenderer = new ImageRenderer(b);
  this.imageRenderer.renderOn(this.imageDiv);
  this.uploadDiv = $("<div>");
  this.fileRenderer = new DownloadFileRenderer(a);
  var e = function () {
    if (d && d instanceof Function) {
      d(c, event);
    }
  };
  this.uploadFile = new UploadFileRenderer(
    {
      id: a.id.toString() + "file",
      label: a.label,
      fileType: a.fileType || 0,
      allowDownloadLink: false,
      callbackDelete: function (f) {
        c.imageRenderer.resetImage();
      },
      validFileExtentions: [".jpg", ".gif", ".png"],
    },
    e,
    function (f) {
      c.imageRenderer.setFile(f);
    }
  );
  if (a.withoutUpload) {
    this.fileRenderer.renderOn(this.uploadDiv);
  } else {
    this.fileRenderer.renderOn(this.uploadDiv);
    this.uploadFile.renderOn(this.uploadDiv);
  }
  if (a.fileID) {
    this.imageRenderer.setValue("/Renderer/GetFileByFileID?fileID=" + a.fileID);
    this.fileRenderer.setValue(a.fileID);
  }
};
ImageFileRenderer.prototype.getValue = function () {
  return this.uploadFile.getFileID();
};
ImageFileRenderer.prototype.getUploadFileValue = function () {
  return this.uploadFile.getValue();
};
ImageFileRenderer.prototype.renderOn = function (a) {
  new IAS.TableLayoutRenderer(
    [{ cells: [this.uploadDiv, this.imageDiv] }],
    a,
    this.tableLayoutID,
    this.field.width,
    this.field.height
  );
};
ImageFileRenderer.prototype.setValue = function (a, b) {
  this.fileRenderer.setValue(a);
  this.imageRenderer.setValue("/Renderer/GetFileByFileID?fileID=" + a);
  this.uploadFile.setValue({ files: [{ id: a, name: b || "file" }] });
};
ImageFileRenderer.prototype.setUrl = function (b, a) {
  this.fileRenderer.resetUrl(b);
  this.imageRenderer.setValue(b);
  this.fileRenderer.hideLink(false);
};
ImageFileRenderer.prototype.removeValue = function () {
  this.fileRenderer.hideLink(true);
  this.imageRenderer.resetImage();
};
NoteRenderer = function (d, a, b, c) {
  this.noteDiv = $("<div>").css({
    "padding-left": "5px",
    "padding-right": "5px",
  });
  d.append(this.noteDiv);
  d.append("<hr>");
  this.categoryNoteOptions = a;
  this.categoryNote = b || {};
  this.onChangeCallback = c;
};
IAS.NoteRenderer = IAS.NoteRenderer || NoteRenderer;
NoteRenderer.prototype.createCategoryNoteObject = function () {
  this.createIsConfirmedCheckBox();
  this.createNoteTextBox();
  if (!this.categoryNoteOptions.canAddOrEdit) {
    this.readOnly();
  }
  this.setValues();
  this.setNoteTextBoxCssColor(this.isConfirmedCheckBox.inputField);
  this.onNoteRendererChange();
  return this.categoryNote;
};
NoteRenderer.prototype.createIsConfirmedCheckBox = function () {
  var a = this;
  this.isConfirmedCheckBox = new CheckboxRenderer(
    { id: "isConfirmed", type: "checkbox", label: IAS.L("Approved") },
    function () {
      a.categoryNote.isConfirmed = $(this.inputField).is(":checked");
      a.onNoteRendererChange();
      a.setNoteTextBoxCssColor(this);
    }
  );
  this.noteDiv.append("<br>");
  this.isConfirmedCheckBox.renderOn(this.noteDiv);
};
NoteRenderer.prototype.createNoteTextBox = function () {
  var a = this;
  this.noteTextBox = new BigTextRenderer(
    { id: "note", type: "bigtext", label: IAS.L("Note") },
    function () {
      a.categoryNote.categoryText = this.getValue();
      a.onNoteRendererChange();
    }
  );
  this.noteTextBox.css({ width: "300px", height: "35px" });
  if (this.categoryNoteOptions.canAddOrEdit || this.categoryNote.categoryText) {
    this.noteDiv.append("<br><br>");
    this.noteTextBox.renderOn(this.noteDiv);
  }
};
NoteRenderer.prototype.readOnly = function () {
  this.isConfirmedCheckBox.readOnly(true);
  this.isConfirmedCheckBox.disableInputField(true);
  this.noteTextBox.readOnly(true);
  this.noteTextBox.disableInputField(true);
};
NoteRenderer.prototype.setValues = function () {
  if (!this.categoryNote.hasOwnProperty("isConfirmed")) {
    this.categoryNote.isConfirmed = false;
  }
  if (!this.categoryNote.hasOwnProperty("categoryText")) {
    this.categoryNote.categoryText = "";
  }
  var a = this.categoryNote.isConfirmed || false;
  var b = this.categoryNote.categoryText || "";
  if (a.constructor == "".constructor) {
    a = a.toLowerCase() == "true" ? true : false;
  }
  this.isConfirmedCheckBox.setValue(a);
  this.noteTextBox.setValue(b);
};
NoteRenderer.prototype.onNoteRendererChange = function () {
  if (this.hasError()) {
    this.setNoteErrorMarker();
  } else {
    this.removeNoteErrorMarker();
  }
  if (this.onChangeCallback && this.onChangeCallback instanceof Function) {
    this.onChangeCallback(
      this.isConfirmedCheckBox.getValue(),
      this.noteTextBox.getValue()
    );
  }
};
NoteRenderer.prototype.setNoteTextBoxCssColor = function (a) {
  if ($(a).is(":checked") == true) {
    this.noteTextBox.css({ color: "black" });
  } else {
    this.noteTextBox.css({ color: "red" });
  }
};
NoteRenderer.prototype.isChecked = function () {
  return this.isConfirmedCheckBox.getValue();
};
NoteRenderer.prototype.hasNoteText = function () {
  var a = false;
  if (this.noteTextBox.getValue()) {
    a = true;
  }
  return a;
};
NoteRenderer.prototype.getNoteContainer = function () {
  return this.noteDiv;
};
NoteRenderer.prototype.setNoteErrorMarker = function () {
  $(this.getNoteContainer()).addClass("NoteRendererErrorStyle");
};
NoteRenderer.prototype.removeNoteErrorMarker = function () {
  $(this.getNoteContainer()).removeClass("NoteRendererErrorStyle");
};
NoteRenderer.prototype.hasError = function () {
  return !this.isChecked() && this.hasNoteText();
};
IAS.PagingRenderer = function (a) {
  this.paging = a;
  this._mappingPagingInfo();
  this.paging.numOfPages = Math.ceil(a.totalRows / a.pageSize);
  this._addPaging();
};
IAS.PagingRenderer.prototype._mappingPagingInfo = function () {
  this.paging.currentPage = this.paging.currentPage || this.paging.Page;
  this.paging.totalRows =
    this.paging.totalRows || this.paging.TotalRowsCount || 0;
  this.paging.pageSize = this.paging.pageSize || this.paging.PageSize;
  this.paging.url = this.paging.url || this.paging.Url;
  this.paging.sortorder =
    this.paging.sortorder || this.paging.SortOrder || "desc";
};
IAS.PagingRenderer.prototype._addPaging = function () {
  this.pagingDiv = $("<div class='pagingButtonContainer'>");
  var b = this;
  this.prevButton = $(
    "<div id='previousPage' class='pagingButtons'>"
  ).iasTooltip("Previous page");
  this.nextButton = $("<div  id='nextPage'  class='pagingButtons'>").iasTooltip(
    "Next page"
  );
  this.firstButton = $(
    "<div id='firstPage'  class='pagingButtons'>"
  ).iasTooltip("First page");
  this.lastButton = $("<div id='lastPage'  class='pagingButtons'>").iasTooltip(
    "Last page"
  );
  this.pagingDropDown = $("<select>");
  option = $("<option>");
  this._drawPagesDropDown(this.paging.numOfPages);
  this.rowsPerPageDropDown = $("<select>");
  option = $("<option value=5>").html(5);
  this.rowsPerPageDropDown.append(option);
  for (var a = 10; a <= 50; a = a + 5) {
    option = $("<option value='" + a + "'>").html(a);
    this.rowsPerPageDropDown.append(option);
  }
  this.prevButton.click(function () {
    if (b.dropDownIndex > 0) {
      b.progressBar = IAS.progress();
      b.dropDownIndex = b.dropDownIndex - 1;
      b._onChange(b.dropDownIndex);
    }
  });
  this.nextButton.click(function () {
    if (b.dropDownIndex < b.paging.numOfPages - 1) {
      b.progressBar = IAS.progress();
      b.dropDownIndex = b.dropDownIndex + 1;
      b._onChange(b.dropDownIndex);
    }
  });
  this.firstButton.click(function () {
    if (b.dropDownIndex > 0) {
      b.progressBar = IAS.progress();
      b.dropDownIndex = 0;
      b._onChange(b.dropDownIndex);
    }
  });
  this.lastButton.click(function () {
    if (b.dropDownIndex != b.paging.numOfPages - 1) {
      b.progressBar = IAS.progress();
      b.dropDownIndex = b.paging.numOfPages - 1;
      b._onChange(b.dropDownIndex);
    }
  });
  b.pagingDropDown.change(function () {
    b.progressBar = IAS.progress();
    b.reFetch.call(b);
  });
  b.rowsPerPageDropDown.change(function () {
    var d = $(this);
    var e = d.val();
    if (e != "default" && b.paging.numOfPages > 0) {
      b.progressBar = IAS.progress();
      b.reDraw.call(b);
    }
  });
  this.rowsPerPageDropDown.val(this.paging.pageSize);
  this.pagingDiv.append("<br>");
  this.pagingDiv.append(this.firstButton);
  this.pagingDiv.append(this.prevButton);
  this.pagingDiv.append(this.pagingDropDown);
  this.pagingDiv.append(this.nextButton);
  this.pagingDiv.append(this.lastButton);
  this.pagingDiv.append(
    $('<span class="numberOfRowsSpan">').text(IAS.L("Number of Rows to Show:"))
  );
  this.pagingDiv.append(this.rowsPerPageDropDown);
  var c = $('<span class="totalRowsSpan">').html(IAS.L("Total records:") + " ");
  this.totalRowsCount = $("<span>").html(this.paging.totalRows.toString());
  c.append(this.totalRowsCount);
  this.pagingDiv.append(c);
  this._convertToSelect2();
};
IAS.PagingRenderer.prototype.reFetch = function () {
  this._onChange(this.pagingDropDown[0].options.selectedIndex);
};
IAS.PagingRenderer.prototype.reDraw = function () {
  var a = this;
  if (this.pagingDropDown[0].options.length != 0) {
    a.paging.pageSize =
      a.rowsPerPageDropDown[0].options[
        a.rowsPerPageDropDown[0].options.selectedIndex
      ].value;
    a.paging.numOfPages = Math.ceil(a.paging.totalRows / a.paging.pageSize);
    if (a.paging.searchCriteria != null) {
      a._searchWithCriteria(a.paging.searchCriteria);
    } else {
      a._changeValuesInTable.call(a, a.dropDownIndex + 1);
    }
    a.pagingDropDown.empty();
    a._drawPagesDropDown(a.paging.numOfPages);
  }
};
IAS.PagingRenderer.prototype._onChange = function (a) {
  var c = this;
  if (this.paging.numOfPages > 0 && a < this.paging.numOfPages + 1) {
    var b = a + 1;
    this.pagingDropDown.val(b);
    c.dropDownIndex = a;
    c._changeValuesInTable.call(c, b);
  }
};
IAS.PagingRenderer.prototype.onValuesChanged = function (a) {};
IAS.PagingRenderer.prototype.onRowsChanged = function (a) {};
IAS.PagingRenderer.prototype.onPageIndexChanging = function (a) {};
IAS.PagingRenderer.prototype._drawPagesDropDown = function (d) {
  var b = this.pagingDropDown[0];
  options = "";
  for (var c = 1; c <= d; c++) {
    options += "<option value='" + c + "'>" + c + "</option>";
  }
  this.pagingDropDown.html(options);
  var a = this.dropDownIndex + 1;
  var e = d >= a ? a : 1;
  this.pagingDropDown.val(e);
  this.dropDownIndex = e - 1;
};
IAS.PagingRenderer.prototype._changeValuesInTable = function (a) {
  var c = this;
  c.externalData = {};
  c.onPageIndexChanging(a, c.externalData);
  var b = {
    currentPage: a,
    totalRows: c.paging.totalRows,
    pageSize: c.paging.pageSize,
    url: c.paging.url,
    sortorder: c.paging.sortorder,
    refreshTotalRows: false,
  };
  if (c.paging.callBackFunction) {
    c.paging.callBackFunction(b);
  } else {
    b.ExternalData = c.externalData;
    IAS.post(
      c.paging.url,
      b,
      function (d) {
        if (d.Data) {
          c.onValuesChanged(d.Data);
        } else {
          c.onValuesChanged(d);
        }
        c.progressBar.close();
      },
      true
    );
  }
};
IAS.PagingRenderer.prototype._searchWithCriteria = function (a) {
  var b = this;
  b.externalData = b._flatten(a);
  IAS.post(
    b.paging.url,
    b.externalData,
    function (c) {
      b.onValuesChanged(c);
    },
    true
  );
};
IAS.PagingRenderer.prototype._flatten = function (a) {
  var b = {},
    c = function (d) {
      var e;
      for (var f in d) {
        e = d[f];
        if (e.toString() === "[object Object]") {
          c(e);
        } else {
          b[f] = e;
        }
      }
    };
  c(a);
  return b;
};
IAS.PagingRenderer.prototype._resetPagingInfo = function (a) {
  this.paging = a;
  this.paging.numOfPages = Math.ceil(
    this.paging.totalRows / this.paging.pageSize
  );
  this.dropDownIndex = 0;
  this._drawPagesDropDown(this.paging.numOfPages);
  this.totalRowsCount.html(a.totalRows || 0);
};
IAS.PagingRenderer.prototype._convertToSelect2 = function () {};
IAS.SimpleTable = IAS.SimpleTable || {};
IAS.TableLayoutRenderer = function (e, a, c, d, b) {
  var g = d || 300;
  var f = b || 100;
  this.tableID = c || "tableLayout";
  this.table = $("<table>").css({ width: g, height: f });
  if (c) {
    this.table.attr("id", this.tableID);
  }
  this.table.attr("border", 0);
  this.setValues(e);
  a.append(this.table);
};
IAS.TableLayoutRenderer.prototype.renderRows = function (c) {
  var d = "";
  for (var b = 0; b < c.length; b++) {
    d = $("<tr>").attr("id", b);
    var a = c[b].cells;
    this.rednerCells(a, d, b);
    this.table.append(d);
  }
};
IAS.TableLayoutRenderer.prototype.rednerCells = function (c, f, e) {
  var g = "";
  for (var b = 0; b < c.length; b++) {
    g = $("<td>").addClass("row", e).attr("id", b);
    var a = c[b];
    var d;
    if (a && a.constructor == {}.constructor) {
      d = a.value;
      if (a.tdCss) {
        g.css(a.tdCss);
      }
    } else {
      d = a;
    }
    g.html(d);
    f.append(g);
  }
};
IAS.TableLayoutRenderer.prototype.setValues = function (a) {
  this.table.empty();
  this.renderRows(a);
};
IAS.TableLayoutRenderer.prototype.removeRow = function (a) {
  $(this.table)
    .find("tr#" + a)
    .remove();
};
IAS.TableLayoutRenderer.prototype.addRow = function (d) {
  var f = "";
  var e = "";
  var c = this.rowsCount();
  f = $("<tr id=" + c + ">");
  var b = d.cells;
  for (var a = 0; a < b; a++) {
    e = $("<td id=" + a + ">").html(b[a]);
    f.append(e);
  }
  this.table.append(f);
};
IAS.TableLayoutRenderer.prototype.rowsCount = function () {
  return $(this.table)[0].rows.length;
};
IAS.TableLayoutRenderer.prototype.css = function () {
  if (arguments.length > 1) {
    this.table.css(arguments[0], arguments[1]);
  } else {
    this.table.css(arguments[0]);
  }
  return this;
};
IAS.TableLayoutRenderer.prototype.removeBorder = function () {
  $(this.table).find("td").css("border", "none");
};
IAS.TableRenderer = function (b, d, p, m, l, o, n, c, h, g, j, k, e, f) {
  this.header = b;
  var a = c;
  this.table = $("<table class='tableRenderer'>");
  this.labels = {};
  this.isFieldsReadOnly = j || false;
  this.onChangeCallBack = k || null;
  this.customizableUploadFileType = f || null;
  if (
    a &&
    this.header[1].id != "deleteRow" &&
    this.header[1].id != "selectRow"
  ) {
    this.header.splice(1, 0, a);
  }
  this.exportToExcel = h;
  if (g) {
    this.expandable = g;
  }
  var q = this;
  if (n) {
    this.sorting = n;
    this.sortOrder = true;
  }
  this._addHeader();
  this.rowCallback = m;
  this.paging = l || null;
  this.contextMenu = e;
  if (p) {
    this.setValues(p);
  }
  if (d) {
    if (o) {
      var r = $("<div>").append($("<b>").text(o));
      r.attr("style", "color:blue");
      d.append(r);
      d.append("<br>");
    }
    this.renderOn(d);
  }
};
IAS.TableRenderer.prototype.renderOn = function (a) {
  var b = this;
  a.append(this.table);
  if (this.exportToExcel) {
    exportImgDiv = $.createDiv("exportImgContainer");
    exportImgDiv
      .append(
        $("<img src='/css/icons/excel-icon.png' id='exportImg'>").iasTooltip(
          "Export to excel"
        )
      )
      .click(IAS.bind(this, "excelExportButton_Click"));
    a.append(exportImgDiv);
  }
  if (this.paging) {
    this.pagingArea = new IAS.PagingRenderer(this.paging);
    a.append(this.pagingArea.pagingDiv);
    this.pagingArea.onValuesChanged = function (c) {
      b.setValues(c);
    };
    this.pagingArea.onPageIndexChanging = function (d, c) {
      b.onPageIndexChanging(d, c);
    };
  }
};
IAS.TableRenderer.prototype.Search = function (a, b) {
  this.SearchValues = b.getValues();
  this.SearchValues = IAS.Common.SerializeSearchValues(this.SearchValues);
  this._SearchFunction(a, null, true);
};
IAS.TableRenderer.prototype._SearchFunction = function (c, a, e) {
  var b = this;
  var d = $.extend(true, {}, b.SearchValues);
  d.sortCriteria = this.sortingCriteria;
  d.currentPage = c.currentPage;
  d.totalRows = c.totalRows;
  d.pageSize = b.paging.pageSize;
  d.url = c.url;
  d.sortOrder = this.paging.sortorder ? this.paging.sortorder : c.sortorder;
  d.refreshTotalRows = e || false;
  if (a) {
    b._exportToExcel(d);
  } else {
    IAS.post(d.url, d, function (g) {
      var f = {
        currentPage: g.Pagination.Page,
        totalRows: g.Pagination.TotalRowsCount,
        pageSize: g.Pagination.PageSize,
        url: g.Pagination.Url,
        sortorder: b.paging.sortorder,
        callBackFunction: IAS.bind(b, "_SearchFunction"),
      };
      e && b.resetPagingInfo(f);
      b.setValues(g.Data);
    });
  }
};
IAS.TableRenderer.prototype._addHeader = function () {
  this.labels = {};
  var h = $("<tr>");
  this.table.append(h);
  var e = {};
  var l = null;
  for (var j = 0; j < this.header.length; j += 1) {
    var c = this.header[j];
    var d = c.id;
    if (c.type != "hidden") {
      var g = $("<th>").attr("data-ias-header-ID", d);
      e[d] = g;
      if (c.type != "checkbox") {
        var f;
        if (c.hasOwnProperty("secondaryLabel")) {
          f = IAS.GetPrimaryOrSecondaryName(c.label, c.secondaryLabel);
        } else {
          f = c.label || "";
        }
        g.append(f);
        c.tooltip &&
          g.append(
            $('<i class="uirenderer-infoTooltip">').iasTooltip(
              c.tooltip,
              null,
              true
            )
          );
      }
      if (this.sorting && c.type == "label") {
        g.css({ cursor: "pointer" });
        g.click(IAS.bind(this, "sortRows", d));
      }
      h.append(g);
    }
    if (c.type == "checkbox") {
      var b = new CheckboxRenderer(
        { id: "tableRendererCheckAll" + d, label: c.label },
        IAS.bind(this, "_checkAllForHeader", d)
      );
      b.renderOn(g);
      if (this.isFieldsReadOnly) {
        b.disableInputField(this.isFieldsReadOnly);
        b.readOnly(this.isFieldsReadOnly);
      }
    }
    if (c.type == "label") {
      this.labels[d] = true;
    }
    this.sortingCriteria && this.sortingCriteria == d && (l = g);
  }
  if (this.sortingCriteria) {
    var a = $("<i class='headerSortImg'>").addClass("arrowsImg");
    if (this.sortOrder) {
      a.addClass("orderUP");
    } else {
      a.removeClass("orderUP");
    }
    l.append(a);
  }
  if (this.expandable) {
    var k = $('<th class="tableExpand resizeWidth">');
    k.click(IAS.bind(this, "exapndTable", k));
    h.append(k);
    h.hover(
      function () {
        k.addClass("hiddenExpand");
      },
      function () {
        k.removeClass("hiddenExpand");
      }
    );
  }
  if (this.onHeaderAppended && this.onHeaderAppended instanceof Function) {
    this.onHeaderAppended(e);
  }
};
IAS.TableRenderer.prototype.addEmptyRow = function () {
  var c = {};
  for (var a = 0; a < this.header.length; a += 1) {
    c[this.header[a].id] = "";
  }
  var b = this.values.length;
  this.values.push(c);
  this.appendDataTr(c, b);
};
IAS.TableRenderer.prototype.setValues = function (e) {
  this.values = e;
  this.valueFields = [];
  var c = this.table;
  var d = c.parent();
  var b = c.index();
  c.detach();
  c.empty();
  this._addHeader();
  if (e) {
    for (var a = 0; a < e.length; a += 1) {
      this.appendDataTr(e[a], a);
    }
  }
  $.appendAtIndex(d, c, b);
};
IAS.TableRenderer.prototype.getValues = function () {
  var g = $.extend(true, [], this.values);
  for (var d = 0; d < g.length; d += 1) {
    var f = g[d];
    for (var e in f) {
      if (this.labels[e]) {
        delete f[e];
      }
    }
    var c = this.valueFields[d];
    for (var b in c) {
      var a = c[b].getError();
      if (!a) {
        f[b] = c[b].getValue();
      } else {
        console.log("Error: " + b + " is returning an error. " + a);
        f[b] = null;
      }
    }
  }
  return g;
};
IAS.TableRenderer.prototype.removeValue = function (b) {
  this.values.splice(b, 1);
  this.valueFields.splice(b, 1);
  this.table.empty();
  this._addHeader();
  for (var a = 0; a < this.values.length; a += 1) {
    this.appendDataTr(this.values[a], a);
  }
  if (this.paging) {
    var c = this.paging;
    c.totalRows = c.totalRows - 1;
    this.resetPagingInfo(c);
  }
};
IAS.TableRenderer.prototype.removeRowBySelector = function (c) {
  if (!(c || c instanceof Function)) {
    throw "the first argument must be a function reuturing boolean value";
  }
  var a = this;
  var b = this.values.filter(function (d) {
    return c(d);
  });
  this.setValues(b);
};
IAS.TableRenderer.prototype.appendDataTr = function (l, m, g, b) {
  if (b) {
    this.values.push(l);
  }
  var d = {};
  var o = g || $("<tr>");
  if (l.rowColor) {
    o.css("color", l.rowColor);
  }
  if (!(m || m === 0)) {
    m = this.table.find("tr").length - 1;
  }
  for (var e = 0; e < this.header.length; e += 1) {
    var a = this.header[e];
    if (a.type != "hidden") {
      var n = $("<td>");
      var c = this.renderDataOnTd(a, l, n, m);
      if (c) {
        d[a.id] = c;
      }
      o.append(n);
    }
  }
  if (m < this.valueFields.length - 1) {
    this.valueFields.push(d);
  } else {
    this.valueFields[m] = d;
  }
  var k = this.table[0].rows[m + 1];
  this.renderRowMessgeIfExist.call(this, l, o);
  var f = this;
  if (this.contextMenu) {
    o.contextmenu(function (j) {
      j.preventDefault();
      f.contextMenuDiv =
        f.contextMenuDiv ||
        $.createDiv(
          String.format("rowContextMenuDiv", m),
          "tableContextMenuDiv"
        );
      f._showContextMenuDiv(j, f.contextMenuDiv, m, l);
      $(document).click(function () {
        f.contextMenuDiv.remove();
      });
    });
  }
  if (!g) {
    this.table.append(o);
  }
  o.attr("row_index", m);
  o.addClass("bluehover");
  if (this.rowCallback) {
    o.css("cursor", "pointer");
    var h = this;
    o.click(function (p) {
      var q = IAS.Common.getSelectionText();
      var j = this.rowIndex - 1;
      if (q.length < 1) {
        if (h.rowCallback instanceof Function && h.rowCallback(j, l)) {
          h.renderValue(j, l);
        }
      } else {
        p.stopPropagation();
      }
    });
  }
  this.onRowDataAdded.call(this, l, o, m);
};
IAS.TableRenderer.prototype.renderValue = function (b, a) {
  console.log(
    "Warning: IAS.TableRenderer.renderValue is obsolete. Use 'resetRowValue' instead"
  );
  console.log(new Error().stack);
  return this.resetRowValue(b, a);
};
IAS.TableRenderer.prototype.resetRowValue = function (d, a) {
  var c = this.values[d];
  for (var e in a) {
    c[e] = a[e];
  }
  this.values[d] = c;
  var b = this.table.find("tr[row_index='" + d + "']");
  $(b).empty().unbind("click");
  this.appendDataTr(c, d, b);
};
IAS.TableRenderer.prototype.renderDataOnTd = function (c, q, u, r) {
  switch (c.type) {
    case "label":
      u.html(q[c.id]);
      break;
    case "button":
      c.label = c.caption;
      var b = new Renderers[c.type](c, function (v) {
        v.stopPropagation();
        c.callback(r, q);
      });
      b.inputField.addClass("tableRendererButton");
      b.renderOn(u);
      break;
    case "img":
      var l = String.format(
        '<img class="tableRendererImg" src="{0}" iasKey={1}>',
        c.src,
        c.id
      );
      var k = $(l).iasTooltip(c.tooltip);
      c.callback &&
        k.click(function (v) {
          c.callback(r, q, v);
        });
      u.append(k);
      break;
    case "hidden":
      break;
    case "list":
      var n = [];
      if (!q[c.id]) {
        q[c.id] = {};
      }
      if (!(q[c.id].fieldsList instanceof Array)) {
        q[c.id].fieldsList = n;
      }
      var f = { template: c.template, value: q[c.id] };
      var m = new ListRenderer(
        f,
        this.onChangeCallBack ||
          (c.callback &&
            function (v) {
              c.callback(r, q, v);
            }),
        null,
        null,
        this.isFieldsReadOnly
      );
      var d;
      if (c.hasOwnProperty("secondaryLabel")) {
        d = IAS.GetPrimaryOrSecondaryName(c.label, c.secondaryLabel);
      } else {
        d = c.label;
      }
      var e = $("<a>")
        .html(d)
        .css("text-decoration", "underline")
        .css({ cursor: "pointer" });
      e.click(function () {
        var v = $("<div>");
        m.renderOn(v, true);
        IAS.popup(v, d);
      });
      u.append(e);
      return m;
      var t = [];
      if (q[c.id] && q[c.id].fieldsList instanceof Array) {
        var t = IAS.TableRenderer.fromFieldsListToTableRendererFormat(q[c.id]);
      }
      var o = $("<div>");
      var s = new IAS.TableRenderer(c.template.fields, o, t);
      var a = $("<button>").html("+").appendTo(o);
      var e = $("<button>").html(IAS.L("Edit") + " (" + t.length + ")");
      e.click(function () {
        a.click(function () {
          s.addEmptyRow();
          e.html(IAS.L("Edit") + " (" + t.length + ")");
        });
        IAS.popup(o, c.label);
      });
      u.append(e);
      return s;
      break;
    default:
      if (this.customizableUploadFileType && c.type == "uploadfile") {
        c.fileType = this.customizableUploadFileType;
      }
      var g = Renderers[c.type];
      var j = new g(
        c,
        this.onChangeCallBack ||
          (c.callback &&
            function (w, v) {
              c.callback(r, q, w, v);
            })
      );
      if (j.field.attributes) {
        j.setAttributes(j.field.attributes);
      }
      var p = this.isFieldsReadOnly || c.readOnly;
      if (p) {
        j.readOnly(p);
        j.disableInputField(p);
      }
      if (q.hasOwnProperty(c.id)) {
        j.setValue(q[c.id]);
      }
      var h = $("<div>");
      j.fieldDiv = h;
      j.renderOn(h);
      u.append(h);
      j.errorMarker = $("<i class='inputFieldError'>");
      j.fieldDiv.append(j.errorMarker);
      return j;
      break;
  }
};
IAS.TableRenderer.prototype.getRowsData = function () {
  var d = this.values;
  var b = this.getValues();
  for (var c = 0; c < b.length; c++) {
    for (var a in b[c]) {
      var e = d[c][a];
      if (e != undefined) {
        d[c][a] = b[c][a];
      }
    }
  }
  return d;
};
IAS.TableRenderer.prototype.getRowData = function (d) {
  var c = this.values[d];
  var b = this.getValues()[d];
  for (var a in b[d]) {
    var e = rowsData[d][a];
    if (e != undefined) {
      rowsData[d][a] = b[d][a];
    }
  }
  return c;
};
IAS.TableRenderer.prototype.resetRowData = function (b, a) {
  this.values[b] = a;
  this.resetValues();
};
IAS.TableRenderer.prototype.resetValues = function () {
  this.setValues(this.values);
};
IAS.TableRenderer.prototype.onRowDataAdded = function () {};
IAS.TableRenderer.prototype.onPageIndexChanging = function (a, b) {};
IAS.TableRenderer.prototype.resetPagingInfo = function (a, b) {
  this.paging = a;
  this.pagingArea._resetPagingInfo(a);
};
IAS.TableRenderer.prototype.renderRowMessgeIfExist = function (d, c) {
  if (this.messageManager && Object.keys(this.messageManager).length > 0) {
    var b = null;
    var a = this;
    b = this.messageManager.getMessageByDistination(d.SessionID);
    if (b != null) {
      c.css("cursor", "pointer");
      c[0].style.color = "red";
      c.mousedown(function (f) {
        if (f.which == (1 || 2)) {
          f.stopPropagation();
          c[0].style.color = "";
          a.messageManager.OnMessageRead(b);
        }
      });
    }
  }
};
IAS.TableRenderer.prototype.sortRows = function (a) {
  this.paging.sortorder = this.sortOrder ? "asc" : "desc";
  var b = {
    currentPage: this.paging.currentPage,
    totalRows: this.paging.totalRows,
    url: this.paging.url,
    sortorder: this.paging.sortorder,
  };
  this.sortingCriteria = a;
  this._SearchFunction(b, null);
  if (this.sortingCriteria == a) {
    this.sortOrder = !this.sortOrder;
  }
};
IAS.TableRenderer.fromFieldsListToTableRendererFormat = function (b) {
  var a = b.fieldsList;
  var c = $.map(a, function (d) {
    var g = {};
    for (var f = 0; f < d.fields.length; f += 1) {
      var e = d.fields[f];
      g[e.id] = e.value;
    }
    return g;
  });
  return c;
};
IAS.TableRenderer.prototype.getValue = function () {
  var b = this.getValues();
  var a = $.map(b, function (c) {
    var d = [];
    for (var e in c) {
      d.push({ id: e, value: c[e] });
    }
    return { fields: d };
  });
  return { fieldsList: a };
};
IAS.TableRenderer.prototype.resizableColumns = function () {
  $(function () {
    var a = false;
    var b = undefined;
    var d, c;
    $("table th").mousedown(function (f) {
      b = $(this);
      a = true;
      d = f.pageX;
      c = $(this).width();
      $(b).addClass("resizing");
    });
    $(document).mousemove(function (f) {
      if (a) {
        $(b).width(c + (f.pageX - d));
      }
    });
    $(document).mouseup(function () {
      if (a) {
        $(b).removeClass("resizing");
        a = false;
      }
    });
  });
};
IAS.TableRenderer.prototype.appendRow = function (a, b) {
  this.appendDataTr(a, null, null, true);
};
IAS.TableRenderer.prototype._exportToExcel = function (a) {
  IAS.Common.exportToExcel(a, a.url, true);
};
IAS.TableRenderer.prototype.excelExportButton_Click = function (a) {
  this._SearchFunction(
    { currentPage: 1, totalRows: 0, url: this.paging.url, sortorder: "asc" },
    true
  );
};
IAS.TableRenderer.prototype.exapndTable = function (a) {
  var b = this.table;
  if (this.expanded) {
    this.table.css("width", "auto");
    a.removeClass("tableCollapse");
    a.addClass("tableExpand");
  } else {
    this.table.css("width", "100%");
    a.removeClass("tableExpand");
    a.addClass("tableCollapse");
  }
  this.expanded = !this.expanded;
};
IAS.TableRenderer.prototype._showContextMenuDiv = function (c, b, k, j) {
  var a = this.contextMenu;
  var m = $("<ul>");
  b.empty();
  b.append(m[0]);
  for (var d = 0, f = a.length; d < f; d++) {
    var h = a[d];
    var g = $("<li>")
      .html(h.label)
      .click(function (l) {
        l.preventDefault();
        b.remove();
        h.eventHandler(k, j);
      });
    m.append(g);
  }
  b.css({ top: c.pageY + 15, left: c.pageX + 15, display: "none" })
    .appendTo("body")
    .show(300);
};
IAS.TableRenderer.prototype._checkAllForHeader = function (d, b, c) {
  var a = !!c.target.checked;
  var f = this.valueFields.map(function (e) {
    return e[d];
  });
  f.forEach(function (e) {
    var g = e;
    g instanceof CheckboxRenderer && g.setValue(a);
  });
  a = !a;
};
IAS.TableRenderer.prototype.validateAndCheckErrors = function (k) {
  var b =
    k && k.hasOwnProperty("anyFieldRequired") ? k.anyFieldRequired : false;
  var a =
    k && k.hasOwnProperty("allFieldsRequired") ? k.allFieldsRequired : false;
  var e = false;
  var d = null;
  this.table
    .find(".inputFieldErrorVisible")
    .removeClass("inputFieldErrorVisible");
  var j = this;
  var n = this.valueFields.length;
  for (var f = 0; f < n; f++) {
    var m = this.valueFields[f];
    for (var h in m) {
      var l = m[h];
      var g = l.isReadOnlyOrDisabled();
      if (!g) {
        if ((l.field.required && b) || a) {
          d = l.getError();
          if (!d && l.isEmpty()) {
            d = IAS.L("Required");
          }
        } else {
          d = null;
        }
        if (d) {
          d = l.field.required ? d : " * " + d;
          var c = l.errorMarker;
          c.addClass("inputFieldErrorVisible");
          c.iasTooltip(d, "#be4b49");
          e = true;
        }
      }
    }
  }
  return e;
};
IAS.TableRenderer.prototype.emptyTable = function () {
  this.setValues([]);
};
IAS.TableRenderer.prototype.refreshData = function () {
  if (this.pagingArea) {
    this.pagingArea.reFetch();
  }
};
IAS.TableRenderer.prototype.getSelectedValues = function () {
  var c = this.getValues() || [];
  var b = [];
  for (var a = 0; a < c.length; a++) {
    if (c[a].selected === true) {
      b.push(c[a]);
    }
  }
  return b;
};
IAS.TableRenderer.prototype.getSelectedRowsData = function () {
  var d = this.getValues() || [];
  var b = this.getRowsData();
  var c = [];
  for (var a = 0; a < d.length; a++) {
    if (d[a].selected === true) {
      c.push(b[a]);
    }
  }
  return c;
};
IAS.TableRendererOptions = function () {
  var a = {
    header: [],
    rowCallback: null,
    paging: null,
    title: null,
    sorting: null,
    addColumnBefore: null,
    exportToExcel: null,
    expandable: null,
    isFieldsReadOnly: null,
    onChangeCallBack: null,
    contextMenu: null,
  };
  return a;
};
IAS.CreateTableRendererFromOptions = function (a, d, c) {
  var b = c || IAS.TableRendererOptions();
  var f = d || null;
  var e = new IAS.TableRenderer(
    b.header,
    a,
    f,
    b.rowCallback,
    b.paging,
    b.title,
    b.sorting,
    b.addColumnBefore,
    b.exportToExcel,
    b.expandable,
    b.isFieldsReadOnly,
    b.onChangeCallBack,
    b.contextMenu
  );
  return e;
};
IAS.TabsRenderer = {
  createTabs: function (a, c, b) {
    this.tabList = c;
    this.tabsCount = c.length;
    this.settings = this._getSettingsOrDefault(b);
    this.renderTabs(a, c);
    return this;
  },
  _getSettingsOrDefault: function (b) {
    var a = b || {};
    a.createPaging = a.createPaging || false;
    a.buttons = a.buttons || [];
    a.tabDesign;
    a.contentEffect;
    a.active = a.active || 0;
    a.collapsible = a.collapsible || false;
    a.event = a.event || "click";
    a.heightStyle = a.heightStyle || "content";
    return a;
  },
  renderTabs: function (a, b) {
    this.tabsObject = $("<div>").addClass("mainTabsDiv");
    a.append(this.tabsObject);
    this.headerTitlesUl = $("<ul>").addClass("tabsTitle_header");
    this.tabsObject.append(this.headerTitlesUl);
    this.containerDivs = $("<div>").addClass("tabsContentContainer_body");
    this.tabsObject.append(this.containerDivs);
    this._createTabsObject(b);
    this.buttonsContainer = $("<div>").addClass("buttonsContainer");
    this._createButtons();
  },
  _createTabsObject: function (d) {
    this.tabsRenderer = {};
    this.tabIndex2ID = {};
    for (var b = 0; b < d.length; b++) {
      var e = d[b];
      var f = this._createTabTitle(e);
      this.headerTitlesUl.append(f);
      var a = this._createTabContentDiv(e);
      this.containerDivs.append(a);
      this.tabsRenderer[e.id] = {
        tabIndex: b,
        tabTitle: e.title,
        tabTitleContainer: f,
        contentDiv: a,
      };
      this.tabIndex2ID[b] = e.id;
      if (e.hasOwnProperty("titleCSS")) {
        this.tabsRenderer[e.id].tabTitle.css(e.titleCSS);
      }
      if (e.hasOwnProperty("contentCSS")) {
        this.tabsRenderer[e.id].contentDiv.css(e.contentCSS);
      }
    }
    var c = this;
    this.tabsObject.tabs({
      heightStyle: this.settings.heightStyle,
      active: this.settings.active || 0,
      collapsible: this.settings.collapsible,
      disabled: this.settings.collapsible,
      event: this.settings.event,
      activate: function (g, k) {
        c.onTabActivate(k);
        if (c.settings.onTabActivate) {
          var j = k.newTab.index();
          var h = k.newPanel.attr("id");
          c.settings.onTabActivate(j, h);
        }
      },
      beforeActivate: function (g, h) {},
    });
  },
  _createTabTitle: function (b) {
    var a = $("<a>")
      .attr("href", "#" + b.id)
      .append(b.title);
    var c = $("<li>").attr("key", b.id).append(a);
    return c;
  },
  _createTabContentDiv: function (b) {
    var a = $("<div>").attr("id", b.id).append(b.content);
    return a;
  },
  _createButtons: function () {
    var e = this.settings.createPaging;
    var c = this.settings.buttons;
    this.buttonsContainer.append("<hr>");
    this.buttonsContainer.append("&nbsp;&nbsp;");
    if (e) {
      this.previousButton = new ButtonRenderer(
        { id: "previousButton", label: "Previous" },
        IAS.bind(this, "onPreviousButtonClick"),
        null,
        true
      );
      this.previousButton.renderOn(this.buttonsContainer);
      this.buttonsContainer.append("&nbsp;");
    }
    if (c.length > 0) {
      for (var d = 0; d < c.length; d++) {
        var a = c[d];
        var b = new ButtonRenderer({ id: a.id, label: a.label }, a.callback);
        b.renderOn(this.buttonsContainer);
        this.buttonsContainer.append("&nbsp;");
      }
    }
    if (e) {
      this.nextButton = new ButtonRenderer(
        { id: "nextButton", label: "Next" },
        IAS.bind(this, "onNextButtonClick"),
        null,
        true
      );
      this.nextButton.renderOn(this.buttonsContainer);
      this.buttonsContainer.append("&nbsp;");
    }
    if (e || c.length > 0) {
      this.tabsObject.append(this.buttonsContainer);
      if (e) {
        this.enableOrDisablePreviousAndNextButtons();
      }
    }
  },
  enableOrDisablePreviousAndNextButtons: function () {
    if (this.settings.createPaging) {
      if (this.tabsCount == 1) {
        this.previousButton.hide();
        this.nextButton.hide();
      } else {
        if (this.previousButton.inputField.css("display") == "none") {
          this.previousButton.show();
        }
        if (this.nextButton.inputField.css("display") == "none") {
          this.nextButton.show();
        }
        var a = this.tabsObject.tabs("option", "active");
        this.previousButton.disable(false);
        this.nextButton.disable(false);
        if (a == 0) {
          this.previousButton.disable(true);
        }
        if (a + 1 == this.tabsCount) {
          this.nextButton.disable(true);
        }
      }
    }
  },
  onPreviousButtonClick: function () {
    var a = this.tabsObject.tabs("option", "active");
    if (a > 0) {
      var b = a - 1;
      this.tabsObject.tabs("option", "active", b);
    }
  },
  onNextButtonClick: function () {
    var a = this.tabsObject.tabs("option", "active");
    if (a < this.tabsCount) {
      var b = a + 1;
      this.tabsObject.tabs("option", "active", b);
    }
  },
  onTabActivate: function () {
    this.enableOrDisablePreviousAndNextButtons();
  },
  refreshTabs: function () {
    this.tabsObject.tabs("refresh");
  },
  activeTabByIndex: function (a) {
    this.tabsObject.tabs("option", "active", a);
  },
  activeTabByID: function (a) {
    var b = this.tabsRenderer[a].tabIndex;
    this.tabsObject.tabs("option", "active", b);
  },
  getActiveTabIndex: function () {
    var a = this.tabsObject.tabs("option", "active");
    return a;
  },
  getActiveTabID: function () {
    var a = this.tabsObject.tabs("option", "active");
    return this.tabIndex2ID[a];
  },
  getTabTitleContainerByID: function (a) {
    return this.tabsRenderer[a].tabTitleContainer;
  },
  getTabTitleContainerByIndex: function (b) {
    var a = this.tabIndex2ID[b];
    return this.tabsRenderer[a].tabTitleContainer;
  },
  setTabErrorMarker: function (a) {
    var b = this.getTabTitleContainerByIndex(a);
    $(b).addClass("TabErrorStyle");
  },
  removeTabErrorMarker: function (a) {
    var b = this.getTabTitleContainerByIndex(a);
    $(b).removeClass("TabErrorStyle");
  },
  ifTabTitleHasErrorMarker: function (a) {
    var b = this.getTabTitleContainerByIndex(a);
    return $(b).hasClass("TabErrorStyle");
  },
  ifTabChildrenHasError: function (e) {
    var c = false;
    var d = this.tabIndex2ID[e];
    var b = this.tabsRenderer[d].contentDiv;
    var a = $(b).find("div.CollapsibleErrorStyle");
    if (a && a.length > 0) {
      c = true;
    }
    return c;
  },
  ifTabChildrenHasErrorSetTabErrorMarker: function (b) {
    var a = false;
    if (this.ifTabChildrenHasError(b)) {
      a = true;
      this.setTabErrorMarker(b);
    }
    return a;
  },
  ifTabChildrenDoesNotHaveErrorRemoveTabErrorMarker: function (a) {
    if (this.ifTabTitleHasErrorMarker(a)) {
      if (!this.ifTabChildrenHasError(a)) {
        this.removeTabErrorMarker(a);
      }
    }
  },
};
TreeListRenderer = function (a, b) {
  this.isClickable = false;
  this.isCheckable = false;
  this.initializeTree(a, b);
};
TreeListRenderer.prototype.initializeTree = function (e, g) {
  if (!this.tree) {
    this.tree = $("<ul>");
    this.tree.css("list-style-type", "none");
  }
  this.tree.empty();
  if (g && e) {
    this.nodeList = {};
    this.root = { id: g, parentID: null, children: [] };
    this.nodeList[g] = this.root;
    for (var a in e) {
      var c = e[a];
      var b = this.nodeList[c.id];
      if (!b) {
        b = {};
        this.nodeList[c.id] = b;
      }
      for (var f in c) {
        b[f] = c[f];
      }
      var d = this.nodeList[c.parentID];
      if (!d) {
        d = {};
        this.nodeList[c.parentID] = d;
      }
      if (!d.children) {
        d.children = [];
      }
      d.children.push(b);
    }
    this.buildTree();
  }
  return this;
};
TreeListRenderer.prototype.buildTree = function () {
  var a = this.buildNodeSubTree(this.root);
  if (a) {
    this.tree.append(a);
  }
};
TreeListRenderer.prototype.changeNodeChildrenCheckStatus = function (d) {
  var b = $(
    ":checkbox[nodeParentId=" + this.correctID($(d).attr("nodeId")) + "]"
  );
  var c = this;
  var a = $(d).prop("checked");
  b.each(function () {
    this.checked = a;
    var e = $(this).attr("nodeId");
    c.nodeList[e].checked = a;
    c.changeNodeChildrenCheckStatus(this);
  });
};
TreeListRenderer.prototype.changeNodeAncestorsCheckStatus = function (c) {
  var e = this.correctID($(c).attr("nodeParentId"));
  var d = $(":checkbox[nodeId=" + this.correctID(e) + "]").first();
  if (d.length > 0) {
    var f = $(":checkbox[nodeParentId=" + this.correctID(e) + "]");
    var b = 0;
    var a = $.grep(f, function (g) {
      return g.checked == true;
    });
    if (a.length == f.length) {
      $(d).prop("checked", true);
      this.nodeList[e].checked = true;
    } else {
      $(d).prop("checked", false);
      this.nodeList[e].checked = false;
    }
    this.nodeList[e].hasCheckedChild = a.length > 0;
    this.changeNodeAncestorsCheckStatus(d);
  }
};
TreeListRenderer.prototype.getCheckedNodesIDs = function () {
  var b = [];
  if (this.isCheckable) {
    var a = $("input:checkbox:checked");
    b = $.map(a, function (c) {
      return $(c).attr("nodeId");
    });
  }
  return b;
};
TreeListRenderer.prototype.getCheckedNodes = function () {
  var b = [];
  if (this.isCheckable) {
    var a = $("input:checkbox:checked");
    var c = this;
    b = $.map(a, function (d) {
      var e = $(d).attr("nodeId");
      return c.nodeList[e];
    });
  }
  return b;
};
TreeListRenderer.prototype.getTopCheckedNodesIDs = function () {
  var a = [];
  if (this.root) {
    this.getTopCheckedParentNodeIDs(this.root, a);
  }
  return a;
};
TreeListRenderer.prototype.getTopCheckedParentNodeIDs = function (b, c) {
  if (this.root) {
    if (this.isCheckable) {
      if (b.checked) {
        c.push(b.id);
      } else {
        if (b.children) {
          for (var a = 0; a < b.children.length; a++) {
            this.getTopCheckedParentNodeIDs(b.children[a], c);
          }
        }
      }
    }
  }
  return c;
};
TreeListRenderer.prototype.buildNodeSubTree = function (g) {
  var h;
  if (g) {
    if (g.id == this.root.id) {
      h = $("<div>");
    } else {
      h = $("<li>").attr("id", "li_" + g.id);
      var k = $("<div>")
        .attr("id", "node_" + g.id)
        .append("<span>----</span>")
        .addClass("treeNodeDiv");
      var q = $("<tbody>");
      var o = $("<table>").append(q).addClass("tableTree");
      var n = $("<tr>").addClass("tableTree").appendTo(q);
      if (g.children) {
      }
      var a = $("<input type='checkbox'>");
      a.id = "checkbox_" + g.id;
      a.attr("nodeId", g.id);
      a.attr("nodeParentId", g.parentID);
      var f = this;
      a.change(function () {
        f.changeNodeChildrenCheckStatus(this);
        f.changeNodeAncestorsCheckStatus(this);
        g.checked = this.checked;
        f.onNodeCheckChanged(g);
      });
      if (g.checked) {
        a.prop("checked", true);
        f.changeNodeChildrenCheckStatus(a);
        f.changeNodeAncestorsCheckStatus(a);
      }
      n.append($("<td>").addClass("tableTree").append(a));
      if (this.isCheckable && !g.isDisabled) {
        a.show();
      } else {
        a.hide();
      }
      var m = $("<a>").attr("id", "nodeLink_" + g.id);
      if (this.isClickable) {
        m.addClass("clickableTreeNodeItem").iasTooltip(
          "Click to view the direct centers on this region"
        );
      }
      var p = this.onNodeDrawn(g);
      if (p) {
        m.append(p);
      }
      n.append($("<td>").addClass("tableTree").append(m));
      m.click(function () {
        if (f.isClickable) {
          f.onNodeClicked(g);
        }
      });
      q.append(n);
      k.append(o);
      h.append(k);
    }
    if (g.children) {
      var j = $("<ul class='treeListUL'>")
        .attr("id", "ul_" + g.id)
        .slideToggle();
      var r = $('<img class="treeNodeExpandedImg"/>')
        .appendTo(k)
        .click(function () {
          var l = $(this);
          j.slideToggle(300);
          l.toggleClass("treeNodeCollapsedImg");
        })
        .click();
      for (var b = 0, c = g.children.length, d = c - 1; b < c; b++) {
        var e = this.buildNodeSubTree(g.children[b]);
        if (b == d) {
          e.append($('<div class="treeTrimLayerDiv">'));
        }
        j.append(e);
      }
      h.append(j);
    }
  }
  return h;
};
TreeListRenderer.prototype.onNodeDrawn = function (a) {
  var c = $("<div>");
  var d = $("<table>")
    .addClass("tableTree")
    .attr("id", "nodeTemplateTable_" + a.id);
  var b = d.append($("<tr>").addClass("tableTree"));
  b.append($("<td>").addClass("tableTree")).html(a.label);
  c.append(d);
  if (a.isDisabled) {
    b.css({ color: "#B3B3B3" });
  }
  return c;
};
TreeListRenderer.prototype.onNodeClicked = function (a) {};
TreeListRenderer.prototype.onNodeCheckChanged = function (a) {};
TreeListRenderer.prototype.getRoot = function () {
  return this.root;
};
TreeListRenderer.prototype.getValue = function () {
  return this.nodeList;
};
TreeListRenderer.prototype.renderOn = function (a) {
  a.append(this.tree);
  return this;
};
TreeListRenderer.prototype.setValue = function (c) {
  if (c != null) {
    for (var b = 0; b < c.length; b++) {
      var d = c[b];
      if (this.nodeList[d.id]) {
        for (var g in d) {
          this.nodeList[d.id][g] = d[g];
        }
        var a = $(":checkbox[nodeId=" + this.correctID(d.id) + "]").first();
        if (d.checked) {
          a.prop("checked", true);
          this.changeNodeChildrenCheckStatus(a);
          this.changeNodeAncestorsCheckStatus(a);
        }
        var e = $("a#nodeLink_" + d.id).first();
        e.empty();
        var f = this.onNodeDrawn(this.nodeList[d.id]);
        if (f) {
          e.append(f);
        }
      }
    }
  }
};
TreeListRenderer.prototype.setSelectedValue = function (f) {
  if (f != null) {
    for (var b = 0; b < f.length; b++) {
      var c = f[b];
      if (this.nodeList[c]) {
        this.nodeList[c]["checked"] = true;
        var a = $(":checkbox[nodeId=" + this.correctID(c) + "]").first();
        a.prop("checked", true);
        this.changeNodeChildrenCheckStatus(a);
        this.changeNodeAncestorsCheckStatus(a);
        var d = $("a#nodeLink_" + c).first();
        d.empty();
        var e = this.onNodeDrawn(this.nodeList[c]);
        if (e) {
          d.append(e);
        }
      }
    }
  }
};
TreeListRenderer.prototype.toggleTreeVisibility = function (a) {
  if (a) {
    this.tree.show();
  } else {
    this.tree.hide();
  }
  return this;
};
TreeListRenderer.prototype.clearTreeSelection = function () {
  var c = this;
  var a = $("input:checkbox:checked");
  a.each(function () {
    $(this).prop("checked", false);
    var d = $(this).attr("nodeId");
    if (d) {
      c.onNodeCheckChanged(c.nodeList[d]);
    }
  });
  if (this.nodeList) {
    for (var b in this.nodeList) {
      this.nodeList[b].checked = false;
    }
  }
};
TreeListRenderer.prototype.correctID = function (a) {
  if (isNaN(a)) {
    a = "'" + a + "'";
  }
  return a;
};
AbstractRenderer = function (a) {
  this.currentRow = null;
  this.field = a;
  this.inputField = null;
};
AbstractRenderer.prototype.getFireEvents = function () {
  return ["change", "keyup"];
};
AbstractRenderer.prototype.registerFieldEvent = function (b, a) {};
AbstractRenderer.prototype.renderOn = function (a) {
  a.append(this.inputField);
  return this;
};
AbstractRenderer.prototype.createErrorMarker = function (a) {
  this.errorMarker = $("<i class='inputFieldError'>");
  a.children("div").addClass("inputFieldContainerDiv");
  a.append(this.errorMarker);
  this.onFieldKeydownHideErrorMarker();
};
AbstractRenderer.prototype.renderOnDesignMode = function () {
  return null;
};
AbstractRenderer.prototype.setRow = function (a) {
  this.currentRow = a;
  return this;
};
AbstractRenderer.prototype.getRow = function () {
  return this.currentRow;
};
AbstractRenderer.prototype.getInputFieldTd = function () {
  return this.currentRow.children()[1];
};
AbstractRenderer.prototype.renderFieldLabel = function (a, c, e) {
  var d = $("<span>").html(c);
  $(a).append(d);
  if (e) {
    var b = $('<i class="uirenderer-infoTooltip">');
    b.iasTooltip(e, null, true);
    $(a).append(b);
  }
};
AbstractRenderer.prototype.drawRequiredFieldRedStar = function (a) {
  $(a).append($("<span>").addClass("blackStar").html(" *"));
};
AbstractRenderer.prototype.getValue = function () {
  var a = this.inputField.val();
  return a;
};
AbstractRenderer.prototype.getHumanValue = function () {
  return this.getValue();
};
AbstractRenderer.prototype.setValue = function (a) {
  this.inputField.val(a);
  return this;
};
AbstractRenderer.prototype.getFieldId = function () {
  return this.field.id;
};
AbstractRenderer.prototype.getType = function () {
  var a = undefined;
  if (this.field.type) {
    a = this.field.type;
  }
  return a;
};
AbstractRenderer.prototype.getFieldLabel = function () {
  return this.field.label;
};
AbstractRenderer.prototype.getFieldSecondaryLabel = function () {
  return this.field.secondaryLabel;
};
AbstractRenderer.prototype.changeFieldLabel = function (b) {
  if (!b) {
    return;
  }
  var a = this.currentRow.children()[0];
  $(a).empty();
  $(a).append(b);
  this.field.label = b;
};
AbstractRenderer.prototype.isEmpty = function () {
  var a = this.getValue();
  return a == null || a == "";
};
AbstractRenderer.prototype.getError = function () {
  var a = null;
  var c = this.getValue();
  if (c) {
    if (this.field.pattern) {
      var b = new RegExp(this.field.pattern);
      if (!b.test(c)) {
        if (this.field.valueNotMatchPatternMessage) {
          a = this.field.valueNotMatchPatternMessage;
        } else {
          a = IAS.L("Please match the requested format.");
        }
      }
    }
  }
  return a;
};
AbstractRenderer.prototype.onFieldKeydownHideErrorMarker = function () {
  var d = this;
  var b = this.getFields();
  for (var c = 0; c < b.length; c++) {
    if (b[c]) {
      var a = [
        "text",
        "password",
        "bigtext",
        "htmlEditorRenderer",
        "email",
        "phone",
        "fax",
        "captcha",
        "dropdowncountryrenderer",
        "countryrenderer",
      ];
      b[c][$.inArray(this.field.type, a) != -1 ? "keydown" : "change"](
        function () {
          if (d.errorMarker && d.errorMarker.length) {
            d.errorMarker.removeClass("inputFieldErrorVisible");
            d.forEachInputField(function (e) {
              e.removeClass("errorInField");
            });
          }
        }
      );
    }
  }
  return this;
};
AbstractRenderer.prototype.afterRender = function () {
  if (this.field.events) {
    this.bindFieldEvents();
  }
  if (this.field.onEnterCallback) {
    this.onEnterKeyClick(this.field.onEnterCallback);
  }
};
AbstractRenderer.prototype.uiRendererCallBack = function (a) {
  var c = this.getFields();
  var d = 0;
  for (var b = 0, d = c.length; b < d; b++) {
    if ($.inArray(c[b].attr("type"), ["text", "password", "textarea"]) != -1) {
      c[b].keyup(a);
    } else {
      if (c[b].attr("type") === "button") {
        c[b].click(a);
      } else {
        c[b].change(a);
      }
    }
  }
  return this;
};
AbstractRenderer.prototype.onFieldFocusCallBack = function (a) {
  var b = this.getFields();
  for (var c = 0; c < b.length; c++) {
    b[c].focus(a);
  }
};
AbstractRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.inputField);
  return a;
};
AbstractRenderer.prototype.css = function (a) {
  var c = this.getFields();
  for (var b in c) {
    if (c[b]) {
      c[b].css(a);
    }
  }
  return this;
};
AbstractRenderer.prototype.setAttribute = function (a, b) {
  var c = this.getFields();
  for (var d = 0; d < c.length; d++) {
    var e = c[d];
    if (e) {
      e.prop(a, b);
    }
  }
  return this;
};
AbstractRenderer.prototype.setAttributes = function (a) {
  for (var b in a) {
    this.setAttribute(b, a[b]);
  }
  return this;
};
AbstractRenderer.prototype.visible = function (a) {
  this.getFields().forEach(function (b) {
    if (a) {
      b.show();
    } else {
      b.hide();
    }
  });
  return this;
};
AbstractRenderer.prototype.disableInputField = function (a) {
  this.setAttribute("disabled", a);
  return this;
};
AbstractRenderer.prototype.readOnly = function (a) {
  this.setAttribute("readOnly", a);
  return this;
};
AbstractRenderer.prototype.isReadOnlyOrDisabled = function () {
  var c = true;
  var a = this.getFields();
  for (var b = 0; b < a.length; b++) {
    if (a[b]) {
      c = !!c && !!(a[b].prop("readonly") || a[b].prop("disabled"));
    }
  }
  return c;
};
AbstractRenderer.prototype.validateAndCheckErrors = function (d) {
  var a = false;
  if (!this.field.hasOwnProperty("isDisplayed")) {
    this.field.isDisplayed = true;
  }
  var b = this.field.isDisplayed;
  var c = this.isReadOnlyOrDisabled();
  if (b && !c) {
    a = this.showErrorMarker(d);
  }
  return a;
};
AbstractRenderer.prototype.showErrorMarker = function (f) {
  var d =
    f && f.hasOwnProperty("anyFieldRequired") ? f.anyFieldRequired : false;
  var a =
    f && f.hasOwnProperty("allFieldsRequired") ? f.allFieldsRequired : false;
  var e = false;
  var c = null;
  this.removeErrorMarker();
  if ((a || (this.field.required && d)) && this.isEmpty()) {
    c = " * " + IAS.L("Required");
  } else {
    c = this.getError();
  }
  if (c) {
    var b = this.errorMarker;
    b.addClass("inputFieldErrorVisible");
    b.iasTooltip(c, "#be4b49");
    this.forEachInputField(function (g) {
      g.addClass("errorInField");
    });
    e = true;
  }
  if (e == false && this.field.type == "dropdowncountryrenderer") {
    e = this.inputField.phoneField.checkPhoneNumberHasSpecialCharacters();
    if (e) {
      c = " * " + IAS.L("Please Update Phone Number");
      var b = this.errorMarker;
      b.addClass("inputFieldErrorVisible");
      b.iasTooltip(c, "#be4b49");
      this.forEachInputField(function (g) {
        g.addClass("errorInField");
      });
    }
  }
  return e;
};
AbstractRenderer.prototype.removeErrorMarker = function () {
  var a = this.getRow();
  if (a) {
    a.find(".inputFieldErrorVisible").removeClass("inputFieldErrorVisible");
    this.forEachInputField(function (b) {
      b.removeClass("errorInField");
    });
  }
};
AbstractRenderer.prototype.forEachInputField = function (a) {
  if (!(a || a instanceof Function)) {
    throw "first argument must be a function";
  }
  var d = this.getFields();
  if (d) {
    for (var c in d) {
      var b = d[c];
      if (b) {
        a.apply(this, [b]);
      }
    }
  }
};
AbstractRenderer.prototype.HideHtmlEditorToolBar = function () {
  var a = this.inputField;
  var b = false;
  a.jqte({ titleHidden: this.field.titleHidden });
};
AbstractRenderer.prototype.getContainer = function () {
  var a = $("<div>");
  this.renderOn(a);
  return a;
};
(AbstractRenderer.prototype.onEnterKeyClick = function (d) {
  var c = this;
  var a = this.getFields() || [];
  for (var b = 0; b < a.length; b++) {
    $(a[b]).bind("keypress", function (f) {
      if (f.which == 13) {
        d(c, event);
      }
    });
  }
}),
  (AbstractRenderer.prototype.bindFieldEvents = function () {
    var f = this;
    var c = this.field.events;
    var d = this.getFields() || [];
    for (var b in c) {
      var a = c[b];
      for (var e = 0; e < d.length; e++) {
        $(d[e]).bind(b, function (g) {
          a(f, g);
        });
      }
    }
  });
InheritFromAbstractRenderer = function (a) {
  a.prototype.base = {};
  for (var c in AbstractRenderer.prototype) {
    var b = AbstractRenderer.prototype[c];
    a.prototype[c] = b;
    a.prototype.base[c] = b;
  }
};
BaseRendererConstructor = function (e) {
  var d = e;
  if (d.onChangeCallback && d.onChangeCallback instanceof Function) {
    var a = d.getFireEvents().join(" ");
    var b = d.getFields() || [];
    for (var c = 0; c < b.length; c++) {
      $(b[c]).bind(a, function (f) {
        d.onChangeCallback(d, f);
      });
    }
  }
};
BigTextRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<textarea cols=30 rows=8/>");
  this.inputField.setID(this.field.id);
  this.inputField.attr("placeholder", this.field.placeholder || "");
  if (this.field.size) {
    this.inputField.attr("rows", this.field.size.rows);
    this.inputField.attr("cols", this.field.size.cols);
  }
  BaseRendererConstructor(this);
};
BigTextRenderer.prototype.renderOn = function (a) {
  this.inputField.attr(
    "style",
    "overflow:auto;resize:none;width:98%;height:100%"
  );
  a.append(this.inputField);
};
InheritFromAbstractRenderer(BigTextRenderer);
ButtonRenderer = function (a, d, b, c) {
  this.field = a;
  this.inputField = $(
    "<button class='nonPopupButton' id=" + this.field.id + ">"
  ).html(IAS.L(this.field.label));
  if (this.field.css) {
    this.inputField.css(this.field.css);
  }
  if (d) {
    this.click(d, c);
  }
  if (b) {
    this.renderOn(b);
  }
};
InheritFromAbstractRenderer(ButtonRenderer);
ButtonRenderer.prototype.click = function (c, d) {
  var a = !(d || false);
  var b = function (e) {
    if (a) {
      $(this).attr("disabled", true);
    }
    if (c != null && c instanceof Function) {
      c(e);
    }
    if (a) {
      $(this).attr("disabled", false);
    }
  };
  this.inputField.click(b);
  return this;
};
ButtonRenderer.prototype.show = function () {
  this.inputField.show();
  return this;
};
ButtonRenderer.prototype.hide = function () {
  this.inputField.hide();
  return this;
};
ButtonRenderer.prototype.disable = function (a) {
  var a = a == undefined ? true : a;
  $(this.inputField).attr("disabled", a);
  return this;
};
CaptchaRenderer = function (a, c) {
  var b = this;
  this.field = a;
  this.reloadCount = 0;
  c instanceof $ && this.renderOn(c);
};
InheritFromAbstractRenderer(CaptchaRenderer);
CaptchaRenderer.prototype.ReloadImage = function () {
  this.captchaImage.attr(
    "src",
    "/Captcha/GetNewCaptcha?c=" + this.reloadCount++
  );
  this.setValue("");
};
CaptchaRenderer.prototype.renderOn = function (d) {
  var e = $.createDiv(null, "captchaWrapperDiv");
  var a = $("<div>");
  this.captchaImage = $(
    "<img id='capImg' src='/Captcha/GetNewCaptcha' + alt='__' />"
  );
  a.append(this.captchaImage);
  var g = $("<div>");
  var c = new TextRenderer({ label: "", id: "capText", type: "text" });
  this.inputField = c.inputField.attr({
    placeholder: IAS.L("Not case sensitive."),
    id: "captcahInputText",
  });
  c.renderOn(g);
  var b = $("<div>");
  var f = $(
    "<img src='/css/icons/reload-97640_640.png' width='20' height='20' id='reloadButton'>"
  ).click(IAS.bind(this, "ReloadImage"));
  g.append(f);
  e.append(a).append(g);
  d.append(e);
};
CheckboxListRenderer = function (b, c, f, d, e, g) {
  this.field = b;
  this.onChangeCallback = c;
  this.onChangeCallbackAndReturnCheckedID = d;
  this.mainDiv = $("<div class='checkBoxListCheckBoxesDiv'>");
  if (!this.field.value) {
    this.field.value = {};
  }
  this.designMode = f;
  var a = e || b.checkAllHeader;
  if (a) {
    this.checkAllHeader = a;
  } else {
    this.checkAllHeader = false;
  }
  this.mainDiv.addClass("checkBoxListCheckBoxesDivScrollable");
  if (b.checkBoxOptions) {
    this.field.checkBoxOptions = b.checkBoxOptions;
  } else {
    this.field.checkBoxOptions = [];
  }
  this.dimensions = g;
  this.inputFieldList = this.createCheckBoxesFromOptions(
    this.field.checkBoxOptions,
    false
  );
};
InheritFromAbstractRenderer(CheckboxListRenderer);
CheckboxListRenderer.prototype.createCheckBoxesFromOptions = function (h) {
  var f = {};
  delete this.optionsLabels;
  this.optionsLabels = {};
  delete this.optionsSecondaryLabels;
  this.optionsSecondaryLabels = {};
  this.checkBoxesLabelElements = {};
  var c;
  var e;
  var m;
  var n;
  var l = IAS.Common.GetCheckBoxRandomID;
  for (var d = 0; d < h.length; d++) {
    if (h[d].id == undefined || h[d].id === "") {
      h[d].id = IAS.Common.generateRandomID(h[d].label, h);
    }
    if (
      h[d].constructor == {}.constructor &&
      h[d].hasOwnProperty("id") &&
      h[d].hasOwnProperty("label") &&
      h[d].hasOwnProperty("value")
    ) {
      c = h[d].id;
      e = h[d].label;
      m = h[d].secondaryLabel;
      n = h[d].value;
    } else {
      if (typeof h[d] == "string") {
        c = h[d];
        e = h[d];
        m = h[d];
      } else {
        if (
          h[d].constructor == {}.constructor &&
          h[d].hasOwnProperty("id") &&
          h[d].hasOwnProperty("label")
        ) {
          c = h[d].id;
          e = h[d].label;
          m = h[d].secondaryLabel;
        }
      }
    }
    var k = l(c.toString());
    var j = "<input class='css-checkbox' type=\"checkbox\" id = " + k + ">";
    var a = $(j).prop("checked", n).setID(c);
    var g = this;
    a.change(function (o) {
      g.field.value = g.getValue();
      if (g.onChangeCallback instanceof Function) {
        g.onChangeCallback(g, o);
      }
      if (g.onChangeCallbackAndReturnCheckedID instanceof Function) {
        g.onChangeCallbackAndReturnCheckedID(
          this.getAttribute("iasKey"),
          this.checked
        );
      }
    });
    if (this.checkAllHeader) {
      a.click(function () {
        var o = g.getSelectedIDs().length;
        if (o === g.field.checkBoxOptions.length) {
          g.checkAllFieldsField.prop("checked", true);
          g.allChecked = true;
        } else {
          g.checkAllFieldsField.prop("checked", false);
          g.allChecked = false;
        }
      });
    }
    f[c] = a;
    this.optionsLabels[c] = e;
    this.optionsSecondaryLabels[c] = m;
    var b = (e = IAS.GetPrimaryOrSecondaryName(e, m));
    this.checkBoxesLabelElements[c] = $(
      "<label class='checkboxlabel' style='white-space: nowrap;'>"
    )
      .text(b)
      .attr("for", k);
  }
  return f;
};
CheckboxListRenderer.prototype.setValue = function (c) {
  if (!c) {
    return;
  }
  for (var a = 0; a < c.length; a++) {
    var b = c[a];
    if (typeof b.checked == "string") {
      if (b.checked.toLowerCase() == "true") {
        b.checked = true;
      } else {
        if (b.checked.toLowerCase() == "false") {
          b.checked = false;
        }
      }
    }
    if (typeof b === "number" || typeof b === "string") {
      this.inputFieldList[b] && this.inputFieldList[b].prop("checked", true);
    } else {
      if (b.checked == true && this.inputFieldList[b.id]) {
        this.inputFieldList[b.id] &&
          this.inputFieldList[b.id].prop("checked", true);
      }
    }
  }
};
CheckboxListRenderer.prototype.setSelectedValue = function (b) {
  for (var a = 0; a < b.length; a += 1) {
    if (this.inputFieldList[b[a]]) {
      this.inputFieldList[b[a]].prop("checked", true);
    }
  }
};
CheckboxListRenderer.prototype.Clear = function (c) {
  for (var a = 0; a < c; a++) {
    var b = c[a];
    this.inputFieldList[b].prop("checked", false);
  }
};
CheckboxListRenderer.prototype.getSelectedIDs = function (a) {
  var g = [];
  if (this.inputFieldList) {
    for (var e in this.inputFieldList) {
      var b = this.inputFieldList[e];
      if (b.is(":checked")) {
        var f = b.getID();
        g.push(f);
      }
    }
    if (a) {
      for (var c = 0, d = g.length; c < d; c++) {
        g[c] = parseInt(g[c]);
      }
    }
  }
  return g;
};
CheckboxListRenderer.prototype.getValue = function () {
  if (this.inputFieldList) {
    var e = [];
    for (var c in this.inputFieldList) {
      var b = this.inputFieldList[c];
      var d = b.getID();
      var a = b.is(":checked");
      e.push({ id: d, checked: a });
    }
    return e;
  }
};
CheckboxListRenderer.prototype.getlistValue = function () {
  if (this.inputFieldList) {
    var e = [];
    for (var c in this.inputFieldList) {
      var b = this.inputFieldList[c];
      var d = b.getID();
      var a = b.is(":checked");
      e.push({ id: d, checked: a });
    }
    return e;
  }
};
CheckboxListRenderer.prototype.getText = function (b) {
  var c = 0;
  var d = "";
  for (var a in this.inputFieldList) {
    if (a == b) {
      d = this.optionsLabels[c];
    } else {
      c += 1;
    }
  }
  return d;
};
CheckboxListRenderer.prototype.getSelectedText = function () {
  var b = [];
  for (var a in this.inputFieldList) {
    if (this.inputFieldList[a].is(":checked") === true) {
      b.push(this.optionsLabels[a]);
    }
  }
  return b.join(",");
};
CheckboxListRenderer.prototype.getSelectedTextList = function () {
  var b = [];
  for (var a in this.inputFieldList) {
    if (this.inputFieldList[a].is(":checked") === true) {
      b.push(this.optionsLabels[a]);
    }
  }
  return b;
};
CheckboxListRenderer.prototype.renderOn = function (b) {
  if (this.designMode) {
    this.rendererContainer = b.empty();
  }
  var m = $("<ul class='checkBoxList'>");
  var l = this.fieldWrapperDiv || $.createDiv();
  this.fieldWrapperDiv = l.empty().addClass("checkBoxListDiv");
  if (this.checkAllHeader && !this.designMode) {
    var e = $.createDiv().addClass("checkBoxHeader");
    var k = IAS.Common.generateRandomID("all", {});
    this.checkAllFieldsField = $('<input class="css-checkbox" type="checkbox">')
      .attr("id", k)
      .click(IAS.bind(this, "checkAll"));
    var a = $("<label class='checkboxlabel' style='margin-left: 1em;'>")
      .attr("for", k)
      .text(IAS.L("Check all"));
    e.append(this.checkAllFieldsField).append(a);
    l.append(e);
  }
  var d = this.inputFieldList;
  var g = this.checkBoxesLabelElements;
  if (d) {
    for (var f in d) {
      var h = $("<li>").append(d[f]).append(g[f]);
      m.append(h);
    }
    if (Object.keys(d).length < 1) {
      this.mainDiv.append($("<span>").text(IAS.L("No items in this list")));
    } else {
      this.mainDiv.append(m);
    }
  }
  if (this.designMode == true) {
    var c = new ButtonRenderer({
      id: "editOptions",
      label: IAS.L("Edit Options"),
    });
    c.renderOn(this.mainDiv);
    var j = this;
    c.click(IAS.bind(this, "addRemoveButton_Click"));
  }
  if (this.dimensions) {
    l.css(this.dimensions);
    this.mainDiv.css({ height: "90%", "max-height": "90%" });
  }
  l.append(this.mainDiv);
  b.append(l);
};
CheckboxListRenderer.prototype.addRemoveButton_Click = function (g) {
  var d = this;
  var b = $("<div>").append("<br>");
  var e = this.field.checkBoxOptions;
  var h = new IAS.TableRenderer(
    [
      { id: "selected", type: "checkbox" },
      {
        label: IAS.L("Option Label") + " / " + IAS.L("English Name"),
        id: "label",
        type: "text",
      },
      {
        label: IAS.L("Option Label") + " / " + IAS.L("Secondary Name"),
        id: "secondaryLabel",
        type: "text",
      },
    ],
    b,
    e
  );
  var a = new ButtonRenderer({ id: "addOptions", label: IAS.L("Add Option") });
  a.renderOn(b.append("<br><br>"));
  a.click(function () {
    var k = h.getRowsData();
    if (k == undefined) {
      k = [];
    }
    var j = IAS.Common.generateRandomID("option", {});
    k.push({ id: j, label: "", secondaryLabel: "" });
    h.setValues(k);
  });
  var c = new ButtonRenderer({
    id: "deleteOptions",
    label: IAS.L("Delete Option"),
  });
  c.click(function () {
    var j = h.getValues();
    var l = h.getRowsData();
    var m = false;
    for (var k = j.length - 1; k >= 0; k--) {
      if (j[k].selected == true) {
        m = true;
        j.splice(k, 1);
        l.splice(k, 1);
      }
    }
    if (m == true) {
      h.setValues(l);
    }
  });
  c.renderOn(b);
  var e = IAS.popupOptions();
  e.okCallback = function () {
    var j = h.getValues();
    j = j.filter(function (m, l, k) {
      return m.id != "" && m.label != "";
    });
    d.field.checkBoxOptions = j;
    d.mainDiv.empty();
    d.inputFieldList = d.createCheckBoxesFromOptions(j);
    d.renderOn(d.rendererContainer);
  };
  var f = new IAS.popup(b, IAS.L("Options"), e);
};
CheckboxListRenderer.prototype.clearSelection = function () {
  this.setAllOptions(false);
};
CheckboxListRenderer.prototype.setAllOptionsSelected = function () {
  this.setAllOptions(true);
};
CheckboxListRenderer.prototype.setAllOptions = function (a) {
  var b = this;
  for (var c in this.inputFieldList) {
    $(this.inputFieldList[c]).prop("checked", a);
  }
};
CheckboxListRenderer.prototype.getFields = function () {
  var a = [];
  this.checkAllFieldsField && a.push(this.checkAllFieldsField);
  for (var b in this.inputFieldList) {
    if (this.inputFieldList.hasOwnProperty(b)) {
      a.push(this.inputFieldList[b]);
    }
  }
  return a;
};
CheckboxListRenderer.prototype.isEmpty = function () {
  var a = this.getSelectedIDs();
  return a == null || a == "" || a.length == 0;
};
CheckboxListRenderer.prototype.checkAll = function () {
  this.allChecked = !this.allChecked;
  for (var a in this.inputFieldList) {
    if (this.inputFieldList[a].parent().is(":visible")) {
      this.inputFieldList[a].prop("checked", this.allChecked).change();
    }
  }
};
CheckboxListRenderer.prototype.appendNewOptions = function (a) {
  this.field.checkBoxOptions = a;
  this.inputFieldList = this.createCheckBoxesFromOptions(a, false);
  this.mainDiv.empty();
  this.renderOn(this.fieldWrapperDiv);
};
CheckboxListRenderer.prototype.filterList = function (c) {
  var a = c.map(function (d) {
    return d.id;
  });
  for (var b in this.inputFieldList) {
    if (a.indexOf(b) > -1) {
      this.inputFieldList[b].parent().css("display", "list-item");
    } else {
      this.inputFieldList[b].parent().css("display", "none");
    }
  }
};
CheckboxRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<input type='checkbox' class='css-checkbox'>");
  this.field.htmlID = IAS.Common.GetCheckBoxRandomID(this.field.id.toString());
  if (this.field.id) {
    this.inputField.attr("id", this.field.htmlID);
    this.inputField.setID(this.field.id);
  }
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(CheckboxRenderer);
CheckboxRenderer.prototype.setValue = function (a) {
  if (a == true) {
    this.setAttribute("checked", true);
  } else {
    this.setAttribute("checked", false);
  }
};
CheckboxRenderer.prototype.getValue = function () {
  if (this.inputField.is(":checked")) {
    return true;
  } else {
    return false;
  }
};
CheckboxRenderer.prototype.renderOn = function (a) {
  a.append(this.inputField);
  var b = this.field;
  var c = (this.fieldLabel = $("<label class='checkboxlabel'>")
    .attr("for", this.field.htmlID)
    .text(b.label));
  a.append(
    this.inputField.css({ "margin-right": "5px", "vertical-align": "middle" })
  );
  a.append(c);
  return this;
};
CheckboxRenderer.prototype.getFields = function () {
  return [this.fieldLabel, this.inputField];
};
ColorRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<input type='color'>").addClass("color");
  this.inputField.setID(this.field.id);
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(ColorRenderer);
ColorRenderer.prototype.setValue = function (a) {
  this.inputField.val(a);
};
CountryRenderer = function (field, onChangeCallback) {
  this.field = field;
  this.onChangeCallback = onChangeCallback;
  this.changeCallBack = [];
  (this.currentValue = null), (this.previousValue = null);
  if (!this.field.className) {
    this.field.className = "";
  }
  if (this.field.optionsReference) {
    this.field.options = eval("(" + field.optionsReference + ")");
  }
  this.field.disallowedNull = field.disallowedNull || false;
  if (
    !this.field.options[0].hasOwnProperty("id") ||
    !this.field.options[0].hasOwnProperty("label")
  ) {
    throw "Error initializing dropdown. 'options' must either be an object or an array with elements 'id' and 'label'";
  }
  this.field.options.unshift({ id: "", label: "" });
  if (
    !this.field.disallowedNull &&
    this.field.options.length > 1 &&
    this.field.options[0].id != "" &&
    this.field.options[0].label != ""
  ) {
    this.field.options.unshift({ id: "", label: "" });
  }
  this.inputField = this.getInputField(this.field.options);
};
InheritFromAbstractRenderer(CountryRenderer);
CountryRenderer.prototype.getValue = function (a, b) {
  var d = this.inputField.find("[id='imagDiv']");
  var e = [];
  if (a == false) {
    var a = d.attr("class").split("-");
    e.push(a[1]);
    var c = this.inputField.find("[id='countryNameDiv']");
    e.push(c.text());
    e.push((b = d.attr("countryId")));
    return e;
  } else {
    var b = 0;
    if (d) {
      b = d.attr("countryId");
    }
    return b;
  }
};
CountryRenderer.prototype.setValue = function (g) {
  if (g) {
    if (!(g instanceof Array)) {
      var b = g;
      var d = this.inputField.find("li[id='" + b + "']");
      var a = $(d).attr("countrycod").toString().trim();
      var c = $(d).attr("countryname").toString().trim();
      this.currentValue = a;
      g = [];
      g[0] = a;
      g[1] = c;
      g[2] = b;
    }
    var e = this.inputField
      .find("i[id='acontentDiv']")
      .find("div[id='imagDiv']");
    if (e) {
      e.removeAttr("class");
      e.removeAttr("countryid");
      e.addClass(String.format("flag flag-{0}", g[0]));
      var c = this.inputField
        .find("i[id='acontentDiv']")
        .find("div[id='countryNameDiv']");
      $(c).text(g[1]);
      e.attr("countryId", g[2]);
      var f = this.inputField.find("i[id='acontentDiv']");
      if (f) {
        f.attr("disabled", "disabled").off("click");
      }
    }
  }
};
CountryRenderer.prototype.renderOn = function (a) {
  a.append(this.inputField);
  return this;
};
CountryRenderer.prototype.getInputField = function (g) {
  var j = $("<ul tabindex='1' id='List' class='list-hide'>")
    .css("list-style-type", "none")
    .on("click focus", "li", function () {
      $(this)
        .css("background-color", "#BFD5EA")
        .siblings()
        .css("background", "");
    });
  $(document).on("keypress", function (m) {
    if (j.attr("class") == "list") {
      var n = false;
      window.Var;
      var k = m.charCode || m.keyCode;
      window.List;
      if (k < 65 || k > 90) {
        var r = String.fromCharCode(k);
        window.index;
        if (window.Var != r) {
          window.Var = r;
          window.index = 0;
          window.List = [];
          $("#List li").each(function (t) {
            var u = this;
            var v = $(this).find("span[class='countryName']");
            var s = v.text();
            if (s.charAt(0).toLowerCase() == r.toLowerCase()) {
              window.List.push($(this));
            }
          });
        } else {
          window.index = window.index + 1;
          n = true;
        }
        if (window.List.length > 0) {
          for (i = window.index; i <= window.List.length; i++) {
            if (j.attr("class") == "list") {
              var p = $(window.List)[i];
              $(p)
                .css("background-color", "#BFD5EA")
                .siblings()
                .css("background", "");
              var o = $(p);
              var l = $("#List");
              if (n) {
                var q = l.scrollTop();
                l.animate({ scrollTop: q + 1 });
              } else {
                l.scrollTop(0);
                l.animate({ scrollTop: o.position().top });
              }
              break;
            }
          }
        }
      }
    }
  });
  $(document).mouseup(function (l) {
    var k = $("#divArrow");
    if (
      "list" != $(l.target).attr("class") &&
      k.attr("class") == "arrowIcon Up"
    ) {
      k.removeClass("arrowIcon Up").addClass("arrowIcon");
      j.hide();
      l.stopPropagation();
    }
  });
  var d = $("<div>");
  var b = $("<div id='countryNameDiv'>");
  var a = $("<div id='dropdownDiv>");
  var f = $("<div id='imagDiv'>");
  b.empty();
  b.append(IAS.L("Select country"));
  this.arrowButtonDiv = $("<div class='arrowIcon' id='divArrow'>");
  var c = $("<i id='acontentDiv'>").on("mouseup", function (l) {
    var k = $("#divArrow");
    if (k.attr("class") == "arrowIcon") {
      k.removeClass("arrowIcon").addClass("arrowIcon Up");
      j.removeClass("list-hide").addClass("list");
      j.show();
    } else {
      k.removeClass("arrowIcon Up").addClass("arrowIcon");
      j.removeClass("list").addClass("list-hide");
      j.hide();
    }
    l.stopPropagation();
  });
  c.append(f).append(b).append(this.arrowButtonDiv);
  var e = $("<div id='dropdown'>");
  var h = this;
  $.each(g, function (l) {
    var k = $("<div>");
    var n = $("<span class='CountryCod'>");
    var o = $("<span class='countryName'>");
    if (l != 0) {
      var m = $("<li/>")
        .addClass("ui-menu-item")
        .attr("id", String.format("{0}", g[l]["id"]))
        .attr("countryCod", String.format("{0}", g[l]["countryCod"]))
        .attr("countryName", String.format("{0}", g[l]["label"]))
        .append(
          k
            .addClass(String.format("flag flag-{0}", g[l]["countryCod"]))
            .append(o.html(g[l]["label"]))
        )
        .appendTo(j)
        .click(function () {
          h.previousValue = h.currentValue;
          h.currentValue = g[l]["countryCod"];
          b.empty();
          b.append(g[l]["label"]);
          var p = h.arrowButtonDiv.attr("class");
          if (p == "arrowIcon Up") {
            h.arrowButtonDiv.removeClass("arrowIcon Up").addClass("arrowIcon");
          }
          var r = this.id;
          var q = $(this).attr("countrycod");
          f.removeAttr("class");
          f.removeAttr("countryId");
          f.addClass(String.format("flag flag-{0}", q));
          f.attr("countryId", r);
          j.hide();
          h.changeCountry();
          if (h.onChangeCallback && h.onChangeCallback instanceof Function) {
            h.onChangeCallback(h, event);
          }
        });
    }
  });
  e.append(c).append(j);
  return e;
};
CountryRenderer.prototype.changeCountry = function (a) {
  if (this.changeCallBack) {
    if (arguments.length > 0 && arguments[0] instanceof Function) {
      this.changeCallBack.push(a);
    } else {
      if (this.currentValue != this.previousValue) {
        var b = this;
        this.changeCallBack.forEach(function (c) {
          c.apply(b);
        });
      }
    }
  }
  this.removeErrorMarker();
};
CurrencyRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.currencySymbol = IAS.getCurrencySympolByField(a);
  this.inputField = $("<input type='number'>");
  this.inputField.setID(this.field.id);
  this.span = $("<span>").addClass("currencyinput");
  this.span.append(this.currencySymbol);
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(CurrencyRenderer);
CurrencyRenderer.prototype.renderOn = function (a) {
  a.append(this.inputField).append(this.span);
};
CurrencyRenderer.prototype.getValue = function () {
  return parseFloat(this.inputField.val());
};
CurrencyRenderer.prototype.getError = function () {
  var a;
  if (
    isNaN(parseFloat(this.inputField.val())) ||
    parseFloat(this.inputField.val()) < 0
  ) {
    a = IAS.L("Please enter number value");
  }
  return a;
};
CurrencyRenderer.prototype.isEmpty = function () {
  return this.inputField.val() == "";
};
IAS.getCurrencySympolByField = function (a) {
  var b = "$";
  if (a) {
    if (a.currencySymbol) {
      b = a.currencySymbol;
    } else {
      if (
        a.operationalCountry &&
        IAS.Data.allCurrencies[a.operationalCountry]
      ) {
        b = IAS.Data.allCurrencies[a.operationalCountry].symbol;
      } else {
        if (IAS.Data.currencySymbol) {
          b = IAS.Data.currencySymbol;
        }
      }
    }
  }
  return b;
};
DateRangeRenderer = function (a, c) {
  var b = this;
  this.field = a;
  this.onChangeCallback = c;
  this.removeValueButton = $('<i class="dateRangeRemoveValueButton">').click(
    function (d) {
      b.removeValues();
      c(b, event);
    }
  );
  this.inputFrom = $("<input class='datepicker' placeholder='DD-MMM-YYYY'>");
  this.inputTo = $("<input class='datepicker' placeholder='DD-MMM-YYYY'>");
  this.inputFrom.click(function () {
    b.inputFrom.datepicker("show");
  });
  this.inputTo.click(function () {
    b.inputTo.datepicker("show");
  });
  this.inputFrom.datepicker({
    showOn: "button",
    changeMonth: true,
    changeYear: true,
    dateFormat: "dd-M-yy",
  });
  this.inputTo.datepicker({
    showOn: "button",
    changeMonth: true,
    changeYear: true,
    dateFormat: "dd-M-yy",
  });
  this.inputFrom.attr("readonly", true);
  this.inputTo.attr("readonly", true);
  BaseRendererConstructor(this);
  this.inputFrom.keypress(function (d) {
    d.preventDefault();
  });
  this.inputTo.keypress(function (d) {
    d.preventDefault();
  });
};
InheritFromAbstractRenderer(DateRangeRenderer);
DateRangeRenderer.prototype.getValueObject = function () {
  var a = this.inputFrom.val();
  var b = this.inputTo.val();
  if (!b && a) {
    b = moment().format("DD-MMM-YYYY");
  }
  if (!a && b) {
    a = "01-JAN-1900";
  }
  if (a && b) {
    return { from: a, to: b };
  } else {
    return null;
  }
};
DateRangeRenderer.prototype.getValue = function () {
  var b = null;
  var a = this.getValueObject();
  if (a) {
    b = "from = " + a.from + ", to = " + a.to;
  }
  return b;
};
DateRangeRenderer.prototype.getDateValue = function () {
  return { from: this.inputFrom.val(), to: this.inputTo.val() };
};
DateRangeRenderer.prototype.setValue = function (a) {
  if (a.from) {
    this.inputFrom.val(a.from);
  }
  if (a.to) {
    this.inputTo.val(a.to);
  }
};
DateRangeRenderer.prototype.getError = function () {
  var b = this.inputFrom.val();
  var c = this.inputTo.val() || moment().format("DD-MMM-YYYY");
  var a = null;
  if (!(b && c)) {
    a = IAS.L("Fill at least from date field");
  } else {
    if (
      !(
        b ==
          moment(
            moment(b, "DD-MMM-YYYY").format("DD-MMM-YY"),
            "DD-MMM-YY"
          ).format("DD-MMM-YYYY") &&
        c ==
          moment(
            moment(c, "DD-MMM-YYYY").format("DD-MMM-YY"),
            "DD-MMM-YY"
          ).format("DD-MMM-YYYY")
      )
    ) {
      a = IAS.L("Incorrect date format");
    }
  }
  return a;
};
DateRangeRenderer.prototype.setAttribute = function (a, b) {
  this.inputFrom.prop(a, b);
  this.inputTo.prop(a, b);
};
DateRangeRenderer.prototype.renderOn = function (a) {
  var b = $.createDiv(null, "dateRangeDiv");
  b.append($("<span>").html(IAS.L("from") + ": "));
  b.append(this.inputFrom);
  b.append(
    $("<span>")
      .css("margin-left", "5px")
      .html(IAS.L("to") + ": ")
  );
  b.append(this.inputTo);
  b.append(this.removeValueButton);
  a.append(b);
};
DateRangeRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.inputFrom);
  a.push(this.inputTo);
  return a;
};
DateRangeRenderer.prototype.removeValues = function () {
  this.inputFrom.val("");
  this.inputTo.val("");
};
DateRangeRenderer.prototype.change = function (a) {
  if (a instanceof Function) {
    this.inputFrom.change(a);
    this.inputFrom.keyup(a);
    this.inputTo.change(a);
    this.inputTo.keyup(a);
  }
};
DateRangeRenderer.prototype.isReadOnlyOrDisabled = function () {
  return this.disabled;
};
DateRangeRenderer.prototype.readOnly = function (a) {
  this.setAttribute("readOnly", a);
  this.disabled = true;
  return this;
};
DateRangeRenderer.prototype.disableInputField = function (a) {
  this.setAttribute("disabled", a);
  this.disabled = true;
  return this;
};
DownloadFileRenderer = function (a) {
  this.field = a;
  this.deleteFunction = a.callbackDelete || IAS.bind(this, "removeFile");
  this.downloadFields = a.downloadFields || [];
  this.mainDiv = $("<div>");
  this.field.url =
    this.field.url ||
    (this.field.fileID && this.field.fileID != 0
      ? "/Renderer/DownloadFile/?fileID=" + this.field.fileID
      : "#");
  var b = $("<div>");
  var d = {
    cells: [
      $("<img style='width:32px;height:32px;' src='/css/icons/download.png'>"),
      this.getLabel(),
    ],
  };
  var c = new IAS.TableLayoutRenderer([d], b, "", "auto", "20px");
  c.table.addClass("invisible");
  this.inputField = $("<a href=" + this.field.url + " >").append(b);
  this.inputField.setID(this.field.id ? this.field.id : "download1");
  this.mainDiv.append(this.inputField);
  this.deleteButton = new ButtonRenderer({
    id: "removeFileButton",
    label: IAS.L("Remove"),
  });
  if (this.field.allowDelete) {
    this.mainDiv.append(this.deleteButton.getContainer());
  }
  this.deleteButton.click(IAS.bind(this, "removeFile"));
};
InheritFromAbstractRenderer(DownloadFileRenderer);
DownloadFileRenderer.prototype.renderOn = function (a) {
  this.container = a;
  a.append(this.mainDiv);
};
DownloadFileRenderer.prototype.getDiv = function () {
  return this.mainDiv;
};
DownloadFileRenderer.prototype.resetUrl = function (a) {
  this.field.url = a ? a : "#";
  this.inputField.attr("href", this.field.url);
};
DownloadFileRenderer.prototype.setValue = function (a) {
  this.mainDiv.remove();
  this.inputField.remove();
  if (a) {
    var e = typeof a;
    switch (e) {
      case "number":
        if (a > 0) {
          this.field.fileID = a;
          this.field.url =
            "/Renderer/DownloadFile/?fileID=" + this.field.fileID;
        }
        break;
      case "string":
        if (a.indexOf("/") > -1) {
          this.field.url = a;
        } else {
          this.field.fileID = a;
          this.field.url =
            "/Renderer/DownloadFile/?fileID=" + this.field.fileID;
        }
        break;
      default:
        throw "Unknow value type for download file renderer";
    }
    var d = {
      cells: [
        $(
          "<img style='width:32px;height:32px;' src='/css/icons/download.png'>"
        ),
        this.getLabel(),
      ],
    };
    var b = $("<div>");
    var c = new IAS.TableLayoutRenderer([d], b, "", "auto", "20px");
    c.table.addClass("invisible");
    this.inputField = $("<a href=" + this.field.url + " >").append(b);
    this.mainDiv.append(this.inputField);
    this.renderOn(this.container);
  } else {
    this.field.fileID = 0;
    this.field.url = "#";
    this.inputField = $("<a href=" + this.field.url + " >").html(
      this.getLabel()
    );
    this.mainDiv.append(this.inputField);
    this.renderOn(this.container);
  }
};
DownloadFileRenderer.prototype.removeFile = function () {
  var a = this;
  if (this.field.allowDelete && this.field.fileID && this.field.fileID != 0) {
    var b =
      IAS.L("Note: This action will cause remove your file completely") +
      "<br>" +
      IAS.L("Are you sure you want to proceed ?");
    IAS.popupYesNo(b, "", function () {
      a.deleteFile();
    });
  } else {
    IAS.popupMsg(IAS.L("You cannot delete this file"), IAS.L("Error"));
  }
};
DownloadFileRenderer.prototype.hideLink = function (a) {
  if (a == false) {
    this.mainDiv.show();
  } else {
    this.mainDiv.hide();
  }
};
DownloadFileRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.inputField);
  a = a.concat(this.deleteButton.getFields());
  return a;
};
DownloadFileRenderer.prototype.readOnly = function (a) {
  this.inputField.prop("readOnly", a);
  this.deleteButton.readOnly(a);
};
DownloadFileRenderer.prototype.deleteFile = function (b) {
  var a = this;
  IAS.post("/Renderer/DeleteFile", { fileID: a.field.fileID }, function (c) {
    if (c > 0) {
      if (a.field.callbackDelete) {
        a.field.callbackDelete(a.field.fileID);
      }
      a.mainDiv.remove();
    }
  });
};
DownloadFileRenderer.prototype.getLabel = function () {
  return this.field.emptyLabel && (!this.field.fileID || this.field.fileID == 0)
    ? this.field.emptyLabel
    : this.field.label;
};
DropdownCountryRenderer = function (b, d, e) {
  this.field = b;
  this.onChangeCallback = d;
  var c = this;
  this.onDropdownCountryChangeCallback = function (f) {
    if (d && d instanceof Function) {
      d(c, f);
    }
  };
  var a = false;
  this.designerMod = e || false;
  if (!this.field.className) {
    this.field.className = "";
  }
  if (this.field.optionsReference) {
    this.field.options = b.optionsReference;
  }
  this.field.disallowedNull = b.disallowedNull || false;
  if (!b.options || b.options.length < 1) {
    var c = this;
    $.post("/NationalOperator/GetCountryWithZipCode", function (f) {
      a = true;
      c.field.options = f.countryZipCodeOptions;
      c.drawField();
    });
  } else {
    if (!this.field.options) {
      this.field.options = [];
    }
    this.drawField();
  }
};
InheritFromAbstractRenderer(DropdownCountryRenderer);
DropdownCountryRenderer.prototype.drawField = function () {
  if (this.field.options.unshift) {
    this.field.options.unshift({ id: "", label: "" });
  }
  if (
    !this.field.disallowedNull &&
    this.field.options.length > 1 &&
    this.field.options[0].id != "" &&
    this.field.options[0].label != ""
  ) {
    this.field.options.unshift({ id: "", label: "" });
  }
  if (this.field.options.length > 0) {
    this.inputField = IAS.Common.createDropDownCountryListWithPhoneNumberFromObjectArray(
      this.field.options,
      this.onDropdownCountryChangeCallback
    );
  }
};
DropdownCountryRenderer.prototype.getValue = function () {
  return this.inputField.phoneField.getValue();
};
DropdownCountryRenderer.prototype.setValue = function (c) {
  if (c) {
    if (c[0]) {
      this.inputField.phoneField.setValue(c[0]);
    }
    var b = this.inputField.inputField
      .find("i[id='contentDiv']")
      .find("div[id='imag']");
    if (b) {
      b.removeAttr("class");
      b.addClass(String.format("flag flag-{0}", c[1]));
      var a = this.inputField.inputField.find("i[id='contentDiv']");
    }
  }
};
DropdownCountryRenderer.prototype.renderOn = function (a) {
  var c = this;
  var b = $("<div id='phoneDiv'>");
  b.append(this.inputField.inputField);
  this.inputField.phoneField.countryCode.click(function (d) {
    showHidList(d);
  });
  a.append(b);
  return this;
};
DropdownCountryRenderer.prototype.getFields = function () {
  var b = this.inputField.phoneField;
  var a = [b.countryCode, b.cityCode, b.phoneNumber];
  return a;
};
DropdownRenderer = function (field, onChangeCallback, optDesignerMode) {
  this.field = field;
  this.designerMode = optDesignerMode;
  if (!this.field.className) {
    this.field.className = "";
  }
  if (this.field.optionsReference) {
    this.field.options = eval("(" + field.optionsReference + ")");
  }
  this.field.disallowedNull = field.disallowedNull || false;
  if (!(this.field.options instanceof Array)) {
    var optionsArray = [];
    for (var fieldKey in this.field.options) {
      optionsArray.push({ id: fieldKey, label: this.field.options[fieldKey] });
    }
    this.field.options = optionsArray;
  } else {
    if (this.field.options.length == 0) {
    } else {
      if (
        !this.field.options[0].hasOwnProperty("id") ||
        !this.field.options[0].hasOwnProperty("label")
      ) {
        throw "Error initializing dropdown. 'options' must either be an object or an array with elements 'id' and 'label'";
      }
    }
  }
  if (
    !this.field.hasOwnProperty("dontSort") ||
    (this.field.hasOwnProperty("dontSort") && !this.field.dontSort)
  ) {
    this.sortOptions();
  }
  if (
    !this.field.disallowedNull &&
    this.field.options.length > 1 &&
    this.field.options[0].id != "" &&
    this.field.options[0].label != ""
  ) {
    this.field.options.unshift({ id: "", label: "", secondaryLabel: "" });
  }
  this._createSelectElement(this.field.options);
  if (this.field.setFirstOptionSelected == undefined) {
    this.field.setFirstOptionSelected = true;
  }
  if (this.field.setFirstOptionSelected) {
    this._setFirstValue(this.field.options);
  }
  var me = this;
  this.onChangeCallback = function (caller, event) {
    if (me.field.options) {
      for (var i = 0; i < me.field.options.length; i++) {
        var option = me.field.options[i];
        if (option.id === me.inputField.val()) {
          option.selected = true;
        } else {
          option.selected = false;
        }
      }
    }
    if (onChangeCallback && onChangeCallback instanceof Function) {
      onChangeCallback(caller, event);
    }
  };
  BaseRendererConstructor(this);
  if (
    this.field.setFirstOptionSelected &&
    this.field.options &&
    this.field.options.length == 1
  ) {
    this.inputField.change();
  }
};
InheritFromAbstractRenderer(DropdownRenderer);
DropdownRenderer.prototype.getFireEvents = function () {
  return ["change"];
};
DropdownRenderer.prototype._createSelectElement = function (a) {
  this.inputField = IAS.Common.createListBoxFromObjectArray(
    a,
    "id",
    "label",
    this.inputField,
    "0",
    this.field.id,
    this.field.className,
    "secondaryLabel"
  );
};
DropdownRenderer.prototype.sortOptions = function () {
  var a = this.field.options.some(function (d, c, b) {
    return d.hasOwnProperty("secondaryLabel");
  });
  if (a && IAS.IsCurrentSelectedLanguageSameAsSecondaryLanguage()) {
    this.field.options.sort(function (c, d) {
      if (c.secondaryLabel < d.secondaryLabel) {
        return -1;
      }
      if (c.secondaryLabel > d.secondaryLabel) {
        return 1;
      }
      return 0;
    });
  } else {
    this.field.options.sort(function (c, d) {
      if (c.label < d.label) {
        return -1;
      }
      if (c.label > d.label) {
        return 1;
      }
      return 0;
    });
  }
};
DropdownRenderer.prototype.getSelectedValue = function () {
  var b = this.getID();
  var c = this.field.options;
  var d = null;
  if (c) {
    for (var a = 0; a < c.length; a++) {
      if (c[a].id == b) {
        d = c[a];
        break;
      }
    }
  }
  return d;
};
DropdownRenderer.prototype.getValue = function () {
  return this.getID();
};
DropdownRenderer.prototype.getID = function () {
  return this.inputField.val();
};
DropdownRenderer.prototype.getText = function () {
  return $(
    this.inputField.children()[this.inputField.prop("selectedIndex")]
  ).html();
};
DropdownRenderer.prototype.getIndex = function () {
  return this.inputField.get(0).selectedIndex;
};
DropdownRenderer.prototype.getAllOptions = function () {
  var a = $.extend(true, [], this.field.options);
  if (
    this.field.options.length > 0 &&
    this.field.options[0].id == "" &&
    this.field.options[0].label == ""
  ) {
    a.shift({ id: "", label: "", secondaryLabel: "" });
  }
  return a;
};
DropdownRenderer.prototype.setValue = function (b, a) {
  this.inputField.val(b);
  this.inputField.select2("val", b);
  a && this.inputField.change();
};
DropdownRenderer.prototype.appendValue = function (b) {
  if (!b.secondaryLabel) {
    b.secondaryLabel = "";
  }
  this.field.options.push(b);
  var a = IAS.GetPrimaryOrSecondaryName(b.label, b.secondaryLabel);
  this.inputField.append($("<option>").val(b.id).html(a));
};
DropdownRenderer.prototype.appendNewValues = function (a) {
  this.field.options = a;
  if (
    !this.field.hasOwnProperty("dontSort") ||
    (this.field.hasOwnProperty("dontSort") && !this.field.dontSort)
  ) {
    this.sortOptions();
  }
  if (
    !this.field.disallowedNull &&
    a.length > 1 &&
    a[0].id != "" &&
    a[0].label != ""
  ) {
    a.unshift({ id: "", label: "", secondaryLabel: "" });
  }
  this._createSelectElement(a);
  this.setValue("");
  this._setFirstValue(a);
};
DropdownRenderer.prototype.removeValues = function () {
  this.field.options = [];
  this._createSelectElement([]);
  return this;
};
DropdownRenderer.prototype.removeOption = function (a) {
  this.field.options.splice(a, 1);
  this.inputField.children()[a].remove();
};
DropdownRenderer.prototype.renderOn = function (b) {
  b.append(this.inputField);
  if (this.designerMode == true) {
    var a = new ButtonRenderer({ id: "addRemoveButton", label: "+/-" });
    a.renderOn(b);
    var c = this;
    a.click(function () {
      c.renderOnDesignMode();
    });
  } else {
    this.inputField.select2({
      dropdownAutoWidth: true,
      allowClear: true,
      placeholder:
        this.field.placeholder ||
        (this.field.label &&
          IAS.L("Select") + " " + this.field.label.toLowerCase()) ||
        IAS.L("Select an item"),
      minimumResultsForSearch: 8,
    });
  }
  return this;
};
DropdownRenderer.prototype.renderOnDesignMode = function () {
  var d = this;
  var b = $("<div>").append("<br>");
  var e = this.getAllOptions();
  var g = new IAS.TableRenderer(
    [
      { id: "selected", type: "checkbox" },
      {
        label: IAS.L("Option Label") + " / " + IAS.L("English Name"),
        id: "label",
        type: "text",
      },
      {
        label: IAS.L("Option Label") + " / " + IAS.L("Secondary Name"),
        id: "secondaryLabel",
        type: "text",
      },
    ],
    b,
    e
  );
  var a = new ButtonRenderer({ id: "addOptions", label: IAS.L("Add Option") });
  a.renderOn(b.append("<br><br>"));
  a.click(function () {
    var j = g.getRowsData();
    var h = IAS.Common.generateRandomID("option", e);
    j.push({ id: h, label: "", secondaryLabel: "" });
    g.setValues(j);
  });
  var c = new ButtonRenderer({
    id: "deleteOption",
    label: IAS.L("Delete Option"),
  });
  c.renderOn(b);
  c.click(function () {
    var h = g.getValues();
    var k = g.getRowsData();
    var l = false;
    for (var j = h.length - 1; j >= 0; j--) {
      if (h[j].selected == true) {
        l = true;
        h.splice(j, 1);
        k.splice(j, 1);
      }
    }
    if (l == true) {
      g.setValues(k);
    }
  });
  var e = IAS.popupOptions();
  e.okCallback = function () {
    var h = g.getValues();
    h = h.filter(function (l, k, j) {
      return l.id != "" && l.label != "";
    });
    d.appendNewValues(h);
    f.close();
  };
  var f = new IAS.popup(b, IAS.L("Options"), e);
};
DropdownRenderer.prototype.setAsReadOnly = DropdownRenderer.prototype.disableInputField = DropdownRenderer.prototype.readOnly = function (
  a
) {
  this.inputField.select2("readonly", a);
  this.inputField.prop("disabled", a);
  return this;
};
DropdownRenderer.prototype.resetOptionValue = function (b, a) {
  this.field.options[b].id = a;
  this.inputField.children().eq(b).val(a);
};
DropdownRenderer.prototype.setAttributes = function (a) {
  for (var b in a) {
    var c = b.toLowerCase();
    if (c === "readonly" || c === "disabled") {
      this.inputField.select2("readonly", a[b]);
    } else {
      this.setAttribute(b, a[b]);
    }
  }
  return this;
};
DropdownRenderer.prototype._setFirstValue = function (a) {
  if (a && a.length == 1) {
    this.setValue(a[0].id);
  }
};
DropdownRenderer.prototype.afterRender = function () {
  if (this.field.options.length == 1) {
    this.inputField.select2("val", this.field.options[0].id);
  }
};
EmailRenderer = function (a, c) {
  var b = this;
  this.field = a;
  this.onChangeCallback = c;
  this.inputField = $(
    "<input type='email' class='textError' placeholder='example@company.com'>"
  );
  this.inputField.keyup(function () {
    var d = $(this);
    if (
      b.getError() === IAS.L("Incorrect email format") ||
      d.val().length < 1
    ) {
      d.addClass("textError");
    } else {
      d.removeClass("textError");
    }
  });
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(EmailRenderer);
EmailRenderer.prototype.getError = function () {
  var c = this.base.getError.apply(this);
  if (c == null) {
    var e = this.getValue();
    if (e != "" && e != null) {
      var d = /[^@\-\.\w]|^[_@\.\-]|[\.]{2}|[@\.]{2}|(@)[^@]*\1/;
      var a = /@[\w\-]+\./;
      var b = /\.[a-zA-Z]{2,3}$/;
      if (e.search(d) != -1 || e.search(a) == -1 || e.search(b) == -1) {
        c = IAS.L("Incorrect email format");
      }
    }
  }
  return c;
};
FullNameRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputFields = {};
  this.inputFields.firstName = new TextRenderer({
    id: a.id + "first",
    label: IAS.L("First name"),
  });
  this.inputFields.middleName = new TextRenderer({
    id: a.id + "middle",
    label: IAS.L("Middle name"),
  });
  this.inputFields.thirdName = new TextRenderer({
    id: a.id + "third",
    label: IAS.L("Third name"),
  });
  this.inputFields.lastName = new TextRenderer({
    id: a.id + "last",
    label: IAS.L("Last name"),
  });
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(FullNameRenderer);
FullNameRenderer.prototype.getValue = function () {
  var b = this.inputFields;
  var a = b.firstName.getValue();
  var d = b.middleName.getValue();
  var e = b.thirdName.getValue();
  var c = b.lastName.getValue();
  return { first: a, middle: d, third: e, last: c };
};
FullNameRenderer.prototype.setValue = function (b) {
  var a = this.inputFields;
  a.firstName.setValue(b.first);
  a.middleName.setValue(b.middle);
  a.thirdName.setValue(b.third);
  a.lastName.setValue(b.last);
  return this;
};
FullNameRenderer.prototype.isEmpty = function () {
  var a = this.inputFields;
  var b = a.firstName.isEmpty() || a.lastName.isEmpty();
  return b;
};
FullNameRenderer.prototype.getError = function () {
  var a = this.inputFields;
  var c = [];
  if (a.firstName.isEmpty()) {
    c.push(IAS.L("first name"));
  }
  if (a.middleName.isEmpty()) {
    c.push(IAS.L("middle name"));
  }
  if (a.lastName.isEmpty()) {
    c.push(IAS.L("last name"));
  }
  var b =
    c.length > 0
      ? IAS.L("Please enter the") + " " + c.join(IAS.L(" and "))
      : null;
  return b;
};
FullNameRenderer.prototype.renderOn = function (a) {
  var b = $.createDiv(this.field.id + "container");
  var g = $('<ul class="nameRendererFieldList">');
  b.append(g);
  var e = {
    firstName: IAS.L("First name"),
    middleName: IAS.L("Middle name"),
    thirdName: IAS.L("Third name"),
    lastName: IAS.L("Last name"),
  };
  var c = this.inputFields;
  for (var d in c) {
    if (c.hasOwnProperty(d)) {
      var f = $("<li>");
      g.append(f);
      f.appendSpan(e[d]);
      c[d].renderOn(f);
    }
  }
  a.append(b);
  return this;
};
FullNameRenderer.prototype.getFields = function () {
  var a = [];
  var b = this.inputFields;
  for (var c in b) {
    a.push(b[c].inputField);
  }
  return a;
};
FullNameRenderer.prototype.getFullName = function () {
  var a = this.inputFields;
  var c = [];
  for (var b in a) {
    c.push(a[b].getValue());
  }
  return c.join(" ");
};
GeoRenderer = function (field, onChangeCallback, designMode) {
  this.field = field;
  this.onChangeCallback = onChangeCallback;
  this.mainDiv = $("<div>");
  this.geoDiv = $("<div>");
  this.levelDivs = {};
  this.labels = [];
  if (this.field.geosReference) {
    this.field.geos = eval("(" + field.geosReference + ")");
  }
  if (this.field.labelsReference) {
    this.field.labelsFromCountry = eval("(" + field.labelsReference + ")");
  }
  if (this.field.topLevelGeosReference) {
    this.field.topGeoParendIDs = eval("(" + field.topLevelGeosReference + ")");
  }
  this.geoData = this.field.geos;
  this.topGeoParendIDs = this.field.topGeoParendIDs;
  this.designMode = designMode;
  if (this.designMode == true) {
    this.countriesDropdown = IAS.NatOperatorCommon.createOperationalCountriesDropdown(
      this.geoData
    );
    this.countriesDropdown.change(IAS.bind(this, "renderCountryFirstLevelGeo"));
    this.mainDiv.append(this.countriesDropdown);
  }
  var me = this;
  this.onGeoChangeCallback = function (event) {
    if (onChangeCallback && onChangeCallback instanceof Function) {
      onChangeCallback(me, event);
    }
  };
  this.renderCountryFirstLevelGeo();
  this.mainDiv.append(this.geoDiv);
};
InheritFromAbstractRenderer(GeoRenderer);
GeoRenderer.prototype.redRow = function (a, b) {
  this.levelDivs = {};
  this.labels = [];
  $(this.mainDiv).children().remove();
  this.geoDiv = $("<div>");
  this.field.geos = a;
  this.field.labelsFromCountry = b;
  this.renderCountryFirstLevelGeo();
  this.mainDiv.append(this.geoDiv);
};
GeoRenderer.prototype.renderCountryFirstLevelGeo = function () {
  this.onGeoChangeCallback();
  var a = 0;
  this.topGeoParentID = 0;
  if (this.designMode == true) {
    a = this.countriesDropdown.val();
    this.labels = this.field.labelsFromCountry[a];
    this.topGeoParentID = this.topGeoParendIDs[a];
  } else {
    a = IAS.GetKeys(this.field.geos);
    this.labels = this.field.labelsFromCountry || [];
  }
  this.numberOfLevels = this.labels.length;
  for (var b = 0; b < this.numberOfLevels; b++) {
    this.levelDivs[b.toString()] && this.levelDivs[b.toString()].remove();
  }
  delete this.listBoxes;
  this.listBoxes = [];
  this.nextDivId = 0;
  delete this.geosCache;
  this.geosCache = {};
  if (this.geoData == undefined || this.geoData == null) {
    this.geoData = [];
  }
  this.fillGeosCache(this.geoData[a]);
  var d = [];
  var c = this.geoData[a] || [];
  var e = this.getPrimaryOrSecondaryGeoNameKey();
  for (var f = 0, g = c.length; f < g; f++) {
    d.push({ id: c[f].ID, label: c[f][e] });
  }
  this.geoDiv.append(this.RenderControls(this.topGeoParentID, d));
  if (this.designMode == true) {
    this.callGetParentChilds(0);
  }
};
GeoRenderer.prototype.getParentChilds = function (b) {
  var e = b.target.selectedIndex;
  if (e > -1) {
    var j = b.target[e].value;
    var f = parseInt($(b.target).parent().attr("geoDivIndex")) + 1;
    this.nextDivId = f;
    this.listBoxes.splice(f, this.listBoxes.length - f);
    for (var c = f; c <= this.numberOfLevels; c++) {
      this.levelDivs[c.toString()] && this.levelDivs[c.toString()].remove();
    }
    if (j) {
      var a = this.geosCache[j];
      if (this.numberOfLevels > this.nextDivId) {
        var d = this.getPrimaryOrSecondaryGeoNameKey();
        var h = [];
        for (var e = 0, g = a.length; e < g; e++) {
          h.push({ id: a[e].ID, label: a[e][d] });
        }
        this.geoDiv.append(this.RenderControls(j, h));
        this.numberOfLevels > this.nextDivId + 1 &&
          this.callGetParentChilds(this.nextDivId);
      }
    }
  }
};
GeoRenderer.prototype.RenderControls = function (d, f) {
  var c = "<div geoDivIndex =" + this.nextDivId + ">";
  var g = $(c).css({ "margin-top": "1em", "margin-bottom": "1em" });
  if (this.designMode || (f != null && f.length > 0)) {
    this.levelDivs[this.nextDivId] = g;
    g.append($("<label>").html(this.labels[this.nextDivId] + ": "));
    var e = new DropdownRenderer(
      { id: d, label: "", type: "dropdown", options: f },
      this.onGeoChangeCallback
    );
    e.inputField.change(IAS.bind(this, "getParentChilds"));
    this.listBoxes.push(e);
    e.renderOn(g);
  }
  if (this.designMode == true) {
    var a = $(
      "<button class='nonPopupButton' id=" + this.nextDivId.toString() + ">"
    )
      .text(IAS.L("Add item to this level"))
      .css("margin-left", "1em");
    a.click(IAS.bind(this, "addNewItemButton_Click"));
    g.append(a);
    if (f != null && f.length > 0) {
      var b = $(
        "<button class='nonPopupButton' id=" + this.nextDivId.toString() + ">"
      )
        .text(IAS.L("Delete selected item"))
        .css("margin-left", "1em");
      b.click(IAS.bind(this, "deleteButton_Click"));
      g.append(b);
    }
  }
  return g;
};
GeoRenderer.prototype.fillGeosCache = function (a) {
  if (a == undefined || a.length < 1) {
    return;
  }
  for (var b = 0, c = a.length; b < c; b++) {
    this.geosCache[a[b].ID] = a[b].Children;
    this.fillGeosCache(a[b].Children);
  }
};
GeoRenderer.prototype.addNewItem = function (g, f, b) {
  var h = false;
  if (f && b) {
    var c = this;
    var a = this.countriesDropdown.val();
    var e = this.listBoxes[g.id].inputField[0].id;
    var d = { pName: f, lName: b, PID: e, CID: a };
    IAS.post("/NationalOperator/AddGeography", d, function (m) {
      if (m.id && m.id != 0) {
        var k = c.createNewGeoObject(a, e, f, b, m.id);
        if (e != c.topGeoParentID) {
          c.geosCache[e].push(k);
        }
        c.geosCache[k.ID] = [];
        c.listBoxes[g.id].appendValue({ id: k.ID, label: k.Name });
        c.listBoxes[g.id].setValue(k.ID);
        if (g.id < c.numberOfLevels - 1) {
          c.callGetParentChilds(g.id);
        }
        var l = $(g).parent();
        if (l.children().length < 4) {
          var j = $(
            "<button class='nonPopupButton' id=" + g.id.toString() + ">"
          )
            .text(IAS.L("Delete selected item"))
            .css("margin-left", "1em");
          j.click(IAS.bind(c, "deleteButton_Click"));
          l.append(j);
        }
      }
      IAS.popupMsg(m.message);
    });
    h = true;
  } else {
    IAS.popupMsg(
      IAS.L("Enter both the primary and localized names of the new item")
    );
  }
  return h;
};
GeoRenderer.prototype.deleteItem = function (g, c, b) {
  var a = this;
  var f = this.listBoxes[g.id];
  var d = f.inputField[0].selectedIndex;
  var e = {};
  e.iid = c;
  e.newParent = b;
  IAS.post("/NationalOperator/DeleteLevelItem", e, function (n) {
    if (!n.Error) {
      if (g.id < a.numberOfLevels - 1) {
        for (var k = 0, l = a.geosCache[c].length; k < l; k++) {
          !a.geosCache[b] && (a.geosCache[b] = []);
          a.geosCache[b].push(a.geosCache[c][k]);
        }
        a.listBoxes[parseInt(g.id) + 1].field.id = b;
        a.callGetParentChilds(g.id);
      } else {
        var h = d;
        var j = f.inputField[0][0].label;
        if (j == "") {
          h = h - 1;
        }
        a.geosCache[a.listBoxes[parseInt(g.id)].field.id].splice(h, 1);
      }
      delete a.geosCache[c];
      f.removeOption(d);
      f.setValue(b);
      if (f.field.options.length == 2 && f.field.options[0].id == "") {
        f.removeOption(0);
      }
      if (
        (f.inputField[0].length == 1 && f.getValue() == "") ||
        f.inputField[0].length == 0
      ) {
        var m = $(g).parent();
        m.children()[3].remove();
      }
      f.inputField.change();
    }
    IAS.popupMsg(n.Message);
  });
};
GeoRenderer.prototype.callGetParentChilds = function (b) {
  var a = {};
  this.listBoxes[b];
  a.target = this.listBoxes[b].inputField[0];
  this.getParentChilds(a);
};
GeoRenderer.prototype.createNewGeoObject = function (a, e, f, c, b) {
  var d = {};
  d.Children = [];
  d.CountryID = a;
  d.ID = b;
  d.LocalizedName = c;
  d.Name = f;
  d.ParentID = e;
  return d;
};
GeoRenderer.prototype.addNewItemButton_Click = function (b) {
  var f = this;
  var j = $("<div>");
  var l = $("<label>").text(IAS.L("New Item Primary Name") + ":");
  var k = $("<input type='text' id='name' class='text'>").css({
    "margin-left": "2px",
  });
  var e = $("<label>").text(IAS.L("New Item Localized Name") + ":");
  var d = $("<input type='text' id='name' class='text'>").css({
    "margin-left": "2px",
  });
  var m = { cells: [l, k] };
  var n = { cells: [e, d] };
  var c = new IAS.TableLayoutRenderer([m, n], j);
  var g = {
    label: IAS.L("Add Item"),
    bindFunction: function () {
      var o = f.addNewItem(b.target, k.val(), d.val());
      if (o) {
        a.close();
      }
    },
  };
  var h = {
    label: IAS.L("Cancel"),
    bindFunction: function () {
      a.close();
    },
  };
  buttons = [g, h];
  var a = IAS.popup(j, IAS.L("Add new item"), null, buttons);
};
GeoRenderer.prototype.deleteButton_Click = function (l) {
  var e = this;
  var k = this.listBoxes[l.target.id];
  var c = k.inputField[0].selectedIndex;
  var b = k.getValue();
  if (b) {
    var f = $("<div>");
    var g = k.field.options.slice(0);
    g.splice(c, 1);
    if (g[0] && !g[0].label) {
      g.splice(0, 1);
    }
    var j = new DropdownRenderer(
      { id: k.field.id, label: "", type: "dropdown", options: g },
      this.onGeoChangeCallback
    );
    var d = $("<label>");
    d.text(
      String.format(
        IAS.L("Select new {0} for related centers and personnels:"),
        this.labels[l.target.id]
      )
    );
    f.append(d);
    j.renderOn(f);
    f.append($("<hr>"));
    f.append($("<label>").text(IAS.L("Proceed to delete geography item?")));
    var m = {
      label: IAS.L("Yes"),
      bindFunction: function () {
        var n = 0;
        if (g.length < 1) {
          n = k.field.id;
        } else {
          if (l.target.id < e.numberOfLevels) {
            n = j.getValue();
          }
        }
        e.deleteItem(l.target, b, n);
        a.close();
      },
    };
    var h = {
      label: IAS.L("No"),
      bindFunction: function () {
        a.close();
      },
    };
    var a = IAS.popup(f, IAS.L("Delete Item"), null, [m, h]);
  } else {
    IAS.popupMsg(IAS.L("Select an item to delete"));
  }
};
GeoRenderer.prototype.renderOn = function (a) {
  a.append(this.mainDiv);
};
GeoRenderer.prototype.getValue = function () {
  var c = null;
  var d = [];
  var b = {};
  for (var a = 0; a < this.listBoxes.length; a++) {
    d.push(this.listBoxes[a].getValue());
  }
  if (this.designMode == true) {
    b[this.countriesDropdown.val()] = d;
    c = b;
  } else {
    c = d;
  }
  return c;
};
GeoRenderer.prototype.setValue = function (d) {
  if (!d || this.listBoxes.length == 0) {
    return;
  }
  var a = IAS.GetKeys(d);
  if (this.designMode == true) {
    this.countriesDropdown.val(a);
    this.renderCountryFirstLevelGeo();
  }
  var b = d[a];
  if (this.listBoxes[0] == undefined) {
    this.renderCountryFirstLevelGeo();
  }
  this.listBoxes[0].setValue(b[0]);
  for (var c = 1; c < b.length; c++) {
    if (this.listBoxes[c] == undefined) {
      this.callGetParentChilds(c - 1);
    } else {
      this.listBoxes.splice(c, 1);
      this.callGetParentChilds(c - 1);
    }
    this.listBoxes[c].setValue(b[c]);
  }
};
GeoRenderer.prototype.getFields = function () {
  var a = [];
  this.listBoxes.forEach(function (b) {
    a.push(b.inputField);
  });
  return a;
};
GeoRenderer.prototype.getPrimaryOrSecondaryGeoNameKey = function () {
  return IAS.GetPrimaryOrSecondaryName("Name", "LocalizedName");
};
HiddenRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<input type='hidden'>");
  if (a.id) {
    this.inputField.setID(this.field.id);
  } else {
    this.inputField.setID("hidden");
  }
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(HiddenRenderer);
HiddenRenderer.prototype.isEmpty = function () {
  return false;
};
HtmlEditorRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<textarea cols=30 rows=8/>");
  this.inputField.setID(this.field.id);
  this.inputField.attr("placeholder", this.field.placeholder || "");
  if (this.field.size) {
    this.inputField.attr("rows", this.field.size.rows);
    this.inputField.attr("cols", this.field.size.cols);
  }
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(HtmlEditorRenderer);
HtmlEditorRenderer.prototype.renderOn = function (a) {
  this.inputField.attr(
    "style",
    "overflow:auto;resize:none;width:98%;height:100%"
  );
  a.append(this.inputField);
  if (this.field.status != null && this.field.status != "undifiend") {
    this.inputField.jqte({ status: this.field.status });
  } else {
    this.inputField.jqte();
  }
};
HtmlEditorRenderer.prototype.setValue = function (f) {
  var d = 0;
  if (f) {
    var a = document.createElement("div");
    a.innerHTML = f;
    f = a.childNodes[0].nodeValue;
    var c = this.inputField;
    if (f && f.length > 1) {
      c.removeClass("textError");
    }
    try {
      var d = $(f);
    } catch (b) {}
    if (d.length > 0) {
      f = d;
    }
  }
  this.inputField.jqteVal(f);
};
HtmlEditorRenderer.prototype.getValue = function () {
  return $.createDiv().text(this.inputField.val()).html();
};
HtmlEditorRenderer.prototype.HideHtmlEditorToolBar = function () {
  var a = this.inputField;
  var b = false;
  a.jqte({ status: b });
};
HtmlEditorRenderer.prototype.fixInputFieldInsideTd = function () {
  var b = $(this.inputField).parent().parent();
  var a = $(this.inputField).parent().parent().parent();
  b.css({ position: "absolute", width: "99%" });
  a.css({ position: "relative", height: "300px", width: "99%" });
};
ImageRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.imageContainer = $("<div>");
  this.inputField = $("<img>").addClass("image");
  this.setImageAttribute();
  this.inputField.attr(
    "alt",
    this.field.alt || IAS.L("There is no image uploaded")
  );
  this.inputField.css("border", this.field.border || "1px solid #ccc");
  if (this.field.width) {
    this.inputField.css("width", this.field.width);
  }
  if (this.field.height) {
    this.inputField.css("height", this.field.height);
  }
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(ImageRenderer);
ImageRenderer.prototype.setValue = function (a) {
  this.field.src = a;
  this.setImageAttribute();
};
ImageRenderer.prototype.setFile = function (a) {
  this.field.src = "/Renderer/DownloadFile/?fileID=" + a;
  this.field.id = a;
  this.setImageAttribute();
};
ImageRenderer.prototype.setImageAttribute = function () {
  this.inputField.attr({
    id: (this.field.id && this.field.src) || "0",
    src: this.field.src || "/css/emptyTemplete.png",
  });
  this.renderImage();
};
ImageRenderer.prototype.resetImage = function () {
  this.setValue("/css/emptyTemplete.png");
};
ImageRenderer.prototype.renderImage = function () {
  this.imageContainer.empty();
  if (this.field.zoom) {
    var a = $("<a href='#'>").append(this.inputField);
    a.click(IAS.bind(this, "zoomTheImage"));
    this.imageContainer.append(a);
  } else {
    this.imageContainer.append(this.inputField);
  }
};
ImageRenderer.prototype.renderOn = function (a) {
  a.append(this.imageContainer);
  return this;
};
ImageRenderer.prototype.zoomTheImage = function () {
  var d = $("<div>");
  var b = jQuery.extend(true, {}, this.field);
  if (b.hasOwnProperty("zoom")) {
    delete b.zoom;
  }
  if (b.hasOwnProperty("width")) {
    delete b.width;
  }
  if (b.hasOwnProperty("height")) {
    delete b.height;
  }
  var a = new ImageRenderer(b);
  a.renderOn(d);
  var e = IAS.popupOptions();
  e.onPopupOpenCallback = function () {
    var g = $(window).outerWidth() / 1.06;
    var f = $(window).outerHeight() / 1.03;
    if ($(a.inputField).width() > g) {
      a.inputField.css("width", g);
    }
    if ($(a.inputField).height() > f) {
      a.inputField.css("height", f);
    }
  };
  var c = new IAS.popup(d, "", e);
};
IntegerRangeRenderer = function (a, d) {
  var c = this;
  this.field = a;
  this.onChangeCallback = d;
  this.removeValueButton = $('<i class="dateRangeRemoveValueButton">').click(
    function (f) {
      c.removeValues();
      d(c);
    }
  );
  var b = $.extend({}, true, a);
  b.id = a.id + "From";
  b.name = a.name + " From";
  this.inputFrom = new IntegerRenderer(b);
  var e = $.extend({}, true, a);
  e.id = a.id + "To";
  e.name = a.name + " To";
  this.inputTo = new IntegerRenderer(e);
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(IntegerRangeRenderer);
IntegerRangeRenderer.prototype.getValue = function () {
  var a = this.inputFrom.getValue();
  var b = this.inputTo.getValue();
  if (!b && a) {
    b = 0;
  }
  if (!a && b) {
    a = 0;
  }
  if (a && b) {
    return { from: a, to: b };
  } else {
    return null;
  }
};
IntegerRangeRenderer.prototype.setValue = function (a) {
  if (a.from) {
    this.inputFrom.setValue(a.from);
  }
  if (a.to) {
    this.inputTo.setValue(a.to);
  }
};
IntegerRangeRenderer.prototype.getError = function () {
  var d = this.getValue();
  var b = d.from;
  var c = d.to;
  var a = null;
  if (!b && !c) {
    a = IAS.L("Fill at least one field");
  } else {
    if (b > c) {
      a = IAS.L("Incorrect date format");
    }
  }
  return a;
};
IntegerRangeRenderer.prototype.setAttribute = function (a, b) {
  this.inputFrom.setAttribute(a, b);
  this.inputTo.setAttribute(a, b);
};
IntegerRangeRenderer.prototype.renderOn = function (a) {
  var b = $.createDiv(null, "dateRangeDiv");
  b.append($("<span>").html(IAS.L("from") + ": "));
  b.append(this.inputFrom.getContainer());
  b.append(
    $("<span>")
      .css("margin-left", "5px")
      .html(IAS.L("to") + ": ")
  );
  b.append(this.inputTo.getContainer());
  b.append(this.removeValueButton);
  a.append(b);
};
IntegerRangeRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.inputFrom);
  a.push(this.inputTo);
  return a;
};
IntegerRangeRenderer.prototype.removeValues = function () {
  this.inputFrom.setValue("");
  this.inputTo.setValue("");
};
IntegerRangeRenderer.prototype.change = function (a) {
  if (a instanceof Function) {
    this.inputFrom.inputField.change(a);
    this.inputTo.inputField.change(a);
  }
};
IntegerRangeRenderer.prototype.isReadOnlyOrDisabled = function () {
  return this.disabled;
};
IntegerRangeRenderer.prototype.readOnly = function (a) {
  this.setAttribute("readOnly", a);
  this.disabled = a;
  return this;
};
IntegerRangeRenderer.prototype.disableInputField = function (a) {
  this.setAttribute("disabled", a);
  this.disabled = a;
  return this;
};
IntegerRenderer = function (b, d) {
  this.field = b;
  this.onChangeCallback = d;
  this.signKeyCode = [109, 189];
  this.inputField = $("<input type='text'>");
  this.inputField.setID(this.field.id);
  this.field.min = this.field.min || 0;
  this.field.max = this.field.max || 9999999;
  this.allowNegative = this.field.min < 0;
  var c = this;
  BaseRendererConstructor(this);
  var a = function (e) {
    return substringCountInString(e, "-") == (c.allowNegative ? 1 : 0);
  };
  this.inputField.keyup(function (f) {
    if (this.value && this.value.length > 2) {
      var g = getNumberFromValue(this.value);
      var h;
      if (g > 0) {
        h = formatNumber(g);
      } else {
        h = formatNumber(g * -1);
        h = "-" + h;
      }
      if (c.inputField.val() != h) {
        c.setValue(h);
      }
    }
  });
  this.inputField.keydown(function (g) {
    var f = true;
    if (
      $.inArray(g.keyCode, [46, 8, 27, 13, 9]) !== -1 ||
      (g.keyCode == 65 && g.ctrlKey === true) ||
      (g.keyCode >= 35 && g.keyCode <= 39)
    ) {
      c.lastValue = this.value;
      f = false;
    }
    if (f) {
      var h = this.min.charCodeAt(0) - 1;
      if (
        ((g.shiftKey || g.keyCode < 48 || g.keyCode > 57) &&
          (g.keyCode < 96 || g.keyCode > 105)) ||
        ((g.which == h || g.which == 48 + h) &&
          (this.value.length < 1 || this.value[0] == "0"))
      ) {
        if (c.allowNegative && $.inArray(g.keyCode, c.signKeyCode) !== -1) {
          if (a(this.value)) {
            g.preventDefault();
          } else {
            c.lastValue = this.value;
          }
        } else {
          g.preventDefault();
        }
      } else {
        c.lastValue = this.value;
      }
    }
  });
};
InheritFromAbstractRenderer(IntegerRenderer);
IntegerRenderer.prototype.getValue = function () {
  return getNumberFromValue(this.inputField.val());
};
IntegerRenderer.prototype.getText = function () {
  return this.inputField.val();
};
IntegerRenderer.prototype.isEmpty = function () {
  return this.inputField.val() == "";
};
IntegerRenderer.prototype.getError = function () {
  var b = this.getValue();
  var a = null;
  if (!b) {
    a = IAS.L("Enter The value please");
  } else {
    if (b < this.field.min) {
      a = "Enter a value larger than " + (this.field.min - 1);
    } else {
      if (b > this.field.max) {
        a = "Enter a value smaller than " + (this.field.max + 1);
      }
    }
  }
  return a;
};
function getNumberFromValue(b) {
  if (substringCountInString(b, "-") == 1) {
    b = "-" + b.replace("-", "");
  }
  var a = parseInt(b.replace(/,/g, ""));
  return isNumber(a) ? a : "";
}
function substringCountInString(b, a) {
  return (b.match(new RegExp(a, "g")) || []).length;
}
function formatNumber(a) {
  return a.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
}
ListRenderer = function (b, e, g, j, h, f) {
  this.field = b;
  this.onChangeCallback = e;
  this.onListChangeCallback = function (m) {
    e(d, event, m);
  };
  var c;
  this.designerMode = g;
  this.isScrollable = j || true;
  this.fieldsReadOnly = h || false;
  this.customizableUploadFileType = f || null;
  var l = this.field.template;
  if (!l) {
    this.field.template = { fields: [] };
  }
  c = this.field.template.fields || [];
  if (!this.designerMode) {
    if (this.field.value) {
      this.fieldListValue = this.field.value.fieldsList;
    }
    if (!this.fieldListValue) {
      this.field.value = { fieldsList: [] };
    }
  }
  this.uiRendererFormData = { fields: c };
  this.popupDiv = $("<div>");
  this.fieldRenderer = new UIRenderer(this.uiRendererFormData, this.popupDiv);
  var d = this;
  var k = null;
  if (g) {
    this.tableRenderer = new IAS.TableRenderer(
      this.field.template.fields,
      null,
      k,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      this.customizableUploadFileType
    );
  } else {
    if (
      this.field.template.fields[1] &&
      this.field.template.fields[1].id != "selectRow"
    ) {
      var a = null;
      if (this.field.template.fields[1].id != "deleteRow") {
        var a = { id: "deleteRow", type: "checkbox", lable: "Select" };
      }
      k = IAS.TableRenderer.fromFieldsListToTableRendererFormat(
        this.field.value
      );
      this.tableRenderer = new IAS.TableRenderer(
        this.field.template.fields,
        null,
        k,
        null,
        null,
        null,
        null,
        a,
        null,
        null,
        this.fieldsReadOnly,
        this.onListChangeCallback,
        null,
        this.customizableUploadFileType
      );
    }
  }
  if (this.tableRenderer) {
    this.tableRenderer.resizableColumns();
    this.tableRenderer.table.css("white-space", "nowrap");
    this.tableRenderer.table.find("td").css("white-space", "nowrap");
  }
  this.customList = IAS.createListControl([], {
    render: function (q, p) {
      var u = $("<table id= tablelist>");
      var s = d.fieldRenderer;
      if (this.items.fieldsList.length == 0) {
        for (var o in d.fieldRenderer.renderers) {
          d.fieldRenderer.setValues(q);
          var r = d.fieldRenderer.renderers[o].field.label;
          var n = d.fieldRenderer.renderers[o].getHumanValue();
          u.append(
            $("<tr>").append($("<td>").append(r)).append($("<td>").append(n))
          );
        }
      } else {
        var m = this.items.fieldsList[q].fields;
      }
      for (var o in m) {
        var r = m[o].label;
        var n = m[o].value;
        if (n == "") {
          d.fieldRenderer.setValues(m);
          n = d.fieldRenderer.renderers[m[o].id].getHumanValue();
        }
        var t = $("<table>");
        var v = $("<thead>");
        var w = $("<tr>");
        t.append(v).append(w);
        if (m[o].type == "list") {
          for (var A in n) {
            var z = $("<tr>");
            for (var B in n[A]) {
              for (var p in n[A][B].fields) {
                w.append($("<td>")).append(n[A][B].fields[p].label);
                z.append($("<td>")).append(n[A][B].fields[p].value);
              }
              t.append(z);
            }
          }
          n = t;
        }
        u.append(
          $("<tr>").append($("<td>").append(r)).append($("<td>").append(n))
        );
      }
      return u;
    },
    actions: [
      [
        $("<button>").html("delete"),
        function (n, m) {
          this.items.fieldsList.splice(m, 1);
          this.redraw();
        },
      ],
      [
        $("<button>").html("edit"),
        function (o, n) {
          d._fieldIndex = n;
          this.popupUpdate = $("<div>");
          var m = { fields: o };
          d.updateFieldRenderer = new UIRenderer(m, this.popupUpdate);
          d.popup = IAS.popup(
            this.popupUpdate,
            d.field.label,
            IAS.bind(d, "onPopupOKPressed")
          );
        },
      ],
    ],
  });
  if (!g) {
    this.addItemButton = new ButtonRenderer({ id: "add", label: "+" });
    this.addItemButton.click(IAS.bind(this, "onAddButtonPressed"));
  }
};
InheritFromAbstractRenderer(ListRenderer);
ListRenderer.prototype.renderOn = function (b, f) {
  var d = $.createDiv();
  if (!f) {
    $(b).css({ position: "relative", height: "200px", width: "100%" });
    $(d).css({ position: "absolute", width: "100%" });
  }
  if (this.designerMode == true) {
    var a = new ButtonRenderer({ id: "add", label: "+" });
    a.renderOn(d);
    var e = this;
    a.click(function () {
      e.renderOnDesignMode();
    });
  } else {
    if (this.isScrollable == true) {
      d.addClass("listTable");
      d.resizable();
    }
    if (this.tableRenderer) {
      var e = this;
      this.tableRenderer.renderOn(d);
      if (this.fieldsReadOnly != true) {
        var a = new ButtonRenderer({ id: "addButton", label: IAS.L("Add") });
        a.renderOn(d);
        var c = new ButtonRenderer({
          id: "deleteButton",
          label: IAS.L("Delete"),
        });
        c.renderOn(d);
        a.click(function () {
          e.tableRenderer.addEmptyRow();
          if (this.onListChangeCallback) {
            this.click(this.onListChangeCallback);
          }
        });
        c.click(function () {
          var g = e.tableRenderer.getValues() || [];
          var j = e.tableRenderer.getRowsData();
          var k = false;
          for (var h = g.length - 1; h >= 0; h--) {
            if (g[h].deleteRow == true) {
              k = true;
              g.splice(h, 1);
              j.splice(h, 1);
            }
          }
          if (k == true) {
            e.tableRenderer.setValues(j);
          }
        });
      }
      if (this.tableRenderer.getRowsData().length == 0) {
        this.tableRenderer.addEmptyRow();
      }
    }
  }
  b.append(d);
};
ListRenderer.prototype.renderOnDesignMode = function () {
  var a = $("<div>");
  var e = this.field.template.fields || [];
  var c = new UIRenderer(
    { categories: [{ category_label: IAS.L("List Fields"), fields: e }] },
    a,
    true
  );
  var d = this;
  var b = IAS.popup(a, IAS.L("List Fields"), function () {
    d.field.template.fields = c.getFields();
    b.close();
  });
};
ListRenderer.prototype.setValue = function (a) {
  this.field.value = a;
  this.fieldListValue = this.field.value.fieldsList;
  this.tableRenderer.setValues(
    IAS.TableRenderer.fromFieldsListToTableRendererFormat(this.field.value)
  );
  this.customList.items = a;
  this.customList.redraw();
  IAS.listValues = IAS.listValues || {};
  IAS.listValues[this.field.id] = a;
  IAS.listRenderers = IAS.listRenderers || {};
  IAS.listRenderers[this.field.id] = this;
};
ListRenderer.prototype.getValue = function () {
  return this.tableRenderer.getValue();
};
ListRenderer.prototype.isEmpty = function () {
  return this.customList.items.length == 0;
};
ListRenderer.prototype.onAddButtonPressed = function table() {
  this.popupDiv = $("<div>");
  this.listFields = jQuery.extend(true, {}, this.uiRendererFormData);
  this.fieldsRenderer = new UIRenderer(this.listFields, this.popupDiv);
  this._fieldIndex = -1;
  this.popup = IAS.popup(
    this.popupDiv,
    this.field.label,
    IAS.bind(this, "onPopupOKPressed")
  );
};
ListRenderer.prototype.onPopupOKPressed = function () {
  var b = this._fieldIndex;
  var a = this;
  if (b >= 0) {
    this.customList.items.fieldsList[
      a._fieldIndex
    ].fields = a.updateFieldRenderer.getFieldsWithThierValue();
  } else {
    this.customList.items.fieldsList.push({
      fields: this.fieldsRenderer.getFieldsWithThierValue(),
    });
  }
  this.customList.redraw();
  this.popup.close();
};
ListRenderer.prototype.getFields = function () {
  var a = [];
  return a;
};
ListRenderer.prototype.afterRender = function () {
  var a = this.tableRenderer.table.parent();
  var b = a.parent().parent();
  var c = b.css("width");
  if (c && c != "0px" && c != "0%" && c != "55%") {
    a.css("width", c);
  }
};
ModulesRenderer = function (a, c, f, d, e) {
  this.field = a;
  this.onChangeCallback = c;
  this.designerMode = f;
  this.centerId = d;
  this.checkboxList = e;
  if (a.counter) {
    this.field.counter = a.counter;
  } else {
    this.field.counter = 1;
  }
  var b = this;
  this.onModulesChangeCallback = function (g) {
    if (c && c instanceof Function) {
      c(b, g);
    }
  };
};
InheritFromAbstractRenderer(ModulesRenderer);
ModulesRenderer.prototype.getValue = function () {
  var a = null;
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.getValue();
  }
  return a;
};
ModulesRenderer.prototype.renderOn = function (a) {
  var b = this;
  if (this.designerMode == true) {
    this.getAllModules(a);
  } else {
    if (this.centerId) {
      if (this.checkboxList == true) {
        var c = { centerID: this.centerId };
        IAS.post("/Renderer/GetAllEnableCenterModuels", c, function (f) {
          var j = $("<ul>");
          for (i = 0; i < f.length; i++) {
            var h = f[i].label;
            var e = $("<li>");
            var g = j.append(e.append(IAS.L(h)));
          }
          var d = IAS.createCollapsDiv(g, b.field.label);
          a.append(d);
        });
      } else {
        if (this.checkboxList == false) {
          if (this.centerId) {
            var b = this;
            var c = { centerID: this.centerId };
            IAS.post("/Renderer/GetAllCenterModules", c, function (g) {
              b.field.checkBoxOptions = g;
              b.checkboxListRenderer = new CheckboxListRenderer(
                b.field,
                b.onModulesChangeCallback
              );
              var f = $("<div>");
              var e = $("<div>");
              b.checkboxListRenderer.renderOn(e);
              var d = IAS.createCollapsDiv(e, IAS.L(b.field.label));
              a.append(d);
              b.setCheckboxListErrorMarker(d);
            });
          } else {
            b.checkboxListRenderer = new CheckboxListRenderer(
              b.field,
              b.onModulesChangeCallback,
              false,
              null,
              true
            );
            b.checkboxListRenderer.renderOn(a);
          }
        } else {
          b.checkboxListRenderer = new CheckboxListRenderer(
            b.field,
            b.onModulesChangeCallback,
            false,
            null,
            true
          );
          b.checkboxListRenderer.renderOn(a);
        }
      }
    } else {
      if (this.checkboxList == false) {
        if (this.centerId) {
          var b = this;
          var c = { centerID: this.centerId };
          IAS.post("/Renderer/GetAllCenterModules", c, function (g) {
            b.field.checkBoxOptions = g;
            b.checkboxListRenderer = new CheckboxListRenderer(
              b.field,
              b.onModulesChangeCallback
            );
            var e = $("<div>");
            var d = $("<div>");
            b.checkboxListRenderer.renderOn(d);
            var f = IAS.createCollapsDiv(d, IAS.L(b.field.label));
            a.append(f);
            b.setCheckboxListErrorMarker(f);
          });
        } else {
          b.checkboxListRenderer = new CheckboxListRenderer(
            b.field,
            b.onModulesChangeCallback,
            false,
            null,
            true
          );
          b.checkboxListRenderer.renderOn(a);
        }
      } else {
        b.checkboxListRenderer = new CheckboxListRenderer(
          b.field,
          b.onModulesChangeCallback,
          false,
          null,
          true
        );
        b.checkboxListRenderer.renderOn(a);
      }
    }
  }
};
ModulesRenderer.prototype.setValue = function (a) {
  if (a) {
    if (this.checkboxListRenderer) {
      this.checkboxListRenderer.setValue(a);
    }
  }
};
ModulesRenderer.prototype.getAllModules = function (a) {
  var b = this;
  $.post("/Renderer/GetAllModules", {}, function (c) {
    b.field.checkBoxOptions = c;
    b.checkboxListRenderer = new CheckboxListRenderer(
      b.field,
      b.onModulesChangeCallback,
      false,
      null,
      true
    );
    b.checkboxListRenderer.renderOn(a);
  });
};
ModulesRenderer.prototype.getFields = function () {
  var a = [];
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.getFields();
  }
  return a;
};
ModulesRenderer.prototype.getlistValue = function () {
  var a = [];
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.getlistValue();
  }
  return a;
};
ModulesRenderer.prototype.isEmpty = function () {
  var a = false;
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.isEmpty();
  }
  return a;
};
ModulesRenderer.prototype.setCheckboxListErrorMarker = function (a) {
  if (this.checkboxListRenderer) {
    this.errorMarker = $("<i class='inputFieldError'>");
    this.fieldDiv = $("<div>");
    this.fieldDiv.append(this.errorMarker);
    a.append(this.fieldDiv);
  }
};
ModulesRenderer.prototype.validateAndCheckErrors = function () {
  var b = false;
  if (this.checkboxListRenderer) {
    this.errorMarker.removeClass("inputFieldErrorVisible");
    var c = this.isEmpty();
    if (c) {
      var a = " * " + IAS.L("Required");
      this.errorMarker.addClass("inputFieldErrorVisible");
      this.errorMarker.iasTooltip(a, "#be4b49");
      b = true;
    }
  }
  return b;
};
ModulesRenderer.prototype.removeErrorMarker = function () {
  if (this.checkboxListRenderer) {
    this.errorMarker.removeClass("inputFieldErrorVisible");
  }
};
ModulesRenderer.prototype.getFields = function () {
  if (this.checkboxListRenderer) {
    return this.checkboxListRenderer.getFields();
  } else {
    return [];
  }
};
AssessmentsRenderer = function (a, c, f, d, e) {
  this.field = a;
  this.onChangeCallback = c;
  this.designerMode = f;
  this.centerId = d;
  this.checkboxList = e;
  if (a.counter) {
    this.field.counter = a.counter;
  } else {
    this.field.counter = 1;
  }
  var b = this;
  this.onAssessmentChangeCallback = function (g) {
    if (c && c instanceof Function) {
      c(b, g);
    }
  };
};
InheritFromAbstractRenderer(AssessmentsRenderer);
AssessmentsRenderer.prototype.getValue = function () {
  var a = null;
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.getValue();
  }
  return a;
};
AssessmentsRenderer.prototype.renderOn = function (a) {
  var b = this;
  if (this.designerMode == true) {
    this.getAllAssessmets(a);
  } else {
    if (this.centerId) {
      if (this.checkboxList == true) {
        var c = { centerID: this.centerId };
        IAS.post("/Renderer/GetAllEnableCenterAssessment", c, function (f) {
          var j = $("<ul>");
          for (i = 0; i < f.length; i++) {
            var h = f[i].label;
            var e = $("<li>");
            var g = j.append(e.append(IAS.L(h)));
          }
          var d = IAS.createCollapsDiv(g, b.field.label);
          a.append(d);
        });
      } else {
        if (this.checkboxList == false) {
          if (this.centerId) {
            var b = this;
            var c = { centerID: this.centerId };
            IAS.post("/Renderer/GetAllCenterAssessments", c, function (g) {
              b.field.checkBoxOptions = g;
              b.checkboxListRenderer = new CheckboxListRenderer(
                b.field,
                b.onAssessmentChangeCallback
              );
              var f = $("<div>");
              var e = $("<div>");
              b.checkboxListRenderer.renderOn(e);
              var d = IAS.createCollapsDiv(e, IAS.L(b.field.label));
              a.append(d);
              b.setCheckboxListErrorMarker(d);
            });
          } else {
            b.checkboxListRenderer = new CheckboxListRenderer(
              b.field,
              b.onAssessmentChangeCallback,
              false,
              null,
              false
            );
            b.checkboxListRenderer.renderOn(a);
          }
        } else {
          b.checkboxListRenderer = new CheckboxListRenderer(
            b.field,
            b.onAssessmentChangeCallback,
            false,
            null,
            false
          );
          b.checkboxListRenderer.renderOn(a);
        }
      }
    } else {
      if (this.checkboxList == false) {
        if (this.centerId) {
          var b = this;
          var c = { centerID: this.centerId };
          IAS.post("/Renderer/GetAllCenterAssessments", c, function (g) {
            b.field.checkBoxOptions = g;
            b.checkboxListRenderer = new CheckboxListRenderer(
              b.field,
              b.onAssessmentChangeCallback
            );
            var e = $("<div>");
            var d = $("<div>");
            b.checkboxListRenderer.renderOn(d);
            var f = IAS.createCollapsDiv(d, IAS.L(b.field.label));
            a.append(f);
            b.setCheckboxListErrorMarker(f);
          });
        } else {
          b.checkboxListRenderer = new CheckboxListRenderer(
            b.field,
            b.onAssessmentChangeCallback,
            false,
            null,
            false
          );
          b.checkboxListRenderer.renderOn(a);
        }
      } else {
        b.checkboxListRenderer = new CheckboxListRenderer(
          b.field,
          b.onAssessmentChangeCallback,
          false,
          null,
          false
        );
        b.checkboxListRenderer.renderOn(a);
      }
    }
  }
};
AssessmentsRenderer.prototype.setValue = function (a) {
  if (a) {
    if (this.checkboxListRenderer) {
      this.checkboxListRenderer.setValue(a);
    }
  }
};
AssessmentsRenderer.prototype.getAllAssessmets = function (a) {
  var b = this;
  $.post("/Renderer/GetAllAssessmets", {}, function (c) {
    b.field.checkBoxOptions = c;
    b.checkboxListRenderer = new CheckboxListRenderer(
      b.field,
      b.onAssessmentChangeCallback,
      false,
      null,
      true
    );
    b.checkboxListRenderer.renderOn(a);
  });
};
AssessmentsRenderer.prototype.getFields = function () {
  var a = [];
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.getFields();
  }
  return a;
};
AssessmentsRenderer.prototype.getlistValue = function () {
  var a = [];
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.getlistValue();
  }
  return a;
};
AssessmentsRenderer.prototype.isEmpty = function () {
  var a = false;
  if (this.checkboxListRenderer) {
    a = this.checkboxListRenderer.isEmpty();
  }
  return a;
};
AssessmentsRenderer.prototype.setCheckboxListErrorMarker = function (a) {
  if (this.checkboxListRenderer) {
    this.errorMarker = $("<i class='inputFieldError'>");
    this.fieldDiv = $("<div>");
    this.fieldDiv.append(this.errorMarker);
    a.append(this.fieldDiv);
  }
};
AssessmentsRenderer.prototype.validateAndCheckErrors = function () {
  var b = false;
  if (this.checkboxListRenderer) {
    this.errorMarker.removeClass("inputFieldErrorVisible");
    var c = this.isEmpty();
    if (c) {
      var a = " * " + IAS.L("Required");
      this.errorMarker.addClass("inputFieldErrorVisible");
      this.errorMarker.iasTooltip(a, "#be4b49");
      b = true;
    }
  }
  return b;
};
AssessmentsRenderer.prototype.removeErrorMarker = function () {
  if (this.checkboxListRenderer) {
    this.errorMarker.removeClass("inputFieldErrorVisible");
  }
};
AssessmentsRenderer.prototype.getFields = function () {
  if (this.checkboxListRenderer) {
    return this.checkboxListRenderer.getFields();
  } else {
    return [];
  }
};
NewDateRenderer = function (a, c) {
  this.field = a;
  this.onChangeCallback = c;
  this.fireEvents = ["change", "keyup"];
  this.onChangeCallback = c;
  this.inputField = $("<input class='datepicker' placeholder='DD-MMM-YYYY'>");
  this.inputField.setID(this.field.id);
  this.inputField.datepicker({
    showOn: "button",
    changeMonth: true,
    changeYear: true,
    dateFormat: "dd-M-yy",
  });
  var b = this;
  this.inputField.click(function () {
    b.inputField.datepicker("show");
  });
  this.inputField.attr("readonly", true);
  this.disabled = false;
  BaseRendererConstructor(this);
  this.inputField.keypress(function (d) {
    d.preventDefault();
  });
};
InheritFromAbstractRenderer(NewDateRenderer);
NewDateRenderer.prototype.getValue = function () {
  var a = this.inputField.val();
  return a;
};
NewDateRenderer.prototype.getError = function () {
  var b = this.inputField.val();
  var a = null;
  if (!b) {
    a = IAS.L("Date field is empty");
  } else {
    if (
      b !=
      moment(moment(b, "DD-MMM-YYYY").format("DD-MMM-YY"), "DD-MMM-YY").format(
        "DD-MMM-YYYY"
      )
    ) {
      a = IAS.L("Incorrect date format");
    }
  }
  return a;
};
NewDateRenderer.prototype.isReadOnlyOrDisabled = function () {
  return this.disabled;
};
NewDateRenderer.prototype.readOnly = function (a) {
  this.setAttribute("readOnly", a);
  this.disabled = true;
  return this;
};
NewDateRenderer.prototype.disableInputField = function (a) {
  this.setAttribute("disabled", a);
  this.disabled = true;
  return this;
};
OldDateRenderer = function (a, d) {
  this.field = a;
  this.onChangeCallback = d;
  this.div = $("<div>");
  this.dayList = $("<select id='day'>");
  this.dayList.append($("<option>").html("").val(""));
  for (var b = 1; b <= 31; b++) {
    var c = String(b);
    if (c.length == 1) {
      c = "0" + c;
    }
    this.option = $("<option>").html(c).val(c);
    this.dayList.append(this.option);
  }
  this.div.append(this.dayList);
  this.monthList = $("<select id='month'>");
  this.monthList.append($("<option>").html("").val(""));
  for (var b = 1; b <= 12; b++) {
    var c = String(b);
    if (c.length == 1) {
      c = "0" + c;
    }
    this.option = $("<option>").html(c).val(c);
    this.monthList.append(this.option);
  }
  this.div.append(" - ");
  this.div.append(this.monthList);
  this.yearList = $("<select id='year'>");
  this.yearList.append($("<option>").html("").val(""));
  var e = new Date().getYear() + 1900;
  var b;
  for (b = e; b >= 1900; b--) {
    this.option = $("<option>").append(b);
    this.yearList.append(this.option);
  }
  this.div.append(" - ");
  this.div.append(this.yearList);
  this.div.append($("<br>"));
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(OldDateRenderer);
OldDateRenderer.prototype.getFireEvents = function () {
  return ["change"];
};
OldDateRenderer.prototype.getValue = function () {
  var a = [this.dayList.val(), this.monthList.val(), this.yearList.val()].join(
    "/"
  );
  if (a.length == 10) {
    return a;
  } else {
    return "";
  }
};
OldDateRenderer.prototype.getError = function () {
  var a = [this.dayList.val(), this.monthList.val(), this.yearList.val()].join(
    "/"
  );
  if (a.length < 10) {
    return IAS.L("Date field is not correctly filled");
  } else {
    return "";
  }
};
OldDateRenderer.prototype.setValue = function (b) {
  if (b == null) {
    return;
  }
  if (b == "") {
    this.dayList.val("");
    this.monthList.val("");
    this.yearList.val("");
    return;
  }
  var a = b.split("/");
  if (a.length == 3) {
    this.dayList.val(a[0]);
    this.dayList.select2("val", a[0]);
    this.monthList.val(a[1].length == 1 ? "0" + a[1] : a[1]);
    this.monthList.select2("val", a[1].length == 1 ? "0" + a[1] : a[1]);
    this.yearList.val(a[2]);
    this.yearList.select2("val", a[2]);
  }
};
OldDateRenderer.prototype.renderOn = function (a) {
  this.dayList.select2({
    width: "86px",
    allowClear: true,
    placeholder: IAS.L("Day"),
    minimumResultsForSearch: -1,
  });
  this.monthList.select2({
    width: "86px",
    allowClear: true,
    placeholder: IAS.L("Month"),
    minimumResultsForSearch: -1,
  });
  this.yearList.select2({
    width: "86px",
    allowClear: true,
    placeholder: IAS.L("Year"),
    minimumResultsForSearch: -1,
  });
  a.append(this.div);
};
OldDateRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.dayList);
  a.push(this.monthList);
  a.push(this.yearList);
  return a;
};
PasswordRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<input type='password'>").addClass("text");
  this.inputField.setID(this.field.id);
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(PasswordRenderer);
PasswordRenderer.prototype.getError = function () {
  var a = this.base.getError.apply(this);
  if (a == null) {
    var c = this.getValue();
    if (c) {
      if (this.field.passwordPattern) {
        var b = new RegExp(this.field.passwordPattern);
        if (!b.test(c)) {
          if (this.field.valueNotMatchPasswordPatternMessage) {
            a = this.field.valueNotMatchPasswordPatternMessage;
          } else {
            a = IAS.L("Please match the requested format.");
          }
        }
      }
    }
  }
  return a;
};
PaymentRenderer = function (a, b, c) {
  this.field = a;
  this.onChangeCallback = b;
  this.designerMode = c;
  this.inputField = $("<input type='text'>");
  this.inputField2 = $("<input class='datepicker'>");
  this.inputField2.setID(this.field.id);
  this.inputField2.datepicker();
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(PaymentRenderer);
PaymentRenderer.prototype.renderOn = function (b) {
  this.noteDiv = $("<div>");
  b.append(this.noteDiv);
  if (this.field.note) {
    this.noteDiv.append("<b>" + this.field.note + "</b>");
  }
  this.container = b;
  var e = [
    { cells: [IAS.L("Payment"), this.inputField] },
    { cells: [IAS.L("Date"), this.inputField2] },
  ];
  var d = new IAS.TableLayoutRenderer(e, b, "payment", 100, 70);
  if (this.designerMode == true) {
    var a = $("<button>").html("Add Payment Note");
    b.append(a);
    var c = this;
    a.click(function () {
      c.renderOnDesignMode();
    });
  }
};
PaymentRenderer.prototype.renderOnDesignMode = function () {
  var b = this;
  var a = $("<div>");
  var e = [{ id: "txtPaymentNote", type: "text", label: "Payment Note" }];
  var f = new UIRenderer({ fields: e }, a);
  var c = IAS.popupOptions();
  c.okCallback = function () {
    d.close();
    var g = f.getValues();
    b.field.note = g.txtPaymentNote;
    b.noteDiv.empty();
    b.noteDiv.html(b.field.note);
  };
  var d = new IAS.popup(a, IAS.L("Options"), c);
};
PaymentRenderer.prototype.getValue = function () {
  if (this.inputField.val() === "" || this.inputField2.val() === "") {
    return null;
  } else {
    var a = {};
    a.payment = this.inputField.val();
    a.date = this.inputField2.val();
    return a;
  }
};
PaymentRenderer.prototype.setValue = function (a) {
  if (a == null) {
    return;
  }
  this.inputField.val(a.payment);
  this.inputField2.val(a.date);
};
PhoneRenderer = function (d, e, a, b) {
  this.field = d;
  this.onChangeCallback = e;
  this.div = $("<div class='phoneRendererDiv'>");
  this.div.removeClass("divClass");
  var c = $("<div>");
  this.countryCode = $(
    "<input type='text' id='countryCode' maxlength='4' size='3' placeholder='+##' style='width:24px; border-right: none; display: inline-block ;font-weight: bold; border-radius: 4px 0 0 4px;'>"
  );
  if (a) {
    this.countryCode.val(a);
  }
  if (b) {
    if (a) {
      this.countryCode.addClass("rdonly");
    }
  }
  this.div.append(this.countryCode);
  this.phoneNumber = $(
    "<input type='text' id='phoneNumbers' class='phoneNumber' maxlength='35' size='30' placeholder='Phone number' style='display: inline-block; border-radius: 0 4px 4px 0; border: 1px solid rgb(136, 174, 193) !important; cursor: text !important;'> "
  );
  this.div.append(this.phoneNumber).append("<br>");
  BaseRendererConstructor(this);
  this.phoneNumber.keydown(this._preventTextInput);
};
InheritFromAbstractRenderer(PhoneRenderer);
PhoneRenderer.prototype.renderOn = function (a, b) {
  if (b) {
    b.prependTo(this.div);
    a.append(this.div);
  } else {
    a.append(this.div);
  }
  return this;
};
PhoneRenderer.prototype.getValue = function () {
  if (
    this.countryCode.val() == "" ||
    this.phoneNumber.val == 0 ||
    this.countryCode.val() == 0 ||
    this.phoneNumber.val == 0
  ) {
    return "";
  } else {
    var a = [this.countryCode.val(), this.phoneNumber.val()].join("#");
    if (a.length >= 7) {
      return a;
    } else {
      return "";
    }
  }
};
PhoneRenderer.prototype.getCountryCodeValue = function () {
  var a = [this.countryCode.val()];
  if (a) {
    return a;
  } else {
    return "";
  }
};
PhoneRenderer.prototype.setValue = function (b) {
  if (b == null) {
    return;
  }
  if (b == "") {
    this.countryCode.val("");
    this.phoneNumber.val("");
    return;
  }
  var a = b.split("#");
  if (a.length == 2) {
    this.countryCode.val(a[0]);
    this.phoneNumber.val(a[1]);
  } else {
    this.phoneNumber.val(b);
  }
};
PhoneRenderer.prototype.setCountryCodeValue = function (a) {
  if (a == null) {
    return;
  }
  if (a == "") {
    this.countryCode.val("");
    return;
  } else {
    this.countryCode.val(a);
  }
};
PhoneRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.countryCode);
  a.push(this.phoneNumber);
  return a;
};
PhoneRenderer.prototype._preventTextInput = function (b, a) {
  if (
    $.inArray(b.keyCode, [107, 46, 8, 27, 13, 9]) !== -1 ||
    (b.keyCode == 65 && b.ctrlKey === true) ||
    (b.keyCode >= 35 && b.keyCode <= 39) ||
    (b.keyCode == 187 && b.shiftKey)
  ) {
    return;
  }
  var c = this.min.charCodeAt(0) - 1;
  if (
    (b.shiftKey || b.keyCode < 48 || b.keyCode > 57) &&
    (b.keyCode < 96 || b.keyCode > 105)
  ) {
    b.preventDefault();
  }
};
PhoneRenderer.prototype.setAttributes = function () {
  this.countryCode.attr("readonly", true);
  this.countryCode.css({ cursor: "pointer" });
  this.div.addClass("divClass");
};
PhoneRenderer.prototype.checkPhoneNumberHasSpecialCharacters = function () {
  var a = /^[0-9a-zA-Z]+$/;
  if (a.test(this.phoneNumber.val())) {
    return false;
  } else {
    return true;
  }
};
PhoneRenderer.prototype.callCountryList = function (b) {
  b.stopPropagation();
  var c = $("#countryList");
  var a = $("#arrowDiv");
  if (a.attr("class") == "arrow") {
    a.removeClass("arrow").addClass("arrow Up");
    c.removeClass("country-list-hide").addClass("country-list");
    c.show();
  } else {
    a.removeClass("arrow Up").addClass("arrow");
    c.removeClass("country-list").addClass("country-list-hide");
    c.hide();
    $(document).off("keydown");
  }
};
RadioRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.inputField = $("<input type='radio'>");
  if (this.field.id) {
    this.inputField.setID(this.field.id);
  }
  if (this.field.label) {
    this.inputField.val(this.field.label);
  }
  if (this.field.name) {
    this.inputField.attr("name", this.field.name);
  }
  if (this.field.value) {
    this.inputField.attr("value", this.field.value);
  }
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(RadioRenderer);
RadioRenderer.prototype.getValue = function () {
  if (this.inputField.is(":checked")) {
    return true;
  } else {
    return false;
  }
};
RadioRenderer.prototype.renderOn = function (a) {
  a.append(this.inputField);
};
RadioRenderer.prototype.setValue = function (a) {
  if (a == true) {
    this.inputField.attr("checked", true);
  } else {
    this.inputField.attr("checked", false);
  }
};
TextRenderer = function (a, c) {
  var b = this;
  this.field = a;
  this.onChangeCallback = c;
  this.inputField = $("<input type='text'>").addClass("text");
  this.inputField.setID(this.field.id);
  if (this.inputField.val().length < 1) {
    this.inputField.addClass("textError");
  }
  if (this.field.hasOwnProperty("maxlength")) {
    this.inputField.attr("maxlength", this.field.maxlength);
  }
  if (this.field.hasOwnProperty("autocomplete")) {
    this.inputField.attr("autocomplete", this.field.autocomplete);
  }
  if (this.field.hasOwnProperty("autofocus")) {
    this.inputField.attr("autofocus", this.field.autofocus);
  }
  BaseRendererConstructor(this);
  this.inputField.keyup(function () {
    if ($(this).val().length < 1) {
      $(this).addClass("textError");
    } else {
      $(this).removeClass("textError");
    }
  });
};
InheritFromAbstractRenderer(TextRenderer);
TextRenderer.prototype.setValue = function (b) {
  var a = this.inputField;
  if (b && b.length > 1) {
    a.removeClass("textError");
  }
  this.inputField.val(b);
};
TimeRenderer = function (a, d) {
  this.field = a;
  this.onChangeCallback = d;
  if (this.field.hours) {
    this.hourStart = this.field.hours.start || 0;
    this.hourEnd = this.field.hours.end || 23;
    this.hourStep = this.field.hours.step || 1;
  } else {
    this.hourStart = 7;
    this.hourEnd = 23;
    this.hourStep = 1;
  }
  if (this.field.minutes) {
    this.minuteStart = this.field.minutes.start || 0;
    this.minuteEnd = this.field.minutes.end || 59;
    this.minuteStep = this.field.minutes.step || 1;
  } else {
    this.minuteStart = 0;
    this.minuteEnd = 59;
    this.minuteStep = 15;
  }
  this.div = $("<div>");
  this.hourList = $("<select id='hour'>");
  this.hourList.append($("<option>").html("").val(""));
  for (
    var b = parseInt(this.hourStart);
    b <= parseInt(this.hourEnd);
    b += parseInt(this.hourStep)
  ) {
    var c = String(b);
    if (c.length == 1) {
      c = "0" + c;
    }
    this.option = $("<option>").html(c).val(c);
    this.hourList.append(this.option);
  }
  this.div.append(this.hourList);
  this.div.append(" : ");
  this.minuteList = $("<select id='minute'>");
  this.minuteList.append($("<option>").html("").val(""));
  for (
    var b = parseInt(this.minuteStart);
    b <= parseInt(this.minuteEnd);
    b += parseInt(this.minuteStep)
  ) {
    var c = String(b);
    if (c.length == 1) {
      c = "0" + c;
    }
    this.option = $("<option>").html(c).val(c);
    this.minuteList.append(this.option);
  }
  this.div.append(this.minuteList);
  this.formatLabel = $("<label>");
  this.formatLabel.append("  " + IAS.L("hh:mm"));
  this.div.append(this.formatLabel);
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(TimeRenderer);
TimeRenderer.prototype.getValue = function () {
  var a = [this.hourList.val(), this.minuteList.val()].join(":");
  if (a.length == 5) {
    return a;
  } else {
    return "";
  }
};
TimeRenderer.prototype.getError = function () {
  var a = [this.hourList.val(), this.minuteList.val()].join(":");
  if (a.length < 5) {
    return (
      this.field.errorMessage || IAS.L("Time field is not correctly filled")
    );
  } else {
    return null;
  }
};
TimeRenderer.prototype.setValue = function (d) {
  var b = "",
    a = "";
  if (d) {
    var c = d.split(":");
    if (c.length == 2) {
      a = c[0];
      if (a.length == 1) {
        a = "0" + a;
      }
      b = c[1];
      if (b.length == 1) {
        b = "0" + b;
      }
    }
  }
  this.hourList.val(a);
  this.hourList.select2("val", a);
  this.minuteList.val(b);
  this.minuteList.select2("val", b);
};
TimeRenderer.prototype.renderOn = function (a) {
  this.hourList.select2({
    width: "79px",
    allowClear: true,
    placeholder: IAS.L("hour"),
    minimumResultsForSearch: -1,
  });
  this.minuteList.select2({
    width: "79px",
    allowClear: true,
    placeholder: IAS.L("minute"),
    minimumResultsForSearch: -1,
  });
  a.append(this.div);
};
TimeRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.hourList);
  a.push(this.minuteList);
  return a;
};
UnOrderedListRenderer = function (b, a) {
  this.field = b;
  this._unOrderedList = $("<ul>");
  this.setValue(this.field.items);
};
InheritFromAbstractRenderer(UnOrderedListRenderer);
UnOrderedListRenderer.prototype._appendItems = function () {
  for (var a in this.items) {
    this._unOrderedList.append($("<li>").append(this.items[a]));
  }
};
UnOrderedListRenderer.prototype.renderOn = function (a) {
  a.append(this._unOrderedList);
};
UnOrderedListRenderer.prototype.setValue = function (a) {
  this.items = $.extend(true, {}, a);
  this._appendItems();
};
UnOrderedListRenderer.prototype.getValue = function () {
  return null;
};
UploadFileRenderer = function (a, c, d) {
  this.field = a;
  this.onChangeCallback = c;
  this.afterSaveCallBack = d;
  if (window.File && window.FileReader && window.FileList && window.Blob) {
    IAS.isUploadFilesSupportedByBrowser = true;
  } else {
    IAS.isUploadFilesSupportedByBrowser = false;
  }
  this.allowDownloadLink = this.field.allowDownloadLink || true;
  this.field.fileType = this.field.fileType || 0;
  this.field.value = a.value ? a.value : {};
  this.field.value.files = this.field.value.files || [];
  this.field.allowDelete = this.field.allowDelete == false ? false : true;
  this.maxNumberFile = a.maxFileNumber ? a.maxFileNumber : 1;
  this.inputField = $("<input type='file' name='files[]'>").css({
    visibility: "hidden",
    display: "none",
    height: 20,
  });
  this.fileTextRenderer = new TextRenderer({ id: "fileText", label: "" });
  this.fileTextRenderer.readOnly(true);
  this.fileTextRenderer.inputField.addClass("downloadFileInput");
  var b = this;
  this.uploadButton = new ButtonRenderer(
    { id: "uploadButton", label: IAS.L("Choose file") },
    function () {
      if (IAS.isUploadFilesSupportedByBrowser) {
        b.inputField.click();
      } else {
        IAS.popupMsg("Can't upload files in this browser.");
      }
    }
  );
  if (this.field.accept) {
    this.inputField.attr("accept", this.field.accept);
  }
  if (this.maxNumberFile > 1) {
    this.inputField.attr("multiple", true);
  }
  if (this.field.maxlength) {
    this.inputField.attr("maxlength", this.field.maxlength);
  } else {
    this.inputField.attr("maxlength", "1");
  }
  this.inputField.change(function (g) {
    var f = this.files[this.files.length - 1];
    if (b.validateFile(f)) {
      b.fileTextRenderer && b.fileTextRenderer.setValue(f.name);
      b.saveFile();
    }
  });
  this.mainDiv = $("<div>");
  this.mainDiv.append(this.inputField);
  this.uploadStatusMessageDiv = $("<div>").css({
    color: "#054165",
    "font-weight": "bold",
  });
  this.uploadStatusMessageDiv
    .append(IAS.L("The file is not uploaded yet"))
    .append("<br><br>");
  this.mainDiv.append(this.uploadStatusMessageDiv);
  this.uploadStatusMessageDiv.hide();
  this.downloadDiv = $("<div>");
  this.mainDiv.append(this.downloadDiv);
  this.downloadFields = [];
  this.downloadRenderers = [];
  this.inputField.setID(this.field.id);
};
InheritFromAbstractRenderer(UploadFileRenderer);
UploadFileRenderer.prototype.renderOn = function (a) {
  delete this.container;
  this.container = a;
  a.append(this.mainDiv);
  this.afterRender();
};
UploadFileRenderer.prototype.afterRender = function () {
  var a = $("<div>");
  this.fileTextRenderer.renderOn(a);
  this.uploadButton.renderOn(a);
  this.inputField.after(a);
  a.show();
};
UploadFileRenderer.prototype.getFiles = function () {
  var a = this.inputField;
  return 0 == a[0].files.length ? null : a[0].files;
};
UploadFileRenderer.prototype.saveFile = function () {
  var a = this;
  this.getFile(0, function (b, d) {
    if (b) {
      var f = a.maxNumberFile > 1 ? true : false;
      var c =
        f && a.downloadFields.length >= a.maxNumberFile
          ? a.downloadFields[a.downloadFields.length - 1].fileID
          : 0;
      var e = !c ? true : false;
      IAS.saveFile(c, d, b, e, a.field.fileType, function (h) {
        var g = {};
        if (h && h != 0) {
          IAS.popupMsg(
            IAS.L("File uploaded successfully"),
            IAS.L("Information")
          );
          g = { id: h, name: d };
          if (!f || !e) {
            a.removeDownloadLink(a.downloadFields[a.downloadFields.length - 1]);
          }
          a.addDownloadLink(g);
          if (!f) {
            a.field.value.files.splice(0, a.downloadFields.length);
          }
          a.field.value.files.push(g);
          if (a.onChangeCallback && a.onChangeCallback instanceof Function) {
            a.onChangeCallback(a, null);
          }
          a.afterSaveCallBack && a.afterSaveCallBack(h);
        } else {
          new IAS.popupMsg(
            IAS.L("Error While Uploading") + " ,,,,",
            IAS.L("Error")
          );
        }
      });
    }
  });
};
UploadFileRenderer.prototype.setValue = function (a) {
  if (a) {
    this.field.value = a;
    this.field.value.files = this.field.value.files || [];
    this.reDraw();
  }
};
UploadFileRenderer.prototype.reDraw = function () {
  var a = this;
  var b = a.field.value;
  a.downloadFields = [];
  a.downloadDiv.remove();
  a.downloadDiv = $("<div>");
  a.inputField.val("");
  a.fileTextRenderer && a.fileTextRenderer.setValue("");
  if (b.files.length > 0) {
    $.each(b.files, function (d, c) {
      a.uploadStatusMessageDiv.hide();
      a.addDownloadLink(c);
    });
  } else {
    if (this.inputField.prop("hidden") == true) {
      a.uploadStatusMessageDiv.show();
    }
  }
};
UploadFileRenderer.prototype.getValue = function () {
  return this.field.value;
};
UploadFileRenderer.prototype.resetValue = function (a) {
  this.field.value.files = [];
  this.setValue(a);
};
UploadFileRenderer.prototype.getFile = function (c, d) {
  var b = this.getFiles();
  if (b) {
    if (b.length > c) {
      var a = b[c];
      var e = new FileReader();
      e.readAsDataURL(a);
      e.onload = function (f) {
        if (f.target.readyState == FileReader.DONE) {
          var h = f.target.result;
          var g = b[c];
          var j;
          j = g.name;
          d(h, j);
        } else {
          IAS.popupMsg(IAS.L("Please wait while read the file"));
        }
      };
    }
  } else {
    d();
  }
};
UploadFileRenderer.prototype.removeDownloadLink = function (a) {
  var c = this;
  if (a && a.mainDiv) {
    a.mainDiv.remove();
  }
  var b = c.downloadFields.indexOf(a);
  if (b >= 0) {
    c.downloadFields.splice(b, 1);
    c.downloadRenderers.splice(b, 1);
    var d = c.field.value.files.indexOf({ id: a.fileID, name: a.fileName });
    c.field.value.files.splice(d, 1);
    c.renderOn(c.container);
  }
};
UploadFileRenderer.prototype.addDownloadLink = function (d) {
  var e = this;
  var b = {};
  var a = function () {
    if (e.field.callbackDelete) {
      e.field.callbackDelete(d.id);
    }
    e.fileTextRenderer.setValue("");
    e.inputField[0].value = null;
    e.removeDownloadLink(b);
  };
  var c = function () {
    if (d.id) {
      b = {
        label: IAS.L("Download File") + " [" + d.name + "]",
        id: "download" + e.downloadFields.length,
        fileID: d.id,
        fileName: d.name || "",
        allowDelete: e.field.allowDelete,
        callbackDelete: a,
      };
      var f = new DownloadFileRenderer(b);
      b.mainDiv = f.getDiv().append("<br>");
      e.downloadFields.push(b);
      if (!e.downloadRenderers) {
        e.downloadRenderers = [];
      }
      e.downloadRenderers.push(f);
      e.downloadDiv.append(b.mainDiv);
      e.mainDiv.append(e.downloadDiv);
      if (e.container) {
        e.renderOn(e.container);
      }
    }
  };
  if (d.name) {
    c();
  } else {
    IAS.getFileName(d.id, function (f) {
      d.name = f;
      c();
    });
  }
};
UploadFileRenderer.prototype.getFileID = function () {
  return this.field.value.files[0] ? this.field.value.files[0].id : 0;
};
UploadFileRenderer.prototype.getFileIDs = function () {
  var b = { added: [], deleted: [] };
  for (var c = 0; c < this.field.value.files.length; c += 1) {
    b.added.push(this.field.value.files[c].id);
  }
  if (this.deletedFileIDs) {
    for (var c = 0; c < this.deletedFileIDs.length; c += 1) {
      var a = this.deletedFileIDs[c].id;
      if (isNumber(a)) {
        b.deleted.push(a);
      }
    }
  }
  return b;
};
UploadFileRenderer.prototype.resetField = function (a) {
  this.field = a;
};
UploadFileRenderer.prototype.disabledUpload = function (a) {
  this.inputField.prop("disabled", a);
  this.uploadButton.disable(a);
};
UploadFileRenderer.prototype.validateFile = function (a) {
  var d = true;
  var c = a.name;
  var e = "";
  if (a.size >= 3145728) {
    d = false;
    e = IAS.L(
      "this file is too larg tha maximam size is 3 MB , you must select a smaller file."
    );
  } else {
    $.each(this.downloadFields, function (f, g) {
      if (g.fileName == c) {
        d = false;
        e = IAS.L("The file is already uploaded!");
      }
    });
    if (d && this.field.validFileExtentions) {
      var b = this.field.validFileExtentions;
      d = new RegExp("(" + b.join("|").replace(/\./g, "\\.") + ")$", "i").test(
        c
      );
      if (!d) {
        e = IAS.L("file not supported !");
      }
    }
  }
  if (!d) {
    new IAS.popupMsg(e, IAS.L("Validation"));
  }
  return d;
};
UploadFileRenderer.prototype.readOnly = function (a) {
  this.visible(false);
  if (a && this.field.value.files.length == 0) {
    this.uploadStatusMessageDiv.show();
  }
};
UploadFileRenderer.prototype.getFields = function () {
  var b = [this.inputField]
    .concat(this.fileTextRenderer.getFields())
    .concat(this.uploadButton.getFields());
  var a = this.downloadRenderers;
  for (i = 0; i < a.length; i++) {
    b = b.concat(a[i].getFields());
  }
  return b;
};
UploadFileRenderer.prototype.isEmpty = function () {
  if (
    this.field.value &&
    this.field.value.files &&
    this.field.value.files.length < 1
  ) {
    return true;
  } else {
    return false;
  }
};
YesNoRenderer = function (a, b) {
  this.field = a;
  this.onChangeCallback = b;
  this.currentValue = "";
  this.yesNo = $("<select>");
  if (a.required) {
  } else {
    this.option = $("<option>").html("");
    this.yesNo.append(this.option);
  }
  this.inputField = this.yesNo;
  this.option = $("<option value='" + true + "'>").html(IAS.L("Yes"));
  this.yesNo.append(this.option);
  this.option = $("<option value='" + false + "'>").html(IAS.L("No"));
  this.yesNo.append(this.option);
  BaseRendererConstructor(this);
};
InheritFromAbstractRenderer(YesNoRenderer);
YesNoRenderer.prototype.getValue = function () {
  if (this.yesNo && this.yesNo.val()) {
    if (this.yesNo.val().toLowerCase() == "true") {
      this.currentValue = "true";
    } else {
      if (this.yesNo.val().toLowerCase() == "false") {
        this.currentValue = "false";
      } else {
        this.currentValue = "";
      }
    }
  } else {
    this.currentValue = "";
  }
  return this.currentValue;
};
YesNoRenderer.prototype.setValue = function (a) {
  this.currentValue = String(a).toLowerCase();
  if (this.currentValue == "true") {
    this.yesNo.val("true");
    this.yesNo.select2("val", "true");
  } else {
    if (this.currentValue == "false") {
      this.yesNo.val("false");
      this.yesNo.select2("val", "false");
    } else {
      this.yesNo.val("");
      this.yesNo.select2("val", "");
    }
  }
};
YesNoRenderer.prototype.renderOn = function (a) {
  a.append(this.yesNo);
  this.yesNo.select2({
    allowClear: true,
    placeholder: this.field.label,
    minimumResultsForSearch: -1,
  });
};
YesNoRenderer.prototype.getAllOptions = function () {
  var a = $.extend(true, [], this.field.options);
  if (
    this.field.options.length > 0 &&
    this.field.options[0].id == "" &&
    this.field.options[0].label == ""
  ) {
    a.shift({ id: "", label: "" });
  }
  return a;
};
YesNoRenderer.prototype.clearSelectedValue = function () {
  this.yesNo.val("");
  this.currentValue = null;
};
YesNoRenderer.prototype.getFields = function () {
  var a = [];
  a.push(this.yesNo);
  return a;
};
Renderers = {
  hidden: HiddenRenderer,
  bigtext: BigTextRenderer,
  button: ButtonRenderer,
  captcha: CaptchaRenderer,
  checkbox: CheckboxRenderer,
  checkboxlist: CheckboxListRenderer,
  color: ColorRenderer,
  countryrenderer: CountryRenderer,
  currency: CurrencyRenderer,
  daterange: DateRangeRenderer,
  downloadfile: DownloadFileRenderer,
  dropdown: DropdownRenderer,
  dropdowncountryrenderer: DropdownCountryRenderer,
  email: EmailRenderer,
  geo: GeoRenderer,
  int: IntegerRenderer,
  image: ImageRenderer,
  list: ListRenderer,
  modules: ModulesRenderer,
  name: FullNameRenderer,
  newdate: NewDateRenderer,
  olddate: OldDateRenderer,
  password: PasswordRenderer,
  payment: PaymentRenderer,
  phone: PhoneRenderer,
  radio: RadioRenderer,
  text: TextRenderer,
  time: TimeRenderer,
  unorderedlist: UnOrderedListRenderer,
  uploadfile: UploadFileRenderer,
  yesno: YesNoRenderer,
  htmleditorrenderer: HtmlEditorRenderer,
  assessments: AssessmentsRenderer,
};
RenderersDescription = {
  checkbox: IAS.L("Checkbox"),
  checkboxlist: IAS.L("Checkbox List"),
  currency: IAS.L("Currency"),
  color: IAS.L("Color"),
  countryrenderer: IAS.L("Country Select List"),
  newdate: IAS.L("Date Picker"),
  daterange: IAS.L("Date Range"),
  downloadfile: IAS.L("Download Filed"),
  dropdown: IAS.L("Dropdown"),
  email: IAS.L("Email"),
  modules: IAS.L("Modules"),
  name: IAS.L("Name (Primary or Secondary)"),
  int: IAS.L("Number"),
  list: IAS.L("List"),
  payment: IAS.L("Payment"),
  phone: IAS.L("Phone"),
  dropdowncountryrenderer: IAS.L("Phone With Country-Select List"),
  radio: IAS.L("Radio Button"),
  bigtext: IAS.L("Text Area"),
  text: IAS.L("Textbox"),
  time: IAS.L("Time"),
  uploadfile: IAS.L("Upload File"),
  yesno: IAS.L("Yes-No Dropdown"),
  htmleditorrenderer: IAS.L("HTML Editor"),
};
UIRenderer = function (b, a, f, j, g, d, h, e) {
  this.onAfterFormChanged = h;
  var c = function (k) {
    return k == undefined || k == null || k == "";
  };
  this.designerMode = f || false;
  if (j == undefined || j == null) {
    j = true;
  }
  this.isFieldsReadOnly = g || false;
  this.categoryNoteOptions = d || null;
  this.customizableUploadFileType = e || null;
  if (j && c(b)) {
    throw "Error initializing UIRenderer form. formData must either contain categories or fields or Form.FormDesign";
  }
  if (typeof b == "string" || (c(b) && !j)) {
    b = UIRenderer.ConvertFromJsonToFormObject(b);
  }
  this.renderers = {};
  this.renderID2CategoryID = {};
  this.formContainer = $("<div>").addClass("rendererForm");
  a.append(this.formContainer);
  if (b.Form == undefined && b.FormDesign != undefined) {
    b = { Form: b };
    if (b.Form.FormDesign.categories == "") {
      b.Form.FormDesign.categories = new Array();
    }
  }
  if (
    b.Form &&
    b.Form.FormDesign &&
    (b.Form.FormDesign.categories ||
      (b.Form.FormDesign.categories != undefined &&
        b.Form.FormDesign.categories.constructor != [].constructor))
  ) {
    if (b.Form.FormDesign.categories.constructor != [].constructor) {
      b.Form.FormDesign.categories = [];
    }
    this.initializeWithCategories(b.Form.FormDesign.categories);
  } else {
    if (
      b.categories ||
      (b.categories != undefined && b.categories.constructor != [].constructor)
    ) {
      if (b.categories.constructor != [].constructor) {
        b.categories = [];
      }
      this.initializeWithCategories(b.categories);
    } else {
      if (
        b.fields ||
        (b.fields != undefined && b.fields.constructor != [].constructor)
      ) {
        if (b.fields.constructor != [].constructor) {
          b.fields = [];
        }
        this.initializeWithFields(b.fields);
      } else {
        throw "Error initializing UIRenderer form. formData must either contain categories or fields or Form.FormDesign";
      }
    }
  }
  this.formData = b;
  if (this.designerMode) {
    this.createAddAndDeleteCategoryButtons(a);
  }
  this.onChangeInForm();
  this.afterRender();
};
IAS.UIRenderer = IAS.UIRenderer || UIRenderer;
UIRenderer.prototype.createAddAndDeleteCategoryButtons = function (a) {
  this.addCategoryButton = new ButtonRenderer({
    id: "addCategory",
    label: IAS.L("Add Category"),
  });
  this.deleteCategoryButton = new ButtonRenderer({
    id: "deleteCategory",
    label: IAS.L("Delete Category"),
  });
  this.addCategoryButton.renderOn(a);
  this.addCategoryButton.click(IAS.bind(this, "promptAddCategory"));
  this.deleteCategoryButton.renderOn(a);
  this.deleteCategoryButton.click(IAS.bind(this, "promptDeleteCategory"));
};
UIRenderer.prototype.createAddAndDeleteFieldButtons = function (d, b) {
  var e = this;
  d.append($("<hr>"));
  var f = $("<div>").addClass("center");
  var a = $(
    "<img class='uiRendererImg' src='/css/icons/add_field.png'>"
  ).iasTooltip(IAS.L("Add field"));
  a.attr("category_id", b.category_id);
  d.append(f.append(a));
  var c = $(
    "<img class='uiRendererImg' src='/css/icons/delete_field.png'>"
  ).iasTooltip(IAS.L("Delete field"));
  c.attr("category_id", b.category_id);
  d.append(f.append(c));
  a.click(function () {
    var g = $(this).attr("category_id");
    e.promptAddFieldToCategory(g);
  });
  c.click(function () {
    var g = $(this).attr("category_id");
    e.promptDeleteFieldFromCategory(g);
  });
};
UIRenderer.prototype.initializeWithCategories = function (a) {
  this.categories = a;
  this.renderedCategories = {};
  for (var d = 0; d < a.length; d += 1) {
    var b = a[d];
    if (!b.hasOwnProperty("category_id")) {
      b.category_id = this.generateRandomID(
        b.category_label,
        this.renderedCategories
      );
    }
    var c = this.buildCategoryDiv(b, d);
    if (this.designerMode || b.fields.length > 1) {
      this.formContainer.append(c);
    }
  }
};
UIRenderer.prototype.initializeWithFields = function (a) {
  var f = $("<table name='fieldsTable'>");
  var c = this.hasHiddenField(a);
  if (!c) {
    var d = { id: "hidden", label: "", type: "hidden" };
    a.unshift(d);
  }
  this.errorMessageDiv = $("<div class='errorMessageDiv'>");
  for (var e = 0; e < a.length; e += 1) {
    if (!a[e].hasOwnProperty("id")) {
      a[e].id = this.generateRandomID(a[e].label, this.renderers);
    }
    var b = this.buildFieldTr(a[e]);
    f.append(b);
  }
  this.formContainer.append(f);
};
UIRenderer.prototype.buildCategoryDiv = function (a) {
  var c = $("<div>").addClass("collapsibleContainer").attr("id", a.category_id);
  var b;
  if (
    a.hasOwnProperty("category_secondary_label") &&
    a.category_secondary_label
  ) {
    b = IAS.GetPrimaryOrSecondaryName(
      a.category_label,
      a.category_secondary_label
    );
  } else {
    b = a.category_label;
  }
  c.attr({ collapsibleDivTitle: b });
  this.renderedCategories[a.category_id] = c;
  if (this.categoryNoteOptions) {
    var k = this.buildCategoryNote(a);
    c.append(k);
  }
  var d = $("<table name='fieldsTable'>");
  d.attr("id", a.category_id);
  d.attr("style", "width:100%; height:100%");
  var g = this.hasHiddenField(a.fields);
  if (!g) {
    var f = { id: "hidden", label: "", type: "hidden" };
    a.fields.unshift(f);
  }
  c.append(d);
  for (var h = 0; h < a.fields.length; h += 1) {
    if (!a.fields[h].hasOwnProperty("id")) {
      a.fields[h].id = this.generateRandomID(a.fields[h].label, this.renderers);
    }
    var e = this.buildFieldTr(a.fields[h], a.category_id);
    this.renderReorderTd(e, a.category_id, h, h + 1 == a.fields.length);
    d.append(e);
  }
  c.collapsiblePanel();
  if (this.designerMode) {
    this.makeCategoryLabelEditable(a.category_id, c);
    this.createAddAndDeleteFieldButtons(c, a);
  }
  return c;
};
UIRenderer.prototype.makeCategoryLabelEditable = function (a, b) {
  var c = $("<a>" + IAS.L("Edit Label Name") + "</a>").css({
    "text-decoration": "underline",
    color: "blue",
  });
  c.click(IAS.bind(this, "editCategoryLabel", a));
  var d = $(b).find(".collapsibleContainerTitle div")[0];
  $(d).append(" ").append(c);
};
UIRenderer.prototype.setCategoryErrorMarker = function (a) {
  var b = this.renderedCategories[a];
  IAS.setCategoryErrorMarker(b);
};
UIRenderer.prototype.removeCategoryErrorMarker = function (a) {
  var b = this.renderedCategories[a];
  IAS.removeCategoryErrorMarker(b);
};
UIRenderer.prototype.buildCategoryNote = function (a) {
  var b = this;
  var c = $("<div>");
  var d = new NoteRenderer(
    c,
    this.categoryNoteOptions,
    a.category_note,
    function (f, g) {
      b.onChangeInForm();
      var e = a.category_id;
      if (d.hasError()) {
        b.setCategoryErrorMarker(e);
      } else {
        b.removeCategoryErrorMarker(e);
      }
      if (b.onAfterFormChanged && b.onAfterFormChanged instanceof Function) {
        b.onAfterFormChanged();
      }
    }
  );
  a.category_note = d.createCategoryNoteObject();
  return c;
};
UIRenderer.prototype.buildFieldTr = function (f, b) {
  this.renderID2CategoryID[f.id] = b;
  var p = Renderers[f.type];
  if (!p) {
    throw "Unknown UIRenderer field type " + f.type;
  }
  if (
    this.customizableUploadFileType &&
    f.type == "uploadfile" &&
    !f.fileType
  ) {
    f.fileType = this.customizableUploadFileType;
  }
  var q;
  if (f.type == "list") {
    q = new p(
      f,
      IAS.bind(this, "onChangeInForm"),
      this.designerMode,
      null,
      this.isFieldsReadOnly
    );
  } else {
    q = new p(f, IAS.bind(this, "onChangeInForm"), this.designerMode);
  }
  this.renderers[f.id] = q;
  if (f.type != "hidden") {
    var k = $("<tr>");
    var j = $("<td>");
    var m = $("<td>").attr("style", "width:25%;");
    var d = $("<td align='center'>").attr("style", "width:15%;");
    var l = f.collapsible && f.collapsible == true;
    if (l) {
      var c = $("<div>")
        .attr("collapsibleDivTitle", f.label)
        .attr("style", "width:100%;height:100%");
      c.addClass("collapsibleContainer");
      q.renderOn(c);
      j.append(c);
      j.attr("colspan", "2");
      c.collapsiblePanel();
    } else {
      if (f.labelPosition != "None") {
        var g;
        if (f.hasOwnProperty("secondaryLabel") && f.secondaryLabel) {
          g = IAS.GetPrimaryOrSecondaryName(f.label, f.secondaryLabel);
        } else {
          g = f.label;
        }
        q.renderFieldLabel(m, g, f.tooltip);
        k.append(m);
      } else {
        j.attr("colspan", "2");
      }
      var h = $("<div>");
      q.fieldDiv = h;
      q.renderOn(h);
      var r = q.disableInputField;
      if (f.hide_HtmlEditor_toolbar && f.type == "htmleditorrenderer") {
        q.HideHtmlEditorToolBar();
      }
      j.append(h);
    }
    k.append(j);
    if (this.designerMode) {
      k.append(d);
      var n = this;
      var e = $(
        "<img src='/css/icons/edit_label.png' class='uiRendererImg'>"
      ).iasTooltip(IAS.L("Edit Label"));
      e.addClass("EditFieldLabel");
      e.attr("id", f.id);
      e.click(function () {
        var s = $(this).attr("id");
        n.editFieldLabel(s);
      });
      var a = $(
        "<img src='/css/icons/properties.png' class='uiRendererImg'>"
      ).iasTooltip(IAS.L("Add Properties"));
      d.append(e).append(a);
      a.click(function () {
        n.AddPropertiesToFiled(f.type, f.id);
      });
    }
    if (
      f.required &&
      (f.required == true ||
        f.required.toLowerCase() == "true" ||
        f.required == 1 ||
        f.required == "1")
    ) {
      f.required = true;
      q.drawRequiredFieldRedStar(m);
    } else {
      if (
        f.required &&
        (f.required == "0" || f.required.toLowerCase() == "false")
      ) {
        f.required = false;
      }
    }
    q.createErrorMarker(q.fieldDiv);
    if (f.hasOwnProperty("value") && f.value != null) {
      q.setValue(f.value);
    }
    if (f.attributes) {
      q.setAttributes(f.attributes);
    }
    var o = this.isFieldsReadOnly;
    if (o) {
      q.readOnly(o);
      q.disableInputField(o);
    }
    if (f.callBack) {
      q.uiRendererCallBack(f.callBack);
    }
    q.setRow(k);
    return k;
  }
};
UIRenderer.prototype.rebuildFieldTr = function (a) {
  var d = this.getRendererByID(a.id);
  var g = d.getInputFieldTd();
  $(g).children().remove();
  var c = d.getRow();
  var e = Renderers[a.type];
  var f = new e(a, IAS.bind(this, "onChangeInForm"), this.designerMode);
  f.setRow(c);
  var b = $("<div>");
  f.fieldDiv = b;
  f.renderOn(b);
  $(g).append(b);
  this.renderers[a.id] = f;
};
UIRenderer.prototype.initializeAddFieldForm = function () {
  var b = [];
  for (var a in RenderersDescription) {
    if (a != "hidden") {
      b.push({ id: a, label: RenderersDescription[a] });
    }
  }
  this.addFieldFormData = {
    fields: [
      {
        label: IAS.L("Field Label") + " / " + IAS.L("English Name"),
        type: "text",
        id: "label",
      },
      {
        label: IAS.L("Field Label") + " / " + IAS.L("Secondary Name"),
        type: "text",
        id: "secondaryLabel",
      },
      {
        label: IAS.L("Field Type"),
        type: "dropdown",
        id: "type",
        options: b,
        callBack: IAS.bind(this, "showFieldPreview"),
      },
    ],
  };
  this.addFieldFormContainer = $("<div>");
  this.addFieldUIRenderer = new UIRenderer(
    this.addFieldFormData,
    this.addFieldFormContainer
  );
};
UIRenderer.prototype.promptAddCategory = function () {
  var d = this;
  var b = {
    fields: [
      {
        id: "categoryName",
        type: "text",
        label: IAS.L("Category Name") + " / " + IAS.L("English Name"),
      },
      {
        id: "categorySecondaryName",
        type: "text",
        label: IAS.L("Category Name") + " / " + IAS.L("Secondary Name"),
      },
    ],
  };
  var a = $("<div>");
  var c = new UIRenderer(b, a);
  IAS.popup(a, IAS.L("Add Category"), null, [
    {
      label: IAS.L("OK"),
      bindFunction: function () {
        var k = c.validateAndCheckErrors({ allFieldsRequired: true });
        if (!k) {
          var h = c.getRendererByID("categoryName").getValue();
          var j = c.getRendererByID("categorySecondaryName").getValue();
          var g = d.generateRandomID(h, d.renderedCategories);
          var e = {
            category_id: g,
            category_label: h,
            category_secondary_label: j,
            fields: [],
          };
          var f = d.buildCategoryDiv(e, d.categories.length);
          d.formContainer.append(f);
          d.categories.push(e);
          this.close();
        }
      },
    },
  ]);
};
UIRenderer.prototype.promptAddFieldToCategory = function (a) {
  console.log("Should add field to category: " + a);
  this.initializeAddFieldForm();
  this.addFieldUIRenderer.setValues({
    id: "",
    label: "",
    secondaryLabel: "",
    type: "",
  });
  this.addFieldDivPopup = IAS.popup(
    this.addFieldFormContainer,
    IAS.L("Add Field"),
    null,
    [
      {
        label: IAS.L("OK"),
        bindFunction: IAS.bind(this, "onAddFieldToCategoryButtonClick", a),
      },
    ]
  );
};
UIRenderer.prototype.onAddFieldToCategoryButtonClick = function (b) {
  var g = this;
  var f = this.addFieldUIRenderer.validateAndCheckErrors({
    allFieldsRequired: true,
  });
  if (!f) {
    var d = this.addFieldUIRenderer.getValues();
    delete d.hidden;
    d.id = this.generateRandomID(d.label, this.renderers);
    d.value = d.type != "list" ? "" : { fieldsList: [] };
    if (d.type == "dropdown") {
      d.dontSort = true;
    }
    var a = this.getCategoryByCategoryID(b);
    a.fields.push(d);
    var c = g.renderedCategories[b].find("table[name=fieldsTable]");
    var e = g.buildFieldTr(d, b);
    this.renderReorderTd(e, b, a.fields.length - 1, true);
    c.append(e);
    g.addFieldDivPopup.close();
  } else {
    IAS.popupMsg(IAS.L("Both Field Label and Type are required"));
  }
};
UIRenderer.prototype.showFieldPreview = function () {
  var a = this.addFieldFormContainer;
  a.find(".previewTempField").remove();
  var e = Renderers[this.addFieldUIRenderer.getValueByID("type")];
  if (e) {
    var c = { id: "preview", label: IAS.L(""), type: e };
    var b = new e(c);
    var d = $.createDiv(null, "previewTempField").appendSpan(
      IAS.L("Field Preview") + ": "
    );
    b.renderOn(d);
    a.append(d);
  }
};
UIRenderer.prototype.promptDeleteCategory = function () {
  var b = [];
  for (var a in this.categories) {
    b.push({
      id: this.categories[a].category_id,
      name: this.categories[a].category_label,
    });
  }
  if (this.categories.length > 1) {
    this.deleteFieldsOrCategories(false, b);
  } else {
    IAS.popupMsg(
      IAS.L("You should keep at least one category created"),
      IAS.L("Error Action")
    );
  }
};
UIRenderer.prototype.promptDeleteFieldFromCategory = function (b) {
  this.currentCategoryId = b;
  var a = this.getCategoryByCategoryID(b);
  var c = a.fields;
  var e = [];
  for (var d in c) {
    if (c[d].type != "hidden") {
      e.push({ id: c[d].id, name: c[d].label });
    }
  }
  this.deleteFieldsOrCategories(true, e);
};
UIRenderer.prototype.deleteFieldsOrCategories = function (d, f) {
  var c = d ? IAS.L("Field") : IAS.L("Category");
  if (f.length == 0) {
    IAS.popupMsg(
      IAS.L("There is no") + " " + c.toLowerCase() + " " + IAS.L("to delete")
    );
    return;
  } else {
    var e = this;
    var a = $("<div>");
    this.deleteRenderer = new IAS.TableRenderer(
      [
        { id: "selected", type: "checkbox" },
        { label: c + " " + IAS.L("Name"), id: "name", type: "label" },
      ],
      a,
      f
    );
    var b = new IAS.popup(a, IAS.L("Delete") + " " + c, null, [
      {
        label: IAS.L("Delete"),
        bindFunction: function () {
          var m = e.deleteRenderer.getValues();
          var k = e.deleteRenderer.getRowsData();
          var l = [];
          var h = false;
          for (var j = m.length - 1; j >= 0; j--) {
            if (m[j].selected == true) {
              h = true;
              l.push(k[j].id);
            }
          }
          if (h) {
            var g = IAS.popupYesNo(
              IAS.L("Are you sure you want to delete the selected item(s)?"),
              IAS.L("Delete Confirmation"),
              function () {
                if (d) {
                  e.deleteFields(l);
                } else {
                  e.deleteCategories(l);
                }
                b.close();
              }
            );
          } else {
            IAS.popupMsg(
              IAS.L("Please select the") +
                " " +
                c +
                " " +
                IAS.L("that you want to delete"),
              IAS.L("Error Message")
            );
          }
        },
      },
    ]);
  }
};
UIRenderer.prototype.deleteCategories = function (b) {
  var h = this;
  for (var g in b) {
    var d = b[g];
    for (var c in h.categories) {
      if (h.categories[c].category_id == d) {
        var a = this.categories[c].fields;
        for (var f in a) {
          var e = a[f];
          if (e.type != "hidden") {
            h.renderers[e.id].getRow().remove();
            delete h.renderers[e.id];
          }
        }
        h.categories.splice(c, 1);
        h.renderedCategories[d].remove();
        delete h.renderedCategories[d];
        break;
      }
    }
  }
};
UIRenderer.prototype.deleteFields = function (d) {
  var g = this;
  var a = this.getCategoryByCategoryID(g.currentCategoryId);
  var b = a.fields;
  for (var f in d) {
    var c = d[f];
    g.renderers[c].getRow().remove();
    delete g.renderers[c];
    for (var e in b) {
      if (b[e].id == c) {
        b.splice(e, 1);
        break;
      }
    }
  }
  this.reBuildOrderRows(this.currentCategoryId);
};
UIRenderer.prototype.editCategoryLabel = function (a, f) {
  f.stopPropagation();
  var g = this;
  var c = $("<div>");
  var b = this.getCategoryByCategoryID(a);
  var e = new UIRenderer(
    {
      fields: [
        {
          id: "editCategoryText",
          type: "text",
          label: IAS.L("English Name"),
          value: b.category_label,
        },
        {
          id: "editCategorySecondaryText",
          type: "text",
          label: IAS.L("Secondary Name"),
          value: b.category_secondary_label,
        },
      ],
    },
    c
  );
  var d = new IAS.popup(c, IAS.L("Edit Category"), null, [
    {
      label: IAS.L("OK"),
      bindFunction: function () {
        var h = e.validateAndCheckErrors({ allFieldsRequired: true });
        if (!h) {
          var j = e.getRendererByID("editCategoryText").getValue();
          var k = e.getRendererByID("editCategorySecondaryText").getValue();
          b.category_label = j;
          b.category_secondary_label = k;
          g.displayCategoryLabelAfterEdit(b);
          d.close();
        }
      },
    },
  ]);
};
UIRenderer.prototype.displayCategoryLabelAfterEdit = function (c) {
  var b = this.renderedCategories[c.category_id];
  var a = IAS.GetPrimaryOrSecondaryName(
    c.category_label,
    c.category_secondary_label
  );
  b.prop("title", a);
  var d = b.find(
    "div[class='collapsibleContainerTitle ui-widget-header'] div"
  )[0];
  $(d).empty();
  $(d).append(a);
  this.makeCategoryLabelEditable(c.category_id, b);
};
UIRenderer.prototype.editFieldLabel = function (e) {
  var f = this;
  var b = $("<div>");
  var a = this.renderers[e];
  var d = new UIRenderer(
    {
      fields: [
        {
          id: "editFieldText",
          type: "text",
          label: IAS.L("English Name"),
          value: a.getFieldLabel(),
        },
        {
          id: "editFieldSecondaryText",
          type: "text",
          label: IAS.L("Secondary Name"),
          value: a.getFieldSecondaryLabel(),
        },
      ],
    },
    b
  );
  var c = new IAS.popup(b, IAS.L("Edit Label"), null, [
    {
      label: IAS.L("OK"),
      bindFunction: function () {
        var g = d.validateAndCheckErrors({ allFieldsRequired: true });
        if (!g) {
          var h = d.getRendererByID("editFieldText").getValue();
          var j = d.getRendererByID("editFieldSecondaryText").getValue();
          a.field.label = h;
          a.field.secondaryLabel = j;
          f.displayFieldLabelAfterEdit(a);
          c.close();
        }
      },
    },
  ]);
};
UIRenderer.prototype.displayFieldLabelAfterEdit = function (c) {
  var a = IAS.GetPrimaryOrSecondaryName(c.field.label, c.field.secondaryLabel);
  var b = c.currentRow.children()[0];
  $(b).empty();
  c.renderFieldLabel(b, a);
  if (c.field.required) {
    c.drawRequiredFieldRedStar(b);
  }
};
UIRenderer.prototype.renderReorderTd = function (c, a, b, d) {
  if (this.designerMode && c) {
    var e = $("<td>");
    e.addClass("reorder");
    c.append(e);
    this.buildReorderRows(e, a, b, d);
  }
};
UIRenderer.prototype.buildReorderRows = function (j, a, c, d) {
  var k = $(
    "<img class='orderArrows up' src='/css/icons/1394465056_arrow-up_blue.png'>"
  );
  k.attr({ categoryID: a, order: c }).iasTooltip("Move Up");
  var b = $(
    "<img class='orderArrows down' src='/css/icons/1394464804_arrow-down_blue.png'>"
  );
  b.attr({ categoryID: a, order: c }).iasTooltip("Move Down");
  j.append(k).append("<br>").append(b);
  if (c == 1) {
    k.hide();
  }
  if (d) {
    b.hide();
    var g = c - 1;
    var h = $(".up[categoryID=" + a + "][order=" + g + "]");
    var f = $(".down[categoryID=" + a + "][order=" + g + "]");
    if (h) {
      if (g == 1) {
        f.show();
      } else {
        h.show();
        f.show();
      }
    }
  }
  var e = this;
  $(k).click(function () {
    e.moveRowUp(this);
  });
  $(b).click(function () {
    e.moveRowDown(this);
  });
};
UIRenderer.prototype.moveRowUp = function (a) {
  var e = $(a).parents("tr:first");
  if (e.prevAll().length > 0) {
    var b = $(a).attr("categoryID");
    var d = parseInt($(a).attr("order"));
    var f = $(a);
    var c = $(".down[categoryID=" + b + "][order=" + d + "]");
    var h = parseInt(d) - 1;
    var j = $(".up[categoryID=" + b + "][order=" + h + "]");
    var g = $(".down[categoryID=" + b + "][order=" + h + "]");
    if (e.nextAll().length == 0) {
      g.hide();
      c.show();
    }
    if (e.prevAll().length == 1) {
      j.show();
      f.hide();
    }
    this.swapFields(d, h, b);
    f.attr("order", h);
    c.attr("order", h);
    j.first().attr("order", d);
    g.first().attr("order", d);
    e.insertBefore(e.prev());
  }
};
UIRenderer.prototype.moveRowDown = function (a) {
  var e = $(a).parents("tr:first");
  if (e.nextAll().length > 0) {
    var b = $(a).attr("categoryID");
    var d = parseInt($(a).attr("order"));
    var f = $(".up[categoryID=" + b + "][order=" + d + "]");
    var c = $(a);
    var h = parseInt(d) + 1;
    var j = $(".up[categoryID=" + b + "][order=" + h + "]");
    var g = $(".down[categoryID=" + b + "][order=" + h + "]");
    if (e.prevAll().length == 0) {
      f.show();
      j.hide();
    }
    if (e.nextAll().length == 1) {
      c.hide();
      g.show();
    }
    var k = e.parents("table:first");
    this.swapFields(d, h, b);
    f.attr("order", h);
    c.attr("order", h);
    j.last().attr("order", d);
    g.last().attr("order", d);
    e.insertAfter(e.next());
  }
};
UIRenderer.prototype.reBuildOrderRows = function (b) {
  var c = $(".up[categoryID=" + b + "]");
  var a = $(".down[categoryID=" + b + "]");
  var d = c.length;
  c.each(function (f) {
    e(this, f);
  });
  a.each(function (f) {
    e(this, f);
  });
  function e(f, g) {
    var h = g + 1;
    $(f).attr("order", h);
    if (h == 1) {
      if ($(f).attr("class") == "up") {
        $(f).hide();
      }
    }
    if (h == d) {
      if ($(f).attr("class") == "down") {
        $(f).hide();
      }
    }
  }
};
UIRenderer.prototype.swapFields = function (c, d, a) {
  if (a) {
    var e = function (f, g, j) {
      var h = f[g];
      f[g] = f[j];
      f[j] = h;
    };
    var b = this.getCategoryFields(a);
    e(b, c, d);
  }
};
UIRenderer.prototype.AddPropertiesToFiled = function (s, p) {
  var v = this;
  var F = $("<div>");
  var H = $("<div>");
  var L = $("<div>");
  var r = $("<td>");
  var h = $("<div>");
  var g = $("<div>");
  var l = $("<div>");
  var b;
  var u;
  var q;
  if (this.formData.Form != undefined) {
    for (var a in this.formData.Form.FormDesign.categories) {
      var q = this.formData.Form.FormDesign.categories[a].fields;
      var B = q.filter(function (P, O, N) {
        return P.id == p;
      });
      if (B.length > 0) {
        b = q;
      }
      if (b) {
        break;
      }
    }
  } else {
    u = this.formData.categories[0].fields;
  }
  if (b) {
    q = b;
  } else {
    q = u;
  }
  var o = $("<dropdown>");
  var G = $("<table>");
  var z = {};
  var A = this.getRendererByID(p);
  var I = new TextRenderer({ id: "textFields", lable: "" });
  I.renderOn(H);
  z.textFields = I;
  var C = new DropdownRenderer({ id: "showOnlyIf", lable: "", options: q });
  C.renderOn(r);
  C.inputField.change(
    IAS.bind(this, "onDropdownFieldsChange", C, q, g, l, H, z)
  );
  z.showOnlyIf = C;
  var e = [
    { id: ">", label: ">" },
    { id: "<", label: "<" },
    { id: "==", label: "==" },
  ];
  var k = new DropdownRenderer({ id: "conditon", lable: "", options: e });
  k.renderOn(l);
  z.condition = k;
  var M = { id: "isRequired", label: IAS.L("Is Requered Field") };
  var t = new YesNoRenderer(M);
  t.renderOn(L);
  z.isRequired = t;
  if (A.field.required != null || A.field.only_show_if != null) {
    var w = ["==", "=", "&lt;", "&gt;"];
    var E = [];
    for (var y in A.field) {
      if (y == "required") {
        if (A.field[y] == "true" || A.field[y] == true) {
          t.setValue("true");
        } else {
          t.setValue("false");
        }
      } else {
        if (y == "only_show_if") {
          var D = A.field.only_show_if;
          for (var K in w) {
            if (D.indexOf(w[K]) > 0) {
              E = D.split(w[K]);
              var n = E[0].replace("$", "");
              var c = IAS.Common.htmlify(w[K]);
              var f = E[1];
              break;
            }
          }
          if (n) {
            C.setValue(n);
          }
          if (c) {
            k.setValue(c);
          }
        }
      }
    }
    var d = this.getRendererByID(n);
    if (d) {
      var J = d.getType();
      switch (J) {
        case "dropdown":
        case "yesno":
          var m;
          var F = $("<div>");
          var h = $("<div>");
          if (J == "dropdown" && n != null) {
            m = d.getAllOptions();
          } else {
            m = [
              { id: "hidden", label: "" },
              { id: "true", label: IAS.L("Yes") },
              { id: "false", label: IAS.L("No") },
            ];
          }
          if (m) {
            var j = new DropdownRenderer({
              id: "dropdownOptions",
              lable: "",
              options: m,
            });
            j.setValue(f);
            j.renderOn(h);
            g.empty();
            g.append(h);
          }
          break;
        default:
          g.empty();
          I.setValue(f);
          g.append(l).append(H);
          break;
      }
    }
  }
  G = G.append(
    $("<tr>")
      .append($("<td>").append(IAS.L("Is Required")))
      .append($("<td>").append(L))
  );
  G.append(
    $("<tr>").append($("<td>").append("Show Only If")).append(r.append(g))
  );
  F.append(G);
  var x = IAS.popupOptions();
  x.height = 300;
  x.width = 500;
  this.popupFieldProperity = new IAS.popup(F, IAS.L("Add Properties"), x, [
    {
      label: IAS.L("OK"),
      bindFunction: IAS.bind(this, "onPopupOkClick", z, p),
    },
  ]);
};
UIRenderer.prototype.onPopupOkClick = function (e, a) {
  var c = this;
  var b = {};
  for (var d in e) {
    var f = e[d];
    if (f != "") {
      if (d == "condition") {
        b[d] = f.getText();
      } else {
        b[d] = f.getValue();
      }
    }
  }
  this.addAttributtesToField(e, b, a);
  c.popupFieldProperity.close();
};
UIRenderer.prototype.addAttributtesToField = function (k, e, d) {
  var j = {};
  var m = "false";
  var a;
  var b;
  var g;
  for (var c in e) {
    if (c == "isRequired") {
      if (e[c] == "true") {
        j.required = "true";
      } else {
        j.required = "false";
      }
    } else {
      if (c == "showOnlyIf" && e[c] != null && e[c] != "hidden" && e[c] != "") {
        m = "true";
        g = e[c];
      } else {
        if (c == "condition" && e[c] != null && e[c] != "") {
          a = e[c];
        } else {
          if (c == "textFields" && e[c] != null && e[c] != "") {
            b = e[c];
          } else {
            if (c == "dropdownOptions" && e[c] != null && e[c] != "") {
              var f = e[c];
            }
          }
        }
      }
    }
  }
  if (m) {
    if (g != null && a != null && b) {
      j.only_show_if = "$".concat(g).concat(a).concat(b);
    } else {
      if (g != null && f != null) {
        j.only_show_if = "$".concat(g).concat("==").concat(f);
      }
    }
  } else {
    if (d != null && f == null) {
      j.only_show_if = "";
    }
  }
  var l = this.getRendererByID(d);
  for (var h in j) {
    l.field[h] = j[h];
  }
};
UIRenderer.prototype.onDropdownFieldsChange = function (k, f, a, j, m, h) {
  var e = k.getID();
  var g = this.getOptionFieldTypeByID(f, e);
  switch (g) {
    case "dropdown":
    case "yesno":
      var d;
      var l = $("<div>");
      var b = $("<div>");
      if (g == "yesno") {
        d = [
          { id: "hidden", label: "" },
          { id: "true", label: IAS.L("Yes") },
          { id: "false", label: IAS.L("No") },
        ];
        h.textFields = "";
      } else {
        d = this.renderers[e].getAllOptions();
        h.dropdownOptions = "";
      }
      var c = new DropdownRenderer({
        id: "dropdownOptions",
        lable: IAS.L(""),
        options: d,
      });
      h.dropdownOptions = c;
      c.renderOn(b);
      a.empty();
      a.append(b);
      break;
    default:
      a.empty();
      a.append(j).append(m);
      break;
  }
};
UIRenderer.prototype.getOptionFieldTypeByID = function (b, a) {
  var c;
  for (index = 0; index < b.length; index++) {
    if (b[index].id == a) {
      c = b[index].type;
    }
  }
  return c;
};
UIRenderer.prototype.onChangeInForm = function (caller, event) {
  for (var i in this.renderers) {
    var renderer = this.renderers[i];
    renderer.field.isDisplayed = true;
    if (renderer.field.only_show_if) {
      var condition = renderer.field.only_show_if;
      for (var j in this.renderers) {
        var fieldId = this.renderers[j].getFieldId();
        var value = this.renderers[j].getValue();
        if (condition.search(fieldId) == 1) {
          if (value == "" || value == undefined) {
            value = null;
          }
          condition = condition.replace("$" + fieldId, value);
          condition = IAS.Common.htmlify(condition);
        }
      }
      var row = renderer.getRow();
      if (!this.designerMode) {
        if (eval("(" + condition + ")")) {
          renderer.field.isDisplayed = true;
          row.show();
        } else {
          renderer.field.isDisplayed = false;
          row.hide();
        }
      }
    }
  }
  if (caller && caller.field) {
    var currentFieldID = caller.field.id;
    if (
      currentFieldID &&
      this.renderID2CategoryID.hasOwnProperty(currentFieldID)
    ) {
      var currentCategoryID = this.renderID2CategoryID[currentFieldID];
      if (
        currentCategoryID &&
        this.renderedCategories.hasOwnProperty(currentCategoryID)
      ) {
        var currentCategoryDiv = this.renderedCategories[currentCategoryID];
        var isCategoryHasErrorMarker = IAS.isCategoryHasErrorMarker(
          currentCategoryDiv
        );
        if (isCategoryHasErrorMarker && this.validateAndCheckErrorsStatus) {
          this.validateAndCheckErrors(this.validateAndCheckErrorsStatus);
        }
      }
    }
  }
  if (this.onAfterFormChanged && this.onAfterFormChanged instanceof Function) {
    this.onAfterFormChanged();
  }
};
UIRenderer.ConvertFromJsonToFormObject = function (b) {
  var a = String.format(
    '{"Form": { "{0}":1, "{1}":"", "{2}":"", "{3}": {"categories":[]} } }',
    "ID",
    "PrimaryTitle",
    "SecondaryTitle",
    "FormDesign"
  );
  var c = null;
  if (!b) {
    c = IAS.JsonConverter.fromJsonStringToObject(a);
  } else {
    if (typeof b == "string") {
      c = IAS.JsonConverter.fromJsonStringToObject(b);
    } else {
      if (b.constructor == [].constructor) {
        c = IAS.JsonConverter.fromJsonArrayToObject(b, a);
      } else {
        if (b.constructor == {}.constructor) {
          c = IAS.JsonConverter.fromJsonKeyValueToObject(b, a);
        } else {
          throw "Wrong Json Type";
        }
      }
    }
  }
  return c;
};
UIRenderer.prototype.getFormWithValues = function () {
  var a = this.formData;
  if (a) {
    var c = this;
    var b = function (e) {
      for (var d in e) {
        var f = e[d];
        if (e.hasOwnProperty(d) && typeof f == "object") {
          if (f.hasOwnProperty("categories") && f.categories.length == 0) {
            a = null;
          } else {
            if (f.hasOwnProperty("fields")) {
              c.removeFileTypeProperty(f.fields);
              c.addValueToFields(f.fields);
            } else {
              b.call(this, f);
            }
          }
        }
      }
    };
    b.call(this, a);
  }
  return a;
};
UIRenderer.prototype.addValueToFields = function (a) {
  for (var b in a) {
    if (a[b].hasOwnProperty("id")) {
      a[b].value = this.renderers[a[b].id].getValue();
    }
  }
};
UIRenderer.prototype.removeFileTypeProperty = function (a) {
  for (var b in a) {
    delete a[b].fileType;
  }
};
UIRenderer.prototype.formWithValuesToJson = function () {
  var a = this.getFormWithValues();
  if (a) {
    return IAS.JsonConverter.fromObjectToJsonString(a);
  } else {
    return null;
  }
};
UIRenderer.prototype.generateRandomID = function (b, a) {
  return IAS.Common.generateRandomID(b, a);
};
UIRenderer.prototype.getRendererByID = function (a) {
  return this.renderers[a];
};
UIRenderer.prototype.getCategoryByCategoryID = function (a) {
  var c = {};
  for (var b in this.categories) {
    if (this.categories[b].category_id == a) {
      c = this.categories[b];
      break;
    }
  }
  return c;
};
UIRenderer.prototype.getCategoryFields = function (b) {
  var a = this.getCategoryByCategoryID(b);
  return a.fields;
};
UIRenderer.prototype.getFields = function () {
  var a = [];
  for (var b in this.renderers) {
    var c = this.renderers[b];
    a.push(c.field);
  }
  return a;
};
UIRenderer.prototype.hasHiddenField = function (a) {
  var b = a.some(function (e, d, c) {
    return e.type == "hidden";
  });
  return b;
};
UIRenderer.prototype.clearFields = function () {
  for (var a in this.renderers) {
    var b = this.renderers[a];
    b.setValue("");
  }
};
UIRenderer.prototype.setValues = function (e) {
  if (!e) {
    return;
  }
  for (var a in this.renderers) {
    var c = this.renderers[a];
    var d = c.getFieldId();
    if (e.hasOwnProperty(d)) {
      c.setValue(e[d]);
      var b = this.isFieldsReadOnly;
      if (b) {
        c.readOnly(b);
        c.disableInputField(b);
      }
    }
  }
  this.onChangeInForm();
};
UIRenderer.prototype.getValues = function () {
  var c = {};
  for (var a in this.renderers) {
    var b = this.renderers[a];
    if ((b.field.type != "hidden" || b.field.id) && b.field.isDisplayed) {
      c[b.getFieldId()] = b.getValue();
    }
  }
  return c;
};
UIRenderer.prototype.getValueByID = function (c) {
  var b = this.renderers[c];
  var a = b.getError();
  if (a) {
    IAS.popupMsg(a, IAS.L("Data Validation"));
    return;
  }
  return b.getValue();
};
UIRenderer.prototype.getFilledValues = function () {
  var c = {};
  for (var a in this.renderers) {
    var b = this.renderers[a];
    if (b.field.type != "hidden") {
      if (!b.isEmpty()) {
        c[b.getFieldId()] = b.getValue();
      }
    }
  }
  return c;
};
UIRenderer.prototype.getLabelValues = function () {
  var d = [];
  for (var a in this.renderers) {
    var b = this.renderers[a];
    if (b.field.type != "hidden") {
      var c = { id: b.field.id, label: b.field.label, value: b.getValue() };
      d.push(c);
    }
  }
  return d;
};
UIRenderer.prototype.getFieldsWithThierValue = function () {
  var b = [];
  for (var c in this.renderers) {
    var d = this.renderers[c];
    if (d.field.type != "hidden") {
      var a = d.field;
      a.value = d.getValue();
      b.push(a);
    }
  }
  return b;
};
UIRenderer.prototype.getFileIDs = function () {
  var a = { added: [], deleted: [] };
  for (var c in this.renderers) {
    var d = this.renderers[c];
    if (d.getFileIDs) {
      var b = d.getFileIDs();
      a.added = a.added.concat(b.added);
      a.deleted = a.deleted.concat(b.deleted);
    }
  }
  return a;
};
UIRenderer.prototype.getTextValues = function () {
  var c = {};
  for (var a in this.renderers) {
    var b = this.renderers[a];
    if (b.field.type != "hidden" && b.getText) {
      c[b.getFieldId()] = b.getText();
    }
  }
  return c;
};
UIRenderer.prototype.setAsReadOnly = function (b) {
  for (var a in this.renderers) {
    var c = this.renderers[a];
    c.readOnly(b);
  }
};
UIRenderer.prototype.disableInputFields = function (b) {
  for (var a in this.renderers) {
    var c = this.renderers[a];
    c.disableInputField(true);
  }
};
UIRenderer.prototype.isCategoryHasErrorOnNote = function (a) {
  var b = false;
  var c = this.renderedCategories[a];
  var d = c.find("div.NoteRendererErrorStyle");
  var b = d && d.length > 0;
  return b;
};
UIRenderer.prototype.validateAndCheckErrors = function (f) {
  this.validateAndCheckErrorsStatus = f;
  if (this.renderedCategories) {
    for (var e in this.renderedCategories) {
      var d = this.isCategoryHasErrorOnNote(e);
      if (!d) {
        IAS.removeCategoryErrorMarker(this.renderedCategories[e]);
      }
    }
  }
  var c = false;
  for (var e in this.renderers) {
    var g = this.renderers[e];
    if (g.validateAndCheckErrors(f)) {
      c = true;
      var b = this.renderID2CategoryID[e];
      if (b) {
        var a = this.renderedCategories[b];
        IAS.setCategoryErrorMarker(a);
      }
    }
  }
  return c;
};
UIRenderer.prototype.removeErrorMarkers = function () {
  this.formContainer
    .find(".inputFieldErrorVisible")
    .removeClass("inputFieldErrorVisible");
};
UIRenderer.prototype.afterRender = function () {
  var f = Object.keys(this.renderers).length;
  for (var c in this.renderers) {
    var e = this.renderers[c];
    if (!this.designerMode && e.field.type == "list" && f == 2) {
      var d = e.getRow();
      var a = $(d).find("td")[0];
      $(a).css("width", "5%");
    }
    var b = e.afterRender();
  }
};
UIRenderer.prototype.getCategoryByRendererID = function (b) {
  var a = this.renderID2CategoryID[b];
  return this.getCategoryByCategoryID(a);
};
UIRenderer.prototype.addField = function (c, e) {
  var f = this.getRendererByID(c.id);
  if (!f) {
    var a = null;
    if (!e) {
      a = this.categories[this.categories.length - 1];
    } else {
      a = this.getCategoryByRendererID(e);
    }
    if (a) {
      var d = this.buildFieldTr(c, a.category_id);
      this.renderReorderTd(d, a.category_id, a.fields.length, true);
      var b = this.renderedCategories[a.category_id].find(
        "table[name=fieldsTable]"
      );
      b.append(d);
    }
  }
};
UIRenderer.prototype.addOrEditField = function (a, b) {
  var c = this.getRendererByID(a.id);
  if (c) {
    c.setValue(a.value);
  } else {
    this.addField(a, b);
  }
};
UIRenderer.prototype.removeField = function (e) {
  var d = this.getRendererByID(e);
  if (d) {
    var a = this.getCategoryByRendererID(e);
    var b = a.fields;
    d.getRow().remove();
    delete this.renderers[e];
    for (var c in b) {
      if (b[c].id == e) {
        b.splice(c, 1);
        break;
      }
    }
    this.reBuildOrderRows(a.category_id);
  }
};

(function (C, H, z) {
  function K(c, b) {
    var e, a;
    if (C.isArray(c)) {
      for (e = c.length - 1; e >= 0; e--) {
        (a = c[e]),
          (C.type(a) === "string" && F.transports[a]) ||
            (b.log(
              "Invalid transport: " +
                a +
                ", removing it from the transports list."
            ),
            c.splice(e, 1));
      }
      c.length === 0 &&
        (b.log("No transports remain within the specified transport array."),
        (c = null));
    } else {
      if (F.transports[c] || c === "auto") {
        if (c === "auto" && F._.ieVersion <= 8) {
          return ["longPolling"];
        }
      } else {
        b.log("Invalid transport: " + c.toString() + "."), (c = null);
      }
    }
    return c;
  }
  function g(a) {
    return a === "http:" ? 80 : a === "https:" ? 443 : void 0;
  }
  function d(a, b) {
    return b.match(/:\d+$/) ? b : b + ":" + g(a);
  }
  function A(c, a) {
    var e = this,
      b = [];
    e.tryBuffer = function (f) {
      return c.state === C.signalR.connectionState.connecting
        ? (b.push(f), !0)
        : !1;
    };
    e.drain = function () {
      if (c.state === C.signalR.connectionState.connected) {
        while (b.length > 0) {
          a(b.shift());
        }
      }
    };
    e.clear = function () {
      b = [];
    };
  }
  var q = {
    nojQuery:
      "jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.",
    noTransportOnInit:
      "No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.",
    errorOnNegotiate: "Error during negotiation request.",
    stoppedWhileLoading: "The connection was stopped during page load.",
    stoppedWhileNegotiating:
      "The connection was stopped during the negotiate request.",
    errorParsingNegotiateResponse: "Error parsing negotiate response.",
    errorDuringStartRequest:
      "Error during start request. Stopping the connection.",
    stoppedDuringStartRequest:
      "The connection was stopped during the start request.",
    errorParsingStartResponse:
      "Error parsing start response: '{0}'. Stopping the connection.",
    invalidStartResponse:
      "Invalid start response: '{0}'. Stopping the connection.",
    protocolIncompatible:
      "You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.",
    sendFailed: "Send failed.",
    parseFailed: "Failed at parsing response: {0}",
    longPollFailed: "Long polling request failed.",
    eventSourceFailedToConnect: "EventSource failed to connect.",
    eventSourceError: "Error raised by EventSource",
    webSocketClosed: "WebSocket closed.",
    pingServerFailedInvalidResponse:
      "Invalid ping response when pinging server: '{0}'.",
    pingServerFailed: "Failed to ping server.",
    pingServerFailedStatusCode:
      "Failed to ping server.  Server responded with status code {0}, stopping the connection.",
    pingServerFailedParse:
      "Failed to parse ping server response, stopping the connection.",
    noConnectionTransport:
      "Connection is in an invalid state, there is no transport active.",
    webSocketsInvalidState:
      "The Web Socket transport is in an invalid state, transitioning into reconnecting.",
    reconnectTimeout:
      "Couldn't reconnect within the configured timeout of {0} ms, disconnecting.",
    reconnectWindowTimeout:
      "The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection.",
  };
  if (typeof C != "function") {
    throw new Error(q.nojQuery);
  }
  var F,
    x,
    G = H.document.readyState === "complete",
    m = C(H),
    j = "__Negotiate Aborted__",
    I = {
      onStart: "onStart",
      onStarting: "onStarting",
      onReceived: "onReceived",
      onError: "onError",
      onConnectionSlow: "onConnectionSlow",
      onReconnecting: "onReconnecting",
      onReconnect: "onReconnect",
      onStateChanged: "onStateChanged",
      onDisconnect: "onDisconnect",
    },
    J = function (b, a) {
      if (a !== !1) {
        var c;
        typeof H.console != "undefined" &&
          ((c = "[" + new Date().toTimeString() + "] SignalR: " + b),
          H.console.debug
            ? H.console.debug(c)
            : H.console.log && H.console.log(c));
      }
    },
    D = function (c, a, b) {
      return a === c.state
        ? ((c.state = b),
          C(c).triggerHandler(I.onStateChanged, [{ oldState: a, newState: b }]),
          !0)
        : !1;
    },
    L = function (a) {
      return a.state === F.connectionState.disconnected;
    },
    B = function (a) {
      return a._.keepAliveData.activated && a.transport.supportsKeepAlive(a);
    },
    E = function (c) {
      var b, a;
      c._.configuredStopReconnectingTimeout ||
        ((a = function (f) {
          var e = F._.format(F.resources.reconnectTimeout, f.disconnectTimeout);
          f.log(e);
          C(f).triggerHandler(I.onError, [F._.error(e, "TimeoutException")]);
          f.stop(!1, !1);
        }),
        c.reconnecting(function () {
          var e = this;
          e.state === F.connectionState.reconnecting &&
            (b = H.setTimeout(function () {
              a(e);
            }, e.disconnectTimeout));
        }),
        c.stateChanged(function (e) {
          e.oldState === F.connectionState.reconnecting && H.clearTimeout(b);
        }),
        (c._.configuredStopReconnectingTimeout = !0));
    };
  F = function (b, c, a) {
    return new F.fn.init(b, c, a);
  };
  F._ = {
    defaultContentType: "application/x-www-form-urlencoded; charset=UTF-8",
    ieVersion: (function () {
      var a, b;
      return (
        H.navigator.appName === "Microsoft Internet Explorer" &&
          ((b = /MSIE ([0-9]+\.[0-9]+)/.exec(H.navigator.userAgent)),
          b && (a = H.parseFloat(b[1]))),
        a
      );
    })(),
    error: function (b, e, a) {
      var c = new Error(b);
      return (c.source = e), typeof a != "undefined" && (c.context = a), c;
    },
    transportError: function (b, e, c, h) {
      var a = this.error(b, c, h);
      return (a.transport = e ? e.name : z), a;
    },
    format: function () {
      for (var b = arguments[0], a = 0; a < arguments.length - 1; a++) {
        b = b.replace("{" + a + "}", arguments[a + 1]);
      }
      return b;
    },
    firefoxMajorVersion: function (a) {
      var b = a.match(/Firefox\/(\d+)/);
      return !b || !b.length || b.length < 2 ? 0 : parseInt(b[1], 10);
    },
    configurePingInterval: function (c) {
      var b = c._.config,
        a = function (e) {
          C(c).triggerHandler(I.onError, [e]);
        };
      b &&
        !c._.pingIntervalId &&
        b.pingInterval &&
        (c._.pingIntervalId = H.setInterval(function () {
          F.transports._logic.pingServer(c).fail(a);
        }, b.pingInterval));
    },
  };
  F.events = I;
  F.resources = q;
  F.ajaxDefaults = {
    processData: !0,
    timeout: null,
    async: !0,
    global: !1,
    cache: !1,
  };
  F.changeState = D;
  F.isDisconnecting = L;
  F.connectionState = {
    connecting: 0,
    connected: 1,
    reconnecting: 2,
    disconnected: 4,
  };
  F.hub = {
    start: function () {
      throw new Error(
        "SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>."
      );
    },
  };
  m.load(function () {
    G = !0;
  });
  F.fn = F.prototype = {
    init: function (e, b, c) {
      var a = C(this);
      this.url = e;
      this.qs = b;
      this.lastError = null;
      this._ = {
        keepAliveData: {},
        connectingMessageBuffer: new A(this, function (f) {
          a.triggerHandler(I.onReceived, [f]);
        }),
        onFailedTimeoutHandle: null,
        lastMessageAt: new Date().getTime(),
        lastActiveAt: new Date().getTime(),
        beatInterval: 5000,
        beatHandle: null,
        totalTransportConnectTimeout: 0,
      };
      typeof c == "boolean" && (this.logging = c);
    },
    _parseResponse: function (a) {
      var b = this;
      return a ? (typeof a == "string" ? b.json.parse(a) : a) : a;
    },
    _originalJson: H.JSON,
    json: H.JSON,
    isCrossDomain: function (a, b) {
      var c;
      return ((a = C.trim(a)), (b = b || H.location), a.indexOf("http") !== 0)
        ? !1
        : ((c = H.document.createElement("a")),
          (c.href = a),
          c.protocol + d(c.protocol, c.host) !==
            b.protocol + d(b.protocol, b.host));
    },
    ajaxDataType: "text",
    contentType: "application/json; charset=UTF-8",
    logging: !1,
    state: F.connectionState.disconnected,
    clientProtocol: "1.4",
    reconnectDelay: 2000,
    transportConnectTimeout: 0,
    disconnectTimeout: 30000,
    reconnectWindow: 30000,
    keepAliveWarnAt: 2 / 3,
    start: function (o, n) {
      var c = this,
        r = {
          pingInterval: 300000,
          waitForPageLoad: !0,
          transport: "auto",
          jsonp: !1,
        },
        f,
        s = c._deferral || C.Deferred(),
        e = H.document.createElement("a"),
        p,
        l;
      if (((c.lastError = null), (c._deferral = s), !c.json)) {
        throw new Error(
          "SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8."
        );
      }
      if (
        (C.type(o) === "function"
          ? (n = o)
          : C.type(o) === "object" &&
            (C.extend(r, o),
            C.type(r.callback) === "function" && (n = r.callback)),
        (r.transport = K(r.transport, c)),
        !r.transport)
      ) {
        throw new Error(
          "SignalR: Invalid transport(s) specified, aborting start."
        );
      }
      return ((c._.config = r), !G && r.waitForPageLoad === !0)
        ? ((c._.deferredStartHandler = function () {
            c.start(o, n);
          }),
          m.bind("load", c._.deferredStartHandler),
          s.promise())
        : c.state === F.connectionState.connecting
        ? s.promise()
        : D(c, F.connectionState.disconnected, F.connectionState.connecting) ===
          !1
        ? (s.resolve(c), s.promise())
        : (E(c),
          (e.href = c.url),
          e.protocol && e.protocol !== ":"
            ? ((c.protocol = e.protocol), (c.host = e.host))
            : ((c.protocol = H.document.location.protocol),
              (c.host = e.host || H.document.location.host)),
          (c.baseUrl = c.protocol + "//" + c.host),
          (c.wsProtocol = c.protocol === "https:" ? "wss://" : "ws://"),
          r.transport === "auto" &&
            r.jsonp === !0 &&
            (r.transport = "longPolling"),
          c.url.indexOf("//") === 0 &&
            ((c.url = H.location.protocol + c.url),
            c.log(
              "Protocol relative URL detected, normalizing it to '" +
                c.url +
                "'."
            )),
          this.isCrossDomain(c.url) &&
            (c.log("Auto detected cross domain url."),
            r.transport === "auto" &&
              (r.transport = ["webSockets", "serverSentEvents", "longPolling"]),
            typeof r.withCredentials == "undefined" && (r.withCredentials = !0),
            r.jsonp ||
              ((r.jsonp = !C.support.cors),
              r.jsonp &&
                c.log(
                  "Using jsonp because this browser doesn't support CORS."
                )),
            (c.contentType = F._.defaultContentType)),
          (c.withCredentials = r.withCredentials),
          (c.ajaxDataType = r.jsonp ? "jsonp" : "text"),
          C(c).bind(I.onStart, function () {
            C.type(n) === "function" && n.call(c);
            s.resolve(c);
          }),
          (f = function (u, M) {
            var y = F._.error(q.noTransportOnInit);
            if (((M = M || 0), M >= u.length)) {
              C(c).triggerHandler(I.onError, [y]);
              s.reject(y);
              c.stop();
              return;
            }
            if (c.state !== F.connectionState.disconnected) {
              var O = u[M],
                t = F.transports[O],
                k = !1,
                N = function () {
                  k ||
                    ((k = !0),
                    H.clearTimeout(c._.onFailedTimeoutHandle),
                    t.stop(c),
                    f(u, M + 1));
                };
              c.transport = t;
              try {
                c._.onFailedTimeoutHandle = H.setTimeout(function () {
                  c.log(t.name + " timed out when trying to connect.");
                  N();
                }, c._.totalTransportConnectTimeout);
                t.start(
                  c,
                  function () {
                    var b = function () {
                      var v =
                          F._.firefoxMajorVersion(H.navigator.userAgent) >= 11,
                        h = !!c.withCredentials && v;
                      c.log(
                        "The start request succeeded. Transitioning to the connected state."
                      );
                      B(c) && F.transports._logic.monitorKeepAlive(c);
                      F.transports._logic.startHeartbeat(c);
                      F._.configurePingInterval(c);
                      D(
                        c,
                        F.connectionState.connecting,
                        F.connectionState.connected
                      ) ||
                        c.log(
                          "WARNING! The connection was not in the connecting state."
                        );
                      c._.connectingMessageBuffer.drain();
                      C(c).triggerHandler(I.onStart);
                      m.bind("unload", function () {
                        c.log("Window unloading, stopping the connection.");
                        c.stop(h);
                      });
                      v &&
                        m.bind("beforeunload", function () {
                          H.setTimeout(function () {
                            c.stop(h);
                          }, 0);
                        });
                    };
                    if (!k) {
                      if (
                        ((k = !0),
                        H.clearTimeout(c._.onFailedTimeoutHandle),
                        c.state === F.connectionState.disconnected)
                      ) {
                        return;
                      }
                      c.log(
                        t.name +
                          " transport selected. Initiating start request."
                      );
                      F.transports._logic.ajaxStart(c, b);
                    }
                  },
                  N
                );
              } catch (a) {
                c.log(
                  t.name +
                    " transport threw '" +
                    a.message +
                    "' when attempting to start."
                );
                N();
              }
            }
          }),
          (p = c.url + "/negotiate"),
          (l = function (h, b) {
            var a = F._.error(q.errorOnNegotiate, h, b._.negotiateRequest);
            C(b).triggerHandler(I.onError, a);
            s.reject(a);
            b.stop();
          }),
          C(c).triggerHandler(I.onStarting),
          (p = F.transports._logic.prepareQueryString(c, p)),
          c.log("Negotiating with '" + p + "'."),
          (c._.negotiateRequest = F.transports._logic.ajax(c, {
            url: p,
            error: function (a, b) {
              b !== j
                ? l(a, c)
                : s.reject(
                    F._.error(
                      q.stoppedWhileNegotiating,
                      null,
                      c._.negotiateRequest
                    )
                  );
            },
            success: function (y) {
              var u,
                b,
                k,
                v = [],
                w = [];
              try {
                u = c._parseResponse(y);
              } catch (a) {
                l(F._.error(q.errorParsingNegotiateResponse, a), c);
                return;
              }
              if (
                ((b = c._.keepAliveData),
                (c.appRelativeUrl = u.Url),
                (c.id = u.ConnectionId),
                (c.token = u.ConnectionToken),
                (c.webSocketServerUrl = u.WebSocketServerUrl),
                (c._.longPollDelay = u.LongPollDelay * 1000),
                (c.disconnectTimeout = u.DisconnectTimeout * 1000),
                (c._.totalTransportConnectTimeout =
                  c.transportConnectTimeout + u.TransportConnectTimeout * 1000),
                u.KeepAliveTimeout
                  ? ((b.activated = !0),
                    (b.timeout = u.KeepAliveTimeout * 1000),
                    (b.timeoutWarning = b.timeout * c.keepAliveWarnAt),
                    (c._.beatInterval = (b.timeout - b.timeoutWarning) / 3))
                  : (b.activated = !1),
                (c.reconnectWindow = c.disconnectTimeout + (b.timeout || 0)),
                !u.ProtocolVersion || u.ProtocolVersion !== c.clientProtocol)
              ) {
                k = F._.error(
                  F._.format(
                    q.protocolIncompatible,
                    c.clientProtocol,
                    u.ProtocolVersion
                  )
                );
                C(c).triggerHandler(I.onError, [k]);
                s.reject(k);
                return;
              }
              C.each(F.transports, function (h) {
                if (
                  h.indexOf("_") === 0 ||
                  (h === "webSockets" && !u.TryWebSockets)
                ) {
                  return !0;
                }
                w.push(h);
              });
              C.isArray(r.transport)
                ? C.each(r.transport, function (M, h) {
                    C.inArray(h, w) >= 0 && v.push(h);
                  })
                : r.transport === "auto"
                ? (v = w)
                : C.inArray(r.transport, w) >= 0 && v.push(r.transport);
              f(v);
            },
          })),
          s.promise());
    },
    starting: function (b) {
      var a = this;
      return (
        C(a).bind(I.onStarting, function () {
          b.call(a);
        }),
        a
      );
    },
    send: function (a) {
      var b = this;
      if (b.state === F.connectionState.disconnected) {
        throw new Error(
          "SignalR: Connection must be started before data can be sent. Call .start() before .send()"
        );
      }
      if (b.state === F.connectionState.connecting) {
        throw new Error(
          "SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started."
        );
      }
      return b.transport.send(b, a), b;
    },
    received: function (b) {
      var a = this;
      return (
        C(a).bind(I.onReceived, function (c, e) {
          b.call(a, e);
        }),
        a
      );
    },
    stateChanged: function (b) {
      var a = this;
      return (
        C(a).bind(I.onStateChanged, function (c, e) {
          b.call(a, e);
        }),
        a
      );
    },
    error: function (b) {
      var a = this;
      return (
        C(a).bind(I.onError, function (c, e, f) {
          a.lastError = e;
          b.call(a, e, f);
        }),
        a
      );
    },
    disconnected: function (b) {
      var a = this;
      return (
        C(a).bind(I.onDisconnect, function () {
          b.call(a);
        }),
        a
      );
    },
    connectionSlow: function (b) {
      var a = this;
      return (
        C(a).bind(I.onConnectionSlow, function () {
          b.call(a);
        }),
        a
      );
    },
    reconnecting: function (b) {
      var a = this;
      return (
        C(a).bind(I.onReconnecting, function () {
          b.call(a);
        }),
        a
      );
    },
    reconnected: function (b) {
      var a = this;
      return (
        C(a).bind(I.onReconnect, function () {
          b.call(a);
        }),
        a
      );
    },
    stop: function (e, c) {
      var b = this,
        f = b._deferral;
      if (
        (b._.deferredStartHandler && m.unbind("load", b._.deferredStartHandler),
        delete b._.config,
        delete b._.deferredStartHandler,
        !G && (!b._.config || b._.config.waitForPageLoad === !0))
      ) {
        b.log("Stopping connection prior to negotiate.");
        f && f.reject(F._.error(q.stoppedWhileLoading));
        return;
      }
      if (b.state !== F.connectionState.disconnected) {
        return (
          b.log("Stopping connection."),
          D(b, b.state, F.connectionState.disconnected),
          H.clearTimeout(b._.beatHandle),
          H.clearTimeout(b._.onFailedTimeoutHandle),
          H.clearInterval(b._.pingIntervalId),
          b.transport &&
            (b.transport.stop(b),
            c !== !1 && b.transport.abort(b, e),
            B(b) && F.transports._logic.stopMonitoringKeepAlive(b),
            (b.transport = null)),
          b._.negotiateRequest &&
            (b._.negotiateRequest.abort(j), delete b._.negotiateRequest),
          F.transports._logic.tryAbortStartRequest(b),
          C(b).triggerHandler(I.onDisconnect),
          delete b._deferral,
          delete b.messageId,
          delete b.groupsToken,
          delete b.id,
          delete b._.pingIntervalId,
          delete b._.lastMessageAt,
          delete b._.lastActiveAt,
          delete b._.longPollDelay,
          b._.connectingMessageBuffer.clear(),
          b
        );
      }
    },
    log: function (a) {
      J(a, this.logging);
    },
  };
  F.fn.init.prototype = F.fn;
  F.noConflict = function () {
    return C.connection === F && (C.connection = x), F;
  };
  C.connection && (x = C.connection);
  C.connection = C.signalR = F;
})(window.jQuery, window),
  (function (g, m) {
    function j(e) {
      e._.keepAliveData.monitoring && c(e);
      k.markActive(e) &&
        (e._.beatHandle = m.setTimeout(function () {
          j(e);
        }, e._.beatInterval));
    }
    function c(n) {
      var h = n._.keepAliveData,
        e;
      n.state === d.connectionState.connected &&
        ((e = new Date().getTime() - n._.lastMessageAt),
        e >= h.timeout
          ? (n.log(
              "Keep alive timed out.  Notifying transport that connection has been lost."
            ),
            n.transport.lostConnection(n))
          : e >= h.timeoutWarning
          ? h.userNotified ||
            (n.log("Keep alive has been missed, connection may be dead/slow."),
            g(n).triggerHandler(p.onConnectionSlow),
            (h.userNotified = !0))
          : (h.userNotified = !1));
    }
    function b(f, h) {
      var e = f.url + h;
      return (
        f.transport && (e += "?transport=" + f.transport.name),
        k.prepareQueryString(f, e)
      );
    }
    var d = g.signalR,
      p = g.signalR.events,
      l = g.signalR.changeState,
      a = "__Start Aborted__",
      k;
    d.transports = {};
    k = d.transports._logic = {
      ajax: function (f, e) {
        return g.ajax(
          g.extend(
            !0,
            {},
            g.signalR.ajaxDefaults,
            {
              type: "GET",
              data: {},
              xhrFields: { withCredentials: f.withCredentials },
              contentType: f.contentType,
              dataType: f.ajaxDataType,
            },
            e
          )
        );
      },
      pingServer: function (o) {
        var h,
          n,
          q = g.Deferred();
        return (
          o.transport
            ? ((h = o.url + "/ping"),
              (h = k.addQs(h, o.qs)),
              (n = k.ajax(o, {
                url: h,
                success: function (s) {
                  var t;
                  try {
                    t = o._parseResponse(s);
                  } catch (f) {
                    q.reject(
                      d._.transportError(
                        d.resources.pingServerFailedParse,
                        o.transport,
                        f,
                        n
                      )
                    );
                    o.stop();
                    return;
                  }
                  t.Response === "pong"
                    ? q.resolve()
                    : q.reject(
                        d._.transportError(
                          d._.format(
                            d.resources.pingServerFailedInvalidResponse,
                            s
                          ),
                          o.transport,
                          null,
                          n
                        )
                      );
                },
                error: function (e) {
                  e.status === 401 || e.status === 403
                    ? (q.reject(
                        d._.transportError(
                          d._.format(
                            d.resources.pingServerFailedStatusCode,
                            e.status
                          ),
                          o.transport,
                          e,
                          n
                        )
                      ),
                      o.stop())
                    : q.reject(
                        d._.transportError(
                          d.resources.pingServerFailed,
                          o.transport,
                          e,
                          n
                        )
                      );
                },
              })))
            : q.reject(
                d._.transportError(
                  d.resources.noConnectionTransport,
                  o.transport
                )
              ),
          q.promise()
        );
      },
      prepareQueryString: function (f, e) {
        var h;
        return (
          (h = k.addQs(e, "clientProtocol=" + f.clientProtocol)),
          (h = k.addQs(h, f.qs)),
          f.token && (h += "&connectionToken=" + m.encodeURIComponent(f.token)),
          f.data && (h += "&connectionData=" + m.encodeURIComponent(f.data)),
          h
        );
      },
      addQs: function (h, e) {
        var f = h.indexOf("?") !== -1 ? "&" : "?",
          n;
        if (!e) {
          return h;
        }
        if (typeof e == "object") {
          return h + f + g.param(e);
        }
        if (typeof e == "string") {
          return (
            (n = e.charAt(0)), (n === "?" || n === "&") && (f = ""), h + f + e
          );
        }
        throw new Error(
          "Query string property must be either a string or object."
        );
      },
      getUrl: function (t, r, x, q) {
        var w = r === "webSockets" ? "" : t.baseUrl,
          h = w + t.appRelativeUrl,
          v = "transport=" + r;
        return (
          t.groupsToken &&
            (v += "&groupsToken=" + m.encodeURIComponent(t.groupsToken)),
          x
            ? ((h += q ? "/poll" : "/reconnect"),
              t.messageId &&
                (v += "&messageId=" + m.encodeURIComponent(t.messageId)))
            : (h += "/connect"),
          (h += "?" + v),
          (h = k.prepareQueryString(t, h)),
          h + ("&tid=" + Math.floor(Math.random() * 11))
        );
      },
      maximizePersistentResponse: function (e) {
        return {
          MessageId: e.C,
          Messages: e.M,
          Initialized: typeof e.S != "undefined" ? !0 : !1,
          Disconnect: typeof e.D != "undefined" ? !0 : !1,
          ShouldReconnect: typeof e.T != "undefined" ? !0 : !1,
          LongPollDelay: e.L,
          GroupsToken: e.G,
        };
      },
      updateGroups: function (e, f) {
        f && (e.groupsToken = f);
      },
      stringifySend: function (e, f) {
        return typeof f == "string" || typeof f == "undefined" || f === null
          ? f
          : e.json.stringify(f);
      },
      ajaxSend: function (v, n) {
        var q = k.stringifySend(v, n),
          f = b(v, "/send"),
          r,
          u = function (h, e) {
            g(e).triggerHandler(p.onError, [
              d._.transportError(d.resources.sendFailed, e.transport, h, r),
              n,
            ]);
          };
        return (r = k.ajax(v, {
          url: f,
          type: v.ajaxDataType === "jsonp" ? "GET" : "POST",
          contentType: d._.defaultContentType,
          data: { data: q },
          success: function (h) {
            var e;
            if (h) {
              try {
                e = v._parseResponse(h);
              } catch (o) {
                u(o, v);
                v.stop();
                return;
              }
              k.triggerReceived(v, e);
            }
          },
          error: function (h, e) {
            e !== "abort" && e !== "parsererror" && u(h, v);
          },
        }));
      },
      ajaxAbort: function (f, h) {
        if (typeof f.transport != "undefined") {
          h = typeof h == "undefined" ? !0 : h;
          var e = b(f, "/abort");
          k.ajax(f, { url: e, async: h, timeout: 1000, type: "POST" });
          f.log("Fired ajax abort async = " + h + ".");
        }
      },
      ajaxStart: function (q, f) {
        var e = function (o) {
            var h = q._deferral;
            h && h.reject(o);
          },
          n = function (h) {
            q.log("The start request failed. Stopping the connection.");
            g(q).triggerHandler(p.onError, [h]);
            e(h);
            q.stop();
          };
        q._.startRequest = k.ajax(q, {
          url: b(q, "/start"),
          success: function (s, t, v) {
            var o;
            try {
              o = q._parseResponse(s);
            } catch (h) {
              n(
                d._.error(
                  d._.format(d.resources.errorParsingStartResponse, s),
                  h,
                  v
                )
              );
              return;
            }
            o.Response === "started"
              ? f()
              : n(
                  d._.error(
                    d._.format(d.resources.invalidStartResponse, s),
                    null,
                    v
                  )
                );
          },
          error: function (h, o, s) {
            o !== a
              ? n(d._.error(d.resources.errorDuringStartRequest, s, h))
              : (q.log(
                  "The start request aborted because connection.stop() was called."
                ),
                e(d._.error(d.resources.stoppedDuringStartRequest, null, h)));
          },
        });
      },
      tryAbortStartRequest: function (e) {
        e._.startRequest &&
          (e._.startRequest.abort(a), delete e._.startRequest);
      },
      tryInitialize: function (e, f) {
        e.Initialized && f();
      },
      triggerReceived: function (f, e) {
        f._.connectingMessageBuffer.tryBuffer(e) ||
          g(f).triggerHandler(p.onReceived, [e]);
      },
      processMessages: function (n, h, o) {
        var e;
        k.markLastMessage(n);
        h &&
          ((e = k.maximizePersistentResponse(h)),
          k.updateGroups(n, e.GroupsToken),
          e.MessageId && (n.messageId = e.MessageId),
          e.Messages &&
            (g.each(e.Messages, function (q, f) {
              k.triggerReceived(n, f);
            }),
            k.tryInitialize(e, o)));
      },
      monitorKeepAlive: function (f) {
        var e = f._.keepAliveData;
        e.monitoring
          ? f.log(
              "Tried to monitor keep alive but it's already being monitored."
            )
          : ((e.monitoring = !0),
            k.markLastMessage(f),
            (f._.keepAliveData.reconnectKeepAliveUpdate = function () {
              k.markLastMessage(f);
            }),
            g(f).bind(
              p.onReconnect,
              f._.keepAliveData.reconnectKeepAliveUpdate
            ),
            f.log(
              "Now monitoring keep alive with a warning timeout of " +
                e.timeoutWarning +
                " and a connection lost timeout of " +
                e.timeout +
                "."
            ));
      },
      stopMonitoringKeepAlive: function (f) {
        var e = f._.keepAliveData;
        e.monitoring &&
          ((e.monitoring = !1),
          g(f).unbind(
            p.onReconnect,
            f._.keepAliveData.reconnectKeepAliveUpdate
          ),
          (f._.keepAliveData = {}),
          f.log("Stopping the monitoring of the keep alive."));
      },
      startHeartbeat: function (e) {
        e._.lastActiveAt = new Date().getTime();
        j(e);
      },
      markLastMessage: function (e) {
        e._.lastMessageAt = new Date().getTime();
      },
      markActive: function (e) {
        return k.verifyLastActive(e)
          ? ((e._.lastActiveAt = new Date().getTime()), !0)
          : !1;
      },
      isConnectedOrReconnecting: function (e) {
        return (
          e.state === d.connectionState.connected ||
          e.state === d.connectionState.reconnecting
        );
      },
      ensureReconnectingState: function (e) {
        return (
          l(e, d.connectionState.connected, d.connectionState.reconnecting) ===
            !0 && g(e).triggerHandler(p.onReconnecting),
          e.state === d.connectionState.reconnecting
        );
      },
      clearReconnectTimeout: function (e) {
        e &&
          e._.reconnectTimeout &&
          (m.clearTimeout(e._.reconnectTimeout), delete e._.reconnectTimeout);
      },
      verifyLastActive: function (f) {
        if (new Date().getTime() - f._.lastActiveAt >= f.reconnectWindow) {
          var e = d._.format(
            d.resources.reconnectWindowTimeout,
            new Date(f._.lastActiveAt),
            f.reconnectWindow
          );
          return (
            f.log(e),
            g(f).triggerHandler(p.onError, [d._.error(e, "TimeoutException")]),
            f.stop(!1, !1),
            !1
          );
        }
        return !0;
      },
      reconnect: function (h, o) {
        var e = d.transports[o];
        if (k.isConnectedOrReconnecting(h) && !h._.reconnectTimeout) {
          if (!k.verifyLastActive(h)) {
            return;
          }
          h._.reconnectTimeout = m.setTimeout(function () {
            k.verifyLastActive(h) &&
              (e.stop(h),
              k.ensureReconnectingState(h) &&
                (h.log(o + " reconnecting."), e.start(h)));
          }, h.reconnectDelay);
        }
      },
      handleParseFailure: function (u, s, n, h, q) {
        u.state === d.connectionState.connecting
          ? (u.log(
              "Failed to parse server response while attempting to connect."
            ),
            h())
          : (g(u).triggerHandler(p.onError, [
              d._.transportError(
                d._.format(d.resources.parseFailed, s),
                u.transport,
                n,
                q
              ),
            ]),
            u.stop());
      },
      foreverFrame: { count: 0, connections: {} },
    };
  })(window.jQuery, window),
  (function (c, e) {
    var d = c.signalR,
      g = c.signalR.events,
      a = c.signalR.changeState,
      b = d.transports._logic;
    d.transports.webSockets = {
      name: "webSockets",
      supportsKeepAlive: function () {
        return !0;
      },
      send: function (l, j) {
        var h = b.stringifySend(l, j);
        try {
          l.socket.send(h);
        } catch (k) {
          c(l).triggerHandler(g.onError, [
            d._.transportError(
              d.resources.webSocketsInvalidState,
              l.transport,
              k,
              l.socket
            ),
            j,
          ]);
        }
      },
      start: function (k, p, q) {
        var m,
          j = !1,
          n = this,
          f = !p,
          r = c(k);
        if (!e.WebSocket) {
          q();
          return;
        }
        k.socket ||
          ((m = k.webSocketServerUrl
            ? k.webSocketServerUrl
            : k.wsProtocol + k.host),
          (m += b.getUrl(k, this.name, f)),
          k.log("Connecting to websocket endpoint '" + m + "'."),
          (k.socket = new e.WebSocket(m)),
          (k.socket.onopen = function () {
            j = !0;
            k.log("Websocket opened.");
            b.clearReconnectTimeout(k);
            a(
              k,
              d.connectionState.reconnecting,
              d.connectionState.connected
            ) === !0 && r.triggerHandler(g.onReconnect);
          }),
          (k.socket.onclose = function (h) {
            if (this === k.socket) {
              if (j) {
                typeof h.wasClean != "undefined" && h.wasClean === !1
                  ? (c(k).triggerHandler(g.onError, [
                      d._.transportError(
                        d.resources.webSocketClosed,
                        k.transport,
                        h
                      ),
                    ]),
                    k.log(
                      "Unclean disconnect from websocket: " + h.reason ||
                        "[no reason given]."
                    ))
                  : k.log("Websocket closed.");
              } else {
                q ? q() : f && n.reconnect(k);
                return;
              }
              n.reconnect(k);
            }
          }),
          (k.socket.onmessage = function (l) {
            var h;
            try {
              h = k._parseResponse(l.data);
            } catch (o) {
              b.handleParseFailure(k, l.data, o, q, l);
              return;
            }
            h &&
              (c.isEmptyObject(h) || h.M
                ? b.processMessages(k, h, p)
                : b.triggerReceived(k, h));
          }));
      },
      reconnect: function (f) {
        b.reconnect(f, this.name);
      },
      lostConnection: function (f) {
        this.reconnect(f);
      },
      stop: function (f) {
        b.clearReconnectTimeout(f);
        f.socket &&
          (f.log("Closing the Websocket."),
          f.socket.close(),
          (f.socket = null));
      },
      abort: function (f, h) {
        b.ajaxAbort(f, h);
      },
    };
  })(window.jQuery, window),
  (function (d, h) {
    var c = d.signalR,
      j = d.signalR.events,
      a = d.signalR.changeState,
      g = c.transports._logic,
      b = function (e) {
        h.clearTimeout(e._.reconnectAttemptTimeoutHandle);
        delete e._.reconnectAttemptTimeoutHandle;
      };
    c.transports.serverSentEvents = {
      name: "serverSentEvents",
      supportsKeepAlive: function () {
        return !0;
      },
      timeOut: 3000,
      start: function (n, r, k) {
        var f = this,
          m = !1,
          e = d(n),
          t = !r,
          u;
        if (
          (n.eventSource &&
            (n.log("The connection already has an event source. Stopping it."),
            n.stop()),
          !h.EventSource)
        ) {
          k && (n.log("This browser doesn't support SSE."), k());
          return;
        }
        u = g.getUrl(n, this.name, t);
        try {
          n.log("Attempting to connect to SSE endpoint '" + u + "'.");
          n.eventSource = new h.EventSource(u, {
            withCredentials: n.withCredentials,
          });
        } catch (q) {
          n.log(
            "EventSource failed trying to connect with error " + q.Message + "."
          );
          k
            ? k()
            : (e.triggerHandler(j.onError, [
                c._.transportError(
                  c.resources.eventSourceFailedToConnect,
                  n.transport,
                  q
                ),
              ]),
              t && f.reconnect(n));
          return;
        }
        t &&
          (n._.reconnectAttemptTimeoutHandle = h.setTimeout(function () {
            m === !1 &&
              n.eventSource.readyState !== h.EventSource.OPEN &&
              f.reconnect(n);
          }, f.timeOut));
        n.eventSource.addEventListener(
          "open",
          function () {
            n.log("EventSource connected.");
            b(n);
            g.clearReconnectTimeout(n);
            m === !1 &&
              ((m = !0),
              a(
                n,
                c.connectionState.reconnecting,
                c.connectionState.connected
              ) === !0 && e.triggerHandler(j.onReconnect));
          },
          !1
        );
        n.eventSource.addEventListener(
          "message",
          function (o) {
            var p;
            if (o.data !== "initialized") {
              try {
                p = n._parseResponse(o.data);
              } catch (l) {
                g.handleParseFailure(n, o.data, l, k, o);
                return;
              }
              g.processMessages(n, p, r);
            }
          },
          !1
        );
        n.eventSource.addEventListener(
          "error",
          function (l) {
            if (this === n.eventSource) {
              if (!m) {
                k && k();
                return;
              }
              n.log(
                "EventSource readyState: " + n.eventSource.readyState + "."
              );
              l.eventPhase === h.EventSource.CLOSED
                ? (n.log(
                    "EventSource reconnecting due to the server connection ending."
                  ),
                  f.reconnect(n))
                : (n.log("EventSource error."),
                  e.triggerHandler(j.onError, [
                    c._.transportError(
                      c.resources.eventSourceError,
                      n.transport,
                      l
                    ),
                  ]));
            }
          },
          !1
        );
      },
      reconnect: function (e) {
        g.reconnect(e, this.name);
      },
      lostConnection: function (e) {
        this.reconnect(e);
      },
      send: function (e, f) {
        g.ajaxSend(e, f);
      },
      stop: function (e) {
        b(e);
        g.clearReconnectTimeout(e);
        e &&
          e.eventSource &&
          (e.log("EventSource calling close()."),
          e.eventSource.close(),
          (e.eventSource = null),
          delete e.eventSource);
      },
      abort: function (e, f) {
        g.ajaxAbort(e, f);
      },
    };
  })(window.jQuery, window),
  (function (d, j) {
    var h = d.signalR,
      a = d.signalR.events,
      g = d.signalR.changeState,
      c = h.transports._logic,
      k = function () {
        var e = j.document.createElement("iframe");
        return (
          e.setAttribute(
            "style",
            "position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;"
          ),
          e
        );
      },
      b = (function () {
        var l = null,
          e = 1000,
          m = 0;
        return {
          prevent: function () {
            h._.ieVersion <= 8 &&
              (m === 0 &&
                (l = j.setInterval(function () {
                  var f = k();
                  j.document.body.appendChild(f);
                  j.document.body.removeChild(f);
                  f = null;
                }, e)),
              m++);
          },
          cancel: function () {
            m === 1 && j.clearInterval(l);
            m > 0 && m--;
          },
        };
      })();
    h.transports.foreverFrame = {
      name: "foreverFrame",
      supportsKeepAlive: function () {
        return !0;
      },
      iframeClearThreshold: 50,
      start: function (t, v, m) {
        var q = this,
          w = (c.foreverFrame.count += 1),
          p,
          u = k(),
          f = function () {
            t.log(
              "Forever frame iframe finished loading and is no longer receiving messages."
            );
            q.reconnect(t);
          };
        if (j.EventSource) {
          m &&
            (t.log("This browser supports SSE, skipping Forever Frame."), m());
          return;
        }
        u.setAttribute("data-signalr-connection-id", t.id);
        b.prevent();
        p = c.getUrl(t, this.name);
        p += "&frameId=" + w;
        j.document.body.appendChild(u);
        t.log("Binding to iframe's load event.");
        u.addEventListener
          ? u.addEventListener("load", f, !1)
          : u.attachEvent && u.attachEvent("onload", f);
        u.src = p;
        c.foreverFrame.connections[w] = t;
        t.frame = u;
        t.frameId = w;
        v &&
          (t.onSuccess = function () {
            t.log("Iframe transport started.");
            v();
          });
      },
      reconnect: function (e) {
        var f = this;
        c.isConnectedOrReconnecting(e) &&
          c.verifyLastActive(e) &&
          j.setTimeout(function () {
            if (
              c.verifyLastActive(e) &&
              e.frame &&
              c.ensureReconnectingState(e)
            ) {
              var m = e.frame,
                l = c.getUrl(e, f.name, !0) + "&frameId=" + e.frameId;
              e.log("Updating iframe src to '" + l + "'.");
              m.src = l;
            }
          }, e.reconnectDelay);
      },
      lostConnection: function (e) {
        this.reconnect(e);
      },
      send: function (e, f) {
        c.ajaxSend(e, f);
      },
      receive: function (p, q) {
        var m, l, n;
        if (
          (p.json !== p._originalJson && (q = p._originalJson.stringify(q)),
          (n = p._parseResponse(q)),
          c.processMessages(p, n, p.onSuccess),
          p.state === d.signalR.connectionState.connected &&
            ((p.frameMessageCount = (p.frameMessageCount || 0) + 1),
            p.frameMessageCount >
              h.transports.foreverFrame.iframeClearThreshold &&
              ((p.frameMessageCount = 0),
              (m = p.frame.contentWindow || p.frame.contentDocument),
              m && m.document && m.document.body)))
        ) {
          for (l = m.document.body; l.firstChild; ) {
            l.removeChild(l.firstChild);
          }
        }
      },
      stop: function (e) {
        var f = null;
        if ((b.cancel(), e.frame)) {
          if (e.frame.stop) {
            e.frame.stop();
          } else {
            try {
              f = e.frame.contentWindow || e.frame.contentDocument;
              f.document &&
                f.document.execCommand &&
                f.document.execCommand("Stop");
            } catch (l) {
              e.log(
                "Error occured when stopping foreverFrame transport. Message = " +
                  l.message +
                  "."
              );
            }
          }
          e.frame.parentNode === j.document.body &&
            j.document.body.removeChild(e.frame);
          delete c.foreverFrame.connections[e.frameId];
          e.frame = null;
          e.frameId = null;
          delete e.frame;
          delete e.frameId;
          delete e.onSuccess;
          delete e.frameMessageCount;
          e.log("Stopping forever frame.");
        }
      },
      abort: function (e, f) {
        c.ajaxAbort(e, f);
      },
      getConnection: function (e) {
        return c.foreverFrame.connections[e];
      },
      started: function (e) {
        g(e, h.connectionState.reconnecting, h.connectionState.connected) ===
          !0 && d(e).triggerHandler(a.onReconnect);
      },
    };
  })(window.jQuery, window),
  (function (d, j) {
    var h = d.signalR,
      k = d.signalR.events,
      a = d.signalR.changeState,
      b = d.signalR.isDisconnecting,
      c = h.transports._logic,
      g = (function () {
        try {
          return "onprogress" in new j.XMLHttpRequest();
        } catch (e) {
          return !1;
        }
      })();
    h.transports.longPolling = {
      name: "longPolling",
      supportsKeepAlive: function (e) {
        return g && e.ajaxDataType !== "jsonp" && e._.longPollDelay === 0;
      },
      reconnectDelay: 3000,
      start: function (q, t, m) {
        var e = this,
          u = function () {
            u = d.noop;
            m = null;
            q.log("LongPolling connected.");
            t();
          },
          z = function () {
            return m
              ? (m(), (m = null), q.log("LongPolling failed to connect."), !0)
              : !1;
          },
          f = q._,
          n = 0,
          r = function (l) {
            j.clearTimeout(f.reconnectTimeoutId);
            f.reconnectTimeoutId = null;
            a(
              l,
              h.connectionState.reconnecting,
              h.connectionState.connected
            ) === !0 &&
              (l.log("Raising the reconnect event"),
              d(l).triggerHandler(k.onReconnect));
          },
          x = 3600000;
        q.pollXhr &&
          (q.log("Polling xhr requests already exists, aborting."), q.stop());
        q.messageId = null;
        f.reconnectTimeoutId = null;
        f.pollTimeoutId = j.setTimeout(function () {
          (function l(B, w) {
            var p = B.messageId,
              v = p === null,
              o = !v,
              A = !w,
              y = c.getUrl(B, e.name, o, A);
            b(B) !== !0 &&
              (q.log("Opening long polling request to '" + y + "'."),
              (B.pollXhr = c.ajax(q, {
                xhrFields: {
                  onprogress: function () {
                    c.markLastMessage(q);
                  },
                },
                url: y,
                success: function (E) {
                  var D,
                    G = 0,
                    F,
                    s;
                  q.log("Long poll complete.");
                  n = 0;
                  try {
                    D = q._parseResponse(E);
                  } catch (C) {
                    c.handleParseFailure(B, E, C, z, B.pollXhr);
                    return;
                  }
                  (f.reconnectTimeoutId !== null && r(B),
                  D && (F = c.maximizePersistentResponse(D)),
                  c.processMessages(B, D, u),
                  F &&
                    d.type(F.LongPollDelay) === "number" &&
                    (G = F.LongPollDelay),
                  F && F.Disconnect) ||
                    (b(B) !== !0 &&
                      ((s = F && F.ShouldReconnect),
                      !s || c.ensureReconnectingState(B)) &&
                      (G > 0
                        ? (f.pollTimeoutId = j.setTimeout(function () {
                            l(B, s);
                          }, G))
                        : l(B, s)));
                },
                error: function (s, C) {
                  if (
                    (j.clearTimeout(f.reconnectTimeoutId),
                    (f.reconnectTimeoutId = null),
                    C === "abort")
                  ) {
                    q.log("Aborted xhr request.");
                    return;
                  }
                  if (!z()) {
                    if (
                      (n++,
                      q.state !== h.connectionState.reconnecting &&
                        (q.log(
                          "An error occurred using longPolling. Status = " +
                            C +
                            ".  Response = " +
                            s.responseText +
                            "."
                        ),
                        d(B).triggerHandler(k.onError, [
                          h._.transportError(
                            h.resources.longPollFailed,
                            q.transport,
                            s,
                            B.pollXhr
                          ),
                        ])),
                      (q.state === h.connectionState.connected ||
                        q.state === h.connectionState.reconnecting) &&
                        !c.verifyLastActive(q))
                    ) {
                      return;
                    }
                    if (!c.ensureReconnectingState(B)) {
                      return;
                    }
                    f.pollTimeoutId = j.setTimeout(function () {
                      l(B, !0);
                    }, e.reconnectDelay);
                  }
                },
              })),
              o &&
                w === !0 &&
                (f.reconnectTimeoutId = j.setTimeout(function () {
                  r(B);
                }, Math.min(1000 * (Math.pow(2, n) - 1), x))));
          })(q);
        }, 250);
      },
      lostConnection: function (e) {
        e.pollXhr && e.pollXhr.abort("lostConnection");
      },
      send: function (e, f) {
        c.ajaxSend(e, f);
      },
      stop: function (e) {
        j.clearTimeout(e._.pollTimeoutId);
        j.clearTimeout(e._.reconnectTimeoutId);
        delete e._.pollTimeoutId;
        delete e._.reconnectTimeoutId;
        e.pollXhr && (e.pollXhr.abort(), (e.pollXhr = null), delete e.pollXhr);
      },
      abort: function (e, f) {
        c.ajaxAbort(e, f);
      },
    };
  })(window.jQuery, window),
  (function (g) {
    function k(e) {
      return e + a;
    }
    function l(o, s, h) {
      for (var e = o.length, v = [], q = 0; q < e; q += 1) {
        o.hasOwnProperty(q) && (v[q] = s.call(h, o[q], q, o));
      }
      return v;
    }
    function c(e) {
      return g.isFunction(e) ? null : g.type(e) === "undefined" ? null : e;
    }
    function p(e) {
      for (var f in e) {
        if (e.hasOwnProperty(f)) {
          return !0;
        }
      }
      return !1;
    }
    function b(o, s) {
      var h = o._.invocationCallbacks,
        q,
        e;
      p(h) && o.log("Clearing hub invocation callbacks with error: " + s + ".");
      o._.invocationCallbackId = 0;
      delete o._.invocationCallbacks;
      o._.invocationCallbacks = {};
      for (e in h) {
        (q = h[e]), q.method.call(q.scope, { E: s });
      }
    }
    function d(e, f) {
      return new d.fn.init(e, f);
    }
    function m(e, f) {
      var h = { qs: null, logging: !1, useDefaultPath: !0 };
      return (
        g.extend(h, f),
        (!e || h.useDefaultPath) && (e = (e || "") + "/signalr"),
        new m.fn.init(e, h)
      );
    }
    var a = ".hubProxy",
      j = g.signalR;
    d.fn = d.prototype = {
      init: function (e, f) {
        this.state = {};
        this.connection = e;
        this.hubName = f;
        this._ = { callbackMap: {} };
      },
      hasSubscriptions: function () {
        return p(this._.callbackMap);
      },
      on: function (n, h) {
        var o = this,
          e = o._.callbackMap;
        return (
          (n = n.toLowerCase()),
          e[n] || (e[n] = {}),
          (e[n][h] = function (f, q) {
            h.apply(o, q);
          }),
          g(o).bind(k(n), e[n][h]),
          o
        );
      },
      off: function (s, q) {
        var h = this,
          r = h._.callbackMap,
          n;
        return (
          (s = s.toLowerCase()),
          (n = r[s]),
          n &&
            (n[q]
              ? (g(h).unbind(k(s), n[q]), delete n[q], p(n) || delete r[s])
              : q || (g(h).unbind(k(s)), delete r[s])),
          h
        );
      },
      invoke: function (w) {
        var q = this,
          v = q.connection,
          n = g.makeArray(arguments).slice(1),
          h = l(n, c),
          o = { H: q.hubName, M: w, A: h, I: v._.invocationCallbackId },
          x = g.Deferred(),
          s = function (t) {
            var r = q._maximizeHubResponse(t),
              u,
              y;
            g.extend(q.state, r.State);
            r.Progress
              ? x.notifyWith
                ? x.notifyWith(q, [r.Progress.Data])
                : v._.progressjQueryVersionLogged ||
                  (v.log(
                    "A hub method invocation progress update was received but the version of jQuery in use (" +
                      g.prototype.jquery +
                      ") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications."
                  ),
                  (v._.progressjQueryVersionLogged = !0))
              : r.Error
              ? (r.StackTrace && v.log(r.Error + "\n" + r.StackTrace + "."),
                (u = r.IsHubException ? "HubException" : "Exception"),
                (y = j._.error(r.Error, u)),
                (y.data = r.ErrorData),
                v.log(
                  q.hubName +
                    "." +
                    w +
                    " failed to execute. Error: " +
                    y.message
                ),
                x.rejectWith(q, [y]))
              : (v.log("Invoked " + q.hubName + "." + w),
                x.resolveWith(q, [r.Result]));
          };
        return (
          (v._.invocationCallbacks[v._.invocationCallbackId.toString()] = {
            scope: q,
            method: s,
          }),
          (v._.invocationCallbackId += 1),
          g.isEmptyObject(q.state) || (o.S = q.state),
          v.log("Invoking " + q.hubName + "." + w),
          v.send(o),
          x.promise()
        );
      },
      _maximizeHubResponse: function (e) {
        return {
          State: e.S,
          Result: e.R,
          Progress: e.P ? { Id: e.P.I, Data: e.P.D } : null,
          Id: e.I,
          IsHubException: e.H,
          Error: e.E,
          StackTrace: e.T,
          ErrorData: e.D,
        };
      },
    };
    d.fn.init.prototype = d.fn;
    m.fn = m.prototype = g.connection();
    m.fn.init = function (n, h) {
      var f = { qs: null, logging: !1, useDefaultPath: !0 },
        o = this;
      g.extend(f, h);
      g.signalR.fn.init.call(o, n, f.qs, f.logging);
      o.proxies = {};
      o._.invocationCallbackId = 0;
      o._.invocationCallbacks = {};
      o.received(function (y) {
        var r, w, q, v, x, u;
        y &&
          (typeof y.P != "undefined"
            ? ((q = y.P.I.toString()),
              (v = o._.invocationCallbacks[q]),
              v && v.method.call(v.scope, y))
            : typeof y.I != "undefined"
            ? ((q = y.I.toString()),
              (v = o._.invocationCallbacks[q]),
              v &&
                ((o._.invocationCallbacks[q] = null),
                delete o._.invocationCallbacks[q],
                v.method.call(v.scope, y)))
            : ((r = this._maximizeClientHubInvocation(y)),
              o.log(
                "Triggering client hub event '" +
                  r.Method +
                  "' on hub '" +
                  r.Hub +
                  "'."
              ),
              (x = r.Hub.toLowerCase()),
              (u = r.Method.toLowerCase()),
              (w = this.proxies[x]),
              g.extend(w.state, r.State),
              g(w).triggerHandler(k(u), [r.Args])));
      });
      o.error(function (q, u) {
        var e, s;
        u &&
          ((e = u.I),
          (s = o._.invocationCallbacks[e]),
          s &&
            ((o._.invocationCallbacks[e] = null),
            delete o._.invocationCallbacks[e],
            s.method.call(s.scope, { E: q })));
      });
      o.reconnecting(function () {
        o.transport &&
          o.transport.name === "webSockets" &&
          b(
            o,
            "Connection started reconnecting before invocation result was received."
          );
      });
      o.disconnected(function () {
        b(
          o,
          "Connection was disconnected before invocation result was received."
        );
      });
    };
    m.fn._maximizeClientHubInvocation = function (e) {
      return { Hub: e.H, Method: e.M, Args: e.A, State: e.S };
    };
    m.fn._registerSubscribedHubs = function () {
      var e = this;
      e._subscribedToHubs ||
        ((e._subscribedToHubs = !0),
        e.starting(function () {
          var f = [];
          g.each(e.proxies, function (h) {
            this.hasSubscriptions() &&
              (f.push({ name: h }),
              e.log("Client subscribed to hub '" + h + "'."));
          });
          f.length === 0 &&
            e.log(
              "No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to."
            );
          e.data = e.json.stringify(f);
        }));
    };
    m.fn.createHubProxy = function (e) {
      e = e.toLowerCase();
      var f = this.proxies[e];
      return (
        f || ((f = d(this, e)), (this.proxies[e] = f)),
        this._registerSubscribedHubs(),
        f
      );
    };
    m.fn.init.prototype = m.fn;
    g.hubConnection = m;
  })(window.jQuery, window),
  (function (a) {
    a.signalR.version = "2.1.1";
  })(window.jQuery);
IAS.ChatUserManager = {
  showRequestForm: function () {
    var c = $.createDiv();
    var b = null;
    IAS.syncPost("/Chat/GetCountriesList", {}, function (f) {
      b = f;
    });
    var d = {
      fields: [
        { id: "userName", label: IAS.L("Name"), type: "text", required: true },
        {
          id: "userEmail",
          label: IAS.L("Email"),
          type: "email",
          required: true,
        },
        {
          id: "country",
          label: IAS.L("Country"),
          type: "dropdown",
          options: b,
          required: true,
        },
      ],
    };
    var a = [
      {
        label: IAS.L("Send"),
        bindFunction: IAS.bind(this, "sendRequestToAdmin"),
      },
    ];
    this.form = new UIRenderer(d, c);
    var e = this;
    IAS.post("/Chat/IsUserOnline", {}, function (f) {
      if (f.Success) {
        e.form.setValues(f.Data);
        e.sendRequestToAdmin();
      } else {
        e.popup = IAS.popup(c, "", null, a);
      }
    });
  },
  sendRequestToAdmin: function () {
    var a = this.form;
    if (!a.validateAndCheckErrors({ allFieldsRequired: true })) {
      var c = a.getValues();
      var b = this;
      IAS.post("/Chat/AddUserRequest", c, function (d) {
        if (d.Success) {
          b.popup && b.popup.close();
          if (d.Data.adminOnline) {
            IAS.popupMsg(d.Message);
            b.operationsManager = IAS.ChatOperationsManager.getNewManager(
              d.Data.chatID,
              "u"
            );
            b.isOnline = true;
            b.chatWindow = IAS.ChatWindowManager.createNewChatWindow(
              { chatID: d.Data.chatID, userName: "" },
              function (e) {
                if (b.isOnline) {
                  if (b.adminChatID) {
                    b.operationsManager.sendMessageToUser(e, b.adminChatID);
                  } else {
                    IAS.popupMsg(IAS.L("Admin not responded yet."));
                  }
                } else {
                  IAS.popupMsg("You are disconnected");
                }
              },
              function () {
                b.operationsManager.stopChat();
                b.chatWindow.close();
              }
            );
            b.operationsManager.respondToUser(IAS.bind(b, "respondToUser"));
          } else {
            IAS.popupYesNo(d.Message, "", function () {
              IAS.ContactUsForm();
            });
          }
        } else {
          IAS.popupMsg(d.Message);
        }
      });
    }
  },
  respondToUser: function (b, a) {
    this.adminChatID = a;
    this.chatWindow.appendNewMessage(b);
    this.windowHandlers = {};
    this.windowHandlers[a] = this.chatWindow.appendNewMessage;
    this.operationsManager.getMessage(this.windowHandlers);
  },
  endRequest: function () {},
};
(function () {
  function c(b) {
    try {
      if (navigator.plugins && navigator.plugins.length) {
        for (var d = 0; d < navigator.plugins.length; d++) {
          var a = navigator.plugins[d];
          if (0 <= a.name.indexOf(b)) {
            return a.name + (a.description ? "|" + a.description : "");
          }
        }
      }
    } catch (c) {}
    return "";
  }
  function p() {
    for (
      var b = new Date(),
        d = new Date(),
        a = [
          function () {
            return "TF1";
          },
          function () {
            return "015";
          },
          function () {
            return ScriptEngineMajorVersion();
          },
          function () {
            return ScriptEngineMinorVersion();
          },
          function () {
            return ScriptEngineBuildVersion();
          },
          function () {
            return e("{7790769C-0471-11D2-AF11-00C04FA35D02}");
          },
          function () {
            return e("{89820200-ECBD-11CF-8B85-00AA005B4340}");
          },
          function () {
            return e("{283807B5-2C60-11D0-A31D-00AA00B92C03}");
          },
          function () {
            return e("{4F216970-C90C-11D1-B5C7-0000F8051515}");
          },
          function () {
            return e("{44BBA848-CC51-11CF-AAFA-00AA00B6015C}");
          },
          function () {
            return e("{9381D8F2-0288-11D0-9501-00AA00B911A5}");
          },
          function () {
            return e("{4F216970-C90C-11D1-B5C7-0000F8051515}");
          },
          function () {
            return e("{5A8D6EE0-3E18-11D0-821E-444553540000}");
          },
          function () {
            return e("{89820200-ECBD-11CF-8B85-00AA005B4383}");
          },
          function () {
            return e("{08B0E5C0-4FCB-11CF-AAA5-00401C608555}");
          },
          function () {
            return e("{45EA75A0-A269-11D1-B5BF-0000F8051515}");
          },
          function () {
            return e("{DE5AED00-A4BF-11D1-9948-00C04F98BBC9}");
          },
          function () {
            return e("{22D6F312-B0F6-11D0-94AB-0080C74C7E95}");
          },
          function () {
            return e("{44BBA842-CC51-11CF-AAFA-00AA00B6015B}");
          },
          function () {
            return e("{3AF36230-A269-11D1-B5BF-0000F8051515}");
          },
          function () {
            return e("{44BBA840-CC51-11CF-AAFA-00AA00B6015C}");
          },
          function () {
            return e("{CC2A9BA0-3BDD-11D0-821E-444553540000}");
          },
          function () {
            return e("{08B0E5C0-4FCB-11CF-AAA5-00401C608500}");
          },
          function () {
            return eval("navigator.appCodeName");
          },
          function () {
            return eval("navigator.appName");
          },
          function () {
            return eval("navigator.appVersion");
          },
          function () {
            return q(["navigator.productSub", "navigator.appMinorVersion"]);
          },
          function () {
            return eval("navigator.browserLanguage");
          },
          function () {
            return eval("navigator.cookieEnabled");
          },
          function () {
            return q(["navigator.oscpu", "navigator.cpuClass"]);
          },
          function () {
            return eval("navigator.onLine");
          },
          function () {
            return eval("navigator.platform");
          },
          function () {
            return eval("navigator.systemLanguage");
          },
          function () {
            return eval("navigator.userAgent");
          },
          function () {
            return q(["navigator.language", "navigator.userLanguage"]);
          },
          function () {
            return eval("document.defaultCharset");
          },
          function () {
            return eval("document.domain");
          },
          function () {
            return eval("screen.deviceXDPI");
          },
          function () {
            return eval("screen.deviceYDPI");
          },
          function () {
            return eval("screen.fontSmoothingEnabled");
          },
          function () {
            return eval("screen.updateInterval");
          },
          function () {
            return 0 !== Math.abs(k - m);
          },
          function () {
            return t(b);
          },
          function () {
            return "@UTC@";
          },
          function () {
            var a = 0,
              a = 0;
            t(b) && (a = Math.abs(k - m));
            return (a = -(b.getTimezoneOffset() + a) / 60);
          },
          function () {
            return new Date(2005, 5, 7, 21, 33, 44, 888).toLocaleString();
          },
          function () {
            return eval("screen.width");
          },
          function () {
            return eval("screen.height");
          },
          function () {
            return h.Acrobat;
          },
          function () {
            return h.Flash;
          },
          function () {
            return h.QuickTime;
          },
          function () {
            return h["Java Plug-in"];
          },
          function () {
            return h.Director;
          },
          function () {
            return h.Office;
          },
          function () {
            return new Date().getTime() - d.getTime();
          },
          function () {
            return k;
          },
          function () {
            return m;
          },
          function () {
            return b.toLocaleString();
          },
          function () {
            return eval("screen.colorDepth");
          },
          function () {
            return eval("window.screen.availWidth");
          },
          function () {
            return eval("window.screen.availHeight");
          },
          function () {
            return eval("window.screen.availLeft");
          },
          function () {
            return eval("window.screen.availTop");
          },
          function () {
            return c("Acrobat");
          },
          function () {
            return c("Adobe SVG");
          },
          function () {
            return c("Authorware");
          },
          function () {
            return c("Citrix ICA");
          },
          function () {
            return c("Director");
          },
          function () {
            return c("Flash");
          },
          function () {
            return c("MapGuide");
          },
          function () {
            return c("MetaStream");
          },
          function () {
            return c("PDFViewer");
          },
          function () {
            return c("QuickTime");
          },
          function () {
            return c("RealOne");
          },
          function () {
            return c("RealPlayer Enterprise");
          },
          function () {
            return c("RealPlayer Plugin");
          },
          function () {
            return c("Seagate Software Report");
          },
          function () {
            return c("Silverlight");
          },
          function () {
            return c("Windows Media");
          },
          function () {
            return c("iPIX");
          },
          function () {
            return c("nppdf.so");
          },
          function () {
            var a = document.createElement("span");
            a.innerHTML = "&nbsp;";
            a.style.position = "absolute";
            a.style.left = "-9999px";
            document.body.appendChild(a);
            var b = a.offsetHeight;
            document.body.removeChild(a);
            return b;
          },
        ],
        i = "Acrobat;Flash;QuickTime;Java Plug-in;Director;Office".split(";"),
        j = 0;
      j < i.length;
      j++
    ) {
      var l = i[j],
        f = h,
        v = l,
        g = l,
        l = "";
      try {
        if (navigator.plugins && navigator.plugins.length) {
          for (
            var u = RegExp(g + ".* ([0-9._]+)"), g = 0;
            g < navigator.plugins.length;
            g++
          ) {
            var o = u.exec(navigator.plugins[g].name);
            null === o && (o = u.exec(navigator.plugins[g].description));
            o && (l = o[1]);
          }
        } else {
          if (window.ActiveXObject && r[g]) {
            try {
              var p = new ActiveXObject(r[g][0]),
                l = r[g][1](p);
            } catch (x) {
              l = "";
            }
          }
        }
      } catch (w) {
        l = w.message;
      }
      f[v] = l;
    }
    i = "";
    for (j = 0; j < a.length; j++) {
      var n;
      try {
        n = a[j](this);
      } catch (y) {
        n = "";
      }
      i += escape(n);
      i += ";";
    }
    var a = i,
      s;
    n = escape("@UTC@");
    i = new Date().getTime();
    "boolean" !== typeof s && (s = !1);
    for (j = !0; 0 <= (f = a.indexOf(n)) && (s || j); ) {
      (a = a.substr(0, f) + i + a.substr(f + n.length)), (j = !1);
    }
    return a;
  }
  function t(b) {
    var d = Math.min(k, m);
    return 0 !== Math.abs(k - m) && b.getTimezoneOffset() === d;
  }
  function q(b) {
    for (var d = 0; d < b.length; d++) {
      try {
        var a = eval(b[d]);
        if (a) {
          return a;
        }
      } catch (c) {}
    }
    return "";
  }
  function e(b) {
    var d = "";
    try {
      "undefined" !== typeof f.a.getComponentVersion &&
        (d = f.a.getComponentVersion(b, "ComponentID"));
    } catch (a) {
      (b = a.message.length),
        (d = escape(a.message.substr(0, 40 < b ? 40 : b)));
    }
    return d;
  }
  var f = {},
    k = new Date(2005, 0, 15).getTimezoneOffset(),
    m = new Date(2005, 6, 15).getTimezoneOffset(),
    h = [],
    r = {
      Flash: [
        "ShockwaveFlash.ShockwaveFlash",
        function (b) {
          return b.getVariable("$version");
        },
      ],
      Director: [
        "SWCtl.SWCtl",
        function (b) {
          return b.ShockwaveVersion("");
        },
      ],
    };
  try {
    (f.a = document.createElement("span")),
      "undefined" !== typeof f.a.addBehavior &&
        f.a.addBehavior("#default#clientCaps");
  } catch (x) {}
  h = {};
  f.mctag = function (b) {
    try {
      if (!b) {
        return p();
      }
      var d;
      a: {
        var a;
        try {
          a = document.getElementById(b);
        } catch (c) {}
        if (null === a || "undefined" === typeof a) {
          try {
            a = document.getElementsByName(b)[0];
          } catch (e) {}
        }
        if (null === a || "undefined" === typeof a) {
          for (var f = 0; f < document.forms.length; f++) {
            for (var h = document.forms[f], k = 0; k < h.elements.length; k++) {
              var g = h[k];
              if (g.name === b || g.id === b) {
                d = g;
                break a;
              }
            }
          }
        }
        d = a;
      }
      if (null !== d) {
        try {
          d.value = p();
        } catch (m) {
          d.value = escape(m.message);
        }
      }
    } catch (o) {}
  };
  window.mcparm2 = f;
})();
(function (az, ad, aC, at, ar, am) {
  var Z = this;
  var ay = Math.floor(Math.random() * 10000);
  var aE = Function.prototype;
  var aF = /^((http.?:)\/\/([^:\/\s]+)(:\d+)*)/;
  var aH = /[\-\w]+\/\.\.\//;
  var ai = /([^:])\/\//g;
  var ao = "";
  var aA = {};
  var ax = az.easyXDM;
  var aN = "easyXDM_";
  var ag;
  var aT = false;
  var an;
  var al;
  function ac(a, c) {
    var b = typeof a[c];
    return b == "function" || !!(b == "object" && a[c]) || b == "unknown";
  }
  function aM(a, b) {
    return !!(typeof a[b] == "object" && a[b]);
  }
  function aG(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }
  function ab() {
    var g = "Shockwave Flash",
      d = "application/x-shockwave-flash";
    if (!aK(navigator.plugins) && typeof navigator.plugins[g] == "object") {
      var b = navigator.plugins[g].description;
      if (
        b &&
        !aK(navigator.mimeTypes) &&
        navigator.mimeTypes[d] &&
        navigator.mimeTypes[d].enabledPlugin
      ) {
        an = b.match(/\d+/g);
      }
    }
    if (!an) {
      var f;
      try {
        f = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
        an = Array.prototype.slice.call(
          f.GetVariable("$version").match(/(\d+),(\d+),(\d+),(\d+)/),
          1
        );
        f = null;
      } catch (c) {}
    }
    if (!an) {
      return false;
    }
    var e = parseInt(an[0], 10),
      a = parseInt(an[1], 10);
    al = e > 9 && a > 0;
    return true;
  }
  var aO, aS;
  if (ac(az, "addEventListener")) {
    aO = function (c, a, b) {
      c.addEventListener(a, b, false);
    };
    aS = function (c, a, b) {
      c.removeEventListener(a, b, false);
    };
  } else {
    if (ac(az, "attachEvent")) {
      aO = function (a, c, b) {
        a.attachEvent("on" + c, b);
      };
      aS = function (a, c, b) {
        a.detachEvent("on" + c, b);
      };
    } else {
      throw new Error("Browser not supported");
    }
  }
  var aR = false,
    aq = [],
    av;
  if ("readyState" in ad) {
    av = ad.readyState;
    aR =
      av == "complete" ||
      (~navigator.userAgent.indexOf("AppleWebKit/") &&
        (av == "loaded" || av == "interactive"));
  } else {
    aR = !!ad.body;
  }
  function aI() {
    if (aR) {
      return;
    }
    aR = true;
    for (var a = 0; a < aq.length; a++) {
      aq[a]();
    }
    aq.length = 0;
  }
  if (!aR) {
    if (ac(az, "addEventListener")) {
      aO(ad, "DOMContentLoaded", aI);
    } else {
      aO(ad, "readystatechange", function () {
        if (ad.readyState == "complete") {
          aI();
        }
      });
      if (ad.documentElement.doScroll && az === top) {
        var aj = function () {
          if (aR) {
            return;
          }
          try {
            ad.documentElement.doScroll("left");
          } catch (a) {
            at(aj, 1);
            return;
          }
          aI();
        };
        aj();
      }
    }
    aO(az, "load", aI);
  }
  function ak(b, a) {
    if (aR) {
      b.call(a);
      return;
    }
    aq.push(function () {
      b.call(a);
    });
  }
  function aw() {
    var c = parent;
    if (ao !== "") {
      for (var a = 0, b = ao.split("."); a < b.length; a++) {
        c = c[b[a]];
      }
    }
    return c.easyXDM;
  }
  function af(a) {
    az.easyXDM = ax;
    ao = a;
    if (ao) {
      aN = "easyXDM_" + ao.replace(".", "_") + "_";
    }
    return aA;
  }
  function aU(a) {
    return a.match(aF)[3];
  }
  function ah(a) {
    return a.match(aF)[4] || "";
  }
  function ap(e) {
    var c = e.toLowerCase().match(aF);
    var a = c[2],
      b = c[3],
      d = c[4] || "";
    if ((a == "http:" && d == ":80") || (a == "https:" && d == ":443")) {
      d = "";
    }
    return a + "//" + b + d;
  }
  function aa(a) {
    a = a.replace(ai, "$1/");
    if (!a.match(/^(http||https):\/\//)) {
      var b = a.substring(0, 1) === "/" ? "" : aC.pathname;
      if (b.substring(b.length - 1) !== "/") {
        b = b.substring(0, b.lastIndexOf("/") + 1);
      }
      a = aC.protocol + "//" + aC.host + b + a;
    }
    while (aH.test(a)) {
      a = a.replace(aH, "");
    }
    return a;
  }
  function aD(d, a) {
    var c = "",
      f = d.indexOf("#");
    if (f !== -1) {
      c = d.substring(f);
      d = d.substring(0, f);
    }
    var b = [];
    for (var e in a) {
      if (a.hasOwnProperty(e)) {
        b.push(e + "=" + am(a[e]));
      }
    }
    return d + (aT ? "#" : d.indexOf("?") == -1 ? "?" : "&") + b.join("&") + c;
  }
  var aJ = (function (b) {
    b = b.substring(1).split("&");
    var d = {},
      a,
      c = b.length;
    while (c--) {
      a = b[c].split("=");
      d[a[0]] = ar(a[1]);
    }
    return d;
  })(/xdm_e=/.test(aC.search) ? aC.search : aC.hash);
  function aK(a) {
    return typeof a === "undefined";
  }
  var aB = function () {
    var b = {};
    var c = { a: [1, 2, 3] },
      a = '{"a":[1,2,3]}';
    if (
      typeof JSON != "undefined" &&
      typeof JSON.stringify === "function" &&
      JSON.stringify(c).replace(/\s/g, "") === a
    ) {
      return JSON;
    }
    if (Object.toJSON) {
      if (Object.toJSON(c).replace(/\s/g, "") === a) {
        b.stringify = Object.toJSON;
      }
    }
    if (typeof String.prototype.evalJSON === "function") {
      c = a.evalJSON();
      if (c.a && c.a.length === 3 && c.a[2] === 3) {
        b.parse = function (d) {
          return d.evalJSON();
        };
      }
    }
    if (b.stringify && b.parse) {
      aB = function () {
        return b;
      };
      return b;
    }
    return null;
  };
  function aL(c, d, e) {
    var b;
    for (var a in d) {
      if (d.hasOwnProperty(a)) {
        if (a in c) {
          b = d[a];
          if (typeof b === "object") {
            aL(c[a], b, e);
          } else {
            if (!e) {
              c[a] = d[a];
            }
          }
        } else {
          c[a] = d[a];
        }
      }
    }
    return c;
  }
  function X() {
    var b = ad.body.appendChild(ad.createElement("form")),
      a = b.appendChild(ad.createElement("input"));
    a.name = aN + "TEST" + ay;
    ag = a !== b.elements[a.name];
    ad.body.removeChild(b);
  }
  function Y(e) {
    if (aK(ag)) {
      X();
    }
    var c;
    if (ag) {
      c = ad.createElement('<iframe name="' + e.props.name + '"/>');
    } else {
      c = ad.createElement("IFRAME");
      c.name = e.props.name;
    }
    c.id = c.name = e.props.name;
    delete e.props.name;
    if (e.container && e.container.length > 0) {
      e.container = e.container[0];
    }
    if (!e.container) {
      aL(c.style, { position: "absolute", top: "-2000px", left: "0px" });
      e.container = ad.body;
    }
    var b = e.props.src;
    e.props.src = "javascript:false";
    aL(c, e.props);
    c.border = c.frameBorder = 0;
    c.allowTransparency = true;
    e.container.appendChild(c);
    if (e.onLoad) {
      aO(c, "load", e.onLoad);
    }
    if (e.usePost) {
      var a = e.container.appendChild(ad.createElement("form")),
        d;
      a.target = c.name;
      a.action = b;
      a.method = "POST";
      if (typeof e.usePost === "object") {
        for (var f in e.usePost) {
          if (e.usePost.hasOwnProperty(f)) {
            if (ag) {
              d = ad.createElement('<input name="' + f + '"/>');
            } else {
              d = ad.createElement("INPUT");
              d.name = f;
            }
            d.value = e.usePost[f];
            a.appendChild(d);
          }
        }
      }
      a.submit();
      a.parentNode.removeChild(a);
    } else {
      c.src = b;
    }
    e.props.src = b;
    return c;
  }
  function aP(a, d) {
    if (typeof a == "string") {
      a = [a];
    }
    var c,
      b = a.length;
    while (b--) {
      c = a[b];
      c = new RegExp(
        c.substr(0, 1) == "^"
          ? c
          : "^" + c.replace(/(\*)/g, ".$1").replace(/\?/g, ".") + "$"
      );
      if (c.test(d)) {
        return true;
      }
    }
    return false;
  }
  function au(h) {
    var e = h.protocol,
      g;
    h.isHost = h.isHost || aK(aJ.xdm_p);
    aT = h.hash || false;
    if (!h.props) {
      h.props = {};
    }
    if (!h.isHost) {
      h.channel = aJ.xdm_c.replace(/["'<>\\]/g, "");
      h.secret = aJ.xdm_s;
      h.remote = aJ.xdm_e.replace(/["'<>\\]/g, "");
      e = aJ.xdm_p;
      if (h.acl && !aP(h.acl, h.remote)) {
        throw new Error("Access denied for " + h.remote);
      }
    } else {
      h.remote = aa(h.remote);
      h.channel = h.channel || "default" + ay++;
      h.secret = Math.random().toString(16).substring(2);
      if (aK(e)) {
        if (ap(aC.href) == ap(h.remote)) {
          e = "4";
        } else {
          if (ac(az, "postMessage") || ac(ad, "postMessage")) {
            e = "1";
          } else {
            if (h.swf && ac(az, "ActiveXObject") && ab()) {
              e = "6";
            } else {
              if (
                navigator.product === "Gecko" &&
                "frameElement" in az &&
                navigator.userAgent.indexOf("WebKit") == -1
              ) {
                e = "5";
              } else {
                if (h.remoteHelper) {
                  e = "2";
                } else {
                  e = "0";
                }
              }
            }
          }
        }
      }
    }
    h.protocol = e;
    switch (e) {
      case "0":
        aL(
          h,
          {
            interval: 100,
            delay: 2000,
            useResize: true,
            useParent: false,
            usePolling: false,
          },
          true
        );
        if (h.isHost) {
          if (!h.local) {
            var c = aC.protocol + "//" + aC.host,
              f = ad.body.getElementsByTagName("img"),
              d;
            var a = f.length;
            while (a--) {
              d = f[a];
              if (d.src.substring(0, c.length) === c) {
                h.local = d.src;
                break;
              }
            }
            if (!h.local) {
              h.local = az;
            }
          }
          var b = { xdm_c: h.channel, xdm_p: 0 };
          if (h.local === az) {
            h.usePolling = true;
            h.useParent = true;
            h.local = aC.protocol + "//" + aC.host + aC.pathname + aC.search;
            b.xdm_e = h.local;
            b.xdm_pa = 1;
          } else {
            b.xdm_e = aa(h.local);
          }
          if (h.container) {
            h.useResize = false;
            b.xdm_po = 1;
          }
          h.remote = aD(h.remote, b);
        } else {
          aL(h, {
            channel: aJ.xdm_c,
            remote: aJ.xdm_e,
            useParent: !aK(aJ.xdm_pa),
            usePolling: !aK(aJ.xdm_po),
            useResize: h.useParent ? false : h.useResize,
          });
        }
        g = [
          new aA.stack.HashTransport(h),
          new aA.stack.ReliableBehavior({}),
          new aA.stack.QueueBehavior({
            encode: true,
            maxLength: 4000 - h.remote.length,
          }),
          new aA.stack.VerifyBehavior({ initiate: h.isHost }),
        ];
        break;
      case "1":
        g = [new aA.stack.PostMessageTransport(h)];
        break;
      case "2":
        h.remoteHelper = aa(h.remoteHelper);
        g = [
          new aA.stack.NameTransport(h),
          new aA.stack.QueueBehavior(),
          new aA.stack.VerifyBehavior({ initiate: h.isHost }),
        ];
        break;
      case "3":
        g = [new aA.stack.NixTransport(h)];
        break;
      case "4":
        g = [new aA.stack.SameOriginTransport(h)];
        break;
      case "5":
        g = [new aA.stack.FrameElementTransport(h)];
        break;
      case "6":
        if (!an) {
          ab();
        }
        g = [new aA.stack.FlashTransport(h)];
        break;
    }
    g.push(new aA.stack.QueueBehavior({ lazy: h.lazy, remove: true }));
    return g;
  }
  function ae(a) {
    var b,
      e = {
        incoming: function (g, f) {
          this.up.incoming(g, f);
        },
        outgoing: function (f, g) {
          this.down.outgoing(f, g);
        },
        callback: function (f) {
          this.up.callback(f);
        },
        init: function () {
          this.down.init();
        },
        destroy: function () {
          this.down.destroy();
        },
      };
    for (var d = 0, c = a.length; d < c; d++) {
      b = a[d];
      aL(b, e, true);
      if (d !== 0) {
        b.down = a[d - 1];
      }
      if (d !== c - 1) {
        b.up = a[d + 1];
      }
    }
    return b;
  }
  function aQ(a) {
    a.up.down = a.down;
    a.down.up = a.up;
    a.up = a.down = null;
  }
  aL(aA, {
    version: "2.4.17.0",
    query: aJ,
    stack: {},
    apply: aL,
    getJSONObject: aB,
    whenReady: ak,
    noConflict: af,
  });
  aA.DomHelper = {
    on: aO,
    un: aS,
    requiresJSON: function (a) {
      if (!aM(az, "JSON")) {
        ad.write('<script type="text/javascript" src="' + a + '"></script>');
      }
    },
  };
  (function () {
    var a = {};
    aA.Fn = {
      set: function (b, c) {
        a[b] = c;
      },
      get: function (d, c) {
        var b = a[d];
        if (c) {
          delete a[d];
        }
        return b;
      },
    };
  })();
  aA.Socket = function (b) {
    var a = ae(
        au(b).concat([
          {
            incoming: function (e, d) {
              b.onMessage(e, d);
            },
            callback: function (d) {
              if (b.onReady) {
                b.onReady(d);
              }
            },
          },
        ])
      ),
      c = ap(b.remote);
    this.origin = ap(b.remote);
    this.destroy = function () {
      a.destroy();
    };
    this.postMessage = function (d) {
      a.outgoing(d, c);
    };
    a.init();
  };
  aA.Rpc = function (e, d) {
    if (d.local) {
      for (var b in d.local) {
        if (d.local.hasOwnProperty(b)) {
          var a = d.local[b];
          if (typeof a === "function") {
            d.local[b] = { method: a };
          }
        }
      }
    }
    var c = ae(
      au(e).concat([
        new aA.stack.RpcBehavior(this, d),
        {
          callback: function (f) {
            if (e.onReady) {
              e.onReady(f);
            }
          },
        },
      ])
    );
    this.origin = ap(e.remote);
    this.destroy = function () {
      c.destroy();
    };
    c.init();
  };
  aA.stack.SameOriginTransport = function (d) {
    var e, b, a, c;
    return (e = {
      outgoing: function (g, h, f) {
        a(g);
        if (f) {
          f();
        }
      },
      destroy: function () {
        if (b) {
          b.parentNode.removeChild(b);
          b = null;
        }
      },
      onDOMReady: function () {
        c = ap(d.remote);
        if (d.isHost) {
          aL(d.props, {
            src: aD(d.remote, {
              xdm_e: aC.protocol + "//" + aC.host + aC.pathname,
              xdm_c: d.channel,
              xdm_p: 4,
            }),
            name: aN + d.channel + "_provider",
          });
          b = Y(d);
          aA.Fn.set(d.channel, function (f) {
            a = f;
            at(function () {
              e.up.callback(true);
            }, 0);
            return function (g) {
              e.up.incoming(g, c);
            };
          });
        } else {
          a = aw().Fn.get(
            d.channel,
            true
          )(function (f) {
            e.up.incoming(f, c);
          });
          at(function () {
            e.up.callback(true);
          }, 0);
        }
      },
      init: function () {
        ak(e.onDOMReady, e);
      },
    });
  };
  aA.stack.FlashTransport = function (a) {
    var c, g, b, d, h, e;
    function f(l, k) {
      at(function () {
        c.up.incoming(l, d);
      }, 0);
    }
    function j(l) {
      var k = a.swf + "?host=" + a.isHost;
      var n = "easyXDM_swf_" + Math.floor(Math.random() * 10000);
      aA.Fn.set("flash_loaded" + l.replace(/[\-.]/g, "_"), function () {
        aA.stack.FlashTransport[l].swf = h = e.firstChild;
        var o = aA.stack.FlashTransport[l].queue;
        for (var p = 0; p < o.length; p++) {
          o[p]();
        }
        o.length = 0;
      });
      if (a.swfContainer) {
        e =
          typeof a.swfContainer == "string"
            ? ad.getElementById(a.swfContainer)
            : a.swfContainer;
      } else {
        e = ad.createElement("div");
        aL(
          e.style,
          al && a.swfNoThrottle
            ? {
                height: "20px",
                width: "20px",
                position: "fixed",
                right: 0,
                top: 0,
              }
            : {
                height: "1px",
                width: "1px",
                position: "absolute",
                overflow: "hidden",
                right: 0,
                top: 0,
              }
        );
        ad.body.appendChild(e);
      }
      var m =
        "callback=flash_loaded" +
        l.replace(/[\-.]/g, "_") +
        "&proto=" +
        Z.location.protocol +
        "&domain=" +
        aU(Z.location.href) +
        "&port=" +
        ah(Z.location.href) +
        "&ns=" +
        ao;
      e.innerHTML =
        "<object height='20' width='20' type='application/x-shockwave-flash' id='" +
        n +
        "' data='" +
        k +
        "'><param name='allowScriptAccess' value='always'></param><param name='wmode' value='transparent'><param name='movie' value='" +
        k +
        "'></param><param name='flashvars' value='" +
        m +
        "'></param><embed type='application/x-shockwave-flash' FlashVars='" +
        m +
        "' allowScriptAccess='always' wmode='transparent' src='" +
        k +
        "' height='1' width='1'></embed></object>";
    }
    return (c = {
      outgoing: function (l, m, k) {
        h.postMessage(a.channel, l.toString());
        if (k) {
          k();
        }
      },
      destroy: function () {
        try {
          h.destroyChannel(a.channel);
        } catch (k) {}
        h = null;
        if (g) {
          g.parentNode.removeChild(g);
          g = null;
        }
      },
      onDOMReady: function () {
        d = a.remote;
        aA.Fn.set("flash_" + a.channel + "_init", function () {
          at(function () {
            c.up.callback(true);
          });
        });
        aA.Fn.set("flash_" + a.channel + "_onMessage", f);
        a.swf = aa(a.swf);
        var l = aU(a.swf);
        var k = function () {
          aA.stack.FlashTransport[l].init = true;
          h = aA.stack.FlashTransport[l].swf;
          h.createChannel(a.channel, a.secret, ap(a.remote), a.isHost);
          if (a.isHost) {
            if (al && a.swfNoThrottle) {
              aL(a.props, {
                position: "fixed",
                right: 0,
                top: 0,
                height: "20px",
                width: "20px",
              });
            }
            aL(a.props, {
              src: aD(a.remote, {
                xdm_e: ap(aC.href),
                xdm_c: a.channel,
                xdm_p: 6,
                xdm_s: a.secret,
              }),
              name: aN + a.channel + "_provider",
            });
            g = Y(a);
          }
        };
        if (aA.stack.FlashTransport[l] && aA.stack.FlashTransport[l].init) {
          k();
        } else {
          if (!aA.stack.FlashTransport[l]) {
            aA.stack.FlashTransport[l] = { queue: [k] };
            j(l);
          } else {
            aA.stack.FlashTransport[l].queue.push(k);
          }
        }
      },
      init: function () {
        ak(c.onDOMReady, c);
      },
    });
  };
  aA.stack.PostMessageTransport = function (a) {
    var c, d, f, g;
    function e(h) {
      if (h.origin) {
        return ap(h.origin);
      }
      if (h.uri) {
        return ap(h.uri);
      }
      if (h.domain) {
        return aC.protocol + "//" + h.domain;
      }
      throw "Unable to retrieve the origin of the event";
    }
    function b(j) {
      var h = e(j);
      if (
        h == g &&
        j.data.substring(0, a.channel.length + 1) == a.channel + " "
      ) {
        c.up.incoming(j.data.substring(a.channel.length + 1), h);
      }
    }
    return (c = {
      outgoing: function (j, k, h) {
        f.postMessage(a.channel + " " + j, k || g);
        if (h) {
          h();
        }
      },
      destroy: function () {
        aS(az, "message", b);
        if (d) {
          f = null;
          d.parentNode.removeChild(d);
          d = null;
        }
      },
      onDOMReady: function () {
        g = ap(a.remote);
        if (a.isHost) {
          var h = function (j) {
            if (j.data == a.channel + "-ready") {
              f =
                "postMessage" in d.contentWindow
                  ? d.contentWindow
                  : d.contentWindow.document;
              aS(az, "message", h);
              aO(az, "message", b);
              at(function () {
                c.up.callback(true);
              }, 0);
            }
          };
          aO(az, "message", h);
          aL(a.props, {
            src: aD(a.remote, {
              xdm_e: ap(aC.href),
              xdm_c: a.channel,
              xdm_p: 1,
            }),
            name: aN + a.channel + "_provider",
          });
          d = Y(a);
        } else {
          aO(az, "message", b);
          f = "postMessage" in az.parent ? az.parent : az.parent.document;
          f.postMessage(a.channel + "-ready", g);
          at(function () {
            c.up.callback(true);
          }, 0);
        }
      },
      init: function () {
        ak(c.onDOMReady, c);
      },
    });
  };
  aA.stack.FrameElementTransport = function (d) {
    var e, b, a, c;
    return (e = {
      outgoing: function (g, h, f) {
        a.call(this, g);
        if (f) {
          f();
        }
      },
      destroy: function () {
        if (b) {
          b.parentNode.removeChild(b);
          b = null;
        }
      },
      onDOMReady: function () {
        c = ap(d.remote);
        if (d.isHost) {
          aL(d.props, {
            src: aD(d.remote, {
              xdm_e: ap(aC.href),
              xdm_c: d.channel,
              xdm_p: 5,
            }),
            name: aN + d.channel + "_provider",
          });
          b = Y(d);
          b.fn = function (f) {
            delete b.fn;
            a = f;
            at(function () {
              e.up.callback(true);
            }, 0);
            return function (g) {
              e.up.incoming(g, c);
            };
          };
        } else {
          if (ad.referrer && ap(ad.referrer) != aJ.xdm_e) {
            az.top.location = aJ.xdm_e;
          }
          a = az.frameElement.fn(function (f) {
            e.up.incoming(f, c);
          });
          e.up.callback(true);
        }
      },
      init: function () {
        ak(e.onDOMReady, e);
      },
    });
  };
  aA.stack.NameTransport = function (b) {
    var c;
    var e, j, a, g, h, m, l;
    function f(p) {
      var o = b.remoteHelper + (e ? "#_3" : "#_2") + b.channel;
      j.contentWindow.sendMessage(p, o);
    }
    function d() {
      if (e) {
        if (++g === 2 || !e) {
          c.up.callback(true);
        }
      } else {
        f("ready");
        c.up.callback(true);
      }
    }
    function k(o) {
      c.up.incoming(o, m);
    }
    function n() {
      if (h) {
        at(function () {
          h(true);
        }, 0);
      }
    }
    return (c = {
      outgoing: function (p, q, o) {
        h = o;
        f(p);
      },
      destroy: function () {
        j.parentNode.removeChild(j);
        j = null;
        if (e) {
          a.parentNode.removeChild(a);
          a = null;
        }
      },
      onDOMReady: function () {
        e = b.isHost;
        g = 0;
        m = ap(b.remote);
        b.local = aa(b.local);
        if (e) {
          aA.Fn.set(b.channel, function (p) {
            if (e && p === "ready") {
              aA.Fn.set(b.channel, k);
              d();
            }
          });
          l = aD(b.remote, { xdm_e: b.local, xdm_c: b.channel, xdm_p: 2 });
          aL(b.props, {
            src: l + "#" + b.channel,
            name: aN + b.channel + "_provider",
          });
          a = Y(b);
        } else {
          b.remoteHelper = b.remote;
          aA.Fn.set(b.channel, k);
        }
        var o = function () {
          var p = j || this;
          aS(p, "load", o);
          aA.Fn.set(b.channel + "_load", n);
          (function q() {
            if (typeof p.contentWindow.sendMessage == "function") {
              d();
            } else {
              at(q, 50);
            }
          })();
        };
        j = Y({ props: { src: b.local + "#_4" + b.channel }, onLoad: o });
      },
      init: function () {
        ak(c.onDOMReady, c);
      },
    });
  };
  aA.stack.HashTransport = function (q) {
    var c;
    var h = this,
      f,
      a,
      o,
      d,
      n,
      b,
      m;
    var g, p;
    function l(s) {
      if (!m) {
        return;
      }
      var r = q.remote + "#" + n++ + "_" + s;
      (f || !g ? m.contentWindow : m).location = r;
    }
    function e(r) {
      d = r;
      c.up.incoming(d.substring(d.indexOf("_") + 1), p);
    }
    function k() {
      if (!b) {
        return;
      }
      var r = b.location.href,
        t = "",
        s = r.indexOf("#");
      if (s != -1) {
        t = r.substring(s);
      }
      if (t && t != d) {
        e(t);
      }
    }
    function j() {
      a = setInterval(k, o);
    }
    return (c = {
      outgoing: function (r, s) {
        l(r);
      },
      destroy: function () {
        az.clearInterval(a);
        if (f || !g) {
          m.parentNode.removeChild(m);
        }
        m = null;
      },
      onDOMReady: function () {
        f = q.isHost;
        o = q.interval;
        d = "#" + q.channel;
        n = 0;
        g = q.useParent;
        p = ap(q.remote);
        if (f) {
          aL(q.props, { src: q.remote, name: aN + q.channel + "_provider" });
          if (g) {
            q.onLoad = function () {
              b = az;
              j();
              c.up.callback(true);
            };
          } else {
            var t = 0,
              r = q.delay / 50;
            (function s() {
              if (++t > r) {
                throw new Error("Unable to reference listenerwindow");
              }
              try {
                b = m.contentWindow.frames[aN + q.channel + "_consumer"];
              } catch (u) {}
              if (b) {
                j();
                c.up.callback(true);
              } else {
                at(s, 50);
              }
            })();
          }
          m = Y(q);
        } else {
          b = az;
          j();
          if (g) {
            m = parent;
            c.up.callback(true);
          } else {
            aL(q, {
              props: {
                src: q.remote + "#" + q.channel + new Date(),
                name: aN + q.channel + "_consumer",
              },
              onLoad: function () {
                c.up.callback(true);
              },
            });
            m = Y(q);
          }
        }
      },
      init: function () {
        ak(c.onDOMReady, c);
      },
    });
  };
  aA.stack.ReliableBehavior = function (e) {
    var a, c;
    var b = 0,
      d = 0,
      f = "";
    return (a = {
      incoming: function (j, g) {
        var h = j.indexOf("_"),
          k = j.substring(0, h).split(",");
        j = j.substring(h + 1);
        if (k[0] == b) {
          f = "";
          if (c) {
            c(true);
            c = null;
          }
        }
        if (j.length > 0) {
          a.down.outgoing(k[1] + "," + b + "_" + f, g);
          if (d != k[1]) {
            d = k[1];
            a.up.incoming(j, g);
          }
        }
      },
      outgoing: function (j, g, h) {
        f = j;
        c = h;
        a.down.outgoing(d + "," + ++b + "_" + j, g);
      },
    });
  };
  aA.stack.QueueBehavior = function (k) {
    var c,
      d = [],
      g = true,
      a = "",
      f,
      h = 0,
      j = false,
      b = false;
    function e() {
      if (k.remove && d.length === 0) {
        aQ(c);
        return;
      }
      if (g || d.length === 0 || f) {
        return;
      }
      g = true;
      var l = d.shift();
      c.down.outgoing(l.data, l.origin, function (m) {
        g = false;
        if (l.callback) {
          at(function () {
            l.callback(m);
          }, 0);
        }
        e();
      });
    }
    return (c = {
      init: function () {
        if (aK(k)) {
          k = {};
        }
        if (k.maxLength) {
          h = k.maxLength;
          b = true;
        }
        if (k.lazy) {
          j = true;
        } else {
          c.down.init();
        }
      },
      callback: function (m) {
        g = false;
        var l = c.up;
        e();
        l.callback(m);
      },
      incoming: function (o, m) {
        if (b) {
          var n = o.indexOf("_"),
            l = parseInt(o.substring(0, n), 10);
          a += o.substring(n + 1);
          if (l === 0) {
            if (k.encode) {
              a = ar(a);
            }
            c.up.incoming(a, m);
            a = "";
          }
        } else {
          c.up.incoming(o, m);
        }
      },
      outgoing: function (p, m, o) {
        if (k.encode) {
          p = am(p);
        }
        var l = [],
          n;
        if (b) {
          while (p.length !== 0) {
            n = p.substring(0, h);
            p = p.substring(n.length);
            l.push(n);
          }
          while ((n = l.shift())) {
            d.push({
              data: l.length + "_" + n,
              origin: m,
              callback: l.length === 0 ? o : null,
            });
          }
        } else {
          d.push({ data: p, origin: m, callback: o });
        }
        if (j) {
          c.down.init();
        } else {
          e();
        }
      },
      destroy: function () {
        f = true;
        c.down.destroy();
      },
    });
  };
  aA.stack.VerifyBehavior = function (b) {
    var c,
      a,
      e,
      f = false;
    function d() {
      a = Math.random().toString(16).substring(2);
      c.down.outgoing(a);
    }
    return (c = {
      incoming: function (j, g) {
        var h = j.indexOf("_");
        if (h === -1) {
          if (j === a) {
            c.up.callback(true);
          } else {
            if (!e) {
              e = j;
              if (!b.initiate) {
                d();
              }
              c.down.outgoing(j);
            }
          }
        } else {
          if (j.substring(0, h) === e) {
            c.up.incoming(j.substring(h + 1), g);
          }
        }
      },
      outgoing: function (j, g, h) {
        c.down.outgoing(a + "_" + j, g, h);
      },
      callback: function (g) {
        if (b.initiate) {
          d();
        }
      },
    });
  };
  aA.stack.RpcBehavior = function (d, h) {
    var a,
      f = h.serializer || aB();
    var e = 0,
      c = {};
    function g(k) {
      k.jsonrpc = "2.0";
      a.down.outgoing(f.stringify(k));
    }
    function b(k, m) {
      var l = Array.prototype.slice;
      return function () {
        var n = arguments.length,
          p,
          o = { method: m };
        if (n > 0 && typeof arguments[n - 1] === "function") {
          if (n > 1 && typeof arguments[n - 2] === "function") {
            p = { success: arguments[n - 2], error: arguments[n - 1] };
            o.params = l.call(arguments, 0, n - 2);
          } else {
            p = { success: arguments[n - 1] };
            o.params = l.call(arguments, 0, n - 1);
          }
          c["" + ++e] = p;
          o.id = e;
        } else {
          o.params = l.call(arguments, 0);
        }
        if (k.namedParams && o.params.length === 1) {
          o.params = o.params[0];
        }
        g(o);
      };
    }
    function j(r, q, m, p) {
      if (!m) {
        if (q) {
          g({
            id: q,
            error: { code: -32601, message: "Procedure not found." },
          });
        }
        return;
      }
      var o, l;
      if (q) {
        o = function (s) {
          o = aE;
          g({ id: q, result: s });
        };
        l = function (s, t) {
          l = aE;
          var u = { id: q, error: { code: -32099, message: s } };
          if (t) {
            u.error.data = t;
          }
          g(u);
        };
      } else {
        o = l = aE;
      }
      if (!aG(p)) {
        p = [p];
      }
      try {
        var k = m.method.apply(m.scope, p.concat([o, l]));
        if (!aK(k)) {
          o(k);
        }
      } catch (n) {
        l(n.message);
      }
    }
    return (a = {
      incoming: function (l, k) {
        var m = f.parse(l);
        if (m.method) {
          if (h.handle) {
            h.handle(m, g);
          } else {
            j(m.method, m.id, h.local[m.method], m.params);
          }
        } else {
          var n = c[m.id];
          if (m.error) {
            if (n.error) {
              n.error(m.error);
            }
          } else {
            if (n.success) {
              n.success(m.result);
            }
          }
          delete c[m.id];
        }
      },
      init: function () {
        if (h.remote) {
          for (var k in h.remote) {
            if (h.remote.hasOwnProperty(k)) {
              d[k] = b(h.remote[k], k);
            }
          }
        }
        a.down.init();
      },
      destroy: function () {
        for (var k in h.remote) {
          if (h.remote.hasOwnProperty(k) && d.hasOwnProperty(k)) {
            delete d[k];
          }
        }
        a.down.destroy();
      },
    });
  };
  Z.easyXDM = aA;
})(
  window,
  document,
  location,
  window.setTimeout,
  decodeURIComponent,
  encodeURIComponent
);
if (typeof JSON !== "object") {
  JSON = {};
}
(function () {
  function f(n) {
    return n < 10 ? "0" + n : n;
  }
  if (typeof Date.prototype.toJSON !== "function") {
    Date.prototype.toJSON = function (key) {
      return isFinite(this.valueOf())
        ? this.getUTCFullYear() +
            "-" +
            f(this.getUTCMonth() + 1) +
            "-" +
            f(this.getUTCDate()) +
            "T" +
            f(this.getUTCHours()) +
            ":" +
            f(this.getUTCMinutes()) +
            ":" +
            f(this.getUTCSeconds()) +
            "Z"
        : null;
    };
    String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (
      key
    ) {
      return this.valueOf();
    };
  }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {
      "\b": "\\b",
      "\t": "\\t",
      "\n": "\\n",
      "\f": "\\f",
      "\r": "\\r",
      '"': '\\"',
      "\\": "\\\\",
    },
    rep;
  function quote(string) {
    escapable.lastIndex = 0;
    return escapable.test(string)
      ? '"' +
          string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === "string"
              ? c
              : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
          }) +
          '"'
      : '"' + string + '"';
  }
  function str(key, holder) {
    var i,
      k,
      v,
      length,
      mind = gap,
      partial,
      value = holder[key];
    if (
      value &&
      typeof value === "object" &&
      typeof value.toJSON === "function"
    ) {
      value = value.toJSON(key);
    }
    if (typeof rep === "function") {
      value = rep.call(holder, key, value);
    }
    switch (typeof value) {
      case "string":
        return quote(value);
      case "number":
        return isFinite(value) ? String(value) : "null";
      case "boolean":
      case "null":
        return String(value);
      case "object":
        if (!value) {
          return "null";
        }
        gap += indent;
        partial = [];
        if (Object.prototype.toString.apply(value) === "[object Array]") {
          length = value.length;
          for (i = 0; i < length; i += 1) {
            partial[i] = str(i, value) || "null";
          }
          v =
            partial.length === 0
              ? "[]"
              : gap
              ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
              : "[" + partial.join(",") + "]";
          gap = mind;
          return v;
        }
        if (rep && typeof rep === "object") {
          length = rep.length;
          for (i = 0; i < length; i += 1) {
            if (typeof rep[i] === "string") {
              k = rep[i];
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ": " : ":") + v);
              }
            }
          }
        } else {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ": " : ":") + v);
              }
            }
          }
        }
        v =
          partial.length === 0
            ? "{}"
            : gap
            ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
            : "{" + partial.join(",") + "}";
        gap = mind;
        return v;
    }
  }
  if (typeof JSON.stringify !== "function") {
    JSON.stringify = function (value, replacer, space) {
      var i;
      gap = "";
      indent = "";
      if (typeof space === "number") {
        for (i = 0; i < space; i += 1) {
          indent += " ";
        }
      } else {
        if (typeof space === "string") {
          indent = space;
        }
      }
      rep = replacer;
      if (
        replacer &&
        typeof replacer !== "function" &&
        (typeof replacer !== "object" || typeof replacer.length !== "number")
      ) {
        throw new Error("JSON.stringify");
      }
      return str("", { "": value });
    };
  }
  if (typeof JSON.parse !== "function") {
    JSON.parse = function (text, reviver) {
      var j;
      function walk(holder, key) {
        var k,
          v,
          value = holder[key];
        if (value && typeof value === "object") {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            }
          }
        }
        return reviver.call(holder, key, value);
      }
      text = String(text);
      cx.lastIndex = 0;
      if (cx.test(text)) {
        text = text.replace(cx, function (a) {
          return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        });
      }
      if (
        /^[\],:{}\s]*$/.test(
          text
            .replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@")
            .replace(
              /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
              "]"
            )
            .replace(/(?:^|:|,)(?:\s*\[)+/g, "")
        )
      ) {
        j = eval("(" + text + ")");
        return typeof reviver === "function" ? walk({ "": j }, "") : j;
      }
      throw new SyntaxError("JSON.parse");
    };
  }
})();
window.SimplifyCommerce = (function () {
  var e = this;
  function b(l, g) {
    var j = f(l, g);
    if (!j.areValid) {
      if (typeof g === "function") {
        g({ error: { code: "system", message: j.messsage } });
      }
      return;
    }
    var n,
      k = l.key.substring(0, 4) === "lvpb",
      h = c(k);
    var m = new easyXDM.Socket({
      remote: d(k),
      onReady: function () {
        l.source = "SIMPLIFYJS";
        l.sc_user_prefs = mcparm2.mctag();
        m.postMessage(JSON.stringify(l));
      },
      onMessage: function (o, p) {
        if (p.substring(0, h.length) === h) {
          clearTimeout(n);
          m.destroy();
          var q = JSON.parse(o);
          g(JSON.parse(q.content), q.status);
        }
      },
      swf: "https://www.simplify.com/commerce/static/js/xdm/easyxdm.swf",
    });
    n = setTimeout(function () {
      m.destroy();
      g({
        error: {
          code: "system",
          message: "The payment request has timed out.",
        },
      });
    }, 5 * 1000);
  }
  function f(j, h) {
    var g = true;
    if (
      typeof j === "undefined" ||
      typeof j.key === "undefined" ||
      typeof h === "undefined" ||
      typeof h !== "function"
    ) {
      g = false;
    }
    return {
      areValid: g,
      message:
        "SimplifyCommerce.generateToken call invalid: Ensure card token parameters are set and your callback function is defined.",
    };
  }
  function d(h) {
    var g = "https://sandbox.simplify.com/v1/api";
    if (h) {
      g = "https://api.simplify.com/v1/api";
    }
    return g + "/payment/cardToken/proxy.html";
  }
  function c(g) {
    return g ? "https://api.simplify.com" : "https://sandbox.simplify.com";
  }
  function a(j, l, g, h) {
    e.masterPassCallback = g;
    e.masterPassCanceledCallback = h;
    var k = "https://www.simplify.com/commerce/masterPass/proxy?key=" + l;
    var m = new easyXDM.Socket({
      remote: k,
      container: j,
      props: {
        scrolling: "no",
        style: { border: "0px", width: "180px", height: "42px" },
      },
      onMessage: function (o, p) {
        var n = "https://www.simplify.com";
        if (p.substring(0, n.length) === n) {
          if (o == "cancel") {
            if (
              typeof e.masterPassCanceledCallback == "undefined" ||
              e.masterPassCanceledCallback == null
            ) {
              return;
            }
            e.masterPassCanceledCallback();
          } else {
            var q = JSON.parse(o);
            if (
              typeof e.masterPassCallback == "undefined" ||
              e.masterPassCallback == null
            ) {
              return;
            }
            e.masterPassCallback(JSON.parse(q.content), q.status);
          }
        }
      },
      swf: "https://www.simplify.com/commerce/static/js/xdm/easyxdm.swf",
    });
  }
  return { generateToken: b, addMasterPassCheckoutButton: a };
})();
IAS.MasterCard = function (b, a) {
  this.publicKey = b || "sbpb_NWRhZjMwNjEtNTEwZC00YWFkLWFkOGYtNzU4NGYyMWMxZTlh";
  this.postUrl = a;
  this.renderers = {};
};
IAS.MasterCard.prototype.showPaymentForm = function () {
  var b = $("<div>");
  this.createPaymentForm(b);
  var c = {
    label: IAS.L("Process Payment"),
    bindFunction: IAS.bind(this, "onProcessPaymentButtonClick"),
  };
  var a = new IAS.popup(b, IAS.L("Payment Form"), null, [c]);
};
IAS.MasterCard.prototype.createPaymentForm = function (a) {
  a.append(IAS.createVerifiedAndSecuredHttps());
  a.append("<hr><br>");
  this.createCriditCardsImage(a);
  a.append("<br>");
  this.createConfirmationMessage(a);
  a.append("<br>");
  this.createPaymentTable(a);
  a.append("<br><br>");
  this.createResponseMessageContainer(a);
};
IAS.MasterCard.prototype.createCriditCardsImage = function (a) {
  var b = $("<div>").css("text-align", "center");
  var c = $(
    "<img src = '/css/icons/credit-cards.png' class='criditCardsImage'>"
  );
  b.append(c);
  a.append(b);
};
IAS.MasterCard.prototype.createConfirmationMessage = function (a) {
  this.confirmationDiv = $("<div>")
    .addClass("confirmation")
    .css({ "font-weight": "bold" });
  this.confirmationDiv.append(
    IAS.L("Please confirm your payment details before submitting")
  );
  a.append(this.confirmationDiv);
};
IAS.MasterCard.prototype.createPaymentTable = function (e) {
  var a = $("<div>");
  var b = new TextRenderer({
    id: "cc-number",
    type: "text",
    maxlength: "20",
    autocomplete: "off",
    value: "",
    autofocus: true,
  });
  b.renderOn(a);
  b.createErrorMarker(a);
  this.renderers.number = b;
  var c = $("<div>");
  var d = new TextRenderer({
    id: "cc-cvc",
    type: "text",
    maxlength: "4",
    autocomplete: "off",
    value: "",
  });
  d.renderOn(c);
  d.createErrorMarker(c);
  this.renderers.cvc = d;
  var f = $("<div>");
  var h = function () {
    var q = monthString().longMonth;
    var r = [];
    for (var o in q) {
      var p = q[o];
      var n =
        p.id.toString().length == 1 ? "0" + p.id.toString() : p.id.toString();
      r.push({ id: n, label: q[o].label });
    }
    return r;
  };
  var j = new DropdownRenderer({
    id: "cc-exp-month",
    type: "dropdown",
    options: h(),
  });
  j.renderOn(f);
  this.renderers.expMonth = j;
  f.append(" ");
  var l = function () {
    var p = new Date();
    var o = p.getDate("yy");
    var n = p.getFullYear();
    var r = [];
    for (var q = 1; q <= 10; q++) {
      r.push({ id: o++, label: n++ });
    }
    return r;
  };
  var m = new DropdownRenderer({
    id: "cc-exp-year",
    type: "dropdown",
    options: l(),
  });
  m.renderOn(f);
  this.renderers.expYear = m;
  j.createErrorMarker(f);
  m.createErrorMarker(f);
  var k = [
    { cells: [IAS.L("Credit Card Number") + ": ", a] },
    { cells: [IAS.L("CVC") + ": ", c] },
    { cells: [IAS.L("Expiry Date") + ": ", f] },
  ];
  var g = new IAS.TableLayoutRenderer(k, e, "simplify-payment-form", 500, 50);
};
IAS.MasterCard.prototype.createProcesssPaymentButton = function (a) {};
IAS.MasterCard.prototype.createResponseMessageContainer = function (a) {
  this.responseInfoDiv = $("<div>").attr({ id: "responseInfo", color: "red" });
  a.append(this.responseInfoDiv);
};
IAS.MasterCard.prototype.onProcessPaymentButtonClick = function () {
  var e = this;
  var a = {};
  var c = false;
  for (var d in this.renderers) {
    var b = this.renderers[d].validateAndCheckErrors({
      allFieldsRequired: true,
    });
    if (b) {
      c = true;
    }
    a[d] = this.renderers[d].getValue();
  }
  if (!c) {
    SimplifyCommerce.generateToken(
      { key: this.publicKey, card: a },
      IAS.bind(e, "simplifyResponseHandler")
    );
  }
};
IAS.MasterCard.prototype.showRetrievedErrorMessage = function (a) {
  if (a.code == "validation") {
    var c = a.fieldErrors,
      d = c.length,
      b = "";
    for (var e = 0; e < d; e++) {
      b +=
        "<div class='error'>Field: '" +
        c[e].field +
        "' is invalid - " +
        c[e].message +
        "</div>";
    }
    $(this.responseInfoDiv).append(b);
  }
};
IAS.MasterCard.prototype.submitRetrievedToken = function (b) {
  var a = { token: b };
};
IAS.MasterCard.prototype.simplifyResponseHandler = function (a) {
  $(".error").remove();
  $(this.responseInfoDiv).empty();
  if (a.error) {
    this.showRetrievedErrorMessage(a.error);
  } else {
    var b = a.id;
    this.submitRetrievedToken(b);
  }
};
IAS.MasterCard.prototype.CreateMasterPassButton = function (a) {
  var b = $.createDiv("buy-with-masterpass-div");
  a.append(b);
  SimplifyCommerce.addMasterPassCheckoutButton(
    b,
    this.publicKey,
    IAS.bind(this, "masterPassResponseHandler"),
    IAS.bind(this, "masterPassCanceledHandler")
  );
};
IAS.MasterCard.prototype.masterPassResponseHandler = function (b, c) {
  $(".error").remove();
  $(this.responseInfoDiv).empty();
  if (b.error) {
    this.showRetrievedErrorMessage(b.error);
  } else {
    var d = b.id;
    var a = "XXXX-XXXX-XXXX-" + b.card.last4;
    this.createMasterPassPaymentConfirmationForm(a, d);
  }
};
IAS.MasterCard.prototype.masterPassCanceledHandler = function () {
  console.log("MasterPass canceled");
};
IAS.MasterCard.prototype.createMasterPassPaymentConfirmationForm = function (
  a,
  g
) {
  var f = this;
  var e = $("<div>");
  e.append("<br>");
  var c = $("<div>")
    .addClass("masterPassConfirmation")
    .css("font-weight", "bold");
  c.append(IAS.L("Please confirm your payment details before submitting"));
  e.append(c).append("<br>");
  var b = new UIRenderer(
    {
      fields: [
        {
          id: "cc-number",
          type: "text",
          label: IAS.L("Credit Card Number") + ": ",
          maxlength: "20",
          autocomplete: "off",
          autofocus: true,
          value: a,
        },
      ],
    },
    e,
    null,
    null,
    true
  );
  var d = new IAS.popup(e, IAS.L("Master Pass Payment Confirmation"), null, [
    {
      label: IAS.L("Submit"),
      bindFunction: function () {
        var h = g;
        f.submitRetrievedToken(h);
        this.close();
      },
    },
  ]);
};
jQuery.browser = jQuery.browser || {};
(function () {
  jQuery.browser.msie = false;
  jQuery.browser.version = 0;
  if (navigator.userAgent.match(/MSIE ([0-9]+)\./)) {
    jQuery.browser.msie = true;
    jQuery.browser.version = RegExp.$1;
  }
})();
(function (c) {
  function e(a) {
    a && a.printPage
      ? a.printPage()
      : setTimeout(function () {
          e(a);
        }, 50);
  }
  function f(a) {
    a = b(a);
    b(":checked", a).each(function () {
      this.setAttribute("checked", "checked");
    });
    b("input[type='text']", a).each(function () {
      this.setAttribute("value", b(this).val());
    });
    b("select", a).each(function () {
      var g = b(this);
      b("option", g).each(function () {
        g.val() == b(this).val() && this.setAttribute("selected", "selected");
      });
    });
    b("textarea", a).each(function () {
      var g = b(this).attr("value");
      if (b.browser.b && this.firstChild) {
        this.firstChild.textContent = g;
      } else {
        this.innerHTML = g;
      }
    });
    return b("<div></div>").append(a.clone()).html();
  }
  function h(g, a) {
    var m = b(g);
    g = f(g);
    var j = [];
    j.push("<html><head><title>" + a.pageTitle + "</title>");
    if (a.overrideElementCSS) {
      if (a.overrideElementCSS.length > 0) {
        for (var l = 0; l < a.overrideElementCSS.length; l++) {
          var k = a.overrideElementCSS[l];
          typeof k == "string"
            ? j.push(
                '<link type="text/css" rel="stylesheet" href="' + k + '" >'
              )
            : j.push(
                '<link type="text/css" rel="stylesheet" href="' +
                  k.href +
                  '" media="' +
                  k.media +
                  '" >'
              );
        }
      }
    } else {
      b("link", d)
        .filter(function () {
          return b(this).attr("rel").toLowerCase() == "stylesheet";
        })
        .each(function () {
          j.push(
            '<link type="text/css" rel="stylesheet" href="' +
              b(this).attr("href") +
              '" media="' +
              b(this).attr("media") +
              '" >'
          );
        });
    }
    j.push(
      '<base href="' +
        (c.location.protocol +
          "//" +
          c.location.hostname +
          (c.location.port ? ":" + c.location.port : "") +
          c.location.pathname) +
        '" />'
    );
    j.push(
      '</head><body style="' +
        a.printBodyOptions.styleToAdd +
        '" class="' +
        a.printBodyOptions.classNameToAdd +
        '">'
    );
    j.push('<div class="' + m.attr("class") + '">' + g + "</div>");
    j.push(
      '<script type="text/javascript">function printPage(){focus();print();' +
        (!b.browser.opera &&
        !a.leaveOpen &&
        a.printMode.toLowerCase() == "popup"
          ? "close();"
          : "") +
        "}</script>"
    );
    j.push("</body></html>");
    return j.join("");
  }
  var d = c.document,
    b = c.jQuery;
  b.fn.printElement = function (g) {
    var a = b.extend({}, b.fn.printElement.defaults, g);
    if (a.printMode == "iframe") {
      if (b.browser.opera || /chrome/.test(navigator.userAgent.toLowerCase())) {
        a.printMode = "popup";
      }
    }
    b("[id^='printElement_']").remove();
    return this.each(function () {
      var n = b.a ? b.extend({}, a, b(this).data()) : a,
        j = b(this);
      j = h(j, n);
      var l = null,
        k = null;
      if (n.printMode.toLowerCase() == "popup") {
        l = c.open(
          "about:blank",
          "printElementWindow",
          "width=650,height=440,scrollbars=yes"
        );
        k = l.document;
      } else {
        l = "printElement_" + Math.round(Math.random() * 99999).toString();
        var m = d.createElement("IFRAME");
        b(m).attr({
          style: n.iframeElementOptions.styleToAdd,
          id: l,
          className: n.iframeElementOptions.classNameToAdd,
          frameBorder: 0,
          scrolling: "no",
          src: "about:blank",
        });
        d.body.appendChild(m);
        k = m.contentWindow || m.contentDocument;
        if (k.document) {
          k = k.document;
        }
        m = d.frames ? d.frames[l] : d.getElementById(l);
        l = m.contentWindow || m;
      }
      focus();
      k.open();
      k.write(j);
      k.close();
      e(l);
    });
  };
  b.fn.printElement.defaults = {
    printMode: "iframe",
    pageTitle: "",
    overrideElementCSS: null,
    printBodyOptions: {
      styleToAdd: "padding:10px;margin:10px;",
      classNameToAdd: "",
    },
    leaveOpen: false,
    iframeElementOptions: {
      styleToAdd:
        "border:none;position:absolute;width:0px;height:0px;bottom:0px;left:0px;",
      classNameToAdd: "",
    },
  };
  b.fn.printElement.cssElement = { href: "", media: "" };
})(window);
IAS = IAS || {};
IAS.InitializeBackdoorPage = function (a) {
  var d = a;
  if (!d) {
    d = $("<div>");
  }
  d.append(
    "Test Handle Error 200 on keydown event, on press on many buttons at the same time"
  );
  textRenderer = new TextRenderer({ id: "txt", type: "text", label: "test" });
  textRenderer.renderOn(d);
  var b = function () {
    IAS.post("/Error/TestError404", {}, function () {});
  };
  var c = function () {
    IAS.post("/Error/TestError500", {}, function () {});
  };
  textRenderer.inputField.keydown(function () {
    b();
  });
  textRenderer.inputField.focusout(function () {
    b();
  });
  d.append("<br><br>");
  var f = new ButtonRenderer({ label: "Test Error 500" }, c);
  f.renderOn(d);
  var e = IAS.popupOptions();
  e.width = "600";
  e.height = "300";
  IAS.popup(d, "Specto!", e);
};
/*
page: http://www.icdladmin.com/
url: http://www.icdladmin.com/js/allmasterScriptsFile.js?419694684
*/
