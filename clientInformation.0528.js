/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved. 
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0  
 
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, 
MERCHANTABLITY OR NON-INFRINGEMENT. 
 
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software is based on or incorporates material and code from the projects listed below 
(collectively "Third Party Code"). Microsoft is not the original author of the 
Third Party Code. The original copyright notice and the license, under which 
Microsoft received such Third Party Code, are set forth below. Such license and 
notices are provided for informational purposes only. Microsoft licenses the Third 
Party Code to you under the terms of the Apache 2.0 License.
All Third Party Code licensed by Microsoft under the Apache License, Version 2.0 (the "License"); you 
may not use this file except in compliance with the License. You may obtain a copy 
of the License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR 
CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT. 

See the Apache Version 2.0 License for specific language governing permissions and 
limitations under the License.
---------------------------------------------
Third Party Code Components
--------------------------------------------
---- Mozilla Developer Code---------
The following Mozilla Developer Code is under Public Domain as updated after Aug. 20, 2012, see, https://developer.mozilla.org/en-US/docs/Project:Copyrights
1. Array filter Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter
Any copyright is dedicated to the Public Domain.

2. Array forEach Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach
Any copyright is dedicated to the Public Domain.

3. Array indexOf Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
Any copyright is dedicated to the Public Domain.

4. Array map Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map
Any copyright is dedicated to the Public Domain.

5. Array Reduce Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce
Any copyright is dedicated to the Public Domain.

6. String Trim Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim
Any copyright is dedicated to the Public Domain.

7. Date now Compatibility Method, 
Available at https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/now
Any copyright is dedicated to the Public Domain.

------------JSON2 Script------------------------
json2.js 2012-10-08
Public Domain.
NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
See, http://www.JSON.org/js.html

--------------r.js----------------------
Copyright (c) 2010-2011 Dojo Foundation. All Rights Reserved.
Originally License under MIT License
-------------------------------------------------------------------------
Provided for Informational Purposes Only
MIT License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------- End of ThirdPartyNotices --------------------------------------------------- */
var TypeScript;
!(function (e) {
  e.DiagnosticCode = {
    error_TS_0_1: "error TS{0}: {1}",
    warning_TS_0_1: "warning TS{0}: {1}",
    Unrecognized_escape_sequence: "Unrecognized escape sequence.",
    Unexpected_character_0: "Unexpected character {0}.",
    Missing_close_quote_character: "Missing close quote character.",
    Identifier_expected: "Identifier expected.",
    _0_keyword_expected: "'{0}' keyword expected.",
    _0_expected: "'{0}' expected.",
    Identifier_expected_0_is_a_keyword:
      "Identifier expected; '{0}' is a keyword.",
    Automatic_semicolon_insertion_not_allowed:
      "Automatic semicolon insertion not allowed.",
    Unexpected_token_0_expected: "Unexpected token; '{0}' expected.",
    Trailing_separator_not_allowed: "Trailing separator not allowed.",
    AsteriskSlash_expected: "'*/' expected.",
    public_or_private_modifier_must_precede_static:
      "'public' or 'private' modifier must precede 'static'.",
    Unexpected_token: "Unexpected token.",
    Catch_clause_parameter_cannot_have_a_type_annotation:
      "Catch clause parameter cannot have a type annotation.",
    Rest_parameter_must_be_last_in_list: "Rest parameter must be last in list.",
    Parameter_cannot_have_question_mark_and_initializer:
      "Parameter cannot have question mark and initializer.",
    Required_parameter_cannot_follow_optional_parameter:
      "Required parameter cannot follow optional parameter.",
    Index_signatures_cannot_have_rest_parameters:
      "Index signatures cannot have rest parameters.",
    Index_signature_parameter_cannot_have_accessibility_modifiers:
      "Index signature parameter cannot have accessibility modifiers.",
    Index_signature_parameter_cannot_have_a_question_mark:
      "Index signature parameter cannot have a question mark.",
    Index_signature_parameter_cannot_have_an_initializer:
      "Index signature parameter cannot have an initializer.",
    Index_signature_must_have_a_type_annotation:
      "Index signature must have a type annotation.",
    Index_signature_parameter_must_have_a_type_annotation:
      "Index signature parameter must have a type annotation.",
    Index_signature_parameter_type_must_be_string_or_number:
      "Index signature parameter type must be 'string' or 'number'.",
    extends_clause_already_seen: "'extends' clause already seen.",
    extends_clause_must_precede_implements_clause:
      "'extends' clause must precede 'implements' clause.",
    Classes_can_only_extend_a_single_class:
      "Classes can only extend a single class.",
    implements_clause_already_seen: "'implements' clause already seen.",
    Accessibility_modifier_already_seen: "Accessibility modifier already seen.",
    _0_modifier_must_precede_1_modifier:
      "'{0}' modifier must precede '{1}' modifier.",
    _0_modifier_already_seen: "'{0}' modifier already seen.",
    _0_modifier_cannot_appear_on_a_class_element:
      "'{0}' modifier cannot appear on a class element.",
    Interface_declaration_cannot_have_implements_clause:
      "Interface declaration cannot have 'implements' clause.",
    super_invocation_cannot_have_type_arguments:
      "'super' invocation cannot have type arguments.",
    Only_ambient_modules_can_use_quoted_names:
      "Only ambient modules can use quoted names.",
    Statements_are_not_allowed_in_ambient_contexts:
      "Statements are not allowed in ambient contexts.",
    Implementations_are_not_allowed_in_ambient_contexts:
      "Implementations are not allowed in ambient contexts.",
    declare_modifier_not_allowed_for_code_already_in_an_ambient_context:
      "'declare' modifier not allowed for code already in an ambient context.",
    Initializers_are_not_allowed_in_ambient_contexts:
      "Initializers are not allowed in ambient contexts.",
    Parameter_property_declarations_can_only_be_used_in_a_non_ambient_constructor_declaration:
      "Parameter property declarations can only be used in a non-ambient constructor declaration.",
    Function_implementation_expected: "Function implementation expected.",
    Constructor_implementation_expected: "Constructor implementation expected.",
    Function_overload_name_must_be_0: "Function overload name must be '{0}'.",
    _0_modifier_cannot_appear_on_a_module_element:
      "'{0}' modifier cannot appear on a module element.",
    declare_modifier_cannot_appear_on_an_interface_declaration:
      "'declare' modifier cannot appear on an interface declaration.",
    declare_modifier_required_for_top_level_element:
      "'declare' modifier required for top level element.",
    Rest_parameter_cannot_be_optional: "Rest parameter cannot be optional.",
    Rest_parameter_cannot_have_an_initializer:
      "Rest parameter cannot have an initializer.",
    set_accessor_must_have_one_and_only_one_parameter:
      "'set' accessor must have one and only one parameter.",
    set_accessor_parameter_cannot_be_optional:
      "'set' accessor parameter cannot be optional.",
    set_accessor_parameter_cannot_have_an_initializer:
      "'set' accessor parameter cannot have an initializer.",
    set_accessor_cannot_have_rest_parameter:
      "'set' accessor cannot have rest parameter.",
    get_accessor_cannot_have_parameters:
      "'get' accessor cannot have parameters.",
    Modifiers_cannot_appear_here: "Modifiers cannot appear here.",
    Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher:
      "Accessors are only available when targeting ECMAScript 5 and higher.",
    Class_name_cannot_be_0: "Class name cannot be '{0}'.",
    Interface_name_cannot_be_0: "Interface name cannot be '{0}'.",
    Enum_name_cannot_be_0: "Enum name cannot be '{0}'.",
    Module_name_cannot_be_0: "Module name cannot be '{0}'.",
    Enum_member_must_have_initializer: "Enum member must have initializer.",
    Export_assignment_cannot_be_used_in_internal_modules:
      "Export assignment cannot be used in internal modules.",
    Export_assignment_not_allowed_in_module_with_exported_element:
      "Export assignment not allowed in module with exported element.",
    Module_cannot_have_multiple_export_assignments:
      "Module cannot have multiple export assignments.",
    Ambient_enum_elements_can_only_have_integer_literal_initializers:
      "Ambient enum elements can only have integer literal initializers.",
    module_class_interface_enum_import_or_statement:
      "module, class, interface, enum, import or statement",
    constructor_function_accessor_or_variable:
      "constructor, function, accessor or variable",
    statement: "statement",
    case_or_default_clause: "case or default clause",
    identifier: "identifier",
    call_construct_index_property_or_function_signature:
      "call, construct, index, property or function signature",
    expression: "expression",
    type_name: "type name",
    property_or_accessor: "property or accessor",
    parameter: "parameter",
    type: "type",
    type_parameter: "type parameter",
    declare_modifier_not_allowed_on_import_declaration:
      "'declare' modifier not allowed on import declaration.",
    Function_overload_must_be_static: "Function overload must be static.",
    Function_overload_must_not_be_static:
      "Function overload must not be static.",
    Parameter_property_declarations_cannot_be_used_in_a_constructor_overload:
      "Parameter property declarations cannot be used in a constructor overload.",
    Invalid_reference_directive_syntax: "Invalid 'reference' directive syntax.",
    Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher:
      "Octal literals are not available when targeting ECMAScript 5 and higher.",
    Accessors_are_not_allowed_in_ambient_contexts:
      "Accessors are not allowed in ambient contexts.",
    _0_modifier_cannot_appear_on_a_constructor_declaration:
      "'{0}' modifier cannot appear on a constructor declaration.",
    _0_modifier_cannot_appear_on_a_parameter:
      "'{0}' modifier cannot appear on a parameter.",
    Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement:
      "Only a single variable declaration is allowed in a 'for...in' statement.",
    Type_parameters_cannot_appear_on_a_constructor_declaration:
      "Type parameters cannot appear on a constructor declaration.",
    Type_annotation_cannot_appear_on_a_constructor_declaration:
      "Type annotation cannot appear on a constructor declaration.",
    Duplicate_identifier_0: "Duplicate identifier '{0}'.",
    The_name_0_does_not_exist_in_the_current_scope:
      "The name '{0}' does not exist in the current scope.",
    The_name_0_does_not_refer_to_a_value:
      "The name '{0}' does not refer to a value.",
    super_can_only_be_used_inside_a_class_instance_method:
      "'super' can only be used inside a class instance method.",
    The_left_hand_side_of_an_assignment_expression_must_be_a_variable_property_or_indexer:
      "The left-hand side of an assignment expression must be a variable, property or indexer.",
    Value_of_type_0_is_not_callable_Did_you_mean_to_include_new:
      "Value of type '{0}' is not callable. Did you mean to include 'new'?",
    Value_of_type_0_is_not_callable: "Value of type '{0}' is not callable.",
    Value_of_type_0_is_not_newable: "Value of type '{0}' is not newable.",
    Value_of_type_0_is_not_indexable_by_type_1:
      "Value of type '{0}' is not indexable by type '{1}'.",
    Operator_0_cannot_be_applied_to_types_1_and_2:
      "Operator '{0}' cannot be applied to types '{1}' and '{2}'.",
    Operator_0_cannot_be_applied_to_types_1_and_2_3:
      "Operator '{0}' cannot be applied to types '{1}' and '{2}': {3}",
    Cannot_convert_0_to_1: "Cannot convert '{0}' to '{1}'.",
    Cannot_convert_0_to_1_NL_2: "Cannot convert '{0}' to '{1}':{NL}{2}",
    Expected_var_class_interface_or_module:
      "Expected var, class, interface, or module.",
    Operator_0_cannot_be_applied_to_type_1:
      "Operator '{0}' cannot be applied to type '{1}'.",
    Getter_0_already_declared: "Getter '{0}' already declared.",
    Setter_0_already_declared: "Setter '{0}' already declared.",
    Exported_class_0_extends_private_class_1:
      "Exported class '{0}' extends private class '{1}'.",
    Exported_class_0_implements_private_interface_1:
      "Exported class '{0}' implements private interface '{1}'.",
    Exported_interface_0_extends_private_interface_1:
      "Exported interface '{0}' extends private interface '{1}'.",
    Exported_class_0_extends_class_from_inaccessible_module_1:
      "Exported class '{0}' extends class from inaccessible module {1}.",
    Exported_class_0_implements_interface_from_inaccessible_module_1:
      "Exported class '{0}' implements interface from inaccessible module {1}.",
    Exported_interface_0_extends_interface_from_inaccessible_module_1:
      "Exported interface '{0}' extends interface from inaccessible module {1}.",
    Public_static_property_0_of_exported_class_has_or_is_using_private_type_1:
      "Public static property '{0}' of exported class has or is using private type '{1}'.",
    Public_property_0_of_exported_class_has_or_is_using_private_type_1:
      "Public property '{0}' of exported class has or is using private type '{1}'.",
    Property_0_of_exported_interface_has_or_is_using_private_type_1:
      "Property '{0}' of exported interface has or is using private type '{1}'.",
    Exported_variable_0_has_or_is_using_private_type_1:
      "Exported variable '{0}' has or is using private type '{1}'.",
    Public_static_property_0_of_exported_class_is_using_inaccessible_module_1:
      "Public static property '{0}' of exported class is using inaccessible module {1}.",
    Public_property_0_of_exported_class_is_using_inaccessible_module_1:
      "Public property '{0}' of exported class is using inaccessible module {1}.",
    Property_0_of_exported_interface_is_using_inaccessible_module_1:
      "Property '{0}' of exported interface is using inaccessible module {1}.",
    Exported_variable_0_is_using_inaccessible_module_1:
      "Exported variable '{0}' is using inaccessible module {1}.",
    Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_type_1:
      "Parameter '{0}' of constructor from exported class has or is using private type '{1}'.",
    Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_type_1:
      "Parameter '{0}' of public static property setter from exported class has or is using private type '{1}'.",
    Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_type_1:
      "Parameter '{0}' of public property setter from exported class has or is using private type '{1}'.",
    Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1:
      "Parameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.",
    Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1:
      "Parameter '{0}' of call signature from exported interface has or is using private type '{1}'.",
    Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1:
      "Parameter '{0}' of public static method from exported class has or is using private type '{1}'.",
    Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1:
      "Parameter '{0}' of public method from exported class has or is using private type '{1}'.",
    Parameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1:
      "Parameter '{0}' of method from exported interface has or is using private type '{1}'.",
    Parameter_0_of_exported_function_has_or_is_using_private_type_1:
      "Parameter '{0}' of exported function has or is using private type '{1}'.",
    Parameter_0_of_constructor_from_exported_class_is_using_inaccessible_module_1:
      "Parameter '{0}' of constructor from exported class is using inaccessible module {1}.",
    Parameter_0_of_public_static_property_setter_from_exported_class_is_using_inaccessible_module_1:
      "Parameter '{0}' of public static property setter from exported class is using inaccessible module {1}.",
    Parameter_0_of_public_property_setter_from_exported_class_is_using_inaccessible_module_1:
      "Parameter '{0}' of public property setter from exported class is using inaccessible module {1}.",
    Parameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1:
      "Parameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.",
    Parameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1:
      "Parameter '{0}' of call signature from exported interface is using inaccessible module {1}",
    Parameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1:
      "Parameter '{0}' of public static method from exported class is using inaccessible module {1}.",
    Parameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1:
      "Parameter '{0}' of public method from exported class is using inaccessible module {1}.",
    Parameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1:
      "Parameter '{0}' of method from exported interface is using inaccessible module {1}.",
    Parameter_0_of_exported_function_is_using_inaccessible_module_1:
      "Parameter '{0}' of exported function is using inaccessible module {1}.",
    Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type_0:
      "Return type of public static property getter from exported class has or is using private type '{0}'.",
    Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type_0:
      "Return type of public property getter from exported class has or is using private type '{0}'.",
    Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_0:
      "Return type of constructor signature from exported interface has or is using private type '{0}'.",
    Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type_0:
      "Return type of call signature from exported interface has or is using private type '{0}'.",
    Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type_0:
      "Return type of index signature from exported interface has or is using private type '{0}'.",
    Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type_0:
      "Return type of public static method from exported class has or is using private type '{0}'.",
    Return_type_of_public_method_from_exported_class_has_or_is_using_private_type_0:
      "Return type of public method from exported class has or is using private type '{0}'.",
    Return_type_of_method_from_exported_interface_has_or_is_using_private_type_0:
      "Return type of method from exported interface has or is using private type '{0}'.",
    Return_type_of_exported_function_has_or_is_using_private_type_0:
      "Return type of exported function has or is using private type '{0}'.",
    Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module_0:
      "Return type of public static property getter from exported class is using inaccessible module {0}.",
    Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module_0:
      "Return type of public property getter from exported class is using inaccessible module {0}.",
    Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_0:
      "Return type of constructor signature from exported interface is using inaccessible module {0}.",
    Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module_0:
      "Return type of call signature from exported interface is using inaccessible module {0}.",
    Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module_0:
      "Return type of index signature from exported interface is using inaccessible module {0}.",
    Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module_0:
      "Return type of public static method from exported class is using inaccessible module {0}.",
    Return_type_of_public_method_from_exported_class_is_using_inaccessible_module_0:
      "Return type of public method from exported class is using inaccessible module {0}.",
    Return_type_of_method_from_exported_interface_is_using_inaccessible_module_0:
      "Return type of method from exported interface is using inaccessible module {0}.",
    Return_type_of_exported_function_is_using_inaccessible_module_0:
      "Return type of exported function is using inaccessible module {0}.",
    new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead:
      "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.",
    A_parameter_list_must_follow_a_generic_type_argument_list_expected:
      "A parameter list must follow a generic type argument list. '(' expected.",
    Multiple_constructor_implementations_are_not_allowed:
      "Multiple constructor implementations are not allowed.",
    Unable_to_resolve_external_module_0:
      "Unable to resolve external module '{0}'.",
    Module_cannot_be_aliased_to_a_non_module_type:
      "Module cannot be aliased to a non-module type.",
    A_class_may_only_extend_another_class:
      "A class may only extend another class.",
    A_class_may_only_implement_another_class_or_interface:
      "A class may only implement another class or interface.",
    An_interface_may_only_extend_another_class_or_interface:
      "An interface may only extend another class or interface.",
    Unable_to_resolve_type: "Unable to resolve type.",
    Unable_to_resolve_type_of_0: "Unable to resolve type of '{0}'.",
    Unable_to_resolve_type_parameter_constraint:
      "Unable to resolve type parameter constraint.",
    Type_parameter_constraint_cannot_be_a_primitive_type:
      "Type parameter constraint cannot be a primitive type.",
    Supplied_parameters_do_not_match_any_signature_of_call_target:
      "Supplied parameters do not match any signature of call target.",
    Supplied_parameters_do_not_match_any_signature_of_call_target_NL_0:
      "Supplied parameters do not match any signature of call target:{NL}{0}",
    Invalid_new_expression: "Invalid 'new' expression.",
    Call_signatures_used_in_a_new_expression_must_have_a_void_return_type:
      "Call signatures used in a 'new' expression must have a 'void' return type.",
    Could_not_select_overload_for_new_expression:
      "Could not select overload for 'new' expression.",
    Type_0_does_not_satisfy_the_constraint_1_for_type_parameter_2:
      "Type '{0}' does not satisfy the constraint '{1}' for type parameter '{2}'.",
    Could_not_select_overload_for_call_expression:
      "Could not select overload for 'call' expression.",
    Cannot_invoke_an_expression_whose_type_lacks_a_call_signature:
      "Cannot invoke an expression whose type lacks a call signature.",
    Calls_to_super_are_only_valid_inside_a_class:
      "Calls to 'super' are only valid inside a class.",
    Generic_type_0_requires_1_type_argument_s:
      "Generic type '{0}' requires {1} type argument(s).",
    Type_of_array_literal_cannot_be_determined_Best_common_type_could_not_be_found_for_array_elements:
      "Type of array literal cannot be determined. Best common type could not be found for array elements.",
    Could_not_find_enclosing_symbol_for_dotted_name_0:
      "Could not find enclosing symbol for dotted name '{0}'.",
    The_property_0_does_not_exist_on_value_of_type_1:
      "The property '{0}' does not exist on value of type '{1}'.",
    Could_not_find_symbol_0: "Could not find symbol '{0}'.",
    get_and_set_accessor_must_have_the_same_type:
      "'get' and 'set' accessor must have the same type.",
    this_cannot_be_referenced_in_current_location:
      "'this' cannot be referenced in current location.",
    Static_members_cannot_reference_class_type_parameters:
      "Static members cannot reference class type parameters.",
    Class_0_is_recursively_referenced_as_a_base_type_of_itself:
      "Class '{0}' is recursively referenced as a base type of itself.",
    Interface_0_is_recursively_referenced_as_a_base_type_of_itself:
      "Interface '{0}' is recursively referenced as a base type of itself.",
    super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class:
      "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.",
    super_cannot_be_referenced_in_non_derived_classes:
      "'super' cannot be referenced in non-derived classes.",
    A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties:
      "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.",
    Constructors_for_derived_classes_must_contain_a_super_call:
      "Constructors for derived classes must contain a 'super' call.",
    Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors:
      "Super calls are not permitted outside constructors or in local functions inside constructors.",
    _0_1_is_inaccessible: "'{0}.{1}' is inaccessible.",
    this_cannot_be_referenced_within_module_bodies:
      "'this' cannot be referenced within module bodies.",
    Invalid_expression_types_not_known_to_support_the_addition_operator:
      "Invalid '+' expression - types not known to support the addition operator.",
    The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type:
      "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.",
    The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type:
      "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.",
    The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type_any_number_or_an_enum_type:
      "The type of a unary arithmetic operation operand must be of type 'any', 'number' or an enum type.",
    Variable_declarations_of_a_for_statement_cannot_use_a_type_annotation:
      "Variable declarations of a 'for' statement cannot use a type annotation.",
    Variable_declarations_of_a_for_statement_must_be_of_types_string_or_any:
      "Variable declarations of a 'for' statement must be of types 'string' or 'any'.",
    The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter:
      "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.",
    The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number:
      "The left-hand side of an 'in' expression must be of types 'any', 'string' or 'number'.",
    The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter:
      "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter.",
    The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter:
      "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.",
    The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type:
      "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.",
    Setters_cannot_return_a_value: "Setters cannot return a value.",
    Tried_to_query_type_of_uninitialized_module_0:
      "Tried to query type of uninitialized module '{0}'.",
    Tried_to_set_variable_type_to_uninitialized_module_type_0:
      "Tried to set variable type to uninitialized module type '{0}'.",
    Type_0_does_not_have_type_parameters:
      "Type '{0}' does not have type parameters.",
    Getters_must_return_a_value: "Getters must return a value.",
    Getter_and_setter_accessors_do_not_agree_in_visibility:
      "Getter and setter accessors do not agree in visibility.",
    Invalid_left_hand_side_of_assignment_expression:
      "Invalid left-hand side of assignment expression.",
    Function_declared_a_non_void_return_type_but_has_no_return_expression:
      "Function declared a non-void return type, but has no return expression.",
    Cannot_resolve_return_type_reference:
      "Cannot resolve return type reference.",
    Constructors_cannot_have_a_return_type_of_void:
      "Constructors cannot have a return type of 'void'.",
    Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2:
      "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.",
    All_symbols_within_a_with_block_will_be_resolved_to_any:
      "All symbols within a with block will be resolved to 'any'.",
    Import_declarations_in_an_internal_module_cannot_reference_an_external_module:
      "Import declarations in an internal module cannot reference an external module.",
    Class_0_declares_interface_1_but_does_not_implement_it_NL_2:
      "Class {0} declares interface {1} but does not implement it:{NL}{2}",
    Class_0_declares_class_1_as_an_interface_but_does_not_implement_it_NL_2:
      "Class {0} declares class {1} as an interface but does not implement it:{NL}{2}",
    The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer:
      "The operand of an increment or decrement operator must be a variable, property or indexer.",
    this_cannot_be_referenced_in_static_initializers_in_a_class_body:
      "'this' cannot be referenced in static initializers in a class body.",
    Class_0_cannot_extend_class_1_NL_2:
      "Class '{0}' cannot extend class '{1}':{NL}{2}",
    Interface_0_cannot_extend_class_1_NL_2:
      "Interface '{0}' cannot extend class '{1}':{NL}{2}",
    Interface_0_cannot_extend_interface_1_NL_2:
      "Interface '{0}' cannot extend interface '{1}':{NL}{2}",
    Duplicate_overload_signature_for_0:
      "Duplicate overload signature for '{0}'.",
    Duplicate_constructor_overload_signature:
      "Duplicate constructor overload signature.",
    Duplicate_overload_call_signature: "Duplicate overload call signature.",
    Duplicate_overload_construct_signature:
      "Duplicate overload construct signature.",
    Overload_signature_is_not_compatible_with_function_definition:
      "Overload signature is not compatible with function definition.",
    Overload_signature_is_not_compatible_with_function_definition_NL_0:
      "Overload signature is not compatible with function definition:{NL}{0}",
    Overload_signatures_must_all_be_public_or_private:
      "Overload signatures must all be public or private.",
    Overload_signatures_must_all_be_exported_or_not_exported:
      "Overload signatures must all be exported or not exported.",
    Overload_signatures_must_all_be_ambient_or_non_ambient:
      "Overload signatures must all be ambient or non-ambient.",
    Overload_signatures_must_all_be_optional_or_required:
      "Overload signatures must all be optional or required.",
    Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature:
      "Specialized overload signature is not assignable to any non-specialized signature.",
    this_cannot_be_referenced_in_constructor_arguments:
      "'this' cannot be referenced in constructor arguments.",
    Instance_member_cannot_be_accessed_off_a_class:
      "Instance member cannot be accessed off a class.",
    Untyped_function_calls_may_not_accept_type_arguments:
      "Untyped function calls may not accept type arguments.",
    Non_generic_functions_may_not_accept_type_arguments:
      "Non-generic functions may not accept type arguments.",
    A_generic_type_may_not_reference_itself_with_a_wrapped_form_of_its_own_type_parameters:
      "A generic type may not reference itself with a wrapped form of its own type parameters.",
    Rest_parameters_must_be_array_types: "Rest parameters must be array types.",
    Overload_signature_implementation_cannot_use_specialized_type:
      "Overload signature implementation cannot use specialized type.",
    Export_assignments_may_only_be_used_at_the_top_level_of_external_modules:
      "Export assignments may only be used at the top-level of external modules.",
    Export_assignments_may_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules:
      "Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.",
    Only_public_methods_of_the_base_class_are_accessible_via_the_super_keyword:
      "Only public methods of the base class are accessible via the 'super' keyword.",
    Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1:
      "Numeric indexer type '{0}' must be assignable to string indexer type '{1}'.",
    Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1_NL_2:
      "Numeric indexer type '{0}' must be assignable to string indexer type '{1}':{NL}{2}",
    All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0:
      "All numerically named properties must be assignable to numeric indexer type '{0}'.",
    All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0_NL_1:
      "All numerically named properties must be assignable to numeric indexer type '{0}':{NL}{1}",
    All_named_properties_must_be_assignable_to_string_indexer_type_0:
      "All named properties must be assignable to string indexer type '{0}'.",
    All_named_properties_must_be_assignable_to_string_indexer_type_0_NL_1:
      "All named properties must be assignable to string indexer type '{0}':{NL}{1}",
    Generic_type_references_must_include_all_type_arguments:
      "Generic type references must include all type arguments.",
    Default_arguments_are_only_allowed_in_implementation:
      "Default arguments are only allowed in implementation.",
    Overloads_cannot_differ_only_by_return_type:
      "Overloads cannot differ only by return type.",
    Function_expression_declared_a_non_void_return_type_but_has_no_return_expression:
      "Function expression declared a non-void return type, but has no return expression.",
    Import_declaration_referencing_identifier_from_internal_module_can_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules:
      "Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.",
    Could_not_find_symbol_0_in_module_1:
      "Could not find symbol '{0}' in module '{1}'.",
    Unable_to_resolve_module_reference_0:
      "Unable to resolve module reference '{0}'.",
    Could_not_find_module_0_in_module_1:
      "Could not find module '{0}' in module '{1}'.",
    Exported_import_declaration_0_is_assigned_value_with_type_that_has_or_is_using_private_type_1:
      "Exported import declaration '{0}' is assigned value with type that has or is using private type '{1}'.",
    Exported_import_declaration_0_is_assigned_value_with_type_that_is_using_inaccessible_module_1:
      "Exported import declaration '{0}' is assigned value with type that is using inaccessible module '{1}'.",
    Exported_import_declaration_0_is_assigned_type_that_has_or_is_using_private_type_1:
      "Exported import declaration '{0}' is assigned type that has or is using private type '{1}'.",
    Exported_import_declaration_0_is_assigned_type_that_is_using_inaccessible_module_1:
      "Exported import declaration '{0}' is assigned type that is using inaccessible module '{1}'.",
    Exported_import_declaration_0_is_assigned_container_that_is_or_is_using_inaccessible_module_1:
      "Exported import declaration '{0}' is assigned container that is or is using inaccessible module '{1}'.",
    Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_1:
      "Type name '{0}' in extends clause does not reference constructor function for '{1}'.",
    Internal_module_reference_0_in_import_declaration_does_not_reference_module_instance_for_1:
      "Internal module reference '{0}' in import declaration does not reference module instance for '{1}'.",
    Module_0_cannot_merge_with_previous_declaration_of_1_in_a_different_file_2:
      "Module '{0}' cannot merge with previous declaration of '{1}' in a different file '{2}'.",
    Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3:
      "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}':{NL}{3}",
    Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it:
      "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.",
    Ambient_external_module_declaration_cannot_be_reopened:
      "Ambient external module declaration cannot be reopened.",
    All_declarations_of_merged_declaration_0_must_be_exported_or_not_exported:
      "All declarations of merged declaration '{0}' must be exported or not exported.",
    super_cannot_be_referenced_in_constructor_arguments:
      "'super' cannot be referenced in constructor arguments.",
    Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class:
      "Return type of constructor signature must be assignable to the instance type of the class.",
    Ambient_external_module_declaration_must_be_defined_in_global_context:
      "Ambient external module declaration must be defined in global context.",
    Ambient_external_module_declaration_cannot_specify_relative_module_name:
      "Ambient external module declaration cannot specify relative module name.",
    Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name:
      "Import declaration in an ambient external module declaration cannot reference external module through relative external module name.",
    Could_not_find_the_best_common_type_of_types_of_all_return_statement_expressions:
      "Could not find the best common type of types of all return statement expressions.",
    Import_declaration_cannot_refer_to_external_module_reference_when_noResolve_option_is_set:
      "Import declaration cannot refer to external module reference when --noResolve option is set.",
    Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference:
      "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.",
    continue_statement_can_only_be_used_within_an_enclosing_iteration_statement:
      "'continue' statement can only be used within an enclosing iteration statement.",
    break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement:
      "'break' statement can only be used within an enclosing iteration or switch statement.",
    Jump_target_not_found: "Jump target not found.",
    Jump_target_cannot_cross_function_boundary:
      "Jump target cannot cross function boundary.",
    Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference:
      "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.",
    Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference:
      "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.",
    Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference:
      "Expression resolves to '_super' that compiler uses to capture base class reference.",
    TypeParameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.",
    TypeParameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of call signature from exported interface has or is using private type '{1}'.",
    TypeParameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of public static method from exported class has or is using private type '{1}'.",
    TypeParameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of public method from exported class has or is using private type '{1}'.",
    TypeParameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of method from exported interface has or is using private type '{1}'.",
    TypeParameter_0_of_exported_function_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of exported function has or is using private type '{1}'.",
    TypeParameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.",
    TypeParameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of call signature from exported interface is using inaccessible module {1}",
    TypeParameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of public static method from exported class is using inaccessible module {1}.",
    TypeParameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of public method from exported class is using inaccessible module {1}.",
    TypeParameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of method from exported interface is using inaccessible module {1}.",
    TypeParameter_0_of_exported_function_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of exported function is using inaccessible module {1}.",
    TypeParameter_0_of_exported_class_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of exported class has or is using private type '{1}'.",
    TypeParameter_0_of_exported_interface_has_or_is_using_private_type_1:
      "TypeParameter '{0}' of exported interface has or is using private type '{1}'.",
    TypeParameter_0_of_exported_class_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of exported class is using inaccessible module {1}.",
    TypeParameter_0_of_exported_interface_is_using_inaccessible_module_1:
      "TypeParameter '{0}' of exported interface is using inaccessible module {1}.",
    Duplicate_identifier_i_Compiler_uses_i_to_initialize_rest_parameter:
      "Duplicate identifier '_i'. Compiler uses '_i' to initialize rest parameter.",
    Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters:
      "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.",
    Type_of_conditional_0_must_be_identical_to_1_or_2:
      "Type of conditional '{0}' must be identical to '{1}' or '{2}'.",
    Type_of_conditional_0_must_be_identical_to_1_2_or_3:
      "Type of conditional '{0}' must be identical to '{1}', '{2}' or '{3}'.",
    Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module:
      "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of an external module.",
    Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list:
      "Constraint of a type parameter cannot reference any type parameter from the same type parameter list.",
    Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor:
      "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.",
    Parameter_0_cannot_be_referenced_in_its_initializer:
      "Parameter '{0}' cannot be referenced in its initializer.",
    Duplicate_string_index_signature: "Duplicate string index signature.",
    Duplicate_number_index_signature: "Duplicate number index signature.",
    All_declarations_of_an_interface_must_have_identical_type_parameters:
      "All declarations of an interface must have identical type parameters.",
    Expression_resolves_to_variable_declaration_i_that_compiler_uses_to_initialize_rest_parameter:
      "Expression resolves to variable declaration '_i' that compiler uses to initialize rest parameter.",
    Type_0_is_missing_property_1_from_type_2:
      "Type '{0}' is missing property '{1}' from type '{2}'.",
    Types_of_property_0_of_types_1_and_2_are_incompatible:
      "Types of property '{0}' of types '{1}' and '{2}' are incompatible.",
    Types_of_property_0_of_types_1_and_2_are_incompatible_NL_3:
      "Types of property '{0}' of types '{1}' and '{2}' are incompatible:{NL}{3}",
    Property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2:
      "Property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.",
    Property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2:
      "Property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.",
    Types_0_and_1_define_property_2_as_private:
      "Types '{0}' and '{1}' define property '{2}' as private.",
    Call_signatures_of_types_0_and_1_are_incompatible:
      "Call signatures of types '{0}' and '{1}' are incompatible.",
    Call_signatures_of_types_0_and_1_are_incompatible_NL_2:
      "Call signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
    Type_0_requires_a_call_signature_but_type_1_lacks_one:
      "Type '{0}' requires a call signature, but type '{1}' lacks one.",
    Construct_signatures_of_types_0_and_1_are_incompatible:
      "Construct signatures of types '{0}' and '{1}' are incompatible.",
    Construct_signatures_of_types_0_and_1_are_incompatible_NL_2:
      "Construct signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
    Type_0_requires_a_construct_signature_but_type_1_lacks_one:
      "Type '{0}' requires a construct signature, but type '{1}' lacks one.",
    Index_signatures_of_types_0_and_1_are_incompatible:
      "Index signatures of types '{0}' and '{1}' are incompatible.",
    Index_signatures_of_types_0_and_1_are_incompatible_NL_2:
      "Index signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
    Call_signature_expects_0_or_fewer_parameters:
      "Call signature expects {0} or fewer parameters.",
    Could_not_apply_type_0_to_argument_1_which_is_of_type_2:
      "Could not apply type '{0}' to argument {1} which is of type '{2}'.",
    Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function:
      "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.",
    Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function:
      "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.",
    Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor:
      "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.",
    Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property:
      "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.",
    Types_of_static_property_0_of_class_1_and_class_2_are_incompatible:
      "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible.",
    Types_of_static_property_0_of_class_1_and_class_2_are_incompatible_NL_3:
      "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible:{NL}{3}",
    Type_reference_cannot_refer_to_container_0:
      "Type reference cannot refer to container '{0}'.",
    Type_reference_must_refer_to_type: "Type reference must refer to type.",
    In_enums_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_the_first_enum_element:
      "In enums with multiple declarations only one declaration can omit an initializer for the first enum element.",
    _0_overload_s: " (+ {0} overload(s))",
    Variable_declaration_cannot_have_the_same_name_as_an_import_declaration:
      "Variable declaration cannot have the same name as an import declaration.",
    Signature_expected_0_type_arguments_got_1_instead:
      "Signature expected {0} type arguments, got {1} instead.",
    Property_0_defined_as_optional_in_type_1_but_is_required_in_type_2:
      "Property '{0}' defined as optional in type '{1}', but is required in type '{2}'.",
    Types_0_and_1_originating_in_infinitely_expanding_type_reference_do_not_refer_to_same_named_type:
      "Types '{0}' and '{1}' originating in infinitely expanding type reference do not refer to same named type.",
    Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments:
      "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments.",
    Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments_NL_2:
      "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments:{NL}{2}",
    Named_properties_0_of_types_1_and_2_are_not_identical:
      "Named properties '{0}' of types '{1}' and '{2}' are not identical.",
    Types_of_string_indexer_of_types_0_and_1_are_not_identical:
      "Types of string indexer of types '{0}' and '{1}' are not identical.",
    Types_of_number_indexer_of_types_0_and_1_are_not_identical:
      "Types of number indexer of types '{0}' and '{1}' are not identical.",
    Type_of_number_indexer_in_type_0_is_not_assignable_to_string_indexer_type_in_type_1_NL_2:
      "Type of number indexer in type '{0}' is not assignable to string indexer type in type '{1}'.{NL}{2}",
    Type_of_property_0_in_type_1_is_not_assignable_to_string_indexer_type_in_type_2_NL_3:
      "Type of property '{0}' in type '{1}' is not assignable to string indexer type in type '{2}'.{NL}{3}",
    Type_of_property_0_in_type_1_is_not_assignable_to_number_indexer_type_in_type_2_NL_3:
      "Type of property '{0}' in type '{1}' is not assignable to number indexer type in type '{2}'.{NL}{3}",
    Static_property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2:
      "Static property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.",
    Static_property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2:
      "Static property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.",
    Types_0_and_1_define_static_property_2_as_private:
      "Types '{0}' and '{1}' define static property '{2}' as private.",
    Current_host_does_not_support_0_option:
      "Current host does not support '{0}' option.",
    ECMAScript_target_version_0_not_supported_Specify_a_valid_target_version_1_default_or_2:
      "ECMAScript target version '{0}' not supported.  Specify a valid target version: '{1}' (default), or '{2}'",
    Module_code_generation_0_not_supported:
      "Module code generation '{0}' not supported.",
    Could_not_find_file_0: "Could not find file: '{0}'.",
    A_file_cannot_have_a_reference_to_itself:
      "A file cannot have a reference to itself.",
    Cannot_resolve_referenced_file_0: "Cannot resolve referenced file: '{0}'.",
    Cannot_find_the_common_subdirectory_path_for_the_input_files:
      "Cannot find the common subdirectory path for the input files.",
    Emit_Error_0: "Emit Error: {0}.",
    Cannot_read_file_0_1: "Cannot read file '{0}': {1}",
    Unsupported_file_encoding: "Unsupported file encoding.",
    Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1:
      "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.",
    Unsupported_locale_0: "Unsupported locale: '{0}'.",
    Execution_Failed_NL: "Execution Failed.{NL}",
    Invalid_call_to_up: "Invalid call to 'up'",
    Invalid_call_to_down: "Invalid call to 'down'",
    Base64_value_0_finished_with_a_continuation_bit:
      "Base64 value '{0}' finished with a continuation bit.",
    Unknown_option_0: "Unknown option '{0}'",
    Expected_0_arguments_to_message_got_1_instead:
      "Expected {0} arguments to message, got {1} instead.",
    Expected_the_message_0_to_have_1_arguments_but_it_had_2:
      "Expected the message '{0}' to have {1} arguments, but it had {2}",
    Could_not_delete_file_0: "Could not delete file '{0}'",
    Could_not_create_directory_0: "Could not create directory '{0}'",
    Error_while_executing_file_0: "Error while executing file '{0}': ",
    Cannot_compile_external_modules_unless_the_module_flag_is_provided:
      "Cannot compile external modules unless the '--module' flag is provided.",
    Option_mapRoot_cannot_be_specified_without_specifying_sourcemap_option:
      "Option mapRoot cannot be specified without specifying sourcemap option.",
    Option_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option:
      "Option sourceRoot cannot be specified without specifying sourcemap option.",
    Options_mapRoot_and_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option:
      "Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.",
    Option_0_specified_without_1: "Option '{0}' specified without '{1}'",
    codepage_option_not_supported_on_current_platform:
      "'codepage' option not supported on current platform.",
    Concatenate_and_emit_output_to_single_file:
      "Concatenate and emit output to single file.",
    Generates_corresponding_0_file: "Generates corresponding {0} file.",
    Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations:
      "Specifies the location where debugger should locate map files instead of generated locations.",
    Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations:
      "Specifies the location where debugger should locate TypeScript files instead of source locations.",
    Watch_input_files: "Watch input files.",
    Redirect_output_structure_to_the_directory:
      "Redirect output structure to the directory.",
    Do_not_emit_comments_to_output: "Do not emit comments to output.",
    Skip_resolution_and_preprocessing: "Skip resolution and preprocessing.",
    Specify_ECMAScript_target_version_0_default_or_1:
      "Specify ECMAScript target version: '{0}' (default), or '{1}'",
    Specify_module_code_generation_0_or_1:
      "Specify module code generation: '{0}' or '{1}'",
    Print_this_message: "Print this message.",
    Print_the_compiler_s_version_0: "Print the compiler's version: {0}",
    Allow_use_of_deprecated_0_keyword_when_referencing_an_external_module:
      "Allow use of deprecated '{0}' keyword when referencing an external module.",
    Specify_locale_for_errors_and_messages_For_example_0_or_1:
      "Specify locale for errors and messages. For example '{0}' or '{1}'",
    Syntax_0: "Syntax:   {0}",
    options: "options",
    file1: "file",
    Examples: "Examples:",
    Options: "Options:",
    Insert_command_line_options_and_files_from_a_file:
      "Insert command line options and files from a file.",
    Version_0: "Version {0}",
    Use_the_0_flag_to_see_options: "Use the '{0}' flag to see options.",
    NL_Recompiling_0: "{NL}Recompiling ({0}):",
    STRING: "STRING",
    KIND: "KIND",
    file2: "FILE",
    VERSION: "VERSION",
    LOCATION: "LOCATION",
    DIRECTORY: "DIRECTORY",
    NUMBER: "NUMBER",
    Specify_the_codepage_to_use_when_opening_source_files:
      "Specify the codepage to use when opening source files.",
    Additional_locations: "Additional locations:",
    This_version_of_the_Javascript_runtime_does_not_support_the_0_function:
      "This version of the Javascript runtime does not support the '{0}' function.",
    Unknown_rule: "Unknown rule.",
    Invalid_line_number_0: "Invalid line number ({0})",
    Warn_on_expressions_and_declarations_with_an_implied_any_type:
      "Warn on expressions and declarations with an implied 'any' type.",
    Variable_0_implicitly_has_an_any_type:
      "Variable '{0}' implicitly has an 'any' type.",
    Parameter_0_of_1_implicitly_has_an_any_type:
      "Parameter '{0}' of '{1}' implicitly has an 'any' type.",
    Parameter_0_of_function_type_implicitly_has_an_any_type:
      "Parameter '{0}' of function type implicitly has an 'any' type.",
    Member_0_of_object_type_implicitly_has_an_any_type:
      "Member '{0}' of object type implicitly has an 'any' type.",
    new_expression_which_lacks_a_constructor_signature_implicitly_has_an_any_type:
      "'new' expression, which lacks a constructor signature, implicitly has an 'any' type.",
    _0_which_lacks_return_type_annotation_implicitly_has_an_any_return_type:
      "'{0}', which lacks return-type annotation, implicitly has an 'any' return type.",
    Function_expression_which_lacks_return_type_annotation_implicitly_has_an_any_return_type:
      "Function expression, which lacks return-type annotation, implicitly has an 'any' return type.",
    Parameter_0_of_lambda_function_implicitly_has_an_any_type:
      "Parameter '{0}' of lambda function implicitly has an 'any' type.",
    Constructor_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type:
      "Constructor signature, which lacks return-type annotation, implicitly has an 'any' return type.",
    Lambda_Function_which_lacks_return_type_annotation_implicitly_has_an_any_return_type:
      "Lambda Function, which lacks return-type annotation, implicitly has an 'any' return type.",
    Array_Literal_implicitly_has_an_any_type_from_widening:
      "Array Literal implicitly has an 'any' type from widening.",
    _0_which_lacks_get_accessor_and_parameter_type_annotation_on_set_accessor_implicitly_has_an_any_type:
      "'{0}', which lacks 'get' accessor and parameter type annotation on 'set' accessor, implicitly has an 'any' type.",
    Index_signature_of_object_type_implicitly_has_an_any_type:
      "Index signature of object type implicitly has an 'any' type.",
    Object_literal_s_property_0_implicitly_has_an_any_type_from_widening:
      "Object literal's property '{0}' implicitly has an 'any' type from widening.",
  };
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {}
    return (
      (t.isArray = function (e) {
        return "[object Array]" === Object.prototype.toString.apply(e, []);
      }),
      (t.sequenceEquals = function (e, t, n) {
        if (e === t) return !0;
        if (null === e || null === t) return !1;
        if (e.length !== t.length) return !1;
        for (var r = 0, i = e.length; i > r; r++) if (!n(e[r], t[r])) return !1;
        return !0;
      }),
      (t.contains = function (e, t) {
        for (var n = 0; n < e.length; n++) if (e[n] === t) return !0;
        return !1;
      }),
      (t.groupBy = function (e, t) {
        for (var n = {}, r = 0, i = e.length; i > r; r++) {
          var o = e[r],
            s = t(o),
            a = n[s] || [];
          a.push(o), (n[s] = a);
        }
        return n;
      }),
      (t.distinct = function (e, t) {
        for (var n = [], r = 0, i = e.length; i > r; r++) {
          for (var o = e[r], s = 0; s < n.length && !t(n[s], o); s++);
          s === n.length && n.push(o);
        }
        return n;
      }),
      (t.min = function (e, t) {
        for (var n = t(e[0]), r = 1; r < e.length; r++) {
          var i = t(e[r]);
          n > i && (n = i);
        }
        return n;
      }),
      (t.max = function (e, t) {
        for (var n = t(e[0]), r = 1; r < e.length; r++) {
          var i = t(e[r]);
          i > n && (n = i);
        }
        return n;
      }),
      (t.last = function (t) {
        if (0 === t.length) throw e.Errors.argumentOutOfRange("array");
        return t[t.length - 1];
      }),
      (t.lastOrDefault = function (e, t) {
        for (var n = e.length - 1; n >= 0; n--) {
          var r = e[n];
          if (t(r, n)) return r;
        }
        return null;
      }),
      (t.firstOrDefault = function (e, t) {
        for (var n = 0, r = e.length; r > n; n++) {
          var i = e[n];
          if (t(i, n)) return i;
        }
        return null;
      }),
      (t.first = function (t, n) {
        for (var r = 0, i = t.length; i > r; r++) {
          var o = t[r];
          if (!n || n(o, r)) return o;
        }
        throw e.Errors.invalidOperation();
      }),
      (t.sum = function (e, t) {
        for (var n = 0, r = 0, i = e.length; i > r; r++) n += t(e[r]);
        return n;
      }),
      (t.select = function (e, t) {
        for (var n = new Array(e.length), r = 0; r < e.length; r++)
          n[r] = t(e[r]);
        return n;
      }),
      (t.where = function (e, t) {
        for (var n = new Array(), r = 0; r < e.length; r++)
          t(e[r]) && n.push(e[r]);
        return n;
      }),
      (t.any = function (e, t) {
        for (var n = 0, r = e.length; r > n; n++) if (t(e[n])) return !0;
        return !1;
      }),
      (t.all = function (e, t) {
        for (var n = 0, r = e.length; r > n; n++) if (!t(e[n])) return !1;
        return !0;
      }),
      (t.binarySearch = function (e, t) {
        for (var n = 0, r = e.length - 1; r >= n; ) {
          var i = n + ((r - n) >> 1),
            o = e[i];
          if (o === t) return i;
          o > t ? (r = i - 1) : (n = i + 1);
        }
        return ~n;
      }),
      (t.createArray = function (e, t) {
        for (var n = new Array(e), r = 0; e > r; r++) n[r] = t;
        return n;
      }),
      (t.grow = function (e, t, n) {
        for (var r = t - e.length, i = 0; r > i; i++) e.push(n);
      }),
      (t.copy = function (e, t, n, r, i) {
        for (var o = 0; i > o; o++) n[r + o] = e[t + o];
      }),
      (t.indexOf = function (e, t) {
        for (var n = 0, r = e.length; r > n; n++) if (t(e[n])) return n;
        return -1;
      }),
      t
    );
  })();
  e.ArrayUtilities = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      if (0 === i.length) return new o(e);
      var t = i.pop();
      return (t.isReleased = !1), (t.allowUndefinedValues = e), t;
    }
    var r,
      i = [];
    !(function (e) {
      (e[(e.MaxBitsPerEncodedNumber = 30)] = "MaxBitsPerEncodedNumber"),
        (e[(e.BitsPerEncodedBiStateValue = 1)] = "BitsPerEncodedBiStateValue"),
        (e[(e.BitsPerEncodedTriStateValue = 2)] =
          "BitsPerEncodedTriStateValue"),
        (e[(e.BiStateEncodedTrue = 1)] = "BiStateEncodedTrue"),
        (e[(e.BiStateClearBitsMask = 1)] = "BiStateClearBitsMask"),
        (e[(e.TriStateEncodedFalse = 1)] = "TriStateEncodedFalse"),
        (e[(e.TriStateEncodedTrue = 2)] = "TriStateEncodedTrue"),
        (e[(e.TriStateClearBitsMask = 3)] = "TriStateClearBitsMask");
    })(r || (r = {}));
    var o = (function () {
      function t(e) {
        (this.allowUndefinedValues = e),
          (this.isReleased = !1),
          (this.bits = []);
      }
      return (
        (t.prototype.computeTriStateArrayIndex = function (e) {
          var t = 15;
          return (e / t) >>> 0;
        }),
        (t.prototype.computeBiStateArrayIndex = function (e) {
          var t = 30;
          return (e / t) >>> 0;
        }),
        (t.prototype.computeTriStateEncodedValueIndex = function (e) {
          var t = 15;
          return (e % t) * 2;
        }),
        (t.prototype.computeBiStateEncodedValueIndex = function (e) {
          var t = 30;
          return (e % t) * 1;
        }),
        (t.prototype.valueAt = function (t) {
          if (
            (e.Debug.assert(
              !this.isReleased,
              "Should not use a released bitvector"
            ),
            this.allowUndefinedValues)
          ) {
            var n = this.computeTriStateArrayIndex(t),
              r = this.bits[n];
            if (void 0 === r) return void 0;
            var i = this.computeTriStateEncodedValueIndex(t);
            return r & (2 << i) ? !0 : r & (1 << i) ? !1 : void 0;
          }
          var n = this.computeBiStateArrayIndex(t),
            r = this.bits[n];
          if (void 0 === r) return !1;
          var i = this.computeBiStateEncodedValueIndex(t);
          return r & (1 << i) ? !0 : !1;
        }),
        (t.prototype.setValueAt = function (t, n) {
          if (
            (e.Debug.assert(
              !this.isReleased,
              "Should not use a released bitvector"
            ),
            this.allowUndefinedValues)
          ) {
            e.Debug.assert(
              n === !0 || n === !1 || void 0 === n,
              "value must only be true, false or undefined."
            );
            var r = this.computeTriStateArrayIndex(t),
              i = this.bits[r];
            if (void 0 === i) {
              if (void 0 === n) return;
              i = 0;
            }
            var o = this.computeTriStateEncodedValueIndex(t),
              s = ~(3 << o);
            (i &= s),
              n === !0 ? (i |= 2 << o) : n === !1 && (i |= 1 << o),
              (this.bits[r] = i);
          } else {
            e.Debug.assert(
              n === !0 || n === !1,
              "value must only be true or false."
            );
            var r = this.computeBiStateArrayIndex(t),
              i = this.bits[r];
            if (void 0 === i) {
              if (n === !1) return;
              i = 0;
            }
            var o = this.computeBiStateEncodedValueIndex(t);
            (i &= ~(1 << o)), n && (i |= 1 << o), (this.bits[r] = i);
          }
        }),
        (t.prototype.release = function () {
          e.Debug.assert(
            !this.isReleased,
            "Should not use a released bitvector"
          ),
            (this.isReleased = !0),
            (this.bits.length = 0),
            i.push(this);
        }),
        t
      );
    })();
    t.getBitVector = n;
  })(e.BitVector || (e.BitVector = {}));
  e.BitVector;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      if (0 === r.length) return new i(e);
      var t = r.pop();
      return (t.isReleased = !1), (t.allowUndefinedValues = e), t;
    }
    var r = [],
      i = (function () {
        function t(e) {
          (this.allowUndefinedValues = e),
            (this.isReleased = !1),
            (this.vectors = []);
        }
        return (
          (t.prototype.valueAt = function (t, n) {
            e.Debug.assert(
              !this.isReleased,
              "Should not use a released bitvector"
            );
            var r = this.vectors[t];
            return r ? r.valueAt(n) : this.allowUndefinedValues ? void 0 : !1;
          }),
          (t.prototype.setValueAt = function (t, n, r) {
            e.Debug.assert(
              !this.isReleased,
              "Should not use a released bitvector"
            );
            var i = this.vectors[t];
            if (!i) {
              if (void 0 === r) return;
              (i = e.BitVector.getBitVector(this.allowUndefinedValues)),
                (this.vectors[t] = i);
            }
            i.setValueAt(n, r);
          }),
          (t.prototype.release = function () {
            e.Debug.assert(
              !this.isReleased,
              "Should not use a released bitvector"
            ),
              (this.isReleased = !0);
            for (var t in this.vectors)
              if (this.vectors.hasOwnProperty(t)) {
                var n = this.vectors[t];
                n.release();
              }
            (this.vectors.length = 0), r.push(this);
          }),
          t
        );
      })();
    t.getBitMatrix = n;
  })(e.BitMatrix || (e.BitMatrix = {}));
  e.BitMatrix;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.Max31BitInteger = 1073741823)] = "Max31BitInteger"),
      (e[(e.Min31BitInteger = -1073741824)] = "Min31BitInteger");
  })(e.Constants || (e.Constants = {}));
  e.Constants;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.None = 0)] = "None"),
      (e[(e.Normal = 1)] = "Normal"),
      (e[(e.Aggressive = 2)] = "Aggressive"),
      (e[(e.VeryAggressive = 3)] = "VeryAggressive");
  })(e.AssertionLevel || (e.AssertionLevel = {}));
  var t =
    (e.AssertionLevel,
    (function () {
      function e() {}
      return (
        (e.shouldAssert = function (e) {
          return this.currentAssertionLevel >= e;
        }),
        (e.assert = function (e, t, n) {
          if (
            ("undefined" == typeof t && (t = ""),
            "undefined" == typeof n && (n = null),
            !e)
          ) {
            var r = "";
            throw (
              (n && (r = "\r\nVerbose Debug Information:" + n()),
              new Error("Debug Failure. False expression: " + t + r))
            );
          }
        }),
        (e.fail = function (t) {
          e.assert(!1, t);
        }),
        (e.currentAssertionLevel = 0),
        e
      );
    })());
  e.Debug = t;
})(TypeScript || (TypeScript = {}));
var __extends =
    this.__extends ||
    function (e, t) {
      function n() {
        this.constructor = e;
      }
      for (var r in t) t.hasOwnProperty(r) && (e[r] = t[r]);
      (n.prototype = t.prototype), (e.prototype = new n());
    },
  TypeScript;
!(function (e) {
  function t() {
    return e.Environment ? e.Environment.newLine : "\r\n";
  }
  function n(e) {
    for (var t, n = -1, r = /\{(\d+)\}/g; (t = r.exec(e)); ) {
      var i = parseInt(t[1]);
      !isNaN(i) && i > n && (n = i);
    }
    return n;
  }
  function r(t) {
    var n = e.diagnosticInformationMap[t];
    return e.Debug.assert(n), n;
  }
  function i(t, r) {
    e.LocalizedDiagnosticMessages;
    var o = e.LocalizedDiagnosticMessages
      ? e.LocalizedDiagnosticMessages[t]
      : t;
    e.Debug.assert(void 0 !== o && null !== o);
    var s = r ? r.length : 0,
      a = 1 + n(t);
    if (a !== s)
      throw new Error(
        i(e.DiagnosticCode.Expected_0_arguments_to_message_got_1_instead, [
          a,
          s,
        ])
      );
    var l = 1 + n(o);
    if (l !== a)
      throw new Error(
        i(
          e.DiagnosticCode
            .Expected_the_message_0_to_have_1_arguments_but_it_had_2,
          [o, a, l]
        )
      );
    return (
      (o = o.replace(/{(\d+)}/g, function (e, t) {
        return "undefined" != typeof r[t] ? r[t] : e;
      })),
      (o = o.replace(/{(NL)}/g, function () {
        return e.newLine();
      }))
    );
  }
  function o(t, n) {
    var o,
      s = r(t),
      a = i(t, n);
    return (o =
      1 === s.category
        ? i(e.DiagnosticCode.error_TS_0_1, [s.code, a])
        : 0 === s.category
        ? i(e.DiagnosticCode.warning_TS_0_1, [s.code, a])
        : a);
  }
  e.LocalizedDiagnosticMessages = null;
  var s = (function () {
    function e(e, t, n, r) {
      (this._fileName = e),
        (this._lineMap = t),
        (this._start = n),
        (this._length = r);
    }
    return (
      (e.prototype.fileName = function () {
        return this._fileName;
      }),
      (e.prototype.lineMap = function () {
        return this._lineMap;
      }),
      (e.prototype.line = function () {
        return this._lineMap
          ? this._lineMap.getLineNumberFromPosition(this.start())
          : 0;
      }),
      (e.prototype.character = function () {
        return this._lineMap
          ? this._lineMap
              .getLineAndCharacterFromPosition(this.start())
              .character()
          : 0;
      }),
      (e.prototype.start = function () {
        return this._start;
      }),
      (e.prototype.length = function () {
        return this._length;
      }),
      (e.equals = function (e, t) {
        return (
          e._fileName === t._fileName &&
          e._start === t._start &&
          e._length === t._length
        );
      }),
      e
    );
  })();
  e.Location = s;
  var a = (function (t) {
    function n(e, n, r, i, o, s, a) {
      "undefined" == typeof s && (s = null),
        "undefined" == typeof a && (a = null),
        t.call(this, e, n, r, i),
        (this._diagnosticKey = o),
        (this._arguments = s && s.length > 0 ? s : null),
        (this._additionalLocations = a && a.length > 0 ? a : null);
    }
    return (
      __extends(n, t),
      (n.prototype.toJSON = function () {
        var e = {};
        (e.start = this.start()),
          (e.length = this.length()),
          (e.diagnosticCode = this._diagnosticKey);
        var t = this.arguments();
        return t && t.length > 0 && (e.arguments = t), e;
      }),
      (n.prototype.diagnosticKey = function () {
        return this._diagnosticKey;
      }),
      (n.prototype.arguments = function () {
        return this._arguments;
      }),
      (n.prototype.text = function () {
        return e.getLocalizedText(this._diagnosticKey, this._arguments);
      }),
      (n.prototype.message = function () {
        return e.getDiagnosticMessage(this._diagnosticKey, this._arguments);
      }),
      (n.prototype.additionalLocations = function () {
        return this._additionalLocations || [];
      }),
      (n.equals = function (t, n) {
        return (
          s.equals(t, n) &&
          t._diagnosticKey === n._diagnosticKey &&
          e.ArrayUtilities.sequenceEquals(t._arguments, n._arguments, function (
            e,
            t
          ) {
            return e === t;
          })
        );
      }),
      (n.prototype.info = function () {
        return r(this.diagnosticKey());
      }),
      n
    );
  })(s);
  (e.Diagnostic = a),
    (e.newLine = t),
    (e.getLocalizedText = i),
    (e.getDiagnosticMessage = o);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.argument = function (e, t) {
        return new Error("Invalid argument: " + e + ". " + t);
      }),
      (e.argumentOutOfRange = function (e) {
        return new Error("Argument out of range: " + e);
      }),
      (e.argumentNull = function (e) {
        return new Error("Argument null: " + e);
      }),
      (e.abstract = function () {
        return new Error("Operation not implemented properly by subclass.");
      }),
      (e.notYetImplemented = function () {
        return new Error("Not yet implemented.");
      }),
      (e.invalidOperation = function (e) {
        return new Error("Invalid operation: " + e);
      }),
      e
    );
  })();
  e.Errors = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {}
    return (
      (t.computeFnv1aCharArrayHashCode = function (n, r, i) {
        for (var o = t.FNV_BASE, s = r + i, a = r; s > a; a++)
          o = e.IntegerUtilities.integerMultiplyLow32Bits(
            o ^ n[a],
            t.FNV_PRIME
          );
        return o;
      }),
      (t.computeSimple31BitCharArrayHashCode = function (e, t, n) {
        for (var r = 0, i = 0; n > i; i++) {
          var o = e[t + i];
          r = ((((r << 5) - r) | 0) + o) | 0;
        }
        return 2147483647 & r;
      }),
      (t.computeSimple31BitStringHashCode = function (e) {
        for (var t = 0, n = 0, r = e.length, i = 0; r > i; i++) {
          var o = e.charCodeAt(n + i);
          t = ((((t << 5) - t) | 0) + o) | 0;
        }
        return 2147483647 & t;
      }),
      (t.computeMurmur2StringHashCode = function (t, n) {
        for (
          var r = 1540483477, i = 24, o = t.length, s = Math.abs(n ^ o), a = 0;
          o >= 2;

        ) {
          var l = t.charCodeAt(a),
            c = t.charCodeAt(a + 1),
            u = Math.abs(l | (c << 16));
          (u = e.IntegerUtilities.integerMultiplyLow32Bits(u, r)),
            (u ^= u >> i),
            (u = e.IntegerUtilities.integerMultiplyLow32Bits(u, r)),
            (s = e.IntegerUtilities.integerMultiplyLow32Bits(s, r)),
            (s ^= u),
            (a += 2),
            (o -= 2);
        }
        return (
          1 === o &&
            ((s ^= t.charCodeAt(a)),
            (s = e.IntegerUtilities.integerMultiplyLow32Bits(s, r))),
          (s ^= s >> 13),
          (s = e.IntegerUtilities.integerMultiplyLow32Bits(s, r)),
          (s ^= s >> 15)
        );
      }),
      (t.getPrime = function (n) {
        for (var r = 0; r < t.primes.length; r++) {
          var i = t.primes[r];
          if (i >= n) return i;
        }
        throw e.Errors.notYetImplemented();
      }),
      (t.expandPrime = function (e) {
        var n = e << 1;
        return n > 2146435069 && 2146435069 > e ? 2146435069 : t.getPrime(n);
      }),
      (t.combine = function (e, t) {
        return ((t << 5) + t + e) & 2147483647;
      }),
      (t.FNV_BASE = 2166136261),
      (t.FNV_PRIME = 16777619),
      (t.primes = [
        3,
        7,
        11,
        17,
        23,
        29,
        37,
        47,
        59,
        71,
        89,
        107,
        131,
        163,
        197,
        239,
        293,
        353,
        431,
        521,
        631,
        761,
        919,
        1103,
        1327,
        1597,
        1931,
        2333,
        2801,
        3371,
        4049,
        4861,
        5839,
        7013,
        8419,
        10103,
        12143,
        14591,
        17519,
        21023,
        25229,
        30293,
        36353,
        43627,
        52361,
        62851,
        75431,
        90523,
        108631,
        130363,
        156437,
        187751,
        225307,
        270371,
        324449,
        389357,
        467237,
        560689,
        672827,
        807403,
        968897,
        1162687,
        1395263,
        1674319,
        2009191,
        2411033,
        2893249,
        3471899,
        4166287,
        4999559,
        5999471,
        7199369,
      ]),
      t
    );
  })();
  e.Hash = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, n) {
      return (
        "undefined" == typeof e && (e = t.DefaultHashTableCapacity),
        "undefined" == typeof n && (n = null),
        new o(e, n)
      );
    }
    function r(e) {
      return void 0 === e.__hash && ((e.__hash = s), s++), e.__hash;
    }
    t.DefaultHashTableCapacity = 1024;
    var i = (function () {
        function e(e, t, n, r) {
          (this.Key = e),
            (this.Value = t),
            (this.HashCode = n),
            (this.Next = r);
        }
        return e;
      })(),
      o = (function () {
        function t(t, n) {
          (this.hash = n), (this.count = 0);
          var r = e.Hash.getPrime(t);
          this.entries = e.ArrayUtilities.createArray(r, null);
        }
        return (
          (t.prototype.set = function (e, t) {
            this.addOrSet(e, t, !1);
          }),
          (t.prototype.add = function (e, t) {
            this.addOrSet(e, t, !0);
          }),
          (t.prototype.containsKey = function (e) {
            var t = this.computeHashCode(e),
              n = this.findEntry(e, t);
            return null !== n;
          }),
          (t.prototype.get = function (e) {
            var t = this.computeHashCode(e),
              n = this.findEntry(e, t);
            return null === n ? null : n.Value;
          }),
          (t.prototype.computeHashCode = function (t) {
            var n = null === this.hash ? t.hashCode : this.hash(t);
            return (n = 2147483647 & n), e.Debug.assert(n >= 0), n;
          }),
          (t.prototype.addOrSet = function (t, n, r) {
            var i = this.computeHashCode(t),
              o = this.findEntry(t, i);
            if (null !== o) {
              if (r)
                throw e.Errors.argument("key", "Key was already in table.");
              return (o.Key = t), (o.Value = n), void 0;
            }
            return this.addEntry(t, n, i);
          }),
          (t.prototype.findEntry = function (e, t) {
            for (
              var n = this.entries[t % this.entries.length];
              null !== n;
              n = n.Next
            )
              if (n.HashCode === t && e === n.Key) return n;
            return null;
          }),
          (t.prototype.addEntry = function (e, t, n) {
            var r = n % this.entries.length,
              o = new i(e, t, n, this.entries[r]);
            return (
              (this.entries[r] = o),
              this.count >= this.entries.length / 2 && this.grow(),
              this.count++,
              o.Key
            );
          }),
          (t.prototype.grow = function () {
            var t = e.Hash.expandPrime(this.entries.length),
              n = this.entries,
              r = e.ArrayUtilities.createArray(t, null);
            this.entries = r;
            for (var i = 0; i < n.length; i++)
              for (var o = n[i]; null !== o; ) {
                var s = o.HashCode % t,
                  a = o.Next;
                (o.Next = r[s]), (r[s] = o), (o = a);
              }
          }),
          t
        );
      })();
    (t.HashTable = o), (t.createHashTable = n);
    var s = 1;
    t.identityHashCode = r;
  })(e.Collections || (e.Collections = {}));
  e.Collections;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  (e.nodeMakeDirectoryTime = 0),
    (e.nodeCreateBufferTime = 0),
    (e.nodeWriteFileSyncTime = 0),
    (function (e) {
      (e[(e.None = 0)] = "None"),
        (e[(e.Utf8 = 1)] = "Utf8"),
        (e[(e.Utf16BigEndian = 2)] = "Utf16BigEndian"),
        (e[(e.Utf16LittleEndian = 3)] = "Utf16LittleEndian");
    })(e.ByteOrderMark || (e.ByteOrderMark = {}));
  var t =
    (e.ByteOrderMark,
    (function () {
      function e(e, t) {
        (this.contents = e), (this.byteOrderMark = t);
      }
      return e;
    })());
  (e.FileInformation = t),
    (e.Environment = (function () {
      function n() {
        function n() {
          return s.length > 0 ? s.pop() : new ActiveXObject("ADODB.Stream");
        }
        function r(e) {
          s.push(e);
        }
        try {
          var i = new ActiveXObject("Scripting.FileSystemObject");
        } catch (o) {
          return null;
        }
        for (var s = [], a = [], l = 0; l < WScript.Arguments.length; l++)
          a[l] = WScript.Arguments.Item(l);
        return {
          newLine: "\r\n",
          currentDirectory: function () {
            return WScript.CreateObject("WScript.Shell").CurrentDirectory;
          },
          supportsCodePage: function () {
            return WScript.ReadFile;
          },
          readFile: function (i, o) {
            try {
              if (null !== o && this.supportsCodePage())
                try {
                  var s = WScript.ReadFile(i, o);
                  return new t(s, 0);
                } catch (a) {}
              var l = n();
              l.Open(), (l.Type = 2), (l.Charset = "x-ansi"), l.LoadFromFile(i);
              var c = l.ReadText(2);
              l.Position = 0;
              var u = 0;
              254 === c.charCodeAt(0) && 255 === c.charCodeAt(1)
                ? ((l.Charset = "unicode"), (u = 2))
                : 255 === c.charCodeAt(0) && 254 === c.charCodeAt(1)
                ? ((l.Charset = "unicode"), (u = 3))
                : 239 === c.charCodeAt(0) && 187 === c.charCodeAt(1)
                ? ((l.Charset = "utf-8"), (u = 1))
                : (l.Charset = "utf-8");
              var s = l.ReadText(-1);
              return l.Close(), r(l), new t(s, u);
            } catch (p) {
              var h;
              throw (
                ((h =
                  -2147024809 === p.number
                    ? e.getDiagnosticMessage(
                        e.DiagnosticCode.Unsupported_file_encoding,
                        null
                      )
                    : e.getDiagnosticMessage(
                        e.DiagnosticCode.Cannot_read_file_0_1,
                        [i, p.message]
                      )),
                new Error(h))
              );
            }
          },
          writeFile: function (e, t, r) {
            var i = n();
            (i.Charset = "utf-8"),
              i.Open(),
              i.WriteText(t, 0),
              (i.Position = r ? 0 : 3);
            var o = n();
            (o.Type = 1),
              o.Open(),
              i.CopyTo(o),
              o.Flush(),
              o.SaveToFile(e, 2),
              o.Close(),
              i.Flush(),
              i.Close();
          },
          fileExists: function (e) {
            return i.FileExists(e);
          },
          deleteFile: function (e) {
            i.FileExists(e) && i.DeleteFile(e, !0);
          },
          directoryExists: function (e) {
            return i.FolderExists(e);
          },
          listFiles: function (e, t, n) {
            function r(e, i) {
              var o,
                s = [];
              if (n.recursive)
                for (o = new Enumerator(e.subfolders); !o.atEnd(); o.moveNext())
                  s = s.concat(r(o.item(), i + "\\" + o.item().Name));
              for (o = new Enumerator(e.files); !o.atEnd(); o.moveNext())
                (!t || o.item().Name.match(t)) &&
                  s.push(i + "\\" + o.item().Name);
              return s;
            }
            n = n || {};
            var o = i.GetFolder(e);
            return r(o, e);
          },
          arguments: a,
          standardOut: WScript.StdOut,
        };
      }
      return "undefined" != typeof WScript && "function" == typeof ActiveXObject
        ? n()
        : null;
    })());
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    function t(e, t) {
      return (e / t) >> 0;
    }
    function n(e, t) {
      var n =
        ((((4294901760 & e) * t) >>> 0) + (((65535 & e) * t) >>> 0)) >>> 0;
      return n;
    }
    function r(e, t) {
      var n = 65535 & e,
        r = e >>> 16,
        i = 65535 & t,
        o = t >>> 16,
        s = r * o + ((((n * i) >>> 17) + n * o) >>> 15);
      return s;
    }
    function i(e) {
      return /^[0-9]+$/.test(e);
    }
    function o(e) {
      return /^0(x|X)[0-9a-fA-F]+$/.test(e);
    }
    (e.integerDivide = t),
      (e.integerMultiplyLow32Bits = n),
      (e.integerMultiplyHigh32Bits = r),
      (e.isInteger = i),
      (e.isHexInteger = o);
  })(e.IntegerUtilities || (e.IntegerUtilities = {}));
  e.IntegerUtilities;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e, t) {
      (this._computeLineStarts = e),
        (this.length = t),
        (this._lineStarts = null);
    }
    return (
      (t.prototype.toJSON = function () {
        return { lineStarts: this.lineStarts(), length: this.length };
      }),
      (t.prototype.equals = function (t) {
        return (
          this.length === t.length &&
          e.ArrayUtilities.sequenceEquals(
            this.lineStarts(),
            t.lineStarts(),
            function (e, t) {
              return e === t;
            }
          )
        );
      }),
      (t.prototype.lineStarts = function () {
        return (
          null === this._lineStarts &&
            (this._lineStarts = this._computeLineStarts()),
          this._lineStarts
        );
      }),
      (t.prototype.lineCount = function () {
        return this.lineStarts().length;
      }),
      (t.prototype.getPosition = function (e, t) {
        return this.lineStarts()[e] + t;
      }),
      (t.prototype.getLineNumberFromPosition = function (t) {
        if (0 > t || t > this.length)
          throw e.Errors.argumentOutOfRange("position");
        if (t === this.length) return this.lineCount() - 1;
        var n = e.ArrayUtilities.binarySearch(this.lineStarts(), t);
        return 0 > n && (n = ~n - 1), n;
      }),
      (t.prototype.getLineStartPosition = function (e) {
        return this.lineStarts()[e];
      }),
      (t.prototype.fillLineAndCharacterFromPosition = function (t, n) {
        if (0 > t || t > this.length)
          throw e.Errors.argumentOutOfRange("position");
        var r = this.getLineNumberFromPosition(t);
        (n.line = r), (n.character = t - this.lineStarts()[r]);
      }),
      (t.prototype.getLineAndCharacterFromPosition = function (t) {
        if (0 > t || t > this.length)
          throw e.Errors.argumentOutOfRange("position");
        var n = this.getLineNumberFromPosition(t);
        return new e.LineAndCharacter(n, t - this.lineStarts()[n]);
      }),
      (t.empty = new t(function () {
        return [0];
      }, 0)),
      t
    );
  })();
  e.LineMap = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(t, n) {
      if (((this._line = 0), (this._character = 0), 0 > t))
        throw e.Errors.argumentOutOfRange("line");
      if (0 > n) throw e.Errors.argumentOutOfRange("character");
      (this._line = t), (this._character = n);
    }
    return (
      (t.prototype.line = function () {
        return this._line;
      }),
      (t.prototype.character = function () {
        return this._character;
      }),
      t
    );
  })();
  e.LineAndCharacter = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.max = function (e, t) {
        return e >= t ? e : t;
      }),
      (e.min = function (e, t) {
        return t >= e ? e : t;
      }),
      e
    );
  })();
  e.MathPrototype = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    t.DefaultStringTableCapacity = 256;
    var n = (function () {
        function e(e, t, n) {
          (this.Text = e), (this.HashCode = t), (this.Next = n);
        }
        return e;
      })(),
      r = (function () {
        function t(t) {
          this.count = 0;
          var n = e.Hash.getPrime(t);
          this.entries = e.ArrayUtilities.createArray(n, null);
        }
        return (
          (t.prototype.addCharArray = function (t, n, r) {
            var i =
                2147483647 &
                e.Hash.computeSimple31BitCharArrayHashCode(t, n, r),
              o = this.findCharArrayEntry(t, n, r, i);
            if (null !== o) return o.Text;
            var s = t.slice(n, n + r);
            return this.addEntry(e.StringUtilities.fromCharCodeArray(s), i);
          }),
          (t.prototype.findCharArrayEntry = function (e, n, r, i) {
            for (
              var o = this.entries[i % this.entries.length];
              null !== o;
              o = o.Next
            )
              if (o.HashCode === i && t.textCharArrayEquals(o.Text, e, n, r))
                return o;
            return null;
          }),
          (t.prototype.addEntry = function (e, t) {
            var r = t % this.entries.length,
              i = new n(e, t, this.entries[r]);
            return (
              (this.entries[r] = i),
              this.count === this.entries.length && this.grow(),
              this.count++,
              i.Text
            );
          }),
          (t.prototype.grow = function () {
            var t = e.Hash.expandPrime(this.entries.length),
              n = this.entries,
              r = e.ArrayUtilities.createArray(t, null);
            this.entries = r;
            for (var i = 0; i < n.length; i++)
              for (var o = n[i]; null !== o; ) {
                var s = o.HashCode % t,
                  a = o.Next;
                (o.Next = r[s]), (r[s] = o), (o = a);
              }
          }),
          (t.textCharArrayEquals = function (e, t, n, r) {
            if (e.length !== r) return !1;
            for (var i = n, o = 0; r > o; o++) {
              if (e.charCodeAt(o) !== t[i]) return !1;
              i++;
            }
            return !0;
          }),
          t
        );
      })();
    (t.StringTable = r),
      (t.DefaultStringTable = new r(t.DefaultStringTableCapacity));
  })(e.Collections || (e.Collections = {}));
  e.Collections;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.isString = function (e) {
        return "[object String]" === Object.prototype.toString.apply(e, []);
      }),
      (e.fromCharCodeArray = function (e) {
        return String.fromCharCode.apply(null, e);
      }),
      (e.endsWith = function (e, t) {
        return e.substring(e.length - t.length, e.length) === t;
      }),
      (e.startsWith = function (e, t) {
        return e.substr(0, t.length) === t;
      }),
      (e.copyTo = function (e, t, n, r, i) {
        for (var o = 0; i > o; o++) n[r + o] = e.charCodeAt(t + o);
      }),
      (e.repeat = function (e, t) {
        return Array(t + 1).join(e);
      }),
      (e.stringEquals = function (e, t) {
        return e === t;
      }),
      e
    );
  })();
  e.StringUtilities = t;
})(TypeScript || (TypeScript = {}));
var global = Function("return this").call(null),
  TypeScript;
!(function (e) {
  var t;
  !(function (e) {
    e.now,
      e.resolution,
      "undefined" != typeof WScript &&
      "undefined" != typeof global.WScript.InitializeProjection
        ? (global.WScript.InitializeProjection(),
          (e.now = function () {
            return TestUtilities.QueryPerformanceCounter();
          }),
          (e.resolution = TestUtilities.QueryPerformanceFrequency()))
        : ((e.now = function () {
            return Date.now();
          }),
          (e.resolution = 1e3));
  })(t || (t = {}));
  var n = (function () {
    function e() {
      this.time = 0;
    }
    return (
      (e.prototype.start = function () {
        (this.time = 0), (this.startTime = t.now());
      }),
      (e.prototype.end = function () {
        this.time = t.now() - this.startTime;
      }),
      e
    );
  })();
  e.Timer = n;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.Warning = 0)] = "Warning"),
      (e[(e.Error = 1)] = "Error"),
      (e[(e.Message = 2)] = "Message"),
      (e[(e.NoPrefix = 3)] = "NoPrefix");
  })(e.DiagnosticCategory || (e.DiagnosticCategory = {}));
  e.DiagnosticCategory;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  e.diagnosticInformationMap = {
    "error TS{0}: {1}": { code: 0, category: 3 },
    "warning TS{0}: {1}": { code: 1, category: 3 },
    "Unrecognized escape sequence.": { code: 1e3, category: 1 },
    "Unexpected character {0}.": { code: 1001, category: 1 },
    "Missing close quote character.": { code: 1002, category: 1 },
    "Identifier expected.": { code: 1003, category: 1 },
    "'{0}' keyword expected.": { code: 1004, category: 1 },
    "'{0}' expected.": { code: 1005, category: 1 },
    "Identifier expected; '{0}' is a keyword.": { code: 1006, category: 1 },
    "Automatic semicolon insertion not allowed.": { code: 1007, category: 1 },
    "Unexpected token; '{0}' expected.": { code: 1008, category: 1 },
    "Trailing separator not allowed.": { code: 1009, category: 1 },
    "'*/' expected.": { code: 1010, category: 1 },
    "'public' or 'private' modifier must precede 'static'.": {
      code: 1011,
      category: 1,
    },
    "Unexpected token.": { code: 1012, category: 1 },
    "Catch clause parameter cannot have a type annotation.": {
      code: 1013,
      category: 1,
    },
    "Rest parameter must be last in list.": { code: 1014, category: 1 },
    "Parameter cannot have question mark and initializer.": {
      code: 1015,
      category: 1,
    },
    "Required parameter cannot follow optional parameter.": {
      code: 1016,
      category: 1,
    },
    "Index signatures cannot have rest parameters.": {
      code: 1017,
      category: 1,
    },
    "Index signature parameter cannot have accessibility modifiers.": {
      code: 1018,
      category: 1,
    },
    "Index signature parameter cannot have a question mark.": {
      code: 1019,
      category: 1,
    },
    "Index signature parameter cannot have an initializer.": {
      code: 1020,
      category: 1,
    },
    "Index signature must have a type annotation.": { code: 1021, category: 1 },
    "Index signature parameter must have a type annotation.": {
      code: 1022,
      category: 1,
    },
    "Index signature parameter type must be 'string' or 'number'.": {
      code: 1023,
      category: 1,
    },
    "'extends' clause already seen.": { code: 1024, category: 1 },
    "'extends' clause must precede 'implements' clause.": {
      code: 1025,
      category: 1,
    },
    "Classes can only extend a single class.": { code: 1026, category: 1 },
    "'implements' clause already seen.": { code: 1027, category: 1 },
    "Accessibility modifier already seen.": { code: 1028, category: 1 },
    "'{0}' modifier must precede '{1}' modifier.": { code: 1029, category: 1 },
    "'{0}' modifier already seen.": { code: 1030, category: 1 },
    "'{0}' modifier cannot appear on a class element.": {
      code: 1031,
      category: 1,
    },
    "Interface declaration cannot have 'implements' clause.": {
      code: 1032,
      category: 1,
    },
    "'super' invocation cannot have type arguments.": {
      code: 1034,
      category: 1,
    },
    "Only ambient modules can use quoted names.": { code: 1035, category: 1 },
    "Statements are not allowed in ambient contexts.": {
      code: 1036,
      category: 1,
    },
    "Implementations are not allowed in ambient contexts.": {
      code: 1037,
      category: 1,
    },
    "'declare' modifier not allowed for code already in an ambient context.": {
      code: 1038,
      category: 1,
    },
    "Initializers are not allowed in ambient contexts.": {
      code: 1039,
      category: 1,
    },
    "Parameter property declarations can only be used in a non-ambient constructor declaration.": {
      code: 1040,
      category: 1,
    },
    "Function implementation expected.": { code: 1041, category: 1 },
    "Constructor implementation expected.": { code: 1042, category: 1 },
    "Function overload name must be '{0}'.": { code: 1043, category: 1 },
    "'{0}' modifier cannot appear on a module element.": {
      code: 1044,
      category: 1,
    },
    "'declare' modifier cannot appear on an interface declaration.": {
      code: 1045,
      category: 1,
    },
    "'declare' modifier required for top level element.": {
      code: 1046,
      category: 1,
    },
    "Rest parameter cannot be optional.": { code: 1047, category: 1 },
    "Rest parameter cannot have an initializer.": { code: 1048, category: 1 },
    "'set' accessor must have one and only one parameter.": {
      code: 1049,
      category: 1,
    },
    "'set' accessor parameter cannot be optional.": { code: 1051, category: 1 },
    "'set' accessor parameter cannot have an initializer.": {
      code: 1052,
      category: 1,
    },
    "'set' accessor cannot have rest parameter.": { code: 1053, category: 1 },
    "'get' accessor cannot have parameters.": { code: 1054, category: 1 },
    "Modifiers cannot appear here.": { code: 1055, category: 1 },
    "Accessors are only available when targeting ECMAScript 5 and higher.": {
      code: 1056,
      category: 1,
    },
    "Class name cannot be '{0}'.": { code: 1057, category: 1 },
    "Interface name cannot be '{0}'.": { code: 1058, category: 1 },
    "Enum name cannot be '{0}'.": { code: 1059, category: 1 },
    "Module name cannot be '{0}'.": { code: 1060, category: 1 },
    "Enum member must have initializer.": { code: 1061, category: 1 },
    "Export assignment cannot be used in internal modules.": {
      code: 1063,
      category: 1,
    },
    "Export assignment not allowed in module with exported element.": {
      code: 1064,
      category: 1,
    },
    "Module cannot have multiple export assignments.": {
      code: 1065,
      category: 1,
    },
    "Ambient enum elements can only have integer literal initializers.": {
      code: 1066,
      category: 1,
    },
    "module, class, interface, enum, import or statement": {
      code: 1067,
      category: 3,
    },
    "constructor, function, accessor or variable": { code: 1068, category: 3 },
    statement: { code: 1069, category: 3 },
    "case or default clause": { code: 1070, category: 3 },
    identifier: { code: 1071, category: 3 },
    "call, construct, index, property or function signature": {
      code: 1072,
      category: 3,
    },
    expression: { code: 1073, category: 3 },
    "type name": { code: 1074, category: 3 },
    "property or accessor": { code: 1075, category: 3 },
    parameter: { code: 1076, category: 3 },
    type: { code: 1077, category: 3 },
    "type parameter": { code: 1078, category: 3 },
    "'declare' modifier not allowed on import declaration.": {
      code: 1079,
      category: 1,
    },
    "Function overload must be static.": { code: 1080, category: 1 },
    "Function overload must not be static.": { code: 1081, category: 1 },
    "Parameter property declarations cannot be used in a constructor overload.": {
      code: 1083,
      category: 1,
    },
    "Invalid 'reference' directive syntax.": { code: 1084, category: 1 },
    "Octal literals are not available when targeting ECMAScript 5 and higher.": {
      code: 1085,
      category: 1,
    },
    "Accessors are not allowed in ambient contexts.": {
      code: 1086,
      category: 1,
    },
    "'{0}' modifier cannot appear on a constructor declaration.": {
      code: 1089,
      category: 1,
    },
    "'{0}' modifier cannot appear on a parameter.": { code: 1090, category: 1 },
    "Only a single variable declaration is allowed in a 'for...in' statement.": {
      code: 1091,
      category: 1,
    },
    "Type parameters cannot appear on a constructor declaration.": {
      code: 1091,
      category: 1,
    },
    "Type annotation cannot appear on a constructor declaration.": {
      code: 1092,
      category: 1,
    },
    "Duplicate identifier '{0}'.": { code: 2e3, category: 1 },
    "The name '{0}' does not exist in the current scope.": {
      code: 2001,
      category: 1,
    },
    "The name '{0}' does not refer to a value.": { code: 2002, category: 1 },
    "'super' can only be used inside a class instance method.": {
      code: 2003,
      category: 1,
    },
    "The left-hand side of an assignment expression must be a variable, property or indexer.": {
      code: 2004,
      category: 1,
    },
    "Value of type '{0}' is not callable. Did you mean to include 'new'?": {
      code: 2161,
      category: 1,
    },
    "Value of type '{0}' is not callable.": { code: 2006, category: 1 },
    "Value of type '{0}' is not newable.": { code: 2007, category: 1 },
    "Value of type '{0}' is not indexable by type '{1}'.": {
      code: 2008,
      category: 1,
    },
    "Operator '{0}' cannot be applied to types '{1}' and '{2}'.": {
      code: 2009,
      category: 1,
    },
    "Operator '{0}' cannot be applied to types '{1}' and '{2}': {3}": {
      code: 2010,
      category: 1,
    },
    "Cannot convert '{0}' to '{1}'.": { code: 2011, category: 1 },
    "Cannot convert '{0}' to '{1}':{NL}{2}": { code: 2012, category: 1 },
    "Expected var, class, interface, or module.": { code: 2013, category: 1 },
    "Operator '{0}' cannot be applied to type '{1}'.": {
      code: 2014,
      category: 1,
    },
    "Getter '{0}' already declared.": { code: 2015, category: 1 },
    "Setter '{0}' already declared.": { code: 2016, category: 1 },
    "Exported class '{0}' extends private class '{1}'.": {
      code: 2018,
      category: 1,
    },
    "Exported class '{0}' implements private interface '{1}'.": {
      code: 2019,
      category: 1,
    },
    "Exported interface '{0}' extends private interface '{1}'.": {
      code: 2020,
      category: 1,
    },
    "Exported class '{0}' extends class from inaccessible module {1}.": {
      code: 2021,
      category: 1,
    },
    "Exported class '{0}' implements interface from inaccessible module {1}.": {
      code: 2022,
      category: 1,
    },
    "Exported interface '{0}' extends interface from inaccessible module {1}.": {
      code: 2023,
      category: 1,
    },
    "Public static property '{0}' of exported class has or is using private type '{1}'.": {
      code: 2024,
      category: 1,
    },
    "Public property '{0}' of exported class has or is using private type '{1}'.": {
      code: 2025,
      category: 1,
    },
    "Property '{0}' of exported interface has or is using private type '{1}'.": {
      code: 2026,
      category: 1,
    },
    "Exported variable '{0}' has or is using private type '{1}'.": {
      code: 2027,
      category: 1,
    },
    "Public static property '{0}' of exported class is using inaccessible module {1}.": {
      code: 2028,
      category: 1,
    },
    "Public property '{0}' of exported class is using inaccessible module {1}.": {
      code: 2029,
      category: 1,
    },
    "Property '{0}' of exported interface is using inaccessible module {1}.": {
      code: 2030,
      category: 1,
    },
    "Exported variable '{0}' is using inaccessible module {1}.": {
      code: 2031,
      category: 1,
    },
    "Parameter '{0}' of constructor from exported class has or is using private type '{1}'.": {
      code: 2032,
      category: 1,
    },
    "Parameter '{0}' of public static property setter from exported class has or is using private type '{1}'.": {
      code: 2033,
      category: 1,
    },
    "Parameter '{0}' of public property setter from exported class has or is using private type '{1}'.": {
      code: 2034,
      category: 1,
    },
    "Parameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.": {
      code: 2035,
      category: 1,
    },
    "Parameter '{0}' of call signature from exported interface has or is using private type '{1}'.": {
      code: 2036,
      category: 1,
    },
    "Parameter '{0}' of public static method from exported class has or is using private type '{1}'.": {
      code: 2037,
      category: 1,
    },
    "Parameter '{0}' of public method from exported class has or is using private type '{1}'.": {
      code: 2038,
      category: 1,
    },
    "Parameter '{0}' of method from exported interface has or is using private type '{1}'.": {
      code: 2039,
      category: 1,
    },
    "Parameter '{0}' of exported function has or is using private type '{1}'.": {
      code: 2040,
      category: 1,
    },
    "Parameter '{0}' of constructor from exported class is using inaccessible module {1}.": {
      code: 2041,
      category: 1,
    },
    "Parameter '{0}' of public static property setter from exported class is using inaccessible module {1}.": {
      code: 2042,
      category: 1,
    },
    "Parameter '{0}' of public property setter from exported class is using inaccessible module {1}.": {
      code: 2043,
      category: 1,
    },
    "Parameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.": {
      code: 2044,
      category: 1,
    },
    "Parameter '{0}' of call signature from exported interface is using inaccessible module {1}": {
      code: 2045,
      category: 1,
    },
    "Parameter '{0}' of public static method from exported class is using inaccessible module {1}.": {
      code: 2046,
      category: 1,
    },
    "Parameter '{0}' of public method from exported class is using inaccessible module {1}.": {
      code: 2047,
      category: 1,
    },
    "Parameter '{0}' of method from exported interface is using inaccessible module {1}.": {
      code: 2048,
      category: 1,
    },
    "Parameter '{0}' of exported function is using inaccessible module {1}.": {
      code: 2049,
      category: 1,
    },
    "Return type of public static property getter from exported class has or is using private type '{0}'.": {
      code: 2050,
      category: 1,
    },
    "Return type of public property getter from exported class has or is using private type '{0}'.": {
      code: 2051,
      category: 1,
    },
    "Return type of constructor signature from exported interface has or is using private type '{0}'.": {
      code: 2052,
      category: 1,
    },
    "Return type of call signature from exported interface has or is using private type '{0}'.": {
      code: 2053,
      category: 1,
    },
    "Return type of index signature from exported interface has or is using private type '{0}'.": {
      code: 2054,
      category: 1,
    },
    "Return type of public static method from exported class has or is using private type '{0}'.": {
      code: 2055,
      category: 1,
    },
    "Return type of public method from exported class has or is using private type '{0}'.": {
      code: 2056,
      category: 1,
    },
    "Return type of method from exported interface has or is using private type '{0}'.": {
      code: 2057,
      category: 1,
    },
    "Return type of exported function has or is using private type '{0}'.": {
      code: 2058,
      category: 1,
    },
    "Return type of public static property getter from exported class is using inaccessible module {0}.": {
      code: 2059,
      category: 1,
    },
    "Return type of public property getter from exported class is using inaccessible module {0}.": {
      code: 2060,
      category: 1,
    },
    "Return type of constructor signature from exported interface is using inaccessible module {0}.": {
      code: 2061,
      category: 1,
    },
    "Return type of call signature from exported interface is using inaccessible module {0}.": {
      code: 2062,
      category: 1,
    },
    "Return type of index signature from exported interface is using inaccessible module {0}.": {
      code: 2063,
      category: 1,
    },
    "Return type of public static method from exported class is using inaccessible module {0}.": {
      code: 2064,
      category: 1,
    },
    "Return type of public method from exported class is using inaccessible module {0}.": {
      code: 2065,
      category: 1,
    },
    "Return type of method from exported interface is using inaccessible module {0}.": {
      code: 2066,
      category: 1,
    },
    "Return type of exported function is using inaccessible module {0}.": {
      code: 2067,
      category: 1,
    },
    "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.": {
      code: 2068,
      category: 1,
    },
    "A parameter list must follow a generic type argument list. '(' expected.": {
      code: 2069,
      category: 1,
    },
    "Multiple constructor implementations are not allowed.": {
      code: 2070,
      category: 1,
    },
    "Unable to resolve external module '{0}'.": { code: 2071, category: 1 },
    "Module cannot be aliased to a non-module type.": {
      code: 2072,
      category: 1,
    },
    "A class may only extend another class.": { code: 2073, category: 1 },
    "A class may only implement another class or interface.": {
      code: 2074,
      category: 1,
    },
    "An interface may only extend another class or interface.": {
      code: 2075,
      category: 1,
    },
    "Unable to resolve type.": { code: 2077, category: 1 },
    "Unable to resolve type of '{0}'.": { code: 2078, category: 1 },
    "Unable to resolve type parameter constraint.": { code: 2079, category: 1 },
    "Type parameter constraint cannot be a primitive type.": {
      code: 2080,
      category: 1,
    },
    "Supplied parameters do not match any signature of call target.": {
      code: 2081,
      category: 1,
    },
    "Supplied parameters do not match any signature of call target:{NL}{0}": {
      code: 2082,
      category: 1,
    },
    "Invalid 'new' expression.": { code: 2083, category: 1 },
    "Call signatures used in a 'new' expression must have a 'void' return type.": {
      code: 2084,
      category: 1,
    },
    "Could not select overload for 'new' expression.": {
      code: 2085,
      category: 1,
    },
    "Type '{0}' does not satisfy the constraint '{1}' for type parameter '{2}'.": {
      code: 2086,
      category: 1,
    },
    "Could not select overload for 'call' expression.": {
      code: 2087,
      category: 1,
    },
    "Cannot invoke an expression whose type lacks a call signature.": {
      code: 2088,
      category: 1,
    },
    "Calls to 'super' are only valid inside a class.": {
      code: 2089,
      category: 1,
    },
    "Generic type '{0}' requires {1} type argument(s).": {
      code: 2090,
      category: 1,
    },
    "Type of array literal cannot be determined. Best common type could not be found for array elements.": {
      code: 2092,
      category: 1,
    },
    "Could not find enclosing symbol for dotted name '{0}'.": {
      code: 2093,
      category: 1,
    },
    "The property '{0}' does not exist on value of type '{1}'.": {
      code: 2094,
      category: 1,
    },
    "Could not find symbol '{0}'.": { code: 2095, category: 1 },
    "'get' and 'set' accessor must have the same type.": {
      code: 2096,
      category: 1,
    },
    "'this' cannot be referenced in current location.": {
      code: 2097,
      category: 1,
    },
    "Static members cannot reference class type parameters.": {
      code: 2099,
      category: 1,
    },
    "Class '{0}' is recursively referenced as a base type of itself.": {
      code: 2100,
      category: 1,
    },
    "Interface '{0}' is recursively referenced as a base type of itself.": {
      code: 2101,
      category: 1,
    },
    "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.": {
      code: 2102,
      category: 1,
    },
    "'super' cannot be referenced in non-derived classes.": {
      code: 2103,
      category: 1,
    },
    "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.": {
      code: 2104,
      category: 1,
    },
    "Constructors for derived classes must contain a 'super' call.": {
      code: 2105,
      category: 1,
    },
    "Super calls are not permitted outside constructors or in local functions inside constructors.": {
      code: 2106,
      category: 1,
    },
    "'{0}.{1}' is inaccessible.": { code: 2107, category: 1 },
    "'this' cannot be referenced within module bodies.": {
      code: 2108,
      category: 1,
    },
    "Invalid '+' expression - types not known to support the addition operator.": {
      code: 2111,
      category: 1,
    },
    "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.": {
      code: 2112,
      category: 1,
    },
    "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.": {
      code: 2113,
      category: 1,
    },
    "The type of a unary arithmetic operation operand must be of type 'any', 'number' or an enum type.": {
      code: 2114,
      category: 1,
    },
    "Variable declarations of a 'for' statement cannot use a type annotation.": {
      code: 2115,
      category: 1,
    },
    "Variable declarations of a 'for' statement must be of types 'string' or 'any'.": {
      code: 2116,
      category: 1,
    },
    "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.": {
      code: 2117,
      category: 1,
    },
    "The left-hand side of an 'in' expression must be of types 'any', 'string' or 'number'.": {
      code: 2118,
      category: 1,
    },
    "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter.": {
      code: 2119,
      category: 1,
    },
    "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.": {
      code: 2120,
      category: 1,
    },
    "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.": {
      code: 2121,
      category: 1,
    },
    "Setters cannot return a value.": { code: 2122, category: 1 },
    "Tried to query type of uninitialized module '{0}'.": {
      code: 2123,
      category: 1,
    },
    "Tried to set variable type to uninitialized module type '{0}'.": {
      code: 2124,
      category: 1,
    },
    "Type '{0}' does not have type parameters.": { code: 2125, category: 1 },
    "Getters must return a value.": { code: 2126, category: 1 },
    "Getter and setter accessors do not agree in visibility.": {
      code: 2127,
      category: 1,
    },
    "Invalid left-hand side of assignment expression.": {
      code: 2130,
      category: 1,
    },
    "Function declared a non-void return type, but has no return expression.": {
      code: 2131,
      category: 1,
    },
    "Cannot resolve return type reference.": { code: 2132, category: 1 },
    "Constructors cannot have a return type of 'void'.": {
      code: 2133,
      category: 1,
    },
    "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.": {
      code: 2134,
      category: 1,
    },
    "All symbols within a with block will be resolved to 'any'.": {
      code: 2135,
      category: 1,
    },
    "Import declarations in an internal module cannot reference an external module.": {
      code: 2136,
      category: 1,
    },
    "Class {0} declares interface {1} but does not implement it:{NL}{2}": {
      code: 2137,
      category: 1,
    },
    "Class {0} declares class {1} as an interface but does not implement it:{NL}{2}": {
      code: 2138,
      category: 1,
    },
    "The operand of an increment or decrement operator must be a variable, property or indexer.": {
      code: 2139,
      category: 1,
    },
    "'this' cannot be referenced in static initializers in a class body.": {
      code: 2140,
      category: 1,
    },
    "Class '{0}' cannot extend class '{1}':{NL}{2}": {
      code: 2141,
      category: 1,
    },
    "Interface '{0}' cannot extend class '{1}':{NL}{2}": {
      code: 2142,
      category: 1,
    },
    "Interface '{0}' cannot extend interface '{1}':{NL}{2}": {
      code: 2143,
      category: 1,
    },
    "Duplicate overload signature for '{0}'.": { code: 2144, category: 1 },
    "Duplicate constructor overload signature.": { code: 2145, category: 1 },
    "Duplicate overload call signature.": { code: 2146, category: 1 },
    "Duplicate overload construct signature.": { code: 2147, category: 1 },
    "Overload signature is not compatible with function definition.": {
      code: 2148,
      category: 1,
    },
    "Overload signature is not compatible with function definition:{NL}{0}": {
      code: 2149,
      category: 1,
    },
    "Overload signatures must all be public or private.": {
      code: 2150,
      category: 1,
    },
    "Overload signatures must all be exported or not exported.": {
      code: 2151,
      category: 1,
    },
    "Overload signatures must all be ambient or non-ambient.": {
      code: 2152,
      category: 1,
    },
    "Overload signatures must all be optional or required.": {
      code: 2153,
      category: 1,
    },
    "Specialized overload signature is not assignable to any non-specialized signature.": {
      code: 2154,
      category: 1,
    },
    "'this' cannot be referenced in constructor arguments.": {
      code: 2155,
      category: 1,
    },
    "Instance member cannot be accessed off a class.": {
      code: 2157,
      category: 1,
    },
    "Untyped function calls may not accept type arguments.": {
      code: 2158,
      category: 1,
    },
    "Non-generic functions may not accept type arguments.": {
      code: 2159,
      category: 1,
    },
    "A generic type may not reference itself with a wrapped form of its own type parameters.": {
      code: 2160,
      category: 1,
    },
    "Rest parameters must be array types.": { code: 2162, category: 1 },
    "Overload signature implementation cannot use specialized type.": {
      code: 2163,
      category: 1,
    },
    "Export assignments may only be used at the top-level of external modules.": {
      code: 2164,
      category: 1,
    },
    "Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.": {
      code: 2165,
      category: 1,
    },
    "Only public methods of the base class are accessible via the 'super' keyword.": {
      code: 2166,
      category: 1,
    },
    "Numeric indexer type '{0}' must be assignable to string indexer type '{1}'.": {
      code: 2167,
      category: 1,
    },
    "Numeric indexer type '{0}' must be assignable to string indexer type '{1}':{NL}{2}": {
      code: 2168,
      category: 1,
    },
    "All numerically named properties must be assignable to numeric indexer type '{0}'.": {
      code: 2169,
      category: 1,
    },
    "All numerically named properties must be assignable to numeric indexer type '{0}':{NL}{1}": {
      code: 2170,
      category: 1,
    },
    "All named properties must be assignable to string indexer type '{0}'.": {
      code: 2171,
      category: 1,
    },
    "All named properties must be assignable to string indexer type '{0}':{NL}{1}": {
      code: 2172,
      category: 1,
    },
    "Generic type references must include all type arguments.": {
      code: 2173,
      category: 1,
    },
    "Default arguments are only allowed in implementation.": {
      code: 2174,
      category: 1,
    },
    "Overloads cannot differ only by return type.": { code: 2175, category: 1 },
    "Function expression declared a non-void return type, but has no return expression.": {
      code: 2176,
      category: 1,
    },
    "Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.": {
      code: 2177,
      category: 1,
    },
    "Could not find symbol '{0}' in module '{1}'.": { code: 2178, category: 1 },
    "Unable to resolve module reference '{0}'.": { code: 2179, category: 1 },
    "Could not find module '{0}' in module '{1}'.": { code: 2180, category: 1 },
    "Exported import declaration '{0}' is assigned value with type that has or is using private type '{1}'.": {
      code: 2181,
      category: 1,
    },
    "Exported import declaration '{0}' is assigned value with type that is using inaccessible module '{1}'.": {
      code: 2182,
      category: 1,
    },
    "Exported import declaration '{0}' is assigned type that has or is using private type '{1}'.": {
      code: 2183,
      category: 1,
    },
    "Exported import declaration '{0}' is assigned type that is using inaccessible module '{1}'.": {
      code: 2184,
      category: 1,
    },
    "Exported import declaration '{0}' is assigned container that is or is using inaccessible module '{1}'.": {
      code: 2185,
      category: 1,
    },
    "Type name '{0}' in extends clause does not reference constructor function for '{1}'.": {
      code: 2186,
      category: 1,
    },
    "Internal module reference '{0}' in import declaration does not reference module instance for '{1}'.": {
      code: 2187,
      category: 1,
    },
    "Module '{0}' cannot merge with previous declaration of '{1}' in a different file '{2}'.": {
      code: 2188,
      category: 1,
    },
    "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}':{NL}{3}": {
      code: 2189,
      category: 1,
    },
    "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.": {
      code: 2190,
      category: 1,
    },
    "Ambient external module declaration cannot be reopened.": {
      code: 2191,
      category: 1,
    },
    "All declarations of merged declaration '{0}' must be exported or not exported.": {
      code: 2192,
      category: 1,
    },
    "'super' cannot be referenced in constructor arguments.": {
      code: 2193,
      category: 1,
    },
    "Return type of constructor signature must be assignable to the instance type of the class.": {
      code: 2194,
      category: 1,
    },
    "Ambient external module declaration must be defined in global context.": {
      code: 2195,
      category: 1,
    },
    "Ambient external module declaration cannot specify relative module name.": {
      code: 2196,
      category: 1,
    },
    "Import declaration in an ambient external module declaration cannot reference external module through relative external module name.": {
      code: 2197,
      category: 1,
    },
    "Could not find the best common type of types of all return statement expressions.": {
      code: 2198,
      category: 1,
    },
    "Import declaration cannot refer to external module reference when --noResolve option is set.": {
      code: 2199,
      category: 1,
    },
    "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.": {
      code: 2200,
      category: 1,
    },
    "'continue' statement can only be used within an enclosing iteration statement.": {
      code: 2201,
      category: 1,
    },
    "'break' statement can only be used within an enclosing iteration or switch statement.": {
      code: 2202,
      category: 1,
    },
    "Jump target not found.": { code: 2203, category: 1 },
    "Jump target cannot cross function boundary.": { code: 2204, category: 1 },
    "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.": {
      code: 2205,
      category: 1,
    },
    "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.": {
      code: 2206,
      category: 1,
    },
    "Expression resolves to '_super' that compiler uses to capture base class reference.": {
      code: 2207,
      category: 1,
    },
    "TypeParameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.": {
      code: 2208,
      category: 1,
    },
    "TypeParameter '{0}' of call signature from exported interface has or is using private type '{1}'.": {
      code: 2209,
      category: 1,
    },
    "TypeParameter '{0}' of public static method from exported class has or is using private type '{1}'.": {
      code: 2210,
      category: 1,
    },
    "TypeParameter '{0}' of public method from exported class has or is using private type '{1}'.": {
      code: 2211,
      category: 1,
    },
    "TypeParameter '{0}' of method from exported interface has or is using private type '{1}'.": {
      code: 2212,
      category: 1,
    },
    "TypeParameter '{0}' of exported function has or is using private type '{1}'.": {
      code: 2213,
      category: 1,
    },
    "TypeParameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.": {
      code: 2214,
      category: 1,
    },
    "TypeParameter '{0}' of call signature from exported interface is using inaccessible module {1}": {
      code: 2215,
      category: 1,
    },
    "TypeParameter '{0}' of public static method from exported class is using inaccessible module {1}.": {
      code: 2216,
      category: 1,
    },
    "TypeParameter '{0}' of public method from exported class is using inaccessible module {1}.": {
      code: 2217,
      category: 1,
    },
    "TypeParameter '{0}' of method from exported interface is using inaccessible module {1}.": {
      code: 2218,
      category: 1,
    },
    "TypeParameter '{0}' of exported function is using inaccessible module {1}.": {
      code: 2219,
      category: 1,
    },
    "TypeParameter '{0}' of exported class has or is using private type '{1}'.": {
      code: 2220,
      category: 1,
    },
    "TypeParameter '{0}' of exported interface has or is using private type '{1}'.": {
      code: 2221,
      category: 1,
    },
    "TypeParameter '{0}' of exported class is using inaccessible module {1}.": {
      code: 2222,
      category: 1,
    },
    "TypeParameter '{0}' of exported interface is using inaccessible module {1}.": {
      code: 2223,
      category: 1,
    },
    "Duplicate identifier '_i'. Compiler uses '_i' to initialize rest parameter.": {
      code: 2224,
      category: 1,
    },
    "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.": {
      code: 2225,
      category: 1,
    },
    "Type of conditional '{0}' must be identical to '{1}' or '{2}'.": {
      code: 2226,
      category: 1,
    },
    "Type of conditional '{0}' must be identical to '{1}', '{2}' or '{3}'.": {
      code: 2227,
      category: 1,
    },
    "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of an external module.": {
      code: 2228,
      category: 1,
    },
    "Constraint of a type parameter cannot reference any type parameter from the same type parameter list.": {
      code: 2229,
      category: 1,
    },
    "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.": {
      code: 2230,
      category: 1,
    },
    "Parameter '{0}' cannot be referenced in its initializer.": {
      code: 2231,
      category: 1,
    },
    "Duplicate string index signature.": { code: 2232, category: 1 },
    "Duplicate number index signature.": { code: 2233, category: 1 },
    "All declarations of an interface must have identical type parameters.": {
      code: 2234,
      category: 1,
    },
    "Expression resolves to variable declaration '_i' that compiler uses to initialize rest parameter.": {
      code: 2235,
      category: 1,
    },
    "Type '{0}' is missing property '{1}' from type '{2}'.": {
      code: 4e3,
      category: 3,
    },
    "Types of property '{0}' of types '{1}' and '{2}' are incompatible.": {
      code: 4001,
      category: 3,
    },
    "Types of property '{0}' of types '{1}' and '{2}' are incompatible:{NL}{3}": {
      code: 4002,
      category: 3,
    },
    "Property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.": {
      code: 4003,
      category: 3,
    },
    "Property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.": {
      code: 4004,
      category: 3,
    },
    "Types '{0}' and '{1}' define property '{2}' as private.": {
      code: 4005,
      category: 3,
    },
    "Call signatures of types '{0}' and '{1}' are incompatible.": {
      code: 4006,
      category: 3,
    },
    "Call signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": {
      code: 4007,
      category: 3,
    },
    "Type '{0}' requires a call signature, but type '{1}' lacks one.": {
      code: 4008,
      category: 3,
    },
    "Construct signatures of types '{0}' and '{1}' are incompatible.": {
      code: 4009,
      category: 3,
    },
    "Construct signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": {
      code: 4010,
      category: 3,
    },
    "Type '{0}' requires a construct signature, but type '{1}' lacks one.": {
      code: 4011,
      category: 3,
    },
    "Index signatures of types '{0}' and '{1}' are incompatible.": {
      code: 4012,
      category: 3,
    },
    "Index signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": {
      code: 4013,
      category: 3,
    },
    "Call signature expects {0} or fewer parameters.": {
      code: 4014,
      category: 3,
    },
    "Could not apply type '{0}' to argument {1} which is of type '{2}'.": {
      code: 4015,
      category: 3,
    },
    "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.": {
      code: 4016,
      category: 3,
    },
    "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.": {
      code: 4017,
      category: 3,
    },
    "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.": {
      code: 4018,
      category: 3,
    },
    "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.": {
      code: 4019,
      category: 3,
    },
    "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible.": {
      code: 4020,
      category: 3,
    },
    "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible:{NL}{3}": {
      code: 4021,
      category: 3,
    },
    "Type reference cannot refer to container '{0}'.": {
      code: 4022,
      category: 1,
    },
    "Type reference must refer to type.": { code: 4023, category: 1 },
    "In enums with multiple declarations only one declaration can omit an initializer for the first enum element.": {
      code: 4024,
      category: 1,
    },
    " (+ {0} overload(s))": { code: 4025, category: 2 },
    "Variable declaration cannot have the same name as an import declaration.": {
      code: 4026,
      category: 1,
    },
    "Signature expected {0} type arguments, got {1} instead.": {
      code: 4027,
      category: 1,
    },
    "Property '{0}' defined as optional in type '{1}', but is required in type '{2}'.": {
      code: 4028,
      category: 3,
    },
    "Types '{0}' and '{1}' originating in infinitely expanding type reference do not refer to same named type.": {
      code: 4029,
      category: 3,
    },
    "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments.": {
      code: 4030,
      category: 3,
    },
    "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments:{NL}{2}": {
      code: 4031,
      category: 3,
    },
    "Named properties '{0}' of types '{1}' and '{2}' are not identical.": {
      code: 4032,
      category: 3,
    },
    "Types of string indexer of types '{0}' and '{1}' are not identical.": {
      code: 4033,
      category: 3,
    },
    "Types of number indexer of types '{0}' and '{1}' are not identical.": {
      code: 4034,
      category: 3,
    },
    "Type of number indexer in type '{0}' is not assignable to string indexer type in type '{1}'.{NL}{2}": {
      code: 4035,
      category: 3,
    },
    "Type of property '{0}' in type '{1}' is not assignable to string indexer type in type '{2}'.{NL}{3}": {
      code: 4036,
      category: 3,
    },
    "Type of property '{0}' in type '{1}' is not assignable to number indexer type in type '{2}'.{NL}{3}": {
      code: 4037,
      category: 3,
    },
    "Static property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.": {
      code: 4038,
      category: 3,
    },
    "Static property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.": {
      code: 4039,
      category: 3,
    },
    "Types '{0}' and '{1}' define static property '{2}' as private.": {
      code: 4040,
      category: 3,
    },
    "Current host does not support '{0}' option.": { code: 5001, category: 1 },
    "ECMAScript target version '{0}' not supported.  Specify a valid target version: '{1}' (default), or '{2}'": {
      code: 5002,
      category: 1,
    },
    "Module code generation '{0}' not supported.": { code: 5003, category: 1 },
    "Could not find file: '{0}'.": { code: 5004, category: 1 },
    "A file cannot have a reference to itself.": { code: 5006, category: 1 },
    "Cannot resolve referenced file: '{0}'.": { code: 5007, category: 1 },
    "Cannot find the common subdirectory path for the input files.": {
      code: 5009,
      category: 1,
    },
    "Emit Error: {0}.": { code: 5011, category: 1 },
    "Cannot read file '{0}': {1}": { code: 5012, category: 1 },
    "Unsupported file encoding.": { code: 5013, category: 3 },
    "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.": {
      code: 5014,
      category: 1,
    },
    "Unsupported locale: '{0}'.": { code: 5015, category: 1 },
    "Execution Failed.{NL}": { code: 5016, category: 1 },
    "Invalid call to 'up'": { code: 5019, category: 1 },
    "Invalid call to 'down'": { code: 5020, category: 1 },
    "Base64 value '{0}' finished with a continuation bit.": {
      code: 5021,
      category: 1,
    },
    "Unknown option '{0}'": { code: 5023, category: 1 },
    "Expected {0} arguments to message, got {1} instead.": {
      code: 5024,
      category: 1,
    },
    "Expected the message '{0}' to have {1} arguments, but it had {2}": {
      code: 5025,
      category: 1,
    },
    "Could not delete file '{0}'": { code: 5034, category: 1 },
    "Could not create directory '{0}'": { code: 5035, category: 1 },
    "Error while executing file '{0}': ": { code: 5036, category: 1 },
    "Cannot compile external modules unless the '--module' flag is provided.": {
      code: 5037,
      category: 1,
    },
    "Option mapRoot cannot be specified without specifying sourcemap option.": {
      code: 5038,
      category: 1,
    },
    "Option sourceRoot cannot be specified without specifying sourcemap option.": {
      code: 5039,
      category: 1,
    },
    "Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.": {
      code: 5040,
      category: 1,
    },
    "Option '{0}' specified without '{1}'": { code: 5041, category: 1 },
    "'codepage' option not supported on current platform.": {
      code: 5042,
      category: 1,
    },
    "Concatenate and emit output to single file.": { code: 6001, category: 2 },
    "Generates corresponding {0} file.": { code: 6002, category: 2 },
    "Specifies the location where debugger should locate map files instead of generated locations.": {
      code: 6003,
      category: 2,
    },
    "Specifies the location where debugger should locate TypeScript files instead of source locations.": {
      code: 6004,
      category: 2,
    },
    "Watch input files.": { code: 6005, category: 2 },
    "Redirect output structure to the directory.": { code: 6006, category: 2 },
    "Do not emit comments to output.": { code: 6009, category: 2 },
    "Skip resolution and preprocessing.": { code: 6010, category: 2 },
    "Specify ECMAScript target version: '{0}' (default), or '{1}'": {
      code: 6015,
      category: 2,
    },
    "Specify module code generation: '{0}' or '{1}'": {
      code: 6016,
      category: 2,
    },
    "Print this message.": { code: 6017, category: 2 },
    "Print the compiler's version: {0}": { code: 6019, category: 2 },
    "Allow use of deprecated '{0}' keyword when referencing an external module.": {
      code: 6021,
      category: 2,
    },
    "Specify locale for errors and messages. For example '{0}' or '{1}'": {
      code: 6022,
      category: 2,
    },
    "Syntax:   {0}": { code: 6023, category: 2 },
    options: { code: 6024, category: 2 },
    file1: { code: 6025, category: 2 },
    "Examples:": { code: 6026, category: 2 },
    "Options:": { code: 6027, category: 2 },
    "Insert command line options and files from a file.": {
      code: 6030,
      category: 2,
    },
    "Version {0}": { code: 6029, category: 2 },
    "Use the '{0}' flag to see options.": { code: 6031, category: 2 },
    "{NL}Recompiling ({0}):": { code: 6032, category: 2 },
    STRING: { code: 6033, category: 2 },
    KIND: { code: 6034, category: 2 },
    file2: { code: 6035, category: 2 },
    VERSION: { code: 6036, category: 2 },
    LOCATION: { code: 6037, category: 2 },
    DIRECTORY: { code: 6038, category: 2 },
    NUMBER: { code: 6039, category: 2 },
    "Specify the codepage to use when opening source files.": {
      code: 6040,
      category: 2,
    },
    "Additional locations:": { code: 6041, category: 2 },
    "This version of the Javascript runtime does not support the '{0}' function.": {
      code: 7e3,
      category: 1,
    },
    "Unknown rule.": { code: 7002, category: 1 },
    "Invalid line number ({0})": { code: 7003, category: 1 },
    "Warn on expressions and declarations with an implied 'any' type.": {
      code: 7004,
      category: 2,
    },
    "Variable '{0}' implicitly has an 'any' type.": { code: 7005, category: 1 },
    "Parameter '{0}' of '{1}' implicitly has an 'any' type.": {
      code: 7006,
      category: 1,
    },
    "Parameter '{0}' of function type implicitly has an 'any' type.": {
      code: 7007,
      category: 1,
    },
    "Member '{0}' of object type implicitly has an 'any' type.": {
      code: 7008,
      category: 1,
    },
    "'new' expression, which lacks a constructor signature, implicitly has an 'any' type.": {
      code: 7009,
      category: 1,
    },
    "'{0}', which lacks return-type annotation, implicitly has an 'any' return type.": {
      code: 7010,
      category: 1,
    },
    "Function expression, which lacks return-type annotation, implicitly has an 'any' return type.": {
      code: 7011,
      category: 1,
    },
    "Parameter '{0}' of lambda function implicitly has an 'any' type.": {
      code: 7012,
      category: 1,
    },
    "Constructor signature, which lacks return-type annotation, implicitly has an 'any' return type.": {
      code: 7013,
      category: 1,
    },
    "Lambda Function, which lacks return-type annotation, implicitly has an 'any' return type.": {
      code: 7014,
      category: 1,
    },
    "Array Literal implicitly has an 'any' type from widening.": {
      code: 7015,
      category: 1,
    },
    "'{0}', which lacks 'get' accessor and parameter type annotation on 'set' accessor, implicitly has an 'any' type.": {
      code: 7016,
      category: 1,
    },
    "Index signature of object type implicitly has an 'any' type.": {
      code: 7017,
      category: 1,
    },
    "Object literal's property '{0}' implicitly has an 'any' type from widening.": {
      code: 7018,
      category: 1,
    },
  };
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.nullCharacter = 0)] = "nullCharacter"),
      (e[(e.maxAsciiCharacter = 127)] = "maxAsciiCharacter"),
      (e[(e.lineFeed = 10)] = "lineFeed"),
      (e[(e.carriageReturn = 13)] = "carriageReturn"),
      (e[(e.lineSeparator = 8232)] = "lineSeparator"),
      (e[(e.paragraphSeparator = 8233)] = "paragraphSeparator"),
      (e[(e.nextLine = 133)] = "nextLine"),
      (e[(e.space = 32)] = "space"),
      (e[(e.nonBreakingSpace = 160)] = "nonBreakingSpace"),
      (e[(e.enQuad = 8192)] = "enQuad"),
      (e[(e.emQuad = 8193)] = "emQuad"),
      (e[(e.enSpace = 8194)] = "enSpace"),
      (e[(e.emSpace = 8195)] = "emSpace"),
      (e[(e.threePerEmSpace = 8196)] = "threePerEmSpace"),
      (e[(e.fourPerEmSpace = 8197)] = "fourPerEmSpace"),
      (e[(e.sixPerEmSpace = 8198)] = "sixPerEmSpace"),
      (e[(e.figureSpace = 8199)] = "figureSpace"),
      (e[(e.punctuationSpace = 8200)] = "punctuationSpace"),
      (e[(e.thinSpace = 8201)] = "thinSpace"),
      (e[(e.hairSpace = 8202)] = "hairSpace"),
      (e[(e.zeroWidthSpace = 8203)] = "zeroWidthSpace"),
      (e[(e.narrowNoBreakSpace = 8239)] = "narrowNoBreakSpace"),
      (e[(e.ideographicSpace = 12288)] = "ideographicSpace"),
      (e[(e._ = 95)] = "_"),
      (e[(e.$ = 36)] = "$"),
      (e[(e._0 = 48)] = "_0"),
      (e[(e._7 = 55)] = "_7"),
      (e[(e._9 = 57)] = "_9"),
      (e[(e.a = 97)] = "a"),
      (e[(e.b = 98)] = "b"),
      (e[(e.c = 99)] = "c"),
      (e[(e.d = 100)] = "d"),
      (e[(e.e = 101)] = "e"),
      (e[(e.f = 102)] = "f"),
      (e[(e.g = 103)] = "g"),
      (e[(e.h = 104)] = "h"),
      (e[(e.i = 105)] = "i"),
      (e[(e.k = 107)] = "k"),
      (e[(e.l = 108)] = "l"),
      (e[(e.m = 109)] = "m"),
      (e[(e.n = 110)] = "n"),
      (e[(e.o = 111)] = "o"),
      (e[(e.p = 112)] = "p"),
      (e[(e.q = 113)] = "q"),
      (e[(e.r = 114)] = "r"),
      (e[(e.s = 115)] = "s"),
      (e[(e.t = 116)] = "t"),
      (e[(e.u = 117)] = "u"),
      (e[(e.v = 118)] = "v"),
      (e[(e.w = 119)] = "w"),
      (e[(e.x = 120)] = "x"),
      (e[(e.y = 121)] = "y"),
      (e[(e.z = 122)] = "z"),
      (e[(e.A = 65)] = "A"),
      (e[(e.E = 69)] = "E"),
      (e[(e.F = 70)] = "F"),
      (e[(e.X = 88)] = "X"),
      (e[(e.Z = 90)] = "Z"),
      (e[(e.ampersand = 38)] = "ampersand"),
      (e[(e.asterisk = 42)] = "asterisk"),
      (e[(e.at = 64)] = "at"),
      (e[(e.backslash = 92)] = "backslash"),
      (e[(e.bar = 124)] = "bar"),
      (e[(e.caret = 94)] = "caret"),
      (e[(e.closeBrace = 125)] = "closeBrace"),
      (e[(e.closeBracket = 93)] = "closeBracket"),
      (e[(e.closeParen = 41)] = "closeParen"),
      (e[(e.colon = 58)] = "colon"),
      (e[(e.comma = 44)] = "comma"),
      (e[(e.dot = 46)] = "dot"),
      (e[(e.doubleQuote = 34)] = "doubleQuote"),
      (e[(e.equals = 61)] = "equals"),
      (e[(e.exclamation = 33)] = "exclamation"),
      (e[(e.greaterThan = 62)] = "greaterThan"),
      (e[(e.lessThan = 60)] = "lessThan"),
      (e[(e.minus = 45)] = "minus"),
      (e[(e.openBrace = 123)] = "openBrace"),
      (e[(e.openBracket = 91)] = "openBracket"),
      (e[(e.openParen = 40)] = "openParen"),
      (e[(e.percent = 37)] = "percent"),
      (e[(e.plus = 43)] = "plus"),
      (e[(e.question = 63)] = "question"),
      (e[(e.semicolon = 59)] = "semicolon"),
      (e[(e.singleQuote = 39)] = "singleQuote"),
      (e[(e.slash = 47)] = "slash"),
      (e[(e.tilde = 126)] = "tilde"),
      (e[(e.backspace = 8)] = "backspace"),
      (e[(e.formFeed = 12)] = "formFeed"),
      (e[(e.byteOrderMark = 65279)] = "byteOrderMark"),
      (e[(e.tab = 9)] = "tab"),
      (e[(e.verticalTab = 11)] = "verticalTab");
  })(e.CharacterCodes || (e.CharacterCodes = {}));
  e.CharacterCodes;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      return new r(e);
    }
    var r = (function () {
      function t(e) {
        (this.text = e), (this._lineStartPositions = null);
      }
      return (
        (t.prototype.getText = function (e, t) {
          return this.text.substring(e, t);
        }),
        (t.prototype.getLength = function () {
          return this.text.length;
        }),
        (t.prototype.getLineStartPositions = function () {
          return (
            this._lineStartPositions ||
              (this._lineStartPositions = e.TextUtilities.parseLineStarts(
                this.text
              )),
            this._lineStartPositions
          );
        }),
        (t.prototype.getTextChangeRangeSinceVersion = function () {
          throw e.Errors.notYetImplemented();
        }),
        t
      );
    })();
    t.fromString = n;
  })(e.ScriptSnapshot || (e.ScriptSnapshot = {}));
  e.ScriptSnapshot;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(t) {
      return new e.LineMap(function () {
        return e.TextUtilities.parseLineStarts({
          charCodeAt: function (e) {
            return t.charCodeAt(e);
          },
          length: t.length(),
        });
      }, t.length());
    }
    function r(t) {
      return new e.LineMap(function () {
        return t.getLineStartPositions();
      }, t.getLength());
    }
    function i(t) {
      return new e.LineMap(function () {
        return e.TextUtilities.parseLineStarts(t);
      }, t.length);
    }
    (t.fromSimpleText = n), (t.fromScriptSnapshot = r), (t.fromString = i);
  })(e.LineMap1 || (e.LineMap1 = {}));
  e.LineMap1;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(t, n, r) {
      var i = t.charCodeAt(n);
      10 === i
        ? n > 0 && 13 === t.charCodeAt(n - 1)
          ? ((r.startPosition = n - 1), (r.length = 2))
          : ((r.startPosition = n), (r.length = 1))
        : e.TextUtilities.isAnyLineBreakCharacter(i)
        ? ((r.startPosition = n), (r.length = 1))
        : ((r.startPosition = n + 1), (r.length = 0));
    }
    function r(e) {
      return new l(e);
    }
    var i = (function () {
        function e(e, t) {
          (this.startPosition = e), (this.length = t);
        }
        return e;
      })(),
      o = (function () {
        function t(t, n, r, i) {
          if (((this._text = null), (this._textSpan = null), null === t))
            throw e.Errors.argumentNull("text");
          e.Debug.assert(r >= 0),
            e.Debug.assert(i >= 0),
            (this._text = t),
            (this._textSpan = n),
            (this._lineBreakLength = r),
            (this._lineNumber = i);
        }
        return (
          (t.prototype.start = function () {
            return this._textSpan.start();
          }),
          (t.prototype.end = function () {
            return this._textSpan.end();
          }),
          (t.prototype.endIncludingLineBreak = function () {
            return this.end() + this._lineBreakLength;
          }),
          (t.prototype.extent = function () {
            return this._textSpan;
          }),
          (t.prototype.extentIncludingLineBreak = function () {
            return e.TextSpan.fromBounds(
              this.start(),
              this.endIncludingLineBreak()
            );
          }),
          (t.prototype.toString = function () {
            return this._text.toString(this._textSpan);
          }),
          (t.prototype.lineNumber = function () {
            return this._lineNumber;
          }),
          t
        );
      })(),
      s = (function () {
        function t() {
          (this.linebreakInfo = new i(0, 0)),
            (this.lastLineFoundForPosition = null);
        }
        return (
          (t.prototype.length = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.charCodeAt = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.checkSubSpan = function (t) {
            if (
              t.start() < 0 ||
              t.start() > this.length() ||
              t.end() > this.length()
            )
              throw e.Errors.argumentOutOfRange("span");
          }),
          (t.prototype.toString = function (t) {
            throw ("undefined" == typeof t && (t = null), e.Errors.abstract());
          }),
          (t.prototype.subText = function (e) {
            return this.checkSubSpan(e), new a(this, e);
          }),
          (t.prototype.substr = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.copyTo = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.lineCount = function () {
            return this._lineStarts().length;
          }),
          (t.prototype.lines = function () {
            for (var e = [], t = this.lineCount(), n = 0; t > n; ++n)
              e[n] = this.getLineFromLineNumber(n);
            return e;
          }),
          (t.prototype.lineMap = function () {
            var t = this;
            return new e.LineMap(function () {
              return t._lineStarts();
            }, this.length());
          }),
          (t.prototype._lineStarts = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.getLineFromLineNumber = function (t) {
            var r = this._lineStarts();
            if (0 > t || t >= r.length)
              throw e.Errors.argumentOutOfRange("lineNumber");
            var i = r[t];
            return t === r.length - 1
              ? new o(this, new e.TextSpan(i, this.length() - i), 0, t)
              : (n(this, r[t + 1] - 1, this.linebreakInfo),
                new o(
                  this,
                  new e.TextSpan(i, this.linebreakInfo.startPosition - i),
                  this.linebreakInfo.length,
                  t
                ));
          }),
          (t.prototype.getLineFromPosition = function (e) {
            var t = this.lastLineFoundForPosition;
            if (null !== t && t.start() <= e && t.endIncludingLineBreak() > e)
              return t;
            var n = this.getLineNumberFromPosition(e),
              r = this.getLineFromLineNumber(n);
            return (this.lastLineFoundForPosition = r), r;
          }),
          (t.prototype.getLineNumberFromPosition = function (t) {
            if (0 > t || t > this.length())
              throw e.Errors.argumentOutOfRange("position");
            if (t === this.length()) return this.lineCount() - 1;
            var n = e.ArrayUtilities.binarySearch(this._lineStarts(), t);
            return 0 > n && (n = ~n - 1), n;
          }),
          (t.prototype.getLinePosition = function (t) {
            if (0 > t || t > this.length())
              throw e.Errors.argumentOutOfRange("position");
            var n = this.getLineNumberFromPosition(t);
            return new e.LineAndCharacter(n, t - this._lineStarts()[n]);
          }),
          t
        );
      })(),
      a = (function (t) {
        function n(n, r) {
          if ((t.call(this), (this._lazyLineStarts = null), null === n))
            throw e.Errors.argumentNull("text");
          if (
            r.start() < 0 ||
            r.start() >= n.length() ||
            r.end() < 0 ||
            r.end() > n.length()
          )
            throw e.Errors.argument("span");
          (this.text = n), (this.span = r);
        }
        return (
          __extends(n, t),
          (n.prototype.length = function () {
            return this.span.length();
          }),
          (n.prototype.charCodeAt = function (t) {
            if (0 > t || t > this.length())
              throw e.Errors.argumentOutOfRange("position");
            return this.text.charCodeAt(this.span.start() + t);
          }),
          (n.prototype.subText = function (e) {
            return (
              this.checkSubSpan(e),
              new n(this.text, this.getCompositeSpan(e.start(), e.length()))
            );
          }),
          (n.prototype.copyTo = function (e, t, n, r) {
            var i = this.getCompositeSpan(e, r);
            this.text.copyTo(i.start(), t, n, i.length());
          }),
          (n.prototype.substr = function (e, t, n) {
            var r = this.span.start() + e;
            return this.text.substr(r, t, n);
          }),
          (n.prototype.getCompositeSpan = function (t, n) {
            var r = e.MathPrototype.min(
                this.text.length(),
                this.span.start() + t
              ),
              i = e.MathPrototype.min(this.text.length(), r + n);
            return new e.TextSpan(r, i - r);
          }),
          (n.prototype._lineStarts = function () {
            var t = this;
            return (
              this._lazyLineStarts ||
                (this._lazyLineStarts = e.TextUtilities.parseLineStarts({
                  charCodeAt: function (e) {
                    return t.charCodeAt(e);
                  },
                  length: this.length(),
                })),
              this._lazyLineStarts
            );
          }),
          n
        );
      })(s),
      l = (function (t) {
        function n(n) {
          if (
            (t.call(this),
            (this.source = null),
            (this._lazyLineStarts = null),
            null === n)
          )
            throw e.Errors.argumentNull("data");
          this.source = n;
        }
        return (
          __extends(n, t),
          (n.prototype.length = function () {
            return this.source.length;
          }),
          (n.prototype.charCodeAt = function (t) {
            if (0 > t || t >= this.source.length)
              throw e.Errors.argumentOutOfRange("position");
            return this.source.charCodeAt(t);
          }),
          (n.prototype.substr = function (e, t) {
            return this.source.substr(e, t);
          }),
          (n.prototype.toString = function (t) {
            return (
              "undefined" == typeof t && (t = null),
              null === t && (t = new e.TextSpan(0, this.length())),
              this.checkSubSpan(t),
              0 === t.start() && t.length() === this.length()
                ? this.source
                : this.source.substr(t.start(), t.length())
            );
          }),
          (n.prototype.copyTo = function (t, n, r, i) {
            e.StringUtilities.copyTo(this.source, t, n, r, i);
          }),
          (n.prototype._lineStarts = function () {
            return (
              null === this._lazyLineStarts &&
                (this._lazyLineStarts = e.TextUtilities.parseLineStarts(
                  this.source
                )),
              this._lazyLineStarts
            );
          }),
          n
        );
      })(s);
    t.createText = r;
  })(e.TextFactory || (e.TextFactory = {}));
  e.TextFactory;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      return new o(e);
    }
    function r(e) {
      return new s(e);
    }
    var i = (function () {
        function t(t, n) {
          if (((this.text = null), (this.span = null), null === t))
            throw e.Errors.argumentNull("text");
          if (
            n.start() < 0 ||
            n.start() >= t.length() ||
            n.end() < 0 ||
            n.end() > t.length()
          )
            throw e.Errors.argument("span");
          (this.text = t), (this.span = n);
        }
        return (
          (t.prototype.checkSubSpan = function (t) {
            if (
              t.start() < 0 ||
              t.start() > this.length() ||
              t.end() > this.length()
            )
              throw e.Errors.argumentOutOfRange("span");
          }),
          (t.prototype.checkSubPosition = function (t) {
            if (0 > t || t >= this.length())
              throw e.Errors.argumentOutOfRange("position");
          }),
          (t.prototype.length = function () {
            return this.span.length();
          }),
          (t.prototype.subText = function (e) {
            return (
              this.checkSubSpan(e),
              new t(this.text, this.getCompositeSpan(e.start(), e.length()))
            );
          }),
          (t.prototype.copyTo = function (e, t, n, r) {
            var i = this.getCompositeSpan(e, r);
            this.text.copyTo(i.start(), t, n, i.length());
          }),
          (t.prototype.substr = function (e, t, n) {
            var r = this.getCompositeSpan(e, t);
            return this.text.substr(r.start(), r.length(), n);
          }),
          (t.prototype.getCompositeSpan = function (t, n) {
            var r = e.MathPrototype.min(
                this.text.length(),
                this.span.start() + t
              ),
              i = e.MathPrototype.min(this.text.length(), r + n);
            return new e.TextSpan(r, i - r);
          }),
          (t.prototype.charCodeAt = function (e) {
            return (
              this.checkSubPosition(e),
              this.text.charCodeAt(this.span.start() + e)
            );
          }),
          (t.prototype.lineMap = function () {
            return e.LineMap1.fromSimpleText(this);
          }),
          t
        );
      })(),
      o = (function () {
        function t(e) {
          (this.value = e), (this._lineMap = null);
        }
        return (
          (t.prototype.length = function () {
            return this.value.length;
          }),
          (t.prototype.copyTo = function (t, n, r, i) {
            e.StringUtilities.copyTo(this.value, t, n, r, i);
          }),
          (t.prototype.substr = function (n, r, i) {
            if (i) {
              var o =
                r <= t.charArray.length
                  ? t.charArray
                  : e.ArrayUtilities.createArray(r, 0);
              return (
                this.copyTo(n, o, 0, r),
                e.Collections.DefaultStringTable.addCharArray(o, 0, r)
              );
            }
            return this.value.substr(n, r);
          }),
          (t.prototype.subText = function (e) {
            return new i(this, e);
          }),
          (t.prototype.charCodeAt = function (e) {
            return this.value.charCodeAt(e);
          }),
          (t.prototype.lineMap = function () {
            return (
              this._lineMap ||
                (this._lineMap = e.LineMap1.fromString(this.value)),
              this._lineMap
            );
          }),
          (t.charArray = e.ArrayUtilities.createArray(1024, 0)),
          t
        );
      })(),
      s = (function () {
        function t(e) {
          this.scriptSnapshot = e;
        }
        return (
          (t.prototype.charCodeAt = function (e) {
            return this.scriptSnapshot.getText(e, e + 1).charCodeAt(0);
          }),
          (t.prototype.length = function () {
            return this.scriptSnapshot.getLength();
          }),
          (t.prototype.copyTo = function (t, n, r, i) {
            var o = this.scriptSnapshot.getText(t, t + i);
            e.StringUtilities.copyTo(o, 0, n, r, i);
          }),
          (t.prototype.substr = function (e, t) {
            return this.scriptSnapshot.getText(e, e + t);
          }),
          (t.prototype.subText = function (e) {
            return new i(this, e);
          }),
          (t.prototype.lineMap = function () {
            var t = this;
            return new e.LineMap(function () {
              return t.scriptSnapshot.getLineStartPositions();
            }, this.length());
          }),
          t
        );
      })();
    (t.fromString = n), (t.fromScriptSnapshot = r);
  })(e.SimpleText || (e.SimpleText = {}));
  e.SimpleText;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    function t(t) {
      var n = t.length;
      if (0 === n) {
        var r = new Array();
        return r.push(0), r;
      }
      for (var i = 0, o = 0, s = new Array(), a = 0; n > o; ) {
        var l,
          c = t.charCodeAt(o);
        c > 13 && 127 >= c
          ? o++
          : ((l =
              13 === c && n > o + 1 && 10 === t.charCodeAt(o + 1)
                ? 2
                : 10 === c
                ? 1
                : e.getLengthOfLineBreak(t, o)),
            0 === l ? o++ : (s.push(i), (o += l), (i = o), a++));
      }
      return s.push(i), s;
    }
    function n(e, t, n) {
      if (13 === n) {
        var r = t + 1;
        return r < e.length && 10 === e.charCodeAt(r) ? 2 : 1;
      }
      return i(n) ? 1 : 0;
    }
    function r(e, t) {
      var r = e.charCodeAt(t);
      return r > 13 && 127 >= r ? 0 : n(e, t, r);
    }
    function i(e) {
      return 10 === e || 13 === e || 133 === e || 8232 === e || 8233 === e;
    }
    (e.parseLineStarts = t),
      (e.getLengthOfLineBreakSlow = n),
      (e.getLengthOfLineBreak = r),
      (e.isAnyLineBreakCharacter = i);
  })(e.TextUtilities || (e.TextUtilities = {}));
  e.TextUtilities;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(t, n) {
      0 > t && e.Errors.argument("start"),
        0 > n && e.Errors.argument("length"),
        (this._start = t),
        (this._length = n);
    }
    return (
      (t.prototype.start = function () {
        return this._start;
      }),
      (t.prototype.length = function () {
        return this._length;
      }),
      (t.prototype.end = function () {
        return this._start + this._length;
      }),
      (t.prototype.isEmpty = function () {
        return 0 === this._length;
      }),
      (t.prototype.containsPosition = function (e) {
        return e >= this._start && e < this.end();
      }),
      (t.prototype.containsTextSpan = function (e) {
        return e._start >= this._start && e.end() <= this.end();
      }),
      (t.prototype.overlapsWith = function (t) {
        var n = e.MathPrototype.max(this._start, t._start),
          r = e.MathPrototype.min(this.end(), t.end());
        return r > n;
      }),
      (t.prototype.overlap = function (n) {
        var r = e.MathPrototype.max(this._start, n._start),
          i = e.MathPrototype.min(this.end(), n.end());
        return i > r ? t.fromBounds(r, i) : null;
      }),
      (t.prototype.intersectsWithTextSpan = function (e) {
        return e._start <= this.end() && e.end() >= this._start;
      }),
      (t.prototype.intersectsWith = function (e, t) {
        var n = e + t;
        return e <= this.end() && n >= this._start;
      }),
      (t.prototype.intersectsWithPosition = function (e) {
        return e <= this.end() && e >= this._start;
      }),
      (t.prototype.intersection = function (n) {
        var r = e.MathPrototype.max(this._start, n._start),
          i = e.MathPrototype.min(this.end(), n.end());
        return i >= r ? t.fromBounds(r, i) : null;
      }),
      (t.fromBounds = function (n, r) {
        return (
          e.Debug.assert(n >= 0), e.Debug.assert(r - n >= 0), new t(n, r - n)
        );
      }),
      t
    );
  })();
  e.TextSpan = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(t, n) {
      if (0 > n) throw e.Errors.argumentOutOfRange("newLength");
      (this._span = t), (this._newLength = n);
    }
    return (
      (t.prototype.span = function () {
        return this._span;
      }),
      (t.prototype.newLength = function () {
        return this._newLength;
      }),
      (t.prototype.newSpan = function () {
        return new e.TextSpan(this.span().start(), this.newLength());
      }),
      (t.prototype.isUnchanged = function () {
        return this.span().isEmpty() && 0 === this.newLength();
      }),
      (t.collapseChangesFromSingleVersion = function (n) {
        for (var r = 0, i = 1073741823, o = 0, s = 0; s < n.length; s++) {
          var a = n[s];
          (r += a.newLength() - a.span().length()),
            a.span().start() < i && (i = a.span().start()),
            a.span().end() > o && (o = a.span().end());
        }
        if (i > o) return null;
        var l = e.TextSpan.fromBounds(i, o),
          c = l.length() + r;
        return new t(l, c);
      }),
      (t.collapseChangesAcrossMultipleVersions = function (n) {
        if (0 === n.length) return t.unchanged;
        if (1 === n.length) return n[0];
        for (
          var r = n[0],
            i = r.span().start(),
            o = r.span().end(),
            s = i + r.newLength(),
            a = 1;
          a < n.length;
          a++
        ) {
          var l = n[a],
            c = i,
            u = o,
            p = s,
            h = l.span().start(),
            d = l.span().end(),
            m = h + l.newLength();
          (i = e.MathPrototype.min(c, h)),
            (o = e.MathPrototype.max(u, u + (d - p))),
            (s = e.MathPrototype.max(m, m + (p - d)));
        }
        return new t(e.TextSpan.fromBounds(i, o), s - i);
      }),
      (t.unchanged = new t(new e.TextSpan(0, 0), 0)),
      t
    );
  })();
  e.TextChangeRange = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.isDecimalDigit = function (e) {
        return e >= 48 && 57 >= e;
      }),
      (e.isOctalDigit = function (e) {
        return e >= 48 && 55 >= e;
      }),
      (e.isHexDigit = function (t) {
        return (
          e.isDecimalDigit(t) || (t >= 65 && 70 >= t) || (t >= 97 && 102 >= t)
        );
      }),
      (e.hexValue = function (t) {
        return e.isDecimalDigit(t)
          ? t - 48
          : t >= 65 && 70 >= t
          ? t - 65 + 10
          : t - 97 + 10;
      }),
      (e.isWhitespace = function (e) {
        switch (e) {
          case 32:
          case 160:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8203:
          case 8239:
          case 12288:
          case 9:
          case 11:
          case 12:
          case 65279:
            return !0;
        }
        return !1;
      }),
      (e.isLineTerminator = function (e) {
        switch (e) {
          case 13:
          case 10:
          case 8233:
          case 8232:
            return !0;
        }
        return !1;
      }),
      e
    );
  })();
  e.CharacterInfo = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.TriviaNewLineMask = 1)] = "TriviaNewLineMask"),
      (e[(e.TriviaCommentMask = 2)] = "TriviaCommentMask"),
      (e[(e.TriviaFullWidthShift = 2)] = "TriviaFullWidthShift"),
      (e[(e.NodeDataComputed = 1)] = "NodeDataComputed"),
      (e[(e.NodeIncrementallyUnusableMask = 2)] =
        "NodeIncrementallyUnusableMask"),
      (e[(e.NodeParsedInStrictModeMask = 4)] = "NodeParsedInStrictModeMask"),
      (e[(e.NodeFullWidthShift = 3)] = "NodeFullWidthShift"),
      (e[(e.IsVariableWidthKeyword = 1 << 31)] = "IsVariableWidthKeyword");
  })(e.SyntaxConstants || (e.SyntaxConstants = {}));
  e.SyntaxConstants;
})(TypeScript || (TypeScript = {}));
var FormattingOptions = (function () {
    function e(e, t, n, r) {
      (this.useTabs = e),
        (this.spacesPerTab = t),
        (this.indentSpaces = n),
        (this.newLineCharacter = r);
    }
    return (e.defaultOptions = new e(!1, 4, 4, "\r\n")), e;
  })(),
  TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t, n) {
      return r(e, t, n) + e.width();
    }
    function r(e, t, n) {
      for (
        var r = t.firstTokenInLineContainingToken(e), i = [], a = e;
        a !== r;

      )
        (a = t.previousToken(a)),
          a === r
            ? (i.push(a.trailingTrivia().fullText()), i.push(a.text()))
            : i.push(a.fullText());
      return o(r, i), s(i, n);
    }
    function i(e, t, n) {
      var r = t.firstTokenInLineContainingToken(e),
        i = [];
      return o(r, i), s(i, n);
    }
    function o(t, n) {
      for (var r = t.leadingTrivia(), i = r.count() - 1; i >= 0; i--) {
        var o = r.syntaxTriviaAt(i);
        if (5 === o.kind()) break;
        if (6 === o.kind()) {
          var s = e.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(o);
          if ((n.push(e.ArrayUtilities.last(s)), s.length > 0)) break;
        }
        n.push(o.fullText());
      }
    }
    function s(e, t) {
      for (var n = 0, r = e.length - 1; r >= 0; r--) {
        var i = e[r];
        n = l(i, i.length, n, t);
      }
      return n;
    }
    function a(e, t, n) {
      return l(e, t, 0, n);
    }
    function l(e, t, n, r) {
      for (var i = n, o = r.spacesPerTab, s = 0; t > s; s++) {
        var a = e.charCodeAt(s);
        9 === a ? (i += o - (i % o)) : i++;
      }
      return i;
    }
    function c(t, n) {
      var r = 0,
        i = e.MathPrototype.max(0, t);
      return (
        n.useTabs &&
          ((r = Math.floor(t / n.spacesPerTab)), (i -= r * n.spacesPerTab)),
        e.StringUtilities.repeat("	", r) + e.StringUtilities.repeat(" ", i)
      );
    }
    function u(t, n) {
      return e.Syntax.whitespace(this.indentationString(t, n));
    }
    function p(t) {
      for (var n = 0; n < t.length; n++) {
        var r = t.charCodeAt(n);
        if (!e.CharacterInfo.isWhitespace(r)) return n;
      }
      return t.length;
    }
    (t.columnForEndOfToken = n),
      (t.columnForStartOfToken = r),
      (t.columnForStartOfFirstTokenInLineContainingToken = i),
      (t.columnForPositionInString = a),
      (t.indentationString = c),
      (t.indentationTrivia = u),
      (t.firstNonWhitespacePosition = p);
  })(e.Indentation || (e.Indentation = {}));
  e.Indentation;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.EcmaScript3 = 0)] = "EcmaScript3"),
      (e[(e.EcmaScript5 = 1)] = "EcmaScript5");
  })(e.LanguageVersion || (e.LanguageVersion = {}));
  e.LanguageVersion;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e(e, t) {
      (this._languageVersion = e), (this._allowAutomaticSemicolonInsertion = t);
    }
    return (
      (e.prototype.toJSON = function () {
        return {
          allowAutomaticSemicolonInsertion: this
            ._allowAutomaticSemicolonInsertion,
        };
      }),
      (e.prototype.languageVersion = function () {
        return this._languageVersion;
      }),
      (e.prototype.allowAutomaticSemicolonInsertion = function () {
        return this._allowAutomaticSemicolonInsertion;
      }),
      e
    );
  })();
  e.ParseOptions = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e, t, n) {
      (this._parent = e), (this._element = t), (this._fullStart = n);
    }
    return (
      (t.create = function (t, n, a) {
        if (null === n) return null;
        if (n.isNode()) return new r(t, n, a);
        if (n.isToken()) return new i(t, n, a);
        if (n.isList()) return new o(t, n, a);
        if (n.isSeparatedList()) return new s(t, n, a);
        throw e.Errors.invalidOperation();
      }),
      (t.prototype.parent = function () {
        return this._parent;
      }),
      (t.prototype.parentElement = function () {
        return this._parent && this._parent._element;
      }),
      (t.prototype.element = function () {
        return this._element;
      }),
      (t.prototype.kind = function () {
        return this.element().kind();
      }),
      (t.prototype.childIndex = function (t) {
        return e.Syntax.childIndex(this.element(), t);
      }),
      (t.prototype.childCount = function () {
        return this.element().childCount();
      }),
      (t.prototype.childAt = function (n) {
        var r = e.Syntax.childOffsetAt(this.element(), n);
        return t.create(this, this.element().childAt(n), this.fullStart() + r);
      }),
      (t.prototype.childStart = function (t) {
        var n = e.Syntax.childOffset(this.element(), t);
        return this.fullStart() + n + t.leadingTriviaWidth();
      }),
      (t.prototype.childEnd = function (t) {
        var n = e.Syntax.childOffset(this.element(), t);
        return this.fullStart() + n + t.leadingTriviaWidth() + t.width();
      }),
      (t.prototype.childStartAt = function (t) {
        var n = e.Syntax.childOffsetAt(this.element(), t),
          r = this.element().childAt(t);
        return this.fullStart() + n + r.leadingTriviaWidth();
      }),
      (t.prototype.childEndAt = function (t) {
        var n = e.Syntax.childOffsetAt(this.element(), t),
          r = this.element().childAt(t);
        return this.fullStart() + n + r.leadingTriviaWidth() + r.width();
      }),
      (t.prototype.getPositionedChild = function (n) {
        var r = e.Syntax.childOffset(this.element(), n);
        return t.create(this, n, this.fullStart() + r);
      }),
      (t.prototype.fullStart = function () {
        return this._fullStart;
      }),
      (t.prototype.fullEnd = function () {
        return this.fullStart() + this.element().fullWidth();
      }),
      (t.prototype.fullWidth = function () {
        return this.element().fullWidth();
      }),
      (t.prototype.start = function () {
        return this.fullStart() + this.element().leadingTriviaWidth();
      }),
      (t.prototype.end = function () {
        return (
          this.fullStart() +
          this.element().leadingTriviaWidth() +
          this.element().width()
        );
      }),
      (t.prototype.root = function () {
        for (var e = this; null !== e.parent(); ) e = e.parent();
        return e;
      }),
      (t.prototype.containingNode = function () {
        for (var e = this.parent(); null !== e && !e.element().isNode(); )
          e = e.parent();
        return e;
      }),
      t
    );
  })();
  e.PositionedElement = t;
  var n = (function (e) {
    function t(t, n, r) {
      e.call(this, t, n, r);
    }
    return (
      __extends(t, e),
      (t.prototype.nodeOrToken = function () {
        return this.element();
      }),
      t
    );
  })(t);
  e.PositionedNodeOrToken = n;
  var r = (function (e) {
    function t(t, n, r) {
      e.call(this, t, n, r);
    }
    return (
      __extends(t, e),
      (t.prototype.node = function () {
        return this.element();
      }),
      t
    );
  })(n);
  e.PositionedNode = r;
  var i = (function (e) {
    function t(t, n, r) {
      e.call(this, t, n, r);
    }
    return (
      __extends(t, e),
      (t.prototype.token = function () {
        return this.element();
      }),
      (t.prototype.previousToken = function (e) {
        "undefined" == typeof e && (e = !1);
        var t = this.token().leadingTrivia();
        if (e && t && t.hasSkippedToken())
          for (var n = this.start(), r = t.count() - 1; r >= 0; r--) {
            var i = t.syntaxTriviaAt(r);
            if (i.isSkippedToken())
              return new a(this, i.skippedToken(), n - i.fullWidth());
            n -= i.fullWidth();
          }
        var o = this.fullStart();
        return 0 === o
          ? null
          : this.root()
              .node()
              .findToken(o - 1, e);
      }),
      (t.prototype.nextToken = function (e) {
        if (
          ("undefined" == typeof e && (e = !1), 10 === this.token().tokenKind)
        )
          return null;
        var t = this.token().trailingTrivia();
        if (e && t && t.hasSkippedToken())
          for (var n = this.end(), r = 0, i = t.count(); i > r; r++) {
            var o = t.syntaxTriviaAt(r);
            if (o.isSkippedToken()) return new a(this, o.skippedToken(), n);
            n += o.fullWidth();
          }
        return this.root().node().findToken(this.fullEnd(), e);
      }),
      t
    );
  })(n);
  e.PositionedToken = i;
  var o = (function (e) {
    function t(t, n, r) {
      e.call(this, t, n, r);
    }
    return (
      __extends(t, e),
      (t.prototype.list = function () {
        return this.element();
      }),
      t
    );
  })(t);
  e.PositionedList = o;
  var s = (function (e) {
    function t(t, n, r) {
      e.call(this, t, n, r);
    }
    return (
      __extends(t, e),
      (t.prototype.list = function () {
        return this.element();
      }),
      t
    );
  })(t);
  e.PositionedSeparatedList = s;
  var a = (function (t) {
    function n(e, n, r) {
      t.call(this, e.parent(), n, r), (this._parentToken = e);
    }
    return (
      __extends(n, t),
      (n.prototype.parentToken = function () {
        return this._parentToken;
      }),
      (n.prototype.previousToken = function (t) {
        "undefined" == typeof t && (t = !1);
        var n = this.fullStart();
        if (t) {
          var r;
          if (n >= this.parentToken().end())
            return (
              (r = e.Syntax.findSkippedTokenInTrailingTriviaList(
                this.parentToken(),
                n - 1
              )),
              r ? r : this.parentToken()
            );
          if (
            (r = e.Syntax.findSkippedTokenInLeadingTriviaList(
              this.parentToken(),
              n - 1
            ))
          )
            return r;
        }
        var n = this.parentToken().fullStart();
        return 0 === n
          ? null
          : this.root()
              .node()
              .findToken(n - 1, t);
      }),
      (n.prototype.nextToken = function (t) {
        if (
          ("undefined" == typeof t && (t = !1), 10 === this.token().tokenKind)
        )
          return null;
        if (t) {
          var n,
            r = this.end();
          if (r <= this.parentToken().start())
            return (
              (n = e.Syntax.findSkippedTokenInLeadingTriviaList(
                this.parentToken(),
                r
              )),
              n ? n : this.parentToken()
            );
          if (
            (n = e.Syntax.findSkippedTokenInTrailingTriviaList(
              this.parentToken(),
              r
            ))
          )
            return n;
        }
        return this.root().node().findToken(this.parentToken().fullEnd(), t);
      }),
      n
    );
  })(i);
  e.PositionedSkippedToken = a;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.None = 0)] = "None"),
      (e[(e.List = 1)] = "List"),
      (e[(e.SeparatedList = 2)] = "SeparatedList"),
      (e[(e.TriviaList = 3)] = "TriviaList"),
      (e[(e.WhitespaceTrivia = 4)] = "WhitespaceTrivia"),
      (e[(e.NewLineTrivia = 5)] = "NewLineTrivia"),
      (e[(e.MultiLineCommentTrivia = 6)] = "MultiLineCommentTrivia"),
      (e[(e.SingleLineCommentTrivia = 7)] = "SingleLineCommentTrivia"),
      (e[(e.SkippedTokenTrivia = 8)] = "SkippedTokenTrivia"),
      (e[(e.ErrorToken = 9)] = "ErrorToken"),
      (e[(e.EndOfFileToken = 10)] = "EndOfFileToken"),
      (e[(e.IdentifierName = 11)] = "IdentifierName"),
      (e[(e.RegularExpressionLiteral = 12)] = "RegularExpressionLiteral"),
      (e[(e.NumericLiteral = 13)] = "NumericLiteral"),
      (e[(e.StringLiteral = 14)] = "StringLiteral"),
      (e[(e.BreakKeyword = 15)] = "BreakKeyword"),
      (e[(e.CaseKeyword = 16)] = "CaseKeyword"),
      (e[(e.CatchKeyword = 17)] = "CatchKeyword"),
      (e[(e.ContinueKeyword = 18)] = "ContinueKeyword"),
      (e[(e.DebuggerKeyword = 19)] = "DebuggerKeyword"),
      (e[(e.DefaultKeyword = 20)] = "DefaultKeyword"),
      (e[(e.DeleteKeyword = 21)] = "DeleteKeyword"),
      (e[(e.DoKeyword = 22)] = "DoKeyword"),
      (e[(e.ElseKeyword = 23)] = "ElseKeyword"),
      (e[(e.FalseKeyword = 24)] = "FalseKeyword"),
      (e[(e.FinallyKeyword = 25)] = "FinallyKeyword"),
      (e[(e.ForKeyword = 26)] = "ForKeyword"),
      (e[(e.FunctionKeyword = 27)] = "FunctionKeyword"),
      (e[(e.IfKeyword = 28)] = "IfKeyword"),
      (e[(e.InKeyword = 29)] = "InKeyword"),
      (e[(e.InstanceOfKeyword = 30)] = "InstanceOfKeyword"),
      (e[(e.NewKeyword = 31)] = "NewKeyword"),
      (e[(e.NullKeyword = 32)] = "NullKeyword"),
      (e[(e.ReturnKeyword = 33)] = "ReturnKeyword"),
      (e[(e.SwitchKeyword = 34)] = "SwitchKeyword"),
      (e[(e.ThisKeyword = 35)] = "ThisKeyword"),
      (e[(e.ThrowKeyword = 36)] = "ThrowKeyword"),
      (e[(e.TrueKeyword = 37)] = "TrueKeyword"),
      (e[(e.TryKeyword = 38)] = "TryKeyword"),
      (e[(e.TypeOfKeyword = 39)] = "TypeOfKeyword"),
      (e[(e.VarKeyword = 40)] = "VarKeyword"),
      (e[(e.VoidKeyword = 41)] = "VoidKeyword"),
      (e[(e.WhileKeyword = 42)] = "WhileKeyword"),
      (e[(e.WithKeyword = 43)] = "WithKeyword"),
      (e[(e.ClassKeyword = 44)] = "ClassKeyword"),
      (e[(e.ConstKeyword = 45)] = "ConstKeyword"),
      (e[(e.EnumKeyword = 46)] = "EnumKeyword"),
      (e[(e.ExportKeyword = 47)] = "ExportKeyword"),
      (e[(e.ExtendsKeyword = 48)] = "ExtendsKeyword"),
      (e[(e.ImportKeyword = 49)] = "ImportKeyword"),
      (e[(e.SuperKeyword = 50)] = "SuperKeyword"),
      (e[(e.ImplementsKeyword = 51)] = "ImplementsKeyword"),
      (e[(e.InterfaceKeyword = 52)] = "InterfaceKeyword"),
      (e[(e.LetKeyword = 53)] = "LetKeyword"),
      (e[(e.PackageKeyword = 54)] = "PackageKeyword"),
      (e[(e.PrivateKeyword = 55)] = "PrivateKeyword"),
      (e[(e.ProtectedKeyword = 56)] = "ProtectedKeyword"),
      (e[(e.PublicKeyword = 57)] = "PublicKeyword"),
      (e[(e.StaticKeyword = 58)] = "StaticKeyword"),
      (e[(e.YieldKeyword = 59)] = "YieldKeyword"),
      (e[(e.AnyKeyword = 60)] = "AnyKeyword"),
      (e[(e.BooleanKeyword = 61)] = "BooleanKeyword"),
      (e[(e.ConstructorKeyword = 62)] = "ConstructorKeyword"),
      (e[(e.DeclareKeyword = 63)] = "DeclareKeyword"),
      (e[(e.GetKeyword = 64)] = "GetKeyword"),
      (e[(e.ModuleKeyword = 65)] = "ModuleKeyword"),
      (e[(e.RequireKeyword = 66)] = "RequireKeyword"),
      (e[(e.NumberKeyword = 67)] = "NumberKeyword"),
      (e[(e.SetKeyword = 68)] = "SetKeyword"),
      (e[(e.StringKeyword = 69)] = "StringKeyword"),
      (e[(e.OpenBraceToken = 70)] = "OpenBraceToken"),
      (e[(e.CloseBraceToken = 71)] = "CloseBraceToken"),
      (e[(e.OpenParenToken = 72)] = "OpenParenToken"),
      (e[(e.CloseParenToken = 73)] = "CloseParenToken"),
      (e[(e.OpenBracketToken = 74)] = "OpenBracketToken"),
      (e[(e.CloseBracketToken = 75)] = "CloseBracketToken"),
      (e[(e.DotToken = 76)] = "DotToken"),
      (e[(e.DotDotDotToken = 77)] = "DotDotDotToken"),
      (e[(e.SemicolonToken = 78)] = "SemicolonToken"),
      (e[(e.CommaToken = 79)] = "CommaToken"),
      (e[(e.LessThanToken = 80)] = "LessThanToken"),
      (e[(e.GreaterThanToken = 81)] = "GreaterThanToken"),
      (e[(e.LessThanEqualsToken = 82)] = "LessThanEqualsToken"),
      (e[(e.GreaterThanEqualsToken = 83)] = "GreaterThanEqualsToken"),
      (e[(e.EqualsEqualsToken = 84)] = "EqualsEqualsToken"),
      (e[(e.EqualsGreaterThanToken = 85)] = "EqualsGreaterThanToken"),
      (e[(e.ExclamationEqualsToken = 86)] = "ExclamationEqualsToken"),
      (e[(e.EqualsEqualsEqualsToken = 87)] = "EqualsEqualsEqualsToken"),
      (e[(e.ExclamationEqualsEqualsToken = 88)] =
        "ExclamationEqualsEqualsToken"),
      (e[(e.PlusToken = 89)] = "PlusToken"),
      (e[(e.MinusToken = 90)] = "MinusToken"),
      (e[(e.AsteriskToken = 91)] = "AsteriskToken"),
      (e[(e.PercentToken = 92)] = "PercentToken"),
      (e[(e.PlusPlusToken = 93)] = "PlusPlusToken"),
      (e[(e.MinusMinusToken = 94)] = "MinusMinusToken"),
      (e[(e.LessThanLessThanToken = 95)] = "LessThanLessThanToken"),
      (e[(e.GreaterThanGreaterThanToken = 96)] = "GreaterThanGreaterThanToken"),
      (e[(e.GreaterThanGreaterThanGreaterThanToken = 97)] =
        "GreaterThanGreaterThanGreaterThanToken"),
      (e[(e.AmpersandToken = 98)] = "AmpersandToken"),
      (e[(e.BarToken = 99)] = "BarToken"),
      (e[(e.CaretToken = 100)] = "CaretToken"),
      (e[(e.ExclamationToken = 101)] = "ExclamationToken"),
      (e[(e.TildeToken = 102)] = "TildeToken"),
      (e[(e.AmpersandAmpersandToken = 103)] = "AmpersandAmpersandToken"),
      (e[(e.BarBarToken = 104)] = "BarBarToken"),
      (e[(e.QuestionToken = 105)] = "QuestionToken"),
      (e[(e.ColonToken = 106)] = "ColonToken"),
      (e[(e.EqualsToken = 107)] = "EqualsToken"),
      (e[(e.PlusEqualsToken = 108)] = "PlusEqualsToken"),
      (e[(e.MinusEqualsToken = 109)] = "MinusEqualsToken"),
      (e[(e.AsteriskEqualsToken = 110)] = "AsteriskEqualsToken"),
      (e[(e.PercentEqualsToken = 111)] = "PercentEqualsToken"),
      (e[(e.LessThanLessThanEqualsToken = 112)] =
        "LessThanLessThanEqualsToken"),
      (e[(e.GreaterThanGreaterThanEqualsToken = 113)] =
        "GreaterThanGreaterThanEqualsToken"),
      (e[(e.GreaterThanGreaterThanGreaterThanEqualsToken = 114)] =
        "GreaterThanGreaterThanGreaterThanEqualsToken"),
      (e[(e.AmpersandEqualsToken = 115)] = "AmpersandEqualsToken"),
      (e[(e.BarEqualsToken = 116)] = "BarEqualsToken"),
      (e[(e.CaretEqualsToken = 117)] = "CaretEqualsToken"),
      (e[(e.SlashToken = 118)] = "SlashToken"),
      (e[(e.SlashEqualsToken = 119)] = "SlashEqualsToken"),
      (e[(e.SourceUnit = 120)] = "SourceUnit"),
      (e[(e.QualifiedName = 121)] = "QualifiedName"),
      (e[(e.ObjectType = 122)] = "ObjectType"),
      (e[(e.FunctionType = 123)] = "FunctionType"),
      (e[(e.ArrayType = 124)] = "ArrayType"),
      (e[(e.ConstructorType = 125)] = "ConstructorType"),
      (e[(e.GenericType = 126)] = "GenericType"),
      (e[(e.TypeQuery = 127)] = "TypeQuery"),
      (e[(e.InterfaceDeclaration = 128)] = "InterfaceDeclaration"),
      (e[(e.FunctionDeclaration = 129)] = "FunctionDeclaration"),
      (e[(e.ModuleDeclaration = 130)] = "ModuleDeclaration"),
      (e[(e.ClassDeclaration = 131)] = "ClassDeclaration"),
      (e[(e.EnumDeclaration = 132)] = "EnumDeclaration"),
      (e[(e.ImportDeclaration = 133)] = "ImportDeclaration"),
      (e[(e.ExportAssignment = 134)] = "ExportAssignment"),
      (e[(e.MemberFunctionDeclaration = 135)] = "MemberFunctionDeclaration"),
      (e[(e.MemberVariableDeclaration = 136)] = "MemberVariableDeclaration"),
      (e[(e.ConstructorDeclaration = 137)] = "ConstructorDeclaration"),
      (e[(e.IndexMemberDeclaration = 138)] = "IndexMemberDeclaration"),
      (e[(e.GetAccessor = 139)] = "GetAccessor"),
      (e[(e.SetAccessor = 140)] = "SetAccessor"),
      (e[(e.PropertySignature = 141)] = "PropertySignature"),
      (e[(e.CallSignature = 142)] = "CallSignature"),
      (e[(e.ConstructSignature = 143)] = "ConstructSignature"),
      (e[(e.IndexSignature = 144)] = "IndexSignature"),
      (e[(e.MethodSignature = 145)] = "MethodSignature"),
      (e[(e.Block = 146)] = "Block"),
      (e[(e.IfStatement = 147)] = "IfStatement"),
      (e[(e.VariableStatement = 148)] = "VariableStatement"),
      (e[(e.ExpressionStatement = 149)] = "ExpressionStatement"),
      (e[(e.ReturnStatement = 150)] = "ReturnStatement"),
      (e[(e.SwitchStatement = 151)] = "SwitchStatement"),
      (e[(e.BreakStatement = 152)] = "BreakStatement"),
      (e[(e.ContinueStatement = 153)] = "ContinueStatement"),
      (e[(e.ForStatement = 154)] = "ForStatement"),
      (e[(e.ForInStatement = 155)] = "ForInStatement"),
      (e[(e.EmptyStatement = 156)] = "EmptyStatement"),
      (e[(e.ThrowStatement = 157)] = "ThrowStatement"),
      (e[(e.WhileStatement = 158)] = "WhileStatement"),
      (e[(e.TryStatement = 159)] = "TryStatement"),
      (e[(e.LabeledStatement = 160)] = "LabeledStatement"),
      (e[(e.DoStatement = 161)] = "DoStatement"),
      (e[(e.DebuggerStatement = 162)] = "DebuggerStatement"),
      (e[(e.WithStatement = 163)] = "WithStatement"),
      (e[(e.PlusExpression = 164)] = "PlusExpression"),
      (e[(e.NegateExpression = 165)] = "NegateExpression"),
      (e[(e.BitwiseNotExpression = 166)] = "BitwiseNotExpression"),
      (e[(e.LogicalNotExpression = 167)] = "LogicalNotExpression"),
      (e[(e.PreIncrementExpression = 168)] = "PreIncrementExpression"),
      (e[(e.PreDecrementExpression = 169)] = "PreDecrementExpression"),
      (e[(e.DeleteExpression = 170)] = "DeleteExpression"),
      (e[(e.TypeOfExpression = 171)] = "TypeOfExpression"),
      (e[(e.VoidExpression = 172)] = "VoidExpression"),
      (e[(e.CommaExpression = 173)] = "CommaExpression"),
      (e[(e.AssignmentExpression = 174)] = "AssignmentExpression"),
      (e[(e.AddAssignmentExpression = 175)] = "AddAssignmentExpression"),
      (e[(e.SubtractAssignmentExpression = 176)] =
        "SubtractAssignmentExpression"),
      (e[(e.MultiplyAssignmentExpression = 177)] =
        "MultiplyAssignmentExpression"),
      (e[(e.DivideAssignmentExpression = 178)] = "DivideAssignmentExpression"),
      (e[(e.ModuloAssignmentExpression = 179)] = "ModuloAssignmentExpression"),
      (e[(e.AndAssignmentExpression = 180)] = "AndAssignmentExpression"),
      (e[(e.ExclusiveOrAssignmentExpression = 181)] =
        "ExclusiveOrAssignmentExpression"),
      (e[(e.OrAssignmentExpression = 182)] = "OrAssignmentExpression"),
      (e[(e.LeftShiftAssignmentExpression = 183)] =
        "LeftShiftAssignmentExpression"),
      (e[(e.SignedRightShiftAssignmentExpression = 184)] =
        "SignedRightShiftAssignmentExpression"),
      (e[(e.UnsignedRightShiftAssignmentExpression = 185)] =
        "UnsignedRightShiftAssignmentExpression"),
      (e[(e.ConditionalExpression = 186)] = "ConditionalExpression"),
      (e[(e.LogicalOrExpression = 187)] = "LogicalOrExpression"),
      (e[(e.LogicalAndExpression = 188)] = "LogicalAndExpression"),
      (e[(e.BitwiseOrExpression = 189)] = "BitwiseOrExpression"),
      (e[(e.BitwiseExclusiveOrExpression = 190)] =
        "BitwiseExclusiveOrExpression"),
      (e[(e.BitwiseAndExpression = 191)] = "BitwiseAndExpression"),
      (e[(e.EqualsWithTypeConversionExpression = 192)] =
        "EqualsWithTypeConversionExpression"),
      (e[(e.NotEqualsWithTypeConversionExpression = 193)] =
        "NotEqualsWithTypeConversionExpression"),
      (e[(e.EqualsExpression = 194)] = "EqualsExpression"),
      (e[(e.NotEqualsExpression = 195)] = "NotEqualsExpression"),
      (e[(e.LessThanExpression = 196)] = "LessThanExpression"),
      (e[(e.GreaterThanExpression = 197)] = "GreaterThanExpression"),
      (e[(e.LessThanOrEqualExpression = 198)] = "LessThanOrEqualExpression"),
      (e[(e.GreaterThanOrEqualExpression = 199)] =
        "GreaterThanOrEqualExpression"),
      (e[(e.InstanceOfExpression = 200)] = "InstanceOfExpression"),
      (e[(e.InExpression = 201)] = "InExpression"),
      (e[(e.LeftShiftExpression = 202)] = "LeftShiftExpression"),
      (e[(e.SignedRightShiftExpression = 203)] = "SignedRightShiftExpression"),
      (e[(e.UnsignedRightShiftExpression = 204)] =
        "UnsignedRightShiftExpression"),
      (e[(e.MultiplyExpression = 205)] = "MultiplyExpression"),
      (e[(e.DivideExpression = 206)] = "DivideExpression"),
      (e[(e.ModuloExpression = 207)] = "ModuloExpression"),
      (e[(e.AddExpression = 208)] = "AddExpression"),
      (e[(e.SubtractExpression = 209)] = "SubtractExpression"),
      (e[(e.PostIncrementExpression = 210)] = "PostIncrementExpression"),
      (e[(e.PostDecrementExpression = 211)] = "PostDecrementExpression"),
      (e[(e.MemberAccessExpression = 212)] = "MemberAccessExpression"),
      (e[(e.InvocationExpression = 213)] = "InvocationExpression"),
      (e[(e.ArrayLiteralExpression = 214)] = "ArrayLiteralExpression"),
      (e[(e.ObjectLiteralExpression = 215)] = "ObjectLiteralExpression"),
      (e[(e.ObjectCreationExpression = 216)] = "ObjectCreationExpression"),
      (e[(e.ParenthesizedExpression = 217)] = "ParenthesizedExpression"),
      (e[(e.ParenthesizedArrowFunctionExpression = 218)] =
        "ParenthesizedArrowFunctionExpression"),
      (e[(e.SimpleArrowFunctionExpression = 219)] =
        "SimpleArrowFunctionExpression"),
      (e[(e.CastExpression = 220)] = "CastExpression"),
      (e[(e.ElementAccessExpression = 221)] = "ElementAccessExpression"),
      (e[(e.FunctionExpression = 222)] = "FunctionExpression"),
      (e[(e.OmittedExpression = 223)] = "OmittedExpression"),
      (e[(e.VariableDeclaration = 224)] = "VariableDeclaration"),
      (e[(e.VariableDeclarator = 225)] = "VariableDeclarator"),
      (e[(e.ArgumentList = 226)] = "ArgumentList"),
      (e[(e.ParameterList = 227)] = "ParameterList"),
      (e[(e.TypeArgumentList = 228)] = "TypeArgumentList"),
      (e[(e.TypeParameterList = 229)] = "TypeParameterList"),
      (e[(e.ExtendsHeritageClause = 230)] = "ExtendsHeritageClause"),
      (e[(e.ImplementsHeritageClause = 231)] = "ImplementsHeritageClause"),
      (e[(e.EqualsValueClause = 232)] = "EqualsValueClause"),
      (e[(e.CaseSwitchClause = 233)] = "CaseSwitchClause"),
      (e[(e.DefaultSwitchClause = 234)] = "DefaultSwitchClause"),
      (e[(e.ElseClause = 235)] = "ElseClause"),
      (e[(e.CatchClause = 236)] = "CatchClause"),
      (e[(e.FinallyClause = 237)] = "FinallyClause"),
      (e[(e.TypeParameter = 238)] = "TypeParameter"),
      (e[(e.Constraint = 239)] = "Constraint"),
      (e[(e.SimplePropertyAssignment = 240)] = "SimplePropertyAssignment"),
      (e[(e.FunctionPropertyAssignment = 241)] = "FunctionPropertyAssignment"),
      (e[(e.Parameter = 242)] = "Parameter"),
      (e[(e.EnumElement = 243)] = "EnumElement"),
      (e[(e.TypeAnnotation = 244)] = "TypeAnnotation"),
      (e[(e.ExternalModuleReference = 245)] = "ExternalModuleReference"),
      (e[(e.ModuleNameModuleReference = 246)] = "ModuleNameModuleReference"),
      (e[(e.Last = e.ModuleNameModuleReference)] = "Last"),
      (e[(e.FirstStandardKeyword = e.BreakKeyword)] = "FirstStandardKeyword"),
      (e[(e.LastStandardKeyword = e.WithKeyword)] = "LastStandardKeyword"),
      (e[(e.FirstFutureReservedKeyword = e.ClassKeyword)] =
        "FirstFutureReservedKeyword"),
      (e[(e.LastFutureReservedKeyword = e.SuperKeyword)] =
        "LastFutureReservedKeyword"),
      (e[(e.FirstFutureReservedStrictKeyword = e.ImplementsKeyword)] =
        "FirstFutureReservedStrictKeyword"),
      (e[(e.LastFutureReservedStrictKeyword = e.YieldKeyword)] =
        "LastFutureReservedStrictKeyword"),
      (e[(e.FirstTypeScriptKeyword = e.AnyKeyword)] = "FirstTypeScriptKeyword"),
      (e[(e.LastTypeScriptKeyword = e.StringKeyword)] =
        "LastTypeScriptKeyword"),
      (e[(e.FirstKeyword = e.FirstStandardKeyword)] = "FirstKeyword"),
      (e[(e.LastKeyword = e.LastTypeScriptKeyword)] = "LastKeyword"),
      (e[(e.FirstToken = e.ErrorToken)] = "FirstToken"),
      (e[(e.LastToken = e.SlashEqualsToken)] = "LastToken"),
      (e[(e.FirstPunctuation = e.OpenBraceToken)] = "FirstPunctuation"),
      (e[(e.LastPunctuation = e.SlashEqualsToken)] = "LastPunctuation"),
      (e[(e.FirstFixedWidth = e.FirstKeyword)] = "FirstFixedWidth"),
      (e[(e.LastFixedWidth = e.LastPunctuation)] = "LastFixedWidth"),
      (e[(e.FirstTrivia = e.WhitespaceTrivia)] = "FirstTrivia"),
      (e[(e.LastTrivia = e.SkippedTokenTrivia)] = "LastTrivia");
  })(e.SyntaxKind || (e.SyntaxKind = {}));
  e.SyntaxKind;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    function t(e) {
      return v.hasOwnProperty(e) ? v[e] : 0;
    }
    function n(e) {
      var t = y[e];
      return void 0 !== t ? t : null;
    }
    function r(e) {
      return e >= 9 && 119 >= e;
    }
    function i(e) {
      return e >= 15 && 69 >= e;
    }
    function o(e) {
      return e >= 15 && 43 >= e;
    }
    function s(e) {
      return e >= 44 && 50 >= e;
    }
    function a(e) {
      return e >= 51 && 59 >= e;
    }
    function l(e) {
      return e >= 70 && 119 >= e;
    }
    function c(e) {
      return 0 !== p(e);
    }
    function u(e) {
      return 0 !== d(e);
    }
    function p(e) {
      switch (e) {
        case 89:
          return 164;
        case 90:
          return 165;
        case 102:
          return 166;
        case 101:
          return 167;
        case 93:
          return 168;
        case 94:
          return 169;
        default:
          return 0;
      }
    }
    function h(e) {
      switch (e) {
        case 93:
          return 210;
        case 94:
          return 211;
        default:
          return 0;
      }
    }
    function d(e) {
      switch (e) {
        case 91:
          return 205;
        case 118:
          return 206;
        case 92:
          return 207;
        case 89:
          return 208;
        case 90:
          return 209;
        case 95:
          return 202;
        case 96:
          return 203;
        case 97:
          return 204;
        case 80:
          return 196;
        case 81:
          return 197;
        case 82:
          return 198;
        case 83:
          return 199;
        case 30:
          return 200;
        case 29:
          return 201;
        case 84:
          return 192;
        case 86:
          return 193;
        case 87:
          return 194;
        case 88:
          return 195;
        case 98:
          return 191;
        case 100:
          return 190;
        case 99:
          return 189;
        case 103:
          return 188;
        case 104:
          return 187;
        case 116:
          return 182;
        case 115:
          return 180;
        case 117:
          return 181;
        case 112:
          return 183;
        case 113:
          return 184;
        case 114:
          return 185;
        case 108:
          return 175;
        case 109:
          return 176;
        case 110:
          return 177;
        case 119:
          return 178;
        case 111:
          return 179;
        case 107:
          return 174;
        case 79:
          return 173;
        default:
          return 0;
      }
    }
    function m(e) {
      switch (e) {
        case 205:
          return 91;
        case 206:
          return 118;
        case 207:
          return 92;
        case 208:
          return 89;
        case 209:
          return 90;
        case 202:
          return 95;
        case 203:
          return 96;
        case 204:
          return 97;
        case 196:
          return 80;
        case 197:
          return 81;
        case 198:
          return 82;
        case 199:
          return 83;
        case 200:
          return 30;
        case 201:
          return 29;
        case 192:
          return 84;
        case 193:
          return 86;
        case 194:
          return 87;
        case 195:
          return 88;
        case 191:
          return 98;
        case 190:
          return 100;
        case 189:
          return 99;
        case 188:
          return 103;
        case 187:
          return 104;
        case 182:
          return 116;
        case 180:
          return 115;
        case 181:
          return 117;
        case 183:
          return 112;
        case 184:
          return 113;
        case 185:
          return 114;
        case 175:
          return 108;
        case 176:
          return 109;
        case 177:
          return 110;
        case 178:
          return 119;
        case 179:
          return 111;
        case 174:
          return 107;
        case 173:
          return 79;
        default:
          return 0;
      }
    }
    function f(e) {
      switch (e) {
        case 118:
        case 119:
          return !0;
        default:
          return !1;
      }
    }
    function g(e) {
      switch (e) {
        case 118:
        case 119:
        case 12:
          return !0;
        default:
          return !1;
      }
    }
    var v = {
        any: 60,
        boolean: 61,
        break: 15,
        case: 16,
        catch: 17,
        class: 44,
        continue: 18,
        const: 45,
        constructor: 62,
        debugger: 19,
        declare: 63,
        default: 20,
        delete: 21,
        do: 22,
        else: 23,
        enum: 46,
        export: 47,
        extends: 48,
        false: 24,
        finally: 25,
        for: 26,
        function: 27,
        get: 64,
        if: 28,
        implements: 51,
        import: 49,
        in: 29,
        instanceof: 30,
        interface: 52,
        let: 53,
        module: 65,
        new: 31,
        null: 32,
        number: 67,
        package: 54,
        private: 55,
        protected: 56,
        public: 57,
        require: 66,
        return: 33,
        set: 68,
        static: 58,
        string: 69,
        super: 50,
        switch: 34,
        this: 35,
        throw: 36,
        true: 37,
        try: 38,
        typeof: 39,
        var: 40,
        void: 41,
        while: 42,
        with: 43,
        yield: 59,
        "{": 70,
        "}": 71,
        "(": 72,
        ")": 73,
        "[": 74,
        "]": 75,
        ".": 76,
        "...": 77,
        ";": 78,
        ",": 79,
        "<": 80,
        ">": 81,
        "<=": 82,
        ">=": 83,
        "==": 84,
        "=>": 85,
        "!=": 86,
        "===": 87,
        "!==": 88,
        "+": 89,
        "-": 90,
        "*": 91,
        "%": 92,
        "++": 93,
        "--": 94,
        "<<": 95,
        ">>": 96,
        ">>>": 97,
        "&": 98,
        "|": 99,
        "^": 100,
        "!": 101,
        "~": 102,
        "&&": 103,
        "||": 104,
        "?": 105,
        ":": 106,
        "=": 107,
        "+=": 108,
        "-=": 109,
        "*=": 110,
        "%=": 111,
        "<<=": 112,
        ">>=": 113,
        ">>>=": 114,
        "&=": 115,
        "|=": 116,
        "^=": 117,
        "/": 118,
        "/=": 119,
      },
      y = new Array();
    for (var b in v) v.hasOwnProperty(b) && (y[v[b]] = b);
    (y[62] = "constructor"),
      (e.getTokenKind = t),
      (e.getText = n),
      (e.isTokenKind = r),
      (e.isAnyKeyword = i),
      (e.isStandardKeyword = o),
      (e.isFutureReservedKeyword = s),
      (e.isFutureReservedStrictKeyword = a),
      (e.isAnyPunctuation = l),
      (e.isPrefixUnaryExpressionOperatorToken = c),
      (e.isBinaryExpressionOperatorToken = u),
      (e.getPrefixUnaryExpressionFromOperatorToken = p),
      (e.getPostfixUnaryExpressionFromOperatorToken = h),
      (e.getBinaryExpressionFromOperatorToken = d),
      (e.getOperatorTokenFromBinaryExpression = m),
      (e.isAnyDivideToken = f),
      (e.isAnyDivideOrRegularExpressionToken = g);
  })(e.SyntaxFacts || (e.SyntaxFacts = {}));
  e.SyntaxFacts;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  for (
    var t = e.ArrayUtilities.createArray(127, !1),
      n = e.ArrayUtilities.createArray(127, !1),
      r = e.ArrayUtilities.createArray(127, !1),
      i = e.ArrayUtilities.createArray(127, !1),
      o = 0;
    127 > o;
    o++
  )
    o >= 97 && 122 >= o
      ? ((n[o] = !0), (r[o] = !0))
      : (o >= 65 && 90 >= o) || 95 === o || 36 === o
      ? ((n[o] = !0), (r[o] = !0))
      : o >= 48 && 57 >= o && ((r[o] = !0), (i[o] = !0));
  i[46] = !0;
  for (var s = 15; 69 >= s; s++) {
    var a = e.SyntaxFacts.getText(s);
    t[a.charCodeAt(0)] = !0;
  }
  var l = (function () {
    function o(t, n, r, i) {
      "undefined" == typeof i && (i = e.ArrayUtilities.createArray(2048, 0)),
        (this.slidingWindow = new e.SlidingWindow(this, i, 0, n.length())),
        (this.fileName = t),
        (this.text = n),
        (this._languageVersion = r);
    }
    return (
      (o.prototype.languageVersion = function () {
        return this._languageVersion;
      }),
      (o.prototype.fetchMoreItems = function (t, n, r, i, o) {
        var s = this.text.length() - n,
          a = e.MathPrototype.min(s, o);
        return this.text.copyTo(n, r, i, a), a;
      }),
      (o.prototype.currentCharCode = function () {
        return this.slidingWindow.currentItem(null);
      }),
      (o.prototype.absoluteIndex = function () {
        return this.slidingWindow.absoluteIndex();
      }),
      (o.prototype.setAbsoluteIndex = function (e) {
        this.slidingWindow.setAbsoluteIndex(e);
      }),
      (o.prototype.scan = function (t, n) {
        var r = t.length,
          i = this.slidingWindow.absoluteIndex(),
          o = this.scanTriviaInfo(t, !1),
          s = this.slidingWindow.absoluteIndex(),
          a = this.scanSyntaxToken(t, n),
          l = this.slidingWindow.absoluteIndex(),
          c = this.scanTriviaInfo(t, !0),
          u = this.slidingWindow.absoluteIndex(),
          p = 0 !== (-2147483648 & a),
          h = 2147483647 & a,
          d = this.createToken(i, o, s, h, l, u, c, p);
        return r !== t.length ? e.Syntax.realizeToken(d) : d;
      }),
      (o.prototype.createToken = function (t, n, r, i, o, s, a, l) {
        if (!l && i >= 15) {
          if (0 === n) {
            if (0 === a) return new e.Syntax.FixedWidthTokenWithNoTrivia(i);
            var c = this.text.substr(t, s - t, !1);
            return new e.Syntax.FixedWidthTokenWithTrailingTrivia(c, i, a);
          }
          if (0 === a) {
            var c = this.text.substr(t, s - t, !1);
            return new e.Syntax.FixedWidthTokenWithLeadingTrivia(c, i, n);
          }
          var c = this.text.substr(t, s - t, !1);
          return new e.Syntax.FixedWidthTokenWithLeadingAndTrailingTrivia(
            c,
            i,
            n,
            a
          );
        }
        var c = this.text.substr(t, s - t, !1);
        return 0 === n
          ? 0 === a
            ? new e.Syntax.VariableWidthTokenWithNoTrivia(c, i)
            : new e.Syntax.VariableWidthTokenWithTrailingTrivia(c, i, a)
          : 0 === a
          ? new e.Syntax.VariableWidthTokenWithLeadingTrivia(c, i, n)
          : new e.Syntax.VariableWidthTokenWithLeadingAndTrailingTrivia(
              c,
              i,
              n,
              a
            );
      }),
      (o.scanTrivia = function (t, n, r, i) {
        var s = new o(null, t.subText(new e.TextSpan(n, r)), 1, o.triviaWindow);
        return s.scanTrivia(t, n, i);
      }),
      (o.prototype.scanTrivia = function (t, n, r) {
        for (var i = new Array(); ; ) {
          if (!this.slidingWindow.isAtEndOfSource()) {
            var o = this.currentCharCode();
            switch (o) {
              case 32:
              case 160:
              case 8192:
              case 8193:
              case 8194:
              case 8195:
              case 8196:
              case 8197:
              case 8198:
              case 8199:
              case 8200:
              case 8201:
              case 8202:
              case 8203:
              case 8239:
              case 12288:
              case 9:
              case 11:
              case 12:
              case 65279:
                i.push(this.scanWhitespaceTrivia(t, n));
                continue;
              case 47:
                var s = this.slidingWindow.peekItemN(1);
                if (47 === s) {
                  i.push(this.scanSingleLineCommentTrivia(t, n));
                  continue;
                }
                if (42 === s) {
                  i.push(this.scanMultiLineCommentTrivia(t, n));
                  continue;
                }
                throw e.Errors.invalidOperation();
              case 13:
              case 10:
              case 8233:
              case 8232:
                if ((i.push(this.scanLineTerminatorSequenceTrivia(o)), !r))
                  continue;
                break;
              default:
                throw e.Errors.invalidOperation();
            }
          }
          return e.Syntax.triviaList(i);
        }
      }),
      (o.prototype.scanTriviaInfo = function (e, t) {
        for (var n = 0, r = 0; ; ) {
          var i = this.currentCharCode();
          switch (i) {
            case 32:
            case 160:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8203:
            case 8239:
            case 12288:
            case 9:
            case 11:
            case 12:
            case 65279:
              this.slidingWindow.moveToNextItem(), n++;
              continue;
            case 47:
              var o = this.slidingWindow.peekItemN(1);
              if (47 === o) {
                (r |= 2), (n += this.scanSingleLineCommentTriviaLength());
                continue;
              }
              if (42 === o) {
                (r |= 2), (n += this.scanMultiLineCommentTriviaLength(e));
                continue;
              }
              break;
            case 13:
            case 10:
            case 8233:
            case 8232:
              if (
                ((r |= 1), (n += this.scanLineTerminatorSequenceLength(i)), !t)
              )
                continue;
          }
          return (n << 2) | r;
        }
      }),
      (o.prototype.isNewLineCharacter = function (e) {
        switch (e) {
          case 13:
          case 10:
          case 8233:
          case 8232:
            return !0;
          default:
            return !1;
        }
      }),
      (o.prototype.scanWhitespaceTrivia = function (t, n) {
        for (var r = this.absoluteIndex(), i = 0; ; ) {
          var o = this.currentCharCode();
          switch (o) {
            case 32:
            case 160:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8203:
            case 8239:
            case 12288:
            case 9:
            case 11:
            case 12:
            case 65279:
              this.slidingWindow.moveToNextItem(), i++;
              continue;
          }
          break;
        }
        return e.Syntax.deferredTrivia(4, t, n + r, i);
      }),
      (o.prototype.scanSingleLineCommentTrivia = function (t, n) {
        var r = this.slidingWindow.absoluteIndex(),
          i = this.scanSingleLineCommentTriviaLength();
        return e.Syntax.deferredTrivia(7, t, n + r, i);
      }),
      (o.prototype.scanSingleLineCommentTriviaLength = function () {
        this.slidingWindow.moveToNextItem(),
          this.slidingWindow.moveToNextItem();
        for (var e = 2; ; ) {
          if (
            this.slidingWindow.isAtEndOfSource() ||
            this.isNewLineCharacter(this.currentCharCode())
          )
            return e;
          this.slidingWindow.moveToNextItem(), e++;
        }
      }),
      (o.prototype.scanMultiLineCommentTrivia = function (t, n) {
        var r = this.absoluteIndex(),
          i = this.scanMultiLineCommentTriviaLength(null);
        return e.Syntax.deferredTrivia(6, t, n + r, i);
      }),
      (o.prototype.scanMultiLineCommentTriviaLength = function (t) {
        this.slidingWindow.moveToNextItem(),
          this.slidingWindow.moveToNextItem();
        for (var n = 2; ; ) {
          if (this.slidingWindow.isAtEndOfSource())
            return (
              null !== t &&
                t.push(
                  new e.Diagnostic(
                    this.fileName,
                    this.text.lineMap(),
                    this.slidingWindow.absoluteIndex(),
                    0,
                    e.DiagnosticCode.AsteriskSlash_expected,
                    null
                  )
                ),
              n
            );
          var r = this.currentCharCode();
          if (42 === r && 47 === this.slidingWindow.peekItemN(1))
            return (
              this.slidingWindow.moveToNextItem(),
              this.slidingWindow.moveToNextItem(),
              (n += 2)
            );
          this.slidingWindow.moveToNextItem(), n++;
        }
      }),
      (o.prototype.scanLineTerminatorSequenceTrivia = function (t) {
        var n = this.slidingWindow.getAndPinAbsoluteIndex(),
          r = this.scanLineTerminatorSequenceLength(t),
          i = this.substring(n, n + r, !1);
        return (
          this.slidingWindow.releaseAndUnpinAbsoluteIndex(n),
          e.Syntax.trivia(5, i)
        );
      }),
      (o.prototype.scanLineTerminatorSequenceLength = function (e) {
        return (
          this.slidingWindow.moveToNextItem(),
          13 === e && 10 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 2)
            : 1
        );
      }),
      (o.prototype.scanSyntaxToken = function (e, t) {
        if (this.slidingWindow.isAtEndOfSource()) return 10;
        var r = this.currentCharCode();
        switch (r) {
          case 34:
          case 39:
            return this.scanStringLiteral(e);
          case 47:
            return this.scanSlashToken(t);
          case 46:
            return this.scanDotToken(e);
          case 45:
            return this.scanMinusToken();
          case 33:
            return this.scanExclamationToken();
          case 61:
            return this.scanEqualsToken();
          case 124:
            return this.scanBarToken();
          case 42:
            return this.scanAsteriskToken();
          case 43:
            return this.scanPlusToken();
          case 37:
            return this.scanPercentToken();
          case 38:
            return this.scanAmpersandToken();
          case 94:
            return this.scanCaretToken();
          case 60:
            return this.scanLessThanToken();
          case 62:
            return this.advanceAndSetTokenKind(81);
          case 44:
            return this.advanceAndSetTokenKind(79);
          case 58:
            return this.advanceAndSetTokenKind(106);
          case 59:
            return this.advanceAndSetTokenKind(78);
          case 126:
            return this.advanceAndSetTokenKind(102);
          case 40:
            return this.advanceAndSetTokenKind(72);
          case 41:
            return this.advanceAndSetTokenKind(73);
          case 123:
            return this.advanceAndSetTokenKind(70);
          case 125:
            return this.advanceAndSetTokenKind(71);
          case 91:
            return this.advanceAndSetTokenKind(74);
          case 93:
            return this.advanceAndSetTokenKind(75);
          case 63:
            return this.advanceAndSetTokenKind(105);
        }
        if (i[r]) return this.scanNumericLiteral(e);
        if (n[r]) {
          var o = this.tryFastScanIdentifierOrKeyword(r);
          if (0 !== o) return o;
        }
        return this.isIdentifierStart(this.peekCharOrUnicodeEscape())
          ? this.slowScanIdentifierOrKeyword(e)
          : this.scanDefaultCharacter(r, e);
      }),
      (o.prototype.isIdentifierStart = function (t) {
        return n[t]
          ? !0
          : t > 127 && e.Unicode.isIdentifierStart(t, this._languageVersion);
      }),
      (o.prototype.isIdentifierPart = function (t) {
        return r[t]
          ? !0
          : t > 127 && e.Unicode.isIdentifierPart(t, this._languageVersion);
      }),
      (o.prototype.tryFastScanIdentifierOrKeyword = function (n) {
        for (
          var i = this.slidingWindow,
            o = i.window,
            s = i.currentRelativeItemIndex,
            a = i.windowCount,
            l = s,
            c = 0;
          a > l && ((c = o[l]), r[c]);

        )
          l++;
        if (l === a) return 0;
        if (92 === c || c > 127) return 0;
        var u,
          p = l - s;
        return (
          (u = t[n] ? e.ScannerUtilities.identifierKind(o, s, p) : 11),
          i.setAbsoluteIndex(i.absoluteIndex() + p),
          u
        );
      }),
      (o.prototype.slowScanIdentifierOrKeyword = function (t) {
        var n = this.slidingWindow.absoluteIndex(),
          r = !1;
        do {
          var i = this.scanCharOrUnicodeEscape(t);
          r = r || i;
        } while (this.isIdentifierPart(this.peekCharOrUnicodeEscape()));
        var o = this.slidingWindow.absoluteIndex() - n,
          s = this.text.substr(n, o, !1),
          a = e.Syntax.massageEscapes(s),
          l = e.SyntaxFacts.getTokenKind(a);
        return l >= 15 && 69 >= l ? (r ? -2147483648 | l : l) : 11;
      }),
      (o.prototype.scanNumericLiteral = function (e) {
        return (
          this.isHexNumericLiteral()
            ? this.scanHexNumericLiteral()
            : this.isOctalNumericLiteral()
            ? this.scanOctalNumericLiteral(e)
            : this.scanDecimalNumericLiteral(),
          13
        );
      }),
      (o.prototype.isOctalNumericLiteral = function () {
        return (
          48 === this.currentCharCode() &&
          e.CharacterInfo.isOctalDigit(this.slidingWindow.peekItemN(1))
        );
      }),
      (o.prototype.scanOctalNumericLiteral = function (t) {
        for (
          var n = this.absoluteIndex();
          e.CharacterInfo.isOctalDigit(this.currentCharCode());

        )
          this.slidingWindow.moveToNextItem();
        this.languageVersion() >= 1 &&
          t.push(
            new e.Diagnostic(
              this.fileName,
              this.text.lineMap(),
              n,
              this.absoluteIndex() - n,
              e.DiagnosticCode.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher,
              null
            )
          );
      }),
      (o.prototype.scanDecimalDigits = function () {
        for (; e.CharacterInfo.isDecimalDigit(this.currentCharCode()); )
          this.slidingWindow.moveToNextItem();
      }),
      (o.prototype.scanDecimalNumericLiteral = function () {
        this.scanDecimalDigits(),
          46 === this.currentCharCode() && this.slidingWindow.moveToNextItem(),
          this.scanDecimalDigits();
        var t = this.currentCharCode();
        if (101 === t || 69 === t) {
          var n = this.slidingWindow.peekItemN(1);
          if (e.CharacterInfo.isDecimalDigit(n))
            this.slidingWindow.moveToNextItem(), this.scanDecimalDigits();
          else if (45 === n || 43 === n) {
            var r = this.slidingWindow.peekItemN(2);
            e.CharacterInfo.isDecimalDigit(r) &&
              (this.slidingWindow.moveToNextItem(),
              this.slidingWindow.moveToNextItem(),
              this.scanDecimalDigits());
          }
        }
      }),
      (o.prototype.scanHexNumericLiteral = function () {
        for (
          this.slidingWindow.moveToNextItem(),
            this.slidingWindow.moveToNextItem();
          e.CharacterInfo.isHexDigit(this.currentCharCode());

        )
          this.slidingWindow.moveToNextItem();
      }),
      (o.prototype.isHexNumericLiteral = function () {
        if (48 === this.currentCharCode()) {
          var t = this.slidingWindow.peekItemN(1);
          if (120 === t || 88 === t)
            return (
              (t = this.slidingWindow.peekItemN(2)),
              e.CharacterInfo.isHexDigit(t)
            );
        }
        return !1;
      }),
      (o.prototype.advanceAndSetTokenKind = function (e) {
        return this.slidingWindow.moveToNextItem(), e;
      }),
      (o.prototype.scanLessThanToken = function () {
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 82)
            : 60 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(),
              61 === this.currentCharCode()
                ? (this.slidingWindow.moveToNextItem(), 112)
                : 95)
            : 80
        );
      }),
      (o.prototype.scanBarToken = function () {
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 116)
            : 124 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 104)
            : 99
        );
      }),
      (o.prototype.scanCaretToken = function () {
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 117)
            : 100
        );
      }),
      (o.prototype.scanAmpersandToken = function () {
        this.slidingWindow.moveToNextItem();
        var e = this.currentCharCode();
        return 61 === e
          ? (this.slidingWindow.moveToNextItem(), 115)
          : 38 === this.currentCharCode()
          ? (this.slidingWindow.moveToNextItem(), 103)
          : 98;
      }),
      (o.prototype.scanPercentToken = function () {
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 111)
            : 92
        );
      }),
      (o.prototype.scanMinusToken = function () {
        this.slidingWindow.moveToNextItem();
        var e = this.currentCharCode();
        return 61 === e
          ? (this.slidingWindow.moveToNextItem(), 109)
          : 45 === e
          ? (this.slidingWindow.moveToNextItem(), 94)
          : 90;
      }),
      (o.prototype.scanPlusToken = function () {
        this.slidingWindow.moveToNextItem();
        var e = this.currentCharCode();
        return 61 === e
          ? (this.slidingWindow.moveToNextItem(), 108)
          : 43 === e
          ? (this.slidingWindow.moveToNextItem(), 93)
          : 89;
      }),
      (o.prototype.scanAsteriskToken = function () {
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 110)
            : 91
        );
      }),
      (o.prototype.scanEqualsToken = function () {
        this.slidingWindow.moveToNextItem();
        var e = this.currentCharCode();
        return 61 === e
          ? (this.slidingWindow.moveToNextItem(),
            61 === this.currentCharCode()
              ? (this.slidingWindow.moveToNextItem(), 87)
              : 84)
          : 62 === e
          ? (this.slidingWindow.moveToNextItem(), 85)
          : 107;
      }),
      (o.prototype.isDotPrefixedNumericLiteral = function () {
        if (46 === this.currentCharCode()) {
          var t = this.slidingWindow.peekItemN(1);
          return e.CharacterInfo.isDecimalDigit(t);
        }
        return !1;
      }),
      (o.prototype.scanDotToken = function (e) {
        return this.isDotPrefixedNumericLiteral()
          ? this.scanNumericLiteral(e)
          : (this.slidingWindow.moveToNextItem(),
            46 === this.currentCharCode() &&
            46 === this.slidingWindow.peekItemN(1)
              ? (this.slidingWindow.moveToNextItem(),
                this.slidingWindow.moveToNextItem(),
                77)
              : 76);
      }),
      (o.prototype.scanSlashToken = function (e) {
        if (e) {
          var t = this.tryScanRegularExpressionToken();
          if (0 !== t) return t;
        }
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(), 119)
            : 118
        );
      }),
      (o.prototype.tryScanRegularExpressionToken = function () {
        var e = this.slidingWindow.getAndPinAbsoluteIndex();
        this.slidingWindow.moveToNextItem();
        for (var t = !1, n = !1; ; ) {
          var i = this.currentCharCode();
          if (
            this.isNewLineCharacter(i) ||
            this.slidingWindow.isAtEndOfSource()
          )
            return (
              this.slidingWindow.rewindToPinnedIndex(e),
              this.slidingWindow.releaseAndUnpinAbsoluteIndex(e),
              0
            );
          this.slidingWindow.moveToNextItem();
          {
            if (!t) {
              switch (i) {
                case 92:
                  t = !0;
                  continue;
                case 91:
                  n = !0;
                  continue;
                case 93:
                  n = !1;
                  continue;
                case 47:
                  if (n) continue;
                  break;
                default:
                  continue;
              }
              break;
            }
            t = !1;
          }
        }
        for (; r[this.currentCharCode()]; ) this.slidingWindow.moveToNextItem();
        return this.slidingWindow.releaseAndUnpinAbsoluteIndex(e), 12;
      }),
      (o.prototype.scanExclamationToken = function () {
        return (
          this.slidingWindow.moveToNextItem(),
          61 === this.currentCharCode()
            ? (this.slidingWindow.moveToNextItem(),
              61 === this.currentCharCode()
                ? (this.slidingWindow.moveToNextItem(), 88)
                : 86)
            : 101
        );
      }),
      (o.prototype.scanDefaultCharacter = function (t, n) {
        var r = this.slidingWindow.absoluteIndex();
        this.slidingWindow.moveToNextItem();
        var i = String.fromCharCode(t),
          o = this.getErrorMessageText(i);
        return (
          n.push(
            new e.Diagnostic(
              this.fileName,
              this.text.lineMap(),
              r,
              1,
              e.DiagnosticCode.Unexpected_character_0,
              [o]
            )
          ),
          9
        );
      }),
      (o.prototype.getErrorMessageText = function (e) {
        return "\\" === e ? '"\\"' : JSON.stringify(e);
      }),
      (o.prototype.skipEscapeSequence = function (e) {
        var t = this.slidingWindow.getAndPinAbsoluteIndex();
        this.slidingWindow.moveToNextItem();
        var n = this.currentCharCode();
        switch ((this.slidingWindow.moveToNextItem(), n)) {
          case 120:
          case 117:
            this.slidingWindow.rewindToPinnedIndex(t);
            {
              this.scanUnicodeOrHexEscape(e);
            }
            break;
          case 13:
            10 === this.currentCharCode() &&
              this.slidingWindow.moveToNextItem();
        }
        this.slidingWindow.releaseAndUnpinAbsoluteIndex(t);
      }),
      (o.prototype.scanStringLiteral = function (t) {
        var n = this.currentCharCode();
        for (this.slidingWindow.moveToNextItem(); ; ) {
          var r = this.currentCharCode();
          if (92 === r) this.skipEscapeSequence(t);
          else {
            if (r === n) {
              this.slidingWindow.moveToNextItem();
              break;
            }
            if (
              this.isNewLineCharacter(r) ||
              this.slidingWindow.isAtEndOfSource()
            ) {
              t.push(
                new e.Diagnostic(
                  this.fileName,
                  this.text.lineMap(),
                  e.MathPrototype.min(
                    this.slidingWindow.absoluteIndex(),
                    this.text.length()
                  ),
                  1,
                  e.DiagnosticCode.Missing_close_quote_character,
                  null
                )
              );
              break;
            }
            this.slidingWindow.moveToNextItem();
          }
        }
        return 14;
      }),
      (o.prototype.isUnicodeEscape = function (e) {
        if (92 === e) {
          var t = this.slidingWindow.peekItemN(1);
          if (117 === t) return !0;
        }
        return !1;
      }),
      (o.prototype.peekCharOrUnicodeEscape = function () {
        var e = this.currentCharCode();
        return this.isUnicodeEscape(e) ? this.peekUnicodeOrHexEscape() : e;
      }),
      (o.prototype.peekUnicodeOrHexEscape = function () {
        var e = this.slidingWindow.getAndPinAbsoluteIndex(),
          t = this.scanUnicodeOrHexEscape(null);
        return (
          this.slidingWindow.rewindToPinnedIndex(e),
          this.slidingWindow.releaseAndUnpinAbsoluteIndex(e),
          t
        );
      }),
      (o.prototype.scanCharOrUnicodeEscape = function (e) {
        var t = this.currentCharCode();
        if (92 === t) {
          var n = this.slidingWindow.peekItemN(1);
          if (117 === n) return this.scanUnicodeOrHexEscape(e), !0;
        }
        return this.slidingWindow.moveToNextItem(), !1;
      }),
      (o.prototype.scanUnicodeOrHexEscape = function (t) {
        var n = this.slidingWindow.absoluteIndex(),
          r = this.currentCharCode();
        this.slidingWindow.moveToNextItem(), (r = this.currentCharCode());
        var i = 0;
        this.slidingWindow.moveToNextItem();
        for (var o = 117 === r ? 4 : 2, s = 0; o > s; s++) {
          var a = this.currentCharCode();
          if (!e.CharacterInfo.isHexDigit(a)) {
            if (null !== t) {
              var l = this.slidingWindow.absoluteIndex(),
                c = this.createIllegalEscapeDiagnostic(n, l);
              t.push(c);
            }
            break;
          }
          (i = (i << 4) + e.CharacterInfo.hexValue(a)),
            this.slidingWindow.moveToNextItem();
        }
        return i;
      }),
      (o.prototype.substring = function (t, n, r) {
        var i = n - t,
          o = t - this.slidingWindow.windowAbsoluteStartIndex;
        return r
          ? e.Collections.DefaultStringTable.addCharArray(
              this.slidingWindow.window,
              o,
              i
            )
          : e.StringUtilities.fromCharCodeArray(
              this.slidingWindow.window.slice(o, o + i)
            );
      }),
      (o.prototype.createIllegalEscapeDiagnostic = function (t, n) {
        return new e.Diagnostic(
          this.fileName,
          this.text.lineMap(),
          t,
          n - t,
          e.DiagnosticCode.Unrecognized_escape_sequence,
          null
        );
      }),
      (o.isValidIdentifier = function (t, n) {
        var r = new o(null, t, n, o.triviaWindow),
          i = new Array(),
          s = r.scan(i, !1);
        return (
          0 === i.length &&
          e.SyntaxFacts.isIdentifierNameOrAnyKeyword(s) &&
          s.width() === t.length()
        );
      }),
      (o.triviaWindow = e.ArrayUtilities.createArray(2048, 0)),
      o
    );
  })();
  e.Scanner = l;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.identifierKind = function (e, t, n) {
        switch (n) {
          case 2:
            switch (e[t]) {
              case 100:
                return 111 === e[t + 1] ? 22 : 11;
              case 105:
                switch (e[t + 1]) {
                  case 102:
                    return 28;
                  case 110:
                    return 29;
                  default:
                    return 11;
                }
              default:
                return 11;
            }
          case 3:
            switch (e[t]) {
              case 102:
                return 111 === e[t + 1] && 114 === e[t + 2] ? 26 : 11;
              case 110:
                return 101 === e[t + 1] && 119 === e[t + 2] ? 31 : 11;
              case 116:
                return 114 === e[t + 1] && 121 === e[t + 2] ? 38 : 11;
              case 118:
                return 97 === e[t + 1] && 114 === e[t + 2] ? 40 : 11;
              case 108:
                return 101 === e[t + 1] && 116 === e[t + 2] ? 53 : 11;
              case 97:
                return 110 === e[t + 1] && 121 === e[t + 2] ? 60 : 11;
              case 103:
                return 101 === e[t + 1] && 116 === e[t + 2] ? 64 : 11;
              case 115:
                return 101 === e[t + 1] && 116 === e[t + 2] ? 68 : 11;
              default:
                return 11;
            }
          case 4:
            switch (e[t]) {
              case 99:
                return 97 === e[t + 1] && 115 === e[t + 2] && 101 === e[t + 3]
                  ? 16
                  : 11;
              case 101:
                switch (e[t + 1]) {
                  case 108:
                    return 115 === e[t + 2] && 101 === e[t + 3] ? 23 : 11;
                  case 110:
                    return 117 === e[t + 2] && 109 === e[t + 3] ? 46 : 11;
                  default:
                    return 11;
                }
              case 110:
                return 117 === e[t + 1] && 108 === e[t + 2] && 108 === e[t + 3]
                  ? 32
                  : 11;
              case 116:
                switch (e[t + 1]) {
                  case 104:
                    return 105 === e[t + 2] && 115 === e[t + 3] ? 35 : 11;
                  case 114:
                    return 117 === e[t + 2] && 101 === e[t + 3] ? 37 : 11;
                  default:
                    return 11;
                }
              case 118:
                return 111 === e[t + 1] && 105 === e[t + 2] && 100 === e[t + 3]
                  ? 41
                  : 11;
              case 119:
                return 105 === e[t + 1] && 116 === e[t + 2] && 104 === e[t + 3]
                  ? 43
                  : 11;
              default:
                return 11;
            }
          case 5:
            switch (e[t]) {
              case 98:
                return 114 === e[t + 1] &&
                  101 === e[t + 2] &&
                  97 === e[t + 3] &&
                  107 === e[t + 4]
                  ? 15
                  : 11;
              case 99:
                switch (e[t + 1]) {
                  case 97:
                    return 116 === e[t + 2] &&
                      99 === e[t + 3] &&
                      104 === e[t + 4]
                      ? 17
                      : 11;
                  case 108:
                    return 97 === e[t + 2] &&
                      115 === e[t + 3] &&
                      115 === e[t + 4]
                      ? 44
                      : 11;
                  case 111:
                    return 110 === e[t + 2] &&
                      115 === e[t + 3] &&
                      116 === e[t + 4]
                      ? 45
                      : 11;
                  default:
                    return 11;
                }
              case 102:
                return 97 === e[t + 1] &&
                  108 === e[t + 2] &&
                  115 === e[t + 3] &&
                  101 === e[t + 4]
                  ? 24
                  : 11;
              case 116:
                return 104 === e[t + 1] &&
                  114 === e[t + 2] &&
                  111 === e[t + 3] &&
                  119 === e[t + 4]
                  ? 36
                  : 11;
              case 119:
                return 104 === e[t + 1] &&
                  105 === e[t + 2] &&
                  108 === e[t + 3] &&
                  101 === e[t + 4]
                  ? 42
                  : 11;
              case 115:
                return 117 === e[t + 1] &&
                  112 === e[t + 2] &&
                  101 === e[t + 3] &&
                  114 === e[t + 4]
                  ? 50
                  : 11;
              case 121:
                return 105 === e[t + 1] &&
                  101 === e[t + 2] &&
                  108 === e[t + 3] &&
                  100 === e[t + 4]
                  ? 59
                  : 11;
              default:
                return 11;
            }
          case 6:
            switch (e[t]) {
              case 100:
                return 101 === e[t + 1] &&
                  108 === e[t + 2] &&
                  101 === e[t + 3] &&
                  116 === e[t + 4] &&
                  101 === e[t + 5]
                  ? 21
                  : 11;
              case 114:
                return 101 === e[t + 1] &&
                  116 === e[t + 2] &&
                  117 === e[t + 3] &&
                  114 === e[t + 4] &&
                  110 === e[t + 5]
                  ? 33
                  : 11;
              case 115:
                switch (e[t + 1]) {
                  case 119:
                    return 105 === e[t + 2] &&
                      116 === e[t + 3] &&
                      99 === e[t + 4] &&
                      104 === e[t + 5]
                      ? 34
                      : 11;
                  case 116:
                    switch (e[t + 2]) {
                      case 97:
                        return 116 === e[t + 3] &&
                          105 === e[t + 4] &&
                          99 === e[t + 5]
                          ? 58
                          : 11;
                      case 114:
                        return 105 === e[t + 3] &&
                          110 === e[t + 4] &&
                          103 === e[t + 5]
                          ? 69
                          : 11;
                      default:
                        return 11;
                    }
                  default:
                    return 11;
                }
              case 116:
                return 121 === e[t + 1] &&
                  112 === e[t + 2] &&
                  101 === e[t + 3] &&
                  111 === e[t + 4] &&
                  102 === e[t + 5]
                  ? 39
                  : 11;
              case 101:
                return 120 === e[t + 1] &&
                  112 === e[t + 2] &&
                  111 === e[t + 3] &&
                  114 === e[t + 4] &&
                  116 === e[t + 5]
                  ? 47
                  : 11;
              case 105:
                return 109 === e[t + 1] &&
                  112 === e[t + 2] &&
                  111 === e[t + 3] &&
                  114 === e[t + 4] &&
                  116 === e[t + 5]
                  ? 49
                  : 11;
              case 112:
                return 117 === e[t + 1] &&
                  98 === e[t + 2] &&
                  108 === e[t + 3] &&
                  105 === e[t + 4] &&
                  99 === e[t + 5]
                  ? 57
                  : 11;
              case 109:
                return 111 === e[t + 1] &&
                  100 === e[t + 2] &&
                  117 === e[t + 3] &&
                  108 === e[t + 4] &&
                  101 === e[t + 5]
                  ? 65
                  : 11;
              case 110:
                return 117 === e[t + 1] &&
                  109 === e[t + 2] &&
                  98 === e[t + 3] &&
                  101 === e[t + 4] &&
                  114 === e[t + 5]
                  ? 67
                  : 11;
              default:
                return 11;
            }
          case 7:
            switch (e[t]) {
              case 100:
                switch (e[t + 1]) {
                  case 101:
                    switch (e[t + 2]) {
                      case 102:
                        return 97 === e[t + 3] &&
                          117 === e[t + 4] &&
                          108 === e[t + 5] &&
                          116 === e[t + 6]
                          ? 20
                          : 11;
                      case 99:
                        return 108 === e[t + 3] &&
                          97 === e[t + 4] &&
                          114 === e[t + 5] &&
                          101 === e[t + 6]
                          ? 63
                          : 11;
                      default:
                        return 11;
                    }
                  default:
                    return 11;
                }
              case 102:
                return 105 === e[t + 1] &&
                  110 === e[t + 2] &&
                  97 === e[t + 3] &&
                  108 === e[t + 4] &&
                  108 === e[t + 5] &&
                  121 === e[t + 6]
                  ? 25
                  : 11;
              case 101:
                return 120 === e[t + 1] &&
                  116 === e[t + 2] &&
                  101 === e[t + 3] &&
                  110 === e[t + 4] &&
                  100 === e[t + 5] &&
                  115 === e[t + 6]
                  ? 48
                  : 11;
              case 112:
                switch (e[t + 1]) {
                  case 97:
                    return 99 === e[t + 2] &&
                      107 === e[t + 3] &&
                      97 === e[t + 4] &&
                      103 === e[t + 5] &&
                      101 === e[t + 6]
                      ? 54
                      : 11;
                  case 114:
                    return 105 === e[t + 2] &&
                      118 === e[t + 3] &&
                      97 === e[t + 4] &&
                      116 === e[t + 5] &&
                      101 === e[t + 6]
                      ? 55
                      : 11;
                  default:
                    return 11;
                }
              case 98:
                return 111 === e[t + 1] &&
                  111 === e[t + 2] &&
                  108 === e[t + 3] &&
                  101 === e[t + 4] &&
                  97 === e[t + 5] &&
                  110 === e[t + 6]
                  ? 61
                  : 11;
              case 114:
                return 101 === e[t + 1] &&
                  113 === e[t + 2] &&
                  117 === e[t + 3] &&
                  105 === e[t + 4] &&
                  114 === e[t + 5] &&
                  101 === e[t + 6]
                  ? 66
                  : 11;
              default:
                return 11;
            }
          case 8:
            switch (e[t]) {
              case 99:
                return 111 === e[t + 1] &&
                  110 === e[t + 2] &&
                  116 === e[t + 3] &&
                  105 === e[t + 4] &&
                  110 === e[t + 5] &&
                  117 === e[t + 6] &&
                  101 === e[t + 7]
                  ? 18
                  : 11;
              case 100:
                return 101 === e[t + 1] &&
                  98 === e[t + 2] &&
                  117 === e[t + 3] &&
                  103 === e[t + 4] &&
                  103 === e[t + 5] &&
                  101 === e[t + 6] &&
                  114 === e[t + 7]
                  ? 19
                  : 11;
              case 102:
                return 117 === e[t + 1] &&
                  110 === e[t + 2] &&
                  99 === e[t + 3] &&
                  116 === e[t + 4] &&
                  105 === e[t + 5] &&
                  111 === e[t + 6] &&
                  110 === e[t + 7]
                  ? 27
                  : 11;
              default:
                return 11;
            }
          case 9:
            switch (e[t]) {
              case 105:
                return 110 === e[t + 1] &&
                  116 === e[t + 2] &&
                  101 === e[t + 3] &&
                  114 === e[t + 4] &&
                  102 === e[t + 5] &&
                  97 === e[t + 6] &&
                  99 === e[t + 7] &&
                  101 === e[t + 8]
                  ? 52
                  : 11;
              case 112:
                return 114 === e[t + 1] &&
                  111 === e[t + 2] &&
                  116 === e[t + 3] &&
                  101 === e[t + 4] &&
                  99 === e[t + 5] &&
                  116 === e[t + 6] &&
                  101 === e[t + 7] &&
                  100 === e[t + 8]
                  ? 56
                  : 11;
              default:
                return 11;
            }
          case 10:
            switch (e[t]) {
              case 105:
                switch (e[t + 1]) {
                  case 110:
                    return 115 === e[t + 2] &&
                      116 === e[t + 3] &&
                      97 === e[t + 4] &&
                      110 === e[t + 5] &&
                      99 === e[t + 6] &&
                      101 === e[t + 7] &&
                      111 === e[t + 8] &&
                      102 === e[t + 9]
                      ? 30
                      : 11;
                  case 109:
                    return 112 === e[t + 2] &&
                      108 === e[t + 3] &&
                      101 === e[t + 4] &&
                      109 === e[t + 5] &&
                      101 === e[t + 6] &&
                      110 === e[t + 7] &&
                      116 === e[t + 8] &&
                      115 === e[t + 9]
                      ? 51
                      : 11;
                  default:
                    return 11;
                }
              default:
                return 11;
            }
          case 11:
            return 99 === e[t] &&
              111 === e[t + 1] &&
              110 === e[t + 2] &&
              115 === e[t + 3] &&
              116 === e[t + 4] &&
              114 === e[t + 5] &&
              117 === e[t + 6] &&
              99 === e[t + 7] &&
              116 === e[t + 8] &&
              111 === e[t + 9] &&
              114 === e[t + 10]
              ? 62
              : 11;
          default:
            return 11;
        }
      }),
      e
    );
  })();
  e.ScannerUtilities = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      return r(e, !1);
    }
    function r(e, n) {
      if (void 0 === e || null === e || 0 === e.length)
        return t.emptySeparatedList;
      if (n)
        for (var r = 0; r < e.length; r++) {
          e[r];
        }
      return 1 === e.length ? new o(e[0]) : new s(e);
    }
    var i = (function () {
      function t() {}
      return (
        (t.prototype.kind = function () {
          return 2;
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !1;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !0;
        }),
        (t.prototype.toJSON = function () {
          return [];
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.nonSeparatorCount = function () {
          return 0;
        }),
        (t.prototype.separatorCount = function () {
          return 0;
        }),
        (t.prototype.toArray = function () {
          return [];
        }),
        (t.prototype.toNonSeparatorArray = function () {
          return [];
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.nonSeparatorAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.separatorAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.collectTextElements = function () {}),
        (t.prototype.firstToken = function () {
          return null;
        }),
        (t.prototype.lastToken = function () {
          return null;
        }),
        (t.prototype.fullWidth = function () {
          return 0;
        }),
        (t.prototype.fullText = function () {
          return "";
        }),
        (t.prototype.width = function () {
          return 0;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return !1;
        }),
        (t.prototype.findTokenInternal = function () {
          throw e.Errors.invalidOperation();
        }),
        (t.prototype.insertChildrenInto = function () {}),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        t
      );
    })();
    t.emptySeparatedList = new i();
    var o = (function () {
        function t(e) {
          this.item = e;
        }
        return (
          (t.prototype.toJSON = function () {
            return [this.item];
          }),
          (t.prototype.kind = function () {
            return 2;
          }),
          (t.prototype.isNode = function () {
            return !1;
          }),
          (t.prototype.isToken = function () {
            return !1;
          }),
          (t.prototype.isList = function () {
            return !1;
          }),
          (t.prototype.isSeparatedList = function () {
            return !0;
          }),
          (t.prototype.childCount = function () {
            return 1;
          }),
          (t.prototype.nonSeparatorCount = function () {
            return 1;
          }),
          (t.prototype.separatorCount = function () {
            return 0;
          }),
          (t.prototype.toArray = function () {
            return [this.item];
          }),
          (t.prototype.toNonSeparatorArray = function () {
            return [this.item];
          }),
          (t.prototype.childAt = function (t) {
            if (0 !== t) throw e.Errors.argumentOutOfRange("index");
            return this.item;
          }),
          (t.prototype.nonSeparatorAt = function (t) {
            if (0 !== t) throw e.Errors.argumentOutOfRange("index");
            return this.item;
          }),
          (t.prototype.separatorAt = function () {
            throw e.Errors.argumentOutOfRange("index");
          }),
          (t.prototype.collectTextElements = function (e) {
            this.item.collectTextElements(e);
          }),
          (t.prototype.firstToken = function () {
            return this.item.firstToken();
          }),
          (t.prototype.lastToken = function () {
            return this.item.lastToken();
          }),
          (t.prototype.fullWidth = function () {
            return this.item.fullWidth();
          }),
          (t.prototype.width = function () {
            return this.item.width();
          }),
          (t.prototype.fullText = function () {
            return this.item.fullText();
          }),
          (t.prototype.leadingTrivia = function () {
            return this.item.leadingTrivia();
          }),
          (t.prototype.trailingTrivia = function () {
            return this.item.trailingTrivia();
          }),
          (t.prototype.leadingTriviaWidth = function () {
            return this.item.leadingTriviaWidth();
          }),
          (t.prototype.trailingTriviaWidth = function () {
            return this.item.trailingTriviaWidth();
          }),
          (t.prototype.isTypeScriptSpecific = function () {
            return this.item.isTypeScriptSpecific();
          }),
          (t.prototype.isIncrementallyUnusable = function () {
            return this.item.isIncrementallyUnusable();
          }),
          (t.prototype.findTokenInternal = function (t, n, r) {
            return this.item.findTokenInternal(
              new e.PositionedSeparatedList(t, this, r),
              n,
              r
            );
          }),
          (t.prototype.insertChildrenInto = function (e, t) {
            e.splice(t, 0, this.item);
          }),
          t
        );
      })(),
      s = (function () {
        function t(e) {
          (this._data = 0), (this.elements = e);
        }
        return (
          (t.prototype.kind = function () {
            return 2;
          }),
          (t.prototype.isToken = function () {
            return !1;
          }),
          (t.prototype.isNode = function () {
            return !1;
          }),
          (t.prototype.isList = function () {
            return !1;
          }),
          (t.prototype.isSeparatedList = function () {
            return !0;
          }),
          (t.prototype.toJSON = function () {
            return this.elements;
          }),
          (t.prototype.childCount = function () {
            return this.elements.length;
          }),
          (t.prototype.nonSeparatorCount = function () {
            return e.IntegerUtilities.integerDivide(
              this.elements.length + 1,
              2
            );
          }),
          (t.prototype.separatorCount = function () {
            return e.IntegerUtilities.integerDivide(this.elements.length, 2);
          }),
          (t.prototype.toArray = function () {
            return this.elements.slice(0);
          }),
          (t.prototype.toNonSeparatorArray = function () {
            for (var e = [], t = 0, n = this.nonSeparatorCount(); n > t; t++)
              e.push(this.nonSeparatorAt(t));
            return e;
          }),
          (t.prototype.childAt = function (t) {
            if (0 > t || t >= this.elements.length)
              throw e.Errors.argumentOutOfRange("index");
            return this.elements[t];
          }),
          (t.prototype.nonSeparatorAt = function (t) {
            var n = 2 * t;
            if (0 > n || n >= this.elements.length)
              throw e.Errors.argumentOutOfRange("index");
            return this.elements[n];
          }),
          (t.prototype.separatorAt = function (t) {
            var n = 2 * t + 1;
            if (0 > n || n >= this.elements.length)
              throw e.Errors.argumentOutOfRange("index");
            return this.elements[n];
          }),
          (t.prototype.firstToken = function () {
            for (var e, t = 0, n = this.elements.length; n > t; t++)
              if (t % 2 === 0) {
                var r = this.elements[t];
                if (((e = r.firstToken()), null !== e)) return e;
              } else if (((e = this.elements[t]), e.width() > 0)) return e;
            return null;
          }),
          (t.prototype.lastToken = function () {
            for (var e, t = this.elements.length - 1; t >= 0; t--)
              if (t % 2 === 0) {
                var n = this.elements[t];
                if (((e = n.lastToken()), null !== e)) return e;
              } else if (((e = this.elements[t]), e.width() > 0)) return e;
            return null;
          }),
          (t.prototype.fullText = function () {
            var e = [];
            return this.collectTextElements(e), e.join("");
          }),
          (t.prototype.isTypeScriptSpecific = function () {
            for (var e = 0, t = this.nonSeparatorCount(); t > e; e++)
              if (this.nonSeparatorAt(e).isTypeScriptSpecific()) return !0;
            return !1;
          }),
          (t.prototype.isIncrementallyUnusable = function () {
            return 0 !== (2 & this.data());
          }),
          (t.prototype.fullWidth = function () {
            return this.data() >>> 3;
          }),
          (t.prototype.width = function () {
            var e = this.fullWidth();
            return e - this.leadingTriviaWidth() - this.trailingTriviaWidth();
          }),
          (t.prototype.leadingTrivia = function () {
            return this.firstToken().leadingTrivia();
          }),
          (t.prototype.trailingTrivia = function () {
            return this.lastToken().trailingTrivia();
          }),
          (t.prototype.leadingTriviaWidth = function () {
            return this.firstToken().leadingTriviaWidth();
          }),
          (t.prototype.trailingTriviaWidth = function () {
            return this.lastToken().trailingTriviaWidth();
          }),
          (t.prototype.computeData = function () {
            for (
              var e = 0, t = !1, n = 0, r = this.elements.length;
              r > n;
              n++
            ) {
              var i = this.elements[n],
                o = i.fullWidth();
              (e += o), (t = t || i.isIncrementallyUnusable());
            }
            return (e << 3) | (t ? 2 : 0) | 1;
          }),
          (t.prototype.data = function () {
            return (
              0 === (1 & this._data) && (this._data = this.computeData()),
              this._data
            );
          }),
          (t.prototype.findTokenInternal = function (t, n, r) {
            t = new e.PositionedSeparatedList(t, this, r);
            for (var i = 0, o = this.elements.length; o > i; i++) {
              var s = this.elements[i],
                a = s.fullWidth();
              if (a > n) return s.findTokenInternal(t, n, r);
              (n -= a), (r += a);
            }
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.collectTextElements = function (e) {
            for (var t = 0, n = this.elements.length; n > t; t++) {
              var r = this.elements[t];
              r.collectTextElements(e);
            }
          }),
          (t.prototype.insertChildrenInto = function (e, t) {
            0 === t
              ? e.unshift.apply(e, this.elements)
              : e.splice.apply(e, [t, 0].concat(this.elements));
          }),
          t
        );
      })();
    t.separatedList = n;
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e, t, n, r) {
      "undefined" == typeof r && (r = -1),
        (this.source = e),
        (this.window = t),
        (this.defaultValue = n),
        (this.sourceLength = r),
        (this.windowCount = 0),
        (this.windowAbsoluteStartIndex = 0),
        (this.currentRelativeItemIndex = 0),
        (this._pinCount = 0),
        (this.firstPinnedAbsoluteIndex = -1);
    }
    return (
      (t.prototype.windowAbsoluteEndIndex = function () {
        return this.windowAbsoluteStartIndex + this.windowCount;
      }),
      (t.prototype.addMoreItemsToWindow = function (e) {
        if (this.sourceLength >= 0 && this.absoluteIndex() >= this.sourceLength)
          return !1;
        this.windowCount >= this.window.length && this.tryShiftOrGrowWindow();
        var t = this.window.length - this.windowCount,
          n = this.source.fetchMoreItems(
            e,
            this.windowAbsoluteEndIndex(),
            this.window,
            this.windowCount,
            t
          );
        return (this.windowCount += n), n > 0;
      }),
      (t.prototype.tryShiftOrGrowWindow = function () {
        var t = this.currentRelativeItemIndex > this.window.length >>> 1,
          n =
            -1 === this.firstPinnedAbsoluteIndex ||
            this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;
        if (t && n) {
          var r =
              -1 === this.firstPinnedAbsoluteIndex
                ? this.currentRelativeItemIndex
                : this.firstPinnedAbsoluteIndex - this.windowAbsoluteStartIndex,
            i = this.windowCount - r;
          i > 0 && e.ArrayUtilities.copy(this.window, r, this.window, 0, i),
            (this.windowAbsoluteStartIndex += r),
            (this.windowCount -= r),
            (this.currentRelativeItemIndex -= r);
        } else
          e.ArrayUtilities.grow(
            this.window,
            2 * this.window.length,
            this.defaultValue
          );
      }),
      (t.prototype.absoluteIndex = function () {
        return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;
      }),
      (t.prototype.isAtEndOfSource = function () {
        return this.absoluteIndex() >= this.sourceLength;
      }),
      (t.prototype.getAndPinAbsoluteIndex = function () {
        var e = this.absoluteIndex(),
          t = this._pinCount++;
        return 0 === t && (this.firstPinnedAbsoluteIndex = e), e;
      }),
      (t.prototype.releaseAndUnpinAbsoluteIndex = function () {
        this._pinCount--,
          0 === this._pinCount && (this.firstPinnedAbsoluteIndex = -1);
      }),
      (t.prototype.rewindToPinnedIndex = function (e) {
        var t = e - this.windowAbsoluteStartIndex;
        this.currentRelativeItemIndex = t;
      }),
      (t.prototype.currentItem = function (e) {
        return this.currentRelativeItemIndex >= this.windowCount &&
          !this.addMoreItemsToWindow(e)
          ? this.defaultValue
          : this.window[this.currentRelativeItemIndex];
      }),
      (t.prototype.peekItemN = function (e) {
        for (; this.currentRelativeItemIndex + e >= this.windowCount; )
          if (!this.addMoreItemsToWindow(null)) return this.defaultValue;
        return this.window[this.currentRelativeItemIndex + e];
      }),
      (t.prototype.moveToNextItem = function () {
        this.currentRelativeItemIndex++;
      }),
      (t.prototype.disgardAllItemsFromCurrentIndexOnwards = function () {
        this.windowCount = this.currentRelativeItemIndex;
      }),
      (t.prototype.setAbsoluteIndex = function (e) {
        this.absoluteIndex() !== e &&
          (this._pinCount > 0,
          e >= this.windowAbsoluteStartIndex &&
          e < this.windowAbsoluteEndIndex()
            ? (this.currentRelativeItemIndex =
                e - this.windowAbsoluteStartIndex)
            : ((this.windowAbsoluteStartIndex = e),
              (this.windowCount = 0),
              (this.currentRelativeItemIndex = 0)));
      }),
      (t.prototype.pinCount = function () {
        return this._pinCount;
      }),
      t
    );
  })();
  e.SlidingWindow = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n() {
      return e.Syntax.normalModeFactory.sourceUnit(
        e.Syntax.emptyList,
        e.Syntax.token(10, { text: "" })
      );
    }
    function r(e) {
      var t = e.token();
      if (null !== e && 11 === e.kind()) {
        var n = e.containingNode(),
          r = n.node();
        if (121 === r.kind() && r.right === t) return n;
        if (212 === r.kind() && r.name === t) return n;
      }
      return e;
    }
    function i(t) {
      if (null !== t) {
        var n = e.Syntax.getStandaloneExpression(t),
          r = n.containingNode();
        if (null !== r)
          switch (r.kind()) {
            case 246:
              return !0;
            case 121:
              return !0;
            default:
              return o(t);
          }
      }
      return !1;
    }
    function o(t) {
      var n = e.Syntax.getStandaloneExpression(t),
        r = n.containingNode(),
        i = r.node(),
        o = n.nodeOrToken();
      if (null !== i)
        switch (i.kind()) {
          case 124:
            return i.type === o;
          case 220:
            return i.type === o;
          case 244:
          case 230:
          case 231:
          case 228:
            return !0;
        }
      return !1;
    }
    function s(t, n) {
      for (var r = 0, i = 0, o = t.childCount(); o > i; i++) {
        var s = t.childAt(i);
        if (s === n) return r;
        null !== s && (r += s.fullWidth());
      }
      throw e.Errors.invalidOperation();
    }
    function a(e, t) {
      for (var n = 0, r = 0; t > r; r++) {
        var i = e.childAt(r);
        null !== i && (n += i.fullWidth());
      }
      return n;
    }
    function l(t, n) {
      for (var r = 0, i = t.childCount(); i > r; r++) {
        var o = t.childAt(r);
        if (o === n) return r;
      }
      throw e.Errors.invalidOperation();
    }
    function c(e, t) {
      return null === e ? null === t : e.structuralEquals(t);
    }
    function u(e, t) {
      return e === t
        ? !0
        : null === e || null === t
        ? !1
        : e.isToken()
        ? t.isToken()
          ? p(e, t)
          : !1
        : t.isNode()
        ? c(e, t)
        : !1;
    }
    function p(t, n) {
      return t === n
        ? !0
        : null === t || null === n
        ? !1
        : t.kind() === n.kind() &&
          t.width() === n.width() &&
          t.fullWidth() === n.fullWidth() &&
          t.text() === n.text() &&
          e.Syntax.triviaListStructuralEquals(
            t.leadingTrivia(),
            n.leadingTrivia()
          ) &&
          e.Syntax.triviaListStructuralEquals(
            t.trailingTrivia(),
            n.trailingTrivia()
          );
    }
    function h(t, n) {
      if (t.count() !== n.count()) return !1;
      for (var r = 0, i = t.count(); i > r; r++)
        if (
          !e.Syntax.triviaStructuralEquals(
            t.syntaxTriviaAt(r),
            n.syntaxTriviaAt(r)
          )
        )
          return !1;
      return !0;
    }
    function d(e, t) {
      return (
        e.kind() === t.kind() &&
        e.fullWidth() === t.fullWidth() &&
        e.fullText() === t.fullText()
      );
    }
    function m(t, n) {
      if (t.childCount() !== n.childCount()) return !1;
      for (var r = 0, i = t.childCount(); i > r; r++) {
        var o = t.childAt(r),
          s = n.childAt(r);
        if (!e.Syntax.nodeOrTokenStructuralEquals(o, s)) return !1;
      }
      return !0;
    }
    function f(t, n) {
      if (t.childCount() !== n.childCount()) return !1;
      for (var r = 0, i = t.childCount(); i > r; r++) {
        var o = t.childAt(r),
          s = n.childAt(r);
        if (!e.Syntax.nodeOrTokenStructuralEquals(o, s)) return !1;
      }
      return !0;
    }
    function g(t, n) {
      if (t === n) return !0;
      if (null === t || null === n) return !1;
      if (n.kind() !== n.kind()) return !1;
      if (t.isToken()) return p(t, n);
      if (t.isNode()) return c(t, n);
      if (t.isList()) return m(t, n);
      if (t.isSeparatedList()) return f(t, n);
      throw e.Errors.invalidOperation();
    }
    function v(t, n) {
      return "undefined" == typeof n && (n = null), e.Syntax.identifier(t);
    }
    function y() {
      return e.Syntax.token(37);
    }
    function b() {
      return e.Syntax.token(24);
    }
    function _(t) {
      return e.Syntax.token(13, { text: t });
    }
    function w(t) {
      return e.Syntax.token(14, { text: t });
    }
    function S(e) {
      return 213 === e.kind() && 50 === e.expression.kind();
    }
    function T(e) {
      return 149 === e.kind() && S(e.expression);
    }
    function k(e) {
      return 212 === e.kind() && 50 === e.expression.kind();
    }
    function x(e) {
      return 213 === e.kind() && k(e.expression);
    }
    function C(t, n, r) {
      return e.Syntax.normalModeFactory.binaryExpression(174, t, n, r);
    }
    function E(e) {
      for (var t = 0; t < e.childCount(); t++) {
        var n = e.childAt(t);
        if (null !== n && n.isToken()) {
          var r = n;
          if (r.hasSkippedToken() || (0 === r.width() && 10 !== r.kind()))
            return !0;
        }
      }
      return !1;
    }
    function A(e) {
      if (e && 14 === e.kind()) {
        var t = e.text();
        return t.length < 2 || t.charCodeAt(t.length - 1) !== t.charCodeAt(0);
      }
      return !1;
    }
    function L(e) {
      if (e && 6 === e.kind()) {
        var t = e.fullText();
        return t.length < 4 || "*/" !== t.substring(t.length - 2);
      }
      return !1;
    }
    function I(e, t, n) {
      if (e && e.isComment() && n > t) {
        var r = t + e.fullWidth();
        if (r > n) return !0;
        if (n === r) return 7 === e.kind() || L(e);
      }
      return !1;
    }
    function D(e, t) {
      var n = e.findToken(t),
        r = n.fullStart(),
        i = null,
        o = null;
      if (
        (10 === n.kind()
          ? n.token().hasLeadingTrivia()
            ? (i = n.token().leadingTrivia())
            : ((n = n.previousToken()),
              n &&
                n &&
                n.token().hasTrailingTrivia() &&
                ((i = n.token().trailingTrivia()), (r = n.end())))
          : t <= r + n.token().leadingTriviaWidth()
          ? (i = n.token().leadingTrivia())
          : t >= r + n.token().width() &&
            ((i = n.token().trailingTrivia()), (r = n.end())),
        i)
      )
        for (var s = 0, a = i.count(); a > s; s++) {
          var l = i.syntaxTriviaAt(s);
          if (r >= t) break;
          if (t <= r + l.fullWidth() && l.isComment()) {
            o = l;
            break;
          }
          r += l.fullWidth();
        }
      return o && I(o, r, t);
    }
    function P(e, t) {
      var n = e.findToken(t);
      if (n) {
        if (10 === n.kind())
          return (
            (n = n.previousToken()),
            n && 0 === n.token().trailingTriviaWidth() && A(n.token())
          );
        if (t > n.start())
          return (
            (t < n.end() && (14 === n.kind() || 12 === n.kind())) ||
            (t <= n.end() && A(n.token()))
          );
      }
      return !1;
    }
    function N(t, n, r) {
      var i,
        o = null;
      if (
        (r
          ? ((o = t.token().leadingTrivia()), (i = t.fullStart()))
          : ((o = t.token().trailingTrivia()), (i = t.end())),
        o && o.hasSkippedToken())
      )
        for (var s = 0, a = o.count(); a > s; s++) {
          var l = o.syntaxTriviaAt(s),
            c = l.fullWidth();
          if (l.isSkippedToken() && n >= i && i + c >= n)
            return new e.PositionedSkippedToken(t, l.skippedToken(), i);
          i += c;
        }
      return null;
    }
    function M(t, n, r) {
      var i,
        o = null;
      if (
        (r
          ? ((o = t.token().leadingTrivia()),
            (i = t.fullStart() + o.fullWidth()))
          : ((o = t.token().trailingTrivia()), (i = t.fullEnd())),
        o && o.hasSkippedToken())
      )
        for (var s = o.count() - 1; s >= 0; s--) {
          var a = o.syntaxTriviaAt(s),
            l = a.fullWidth();
          if (a.isSkippedToken() && n >= i)
            return new e.PositionedSkippedToken(t, a.skippedToken(), i - l);
          i -= l;
        }
      return null;
    }
    function R(e, t) {
      return N(e, t, !0);
    }
    function O(e, t) {
      return N(e, t, !1);
    }
    function F(e, t) {
      var n = t < e.start();
      return N(e, t, n);
    }
    function V(e, t) {
      var n = t < e.start();
      return M(e, t, n);
    }
    function G(e, t) {
      for (; e && e.parent(); ) {
        if (e.parent().kind() === t) return e.parent();
        e = e.parent();
      }
      return null;
    }
    function B(t, n) {
      return null !== e.Syntax.getAncestorOfKind(t, n);
    }
    function W(t) {
      if (t)
        switch (t.kind()) {
          case 164:
          case 165:
            return (
              (t = t.operand),
              t.isToken() && e.IntegerUtilities.isInteger(t.text())
            );
          case 13:
            var n = t.text();
            return (
              e.IntegerUtilities.isInteger(n) ||
              e.IntegerUtilities.isHexInteger(n)
            );
        }
      return !1;
    }
    (t.emptySourceUnit = n),
      (t.getStandaloneExpression = r),
      (t.isInModuleOrTypeContext = i),
      (t.isInTypeOnlyContext = o),
      (t.childOffset = s),
      (t.childOffsetAt = a),
      (t.childIndex = l),
      (t.nodeStructuralEquals = c),
      (t.nodeOrTokenStructuralEquals = u),
      (t.tokenStructuralEquals = p),
      (t.triviaListStructuralEquals = h),
      (t.triviaStructuralEquals = d),
      (t.listStructuralEquals = m),
      (t.separatedListStructuralEquals = f),
      (t.elementStructuralEquals = g),
      (t.identifierName = v),
      (t.trueExpression = y),
      (t.falseExpression = b),
      (t.numericLiteralExpression = _),
      (t.stringLiteralExpression = w),
      (t.isSuperInvocationExpression = S),
      (t.isSuperInvocationExpressionStatement = T),
      (t.isSuperMemberAccessExpression = k),
      (t.isSuperMemberAccessInvocationExpression = x),
      (t.assignmentExpression = C),
      (t.nodeHasSkippedOrMissingTokens = E),
      (t.isUnterminatedStringLiteral = A),
      (t.isUnterminatedMultilineCommentTrivia = L),
      (t.isEntirelyInsideCommentTrivia = I),
      (t.isEntirelyInsideComment = D),
      (t.isEntirelyInStringOrRegularExpressionLiteral = P),
      (t.findSkippedTokenInLeadingTriviaList = R),
      (t.findSkippedTokenInTrailingTriviaList = O),
      (t.findSkippedTokenInPositionedToken = F),
      (t.findSkippedTokenOnLeft = V),
      (t.getAncestorOfKind = G),
      (t.hasAncestorOfKind = B),
      (t.isIntegerLiteral = W);
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t() {}
      return (
        (t.prototype.sourceUnit = function (t, n) {
          return new e.SourceUnitSyntax(t, n, !1);
        }),
        (t.prototype.externalModuleReference = function (t, n, r, i) {
          return new e.ExternalModuleReferenceSyntax(t, n, r, i, !1);
        }),
        (t.prototype.moduleNameModuleReference = function (t) {
          return new e.ModuleNameModuleReferenceSyntax(t, !1);
        }),
        (t.prototype.importDeclaration = function (t, n, r, i, o, s) {
          return new e.ImportDeclarationSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.exportAssignment = function (t, n, r, i) {
          return new e.ExportAssignmentSyntax(t, n, r, i, !1);
        }),
        (t.prototype.classDeclaration = function (t, n, r, i, o, s, a, l) {
          return new e.ClassDeclarationSyntax(t, n, r, i, o, s, a, l, !1);
        }),
        (t.prototype.interfaceDeclaration = function (t, n, r, i, o, s) {
          return new e.InterfaceDeclarationSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.heritageClause = function (t, n, r) {
          return new e.HeritageClauseSyntax(t, n, r, !1);
        }),
        (t.prototype.moduleDeclaration = function (t, n, r, i, o, s, a) {
          return new e.ModuleDeclarationSyntax(t, n, r, i, o, s, a, !1);
        }),
        (t.prototype.functionDeclaration = function (t, n, r, i, o, s) {
          return new e.FunctionDeclarationSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.variableStatement = function (t, n, r) {
          return new e.VariableStatementSyntax(t, n, r, !1);
        }),
        (t.prototype.variableDeclaration = function (t, n) {
          return new e.VariableDeclarationSyntax(t, n, !1);
        }),
        (t.prototype.variableDeclarator = function (t, n, r) {
          return new e.VariableDeclaratorSyntax(t, n, r, !1);
        }),
        (t.prototype.equalsValueClause = function (t, n) {
          return new e.EqualsValueClauseSyntax(t, n, !1);
        }),
        (t.prototype.prefixUnaryExpression = function (t, n, r) {
          return new e.PrefixUnaryExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.arrayLiteralExpression = function (t, n, r) {
          return new e.ArrayLiteralExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.omittedExpression = function () {
          return new e.OmittedExpressionSyntax(!1);
        }),
        (t.prototype.parenthesizedExpression = function (t, n, r) {
          return new e.ParenthesizedExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.simpleArrowFunctionExpression = function (t, n, r, i) {
          return new e.SimpleArrowFunctionExpressionSyntax(t, n, r, i, !1);
        }),
        (t.prototype.parenthesizedArrowFunctionExpression = function (
          t,
          n,
          r,
          i
        ) {
          return new e.ParenthesizedArrowFunctionExpressionSyntax(
            t,
            n,
            r,
            i,
            !1
          );
        }),
        (t.prototype.qualifiedName = function (t, n, r) {
          return new e.QualifiedNameSyntax(t, n, r, !1);
        }),
        (t.prototype.typeArgumentList = function (t, n, r) {
          return new e.TypeArgumentListSyntax(t, n, r, !1);
        }),
        (t.prototype.constructorType = function (t, n, r, i, o) {
          return new e.ConstructorTypeSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.functionType = function (t, n, r, i) {
          return new e.FunctionTypeSyntax(t, n, r, i, !1);
        }),
        (t.prototype.objectType = function (t, n, r) {
          return new e.ObjectTypeSyntax(t, n, r, !1);
        }),
        (t.prototype.arrayType = function (t, n, r) {
          return new e.ArrayTypeSyntax(t, n, r, !1);
        }),
        (t.prototype.genericType = function (t, n) {
          return new e.GenericTypeSyntax(t, n, !1);
        }),
        (t.prototype.typeQuery = function (t, n) {
          return new e.TypeQuerySyntax(t, n, !1);
        }),
        (t.prototype.typeAnnotation = function (t, n) {
          return new e.TypeAnnotationSyntax(t, n, !1);
        }),
        (t.prototype.block = function (t, n, r) {
          return new e.BlockSyntax(t, n, r, !1);
        }),
        (t.prototype.parameter = function (t, n, r, i, o, s) {
          return new e.ParameterSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.memberAccessExpression = function (t, n, r) {
          return new e.MemberAccessExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.postfixUnaryExpression = function (t, n, r) {
          return new e.PostfixUnaryExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.elementAccessExpression = function (t, n, r, i) {
          return new e.ElementAccessExpressionSyntax(t, n, r, i, !1);
        }),
        (t.prototype.invocationExpression = function (t, n) {
          return new e.InvocationExpressionSyntax(t, n, !1);
        }),
        (t.prototype.argumentList = function (t, n, r, i) {
          return new e.ArgumentListSyntax(t, n, r, i, !1);
        }),
        (t.prototype.binaryExpression = function (t, n, r, i) {
          return new e.BinaryExpressionSyntax(t, n, r, i, !1);
        }),
        (t.prototype.conditionalExpression = function (t, n, r, i, o) {
          return new e.ConditionalExpressionSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.constructSignature = function (t, n) {
          return new e.ConstructSignatureSyntax(t, n, !1);
        }),
        (t.prototype.methodSignature = function (t, n, r) {
          return new e.MethodSignatureSyntax(t, n, r, !1);
        }),
        (t.prototype.indexSignature = function (t, n, r, i) {
          return new e.IndexSignatureSyntax(t, n, r, i, !1);
        }),
        (t.prototype.propertySignature = function (t, n, r) {
          return new e.PropertySignatureSyntax(t, n, r, !1);
        }),
        (t.prototype.callSignature = function (t, n, r) {
          return new e.CallSignatureSyntax(t, n, r, !1);
        }),
        (t.prototype.parameterList = function (t, n, r) {
          return new e.ParameterListSyntax(t, n, r, !1);
        }),
        (t.prototype.typeParameterList = function (t, n, r) {
          return new e.TypeParameterListSyntax(t, n, r, !1);
        }),
        (t.prototype.typeParameter = function (t, n) {
          return new e.TypeParameterSyntax(t, n, !1);
        }),
        (t.prototype.constraint = function (t, n) {
          return new e.ConstraintSyntax(t, n, !1);
        }),
        (t.prototype.elseClause = function (t, n) {
          return new e.ElseClauseSyntax(t, n, !1);
        }),
        (t.prototype.ifStatement = function (t, n, r, i, o, s) {
          return new e.IfStatementSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.expressionStatement = function (t, n) {
          return new e.ExpressionStatementSyntax(t, n, !1);
        }),
        (t.prototype.constructorDeclaration = function (t, n, r, i, o) {
          return new e.ConstructorDeclarationSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.memberFunctionDeclaration = function (t, n, r, i, o) {
          return new e.MemberFunctionDeclarationSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.getAccessor = function (t, n, r, i, o, s) {
          return new e.GetAccessorSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.setAccessor = function (t, n, r, i, o) {
          return new e.SetAccessorSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.memberVariableDeclaration = function (t, n, r) {
          return new e.MemberVariableDeclarationSyntax(t, n, r, !1);
        }),
        (t.prototype.indexMemberDeclaration = function (t, n, r) {
          return new e.IndexMemberDeclarationSyntax(t, n, r, !1);
        }),
        (t.prototype.throwStatement = function (t, n, r) {
          return new e.ThrowStatementSyntax(t, n, r, !1);
        }),
        (t.prototype.returnStatement = function (t, n, r) {
          return new e.ReturnStatementSyntax(t, n, r, !1);
        }),
        (t.prototype.objectCreationExpression = function (t, n, r) {
          return new e.ObjectCreationExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.switchStatement = function (t, n, r, i, o, s, a) {
          return new e.SwitchStatementSyntax(t, n, r, i, o, s, a, !1);
        }),
        (t.prototype.caseSwitchClause = function (t, n, r, i) {
          return new e.CaseSwitchClauseSyntax(t, n, r, i, !1);
        }),
        (t.prototype.defaultSwitchClause = function (t, n, r) {
          return new e.DefaultSwitchClauseSyntax(t, n, r, !1);
        }),
        (t.prototype.breakStatement = function (t, n, r) {
          return new e.BreakStatementSyntax(t, n, r, !1);
        }),
        (t.prototype.continueStatement = function (t, n, r) {
          return new e.ContinueStatementSyntax(t, n, r, !1);
        }),
        (t.prototype.forStatement = function (t, n, r, i, o, s, a, l, c, u) {
          return new e.ForStatementSyntax(t, n, r, i, o, s, a, l, c, u, !1);
        }),
        (t.prototype.forInStatement = function (t, n, r, i, o, s, a, l) {
          return new e.ForInStatementSyntax(t, n, r, i, o, s, a, l, !1);
        }),
        (t.prototype.whileStatement = function (t, n, r, i, o) {
          return new e.WhileStatementSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.withStatement = function (t, n, r, i, o) {
          return new e.WithStatementSyntax(t, n, r, i, o, !1);
        }),
        (t.prototype.enumDeclaration = function (t, n, r, i, o, s) {
          return new e.EnumDeclarationSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.enumElement = function (t, n) {
          return new e.EnumElementSyntax(t, n, !1);
        }),
        (t.prototype.castExpression = function (t, n, r, i) {
          return new e.CastExpressionSyntax(t, n, r, i, !1);
        }),
        (t.prototype.objectLiteralExpression = function (t, n, r) {
          return new e.ObjectLiteralExpressionSyntax(t, n, r, !1);
        }),
        (t.prototype.simplePropertyAssignment = function (t, n, r) {
          return new e.SimplePropertyAssignmentSyntax(t, n, r, !1);
        }),
        (t.prototype.functionPropertyAssignment = function (t, n, r) {
          return new e.FunctionPropertyAssignmentSyntax(t, n, r, !1);
        }),
        (t.prototype.functionExpression = function (t, n, r, i) {
          return new e.FunctionExpressionSyntax(t, n, r, i, !1);
        }),
        (t.prototype.emptyStatement = function (t) {
          return new e.EmptyStatementSyntax(t, !1);
        }),
        (t.prototype.tryStatement = function (t, n, r, i) {
          return new e.TryStatementSyntax(t, n, r, i, !1);
        }),
        (t.prototype.catchClause = function (t, n, r, i, o, s) {
          return new e.CatchClauseSyntax(t, n, r, i, o, s, !1);
        }),
        (t.prototype.finallyClause = function (t, n) {
          return new e.FinallyClauseSyntax(t, n, !1);
        }),
        (t.prototype.labeledStatement = function (t, n, r) {
          return new e.LabeledStatementSyntax(t, n, r, !1);
        }),
        (t.prototype.doStatement = function (t, n, r, i, o, s, a) {
          return new e.DoStatementSyntax(t, n, r, i, o, s, a, !1);
        }),
        (t.prototype.typeOfExpression = function (t, n) {
          return new e.TypeOfExpressionSyntax(t, n, !1);
        }),
        (t.prototype.deleteExpression = function (t, n) {
          return new e.DeleteExpressionSyntax(t, n, !1);
        }),
        (t.prototype.voidExpression = function (t, n) {
          return new e.VoidExpressionSyntax(t, n, !1);
        }),
        (t.prototype.debuggerStatement = function (t, n) {
          return new e.DebuggerStatementSyntax(t, n, !1);
        }),
        t
      );
    })();
    t.NormalModeFactory = n;
    var r = (function () {
      function t() {}
      return (
        (t.prototype.sourceUnit = function (t, n) {
          return new e.SourceUnitSyntax(t, n, !0);
        }),
        (t.prototype.externalModuleReference = function (t, n, r, i) {
          return new e.ExternalModuleReferenceSyntax(t, n, r, i, !0);
        }),
        (t.prototype.moduleNameModuleReference = function (t) {
          return new e.ModuleNameModuleReferenceSyntax(t, !0);
        }),
        (t.prototype.importDeclaration = function (t, n, r, i, o, s) {
          return new e.ImportDeclarationSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.exportAssignment = function (t, n, r, i) {
          return new e.ExportAssignmentSyntax(t, n, r, i, !0);
        }),
        (t.prototype.classDeclaration = function (t, n, r, i, o, s, a, l) {
          return new e.ClassDeclarationSyntax(t, n, r, i, o, s, a, l, !0);
        }),
        (t.prototype.interfaceDeclaration = function (t, n, r, i, o, s) {
          return new e.InterfaceDeclarationSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.heritageClause = function (t, n, r) {
          return new e.HeritageClauseSyntax(t, n, r, !0);
        }),
        (t.prototype.moduleDeclaration = function (t, n, r, i, o, s, a) {
          return new e.ModuleDeclarationSyntax(t, n, r, i, o, s, a, !0);
        }),
        (t.prototype.functionDeclaration = function (t, n, r, i, o, s) {
          return new e.FunctionDeclarationSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.variableStatement = function (t, n, r) {
          return new e.VariableStatementSyntax(t, n, r, !0);
        }),
        (t.prototype.variableDeclaration = function (t, n) {
          return new e.VariableDeclarationSyntax(t, n, !0);
        }),
        (t.prototype.variableDeclarator = function (t, n, r) {
          return new e.VariableDeclaratorSyntax(t, n, r, !0);
        }),
        (t.prototype.equalsValueClause = function (t, n) {
          return new e.EqualsValueClauseSyntax(t, n, !0);
        }),
        (t.prototype.prefixUnaryExpression = function (t, n, r) {
          return new e.PrefixUnaryExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.arrayLiteralExpression = function (t, n, r) {
          return new e.ArrayLiteralExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.omittedExpression = function () {
          return new e.OmittedExpressionSyntax(!0);
        }),
        (t.prototype.parenthesizedExpression = function (t, n, r) {
          return new e.ParenthesizedExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.simpleArrowFunctionExpression = function (t, n, r, i) {
          return new e.SimpleArrowFunctionExpressionSyntax(t, n, r, i, !0);
        }),
        (t.prototype.parenthesizedArrowFunctionExpression = function (
          t,
          n,
          r,
          i
        ) {
          return new e.ParenthesizedArrowFunctionExpressionSyntax(
            t,
            n,
            r,
            i,
            !0
          );
        }),
        (t.prototype.qualifiedName = function (t, n, r) {
          return new e.QualifiedNameSyntax(t, n, r, !0);
        }),
        (t.prototype.typeArgumentList = function (t, n, r) {
          return new e.TypeArgumentListSyntax(t, n, r, !0);
        }),
        (t.prototype.constructorType = function (t, n, r, i, o) {
          return new e.ConstructorTypeSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.functionType = function (t, n, r, i) {
          return new e.FunctionTypeSyntax(t, n, r, i, !0);
        }),
        (t.prototype.objectType = function (t, n, r) {
          return new e.ObjectTypeSyntax(t, n, r, !0);
        }),
        (t.prototype.arrayType = function (t, n, r) {
          return new e.ArrayTypeSyntax(t, n, r, !0);
        }),
        (t.prototype.genericType = function (t, n) {
          return new e.GenericTypeSyntax(t, n, !0);
        }),
        (t.prototype.typeQuery = function (t, n) {
          return new e.TypeQuerySyntax(t, n, !0);
        }),
        (t.prototype.typeAnnotation = function (t, n) {
          return new e.TypeAnnotationSyntax(t, n, !0);
        }),
        (t.prototype.block = function (t, n, r) {
          return new e.BlockSyntax(t, n, r, !0);
        }),
        (t.prototype.parameter = function (t, n, r, i, o, s) {
          return new e.ParameterSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.memberAccessExpression = function (t, n, r) {
          return new e.MemberAccessExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.postfixUnaryExpression = function (t, n, r) {
          return new e.PostfixUnaryExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.elementAccessExpression = function (t, n, r, i) {
          return new e.ElementAccessExpressionSyntax(t, n, r, i, !0);
        }),
        (t.prototype.invocationExpression = function (t, n) {
          return new e.InvocationExpressionSyntax(t, n, !0);
        }),
        (t.prototype.argumentList = function (t, n, r, i) {
          return new e.ArgumentListSyntax(t, n, r, i, !0);
        }),
        (t.prototype.binaryExpression = function (t, n, r, i) {
          return new e.BinaryExpressionSyntax(t, n, r, i, !0);
        }),
        (t.prototype.conditionalExpression = function (t, n, r, i, o) {
          return new e.ConditionalExpressionSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.constructSignature = function (t, n) {
          return new e.ConstructSignatureSyntax(t, n, !0);
        }),
        (t.prototype.methodSignature = function (t, n, r) {
          return new e.MethodSignatureSyntax(t, n, r, !0);
        }),
        (t.prototype.indexSignature = function (t, n, r, i) {
          return new e.IndexSignatureSyntax(t, n, r, i, !0);
        }),
        (t.prototype.propertySignature = function (t, n, r) {
          return new e.PropertySignatureSyntax(t, n, r, !0);
        }),
        (t.prototype.callSignature = function (t, n, r) {
          return new e.CallSignatureSyntax(t, n, r, !0);
        }),
        (t.prototype.parameterList = function (t, n, r) {
          return new e.ParameterListSyntax(t, n, r, !0);
        }),
        (t.prototype.typeParameterList = function (t, n, r) {
          return new e.TypeParameterListSyntax(t, n, r, !0);
        }),
        (t.prototype.typeParameter = function (t, n) {
          return new e.TypeParameterSyntax(t, n, !0);
        }),
        (t.prototype.constraint = function (t, n) {
          return new e.ConstraintSyntax(t, n, !0);
        }),
        (t.prototype.elseClause = function (t, n) {
          return new e.ElseClauseSyntax(t, n, !0);
        }),
        (t.prototype.ifStatement = function (t, n, r, i, o, s) {
          return new e.IfStatementSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.expressionStatement = function (t, n) {
          return new e.ExpressionStatementSyntax(t, n, !0);
        }),
        (t.prototype.constructorDeclaration = function (t, n, r, i, o) {
          return new e.ConstructorDeclarationSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.memberFunctionDeclaration = function (t, n, r, i, o) {
          return new e.MemberFunctionDeclarationSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.getAccessor = function (t, n, r, i, o, s) {
          return new e.GetAccessorSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.setAccessor = function (t, n, r, i, o) {
          return new e.SetAccessorSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.memberVariableDeclaration = function (t, n, r) {
          return new e.MemberVariableDeclarationSyntax(t, n, r, !0);
        }),
        (t.prototype.indexMemberDeclaration = function (t, n, r) {
          return new e.IndexMemberDeclarationSyntax(t, n, r, !0);
        }),
        (t.prototype.throwStatement = function (t, n, r) {
          return new e.ThrowStatementSyntax(t, n, r, !0);
        }),
        (t.prototype.returnStatement = function (t, n, r) {
          return new e.ReturnStatementSyntax(t, n, r, !0);
        }),
        (t.prototype.objectCreationExpression = function (t, n, r) {
          return new e.ObjectCreationExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.switchStatement = function (t, n, r, i, o, s, a) {
          return new e.SwitchStatementSyntax(t, n, r, i, o, s, a, !0);
        }),
        (t.prototype.caseSwitchClause = function (t, n, r, i) {
          return new e.CaseSwitchClauseSyntax(t, n, r, i, !0);
        }),
        (t.prototype.defaultSwitchClause = function (t, n, r) {
          return new e.DefaultSwitchClauseSyntax(t, n, r, !0);
        }),
        (t.prototype.breakStatement = function (t, n, r) {
          return new e.BreakStatementSyntax(t, n, r, !0);
        }),
        (t.prototype.continueStatement = function (t, n, r) {
          return new e.ContinueStatementSyntax(t, n, r, !0);
        }),
        (t.prototype.forStatement = function (t, n, r, i, o, s, a, l, c, u) {
          return new e.ForStatementSyntax(t, n, r, i, o, s, a, l, c, u, !0);
        }),
        (t.prototype.forInStatement = function (t, n, r, i, o, s, a, l) {
          return new e.ForInStatementSyntax(t, n, r, i, o, s, a, l, !0);
        }),
        (t.prototype.whileStatement = function (t, n, r, i, o) {
          return new e.WhileStatementSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.withStatement = function (t, n, r, i, o) {
          return new e.WithStatementSyntax(t, n, r, i, o, !0);
        }),
        (t.prototype.enumDeclaration = function (t, n, r, i, o, s) {
          return new e.EnumDeclarationSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.enumElement = function (t, n) {
          return new e.EnumElementSyntax(t, n, !0);
        }),
        (t.prototype.castExpression = function (t, n, r, i) {
          return new e.CastExpressionSyntax(t, n, r, i, !0);
        }),
        (t.prototype.objectLiteralExpression = function (t, n, r) {
          return new e.ObjectLiteralExpressionSyntax(t, n, r, !0);
        }),
        (t.prototype.simplePropertyAssignment = function (t, n, r) {
          return new e.SimplePropertyAssignmentSyntax(t, n, r, !0);
        }),
        (t.prototype.functionPropertyAssignment = function (t, n, r) {
          return new e.FunctionPropertyAssignmentSyntax(t, n, r, !0);
        }),
        (t.prototype.functionExpression = function (t, n, r, i) {
          return new e.FunctionExpressionSyntax(t, n, r, i, !0);
        }),
        (t.prototype.emptyStatement = function (t) {
          return new e.EmptyStatementSyntax(t, !0);
        }),
        (t.prototype.tryStatement = function (t, n, r, i) {
          return new e.TryStatementSyntax(t, n, r, i, !0);
        }),
        (t.prototype.catchClause = function (t, n, r, i, o, s) {
          return new e.CatchClauseSyntax(t, n, r, i, o, s, !0);
        }),
        (t.prototype.finallyClause = function (t, n) {
          return new e.FinallyClauseSyntax(t, n, !0);
        }),
        (t.prototype.labeledStatement = function (t, n, r) {
          return new e.LabeledStatementSyntax(t, n, r, !0);
        }),
        (t.prototype.doStatement = function (t, n, r, i, o, s, a) {
          return new e.DoStatementSyntax(t, n, r, i, o, s, a, !0);
        }),
        (t.prototype.typeOfExpression = function (t, n) {
          return new e.TypeOfExpressionSyntax(t, n, !0);
        }),
        (t.prototype.deleteExpression = function (t, n) {
          return new e.DeleteExpressionSyntax(t, n, !0);
        }),
        (t.prototype.voidExpression = function (t, n) {
          return new e.VoidExpressionSyntax(t, n, !0);
        }),
        (t.prototype.debuggerStatement = function (t, n) {
          return new e.DebuggerStatementSyntax(t, n, !0);
        }),
        t
      );
    })();
    (t.StrictModeFactory = r),
      (t.normalModeFactory = new n()),
      (t.strictModeFactory = new r());
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      if (149 === e.kind()) {
        var t = e,
          n = t.expression;
        if (14 === n.kind()) return !0;
      }
      return !1;
    }
    function r(e) {
      var t = e,
        n = t.expression,
        r = n.text();
      return '"use strict"' === r || "'use strict'" === r;
    }
    function i(t) {
      var n = t.tokenKind;
      return 11 === n || e.SyntaxFacts.isAnyKeyword(n);
    }
    (t.isDirectivePrologueElement = n),
      (t.isUseStrictDirective = r),
      (t.isIdentifierNameOrAnyKeyword = i);
  })(e.SyntaxFacts || (e.SyntaxFacts = {}));
  e.SyntaxFacts;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      if (void 0 === e || null === e || 0 === e.length) return t.emptyList;
      if (1 === e.length) {
        var n = e[0];
        return new i(n);
      }
      return new o(e);
    }
    var r = (function () {
      function t() {}
      return (
        (t.prototype.kind = function () {
          return 1;
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !1;
        }),
        (t.prototype.isList = function () {
          return !0;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return [];
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.toArray = function () {
          return [];
        }),
        (t.prototype.collectTextElements = function () {}),
        (t.prototype.firstToken = function () {
          return null;
        }),
        (t.prototype.lastToken = function () {
          return null;
        }),
        (t.prototype.fullWidth = function () {
          return 0;
        }),
        (t.prototype.width = function () {
          return 0;
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.fullText = function () {
          return "";
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return !1;
        }),
        (t.prototype.findTokenInternal = function () {
          throw e.Errors.invalidOperation();
        }),
        (t.prototype.insertChildrenInto = function () {}),
        t
      );
    })();
    (t.EmptySyntaxList = r), (t.emptyList = new r());
    var i = (function () {
        function t(e) {
          this.item = e;
        }
        return (
          (t.prototype.kind = function () {
            return 1;
          }),
          (t.prototype.isToken = function () {
            return !1;
          }),
          (t.prototype.isNode = function () {
            return !1;
          }),
          (t.prototype.isList = function () {
            return !0;
          }),
          (t.prototype.isSeparatedList = function () {
            return !1;
          }),
          (t.prototype.toJSON = function () {
            return [this.item];
          }),
          (t.prototype.childCount = function () {
            return 1;
          }),
          (t.prototype.childAt = function (t) {
            if (0 !== t) throw e.Errors.argumentOutOfRange("index");
            return this.item;
          }),
          (t.prototype.toArray = function () {
            return [this.item];
          }),
          (t.prototype.collectTextElements = function (e) {
            this.item.collectTextElements(e);
          }),
          (t.prototype.firstToken = function () {
            return this.item.firstToken();
          }),
          (t.prototype.lastToken = function () {
            return this.item.lastToken();
          }),
          (t.prototype.fullWidth = function () {
            return this.item.fullWidth();
          }),
          (t.prototype.width = function () {
            return this.item.width();
          }),
          (t.prototype.leadingTrivia = function () {
            return this.item.leadingTrivia();
          }),
          (t.prototype.trailingTrivia = function () {
            return this.item.trailingTrivia();
          }),
          (t.prototype.leadingTriviaWidth = function () {
            return this.item.leadingTriviaWidth();
          }),
          (t.prototype.trailingTriviaWidth = function () {
            return this.item.trailingTriviaWidth();
          }),
          (t.prototype.fullText = function () {
            return this.item.fullText();
          }),
          (t.prototype.isTypeScriptSpecific = function () {
            return this.item.isTypeScriptSpecific();
          }),
          (t.prototype.isIncrementallyUnusable = function () {
            return this.item.isIncrementallyUnusable();
          }),
          (t.prototype.findTokenInternal = function (t, n, r) {
            return this.item.findTokenInternal(
              new e.PositionedList(t, this, r),
              n,
              r
            );
          }),
          (t.prototype.insertChildrenInto = function (e, t) {
            e.splice(t, 0, this.item);
          }),
          t
        );
      })(),
      o = (function () {
        function t(e) {
          (this._data = 0), (this.nodeOrTokens = e);
        }
        return (
          (t.prototype.kind = function () {
            return 1;
          }),
          (t.prototype.isNode = function () {
            return !1;
          }),
          (t.prototype.isToken = function () {
            return !1;
          }),
          (t.prototype.isList = function () {
            return !0;
          }),
          (t.prototype.isSeparatedList = function () {
            return !1;
          }),
          (t.prototype.toJSON = function () {
            return this.nodeOrTokens;
          }),
          (t.prototype.childCount = function () {
            return this.nodeOrTokens.length;
          }),
          (t.prototype.childAt = function (t) {
            if (0 > t || t >= this.nodeOrTokens.length)
              throw e.Errors.argumentOutOfRange("index");
            return this.nodeOrTokens[t];
          }),
          (t.prototype.toArray = function () {
            return this.nodeOrTokens.slice(0);
          }),
          (t.prototype.collectTextElements = function (e) {
            for (var t = 0, n = this.nodeOrTokens.length; n > t; t++) {
              var r = this.nodeOrTokens[t];
              r.collectTextElements(e);
            }
          }),
          (t.prototype.firstToken = function () {
            for (var e = 0, t = this.nodeOrTokens.length; t > e; e++) {
              var n = this.nodeOrTokens[e].firstToken();
              if (null !== n) return n;
            }
            return null;
          }),
          (t.prototype.lastToken = function () {
            for (var e = this.nodeOrTokens.length - 1; e >= 0; e--) {
              var t = this.nodeOrTokens[e].lastToken();
              if (null !== t) return t;
            }
            return null;
          }),
          (t.prototype.fullText = function () {
            var e = new Array();
            return this.collectTextElements(e), e.join("");
          }),
          (t.prototype.isTypeScriptSpecific = function () {
            for (var e = 0, t = this.nodeOrTokens.length; t > e; e++)
              if (this.nodeOrTokens[e].isTypeScriptSpecific()) return !0;
            return !1;
          }),
          (t.prototype.isIncrementallyUnusable = function () {
            return 0 !== (2 & this.data());
          }),
          (t.prototype.fullWidth = function () {
            return this.data() >>> 3;
          }),
          (t.prototype.width = function () {
            var e = this.fullWidth();
            return e - this.leadingTriviaWidth() - this.trailingTriviaWidth();
          }),
          (t.prototype.leadingTrivia = function () {
            return this.firstToken().leadingTrivia();
          }),
          (t.prototype.trailingTrivia = function () {
            return this.lastToken().trailingTrivia();
          }),
          (t.prototype.leadingTriviaWidth = function () {
            return this.firstToken().leadingTriviaWidth();
          }),
          (t.prototype.trailingTriviaWidth = function () {
            return this.lastToken().trailingTriviaWidth();
          }),
          (t.prototype.computeData = function () {
            for (
              var e = 0, t = !1, n = 0, r = this.nodeOrTokens.length;
              r > n;
              n++
            ) {
              var i = this.nodeOrTokens[n];
              (e += i.fullWidth()), (t = t || i.isIncrementallyUnusable());
            }
            return (e << 3) | (t ? 2 : 0) | 1;
          }),
          (t.prototype.data = function () {
            return (
              0 === (1 & this._data) && (this._data = this.computeData()),
              this._data
            );
          }),
          (t.prototype.findTokenInternal = function (t, n, r) {
            t = new e.PositionedList(t, this, r);
            for (var i = 0, o = this.nodeOrTokens.length; o > i; i++) {
              var s = this.nodeOrTokens[i],
                a = s.fullWidth();
              if (a > n) return s.findTokenInternal(t, n, r);
              (n -= a), (r += a);
            }
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.insertChildrenInto = function (e, t) {
            0 === t
              ? e.unshift.apply(e, this.nodeOrTokens)
              : e.splice.apply(e, [t, 0].concat(this.nodeOrTokens));
          }),
          t
        );
      })();
    t.list = n;
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e) {
      this._data = e ? 4 : 0;
    }
    return (
      (t.prototype.isNode = function () {
        return !0;
      }),
      (t.prototype.isToken = function () {
        return !1;
      }),
      (t.prototype.isList = function () {
        return !1;
      }),
      (t.prototype.isSeparatedList = function () {
        return !1;
      }),
      (t.prototype.kind = function () {
        throw e.Errors.abstract();
      }),
      (t.prototype.childCount = function () {
        throw e.Errors.abstract();
      }),
      (t.prototype.childAt = function () {
        throw e.Errors.abstract();
      }),
      (t.prototype.firstToken = function () {
        for (var e = 0, t = this.childCount(); t > e; e++) {
          var n = this.childAt(e);
          if (null !== n && (n.fullWidth() > 0 || 10 === n.kind()))
            return n.firstToken();
        }
        return null;
      }),
      (t.prototype.lastToken = function () {
        for (var e = this.childCount() - 1; e >= 0; e--) {
          var t = this.childAt(e);
          if (null !== t && (t.fullWidth() > 0 || 10 === t.kind()))
            return t.lastToken();
        }
        return null;
      }),
      (t.prototype.insertChildrenInto = function (t, n) {
        for (var r = this.childCount() - 1; r >= 0; r--) {
          var i = this.childAt(r);
          if (null !== i)
            if (i.isNode() || i.isToken()) t.splice(n, 0, i);
            else if (i.isList()) i.insertChildrenInto(t, n);
            else {
              if (!i.isSeparatedList()) throw e.Errors.invalidOperation();
              i.insertChildrenInto(t, n);
            }
        }
      }),
      (t.prototype.leadingTrivia = function () {
        var t = this.firstToken();
        return t ? t.leadingTrivia() : e.Syntax.emptyTriviaList;
      }),
      (t.prototype.trailingTrivia = function () {
        var t = this.lastToken();
        return t ? t.trailingTrivia() : e.Syntax.emptyTriviaList;
      }),
      (t.prototype.toJSON = function () {
        var t = {
          kind: e.SyntaxKind[this.kind()],
          fullWidth: this.fullWidth(),
        };
        this.isIncrementallyUnusable() && (t.isIncrementallyUnusable = !0),
          this.parsedInStrictMode() && (t.parsedInStrictMode = !0);
        for (var n = this, r = 0, i = this.childCount(); i > r; r++) {
          var o = this.childAt(r);
          if (o)
            for (var s in this)
              if (o === n[s]) {
                t[s] = o;
                break;
              }
        }
        return t;
      }),
      (t.prototype.accept = function () {
        throw e.Errors.abstract();
      }),
      (t.prototype.fullText = function () {
        var e = [];
        return this.collectTextElements(e), e.join("");
      }),
      (t.prototype.collectTextElements = function (e) {
        for (var t = 0, n = this.childCount(); n > t; t++) {
          var r = this.childAt(t);
          null !== r && r.collectTextElements(e);
        }
      }),
      (t.prototype.replaceToken = function (t, n) {
        return t === n ? this : this.accept(new e.SyntaxTokenReplacer(t, n));
      }),
      (t.prototype.withLeadingTrivia = function (e) {
        return this.replaceToken(
          this.firstToken(),
          this.firstToken().withLeadingTrivia(e)
        );
      }),
      (t.prototype.withTrailingTrivia = function (e) {
        return this.replaceToken(
          this.lastToken(),
          this.lastToken().withTrailingTrivia(e)
        );
      }),
      (t.prototype.hasLeadingTrivia = function () {
        return this.lastToken().hasLeadingTrivia();
      }),
      (t.prototype.hasTrailingTrivia = function () {
        return this.lastToken().hasTrailingTrivia();
      }),
      (t.prototype.isTypeScriptSpecific = function () {
        return !1;
      }),
      (t.prototype.isIncrementallyUnusable = function () {
        return 0 !== (2 & this.data());
      }),
      (t.prototype.parsedInStrictMode = function () {
        return 0 !== (4 & this.data());
      }),
      (t.prototype.fullWidth = function () {
        return this.data() >>> 3;
      }),
      (t.prototype.computeData = function () {
        for (
          var e = this.childCount(),
            t = 0,
            n = 0,
            r = 0 !== (2 & this._data) || 0 === e,
            i = 0,
            o = e;
          o > i;
          i++
        ) {
          var s = this.childAt(i);
          null !== s &&
            ((n = s.fullWidth()),
            (t += n),
            r || (r = s.isIncrementallyUnusable()));
        }
        return (t << 3) | (r ? 2 : 0) | 1;
      }),
      (t.prototype.data = function () {
        return (
          0 === (1 & this._data) && (this._data |= this.computeData()),
          this._data
        );
      }),
      (t.prototype.findToken = function (t, n) {
        "undefined" == typeof n && (n = !1);
        var r = this.tryGetEndOfFileAt(t);
        if (null !== r) return r;
        if (0 > t || t >= this.fullWidth())
          throw e.Errors.argumentOutOfRange("position");
        var i = this.findTokenInternal(null, t, 0);
        return n ? e.Syntax.findSkippedTokenInPositionedToken(i, t) || i : i;
      }),
      (t.prototype.tryGetEndOfFileAt = function (t) {
        if (120 === this.kind() && t === this.fullWidth()) {
          var n = this;
          return new e.PositionedToken(
            new e.PositionedNode(null, n, 0),
            n.endOfFileToken,
            n.moduleElements.fullWidth()
          );
        }
        return null;
      }),
      (t.prototype.findTokenInternal = function (t, n, r) {
        t = new e.PositionedNode(t, this, r);
        for (var i = 0, o = this.childCount(); o > i; i++) {
          var s = this.childAt(i);
          if (null !== s) {
            var a = s.fullWidth();
            if (a > n) return s.findTokenInternal(t, n, r);
            (n -= a), (r += a);
          }
        }
        throw e.Errors.invalidOperation();
      }),
      (t.prototype.findTokenOnLeft = function (t, n) {
        "undefined" == typeof n && (n = !1);
        var r = this.findToken(t, !1),
          i = r.start();
        return (
          n && (r = e.Syntax.findSkippedTokenOnLeft(r, t) || r),
          t > i ? r : 0 === r.fullStart() ? null : r.previousToken(n)
        );
      }),
      (t.prototype.findCompleteTokenOnLeft = function (t, n) {
        "undefined" == typeof n && (n = !1);
        var r = this.findToken(t, !1);
        return (
          n && (r = e.Syntax.findSkippedTokenOnLeft(r, t) || r),
          r.token().width() > 0 && t >= r.end() ? r : r.previousToken(n)
        );
      }),
      (t.prototype.isModuleElement = function () {
        return !1;
      }),
      (t.prototype.isClassElement = function () {
        return !1;
      }),
      (t.prototype.isTypeMember = function () {
        return !1;
      }),
      (t.prototype.isStatement = function () {
        return !1;
      }),
      (t.prototype.isExpression = function () {
        return !1;
      }),
      (t.prototype.isSwitchClause = function () {
        return !1;
      }),
      (t.prototype.structuralEquals = function (t) {
        if (this === t) return !0;
        if (null === t) return !1;
        if (this.kind() !== t.kind()) return !1;
        for (var n = 0, r = this.childCount(); r > n; n++) {
          var i = this.childAt(n),
            o = t.childAt(n);
          if (!e.Syntax.elementStructuralEquals(i, o)) return !1;
        }
        return !0;
      }),
      (t.prototype.width = function () {
        return (
          this.fullWidth() -
          this.leadingTriviaWidth() -
          this.trailingTriviaWidth()
        );
      }),
      (t.prototype.leadingTriviaWidth = function () {
        var e = this.firstToken();
        return null === e ? 0 : e.leadingTriviaWidth();
      }),
      (t.prototype.trailingTriviaWidth = function () {
        var e = this.lastToken();
        return null === e ? 0 : e.trailingTriviaWidth();
      }),
      t
    );
  })();
  e.SyntaxNode = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.moduleElements = e), (this.endOfFileToken = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitSourceUnit(this);
      }),
      (n.prototype.kind = function () {
        return 120;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.moduleElements;
          case 1:
            return this.endOfFileToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.moduleElements === e && this.endOfFileToken === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create = function (t) {
        return new n(e.Syntax.emptyList, t, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.emptyList, t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModuleElements = function (e) {
        return this.update(e, this.endOfFileToken);
      }),
      (n.prototype.withModuleElement = function (t) {
        return this.withModuleElements(e.Syntax.list([t]));
      }),
      (n.prototype.withEndOfFileToken = function (e) {
        return this.update(this.moduleElements, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.moduleElements.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.SourceUnitSyntax = t;
  var n = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.requireKeyword = e),
        (this.openParenToken = n),
        (this.stringLiteral = r),
        (this.closeParenToken = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitExternalModuleReference(this);
      }),
      (n.prototype.kind = function () {
        return 245;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.requireKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.stringLiteral;
          case 3:
            return this.closeParenToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleReference = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.requireKeyword === e &&
          this.openParenToken === t &&
          this.stringLiteral === r &&
          this.closeParenToken === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(66),
          e.Syntax.token(72),
          t,
          e.Syntax.token(73),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withRequireKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.stringLiteral,
          this.closeParenToken
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.requireKeyword,
          e,
          this.stringLiteral,
          this.closeParenToken
        );
      }),
      (n.prototype.withStringLiteral = function (e) {
        return this.update(
          this.requireKeyword,
          this.openParenToken,
          e,
          this.closeParenToken
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.requireKeyword,
          this.openParenToken,
          this.stringLiteral,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ExternalModuleReferenceSyntax = n;
  var r = (function (t) {
    function n(e, n) {
      t.call(this, n), (this.moduleName = e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitModuleNameModuleReference(this);
      }),
      (n.prototype.kind = function () {
        return 246;
      }),
      (n.prototype.childCount = function () {
        return 1;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.moduleName;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleReference = function () {
        return !0;
      }),
      (n.prototype.update = function (e) {
        return this.moduleName === e
          ? this
          : new n(e, this.parsedInStrictMode());
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModuleName = function (e) {
        return this.update(e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ModuleNameModuleReferenceSyntax = r;
  var i = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.modifiers = e),
        (this.importKeyword = n),
        (this.identifier = r),
        (this.equalsToken = i),
        (this.moduleReference = o),
        (this.semicolonToken = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitImportDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 133;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.importKeyword;
          case 2:
            return this.identifier;
          case 3:
            return this.equalsToken;
          case 4:
            return this.moduleReference;
          case 5:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.modifiers === e &&
          this.importKeyword === t &&
          this.identifier === r &&
          this.equalsToken === i &&
          this.moduleReference === o &&
          this.semicolonToken === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i, o, s) {
        return new n(e.Syntax.emptyList, t, r, i, o, s, !1);
      }),
      (n.create1 = function (t, r) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(49),
          t,
          e.Syntax.token(107),
          r,
          e.Syntax.token(78),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.importKeyword,
          this.identifier,
          this.equalsToken,
          this.moduleReference,
          this.semicolonToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withImportKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.identifier,
          this.equalsToken,
          this.moduleReference,
          this.semicolonToken
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.modifiers,
          this.importKeyword,
          e,
          this.equalsToken,
          this.moduleReference,
          this.semicolonToken
        );
      }),
      (n.prototype.withEqualsToken = function (e) {
        return this.update(
          this.modifiers,
          this.importKeyword,
          this.identifier,
          e,
          this.moduleReference,
          this.semicolonToken
        );
      }),
      (n.prototype.withModuleReference = function (e) {
        return this.update(
          this.modifiers,
          this.importKeyword,
          this.identifier,
          this.equalsToken,
          e,
          this.semicolonToken
        );
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(
          this.modifiers,
          this.importKeyword,
          this.identifier,
          this.equalsToken,
          this.moduleReference,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ImportDeclarationSyntax = i;
  var o = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.exportKeyword = e),
        (this.equalsToken = n),
        (this.identifier = r),
        (this.semicolonToken = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitExportAssignment(this);
      }),
      (n.prototype.kind = function () {
        return 134;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.exportKeyword;
          case 1:
            return this.equalsToken;
          case 2:
            return this.identifier;
          case 3:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.exportKeyword === e &&
          this.equalsToken === t &&
          this.identifier === r &&
          this.semicolonToken === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(47),
          e.Syntax.token(107),
          t,
          e.Syntax.token(78),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withExportKeyword = function (e) {
        return this.update(
          e,
          this.equalsToken,
          this.identifier,
          this.semicolonToken
        );
      }),
      (n.prototype.withEqualsToken = function (e) {
        return this.update(
          this.exportKeyword,
          e,
          this.identifier,
          this.semicolonToken
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.exportKeyword,
          this.equalsToken,
          e,
          this.semicolonToken
        );
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(
          this.exportKeyword,
          this.equalsToken,
          this.identifier,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ExportAssignmentSyntax = o;
  var s = (function (t) {
    function n(e, n, r, i, o, s, a, l, c) {
      t.call(this, c),
        (this.modifiers = e),
        (this.classKeyword = n),
        (this.identifier = r),
        (this.typeParameterList = i),
        (this.heritageClauses = o),
        (this.openBraceToken = s),
        (this.classElements = a),
        (this.closeBraceToken = l);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitClassDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 131;
      }),
      (n.prototype.childCount = function () {
        return 8;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.classKeyword;
          case 2:
            return this.identifier;
          case 3:
            return this.typeParameterList;
          case 4:
            return this.heritageClauses;
          case 5:
            return this.openBraceToken;
          case 6:
            return this.classElements;
          case 7:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s, a, l) {
        return this.modifiers === e &&
          this.classKeyword === t &&
          this.identifier === r &&
          this.typeParameterList === i &&
          this.heritageClauses === o &&
          this.openBraceToken === s &&
          this.classElements === a &&
          this.closeBraceToken === l
          ? this
          : new n(e, t, r, i, o, s, a, l, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i, o) {
        return new n(
          e.Syntax.emptyList,
          t,
          r,
          null,
          e.Syntax.emptyList,
          i,
          e.Syntax.emptyList,
          o,
          !1
        );
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(44),
          t,
          null,
          e.Syntax.emptyList,
          e.Syntax.token(70),
          e.Syntax.emptyList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.classKeyword,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          this.openBraceToken,
          this.classElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withClassKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          this.openBraceToken,
          this.classElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.modifiers,
          this.classKeyword,
          e,
          this.typeParameterList,
          this.heritageClauses,
          this.openBraceToken,
          this.classElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withTypeParameterList = function (e) {
        return this.update(
          this.modifiers,
          this.classKeyword,
          this.identifier,
          e,
          this.heritageClauses,
          this.openBraceToken,
          this.classElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withHeritageClauses = function (e) {
        return this.update(
          this.modifiers,
          this.classKeyword,
          this.identifier,
          this.typeParameterList,
          e,
          this.openBraceToken,
          this.classElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withHeritageClause = function (t) {
        return this.withHeritageClauses(e.Syntax.list([t]));
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(
          this.modifiers,
          this.classKeyword,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          e,
          this.classElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withClassElements = function (e) {
        return this.update(
          this.modifiers,
          this.classKeyword,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          this.openBraceToken,
          e,
          this.closeBraceToken
        );
      }),
      (n.prototype.withClassElement = function (t) {
        return this.withClassElements(e.Syntax.list([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(
          this.modifiers,
          this.classKeyword,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          this.openBraceToken,
          this.classElements,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ClassDeclarationSyntax = s;
  var a = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.modifiers = e),
        (this.interfaceKeyword = n),
        (this.identifier = r),
        (this.typeParameterList = i),
        (this.heritageClauses = o),
        (this.body = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitInterfaceDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 128;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.interfaceKeyword;
          case 2:
            return this.identifier;
          case 3:
            return this.typeParameterList;
          case 4:
            return this.heritageClauses;
          case 5:
            return this.body;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.modifiers === e &&
          this.interfaceKeyword === t &&
          this.identifier === r &&
          this.typeParameterList === i &&
          this.heritageClauses === o &&
          this.body === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i) {
        return new n(e.Syntax.emptyList, t, r, null, e.Syntax.emptyList, i, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(52),
          t,
          null,
          e.Syntax.emptyList,
          x.create1(),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.interfaceKeyword,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          this.body
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withInterfaceKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          this.body
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.modifiers,
          this.interfaceKeyword,
          e,
          this.typeParameterList,
          this.heritageClauses,
          this.body
        );
      }),
      (n.prototype.withTypeParameterList = function (e) {
        return this.update(
          this.modifiers,
          this.interfaceKeyword,
          this.identifier,
          e,
          this.heritageClauses,
          this.body
        );
      }),
      (n.prototype.withHeritageClauses = function (e) {
        return this.update(
          this.modifiers,
          this.interfaceKeyword,
          this.identifier,
          this.typeParameterList,
          e,
          this.body
        );
      }),
      (n.prototype.withHeritageClause = function (t) {
        return this.withHeritageClauses(e.Syntax.list([t]));
      }),
      (n.prototype.withBody = function (e) {
        return this.update(
          this.modifiers,
          this.interfaceKeyword,
          this.identifier,
          this.typeParameterList,
          this.heritageClauses,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.InterfaceDeclarationSyntax = a;
  var l = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.extendsOrImplementsKeyword = n),
        (this.typeNames = r),
        (this._kind = e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitHeritageClause(this);
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.extendsOrImplementsKeyword;
          case 1:
            return this.typeNames;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.kind = function () {
        return this._kind;
      }),
      (n.prototype.update = function (e, t, r) {
        return this._kind === e &&
          this.extendsOrImplementsKeyword === t &&
          this.typeNames === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withKind = function (e) {
        return this.update(e, this.extendsOrImplementsKeyword, this.typeNames);
      }),
      (n.prototype.withExtendsOrImplementsKeyword = function (e) {
        return this.update(this._kind, e, this.typeNames);
      }),
      (n.prototype.withTypeNames = function (e) {
        return this.update(this._kind, this.extendsOrImplementsKeyword, e);
      }),
      (n.prototype.withTypeName = function (t) {
        return this.withTypeNames(e.Syntax.separatedList([t]));
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.HeritageClauseSyntax = l;
  var c = (function (t) {
    function n(e, n, r, i, o, s, a, l) {
      t.call(this, l),
        (this.modifiers = e),
        (this.moduleKeyword = n),
        (this.name = r),
        (this.stringLiteral = i),
        (this.openBraceToken = o),
        (this.moduleElements = s),
        (this.closeBraceToken = a);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitModuleDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 130;
      }),
      (n.prototype.childCount = function () {
        return 7;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.moduleKeyword;
          case 2:
            return this.name;
          case 3:
            return this.stringLiteral;
          case 4:
            return this.openBraceToken;
          case 5:
            return this.moduleElements;
          case 6:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s, a) {
        return this.modifiers === e &&
          this.moduleKeyword === t &&
          this.name === r &&
          this.stringLiteral === i &&
          this.openBraceToken === o &&
          this.moduleElements === s &&
          this.closeBraceToken === a
          ? this
          : new n(e, t, r, i, o, s, a, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i) {
        return new n(
          e.Syntax.emptyList,
          t,
          null,
          null,
          r,
          e.Syntax.emptyList,
          i,
          !1
        );
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(65),
          null,
          null,
          e.Syntax.token(70),
          e.Syntax.emptyList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.moduleKeyword,
          this.name,
          this.stringLiteral,
          this.openBraceToken,
          this.moduleElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withModuleKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.name,
          this.stringLiteral,
          this.openBraceToken,
          this.moduleElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withName = function (e) {
        return this.update(
          this.modifiers,
          this.moduleKeyword,
          e,
          this.stringLiteral,
          this.openBraceToken,
          this.moduleElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withStringLiteral = function (e) {
        return this.update(
          this.modifiers,
          this.moduleKeyword,
          this.name,
          e,
          this.openBraceToken,
          this.moduleElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(
          this.modifiers,
          this.moduleKeyword,
          this.name,
          this.stringLiteral,
          e,
          this.moduleElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withModuleElements = function (e) {
        return this.update(
          this.modifiers,
          this.moduleKeyword,
          this.name,
          this.stringLiteral,
          this.openBraceToken,
          e,
          this.closeBraceToken
        );
      }),
      (n.prototype.withModuleElement = function (t) {
        return this.withModuleElements(e.Syntax.list([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(
          this.modifiers,
          this.moduleKeyword,
          this.name,
          this.stringLiteral,
          this.openBraceToken,
          this.moduleElements,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ModuleDeclarationSyntax = c;
  var u = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.modifiers = e),
        (this.functionKeyword = n),
        (this.identifier = r),
        (this.callSignature = i),
        (this.block = o),
        (this.semicolonToken = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitFunctionDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 129;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.functionKeyword;
          case 2:
            return this.identifier;
          case 3:
            return this.callSignature;
          case 4:
            return this.block;
          case 5:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.modifiers === e &&
          this.functionKeyword === t &&
          this.identifier === r &&
          this.callSignature === i &&
          this.block === o &&
          this.semicolonToken === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i) {
        return new n(e.Syntax.emptyList, t, r, i, null, null, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(27),
          t,
          H.create1(),
          null,
          null,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.functionKeyword,
          this.identifier,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withFunctionKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.identifier,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.modifiers,
          this.functionKeyword,
          e,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(
          this.modifiers,
          this.functionKeyword,
          this.identifier,
          e,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.modifiers,
          this.functionKeyword,
          this.identifier,
          this.callSignature,
          e,
          this.semicolonToken
        );
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(
          this.modifiers,
          this.functionKeyword,
          this.identifier,
          this.callSignature,
          this.block,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.modifiers.childCount() > 0
          ? !0
          : this.callSignature.isTypeScriptSpecific()
          ? !0
          : null !== this.block && this.block.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.FunctionDeclarationSyntax = u;
  var p = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.modifiers = e),
        (this.variableDeclaration = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitVariableStatement(this);
      }),
      (n.prototype.kind = function () {
        return 148;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.variableDeclaration;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.modifiers === e &&
          this.variableDeclaration === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(e.Syntax.emptyList, t, r, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.emptyList, t, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(e, this.variableDeclaration, this.semicolonToken);
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withVariableDeclaration = function (e) {
        return this.update(this.modifiers, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.modifiers, this.variableDeclaration, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.modifiers.childCount() > 0
          ? !0
          : this.variableDeclaration.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.VariableStatementSyntax = p;
  var h = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.varKeyword = e), (this.variableDeclarators = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitVariableDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 224;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.varKeyword;
          case 1:
            return this.variableDeclarators;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.varKeyword === e && this.variableDeclarators === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(40), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withVarKeyword = function (e) {
        return this.update(e, this.variableDeclarators);
      }),
      (n.prototype.withVariableDeclarators = function (e) {
        return this.update(this.varKeyword, e);
      }),
      (n.prototype.withVariableDeclarator = function (t) {
        return this.withVariableDeclarators(e.Syntax.separatedList([t]));
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.variableDeclarators.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.VariableDeclarationSyntax = h;
  var d = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.propertyName = e),
        (this.typeAnnotation = n),
        (this.equalsValueClause = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitVariableDeclarator(this);
      }),
      (n.prototype.kind = function () {
        return 225;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.propertyName;
          case 1:
            return this.typeAnnotation;
          case 2:
            return this.equalsValueClause;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r) {
        return this.propertyName === e &&
          this.typeAnnotation === t &&
          this.equalsValueClause === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e) {
        return new n(e, null, null, !1);
      }),
      (n.create1 = function (e) {
        return new n(e, null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(e, this.typeAnnotation, this.equalsValueClause);
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(this.propertyName, e, this.equalsValueClause);
      }),
      (n.prototype.withEqualsValueClause = function (e) {
        return this.update(this.propertyName, this.typeAnnotation, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.typeAnnotation
          ? !0
          : null !== this.equalsValueClause &&
            this.equalsValueClause.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.VariableDeclaratorSyntax = d;
  var m = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.equalsToken = e), (this.value = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitEqualsValueClause(this);
      }),
      (n.prototype.kind = function () {
        return 232;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.equalsToken;
          case 1:
            return this.value;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.equalsToken === e && this.value === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(107), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withEqualsToken = function (e) {
        return this.update(e, this.value);
      }),
      (n.prototype.withValue = function (e) {
        return this.update(this.equalsToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.value.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.EqualsValueClauseSyntax = m;
  var f = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.operatorToken = n),
        (this.operand = r),
        (this._kind = e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitPrefixUnaryExpression(this);
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.operatorToken;
          case 1:
            return this.operand;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.kind = function () {
        return this._kind;
      }),
      (n.prototype.update = function (e, t, r) {
        return this._kind === e &&
          this.operatorToken === t &&
          this.operand === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withKind = function (e) {
        return this.update(e, this.operatorToken, this.operand);
      }),
      (n.prototype.withOperatorToken = function (e) {
        return this.update(this._kind, e, this.operand);
      }),
      (n.prototype.withOperand = function (e) {
        return this.update(this._kind, this.operatorToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.operand.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.PrefixUnaryExpressionSyntax = f;
  var g = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.openBracketToken = e),
        (this.expressions = n),
        (this.closeBracketToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitArrayLiteralExpression(this);
      }),
      (n.prototype.kind = function () {
        return 214;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openBracketToken;
          case 1:
            return this.expressions;
          case 2:
            return this.closeBracketToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPrimaryExpression = function () {
        return !0;
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.openBracketToken === e &&
          this.expressions === t &&
          this.closeBracketToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(74),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(75),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenBracketToken = function (e) {
        return this.update(e, this.expressions, this.closeBracketToken);
      }),
      (n.prototype.withExpressions = function (e) {
        return this.update(this.openBracketToken, e, this.closeBracketToken);
      }),
      (n.prototype.withExpression = function (t) {
        return this.withExpressions(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withCloseBracketToken = function (e) {
        return this.update(this.openBracketToken, this.expressions, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expressions.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ArrayLiteralExpressionSyntax = g;
  var v = (function (t) {
    function n(e) {
      t.call(this, e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitOmittedExpression(this);
      }),
      (n.prototype.kind = function () {
        return 223;
      }),
      (n.prototype.childCount = function () {
        return 0;
      }),
      (n.prototype.childAt = function () {
        throw e.Errors.invalidOperation();
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function () {
        return this;
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.OmittedExpressionSyntax = v;
  var y = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.openParenToken = e),
        (this.expression = n),
        (this.closeParenToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitParenthesizedExpression(this);
      }),
      (n.prototype.kind = function () {
        return 217;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openParenToken;
          case 1:
            return this.expression;
          case 2:
            return this.closeParenToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPrimaryExpression = function () {
        return !0;
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.openParenToken === e &&
          this.expression === t &&
          this.closeParenToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(72), t, e.Syntax.token(73), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(e, this.expression, this.closeParenToken);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.openParenToken, e, this.closeParenToken);
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(this.openParenToken, this.expression, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ParenthesizedExpressionSyntax = y;
  var b = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.identifier = e),
        (this.equalsGreaterThanToken = n),
        (this.block = r),
        (this.expression = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitSimpleArrowFunctionExpression(this);
      }),
      (n.prototype.kind = function () {
        return 219;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.identifier;
          case 1:
            return this.equalsGreaterThanToken;
          case 2:
            return this.block;
          case 3:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isArrowFunctionExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.identifier === e &&
          this.equalsGreaterThanToken === t &&
          this.block === r &&
          this.expression === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, t, null, null, !1);
      }),
      (n.create1 = function (t) {
        return new n(t, e.Syntax.token(85), null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          e,
          this.equalsGreaterThanToken,
          this.block,
          this.expression
        );
      }),
      (n.prototype.withEqualsGreaterThanToken = function (e) {
        return this.update(this.identifier, e, this.block, this.expression);
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.identifier,
          this.equalsGreaterThanToken,
          e,
          this.expression
        );
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          this.identifier,
          this.equalsGreaterThanToken,
          this.block,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.SimpleArrowFunctionExpressionSyntax = b;
  var _ = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.callSignature = e),
        (this.equalsGreaterThanToken = n),
        (this.block = r),
        (this.expression = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitParenthesizedArrowFunctionExpression(this);
      }),
      (n.prototype.kind = function () {
        return 218;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.callSignature;
          case 1:
            return this.equalsGreaterThanToken;
          case 2:
            return this.block;
          case 3:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isArrowFunctionExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.callSignature === e &&
          this.equalsGreaterThanToken === t &&
          this.block === r &&
          this.expression === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, t, null, null, !1);
      }),
      (n.create1 = function () {
        return new n(H.create1(), e.Syntax.token(85), null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(
          e,
          this.equalsGreaterThanToken,
          this.block,
          this.expression
        );
      }),
      (n.prototype.withEqualsGreaterThanToken = function (e) {
        return this.update(this.callSignature, e, this.block, this.expression);
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.callSignature,
          this.equalsGreaterThanToken,
          e,
          this.expression
        );
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          this.callSignature,
          this.equalsGreaterThanToken,
          this.block,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ParenthesizedArrowFunctionExpressionSyntax = _;
  var w = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i), (this.left = e), (this.dotToken = n), (this.right = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitQualifiedName(this);
      }),
      (n.prototype.kind = function () {
        return 121;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.left;
          case 1:
            return this.dotToken;
          case 2:
            return this.right;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isName = function () {
        return !0;
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.left === e && this.dotToken === t && this.right === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(t, e.Syntax.token(76), r, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withLeft = function (e) {
        return this.update(e, this.dotToken, this.right);
      }),
      (n.prototype.withDotToken = function (e) {
        return this.update(this.left, e, this.right);
      }),
      (n.prototype.withRight = function (e) {
        return this.update(this.left, this.dotToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.QualifiedNameSyntax = w;
  var S = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.lessThanToken = e),
        (this.typeArguments = n),
        (this.greaterThanToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTypeArgumentList(this);
      }),
      (n.prototype.kind = function () {
        return 228;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.lessThanToken;
          case 1:
            return this.typeArguments;
          case 2:
            return this.greaterThanToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r) {
        return this.lessThanToken === e &&
          this.typeArguments === t &&
          this.greaterThanToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(80),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(81),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withLessThanToken = function (e) {
        return this.update(e, this.typeArguments, this.greaterThanToken);
      }),
      (n.prototype.withTypeArguments = function (e) {
        return this.update(this.lessThanToken, e, this.greaterThanToken);
      }),
      (n.prototype.withTypeArgument = function (t) {
        return this.withTypeArguments(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withGreaterThanToken = function (e) {
        return this.update(this.lessThanToken, this.typeArguments, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TypeArgumentListSyntax = S;
  var T = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.newKeyword = e),
        (this.typeParameterList = n),
        (this.parameterList = r),
        (this.equalsGreaterThanToken = i),
        (this.type = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitConstructorType(this);
      }),
      (n.prototype.kind = function () {
        return 125;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.newKeyword;
          case 1:
            return this.typeParameterList;
          case 2:
            return this.parameterList;
          case 3:
            return this.equalsGreaterThanToken;
          case 4:
            return this.type;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.newKeyword === e &&
          this.typeParameterList === t &&
          this.parameterList === r &&
          this.equalsGreaterThanToken === i &&
          this.type === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r, i) {
        return new n(e, null, t, r, i, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(31),
          null,
          $.create1(),
          e.Syntax.token(85),
          t,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withNewKeyword = function (e) {
        return this.update(
          e,
          this.typeParameterList,
          this.parameterList,
          this.equalsGreaterThanToken,
          this.type
        );
      }),
      (n.prototype.withTypeParameterList = function (e) {
        return this.update(
          this.newKeyword,
          e,
          this.parameterList,
          this.equalsGreaterThanToken,
          this.type
        );
      }),
      (n.prototype.withParameterList = function (e) {
        return this.update(
          this.newKeyword,
          this.typeParameterList,
          e,
          this.equalsGreaterThanToken,
          this.type
        );
      }),
      (n.prototype.withEqualsGreaterThanToken = function (e) {
        return this.update(
          this.newKeyword,
          this.typeParameterList,
          this.parameterList,
          e,
          this.type
        );
      }),
      (n.prototype.withType = function (e) {
        return this.update(
          this.newKeyword,
          this.typeParameterList,
          this.parameterList,
          this.equalsGreaterThanToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ConstructorTypeSyntax = T;
  var k = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.typeParameterList = e),
        (this.parameterList = n),
        (this.equalsGreaterThanToken = r),
        (this.type = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitFunctionType(this);
      }),
      (n.prototype.kind = function () {
        return 123;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.typeParameterList;
          case 1:
            return this.parameterList;
          case 2:
            return this.equalsGreaterThanToken;
          case 3:
            return this.type;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.typeParameterList === e &&
          this.parameterList === t &&
          this.equalsGreaterThanToken === r &&
          this.type === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r) {
        return new n(null, e, t, r, !1);
      }),
      (n.create1 = function (t) {
        return new n(null, $.create1(), e.Syntax.token(85), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withTypeParameterList = function (e) {
        return this.update(
          e,
          this.parameterList,
          this.equalsGreaterThanToken,
          this.type
        );
      }),
      (n.prototype.withParameterList = function (e) {
        return this.update(
          this.typeParameterList,
          e,
          this.equalsGreaterThanToken,
          this.type
        );
      }),
      (n.prototype.withEqualsGreaterThanToken = function (e) {
        return this.update(
          this.typeParameterList,
          this.parameterList,
          e,
          this.type
        );
      }),
      (n.prototype.withType = function (e) {
        return this.update(
          this.typeParameterList,
          this.parameterList,
          this.equalsGreaterThanToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.FunctionTypeSyntax = k;
  var x = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.openBraceToken = e),
        (this.typeMembers = n),
        (this.closeBraceToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitObjectType(this);
      }),
      (n.prototype.kind = function () {
        return 122;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openBraceToken;
          case 1:
            return this.typeMembers;
          case 2:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.openBraceToken === e &&
          this.typeMembers === t &&
          this.closeBraceToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(70),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(e, this.typeMembers, this.closeBraceToken);
      }),
      (n.prototype.withTypeMembers = function (e) {
        return this.update(this.openBraceToken, e, this.closeBraceToken);
      }),
      (n.prototype.withTypeMember = function (t) {
        return this.withTypeMembers(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(this.openBraceToken, this.typeMembers, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ObjectTypeSyntax = x;
  var C = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.type = e),
        (this.openBracketToken = n),
        (this.closeBracketToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitArrayType(this);
      }),
      (n.prototype.kind = function () {
        return 124;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.type;
          case 1:
            return this.openBracketToken;
          case 2:
            return this.closeBracketToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.type === e &&
          this.openBracketToken === t &&
          this.closeBracketToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(t, e.Syntax.token(74), e.Syntax.token(75), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withType = function (e) {
        return this.update(e, this.openBracketToken, this.closeBracketToken);
      }),
      (n.prototype.withOpenBracketToken = function (e) {
        return this.update(this.type, e, this.closeBracketToken);
      }),
      (n.prototype.withCloseBracketToken = function (e) {
        return this.update(this.type, this.openBracketToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ArrayTypeSyntax = C;
  var E = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.name = e), (this.typeArgumentList = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitGenericType(this);
      }),
      (n.prototype.kind = function () {
        return 126;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.name;
          case 1:
            return this.typeArgumentList;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.name === e && this.typeArgumentList === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (e) {
        return new n(e, S.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withName = function (e) {
        return this.update(e, this.typeArgumentList);
      }),
      (n.prototype.withTypeArgumentList = function (e) {
        return this.update(this.name, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.GenericTypeSyntax = E;
  var A = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.typeOfKeyword = e), (this.name = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTypeQuery(this);
      }),
      (n.prototype.kind = function () {
        return 127;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.typeOfKeyword;
          case 1:
            return this.name;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isType = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.typeOfKeyword === e && this.name === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(39), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withTypeOfKeyword = function (e) {
        return this.update(e, this.name);
      }),
      (n.prototype.withName = function (e) {
        return this.update(this.typeOfKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TypeQuerySyntax = A;
  var L = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.colonToken = e), (this.type = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTypeAnnotation(this);
      }),
      (n.prototype.kind = function () {
        return 244;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.colonToken;
          case 1:
            return this.type;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.colonToken === e && this.type === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(106), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withColonToken = function (e) {
        return this.update(e, this.type);
      }),
      (n.prototype.withType = function (e) {
        return this.update(this.colonToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TypeAnnotationSyntax = L;
  var I = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.openBraceToken = e),
        (this.statements = n),
        (this.closeBraceToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitBlock(this);
      }),
      (n.prototype.kind = function () {
        return 146;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openBraceToken;
          case 1:
            return this.statements;
          case 2:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.openBraceToken === e &&
          this.statements === t &&
          this.closeBraceToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptyList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(70),
          e.Syntax.emptyList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(e, this.statements, this.closeBraceToken);
      }),
      (n.prototype.withStatements = function (e) {
        return this.update(this.openBraceToken, e, this.closeBraceToken);
      }),
      (n.prototype.withStatement = function (t) {
        return this.withStatements(e.Syntax.list([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(this.openBraceToken, this.statements, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.statements.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.BlockSyntax = I;
  var D = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.dotDotDotToken = e),
        (this.modifiers = n),
        (this.identifier = r),
        (this.questionToken = i),
        (this.typeAnnotation = o),
        (this.equalsValueClause = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitParameter(this);
      }),
      (n.prototype.kind = function () {
        return 242;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.dotDotDotToken;
          case 1:
            return this.modifiers;
          case 2:
            return this.identifier;
          case 3:
            return this.questionToken;
          case 4:
            return this.typeAnnotation;
          case 5:
            return this.equalsValueClause;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.dotDotDotToken === e &&
          this.modifiers === t &&
          this.identifier === r &&
          this.questionToken === i &&
          this.typeAnnotation === o &&
          this.equalsValueClause === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (t) {
        return new n(null, e.Syntax.emptyList, t, null, null, null, !1);
      }),
      (n.create1 = function (t) {
        return new n(null, e.Syntax.emptyList, t, null, null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withDotDotDotToken = function (e) {
        return this.update(
          e,
          this.modifiers,
          this.identifier,
          this.questionToken,
          this.typeAnnotation,
          this.equalsValueClause
        );
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          this.dotDotDotToken,
          e,
          this.identifier,
          this.questionToken,
          this.typeAnnotation,
          this.equalsValueClause
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.dotDotDotToken,
          this.modifiers,
          e,
          this.questionToken,
          this.typeAnnotation,
          this.equalsValueClause
        );
      }),
      (n.prototype.withQuestionToken = function (e) {
        return this.update(
          this.dotDotDotToken,
          this.modifiers,
          this.identifier,
          e,
          this.typeAnnotation,
          this.equalsValueClause
        );
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(
          this.dotDotDotToken,
          this.modifiers,
          this.identifier,
          this.questionToken,
          e,
          this.equalsValueClause
        );
      }),
      (n.prototype.withEqualsValueClause = function (e) {
        return this.update(
          this.dotDotDotToken,
          this.modifiers,
          this.identifier,
          this.questionToken,
          this.typeAnnotation,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.dotDotDotToken
          ? !0
          : this.modifiers.isTypeScriptSpecific()
          ? !0
          : null !== this.questionToken
          ? !0
          : null !== this.typeAnnotation
          ? !0
          : null !== this.equalsValueClause
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ParameterSyntax = D;
  var P = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.expression = e),
        (this.dotToken = n),
        (this.name = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitMemberAccessExpression(this);
      }),
      (n.prototype.kind = function () {
        return 212;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.expression;
          case 1:
            return this.dotToken;
          case 2:
            return this.name;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.expression === e && this.dotToken === t && this.name === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(t, e.Syntax.token(76), r, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(e, this.dotToken, this.name);
      }),
      (n.prototype.withDotToken = function (e) {
        return this.update(this.expression, e, this.name);
      }),
      (n.prototype.withName = function (e) {
        return this.update(this.expression, this.dotToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.MemberAccessExpressionSyntax = P;
  var N = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.operand = n),
        (this.operatorToken = r),
        (this._kind = e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitPostfixUnaryExpression(this);
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.operand;
          case 1:
            return this.operatorToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.kind = function () {
        return this._kind;
      }),
      (n.prototype.update = function (e, t, r) {
        return this._kind === e &&
          this.operand === t &&
          this.operatorToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withKind = function (e) {
        return this.update(e, this.operand, this.operatorToken);
      }),
      (n.prototype.withOperand = function (e) {
        return this.update(this._kind, e, this.operatorToken);
      }),
      (n.prototype.withOperatorToken = function (e) {
        return this.update(this._kind, this.operand, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.operand.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.PostfixUnaryExpressionSyntax = N;
  var M = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.expression = e),
        (this.openBracketToken = n),
        (this.argumentExpression = r),
        (this.closeBracketToken = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitElementAccessExpression(this);
      }),
      (n.prototype.kind = function () {
        return 221;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.expression;
          case 1:
            return this.openBracketToken;
          case 2:
            return this.argumentExpression;
          case 3:
            return this.closeBracketToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.expression === e &&
          this.openBracketToken === t &&
          this.argumentExpression === r &&
          this.closeBracketToken === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(t, e.Syntax.token(74), r, e.Syntax.token(75), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          e,
          this.openBracketToken,
          this.argumentExpression,
          this.closeBracketToken
        );
      }),
      (n.prototype.withOpenBracketToken = function (e) {
        return this.update(
          this.expression,
          e,
          this.argumentExpression,
          this.closeBracketToken
        );
      }),
      (n.prototype.withArgumentExpression = function (e) {
        return this.update(
          this.expression,
          this.openBracketToken,
          e,
          this.closeBracketToken
        );
      }),
      (n.prototype.withCloseBracketToken = function (e) {
        return this.update(
          this.expression,
          this.openBracketToken,
          this.argumentExpression,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific()
          ? !0
          : this.argumentExpression.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ElementAccessExpressionSyntax = M;
  var R = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.expression = e), (this.argumentList = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitInvocationExpression(this);
      }),
      (n.prototype.kind = function () {
        return 213;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.expression;
          case 1:
            return this.argumentList;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.expression === e && this.argumentList === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (e) {
        return new n(e, O.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(e, this.argumentList);
      }),
      (n.prototype.withArgumentList = function (e) {
        return this.update(this.expression, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific()
          ? !0
          : this.argumentList.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.InvocationExpressionSyntax = R;
  var O = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.typeArgumentList = e),
        (this.openParenToken = n),
        (this.closeParenToken = i),
        (this.arguments = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitArgumentList(this);
      }),
      (n.prototype.kind = function () {
        return 226;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.typeArgumentList;
          case 1:
            return this.openParenToken;
          case 2:
            return this.arguments;
          case 3:
            return this.closeParenToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.typeArgumentList === e &&
          this.openParenToken === t &&
          this.arguments === r &&
          this.closeParenToken === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(null, t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          null,
          e.Syntax.token(72),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(73),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withTypeArgumentList = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.arguments,
          this.closeParenToken
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.typeArgumentList,
          e,
          this.arguments,
          this.closeParenToken
        );
      }),
      (n.prototype.withArguments = function (e) {
        return this.update(
          this.typeArgumentList,
          this.openParenToken,
          e,
          this.closeParenToken
        );
      }),
      (n.prototype.withArgument = function (t) {
        return this.withArguments(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.typeArgumentList,
          this.openParenToken,
          this.arguments,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.typeArgumentList &&
          this.typeArgumentList.isTypeScriptSpecific()
          ? !0
          : this.arguments.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ArgumentListSyntax = O;
  var F = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.left = n),
        (this.operatorToken = r),
        (this.right = i),
        (this._kind = e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitBinaryExpression(this);
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.left;
          case 1:
            return this.operatorToken;
          case 2:
            return this.right;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.kind = function () {
        return this._kind;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this._kind === e &&
          this.left === t &&
          this.operatorToken === r &&
          this.right === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withKind = function (e) {
        return this.update(e, this.left, this.operatorToken, this.right);
      }),
      (n.prototype.withLeft = function (e) {
        return this.update(this._kind, e, this.operatorToken, this.right);
      }),
      (n.prototype.withOperatorToken = function (e) {
        return this.update(this._kind, this.left, e, this.right);
      }),
      (n.prototype.withRight = function (e) {
        return this.update(this._kind, this.left, this.operatorToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.left.isTypeScriptSpecific()
          ? !0
          : this.right.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.BinaryExpressionSyntax = F;
  var V = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.condition = e),
        (this.questionToken = n),
        (this.whenTrue = r),
        (this.colonToken = i),
        (this.whenFalse = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitConditionalExpression(this);
      }),
      (n.prototype.kind = function () {
        return 186;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.condition;
          case 1:
            return this.questionToken;
          case 2:
            return this.whenTrue;
          case 3:
            return this.colonToken;
          case 4:
            return this.whenFalse;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.condition === e &&
          this.questionToken === t &&
          this.whenTrue === r &&
          this.colonToken === i &&
          this.whenFalse === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r, i) {
        return new n(t, e.Syntax.token(105), r, e.Syntax.token(106), i, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withCondition = function (e) {
        return this.update(
          e,
          this.questionToken,
          this.whenTrue,
          this.colonToken,
          this.whenFalse
        );
      }),
      (n.prototype.withQuestionToken = function (e) {
        return this.update(
          this.condition,
          e,
          this.whenTrue,
          this.colonToken,
          this.whenFalse
        );
      }),
      (n.prototype.withWhenTrue = function (e) {
        return this.update(
          this.condition,
          this.questionToken,
          e,
          this.colonToken,
          this.whenFalse
        );
      }),
      (n.prototype.withColonToken = function (e) {
        return this.update(
          this.condition,
          this.questionToken,
          this.whenTrue,
          e,
          this.whenFalse
        );
      }),
      (n.prototype.withWhenFalse = function (e) {
        return this.update(
          this.condition,
          this.questionToken,
          this.whenTrue,
          this.colonToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.condition.isTypeScriptSpecific()
          ? !0
          : this.whenTrue.isTypeScriptSpecific()
          ? !0
          : this.whenFalse.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ConditionalExpressionSyntax = V;
  var G = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.newKeyword = e), (this.callSignature = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitConstructSignature(this);
      }),
      (n.prototype.kind = function () {
        return 143;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.newKeyword;
          case 1:
            return this.callSignature;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isTypeMember = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.newKeyword === e && this.callSignature === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(31), H.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withNewKeyword = function (e) {
        return this.update(e, this.callSignature);
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(this.newKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ConstructSignatureSyntax = G;
  var B = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.propertyName = e),
        (this.questionToken = n),
        (this.callSignature = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitMethodSignature(this);
      }),
      (n.prototype.kind = function () {
        return 145;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.propertyName;
          case 1:
            return this.questionToken;
          case 2:
            return this.callSignature;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isTypeMember = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.propertyName === e &&
          this.questionToken === t &&
          this.callSignature === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, null, t, !1);
      }),
      (n.create1 = function (e) {
        return new n(e, null, H.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(e, this.questionToken, this.callSignature);
      }),
      (n.prototype.withQuestionToken = function (e) {
        return this.update(this.propertyName, e, this.callSignature);
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(this.propertyName, this.questionToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.callSignature.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.MethodSignatureSyntax = B;
  var W = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.openBracketToken = e),
        (this.parameter = n),
        (this.closeBracketToken = r),
        (this.typeAnnotation = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitIndexSignature(this);
      }),
      (n.prototype.kind = function () {
        return 144;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openBracketToken;
          case 1:
            return this.parameter;
          case 2:
            return this.closeBracketToken;
          case 3:
            return this.typeAnnotation;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isTypeMember = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.openBracketToken === e &&
          this.parameter === t &&
          this.closeBracketToken === r &&
          this.typeAnnotation === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r) {
        return new n(e, t, r, null, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(74), t, e.Syntax.token(75), null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenBracketToken = function (e) {
        return this.update(
          e,
          this.parameter,
          this.closeBracketToken,
          this.typeAnnotation
        );
      }),
      (n.prototype.withParameter = function (e) {
        return this.update(
          this.openBracketToken,
          e,
          this.closeBracketToken,
          this.typeAnnotation
        );
      }),
      (n.prototype.withCloseBracketToken = function (e) {
        return this.update(
          this.openBracketToken,
          this.parameter,
          e,
          this.typeAnnotation
        );
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(
          this.openBracketToken,
          this.parameter,
          this.closeBracketToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.IndexSignatureSyntax = W;
  var z = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.propertyName = e),
        (this.questionToken = n),
        (this.typeAnnotation = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitPropertySignature(this);
      }),
      (n.prototype.kind = function () {
        return 141;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.propertyName;
          case 1:
            return this.questionToken;
          case 2:
            return this.typeAnnotation;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isTypeMember = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.propertyName === e &&
          this.questionToken === t &&
          this.typeAnnotation === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e) {
        return new n(e, null, null, !1);
      }),
      (n.create1 = function (e) {
        return new n(e, null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(e, this.questionToken, this.typeAnnotation);
      }),
      (n.prototype.withQuestionToken = function (e) {
        return this.update(this.propertyName, e, this.typeAnnotation);
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(this.propertyName, this.questionToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.PropertySignatureSyntax = z;
  var H = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.typeParameterList = e),
        (this.parameterList = n),
        (this.typeAnnotation = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitCallSignature(this);
      }),
      (n.prototype.kind = function () {
        return 142;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.typeParameterList;
          case 1:
            return this.parameterList;
          case 2:
            return this.typeAnnotation;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isTypeMember = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.typeParameterList === e &&
          this.parameterList === t &&
          this.typeAnnotation === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e) {
        return new n(null, e, null, !1);
      }),
      (n.create1 = function () {
        return new n(null, $.create1(), null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withTypeParameterList = function (e) {
        return this.update(e, this.parameterList, this.typeAnnotation);
      }),
      (n.prototype.withParameterList = function (e) {
        return this.update(this.typeParameterList, e, this.typeAnnotation);
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(this.typeParameterList, this.parameterList, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.typeParameterList
          ? !0
          : this.parameterList.isTypeScriptSpecific()
          ? !0
          : null !== this.typeAnnotation
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.CallSignatureSyntax = H;
  var $ = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.openParenToken = e),
        (this.parameters = n),
        (this.closeParenToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitParameterList(this);
      }),
      (n.prototype.kind = function () {
        return 227;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openParenToken;
          case 1:
            return this.parameters;
          case 2:
            return this.closeParenToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r) {
        return this.openParenToken === e &&
          this.parameters === t &&
          this.closeParenToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(72),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(73),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(e, this.parameters, this.closeParenToken);
      }),
      (n.prototype.withParameters = function (e) {
        return this.update(this.openParenToken, e, this.closeParenToken);
      }),
      (n.prototype.withParameter = function (t) {
        return this.withParameters(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(this.openParenToken, this.parameters, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.parameters.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ParameterListSyntax = $;
  var U = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.lessThanToken = e),
        (this.typeParameters = n),
        (this.greaterThanToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTypeParameterList(this);
      }),
      (n.prototype.kind = function () {
        return 229;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.lessThanToken;
          case 1:
            return this.typeParameters;
          case 2:
            return this.greaterThanToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r) {
        return this.lessThanToken === e &&
          this.typeParameters === t &&
          this.greaterThanToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(80),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(81),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withLessThanToken = function (e) {
        return this.update(e, this.typeParameters, this.greaterThanToken);
      }),
      (n.prototype.withTypeParameters = function (e) {
        return this.update(this.lessThanToken, e, this.greaterThanToken);
      }),
      (n.prototype.withTypeParameter = function (t) {
        return this.withTypeParameters(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withGreaterThanToken = function (e) {
        return this.update(this.lessThanToken, this.typeParameters, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TypeParameterListSyntax = U;
  var q = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.identifier = e), (this.constraint = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTypeParameter(this);
      }),
      (n.prototype.kind = function () {
        return 238;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.identifier;
          case 1:
            return this.constraint;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.identifier === e && this.constraint === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create = function (e) {
        return new n(e, null, !1);
      }),
      (n.create1 = function (e) {
        return new n(e, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(e, this.constraint);
      }),
      (n.prototype.withConstraint = function (e) {
        return this.update(this.identifier, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TypeParameterSyntax = q;
  var j = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.extendsKeyword = e), (this.type = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitConstraint(this);
      }),
      (n.prototype.kind = function () {
        return 239;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.extendsKeyword;
          case 1:
            return this.type;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.extendsKeyword === e && this.type === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(48), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withExtendsKeyword = function (e) {
        return this.update(e, this.type);
      }),
      (n.prototype.withType = function (e) {
        return this.update(this.extendsKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ConstraintSyntax = j;
  var K = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.elseKeyword = e), (this.statement = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitElseClause(this);
      }),
      (n.prototype.kind = function () {
        return 235;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.elseKeyword;
          case 1:
            return this.statement;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.elseKeyword === e && this.statement === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(23), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withElseKeyword = function (e) {
        return this.update(e, this.statement);
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(this.elseKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.statement.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ElseClauseSyntax = K;
  var Y = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.ifKeyword = e),
        (this.openParenToken = n),
        (this.condition = r),
        (this.closeParenToken = i),
        (this.statement = o),
        (this.elseClause = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitIfStatement(this);
      }),
      (n.prototype.kind = function () {
        return 147;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.ifKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.condition;
          case 3:
            return this.closeParenToken;
          case 4:
            return this.statement;
          case 5:
            return this.elseClause;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.ifKeyword === e &&
          this.openParenToken === t &&
          this.condition === r &&
          this.closeParenToken === i &&
          this.statement === o &&
          this.elseClause === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r, i, o) {
        return new n(e, t, r, i, o, null, !1);
      }),
      (n.create1 = function (t, r) {
        return new n(
          e.Syntax.token(28),
          e.Syntax.token(72),
          t,
          e.Syntax.token(73),
          r,
          null,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withIfKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.statement,
          this.elseClause
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.ifKeyword,
          e,
          this.condition,
          this.closeParenToken,
          this.statement,
          this.elseClause
        );
      }),
      (n.prototype.withCondition = function (e) {
        return this.update(
          this.ifKeyword,
          this.openParenToken,
          e,
          this.closeParenToken,
          this.statement,
          this.elseClause
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.ifKeyword,
          this.openParenToken,
          this.condition,
          e,
          this.statement,
          this.elseClause
        );
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(
          this.ifKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          e,
          this.elseClause
        );
      }),
      (n.prototype.withElseClause = function (e) {
        return this.update(
          this.ifKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.statement,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.condition.isTypeScriptSpecific()
          ? !0
          : this.statement.isTypeScriptSpecific()
          ? !0
          : null !== this.elseClause && this.elseClause.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.IfStatementSyntax = Y;
  var X = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.expression = e), (this.semicolonToken = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitExpressionStatement(this);
      }),
      (n.prototype.kind = function () {
        return 149;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.expression;
          case 1:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.expression === e && this.semicolonToken === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(t, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.expression, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ExpressionStatementSyntax = X;
  var J = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.modifiers = e),
        (this.constructorKeyword = n),
        (this.callSignature = r),
        (this.block = i),
        (this.semicolonToken = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitConstructorDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 137;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.constructorKeyword;
          case 2:
            return this.callSignature;
          case 3:
            return this.block;
          case 4:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isClassElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.modifiers === e &&
          this.constructorKeyword === t &&
          this.callSignature === r &&
          this.block === i &&
          this.semicolonToken === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(e.Syntax.emptyList, t, r, null, null, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(62),
          H.create1(),
          null,
          null,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.constructorKeyword,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withConstructorKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(
          this.modifiers,
          this.constructorKeyword,
          e,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.modifiers,
          this.constructorKeyword,
          this.callSignature,
          e,
          this.semicolonToken
        );
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(
          this.modifiers,
          this.constructorKeyword,
          this.callSignature,
          this.block,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ConstructorDeclarationSyntax = J;
  var Q = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.modifiers = e),
        (this.propertyName = n),
        (this.callSignature = r),
        (this.block = i),
        (this.semicolonToken = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitMemberFunctionDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 135;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.propertyName;
          case 2:
            return this.callSignature;
          case 3:
            return this.block;
          case 4:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberDeclaration = function () {
        return !0;
      }),
      (n.prototype.isClassElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.modifiers === e &&
          this.propertyName === t &&
          this.callSignature === r &&
          this.block === i &&
          this.semicolonToken === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(e.Syntax.emptyList, t, r, null, null, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.emptyList, t, H.create1(), null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.propertyName,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.callSignature,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(
          this.modifiers,
          this.propertyName,
          e,
          this.block,
          this.semicolonToken
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.modifiers,
          this.propertyName,
          this.callSignature,
          e,
          this.semicolonToken
        );
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(
          this.modifiers,
          this.propertyName,
          this.callSignature,
          this.block,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.MemberFunctionDeclarationSyntax = Q;
  var Z = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.modifiers = e),
        (this.getKeyword = n),
        (this.propertyName = r),
        (this.parameterList = i),
        (this.typeAnnotation = o),
        (this.block = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitGetAccessor(this);
      }),
      (n.prototype.kind = function () {
        return 139;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.getKeyword;
          case 2:
            return this.propertyName;
          case 3:
            return this.parameterList;
          case 4:
            return this.typeAnnotation;
          case 5:
            return this.block;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberDeclaration = function () {
        return !0;
      }),
      (n.prototype.isPropertyAssignment = function () {
        return !0;
      }),
      (n.prototype.isClassElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.modifiers === e &&
          this.getKeyword === t &&
          this.propertyName === r &&
          this.parameterList === i &&
          this.typeAnnotation === o &&
          this.block === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i, o) {
        return new n(e.Syntax.emptyList, t, r, i, null, o, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(64),
          t,
          $.create1(),
          null,
          I.create1(),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.getKeyword,
          this.propertyName,
          this.parameterList,
          this.typeAnnotation,
          this.block
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withGetKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.propertyName,
          this.parameterList,
          this.typeAnnotation,
          this.block
        );
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(
          this.modifiers,
          this.getKeyword,
          e,
          this.parameterList,
          this.typeAnnotation,
          this.block
        );
      }),
      (n.prototype.withParameterList = function (e) {
        return this.update(
          this.modifiers,
          this.getKeyword,
          this.propertyName,
          e,
          this.typeAnnotation,
          this.block
        );
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(
          this.modifiers,
          this.getKeyword,
          this.propertyName,
          this.parameterList,
          e,
          this.block
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.modifiers,
          this.getKeyword,
          this.propertyName,
          this.parameterList,
          this.typeAnnotation,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.modifiers.childCount() > 0
          ? !0
          : this.parameterList.isTypeScriptSpecific()
          ? !0
          : null !== this.typeAnnotation
          ? !0
          : this.block.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.GetAccessorSyntax = Z;
  var et = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.modifiers = e),
        (this.setKeyword = n),
        (this.propertyName = r),
        (this.parameterList = i),
        (this.block = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitSetAccessor(this);
      }),
      (n.prototype.kind = function () {
        return 140;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.setKeyword;
          case 2:
            return this.propertyName;
          case 3:
            return this.parameterList;
          case 4:
            return this.block;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberDeclaration = function () {
        return !0;
      }),
      (n.prototype.isPropertyAssignment = function () {
        return !0;
      }),
      (n.prototype.isClassElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.modifiers === e &&
          this.setKeyword === t &&
          this.propertyName === r &&
          this.parameterList === i &&
          this.block === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i, o) {
        return new n(e.Syntax.emptyList, t, r, i, o, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(68),
          t,
          $.create1(),
          I.create1(),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.setKeyword,
          this.propertyName,
          this.parameterList,
          this.block
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withSetKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.propertyName,
          this.parameterList,
          this.block
        );
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(
          this.modifiers,
          this.setKeyword,
          e,
          this.parameterList,
          this.block
        );
      }),
      (n.prototype.withParameterList = function (e) {
        return this.update(
          this.modifiers,
          this.setKeyword,
          this.propertyName,
          e,
          this.block
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.modifiers,
          this.setKeyword,
          this.propertyName,
          this.parameterList,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.SetAccessorSyntax = et;
  var tt = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.modifiers = e),
        (this.variableDeclarator = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitMemberVariableDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 136;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.variableDeclarator;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberDeclaration = function () {
        return !0;
      }),
      (n.prototype.isClassElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.modifiers === e &&
          this.variableDeclarator === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(e.Syntax.emptyList, t, r, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.emptyList, t, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(e, this.variableDeclarator, this.semicolonToken);
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withVariableDeclarator = function (e) {
        return this.update(this.modifiers, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.modifiers, this.variableDeclarator, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.MemberVariableDeclarationSyntax = tt;
  var nt = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.modifiers = e),
        (this.indexSignature = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitIndexMemberDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 138;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.indexSignature;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isClassElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.modifiers === e &&
          this.indexSignature === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(e.Syntax.emptyList, t, r, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.emptyList, t, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(e, this.indexSignature, this.semicolonToken);
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withIndexSignature = function (e) {
        return this.update(this.modifiers, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.modifiers, this.indexSignature, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.IndexMemberDeclarationSyntax = nt;
  var rt = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.throwKeyword = e),
        (this.expression = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitThrowStatement(this);
      }),
      (n.prototype.kind = function () {
        return 157;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.throwKeyword;
          case 1:
            return this.expression;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.throwKeyword === e &&
          this.expression === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(36), t, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withThrowKeyword = function (e) {
        return this.update(e, this.expression, this.semicolonToken);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.throwKeyword, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.throwKeyword, this.expression, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ThrowStatementSyntax = rt;
  var it = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.returnKeyword = e),
        (this.expression = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitReturnStatement(this);
      }),
      (n.prototype.kind = function () {
        return 150;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.returnKeyword;
          case 1:
            return this.expression;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.returnKeyword === e &&
          this.expression === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, null, t, !1);
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(33), null, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withReturnKeyword = function (e) {
        return this.update(e, this.expression, this.semicolonToken);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.returnKeyword, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.returnKeyword, this.expression, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.expression &&
          this.expression.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ReturnStatementSyntax = it;
  var ot = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.newKeyword = e),
        (this.expression = n),
        (this.argumentList = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitObjectCreationExpression(this);
      }),
      (n.prototype.kind = function () {
        return 216;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.newKeyword;
          case 1:
            return this.expression;
          case 2:
            return this.argumentList;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.newKeyword === e &&
          this.expression === t &&
          this.argumentList === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, t, null, !1);
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(31), t, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withNewKeyword = function (e) {
        return this.update(e, this.expression, this.argumentList);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.newKeyword, e, this.argumentList);
      }),
      (n.prototype.withArgumentList = function (e) {
        return this.update(this.newKeyword, this.expression, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific()
          ? !0
          : null !== this.argumentList &&
            this.argumentList.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ObjectCreationExpressionSyntax = ot;
  var st = (function (t) {
    function n(e, n, r, i, o, s, a, l) {
      t.call(this, l),
        (this.switchKeyword = e),
        (this.openParenToken = n),
        (this.expression = r),
        (this.closeParenToken = i),
        (this.openBraceToken = o),
        (this.switchClauses = s),
        (this.closeBraceToken = a);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitSwitchStatement(this);
      }),
      (n.prototype.kind = function () {
        return 151;
      }),
      (n.prototype.childCount = function () {
        return 7;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.switchKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.expression;
          case 3:
            return this.closeParenToken;
          case 4:
            return this.openBraceToken;
          case 5:
            return this.switchClauses;
          case 6:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s, a) {
        return this.switchKeyword === e &&
          this.openParenToken === t &&
          this.expression === r &&
          this.closeParenToken === i &&
          this.openBraceToken === o &&
          this.switchClauses === s &&
          this.closeBraceToken === a
          ? this
          : new n(e, t, r, i, o, s, a, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i, o, s, a) {
        return new n(t, r, i, o, s, e.Syntax.emptyList, a, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(34),
          e.Syntax.token(72),
          t,
          e.Syntax.token(73),
          e.Syntax.token(70),
          e.Syntax.emptyList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withSwitchKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.expression,
          this.closeParenToken,
          this.openBraceToken,
          this.switchClauses,
          this.closeBraceToken
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.switchKeyword,
          e,
          this.expression,
          this.closeParenToken,
          this.openBraceToken,
          this.switchClauses,
          this.closeBraceToken
        );
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          this.switchKeyword,
          this.openParenToken,
          e,
          this.closeParenToken,
          this.openBraceToken,
          this.switchClauses,
          this.closeBraceToken
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.switchKeyword,
          this.openParenToken,
          this.expression,
          e,
          this.openBraceToken,
          this.switchClauses,
          this.closeBraceToken
        );
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(
          this.switchKeyword,
          this.openParenToken,
          this.expression,
          this.closeParenToken,
          e,
          this.switchClauses,
          this.closeBraceToken
        );
      }),
      (n.prototype.withSwitchClauses = function (e) {
        return this.update(
          this.switchKeyword,
          this.openParenToken,
          this.expression,
          this.closeParenToken,
          this.openBraceToken,
          e,
          this.closeBraceToken
        );
      }),
      (n.prototype.withSwitchClause = function (t) {
        return this.withSwitchClauses(e.Syntax.list([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(
          this.switchKeyword,
          this.openParenToken,
          this.expression,
          this.closeParenToken,
          this.openBraceToken,
          this.switchClauses,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific()
          ? !0
          : this.switchClauses.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.SwitchStatementSyntax = st;
  var at = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.caseKeyword = e),
        (this.expression = n),
        (this.colonToken = r),
        (this.statements = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitCaseSwitchClause(this);
      }),
      (n.prototype.kind = function () {
        return 233;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.caseKeyword;
          case 1:
            return this.expression;
          case 2:
            return this.colonToken;
          case 3:
            return this.statements;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isSwitchClause = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.caseKeyword === e &&
          this.expression === t &&
          this.colonToken === r &&
          this.statements === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i) {
        return new n(t, r, i, e.Syntax.emptyList, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(16),
          t,
          e.Syntax.token(106),
          e.Syntax.emptyList,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withCaseKeyword = function (e) {
        return this.update(
          e,
          this.expression,
          this.colonToken,
          this.statements
        );
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          this.caseKeyword,
          e,
          this.colonToken,
          this.statements
        );
      }),
      (n.prototype.withColonToken = function (e) {
        return this.update(
          this.caseKeyword,
          this.expression,
          e,
          this.statements
        );
      }),
      (n.prototype.withStatements = function (e) {
        return this.update(
          this.caseKeyword,
          this.expression,
          this.colonToken,
          e
        );
      }),
      (n.prototype.withStatement = function (t) {
        return this.withStatements(e.Syntax.list([t]));
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific()
          ? !0
          : this.statements.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.CaseSwitchClauseSyntax = at;
  var lt = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.defaultKeyword = e),
        (this.colonToken = n),
        (this.statements = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitDefaultSwitchClause(this);
      }),
      (n.prototype.kind = function () {
        return 234;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.defaultKeyword;
          case 1:
            return this.colonToken;
          case 2:
            return this.statements;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isSwitchClause = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.defaultKeyword === e &&
          this.colonToken === t &&
          this.statements === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, r, e.Syntax.emptyList, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(20),
          e.Syntax.token(106),
          e.Syntax.emptyList,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withDefaultKeyword = function (e) {
        return this.update(e, this.colonToken, this.statements);
      }),
      (n.prototype.withColonToken = function (e) {
        return this.update(this.defaultKeyword, e, this.statements);
      }),
      (n.prototype.withStatements = function (e) {
        return this.update(this.defaultKeyword, this.colonToken, e);
      }),
      (n.prototype.withStatement = function (t) {
        return this.withStatements(e.Syntax.list([t]));
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.statements.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.DefaultSwitchClauseSyntax = lt;
  var ct = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.breakKeyword = e),
        (this.identifier = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitBreakStatement(this);
      }),
      (n.prototype.kind = function () {
        return 152;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.breakKeyword;
          case 1:
            return this.identifier;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.breakKeyword === e &&
          this.identifier === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, null, t, !1);
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(15), null, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withBreakKeyword = function (e) {
        return this.update(e, this.identifier, this.semicolonToken);
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(this.breakKeyword, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.breakKeyword, this.identifier, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.BreakStatementSyntax = ct;
  var ut = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.continueKeyword = e),
        (this.identifier = n),
        (this.semicolonToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitContinueStatement(this);
      }),
      (n.prototype.kind = function () {
        return 153;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.continueKeyword;
          case 1:
            return this.identifier;
          case 2:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.continueKeyword === e &&
          this.identifier === t &&
          this.semicolonToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, null, t, !1);
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(18), null, e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withContinueKeyword = function (e) {
        return this.update(e, this.identifier, this.semicolonToken);
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(this.continueKeyword, e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.continueKeyword, this.identifier, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ContinueStatementSyntax = ut;
  var pt = (function (t) {
    function n(e, n, r, i, o, s, a, l, c, u, p) {
      t.call(this, p),
        (this.forKeyword = e),
        (this.openParenToken = n),
        (this.variableDeclaration = r),
        (this.initializer = i),
        (this.firstSemicolonToken = o),
        (this.condition = s),
        (this.secondSemicolonToken = a),
        (this.incrementor = l),
        (this.closeParenToken = c),
        (this.statement = u);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitForStatement(this);
      }),
      (n.prototype.kind = function () {
        return 154;
      }),
      (n.prototype.childCount = function () {
        return 10;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.forKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.variableDeclaration;
          case 3:
            return this.initializer;
          case 4:
            return this.firstSemicolonToken;
          case 5:
            return this.condition;
          case 6:
            return this.secondSemicolonToken;
          case 7:
            return this.incrementor;
          case 8:
            return this.closeParenToken;
          case 9:
            return this.statement;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isIterationStatement = function () {
        return !0;
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s, a, l, c, u) {
        return this.forKeyword === e &&
          this.openParenToken === t &&
          this.variableDeclaration === r &&
          this.initializer === i &&
          this.firstSemicolonToken === o &&
          this.condition === s &&
          this.secondSemicolonToken === a &&
          this.incrementor === l &&
          this.closeParenToken === c &&
          this.statement === u
          ? this
          : new n(e, t, r, i, o, s, a, l, c, u, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r, i, o, s) {
        return new n(e, t, null, null, r, null, i, null, o, s, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(26),
          e.Syntax.token(72),
          null,
          null,
          e.Syntax.token(78),
          null,
          e.Syntax.token(78),
          null,
          e.Syntax.token(73),
          t,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withForKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.forKeyword,
          e,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withVariableDeclaration = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          e,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withInitializer = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          e,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withFirstSemicolonToken = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          e,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCondition = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          e,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withSecondSemicolonToken = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          e,
          this.incrementor,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withIncrementor = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          e,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          e,
          this.statement
        );
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.initializer,
          this.firstSemicolonToken,
          this.condition,
          this.secondSemicolonToken,
          this.incrementor,
          this.closeParenToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.variableDeclaration &&
          this.variableDeclaration.isTypeScriptSpecific()
          ? !0
          : null !== this.initializer && this.initializer.isTypeScriptSpecific()
          ? !0
          : null !== this.condition && this.condition.isTypeScriptSpecific()
          ? !0
          : null !== this.incrementor && this.incrementor.isTypeScriptSpecific()
          ? !0
          : this.statement.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ForStatementSyntax = pt;
  var ht = (function (t) {
    function n(e, n, r, i, o, s, a, l, c) {
      t.call(this, c),
        (this.forKeyword = e),
        (this.openParenToken = n),
        (this.variableDeclaration = r),
        (this.left = i),
        (this.inKeyword = o),
        (this.expression = s),
        (this.closeParenToken = a),
        (this.statement = l);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitForInStatement(this);
      }),
      (n.prototype.kind = function () {
        return 155;
      }),
      (n.prototype.childCount = function () {
        return 8;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.forKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.variableDeclaration;
          case 3:
            return this.left;
          case 4:
            return this.inKeyword;
          case 5:
            return this.expression;
          case 6:
            return this.closeParenToken;
          case 7:
            return this.statement;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isIterationStatement = function () {
        return !0;
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s, a, l) {
        return this.forKeyword === e &&
          this.openParenToken === t &&
          this.variableDeclaration === r &&
          this.left === i &&
          this.inKeyword === o &&
          this.expression === s &&
          this.closeParenToken === a &&
          this.statement === l
          ? this
          : new n(e, t, r, i, o, s, a, l, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r, i, o, s) {
        return new n(e, t, null, null, r, i, o, s, !1);
      }),
      (n.create1 = function (t, r) {
        return new n(
          e.Syntax.token(26),
          e.Syntax.token(72),
          null,
          null,
          e.Syntax.token(29),
          t,
          e.Syntax.token(73),
          r,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withForKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.variableDeclaration,
          this.left,
          this.inKeyword,
          this.expression,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.forKeyword,
          e,
          this.variableDeclaration,
          this.left,
          this.inKeyword,
          this.expression,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withVariableDeclaration = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          e,
          this.left,
          this.inKeyword,
          this.expression,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withLeft = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          e,
          this.inKeyword,
          this.expression,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withInKeyword = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.left,
          e,
          this.expression,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.left,
          this.inKeyword,
          e,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.left,
          this.inKeyword,
          this.expression,
          e,
          this.statement
        );
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(
          this.forKeyword,
          this.openParenToken,
          this.variableDeclaration,
          this.left,
          this.inKeyword,
          this.expression,
          this.closeParenToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.variableDeclaration &&
          this.variableDeclaration.isTypeScriptSpecific()
          ? !0
          : null !== this.left && this.left.isTypeScriptSpecific()
          ? !0
          : this.expression.isTypeScriptSpecific()
          ? !0
          : this.statement.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ForInStatementSyntax = ht;
  var dt = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.whileKeyword = e),
        (this.openParenToken = n),
        (this.condition = r),
        (this.closeParenToken = i),
        (this.statement = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitWhileStatement(this);
      }),
      (n.prototype.kind = function () {
        return 158;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.whileKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.condition;
          case 3:
            return this.closeParenToken;
          case 4:
            return this.statement;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isIterationStatement = function () {
        return !0;
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.whileKeyword === e &&
          this.openParenToken === t &&
          this.condition === r &&
          this.closeParenToken === i &&
          this.statement === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(
          e.Syntax.token(42),
          e.Syntax.token(72),
          t,
          e.Syntax.token(73),
          r,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withWhileKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.whileKeyword,
          e,
          this.condition,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCondition = function (e) {
        return this.update(
          this.whileKeyword,
          this.openParenToken,
          e,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.whileKeyword,
          this.openParenToken,
          this.condition,
          e,
          this.statement
        );
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(
          this.whileKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.condition.isTypeScriptSpecific()
          ? !0
          : this.statement.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.WhileStatementSyntax = dt;
  var mt = (function (t) {
    function n(e, n, r, i, o, s) {
      t.call(this, s),
        (this.withKeyword = e),
        (this.openParenToken = n),
        (this.condition = r),
        (this.closeParenToken = i),
        (this.statement = o);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitWithStatement(this);
      }),
      (n.prototype.kind = function () {
        return 163;
      }),
      (n.prototype.childCount = function () {
        return 5;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.withKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.condition;
          case 3:
            return this.closeParenToken;
          case 4:
            return this.statement;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o) {
        return this.withKeyword === e &&
          this.openParenToken === t &&
          this.condition === r &&
          this.closeParenToken === i &&
          this.statement === o
          ? this
          : new n(e, t, r, i, o, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(
          e.Syntax.token(43),
          e.Syntax.token(72),
          t,
          e.Syntax.token(73),
          r,
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withWithKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.withKeyword,
          e,
          this.condition,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCondition = function (e) {
        return this.update(
          this.withKeyword,
          this.openParenToken,
          e,
          this.closeParenToken,
          this.statement
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.withKeyword,
          this.openParenToken,
          this.condition,
          e,
          this.statement
        );
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(
          this.withKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.condition.isTypeScriptSpecific()
          ? !0
          : this.statement.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.WithStatementSyntax = mt;
  var ft = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.modifiers = e),
        (this.enumKeyword = n),
        (this.identifier = r),
        (this.openBraceToken = i),
        (this.enumElements = o),
        (this.closeBraceToken = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitEnumDeclaration(this);
      }),
      (n.prototype.kind = function () {
        return 132;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.modifiers;
          case 1:
            return this.enumKeyword;
          case 2:
            return this.identifier;
          case 3:
            return this.openBraceToken;
          case 4:
            return this.enumElements;
          case 5:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.modifiers === e &&
          this.enumKeyword === t &&
          this.identifier === r &&
          this.openBraceToken === i &&
          this.enumElements === o &&
          this.closeBraceToken === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (t, r, i, o) {
        return new n(
          e.Syntax.emptyList,
          t,
          r,
          i,
          e.Syntax.emptySeparatedList,
          o,
          !1
        );
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.emptyList,
          e.Syntax.token(46),
          t,
          e.Syntax.token(70),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withModifiers = function (e) {
        return this.update(
          e,
          this.enumKeyword,
          this.identifier,
          this.openBraceToken,
          this.enumElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withModifier = function (t) {
        return this.withModifiers(e.Syntax.list([t]));
      }),
      (n.prototype.withEnumKeyword = function (e) {
        return this.update(
          this.modifiers,
          e,
          this.identifier,
          this.openBraceToken,
          this.enumElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.modifiers,
          this.enumKeyword,
          e,
          this.openBraceToken,
          this.enumElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(
          this.modifiers,
          this.enumKeyword,
          this.identifier,
          e,
          this.enumElements,
          this.closeBraceToken
        );
      }),
      (n.prototype.withEnumElements = function (e) {
        return this.update(
          this.modifiers,
          this.enumKeyword,
          this.identifier,
          this.openBraceToken,
          e,
          this.closeBraceToken
        );
      }),
      (n.prototype.withEnumElement = function (t) {
        return this.withEnumElements(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(
          this.modifiers,
          this.enumKeyword,
          this.identifier,
          this.openBraceToken,
          this.enumElements,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.EnumDeclarationSyntax = ft;
  var gt = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.propertyName = e), (this.equalsValueClause = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitEnumElement(this);
      }),
      (n.prototype.kind = function () {
        return 243;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.propertyName;
          case 1:
            return this.equalsValueClause;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.propertyName === e && this.equalsValueClause === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create = function (e) {
        return new n(e, null, !1);
      }),
      (n.create1 = function (e) {
        return new n(e, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(e, this.equalsValueClause);
      }),
      (n.prototype.withEqualsValueClause = function (e) {
        return this.update(this.propertyName, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.equalsValueClause &&
          this.equalsValueClause.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.EnumElementSyntax = gt;
  var vt = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.lessThanToken = e),
        (this.type = n),
        (this.greaterThanToken = r),
        (this.expression = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitCastExpression(this);
      }),
      (n.prototype.kind = function () {
        return 220;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.lessThanToken;
          case 1:
            return this.type;
          case 2:
            return this.greaterThanToken;
          case 3:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.lessThanToken === e &&
          this.type === t &&
          this.greaterThanToken === r &&
          this.expression === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(e.Syntax.token(80), t, e.Syntax.token(81), r, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withLessThanToken = function (e) {
        return this.update(
          e,
          this.type,
          this.greaterThanToken,
          this.expression
        );
      }),
      (n.prototype.withType = function (e) {
        return this.update(
          this.lessThanToken,
          e,
          this.greaterThanToken,
          this.expression
        );
      }),
      (n.prototype.withGreaterThanToken = function (e) {
        return this.update(this.lessThanToken, this.type, e, this.expression);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(
          this.lessThanToken,
          this.type,
          this.greaterThanToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !0;
      }),
      n
    );
  })(e.SyntaxNode);
  e.CastExpressionSyntax = vt;
  var yt = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.openBraceToken = e),
        (this.propertyAssignments = n),
        (this.closeBraceToken = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitObjectLiteralExpression(this);
      }),
      (n.prototype.kind = function () {
        return 215;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.openBraceToken;
          case 1:
            return this.propertyAssignments;
          case 2:
            return this.closeBraceToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPrimaryExpression = function () {
        return !0;
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.openBraceToken === e &&
          this.propertyAssignments === t &&
          this.closeBraceToken === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create = function (t, r) {
        return new n(t, e.Syntax.emptySeparatedList, r, !1);
      }),
      (n.create1 = function () {
        return new n(
          e.Syntax.token(70),
          e.Syntax.emptySeparatedList,
          e.Syntax.token(71),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withOpenBraceToken = function (e) {
        return this.update(e, this.propertyAssignments, this.closeBraceToken);
      }),
      (n.prototype.withPropertyAssignments = function (e) {
        return this.update(this.openBraceToken, e, this.closeBraceToken);
      }),
      (n.prototype.withPropertyAssignment = function (t) {
        return this.withPropertyAssignments(e.Syntax.separatedList([t]));
      }),
      (n.prototype.withCloseBraceToken = function (e) {
        return this.update(this.openBraceToken, this.propertyAssignments, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.propertyAssignments.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.ObjectLiteralExpressionSyntax = yt;
  var bt = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.propertyName = e),
        (this.colonToken = n),
        (this.expression = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitSimplePropertyAssignment(this);
      }),
      (n.prototype.kind = function () {
        return 240;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.propertyName;
          case 1:
            return this.colonToken;
          case 2:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPropertyAssignment = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.propertyName === e &&
          this.colonToken === t &&
          this.expression === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(t, e.Syntax.token(106), r, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(e, this.colonToken, this.expression);
      }),
      (n.prototype.withColonToken = function (e) {
        return this.update(this.propertyName, e, this.expression);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.propertyName, this.colonToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.SimplePropertyAssignmentSyntax = bt;
  var _t = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.propertyName = e),
        (this.callSignature = n),
        (this.block = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitFunctionPropertyAssignment(this);
      }),
      (n.prototype.kind = function () {
        return 241;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.propertyName;
          case 1:
            return this.callSignature;
          case 2:
            return this.block;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPropertyAssignment = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.propertyName === e &&
          this.callSignature === t &&
          this.block === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (e) {
        return new n(e, H.create1(), I.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withPropertyName = function (e) {
        return this.update(e, this.callSignature, this.block);
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(this.propertyName, e, this.block);
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(this.propertyName, this.callSignature, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.callSignature.isTypeScriptSpecific()
          ? !0
          : this.block.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.FunctionPropertyAssignmentSyntax = _t;
  var wt = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.functionKeyword = e),
        (this.identifier = n),
        (this.callSignature = r),
        (this.block = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitFunctionExpression(this);
      }),
      (n.prototype.kind = function () {
        return 222;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.functionKeyword;
          case 1:
            return this.identifier;
          case 2:
            return this.callSignature;
          case 3:
            return this.block;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isPrimaryExpression = function () {
        return !0;
      }),
      (n.prototype.isMemberExpression = function () {
        return !0;
      }),
      (n.prototype.isPostfixExpression = function () {
        return !0;
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.functionKeyword === e &&
          this.identifier === t &&
          this.callSignature === r &&
          this.block === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r) {
        return new n(e, null, t, r, !1);
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(27), null, H.create1(), I.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withFunctionKeyword = function (e) {
        return this.update(e, this.identifier, this.callSignature, this.block);
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.functionKeyword,
          e,
          this.callSignature,
          this.block
        );
      }),
      (n.prototype.withCallSignature = function (e) {
        return this.update(
          this.functionKeyword,
          this.identifier,
          e,
          this.block
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.functionKeyword,
          this.identifier,
          this.callSignature,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.callSignature.isTypeScriptSpecific()
          ? !0
          : this.block.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.FunctionExpressionSyntax = wt;
  var St = (function (t) {
    function n(e, n) {
      t.call(this, n), (this.semicolonToken = e);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitEmptyStatement(this);
      }),
      (n.prototype.kind = function () {
        return 156;
      }),
      (n.prototype.childCount = function () {
        return 1;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e) {
        return this.semicolonToken === e
          ? this
          : new n(e, this.parsedInStrictMode());
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.EmptyStatementSyntax = St;
  var Tt = (function (t) {
    function n(e, n, r, i, o) {
      t.call(this, o),
        (this.tryKeyword = e),
        (this.block = n),
        (this.catchClause = r),
        (this.finallyClause = i);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTryStatement(this);
      }),
      (n.prototype.kind = function () {
        return 159;
      }),
      (n.prototype.childCount = function () {
        return 4;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.tryKeyword;
          case 1:
            return this.block;
          case 2:
            return this.catchClause;
          case 3:
            return this.finallyClause;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i) {
        return this.tryKeyword === e &&
          this.block === t &&
          this.catchClause === r &&
          this.finallyClause === i
          ? this
          : new n(e, t, r, i, this.parsedInStrictMode());
      }),
      (n.create = function (e, t) {
        return new n(e, t, null, null, !1);
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(38), I.create1(), null, null, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withTryKeyword = function (e) {
        return this.update(e, this.block, this.catchClause, this.finallyClause);
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.tryKeyword,
          e,
          this.catchClause,
          this.finallyClause
        );
      }),
      (n.prototype.withCatchClause = function (e) {
        return this.update(this.tryKeyword, this.block, e, this.finallyClause);
      }),
      (n.prototype.withFinallyClause = function (e) {
        return this.update(this.tryKeyword, this.block, this.catchClause, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.block.isTypeScriptSpecific()
          ? !0
          : null !== this.catchClause && this.catchClause.isTypeScriptSpecific()
          ? !0
          : null !== this.finallyClause &&
            this.finallyClause.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TryStatementSyntax = Tt;
  var kt = (function (t) {
    function n(e, n, r, i, o, s, a) {
      t.call(this, a),
        (this.catchKeyword = e),
        (this.openParenToken = n),
        (this.identifier = r),
        (this.typeAnnotation = i),
        (this.closeParenToken = o),
        (this.block = s);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitCatchClause(this);
      }),
      (n.prototype.kind = function () {
        return 236;
      }),
      (n.prototype.childCount = function () {
        return 6;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.catchKeyword;
          case 1:
            return this.openParenToken;
          case 2:
            return this.identifier;
          case 3:
            return this.typeAnnotation;
          case 4:
            return this.closeParenToken;
          case 5:
            return this.block;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t, r, i, o, s) {
        return this.catchKeyword === e &&
          this.openParenToken === t &&
          this.identifier === r &&
          this.typeAnnotation === i &&
          this.closeParenToken === o &&
          this.block === s
          ? this
          : new n(e, t, r, i, o, s, this.parsedInStrictMode());
      }),
      (n.create = function (e, t, r, i, o) {
        return new n(e, t, r, null, i, o, !1);
      }),
      (n.create1 = function (t) {
        return new n(
          e.Syntax.token(17),
          e.Syntax.token(72),
          t,
          null,
          e.Syntax.token(73),
          I.create1(),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withCatchKeyword = function (e) {
        return this.update(
          e,
          this.openParenToken,
          this.identifier,
          this.typeAnnotation,
          this.closeParenToken,
          this.block
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.catchKeyword,
          e,
          this.identifier,
          this.typeAnnotation,
          this.closeParenToken,
          this.block
        );
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(
          this.catchKeyword,
          this.openParenToken,
          e,
          this.typeAnnotation,
          this.closeParenToken,
          this.block
        );
      }),
      (n.prototype.withTypeAnnotation = function (e) {
        return this.update(
          this.catchKeyword,
          this.openParenToken,
          this.identifier,
          e,
          this.closeParenToken,
          this.block
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.catchKeyword,
          this.openParenToken,
          this.identifier,
          this.typeAnnotation,
          e,
          this.block
        );
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(
          this.catchKeyword,
          this.openParenToken,
          this.identifier,
          this.typeAnnotation,
          this.closeParenToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return null !== this.typeAnnotation &&
          this.typeAnnotation.isTypeScriptSpecific()
          ? !0
          : this.block.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.CatchClauseSyntax = kt;
  var xt = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.finallyKeyword = e), (this.block = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitFinallyClause(this);
      }),
      (n.prototype.kind = function () {
        return 237;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.finallyKeyword;
          case 1:
            return this.block;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.update = function (e, t) {
        return this.finallyKeyword === e && this.block === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(25), I.create1(), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withFinallyKeyword = function (e) {
        return this.update(e, this.block);
      }),
      (n.prototype.withBlock = function (e) {
        return this.update(this.finallyKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.block.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.FinallyClauseSyntax = xt;
  var Ct = (function (t) {
    function n(e, n, r, i) {
      t.call(this, i),
        (this.identifier = e),
        (this.colonToken = n),
        (this.statement = r);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitLabeledStatement(this);
      }),
      (n.prototype.kind = function () {
        return 160;
      }),
      (n.prototype.childCount = function () {
        return 3;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.identifier;
          case 1:
            return this.colonToken;
          case 2:
            return this.statement;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r) {
        return this.identifier === e &&
          this.colonToken === t &&
          this.statement === r
          ? this
          : new n(e, t, r, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(t, e.Syntax.token(106), r, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withIdentifier = function (e) {
        return this.update(e, this.colonToken, this.statement);
      }),
      (n.prototype.withColonToken = function (e) {
        return this.update(this.identifier, e, this.statement);
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(this.identifier, this.colonToken, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.statement.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.LabeledStatementSyntax = Ct;
  var Et = (function (t) {
    function n(e, n, r, i, o, s, a, l) {
      t.call(this, l),
        (this.doKeyword = e),
        (this.statement = n),
        (this.whileKeyword = r),
        (this.openParenToken = i),
        (this.condition = o),
        (this.closeParenToken = s),
        (this.semicolonToken = a);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitDoStatement(this);
      }),
      (n.prototype.kind = function () {
        return 161;
      }),
      (n.prototype.childCount = function () {
        return 7;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.doKeyword;
          case 1:
            return this.statement;
          case 2:
            return this.whileKeyword;
          case 3:
            return this.openParenToken;
          case 4:
            return this.condition;
          case 5:
            return this.closeParenToken;
          case 6:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isIterationStatement = function () {
        return !0;
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t, r, i, o, s, a) {
        return this.doKeyword === e &&
          this.statement === t &&
          this.whileKeyword === r &&
          this.openParenToken === i &&
          this.condition === o &&
          this.closeParenToken === s &&
          this.semicolonToken === a
          ? this
          : new n(e, t, r, i, o, s, a, this.parsedInStrictMode());
      }),
      (n.create1 = function (t, r) {
        return new n(
          e.Syntax.token(22),
          t,
          e.Syntax.token(42),
          e.Syntax.token(72),
          r,
          e.Syntax.token(73),
          e.Syntax.token(78),
          !1
        );
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withDoKeyword = function (e) {
        return this.update(
          e,
          this.statement,
          this.whileKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.semicolonToken
        );
      }),
      (n.prototype.withStatement = function (e) {
        return this.update(
          this.doKeyword,
          e,
          this.whileKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.semicolonToken
        );
      }),
      (n.prototype.withWhileKeyword = function (e) {
        return this.update(
          this.doKeyword,
          this.statement,
          e,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          this.semicolonToken
        );
      }),
      (n.prototype.withOpenParenToken = function (e) {
        return this.update(
          this.doKeyword,
          this.statement,
          this.whileKeyword,
          e,
          this.condition,
          this.closeParenToken,
          this.semicolonToken
        );
      }),
      (n.prototype.withCondition = function (e) {
        return this.update(
          this.doKeyword,
          this.statement,
          this.whileKeyword,
          this.openParenToken,
          e,
          this.closeParenToken,
          this.semicolonToken
        );
      }),
      (n.prototype.withCloseParenToken = function (e) {
        return this.update(
          this.doKeyword,
          this.statement,
          this.whileKeyword,
          this.openParenToken,
          this.condition,
          e,
          this.semicolonToken
        );
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(
          this.doKeyword,
          this.statement,
          this.whileKeyword,
          this.openParenToken,
          this.condition,
          this.closeParenToken,
          e
        );
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.statement.isTypeScriptSpecific()
          ? !0
          : this.condition.isTypeScriptSpecific()
          ? !0
          : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.DoStatementSyntax = Et;
  var At = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.typeOfKeyword = e), (this.expression = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitTypeOfExpression(this);
      }),
      (n.prototype.kind = function () {
        return 171;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.typeOfKeyword;
          case 1:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.typeOfKeyword === e && this.expression === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(39), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withTypeOfKeyword = function (e) {
        return this.update(e, this.expression);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.typeOfKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.TypeOfExpressionSyntax = At;
  var Lt = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.deleteKeyword = e), (this.expression = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitDeleteExpression(this);
      }),
      (n.prototype.kind = function () {
        return 170;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.deleteKeyword;
          case 1:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.deleteKeyword === e && this.expression === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(21), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withDeleteKeyword = function (e) {
        return this.update(e, this.expression);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.deleteKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.DeleteExpressionSyntax = Lt;
  var It = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.voidKeyword = e), (this.expression = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitVoidExpression(this);
      }),
      (n.prototype.kind = function () {
        return 172;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.voidKeyword;
          case 1:
            return this.expression;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isUnaryExpression = function () {
        return !0;
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.voidKeyword === e && this.expression === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function (t) {
        return new n(e.Syntax.token(41), t, !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withVoidKeyword = function (e) {
        return this.update(e, this.expression);
      }),
      (n.prototype.withExpression = function (e) {
        return this.update(this.voidKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return this.expression.isTypeScriptSpecific() ? !0 : !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.VoidExpressionSyntax = It;
  var Dt = (function (t) {
    function n(e, n, r) {
      t.call(this, r), (this.debuggerKeyword = e), (this.semicolonToken = n);
    }
    return (
      __extends(n, t),
      (n.prototype.accept = function (e) {
        return e.visitDebuggerStatement(this);
      }),
      (n.prototype.kind = function () {
        return 162;
      }),
      (n.prototype.childCount = function () {
        return 2;
      }),
      (n.prototype.childAt = function (t) {
        switch (t) {
          case 0:
            return this.debuggerKeyword;
          case 1:
            return this.semicolonToken;
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (n.prototype.isStatement = function () {
        return !0;
      }),
      (n.prototype.isModuleElement = function () {
        return !0;
      }),
      (n.prototype.update = function (e, t) {
        return this.debuggerKeyword === e && this.semicolonToken === t
          ? this
          : new n(e, t, this.parsedInStrictMode());
      }),
      (n.create1 = function () {
        return new n(e.Syntax.token(19), e.Syntax.token(78), !1);
      }),
      (n.prototype.withLeadingTrivia = function (e) {
        return t.prototype.withLeadingTrivia.call(this, e);
      }),
      (n.prototype.withTrailingTrivia = function (e) {
        return t.prototype.withTrailingTrivia.call(this, e);
      }),
      (n.prototype.withDebuggerKeyword = function (e) {
        return this.update(e, this.semicolonToken);
      }),
      (n.prototype.withSemicolonToken = function (e) {
        return this.update(this.debuggerKeyword, e);
      }),
      (n.prototype.isTypeScriptSpecific = function () {
        return !1;
      }),
      n
    );
  })(e.SyntaxNode);
  e.DebuggerStatementSyntax = Dt;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {}
    return (
      (t.prototype.visitToken = function (e) {
        return e;
      }),
      (t.prototype.visitNode = function (e) {
        return e.accept(this);
      }),
      (t.prototype.visitNodeOrToken = function (e) {
        return e.isToken() ? this.visitToken(e) : this.visitNode(e);
      }),
      (t.prototype.visitList = function (t) {
        for (var n = null, r = 0, i = t.childCount(); i > r; r++) {
          var o = t.childAt(r),
            s = this.visitNodeOrToken(o);
          if (o !== s && null === n) {
            n = [];
            for (var a = 0; r > a; a++) n.push(t.childAt(a));
          }
          n && n.push(s);
        }
        return null === n ? t : e.Syntax.list(n);
      }),
      (t.prototype.visitSeparatedList = function (t) {
        for (var n = null, r = 0, i = t.childCount(); i > r; r++) {
          var o = t.childAt(r),
            s = o.isToken() ? this.visitToken(o) : this.visitNode(o);
          if (o !== s && null === n) {
            n = [];
            for (var a = 0; r > a; a++) n.push(t.childAt(a));
          }
          n && n.push(s);
        }
        return null === n ? t : e.Syntax.separatedList(n);
      }),
      (t.prototype.visitSourceUnit = function (e) {
        return e.update(
          this.visitList(e.moduleElements),
          this.visitToken(e.endOfFileToken)
        );
      }),
      (t.prototype.visitExternalModuleReference = function (e) {
        return e.update(
          this.visitToken(e.requireKeyword),
          this.visitToken(e.openParenToken),
          this.visitToken(e.stringLiteral),
          this.visitToken(e.closeParenToken)
        );
      }),
      (t.prototype.visitModuleNameModuleReference = function (e) {
        return e.update(this.visitNodeOrToken(e.moduleName));
      }),
      (t.prototype.visitImportDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.importKeyword),
          this.visitToken(e.identifier),
          this.visitToken(e.equalsToken),
          this.visitNodeOrToken(e.moduleReference),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitExportAssignment = function (e) {
        return e.update(
          this.visitToken(e.exportKeyword),
          this.visitToken(e.equalsToken),
          this.visitToken(e.identifier),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitClassDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.classKeyword),
          this.visitToken(e.identifier),
          null === e.typeParameterList
            ? null
            : this.visitNode(e.typeParameterList),
          this.visitList(e.heritageClauses),
          this.visitToken(e.openBraceToken),
          this.visitList(e.classElements),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitInterfaceDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.interfaceKeyword),
          this.visitToken(e.identifier),
          null === e.typeParameterList
            ? null
            : this.visitNode(e.typeParameterList),
          this.visitList(e.heritageClauses),
          this.visitNode(e.body)
        );
      }),
      (t.prototype.visitHeritageClause = function (e) {
        return e.update(
          e.kind(),
          this.visitToken(e.extendsOrImplementsKeyword),
          this.visitSeparatedList(e.typeNames)
        );
      }),
      (t.prototype.visitModuleDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.moduleKeyword),
          null === e.name ? null : this.visitNodeOrToken(e.name),
          null === e.stringLiteral ? null : this.visitToken(e.stringLiteral),
          this.visitToken(e.openBraceToken),
          this.visitList(e.moduleElements),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitFunctionDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.functionKeyword),
          this.visitToken(e.identifier),
          this.visitNode(e.callSignature),
          null === e.block ? null : this.visitNode(e.block),
          null === e.semicolonToken ? null : this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitVariableStatement = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitNode(e.variableDeclaration),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitVariableDeclaration = function (e) {
        return e.update(
          this.visitToken(e.varKeyword),
          this.visitSeparatedList(e.variableDeclarators)
        );
      }),
      (t.prototype.visitVariableDeclarator = function (e) {
        return e.update(
          this.visitToken(e.propertyName),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation),
          null === e.equalsValueClause
            ? null
            : this.visitNode(e.equalsValueClause)
        );
      }),
      (t.prototype.visitEqualsValueClause = function (e) {
        return e.update(
          this.visitToken(e.equalsToken),
          this.visitNodeOrToken(e.value)
        );
      }),
      (t.prototype.visitPrefixUnaryExpression = function (e) {
        return e.update(
          e.kind(),
          this.visitToken(e.operatorToken),
          this.visitNodeOrToken(e.operand)
        );
      }),
      (t.prototype.visitArrayLiteralExpression = function (e) {
        return e.update(
          this.visitToken(e.openBracketToken),
          this.visitSeparatedList(e.expressions),
          this.visitToken(e.closeBracketToken)
        );
      }),
      (t.prototype.visitOmittedExpression = function (e) {
        return e;
      }),
      (t.prototype.visitParenthesizedExpression = function (e) {
        return e.update(
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.closeParenToken)
        );
      }),
      (t.prototype.visitSimpleArrowFunctionExpression = function (e) {
        return e.update(
          this.visitToken(e.identifier),
          this.visitToken(e.equalsGreaterThanToken),
          null === e.block ? null : this.visitNode(e.block),
          null === e.expression ? null : this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitParenthesizedArrowFunctionExpression = function (e) {
        return e.update(
          this.visitNode(e.callSignature),
          this.visitToken(e.equalsGreaterThanToken),
          null === e.block ? null : this.visitNode(e.block),
          null === e.expression ? null : this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitQualifiedName = function (e) {
        return e.update(
          this.visitNodeOrToken(e.left),
          this.visitToken(e.dotToken),
          this.visitToken(e.right)
        );
      }),
      (t.prototype.visitTypeArgumentList = function (e) {
        return e.update(
          this.visitToken(e.lessThanToken),
          this.visitSeparatedList(e.typeArguments),
          this.visitToken(e.greaterThanToken)
        );
      }),
      (t.prototype.visitConstructorType = function (e) {
        return e.update(
          this.visitToken(e.newKeyword),
          null === e.typeParameterList
            ? null
            : this.visitNode(e.typeParameterList),
          this.visitNode(e.parameterList),
          this.visitToken(e.equalsGreaterThanToken),
          this.visitNodeOrToken(e.type)
        );
      }),
      (t.prototype.visitFunctionType = function (e) {
        return e.update(
          null === e.typeParameterList
            ? null
            : this.visitNode(e.typeParameterList),
          this.visitNode(e.parameterList),
          this.visitToken(e.equalsGreaterThanToken),
          this.visitNodeOrToken(e.type)
        );
      }),
      (t.prototype.visitObjectType = function (e) {
        return e.update(
          this.visitToken(e.openBraceToken),
          this.visitSeparatedList(e.typeMembers),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitArrayType = function (e) {
        return e.update(
          this.visitNodeOrToken(e.type),
          this.visitToken(e.openBracketToken),
          this.visitToken(e.closeBracketToken)
        );
      }),
      (t.prototype.visitGenericType = function (e) {
        return e.update(
          this.visitNodeOrToken(e.name),
          this.visitNode(e.typeArgumentList)
        );
      }),
      (t.prototype.visitTypeQuery = function (e) {
        return e.update(
          this.visitToken(e.typeOfKeyword),
          this.visitNodeOrToken(e.name)
        );
      }),
      (t.prototype.visitTypeAnnotation = function (e) {
        return e.update(
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.type)
        );
      }),
      (t.prototype.visitBlock = function (e) {
        return e.update(
          this.visitToken(e.openBraceToken),
          this.visitList(e.statements),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitParameter = function (e) {
        return e.update(
          null === e.dotDotDotToken ? null : this.visitToken(e.dotDotDotToken),
          this.visitList(e.modifiers),
          this.visitToken(e.identifier),
          null === e.questionToken ? null : this.visitToken(e.questionToken),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation),
          null === e.equalsValueClause
            ? null
            : this.visitNode(e.equalsValueClause)
        );
      }),
      (t.prototype.visitMemberAccessExpression = function (e) {
        return e.update(
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.dotToken),
          this.visitToken(e.name)
        );
      }),
      (t.prototype.visitPostfixUnaryExpression = function (e) {
        return e.update(
          e.kind(),
          this.visitNodeOrToken(e.operand),
          this.visitToken(e.operatorToken)
        );
      }),
      (t.prototype.visitElementAccessExpression = function (e) {
        return e.update(
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.openBracketToken),
          this.visitNodeOrToken(e.argumentExpression),
          this.visitToken(e.closeBracketToken)
        );
      }),
      (t.prototype.visitInvocationExpression = function (e) {
        return e.update(
          this.visitNodeOrToken(e.expression),
          this.visitNode(e.argumentList)
        );
      }),
      (t.prototype.visitArgumentList = function (e) {
        return e.update(
          null === e.typeArgumentList
            ? null
            : this.visitNode(e.typeArgumentList),
          this.visitToken(e.openParenToken),
          this.visitSeparatedList(e.arguments),
          this.visitToken(e.closeParenToken)
        );
      }),
      (t.prototype.visitBinaryExpression = function (e) {
        return e.update(
          e.kind(),
          this.visitNodeOrToken(e.left),
          this.visitToken(e.operatorToken),
          this.visitNodeOrToken(e.right)
        );
      }),
      (t.prototype.visitConditionalExpression = function (e) {
        return e.update(
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.questionToken),
          this.visitNodeOrToken(e.whenTrue),
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.whenFalse)
        );
      }),
      (t.prototype.visitConstructSignature = function (e) {
        return e.update(
          this.visitToken(e.newKeyword),
          this.visitNode(e.callSignature)
        );
      }),
      (t.prototype.visitMethodSignature = function (e) {
        return e.update(
          this.visitToken(e.propertyName),
          null === e.questionToken ? null : this.visitToken(e.questionToken),
          this.visitNode(e.callSignature)
        );
      }),
      (t.prototype.visitIndexSignature = function (e) {
        return e.update(
          this.visitToken(e.openBracketToken),
          this.visitNode(e.parameter),
          this.visitToken(e.closeBracketToken),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation)
        );
      }),
      (t.prototype.visitPropertySignature = function (e) {
        return e.update(
          this.visitToken(e.propertyName),
          null === e.questionToken ? null : this.visitToken(e.questionToken),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation)
        );
      }),
      (t.prototype.visitCallSignature = function (e) {
        return e.update(
          null === e.typeParameterList
            ? null
            : this.visitNode(e.typeParameterList),
          this.visitNode(e.parameterList),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation)
        );
      }),
      (t.prototype.visitParameterList = function (e) {
        return e.update(
          this.visitToken(e.openParenToken),
          this.visitSeparatedList(e.parameters),
          this.visitToken(e.closeParenToken)
        );
      }),
      (t.prototype.visitTypeParameterList = function (e) {
        return e.update(
          this.visitToken(e.lessThanToken),
          this.visitSeparatedList(e.typeParameters),
          this.visitToken(e.greaterThanToken)
        );
      }),
      (t.prototype.visitTypeParameter = function (e) {
        return e.update(
          this.visitToken(e.identifier),
          null === e.constraint ? null : this.visitNode(e.constraint)
        );
      }),
      (t.prototype.visitConstraint = function (e) {
        return e.update(
          this.visitToken(e.extendsKeyword),
          this.visitNodeOrToken(e.type)
        );
      }),
      (t.prototype.visitElseClause = function (e) {
        return e.update(
          this.visitToken(e.elseKeyword),
          this.visitNodeOrToken(e.statement)
        );
      }),
      (t.prototype.visitIfStatement = function (e) {
        return e.update(
          this.visitToken(e.ifKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement),
          null === e.elseClause ? null : this.visitNode(e.elseClause)
        );
      }),
      (t.prototype.visitExpressionStatement = function (e) {
        return e.update(
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitConstructorDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.constructorKeyword),
          this.visitNode(e.callSignature),
          null === e.block ? null : this.visitNode(e.block),
          null === e.semicolonToken ? null : this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitMemberFunctionDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.propertyName),
          this.visitNode(e.callSignature),
          null === e.block ? null : this.visitNode(e.block),
          null === e.semicolonToken ? null : this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitGetAccessor = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.getKeyword),
          this.visitToken(e.propertyName),
          this.visitNode(e.parameterList),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation),
          this.visitNode(e.block)
        );
      }),
      (t.prototype.visitSetAccessor = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.setKeyword),
          this.visitToken(e.propertyName),
          this.visitNode(e.parameterList),
          this.visitNode(e.block)
        );
      }),
      (t.prototype.visitMemberVariableDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitNode(e.variableDeclarator),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitIndexMemberDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitNode(e.indexSignature),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitThrowStatement = function (e) {
        return e.update(
          this.visitToken(e.throwKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitReturnStatement = function (e) {
        return e.update(
          this.visitToken(e.returnKeyword),
          null === e.expression ? null : this.visitNodeOrToken(e.expression),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitObjectCreationExpression = function (e) {
        return e.update(
          this.visitToken(e.newKeyword),
          this.visitNodeOrToken(e.expression),
          null === e.argumentList ? null : this.visitNode(e.argumentList)
        );
      }),
      (t.prototype.visitSwitchStatement = function (e) {
        return e.update(
          this.visitToken(e.switchKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.closeParenToken),
          this.visitToken(e.openBraceToken),
          this.visitList(e.switchClauses),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitCaseSwitchClause = function (e) {
        return e.update(
          this.visitToken(e.caseKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.colonToken),
          this.visitList(e.statements)
        );
      }),
      (t.prototype.visitDefaultSwitchClause = function (e) {
        return e.update(
          this.visitToken(e.defaultKeyword),
          this.visitToken(e.colonToken),
          this.visitList(e.statements)
        );
      }),
      (t.prototype.visitBreakStatement = function (e) {
        return e.update(
          this.visitToken(e.breakKeyword),
          null === e.identifier ? null : this.visitToken(e.identifier),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitContinueStatement = function (e) {
        return e.update(
          this.visitToken(e.continueKeyword),
          null === e.identifier ? null : this.visitToken(e.identifier),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitForStatement = function (e) {
        return e.update(
          this.visitToken(e.forKeyword),
          this.visitToken(e.openParenToken),
          null === e.variableDeclaration
            ? null
            : this.visitNode(e.variableDeclaration),
          null === e.initializer ? null : this.visitNodeOrToken(e.initializer),
          this.visitToken(e.firstSemicolonToken),
          null === e.condition ? null : this.visitNodeOrToken(e.condition),
          this.visitToken(e.secondSemicolonToken),
          null === e.incrementor ? null : this.visitNodeOrToken(e.incrementor),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement)
        );
      }),
      (t.prototype.visitForInStatement = function (e) {
        return e.update(
          this.visitToken(e.forKeyword),
          this.visitToken(e.openParenToken),
          null === e.variableDeclaration
            ? null
            : this.visitNode(e.variableDeclaration),
          null === e.left ? null : this.visitNodeOrToken(e.left),
          this.visitToken(e.inKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement)
        );
      }),
      (t.prototype.visitWhileStatement = function (e) {
        return e.update(
          this.visitToken(e.whileKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement)
        );
      }),
      (t.prototype.visitWithStatement = function (e) {
        return e.update(
          this.visitToken(e.withKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement)
        );
      }),
      (t.prototype.visitEnumDeclaration = function (e) {
        return e.update(
          this.visitList(e.modifiers),
          this.visitToken(e.enumKeyword),
          this.visitToken(e.identifier),
          this.visitToken(e.openBraceToken),
          this.visitSeparatedList(e.enumElements),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitEnumElement = function (e) {
        return e.update(
          this.visitToken(e.propertyName),
          null === e.equalsValueClause
            ? null
            : this.visitNode(e.equalsValueClause)
        );
      }),
      (t.prototype.visitCastExpression = function (e) {
        return e.update(
          this.visitToken(e.lessThanToken),
          this.visitNodeOrToken(e.type),
          this.visitToken(e.greaterThanToken),
          this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitObjectLiteralExpression = function (e) {
        return e.update(
          this.visitToken(e.openBraceToken),
          this.visitSeparatedList(e.propertyAssignments),
          this.visitToken(e.closeBraceToken)
        );
      }),
      (t.prototype.visitSimplePropertyAssignment = function (e) {
        return e.update(
          this.visitToken(e.propertyName),
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitFunctionPropertyAssignment = function (e) {
        return e.update(
          this.visitToken(e.propertyName),
          this.visitNode(e.callSignature),
          this.visitNode(e.block)
        );
      }),
      (t.prototype.visitFunctionExpression = function (e) {
        return e.update(
          this.visitToken(e.functionKeyword),
          null === e.identifier ? null : this.visitToken(e.identifier),
          this.visitNode(e.callSignature),
          this.visitNode(e.block)
        );
      }),
      (t.prototype.visitEmptyStatement = function (e) {
        return e.update(this.visitToken(e.semicolonToken));
      }),
      (t.prototype.visitTryStatement = function (e) {
        return e.update(
          this.visitToken(e.tryKeyword),
          this.visitNode(e.block),
          null === e.catchClause ? null : this.visitNode(e.catchClause),
          null === e.finallyClause ? null : this.visitNode(e.finallyClause)
        );
      }),
      (t.prototype.visitCatchClause = function (e) {
        return e.update(
          this.visitToken(e.catchKeyword),
          this.visitToken(e.openParenToken),
          this.visitToken(e.identifier),
          null === e.typeAnnotation ? null : this.visitNode(e.typeAnnotation),
          this.visitToken(e.closeParenToken),
          this.visitNode(e.block)
        );
      }),
      (t.prototype.visitFinallyClause = function (e) {
        return e.update(
          this.visitToken(e.finallyKeyword),
          this.visitNode(e.block)
        );
      }),
      (t.prototype.visitLabeledStatement = function (e) {
        return e.update(
          this.visitToken(e.identifier),
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.statement)
        );
      }),
      (t.prototype.visitDoStatement = function (e) {
        return e.update(
          this.visitToken(e.doKeyword),
          this.visitNodeOrToken(e.statement),
          this.visitToken(e.whileKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitToken(e.semicolonToken)
        );
      }),
      (t.prototype.visitTypeOfExpression = function (e) {
        return e.update(
          this.visitToken(e.typeOfKeyword),
          this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitDeleteExpression = function (e) {
        return e.update(
          this.visitToken(e.deleteKeyword),
          this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitVoidExpression = function (e) {
        return e.update(
          this.visitToken(e.voidKeyword),
          this.visitNodeOrToken(e.expression)
        );
      }),
      (t.prototype.visitDebuggerStatement = function (e) {
        return e.update(
          this.visitToken(e.debuggerKeyword),
          this.visitToken(e.semicolonToken)
        );
      }),
      t
    );
  })();
  e.SyntaxRewriter = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (t) {
    function n(e, n, r, i) {
      t.call(this),
        (this.dedentationAmount = n),
        (this.minimumIndent = r),
        (this.options = i),
        (this.lastTriviaWasNewLine = e);
    }
    return (
      __extends(n, t),
      (n.prototype.abort = function () {
        (this.lastTriviaWasNewLine = !1), (this.dedentationAmount = 0);
      }),
      (n.prototype.isAborted = function () {
        return 0 === this.dedentationAmount;
      }),
      (n.prototype.visitToken = function (e) {
        if (0 === e.width()) return e;
        var t = e;
        return (
          this.lastTriviaWasNewLine &&
            (t = e.withLeadingTrivia(this.dedentTriviaList(e.leadingTrivia()))),
          this.isAborted()
            ? e
            : ((this.lastTriviaWasNewLine = e.hasTrailingNewLine()), t)
        );
      }),
      (n.prototype.dedentTriviaList = function (t) {
        for (
          var n = [], r = !0, i = 0, o = t.count();
          o > i && !this.isAborted();
          i++
        ) {
          var s = t.syntaxTriviaAt(i),
            a = r;
          if (((r = !1), a)) {
            if (4 === s.kind()) {
              var l = i < t.count() - 1 && 5 === t.syntaxTriviaAt(i + 1).kind();
              n.push(this.dedentWhitespace(s, l));
              continue;
            }
            if (5 !== s.kind()) {
              this.abort();
              break;
            }
          }
          6 !== s.kind()
            ? (n.push(s), 5 === s.kind() && (r = !0))
            : n.push(this.dedentMultiLineComment(s));
        }
        return r && this.abort(), this.isAborted() ? t : e.Syntax.triviaList(n);
      }),
      (n.prototype.dedentSegment = function (t, n) {
        var r = e.Indentation.firstNonWhitespacePosition(t);
        if (r === t.length) {
          if (n) return "";
        } else if (e.CharacterInfo.isLineTerminator(t.charCodeAt(r)))
          return t.substring(r);
        var i = e.Indentation.columnForPositionInString(t, r, this.options),
          o = e.MathPrototype.min(
            i,
            e.MathPrototype.max(i - this.dedentationAmount, this.minimumIndent)
          );
        if (o === i) return this.abort(), t;
        (this.dedentationAmount = i - o),
          e.Debug.assert(this.dedentationAmount >= 0);
        var s = e.Indentation.indentationString(o, this.options);
        return s + t.substring(r);
      }),
      (n.prototype.dedentWhitespace = function (t, n) {
        var r = this.dedentSegment(t.fullText(), n);
        return e.Syntax.whitespace(r);
      }),
      (n.prototype.dedentMultiLineComment = function (t) {
        var n = e.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(t);
        if (1 === n.length) return t;
        for (var r = 1; r < n.length; r++) {
          var i = n[r];
          n[r] = this.dedentSegment(i, !1);
        }
        var o = n.join("");
        return e.Syntax.multiLineComment(o);
      }),
      (n.dedentNode = function (e, t, r, i, o) {
        var s = new n(t, r, i, o),
          a = e.accept(s);
        return s.isAborted() ? e : a;
      }),
      n
    );
  })(e.SyntaxRewriter);
  e.SyntaxDedenter = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (t) {
    function n(n, r, i) {
      t.call(this),
        (this.indentationAmount = r),
        (this.options = i),
        (this.lastTriviaWasNewLine = n),
        (this.indentationTrivia = e.Indentation.indentationTrivia(
          this.indentationAmount,
          this.options
        ));
    }
    return (
      __extends(n, t),
      (n.prototype.visitToken = function (e) {
        if (0 === e.width()) return e;
        var t = e;
        return (
          this.lastTriviaWasNewLine &&
            (t = e.withLeadingTrivia(this.indentTriviaList(e.leadingTrivia()))),
          (this.lastTriviaWasNewLine = e.hasTrailingNewLine()),
          t
        );
      }),
      (n.prototype.indentTriviaList = function (t) {
        for (var n = [], r = !0, i = 0, o = t.count(); o > i; i++) {
          var s = t.syntaxTriviaAt(i),
            a = r;
          switch (((r = !1), s.kind())) {
            case 6:
              this.indentMultiLineComment(s, a, n);
              continue;
            case 7:
            case 8:
              this.indentSingleLineOrSkippedText(s, a, n);
              continue;
            case 4:
              this.indentWhitespace(s, a, n);
              continue;
            case 5:
              n.push(s), (r = !0);
              continue;
            default:
              throw e.Errors.invalidOperation();
          }
        }
        return r && n.push(this.indentationTrivia), e.Syntax.triviaList(n);
      }),
      (n.prototype.indentSegment = function (t) {
        var n = e.Indentation.firstNonWhitespacePosition(t);
        if (n < t.length && e.CharacterInfo.isLineTerminator(t.charCodeAt(n)))
          return t;
        var r = e.Indentation.columnForPositionInString(t, n, this.options),
          i = r + this.indentationAmount,
          o = e.Indentation.indentationString(i, this.options);
        return o + t.substring(n);
      }),
      (n.prototype.indentWhitespace = function (t, n, r) {
        if (!n) return r.push(t), void 0;
        var i = this.indentSegment(t.fullText());
        r.push(e.Syntax.whitespace(i));
      }),
      (n.prototype.indentSingleLineOrSkippedText = function (e, t, n) {
        t && n.push(this.indentationTrivia), n.push(e);
      }),
      (n.prototype.indentMultiLineComment = function (t, n, r) {
        n && r.push(this.indentationTrivia);
        for (
          var i = e.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(t),
            o = 1;
          o < i.length;
          o++
        )
          i[o] = this.indentSegment(i[o]);
        var s = i.join("");
        r.push(e.Syntax.multiLineComment(s));
      }),
      (n.indentNode = function (e, t, r, i) {
        var o = new n(t, r, i);
        return e.accept(o);
      }),
      (n.indentNodes = function (t, r, i, o) {
        var s = new n(r, i, o),
          a = e.ArrayUtilities.select(t, function (e) {
            return e.accept(s);
          });
        return a;
      }),
      n
    );
  })(e.SyntaxRewriter);
  e.SyntaxIndenter = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t) {
      e.leadingTrivia().collectTextElements(t),
        t.push(e.text()),
        e.trailingTrivia().collectTextElements(t);
    }
    function r(e) {
      return e >>> 2;
    }
    function i(e) {
      return 0 !== (2 & e);
    }
    function o(e) {
      return 0 !== (1 & e);
    }
    var s = (function () {
      function t(e, t) {
        (this._fullText = e), (this.tokenKind = t);
      }
      return (
        (t.prototype.clone = function () {
          return new t(this._fullText, this.tokenKind);
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return (
            this.fullWidth() -
            this.leadingTriviaWidth() -
            this.trailingTriviaWidth()
          );
        }),
        (t.prototype.text = function () {
          return this.fullText().substr(
            this.leadingTriviaWidth(),
            this.width()
          );
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return (
            void 0 === this._value && (this._value = e.Syntax.value(this)),
            this._value
          );
        }),
        (t.prototype.valueText = function () {
          return (
            void 0 === this._valueText &&
              (this._valueText = e.Syntax.valueText(this)),
            this._valueText
          );
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasLeadingComment = function () {
          return !1;
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasTrailingComment = function () {
          return !1;
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.VariableWidthTokenWithNoTrivia = s;
    var a = (function () {
      function t(e, t, n) {
        (this._fullText = e),
          (this.tokenKind = t),
          (this._leadingTriviaInfo = n);
      }
      return (
        (t.prototype.clone = function () {
          return new t(this._fullText, this.tokenKind, this._leadingTriviaInfo);
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return (
            this.fullWidth() -
            this.leadingTriviaWidth() -
            this.trailingTriviaWidth()
          );
        }),
        (t.prototype.text = function () {
          return this.fullText().substr(
            this.leadingTriviaWidth(),
            this.width()
          );
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return (
            void 0 === this._value && (this._value = e.Syntax.value(this)),
            this._value
          );
        }),
        (t.prototype.valueText = function () {
          return (
            void 0 === this._valueText &&
              (this._valueText = e.Syntax.valueText(this)),
            this._valueText
          );
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasLeadingComment = function () {
          return i(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return o(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return r(this._leadingTriviaInfo);
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            0,
            r(this._leadingTriviaInfo),
            !1
          );
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasTrailingComment = function () {
          return !1;
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.VariableWidthTokenWithLeadingTrivia = a;
    var l = (function () {
      function t(e, t, n) {
        (this._fullText = e),
          (this.tokenKind = t),
          (this._trailingTriviaInfo = n);
      }
      return (
        (t.prototype.clone = function () {
          return new t(
            this._fullText,
            this.tokenKind,
            this._trailingTriviaInfo
          );
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return (
            this.fullWidth() -
            this.leadingTriviaWidth() -
            this.trailingTriviaWidth()
          );
        }),
        (t.prototype.text = function () {
          return this.fullText().substr(
            this.leadingTriviaWidth(),
            this.width()
          );
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return (
            void 0 === this._value && (this._value = e.Syntax.value(this)),
            this._value
          );
        }),
        (t.prototype.valueText = function () {
          return (
            void 0 === this._valueText &&
              (this._valueText = e.Syntax.valueText(this)),
            this._valueText
          );
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasLeadingComment = function () {
          return !1;
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasTrailingComment = function () {
          return i(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return o(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return r(this._trailingTriviaInfo);
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            this.leadingTriviaWidth() + this.width(),
            r(this._trailingTriviaInfo),
            !0
          );
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.VariableWidthTokenWithTrailingTrivia = l;
    var c = (function () {
      function t(e, t, n, r) {
        (this._fullText = e),
          (this.tokenKind = t),
          (this._leadingTriviaInfo = n),
          (this._trailingTriviaInfo = r);
      }
      return (
        (t.prototype.clone = function () {
          return new t(
            this._fullText,
            this.tokenKind,
            this._leadingTriviaInfo,
            this._trailingTriviaInfo
          );
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return (
            this.fullWidth() -
            this.leadingTriviaWidth() -
            this.trailingTriviaWidth()
          );
        }),
        (t.prototype.text = function () {
          return this.fullText().substr(
            this.leadingTriviaWidth(),
            this.width()
          );
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return (
            void 0 === this._value && (this._value = e.Syntax.value(this)),
            this._value
          );
        }),
        (t.prototype.valueText = function () {
          return (
            void 0 === this._valueText &&
              (this._valueText = e.Syntax.valueText(this)),
            this._valueText
          );
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasLeadingComment = function () {
          return i(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return o(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return r(this._leadingTriviaInfo);
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            0,
            r(this._leadingTriviaInfo),
            !1
          );
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasTrailingComment = function () {
          return i(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return o(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return r(this._trailingTriviaInfo);
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            this.leadingTriviaWidth() + this.width(),
            r(this._trailingTriviaInfo),
            !0
          );
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.VariableWidthTokenWithLeadingAndTrailingTrivia = c;
    var u = (function () {
      function t(e) {
        this.tokenKind = e;
      }
      return (
        (t.prototype.clone = function () {
          return new t(this.tokenKind);
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return this.text().length;
        }),
        (t.prototype.text = function () {
          return e.SyntaxFacts.getText(this.tokenKind);
        }),
        (t.prototype.fullText = function () {
          return this.text();
        }),
        (t.prototype.value = function () {
          return e.Syntax.value(this);
        }),
        (t.prototype.valueText = function () {
          return e.Syntax.valueText(this);
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasLeadingComment = function () {
          return !1;
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasTrailingComment = function () {
          return !1;
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.FixedWidthTokenWithNoTrivia = u;
    var p = (function () {
      function t(e, t, n) {
        (this._fullText = e),
          (this.tokenKind = t),
          (this._leadingTriviaInfo = n);
      }
      return (
        (t.prototype.clone = function () {
          return new t(this._fullText, this.tokenKind, this._leadingTriviaInfo);
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return this.text().length;
        }),
        (t.prototype.text = function () {
          return e.SyntaxFacts.getText(this.tokenKind);
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return e.Syntax.value(this);
        }),
        (t.prototype.valueText = function () {
          return e.Syntax.valueText(this);
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasLeadingComment = function () {
          return i(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return o(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return r(this._leadingTriviaInfo);
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            0,
            r(this._leadingTriviaInfo),
            !1
          );
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasTrailingComment = function () {
          return !1;
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.FixedWidthTokenWithLeadingTrivia = p;
    var h = (function () {
      function t(e, t, n) {
        (this._fullText = e),
          (this.tokenKind = t),
          (this._trailingTriviaInfo = n);
      }
      return (
        (t.prototype.clone = function () {
          return new t(
            this._fullText,
            this.tokenKind,
            this._trailingTriviaInfo
          );
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return this.text().length;
        }),
        (t.prototype.text = function () {
          return e.SyntaxFacts.getText(this.tokenKind);
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return e.Syntax.value(this);
        }),
        (t.prototype.valueText = function () {
          return e.Syntax.valueText(this);
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasLeadingComment = function () {
          return !1;
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasTrailingComment = function () {
          return i(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return o(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return r(this._trailingTriviaInfo);
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            this.leadingTriviaWidth() + this.width(),
            r(this._trailingTriviaInfo),
            !0
          );
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.FixedWidthTokenWithTrailingTrivia = h;
    var d = (function () {
      function t(e, t, n, r) {
        (this._fullText = e),
          (this.tokenKind = t),
          (this._leadingTriviaInfo = n),
          (this._trailingTriviaInfo = r);
      }
      return (
        (t.prototype.clone = function () {
          return new t(
            this._fullText,
            this.tokenKind,
            this._leadingTriviaInfo,
            this._trailingTriviaInfo
          );
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.fullWidth = function () {
          return this.fullText().length;
        }),
        (t.prototype.width = function () {
          return this.text().length;
        }),
        (t.prototype.text = function () {
          return e.SyntaxFacts.getText(this.tokenKind);
        }),
        (t.prototype.fullText = function () {
          return this._fullText;
        }),
        (t.prototype.value = function () {
          return e.Syntax.value(this);
        }),
        (t.prototype.valueText = function () {
          return e.Syntax.valueText(this);
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasLeadingComment = function () {
          return i(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return o(this._leadingTriviaInfo);
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return r(this._leadingTriviaInfo);
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            0,
            r(this._leadingTriviaInfo),
            !1
          );
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !0;
        }),
        (t.prototype.hasTrailingComment = function () {
          return i(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return o(this._trailingTriviaInfo);
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return r(this._trailingTriviaInfo);
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Scanner.scanTrivia(
            e.SimpleText.fromString(this._fullText),
            this.leadingTriviaWidth() + this.width(),
            r(this._trailingTriviaInfo),
            !0
          );
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.toJSON = function () {
          return e.Syntax.tokenToJSON(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return (
            0 === this.fullWidth() ||
            e.SyntaxFacts.isAnyDivideOrRegularExpressionToken(this.tokenKind)
          );
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.realize = function () {
          return e.Syntax.realizeToken(this);
        }),
        (t.prototype.collectTextElements = function (e) {
          n(this, e);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return e.Syntax.isExpression(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.FixedWidthTokenWithLeadingAndTrailingTrivia = d;
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      switch (e.tokenKind) {
        case 11:
        case 12:
        case 13:
        case 14:
        case 24:
        case 32:
        case 35:
        case 37:
        case 50:
          return !0;
      }
      return !1;
    }
    function r(e) {
      return new b(
        e.tokenKind,
        e.leadingTrivia(),
        e.text(),
        e.value(),
        e.valueText(),
        e.trailingTrivia()
      );
    }
    function i(t) {
      return (
        e.Debug.assert(e.SyntaxFacts.isAnyKeyword(t.tokenKind)),
        new b(
          11,
          t.leadingTrivia(),
          t.text(),
          t.text(),
          t.text(),
          t.trailingTrivia()
        )
      );
    }
    function o(t) {
      var n = {};
      for (var r in e.SyntaxKind)
        if (e.SyntaxKind[r] === t.kind()) {
          n.kind = r;
          break;
        }
      (n.width = t.width()),
        t.fullWidth() !== t.width() && (n.fullWidth = t.fullWidth()),
        (n.text = t.text());
      var i = t.value();
      null !== i && ((n.value = i), (n.valueText = t.valueText())),
        t.hasLeadingTrivia() && (n.hasLeadingTrivia = !0),
        t.hasLeadingComment() && (n.hasLeadingComment = !0),
        t.hasLeadingNewLine() && (n.hasLeadingNewLine = !0),
        t.hasLeadingSkippedText() && (n.hasLeadingSkippedText = !0),
        t.hasTrailingTrivia() && (n.hasTrailingTrivia = !0),
        t.hasTrailingComment() && (n.hasTrailingComment = !0),
        t.hasTrailingNewLine() && (n.hasTrailingNewLine = !0),
        t.hasTrailingSkippedText() && (n.hasTrailingSkippedText = !0);
      var o = t.leadingTrivia();
      return (
        o.count() > 0 && (n.leadingTrivia = o),
        (o = t.trailingTrivia()),
        o.count() > 0 && (n.trailingTrivia = o),
        n
      );
    }
    function s(e) {
      return u(e.tokenKind, e.text());
    }
    function a(t, n, r) {
      for (var i = 0, o = 0; r > o; o++) {
        var s = t.charCodeAt(n + o);
        if (!e.CharacterInfo.isHexDigit(s)) break;
        i = (i << 4) + e.CharacterInfo.hexValue(s);
      }
      return i;
    }
    function l(e) {
      v.length = 0;
      for (var t = "", n = 0, r = e.length; r > n; n++) {
        var i = e.charCodeAt(n);
        if (92 === i && (n++, r > n))
          switch ((i = e.charCodeAt(n))) {
            case 48:
              v.push(0);
              continue;
            case 98:
              v.push(8);
              continue;
            case 102:
              v.push(12);
              continue;
            case 110:
              v.push(10);
              continue;
            case 114:
              v.push(13);
              continue;
            case 116:
              v.push(9);
              continue;
            case 118:
              v.push(11);
              continue;
            case 120:
              v.push(a(e, n + 1, 2)), (n += 2);
              continue;
            case 117:
              v.push(a(e, n + 1, 4)), (n += 4);
              continue;
            case 13:
              var o = n + 1;
              o < e.length && 10 === e.charCodeAt(o) && n++;
              continue;
            case 10:
            case 8233:
            case 8232:
              continue;
          }
        v.push(i),
          !n ||
            n % 1024 ||
            ((t = t.concat(String.fromCharCode.apply(null, v))),
            (v.length = 0));
      }
      return v.length && (t = t.concat(String.fromCharCode.apply(null, v))), t;
    }
    function c(e) {
      return e.indexOf("\\") >= 0 ? l(e) : e;
    }
    function u(t, n) {
      if (11 === t) return c(n);
      switch (t) {
        case 37:
          return !0;
        case 24:
          return !1;
        case 32:
          return null;
      }
      if (e.SyntaxFacts.isAnyKeyword(t) || e.SyntaxFacts.isAnyPunctuation(t))
        return e.SyntaxFacts.getText(t);
      if (13 === t)
        return e.IntegerUtilities.isHexInteger(n)
          ? parseInt(n, 16)
          : parseFloat(n);
      if (14 === t)
        return n.length > 1 && n.charCodeAt(n.length - 1) === n.charCodeAt(0)
          ? c(n.substr(1, n.length - 2))
          : c(n.substr(1));
      if (12 === t) return p(n);
      if (10 === t || 9 === t) return null;
      throw e.Errors.invalidOperation();
    }
    function p(e) {
      try {
        var t = e.lastIndexOf("/"),
          n = e.substring(1, t),
          r = e.substring(t + 1);
        return new RegExp(n, r);
      } catch (i) {
        return null;
      }
    }
    function h(e, t) {
      var n = u(e, t);
      return null === n ? "" : n.toString();
    }
    function d(e) {
      var t = e.value();
      return null === t ? "" : t.toString();
    }
    function m(e) {
      return new y(e);
    }
    function f(t, n) {
      "undefined" == typeof n && (n = null);
      var r =
        null !== n && void 0 !== n.text ? n.text : e.SyntaxFacts.getText(t);
      return new b(
        t,
        e.Syntax.triviaList(null === n ? null : n.leadingTrivia),
        r,
        u(t, r),
        h(t, r),
        e.Syntax.triviaList(null === n ? null : n.trailingTrivia)
      );
    }
    function g(e, t) {
      return (
        "undefined" == typeof t && (t = null),
        (t = t || {}),
        (t.text = e),
        f(11, t)
      );
    }
    (t.isExpression = n),
      (t.realizeToken = r),
      (t.convertToIdentifierName = i),
      (t.tokenToJSON = o),
      (t.value = s);
    var v = [];
    (t.massageEscapes = c), (t.valueText = d);
    var y = (function () {
      function t(e) {
        this.tokenKind = e;
      }
      return (
        (t.prototype.clone = function () {
          return new t(this.tokenKind);
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.toJSON = function () {
          return o(this);
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return !0;
        }),
        (t.prototype.fullWidth = function () {
          return 0;
        }),
        (t.prototype.width = function () {
          return 0;
        }),
        (t.prototype.text = function () {
          return "";
        }),
        (t.prototype.fullText = function () {
          return "";
        }),
        (t.prototype.value = function () {
          return null;
        }),
        (t.prototype.valueText = function () {
          return "";
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasLeadingComment = function () {
          return !1;
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return !1;
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return !1;
        }),
        (t.prototype.hasTrailingComment = function () {
          return !1;
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return !1;
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return !1;
        }),
        (t.prototype.hasSkippedToken = function () {
          return !1;
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return 0;
        }),
        (t.prototype.leadingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.trailingTrivia = function () {
          return e.Syntax.emptyTriviaList;
        }),
        (t.prototype.realize = function () {
          return r(this);
        }),
        (t.prototype.collectTextElements = function () {}),
        (t.prototype.withLeadingTrivia = function (e) {
          return this.realize().withLeadingTrivia(e);
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return this.realize().withTrailingTrivia(e);
        }),
        (t.prototype.isExpression = function () {
          return n(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    t.emptyToken = m;
    var b = (function () {
      function t(e, t, n, r, i, o) {
        (this.tokenKind = e),
          (this._leadingTrivia = t),
          (this._text = n),
          (this._value = r),
          (this._valueText = i),
          (this._trailingTrivia = o);
      }
      return (
        (t.prototype.clone = function () {
          return new t(
            this.tokenKind,
            this._leadingTrivia,
            this._text,
            this._value,
            this._valueText,
            this._trailingTrivia
          );
        }),
        (t.prototype.kind = function () {
          return this.tokenKind;
        }),
        (t.prototype.toJSON = function () {
          return o(this);
        }),
        (t.prototype.firstToken = function () {
          return this;
        }),
        (t.prototype.lastToken = function () {
          return this;
        }),
        (t.prototype.isTypeScriptSpecific = function () {
          return !1;
        }),
        (t.prototype.isIncrementallyUnusable = function () {
          return !0;
        }),
        (t.prototype.accept = function (e) {
          return e.visitToken(this);
        }),
        (t.prototype.childCount = function () {
          return 0;
        }),
        (t.prototype.childAt = function () {
          throw e.Errors.argumentOutOfRange("index");
        }),
        (t.prototype.isToken = function () {
          return !0;
        }),
        (t.prototype.isNode = function () {
          return !1;
        }),
        (t.prototype.isList = function () {
          return !1;
        }),
        (t.prototype.isSeparatedList = function () {
          return !1;
        }),
        (t.prototype.isTrivia = function () {
          return !1;
        }),
        (t.prototype.isTriviaList = function () {
          return !1;
        }),
        (t.prototype.fullWidth = function () {
          return (
            this._leadingTrivia.fullWidth() +
            this.width() +
            this._trailingTrivia.fullWidth()
          );
        }),
        (t.prototype.width = function () {
          return this.text().length;
        }),
        (t.prototype.text = function () {
          return this._text;
        }),
        (t.prototype.fullText = function () {
          return (
            this._leadingTrivia.fullText() +
            this.text() +
            this._trailingTrivia.fullText()
          );
        }),
        (t.prototype.value = function () {
          return this._value;
        }),
        (t.prototype.valueText = function () {
          return this._valueText;
        }),
        (t.prototype.hasLeadingTrivia = function () {
          return this._leadingTrivia.count() > 0;
        }),
        (t.prototype.hasLeadingComment = function () {
          return this._leadingTrivia.hasComment();
        }),
        (t.prototype.hasLeadingNewLine = function () {
          return this._leadingTrivia.hasNewLine();
        }),
        (t.prototype.hasLeadingSkippedText = function () {
          return this._leadingTrivia.hasSkippedToken();
        }),
        (t.prototype.leadingTriviaWidth = function () {
          return this._leadingTrivia.fullWidth();
        }),
        (t.prototype.hasTrailingTrivia = function () {
          return this._trailingTrivia.count() > 0;
        }),
        (t.prototype.hasTrailingComment = function () {
          return this._trailingTrivia.hasComment();
        }),
        (t.prototype.hasTrailingNewLine = function () {
          return this._trailingTrivia.hasNewLine();
        }),
        (t.prototype.hasTrailingSkippedText = function () {
          return this._trailingTrivia.hasSkippedToken();
        }),
        (t.prototype.trailingTriviaWidth = function () {
          return this._trailingTrivia.fullWidth();
        }),
        (t.prototype.hasSkippedToken = function () {
          return this.hasLeadingSkippedText() || this.hasTrailingSkippedText();
        }),
        (t.prototype.leadingTrivia = function () {
          return this._leadingTrivia;
        }),
        (t.prototype.trailingTrivia = function () {
          return this._trailingTrivia;
        }),
        (t.prototype.findTokenInternal = function (t, n, r) {
          return new e.PositionedToken(t, this, r);
        }),
        (t.prototype.collectTextElements = function (e) {
          this.leadingTrivia().collectTextElements(e),
            e.push(this.text()),
            this.trailingTrivia().collectTextElements(e);
        }),
        (t.prototype.withLeadingTrivia = function (e) {
          return new t(
            this.tokenKind,
            e,
            this._text,
            this._value,
            this._valueText,
            this._trailingTrivia
          );
        }),
        (t.prototype.withTrailingTrivia = function (e) {
          return new t(
            this.tokenKind,
            this._leadingTrivia,
            this._text,
            this._value,
            this._valueText,
            e
          );
        }),
        (t.prototype.isExpression = function () {
          return n(this);
        }),
        (t.prototype.isPrimaryExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isMemberExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isPostfixExpression = function () {
          return this.isExpression();
        }),
        (t.prototype.isUnaryExpression = function () {
          return this.isExpression();
        }),
        t
      );
    })();
    (t.token = f), (t.identifier = g);
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (e) {
    function t(t, n) {
      e.call(this), (this.token1 = t), (this.token2 = n);
    }
    return (
      __extends(t, e),
      (t.prototype.visitToken = function (e) {
        if (e === this.token1) {
          var t = this.token2;
          return (this.token1 = null), (this.token2 = null), t;
        }
        return e;
      }),
      (t.prototype.visitNode = function (t) {
        return null === this.token1 ? t : e.prototype.visitNode.call(this, t);
      }),
      (t.prototype.visitList = function (t) {
        return null === this.token1 ? t : e.prototype.visitList.call(this, t);
      }),
      (t.prototype.visitSeparatedList = function (t) {
        return null === this.token1
          ? t
          : e.prototype.visitSeparatedList.call(this, t);
      }),
      t
    );
  })(e.SyntaxRewriter);
  e.SyntaxTokenReplacer = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t, n, r) {
      return new d(e, t, n, r);
    }
    function r(e, t) {
      return new p(e, t);
    }
    function i(t) {
      return (
        e.Debug.assert(!t.hasLeadingTrivia()),
        e.Debug.assert(!t.hasTrailingTrivia()),
        e.Debug.assert(t.fullWidth() > 0),
        new h(t)
      );
    }
    function o(t) {
      return r(4, e.StringUtilities.repeat(" ", t));
    }
    function s(e) {
      return r(4, e);
    }
    function a(e) {
      return r(6, e);
    }
    function l(e) {
      return r(7, e);
    }
    function c(e) {
      for (var t = [], n = e.fullText(), r = 0, i = 0; i < n.length; i++) {
        var o = n.charCodeAt(i);
        switch (o) {
          case 13:
            i < n.length - 1 && 10 === n.charCodeAt(i + 1) && i++;
          case 10:
          case 8233:
          case 8232:
            t.push(n.substring(r, i + 1)), (r = i + 1);
            continue;
        }
      }
      return t.push(n.substring(r)), t;
    }
    var u = (function () {
        function t(e) {
          this._kind = e;
        }
        return (
          (t.prototype.fullWidth = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.fullText = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.skippedToken = function () {
            throw e.Errors.abstract();
          }),
          (t.prototype.toJSON = function () {
            var t = {};
            for (var n in e.SyntaxKind)
              if (e.SyntaxKind[n] === this._kind) {
                t.kind = n;
                break;
              }
            return (
              this.isSkippedToken()
                ? (t.skippedToken = this.skippedToken())
                : (t.text = this.fullText()),
              t
            );
          }),
          (t.prototype.kind = function () {
            return this._kind;
          }),
          (t.prototype.isWhitespace = function () {
            return 4 === this.kind();
          }),
          (t.prototype.isComment = function () {
            return 7 === this.kind() || 6 === this.kind();
          }),
          (t.prototype.isNewLine = function () {
            return 5 === this.kind();
          }),
          (t.prototype.isSkippedToken = function () {
            return 8 === this.kind();
          }),
          (t.prototype.collectTextElements = function (e) {
            e.push(this.fullText());
          }),
          t
        );
      })(),
      p = (function (t) {
        function n(e, n) {
          t.call(this, e), (this._text = n);
        }
        return (
          __extends(n, t),
          (n.prototype.fullWidth = function () {
            return this.fullText().length;
          }),
          (n.prototype.fullText = function () {
            return this._text;
          }),
          (n.prototype.skippedToken = function () {
            throw e.Errors.invalidOperation();
          }),
          n
        );
      })(u),
      h = (function (e) {
        function t(t) {
          e.call(this, 8), (this._skippedToken = t);
        }
        return (
          __extends(t, e),
          (t.prototype.fullWidth = function () {
            return this.fullText().length;
          }),
          (t.prototype.fullText = function () {
            return this.skippedToken().fullText();
          }),
          (t.prototype.skippedToken = function () {
            return this._skippedToken;
          }),
          t
        );
      })(u),
      d = (function (t) {
        function n(e, n, r, i) {
          t.call(this, e),
            (this._text = n),
            (this._fullStart = r),
            (this._fullWidth = i),
            (this._fullText = null);
        }
        return (
          __extends(n, t),
          (n.prototype.fullWidth = function () {
            return this._fullWidth;
          }),
          (n.prototype.fullText = function () {
            return (
              this._fullText ||
                ((this._fullText = this._text.substr(
                  this._fullStart,
                  this._fullWidth,
                  !1
                )),
                (this._text = null)),
              this._fullText
            );
          }),
          (n.prototype.skippedToken = function () {
            throw e.Errors.invalidOperation();
          }),
          n
        );
      })(u);
    (t.deferredTrivia = n),
      (t.trivia = r),
      (t.skippedTokenTrivia = i),
      (t.spaces = o),
      (t.whitespace = s),
      (t.multiLineComment = a),
      (t.singleLineComment = l),
      (t.spaceTrivia = o(1)),
      (t.lineFeedTrivia = r(5, "\n")),
      (t.carriageReturnTrivia = r(5, "\r")),
      (t.carriageReturnLineFeedTrivia = r(5, "\r\n")),
      (t.splitMultiLineCommentTriviaIntoMultipleLines = c);
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t) {
      if (0 === e.count()) return t;
      if (0 === t.count()) return e;
      var n = e.toArray();
      return n.push.apply(n, t.toArray()), i(n);
    }
    function r(e) {
      return 6 === e.kind() || 7 === e.kind();
    }
    function i(e) {
      return void 0 === e || null === e || 0 === e.length
        ? t.emptyTriviaList
        : 1 === e.length
        ? new o(e[0])
        : new s(e);
    }
    t.emptyTriviaList = {
      kind: function () {
        return 3;
      },
      count: function () {
        return 0;
      },
      syntaxTriviaAt: function () {
        throw e.Errors.argumentOutOfRange("index");
      },
      last: function () {
        throw e.Errors.argumentOutOfRange("index");
      },
      fullWidth: function () {
        return 0;
      },
      fullText: function () {
        return "";
      },
      hasComment: function () {
        return !1;
      },
      hasNewLine: function () {
        return !1;
      },
      hasSkippedToken: function () {
        return !1;
      },
      toJSON: function () {
        return [];
      },
      collectTextElements: function () {},
      toArray: function () {
        return [];
      },
      concat: function (e) {
        return e;
      },
    };
    var o = (function () {
        function t(e) {
          this.item = e;
        }
        return (
          (t.prototype.kind = function () {
            return 3;
          }),
          (t.prototype.count = function () {
            return 1;
          }),
          (t.prototype.syntaxTriviaAt = function (t) {
            if (0 !== t) throw e.Errors.argumentOutOfRange("index");
            return this.item;
          }),
          (t.prototype.last = function () {
            return this.item;
          }),
          (t.prototype.fullWidth = function () {
            return this.item.fullWidth();
          }),
          (t.prototype.fullText = function () {
            return this.item.fullText();
          }),
          (t.prototype.hasComment = function () {
            return r(this.item);
          }),
          (t.prototype.hasNewLine = function () {
            return 5 === this.item.kind();
          }),
          (t.prototype.hasSkippedToken = function () {
            return 8 === this.item.kind();
          }),
          (t.prototype.toJSON = function () {
            return [this.item];
          }),
          (t.prototype.collectTextElements = function (e) {
            this.item.collectTextElements(e);
          }),
          (t.prototype.toArray = function () {
            return [this.item];
          }),
          (t.prototype.concat = function (e) {
            return n(this, e);
          }),
          t
        );
      })(),
      s = (function () {
        function t(e) {
          this.trivia = e;
        }
        return (
          (t.prototype.kind = function () {
            return 3;
          }),
          (t.prototype.count = function () {
            return this.trivia.length;
          }),
          (t.prototype.syntaxTriviaAt = function (t) {
            if (0 > t || t >= this.trivia.length)
              throw e.Errors.argumentOutOfRange("index");
            return this.trivia[t];
          }),
          (t.prototype.last = function () {
            return this.trivia[this.trivia.length - 1];
          }),
          (t.prototype.fullWidth = function () {
            return e.ArrayUtilities.sum(this.trivia, function (e) {
              return e.fullWidth();
            });
          }),
          (t.prototype.fullText = function () {
            for (var e = "", t = 0, n = this.trivia.length; n > t; t++)
              e += this.trivia[t].fullText();
            return e;
          }),
          (t.prototype.hasComment = function () {
            for (var e = 0; e < this.trivia.length; e++)
              if (r(this.trivia[e])) return !0;
            return !1;
          }),
          (t.prototype.hasNewLine = function () {
            for (var e = 0; e < this.trivia.length; e++)
              if (5 === this.trivia[e].kind()) return !0;
            return !1;
          }),
          (t.prototype.hasSkippedToken = function () {
            for (var e = 0; e < this.trivia.length; e++)
              if (8 === this.trivia[e].kind()) return !0;
            return !1;
          }),
          (t.prototype.toJSON = function () {
            return this.trivia;
          }),
          (t.prototype.collectTextElements = function (e) {
            for (var t = 0; t < this.trivia.length; t++)
              this.trivia[t].collectTextElements(e);
          }),
          (t.prototype.toArray = function () {
            return this.trivia.slice(0);
          }),
          (t.prototype.concat = function (e) {
            return n(this, e);
          }),
          t
        );
      })();
    (t.triviaList = i), (t.spaceTriviaList = i([e.Syntax.spaceTrivia]));
  })(e.Syntax || (e.Syntax = {}));
  e.Syntax;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.isAngleBracket = function (e) {
        var t = e.element(),
          n = e.parentElement();
        if (null !== n && (80 === t.kind() || 81 === t.kind()))
          switch (n.kind()) {
            case 228:
            case 229:
            case 220:
              return !0;
          }
        return !1;
      }),
      (e.getToken = function (e, t) {
        for (var n = 0, r = e.childCount(); r > n; n++) {
          var i = e.childAt(n);
          if (i.tokenKind === t) return i;
        }
        return null;
      }),
      (e.containsToken = function (t, n) {
        return null !== e.getToken(t, n);
      }),
      (e.hasExportKeyword = function (t) {
        return null !== e.getExportKeyword(t);
      }),
      (e.getExportKeyword = function (t) {
        switch (t.kind()) {
          case 130:
          case 131:
          case 129:
          case 148:
          case 132:
          case 128:
          case 133:
            return e.getToken(t.modifiers, 47);
          default:
            return null;
        }
      }),
      (e.isAmbientDeclarationSyntax = function (t) {
        if (!t) return !1;
        var n = t.node();
        switch (n.kind()) {
          case 130:
          case 131:
          case 129:
          case 148:
          case 132:
            if (e.containsToken(n.modifiers, 63)) return !0;
          case 133:
          case 137:
          case 135:
          case 139:
          case 140:
          case 136:
            if (n.isClassElement() || n.isModuleElement())
              return e.isAmbientDeclarationSyntax(t.containingNode());
          case 243:
            return e.isAmbientDeclarationSyntax(
              t.containingNode().containingNode()
            );
          default:
            return e.isAmbientDeclarationSyntax(t.containingNode());
        }
      }),
      e
    );
  })();
  e.SyntaxUtilities = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.prototype.defaultVisit = function () {
        return null;
      }),
      (e.prototype.visitToken = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitSourceUnit = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitExternalModuleReference = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitModuleNameModuleReference = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitImportDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitExportAssignment = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitClassDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitInterfaceDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitHeritageClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitModuleDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitFunctionDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitVariableStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitVariableDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitVariableDeclarator = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitEqualsValueClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitPrefixUnaryExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitArrayLiteralExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitOmittedExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitParenthesizedExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitSimpleArrowFunctionExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitParenthesizedArrowFunctionExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitQualifiedName = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTypeArgumentList = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitConstructorType = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitFunctionType = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitObjectType = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitArrayType = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitGenericType = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTypeQuery = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTypeAnnotation = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitBlock = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitParameter = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitMemberAccessExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitPostfixUnaryExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitElementAccessExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitInvocationExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitArgumentList = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitBinaryExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitConditionalExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitConstructSignature = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitMethodSignature = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitIndexSignature = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitPropertySignature = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitCallSignature = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitParameterList = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTypeParameterList = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTypeParameter = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitConstraint = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitElseClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitIfStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitExpressionStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitConstructorDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitMemberFunctionDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitGetAccessor = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitSetAccessor = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitMemberVariableDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitIndexMemberDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitThrowStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitReturnStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitObjectCreationExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitSwitchStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitCaseSwitchClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitDefaultSwitchClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitBreakStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitContinueStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitForStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitForInStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitWhileStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitWithStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitEnumDeclaration = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitEnumElement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitCastExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitObjectLiteralExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitSimplePropertyAssignment = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitFunctionPropertyAssignment = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitFunctionExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitEmptyStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTryStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitCatchClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitFinallyClause = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitLabeledStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitDoStatement = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitTypeOfExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitDeleteExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitVoidExpression = function (e) {
        return this.defaultVisit(e);
      }),
      (e.prototype.visitDebuggerStatement = function (e) {
        return this.defaultVisit(e);
      }),
      e
    );
  })();
  e.SyntaxVisitor = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return (
      (e.prototype.visitToken = function () {}),
      (e.prototype.visitNode = function (e) {
        e.accept(this);
      }),
      (e.prototype.visitNodeOrToken = function (e) {
        e.isToken() ? this.visitToken(e) : this.visitNode(e);
      }),
      (e.prototype.visitOptionalToken = function (e) {
        null !== e && this.visitToken(e);
      }),
      (e.prototype.visitOptionalNode = function (e) {
        null !== e && this.visitNode(e);
      }),
      (e.prototype.visitOptionalNodeOrToken = function (e) {
        null !== e && this.visitNodeOrToken(e);
      }),
      (e.prototype.visitList = function (e) {
        for (var t = 0, n = e.childCount(); n > t; t++)
          this.visitNodeOrToken(e.childAt(t));
      }),
      (e.prototype.visitSeparatedList = function (e) {
        for (var t = 0, n = e.childCount(); n > t; t++) {
          var r = e.childAt(t);
          this.visitNodeOrToken(r);
        }
      }),
      (e.prototype.visitSourceUnit = function (e) {
        this.visitList(e.moduleElements), this.visitToken(e.endOfFileToken);
      }),
      (e.prototype.visitExternalModuleReference = function (e) {
        this.visitToken(e.requireKeyword),
          this.visitToken(e.openParenToken),
          this.visitToken(e.stringLiteral),
          this.visitToken(e.closeParenToken);
      }),
      (e.prototype.visitModuleNameModuleReference = function (e) {
        this.visitNodeOrToken(e.moduleName);
      }),
      (e.prototype.visitImportDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.importKeyword),
          this.visitToken(e.identifier),
          this.visitToken(e.equalsToken),
          this.visitNodeOrToken(e.moduleReference),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitExportAssignment = function (e) {
        this.visitToken(e.exportKeyword),
          this.visitToken(e.equalsToken),
          this.visitToken(e.identifier),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitClassDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.classKeyword),
          this.visitToken(e.identifier),
          this.visitOptionalNode(e.typeParameterList),
          this.visitList(e.heritageClauses),
          this.visitToken(e.openBraceToken),
          this.visitList(e.classElements),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitInterfaceDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.interfaceKeyword),
          this.visitToken(e.identifier),
          this.visitOptionalNode(e.typeParameterList),
          this.visitList(e.heritageClauses),
          this.visitNode(e.body);
      }),
      (e.prototype.visitHeritageClause = function (e) {
        this.visitToken(e.extendsOrImplementsKeyword),
          this.visitSeparatedList(e.typeNames);
      }),
      (e.prototype.visitModuleDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.moduleKeyword),
          this.visitOptionalNodeOrToken(e.name),
          this.visitOptionalToken(e.stringLiteral),
          this.visitToken(e.openBraceToken),
          this.visitList(e.moduleElements),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitFunctionDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.functionKeyword),
          this.visitToken(e.identifier),
          this.visitNode(e.callSignature),
          this.visitOptionalNode(e.block),
          this.visitOptionalToken(e.semicolonToken);
      }),
      (e.prototype.visitVariableStatement = function (e) {
        this.visitList(e.modifiers),
          this.visitNode(e.variableDeclaration),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitVariableDeclaration = function (e) {
        this.visitToken(e.varKeyword),
          this.visitSeparatedList(e.variableDeclarators);
      }),
      (e.prototype.visitVariableDeclarator = function (e) {
        this.visitToken(e.propertyName),
          this.visitOptionalNode(e.typeAnnotation),
          this.visitOptionalNode(e.equalsValueClause);
      }),
      (e.prototype.visitEqualsValueClause = function (e) {
        this.visitToken(e.equalsToken), this.visitNodeOrToken(e.value);
      }),
      (e.prototype.visitPrefixUnaryExpression = function (e) {
        this.visitToken(e.operatorToken), this.visitNodeOrToken(e.operand);
      }),
      (e.prototype.visitArrayLiteralExpression = function (e) {
        this.visitToken(e.openBracketToken),
          this.visitSeparatedList(e.expressions),
          this.visitToken(e.closeBracketToken);
      }),
      (e.prototype.visitOmittedExpression = function () {}),
      (e.prototype.visitParenthesizedExpression = function (e) {
        this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.closeParenToken);
      }),
      (e.prototype.visitSimpleArrowFunctionExpression = function (e) {
        this.visitToken(e.identifier),
          this.visitToken(e.equalsGreaterThanToken),
          this.visitOptionalNode(e.block),
          this.visitOptionalNodeOrToken(e.expression);
      }),
      (e.prototype.visitParenthesizedArrowFunctionExpression = function (e) {
        this.visitNode(e.callSignature),
          this.visitToken(e.equalsGreaterThanToken),
          this.visitOptionalNode(e.block),
          this.visitOptionalNodeOrToken(e.expression);
      }),
      (e.prototype.visitQualifiedName = function (e) {
        this.visitNodeOrToken(e.left),
          this.visitToken(e.dotToken),
          this.visitToken(e.right);
      }),
      (e.prototype.visitTypeArgumentList = function (e) {
        this.visitToken(e.lessThanToken),
          this.visitSeparatedList(e.typeArguments),
          this.visitToken(e.greaterThanToken);
      }),
      (e.prototype.visitConstructorType = function (e) {
        this.visitToken(e.newKeyword),
          this.visitOptionalNode(e.typeParameterList),
          this.visitNode(e.parameterList),
          this.visitToken(e.equalsGreaterThanToken),
          this.visitNodeOrToken(e.type);
      }),
      (e.prototype.visitFunctionType = function (e) {
        this.visitOptionalNode(e.typeParameterList),
          this.visitNode(e.parameterList),
          this.visitToken(e.equalsGreaterThanToken),
          this.visitNodeOrToken(e.type);
      }),
      (e.prototype.visitObjectType = function (e) {
        this.visitToken(e.openBraceToken),
          this.visitSeparatedList(e.typeMembers),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitArrayType = function (e) {
        this.visitNodeOrToken(e.type),
          this.visitToken(e.openBracketToken),
          this.visitToken(e.closeBracketToken);
      }),
      (e.prototype.visitGenericType = function (e) {
        this.visitNodeOrToken(e.name), this.visitNode(e.typeArgumentList);
      }),
      (e.prototype.visitTypeQuery = function (e) {
        this.visitToken(e.typeOfKeyword), this.visitNodeOrToken(e.name);
      }),
      (e.prototype.visitTypeAnnotation = function (e) {
        this.visitToken(e.colonToken), this.visitNodeOrToken(e.type);
      }),
      (e.prototype.visitBlock = function (e) {
        this.visitToken(e.openBraceToken),
          this.visitList(e.statements),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitParameter = function (e) {
        this.visitOptionalToken(e.dotDotDotToken),
          this.visitList(e.modifiers),
          this.visitToken(e.identifier),
          this.visitOptionalToken(e.questionToken),
          this.visitOptionalNode(e.typeAnnotation),
          this.visitOptionalNode(e.equalsValueClause);
      }),
      (e.prototype.visitMemberAccessExpression = function (e) {
        this.visitNodeOrToken(e.expression),
          this.visitToken(e.dotToken),
          this.visitToken(e.name);
      }),
      (e.prototype.visitPostfixUnaryExpression = function (e) {
        this.visitNodeOrToken(e.operand), this.visitToken(e.operatorToken);
      }),
      (e.prototype.visitElementAccessExpression = function (e) {
        this.visitNodeOrToken(e.expression),
          this.visitToken(e.openBracketToken),
          this.visitNodeOrToken(e.argumentExpression),
          this.visitToken(e.closeBracketToken);
      }),
      (e.prototype.visitInvocationExpression = function (e) {
        this.visitNodeOrToken(e.expression), this.visitNode(e.argumentList);
      }),
      (e.prototype.visitArgumentList = function (e) {
        this.visitOptionalNode(e.typeArgumentList),
          this.visitToken(e.openParenToken),
          this.visitSeparatedList(e.arguments),
          this.visitToken(e.closeParenToken);
      }),
      (e.prototype.visitBinaryExpression = function (e) {
        this.visitNodeOrToken(e.left),
          this.visitToken(e.operatorToken),
          this.visitNodeOrToken(e.right);
      }),
      (e.prototype.visitConditionalExpression = function (e) {
        this.visitNodeOrToken(e.condition),
          this.visitToken(e.questionToken),
          this.visitNodeOrToken(e.whenTrue),
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.whenFalse);
      }),
      (e.prototype.visitConstructSignature = function (e) {
        this.visitToken(e.newKeyword), this.visitNode(e.callSignature);
      }),
      (e.prototype.visitMethodSignature = function (e) {
        this.visitToken(e.propertyName),
          this.visitOptionalToken(e.questionToken),
          this.visitNode(e.callSignature);
      }),
      (e.prototype.visitIndexSignature = function (e) {
        this.visitToken(e.openBracketToken),
          this.visitNode(e.parameter),
          this.visitToken(e.closeBracketToken),
          this.visitOptionalNode(e.typeAnnotation);
      }),
      (e.prototype.visitPropertySignature = function (e) {
        this.visitToken(e.propertyName),
          this.visitOptionalToken(e.questionToken),
          this.visitOptionalNode(e.typeAnnotation);
      }),
      (e.prototype.visitCallSignature = function (e) {
        this.visitOptionalNode(e.typeParameterList),
          this.visitNode(e.parameterList),
          this.visitOptionalNode(e.typeAnnotation);
      }),
      (e.prototype.visitParameterList = function (e) {
        this.visitToken(e.openParenToken),
          this.visitSeparatedList(e.parameters),
          this.visitToken(e.closeParenToken);
      }),
      (e.prototype.visitTypeParameterList = function (e) {
        this.visitToken(e.lessThanToken),
          this.visitSeparatedList(e.typeParameters),
          this.visitToken(e.greaterThanToken);
      }),
      (e.prototype.visitTypeParameter = function (e) {
        this.visitToken(e.identifier), this.visitOptionalNode(e.constraint);
      }),
      (e.prototype.visitConstraint = function (e) {
        this.visitToken(e.extendsKeyword), this.visitNodeOrToken(e.type);
      }),
      (e.prototype.visitElseClause = function (e) {
        this.visitToken(e.elseKeyword), this.visitNodeOrToken(e.statement);
      }),
      (e.prototype.visitIfStatement = function (e) {
        this.visitToken(e.ifKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement),
          this.visitOptionalNode(e.elseClause);
      }),
      (e.prototype.visitExpressionStatement = function (e) {
        this.visitNodeOrToken(e.expression), this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitConstructorDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.constructorKeyword),
          this.visitNode(e.callSignature),
          this.visitOptionalNode(e.block),
          this.visitOptionalToken(e.semicolonToken);
      }),
      (e.prototype.visitMemberFunctionDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.propertyName),
          this.visitNode(e.callSignature),
          this.visitOptionalNode(e.block),
          this.visitOptionalToken(e.semicolonToken);
      }),
      (e.prototype.visitGetAccessor = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.getKeyword),
          this.visitToken(e.propertyName),
          this.visitNode(e.parameterList),
          this.visitOptionalNode(e.typeAnnotation),
          this.visitNode(e.block);
      }),
      (e.prototype.visitSetAccessor = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.setKeyword),
          this.visitToken(e.propertyName),
          this.visitNode(e.parameterList),
          this.visitNode(e.block);
      }),
      (e.prototype.visitMemberVariableDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitNode(e.variableDeclarator),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitIndexMemberDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitNode(e.indexSignature),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitThrowStatement = function (e) {
        this.visitToken(e.throwKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitReturnStatement = function (e) {
        this.visitToken(e.returnKeyword),
          this.visitOptionalNodeOrToken(e.expression),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitObjectCreationExpression = function (e) {
        this.visitToken(e.newKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitOptionalNode(e.argumentList);
      }),
      (e.prototype.visitSwitchStatement = function (e) {
        this.visitToken(e.switchKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.closeParenToken),
          this.visitToken(e.openBraceToken),
          this.visitList(e.switchClauses),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitCaseSwitchClause = function (e) {
        this.visitToken(e.caseKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.colonToken),
          this.visitList(e.statements);
      }),
      (e.prototype.visitDefaultSwitchClause = function (e) {
        this.visitToken(e.defaultKeyword),
          this.visitToken(e.colonToken),
          this.visitList(e.statements);
      }),
      (e.prototype.visitBreakStatement = function (e) {
        this.visitToken(e.breakKeyword),
          this.visitOptionalToken(e.identifier),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitContinueStatement = function (e) {
        this.visitToken(e.continueKeyword),
          this.visitOptionalToken(e.identifier),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitForStatement = function (e) {
        this.visitToken(e.forKeyword),
          this.visitToken(e.openParenToken),
          this.visitOptionalNode(e.variableDeclaration),
          this.visitOptionalNodeOrToken(e.initializer),
          this.visitToken(e.firstSemicolonToken),
          this.visitOptionalNodeOrToken(e.condition),
          this.visitToken(e.secondSemicolonToken),
          this.visitOptionalNodeOrToken(e.incrementor),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement);
      }),
      (e.prototype.visitForInStatement = function (e) {
        this.visitToken(e.forKeyword),
          this.visitToken(e.openParenToken),
          this.visitOptionalNode(e.variableDeclaration),
          this.visitOptionalNodeOrToken(e.left),
          this.visitToken(e.inKeyword),
          this.visitNodeOrToken(e.expression),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement);
      }),
      (e.prototype.visitWhileStatement = function (e) {
        this.visitToken(e.whileKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement);
      }),
      (e.prototype.visitWithStatement = function (e) {
        this.visitToken(e.withKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitNodeOrToken(e.statement);
      }),
      (e.prototype.visitEnumDeclaration = function (e) {
        this.visitList(e.modifiers),
          this.visitToken(e.enumKeyword),
          this.visitToken(e.identifier),
          this.visitToken(e.openBraceToken),
          this.visitSeparatedList(e.enumElements),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitEnumElement = function (e) {
        this.visitToken(e.propertyName),
          this.visitOptionalNode(e.equalsValueClause);
      }),
      (e.prototype.visitCastExpression = function (e) {
        this.visitToken(e.lessThanToken),
          this.visitNodeOrToken(e.type),
          this.visitToken(e.greaterThanToken),
          this.visitNodeOrToken(e.expression);
      }),
      (e.prototype.visitObjectLiteralExpression = function (e) {
        this.visitToken(e.openBraceToken),
          this.visitSeparatedList(e.propertyAssignments),
          this.visitToken(e.closeBraceToken);
      }),
      (e.prototype.visitSimplePropertyAssignment = function (e) {
        this.visitToken(e.propertyName),
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.expression);
      }),
      (e.prototype.visitFunctionPropertyAssignment = function (e) {
        this.visitToken(e.propertyName),
          this.visitNode(e.callSignature),
          this.visitNode(e.block);
      }),
      (e.prototype.visitFunctionExpression = function (e) {
        this.visitToken(e.functionKeyword),
          this.visitOptionalToken(e.identifier),
          this.visitNode(e.callSignature),
          this.visitNode(e.block);
      }),
      (e.prototype.visitEmptyStatement = function (e) {
        this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitTryStatement = function (e) {
        this.visitToken(e.tryKeyword),
          this.visitNode(e.block),
          this.visitOptionalNode(e.catchClause),
          this.visitOptionalNode(e.finallyClause);
      }),
      (e.prototype.visitCatchClause = function (e) {
        this.visitToken(e.catchKeyword),
          this.visitToken(e.openParenToken),
          this.visitToken(e.identifier),
          this.visitOptionalNode(e.typeAnnotation),
          this.visitToken(e.closeParenToken),
          this.visitNode(e.block);
      }),
      (e.prototype.visitFinallyClause = function (e) {
        this.visitToken(e.finallyKeyword), this.visitNode(e.block);
      }),
      (e.prototype.visitLabeledStatement = function (e) {
        this.visitToken(e.identifier),
          this.visitToken(e.colonToken),
          this.visitNodeOrToken(e.statement);
      }),
      (e.prototype.visitDoStatement = function (e) {
        this.visitToken(e.doKeyword),
          this.visitNodeOrToken(e.statement),
          this.visitToken(e.whileKeyword),
          this.visitToken(e.openParenToken),
          this.visitNodeOrToken(e.condition),
          this.visitToken(e.closeParenToken),
          this.visitToken(e.semicolonToken);
      }),
      (e.prototype.visitTypeOfExpression = function (e) {
        this.visitToken(e.typeOfKeyword), this.visitNodeOrToken(e.expression);
      }),
      (e.prototype.visitDeleteExpression = function (e) {
        this.visitToken(e.deleteKeyword), this.visitNodeOrToken(e.expression);
      }),
      (e.prototype.visitVoidExpression = function (e) {
        this.visitToken(e.voidKeyword), this.visitNodeOrToken(e.expression);
      }),
      (e.prototype.visitDebuggerStatement = function (e) {
        this.visitToken(e.debuggerKeyword), this.visitToken(e.semicolonToken);
      }),
      e
    );
  })();
  e.SyntaxWalker = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (e) {
    function t() {
      e.apply(this, arguments), (this._position = 0);
    }
    return (
      __extends(t, e),
      (t.prototype.visitToken = function (e) {
        this._position += e.fullWidth();
      }),
      (t.prototype.position = function () {
        return this._position;
      }),
      (t.prototype.skip = function (e) {
        this._position += e.fullWidth();
      }),
      t
    );
  })(e.SyntaxWalker);
  e.PositionTrackingWalker = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (t) {
    function n(n, r) {
      t.call(this),
        (this.trackParents = n),
        (this.trackPreviousToken = r),
        (this.tokenToInformation = e.Collections.createHashTable(
          e.Collections.DefaultHashTableCapacity,
          e.Collections.identityHashCode
        )),
        (this.elementToPosition = e.Collections.createHashTable(
          e.Collections.DefaultHashTableCapacity,
          e.Collections.identityHashCode
        )),
        (this._previousToken = null),
        (this._previousTokenInformation = null),
        (this._currentPosition = 0),
        (this._elementToParent = e.Collections.createHashTable(
          e.Collections.DefaultHashTableCapacity,
          e.Collections.identityHashCode
        )),
        (this._parentStack = []),
        this._parentStack.push(null);
    }
    return (
      __extends(n, t),
      (n.create = function (e, t, r) {
        var i = new n(t, r);
        return i.visitNode(e), i;
      }),
      (n.prototype.visitNode = function (n) {
        this.trackParents &&
          this._elementToParent.add(
            n,
            e.ArrayUtilities.last(this._parentStack)
          ),
          this.elementToPosition.add(n, this._currentPosition),
          this.trackParents && this._parentStack.push(n),
          t.prototype.visitNode.call(this, n),
          this.trackParents && this._parentStack.pop();
      }),
      (n.prototype.visitToken = function (t) {
        if (
          (this.trackParents &&
            this._elementToParent.add(
              t,
              e.ArrayUtilities.last(this._parentStack)
            ),
          this.trackPreviousToken)
        ) {
          var n = { previousToken: this._previousToken, nextToken: null };
          null !== this._previousTokenInformation &&
            (this._previousTokenInformation.nextToken = t),
            (this._previousToken = t),
            (this._previousTokenInformation = n),
            this.tokenToInformation.add(t, n);
        }
        this.elementToPosition.add(t, this._currentPosition),
          (this._currentPosition += t.fullWidth());
      }),
      (n.prototype.parent = function (e) {
        return this._elementToParent.get(e);
      }),
      (n.prototype.fullStart = function (e) {
        return this.elementToPosition.get(e);
      }),
      (n.prototype.start = function (e) {
        return this.fullStart(e) + e.leadingTriviaWidth();
      }),
      (n.prototype.end = function (e) {
        return this.start(e) + e.width();
      }),
      (n.prototype.previousToken = function (e) {
        return this.tokenInformation(e).previousToken;
      }),
      (n.prototype.tokenInformation = function (e) {
        return this.tokenToInformation.get(e);
      }),
      (n.prototype.firstTokenInLineContainingToken = function (e) {
        for (var t = e; ; ) {
          var n = this.tokenInformation(t);
          if (this.isFirstTokenInLineWorker(n)) break;
          t = n.previousToken;
        }
        return t;
      }),
      (n.prototype.isFirstTokenInLine = function (e) {
        var t = this.tokenInformation(e);
        return this.isFirstTokenInLineWorker(t);
      }),
      (n.prototype.isFirstTokenInLineWorker = function (e) {
        return null === e.previousToken || e.previousToken.hasTrailingNewLine();
      }),
      n
    );
  })(e.SyntaxWalker);
  e.SyntaxInformationMap = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (t) {
    function n() {
      t.apply(this, arguments),
        (this.tokenTable = e.Collections.createHashTable(
          e.Collections.DefaultHashTableCapacity,
          e.Collections.identityHashCode
        ));
    }
    return (
      __extends(n, t),
      (n.checkInvariants = function (e) {
        e.accept(new n());
      }),
      (n.prototype.visitToken = function (e) {
        this.tokenTable.add(e, e);
      }),
      n
    );
  })(e.SyntaxWalker);
  e.SyntaxNodeInvariantsChecker = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (e) {
    function t(t) {
      e.call(this),
        (this._depth = 0),
        (this._maximumDepth = 0),
        (this._maximumDepth = t);
    }
    return (
      __extends(t, e),
      (t.prototype.visitNode = function (t) {
        this._depth < this._maximumDepth
          ? (this._depth++, e.prototype.visitNode.call(this, t), this._depth--)
          : this.skip(t);
      }),
      t
    );
  })(e.PositionTrackingWalker);
  e.DepthLimitedWalker = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t, n, r) {
      var i = new a(e, t, r.languageVersion());
      return new c(e, t.lineMap(), i, r, t).parseSyntaxTree(n);
    }
    function r(e, t, n) {
      if (t.isUnchanged()) return e;
      var r = new l(e, t, n);
      return new c(
        e.fileName(),
        n.lineMap(),
        r,
        e.parseOptions(),
        n
      ).parseSyntaxTree(e.isDeclaration());
    }
    var i;
    !(function (e) {
      (e[(e.CommaExpressionPrecedence = 1)] = "CommaExpressionPrecedence"),
        (e[(e.AssignmentExpressionPrecedence = 2)] =
          "AssignmentExpressionPrecedence"),
        (e[(e.ConditionalExpressionPrecedence = 3)] =
          "ConditionalExpressionPrecedence"),
        (e[(e.ArrowFunctionPrecedence = 4)] = "ArrowFunctionPrecedence"),
        (e[(e.LogicalOrExpressionPrecedence = 5)] =
          "LogicalOrExpressionPrecedence"),
        (e[(e.LogicalAndExpressionPrecedence = 6)] =
          "LogicalAndExpressionPrecedence"),
        (e[(e.BitwiseOrExpressionPrecedence = 7)] =
          "BitwiseOrExpressionPrecedence"),
        (e[(e.BitwiseExclusiveOrExpressionPrecedence = 8)] =
          "BitwiseExclusiveOrExpressionPrecedence"),
        (e[(e.BitwiseAndExpressionPrecedence = 9)] =
          "BitwiseAndExpressionPrecedence"),
        (e[(e.EqualityExpressionPrecedence = 10)] =
          "EqualityExpressionPrecedence"),
        (e[(e.RelationalExpressionPrecedence = 11)] =
          "RelationalExpressionPrecedence"),
        (e[(e.ShiftExpressionPrecdence = 12)] = "ShiftExpressionPrecdence"),
        (e[(e.AdditiveExpressionPrecedence = 13)] =
          "AdditiveExpressionPrecedence"),
        (e[(e.MultiplicativeExpressionPrecedence = 14)] =
          "MultiplicativeExpressionPrecedence"),
        (e[(e.UnaryExpressionPrecedence = 15)] = "UnaryExpressionPrecedence");
    })(i || (i = {}));
    var o;
    !(function (e) {
      (e[(e.SourceUnit_ModuleElements = 1)] = "SourceUnit_ModuleElements"),
        (e[(e.ClassDeclaration_ClassElements = 2)] =
          "ClassDeclaration_ClassElements"),
        (e[(e.ModuleDeclaration_ModuleElements = 4)] =
          "ModuleDeclaration_ModuleElements"),
        (e[(e.SwitchStatement_SwitchClauses = 8)] =
          "SwitchStatement_SwitchClauses"),
        (e[(e.SwitchClause_Statements = 16)] = "SwitchClause_Statements"),
        (e[(e.Block_Statements = 32)] = "Block_Statements"),
        (e[(e.TryBlock_Statements = 64)] = "TryBlock_Statements"),
        (e[(e.CatchBlock_Statements = 128)] = "CatchBlock_Statements"),
        (e[(e.EnumDeclaration_EnumElements = 256)] =
          "EnumDeclaration_EnumElements"),
        (e[(e.ObjectType_TypeMembers = 512)] = "ObjectType_TypeMembers"),
        (e[(e.ClassOrInterfaceDeclaration_HeritageClauses = 1024)] =
          "ClassOrInterfaceDeclaration_HeritageClauses"),
        (e[(e.HeritageClause_TypeNameList = 2048)] =
          "HeritageClause_TypeNameList"),
        (e[(e.VariableDeclaration_VariableDeclarators_AllowIn = 4096)] =
          "VariableDeclaration_VariableDeclarators_AllowIn"),
        (e[(e.VariableDeclaration_VariableDeclarators_DisallowIn = 8192)] =
          "VariableDeclaration_VariableDeclarators_DisallowIn"),
        (e[(e.ArgumentList_AssignmentExpressions = 16384)] =
          "ArgumentList_AssignmentExpressions"),
        (e[(e.ObjectLiteralExpression_PropertyAssignments = 32768)] =
          "ObjectLiteralExpression_PropertyAssignments"),
        (e[(e.ArrayLiteralExpression_AssignmentExpressions = 65536)] =
          "ArrayLiteralExpression_AssignmentExpressions"),
        (e[(e.ParameterList_Parameters = 1 << 17)] =
          "ParameterList_Parameters"),
        (e[(e.TypeArgumentList_Types = 1 << 18)] = "TypeArgumentList_Types"),
        (e[(e.TypeParameterList_TypeParameters = 1 << 19)] =
          "TypeParameterList_TypeParameters"),
        (e[(e.FirstListParsingState = e.SourceUnit_ModuleElements)] =
          "FirstListParsingState"),
        (e[(e.LastListParsingState = e.TypeParameterList_TypeParameters)] =
          "LastListParsingState");
    })(o || (o = {}));
    var s = (function () {
        function e(e) {
          (this._elements = []),
            (this._index = 0),
            (this._pinCount = 0),
            e.insertChildrenInto(this._elements, 0);
        }
        return (
          (e.prototype.isFinished = function () {
            return this._index === this._elements.length;
          }),
          (e.prototype.currentElement = function () {
            return this.isFinished() ? null : this._elements[this._index];
          }),
          (e.prototype.currentNode = function () {
            var e = this.currentElement();
            return null !== e && e.isNode() ? e : null;
          }),
          (e.prototype.moveToFirstChild = function () {
            if (!this.isFinished()) {
              var e = this._elements[this._index];
              if (!e.isToken()) {
                var t = e;
                this._elements.splice(this._index, 1),
                  t.insertChildrenInto(this._elements, this._index);
              }
            }
          }),
          (e.prototype.moveToNextSibling = function () {
            return this.isFinished()
              ? void 0
              : this._pinCount > 0
              ? (this._index++, void 0)
              : (this._elements.shift(), void 0);
          }),
          (e.prototype.getAndPinCursorIndex = function () {
            return this._pinCount++, this._index;
          }),
          (e.prototype.releaseAndUnpinCursorIndex = function () {
            this._pinCount--, 0 === this._pinCount;
          }),
          (e.prototype.rewindToPinnedCursorIndex = function (e) {
            this._index = e;
          }),
          (e.prototype.pinCount = function () {
            return this._pinCount;
          }),
          (e.prototype.moveToFirstToken = function () {
            for (var e; !this.isFinished(); ) {
              e = this.currentElement();
              {
                if (!e.isNode()) return;
                this.moveToFirstChild();
              }
            }
          }),
          (e.prototype.currentToken = function () {
            if ((this.moveToFirstToken(), this.isFinished())) return null;
            var e = this.currentElement();
            return e;
          }),
          (e.prototype.peekToken = function (e) {
            this.moveToFirstToken();
            for (var t = this.getAndPinCursorIndex(), n = 0; e > n; n++)
              this.moveToNextSibling(), this.moveToFirstToken();
            var r = this.currentToken();
            return (
              this.rewindToPinnedCursorIndex(t),
              this.releaseAndUnpinCursorIndex(t),
              r
            );
          }),
          e
        );
      })(),
      a = (function () {
        function t(t, n, r) {
          (this._previousToken = null),
            (this._absolutePosition = 0),
            (this._tokenDiagnostics = []),
            (this.rewindPointPool = []),
            (this.rewindPointPoolCount = 0),
            (this.slidingWindow = new e.SlidingWindow(
              this,
              e.ArrayUtilities.createArray(32, null),
              null
            )),
            (this.scanner = new e.Scanner(t, n, r));
        }
        return (
          (t.prototype.currentNode = function () {
            return null;
          }),
          (t.prototype.moveToNextNode = function () {
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.absolutePosition = function () {
            return this._absolutePosition;
          }),
          (t.prototype.previousToken = function () {
            return this._previousToken;
          }),
          (t.prototype.tokenDiagnostics = function () {
            return this._tokenDiagnostics;
          }),
          (t.prototype.getOrCreateRewindPoint = function () {
            if (0 === this.rewindPointPoolCount) return {};
            this.rewindPointPoolCount--;
            var e = this.rewindPointPool[this.rewindPointPoolCount];
            return (this.rewindPointPool[this.rewindPointPoolCount] = null), e;
          }),
          (t.prototype.getRewindPoint = function () {
            var e = this.slidingWindow.getAndPinAbsoluteIndex(),
              t = this.getOrCreateRewindPoint();
            return (
              (t.slidingWindowIndex = e),
              (t.previousToken = this._previousToken),
              (t.absolutePosition = this._absolutePosition),
              (t.pinCount = this.slidingWindow.pinCount()),
              t
            );
          }),
          (t.prototype.isPinned = function () {
            return this.slidingWindow.pinCount() > 0;
          }),
          (t.prototype.rewind = function (e) {
            this.slidingWindow.rewindToPinnedIndex(e.slidingWindowIndex),
              (this._previousToken = e.previousToken),
              (this._absolutePosition = e.absolutePosition);
          }),
          (t.prototype.releaseRewindPoint = function (e) {
            this.slidingWindow.releaseAndUnpinAbsoluteIndex(e.absoluteIndex),
              (this.rewindPointPool[this.rewindPointPoolCount] = e),
              this.rewindPointPoolCount++;
          }),
          (t.prototype.fetchMoreItems = function (e, t, n, r) {
            return (n[r] = this.scanner.scan(this._tokenDiagnostics, e)), 1;
          }),
          (t.prototype.peekToken = function (e) {
            return this.slidingWindow.peekItemN(e);
          }),
          (t.prototype.moveToNextToken = function () {
            var e = this.currentToken();
            (this._absolutePosition += e.fullWidth()),
              (this._previousToken = e),
              this.slidingWindow.moveToNextItem();
          }),
          (t.prototype.currentToken = function () {
            return this.slidingWindow.currentItem(!1);
          }),
          (t.prototype.removeDiagnosticsOnOrAfterPosition = function (e) {
            for (var t = this._tokenDiagnostics.length; t > 0; ) {
              var n = this._tokenDiagnostics[t - 1];
              if (!(n.start() >= e)) break;
              t--;
            }
            this._tokenDiagnostics.length = t;
          }),
          (t.prototype.resetToPosition = function (e, t) {
            (this._absolutePosition = e),
              (this._previousToken = t),
              this.removeDiagnosticsOnOrAfterPosition(e),
              this.slidingWindow.disgardAllItemsFromCurrentIndexOnwards(),
              this.scanner.setAbsoluteIndex(e);
          }),
          (t.prototype.currentTokenAllowingRegularExpression = function () {
            this.resetToPosition(this._absolutePosition, this._previousToken);
            var e = this.slidingWindow.currentItem(!0);
            return e;
          }),
          t
        );
      })(),
      l = (function () {
        function t(n, r, i) {
          this._changeDelta = 0;
          var o = n.sourceUnit();
          (this._oldSourceUnitCursor = new s(o)),
            (this._changeRange = t.extendToAffectedRange(r, o)),
            e.Debug.shouldAssert(2) &&
              e.Debug.assert(
                o.fullWidth() -
                  this._changeRange.span().length() +
                  this._changeRange.newLength() ===
                  i.length()
              ),
            (this._normalParserSource = new a(
              n.fileName(),
              i,
              n.parseOptions().languageVersion()
            ));
        }
        return (
          (t.extendToAffectedRange = function (t, n) {
            for (var r = 1, i = t.span().start(), o = 0; i > 0 && r >= o; o++) {
              var s = n.findToken(i),
                a = s.fullStart();
              i = e.MathPrototype.max(0, a - 1);
            }
            var l = e.TextSpan.fromBounds(i, t.span().end()),
              c = t.newLength() + (t.span().start() - i);
            return new e.TextChangeRange(l, c);
          }),
          (t.prototype.absolutePosition = function () {
            return this._normalParserSource.absolutePosition();
          }),
          (t.prototype.previousToken = function () {
            return this._normalParserSource.previousToken();
          }),
          (t.prototype.tokenDiagnostics = function () {
            return this._normalParserSource.tokenDiagnostics();
          }),
          (t.prototype.getRewindPoint = function () {
            var e = this._normalParserSource.getRewindPoint(),
              t = this._oldSourceUnitCursor.getAndPinCursorIndex();
            return (
              (e.changeDelta = this._changeDelta),
              (e.changeRange = this._changeRange),
              (e.oldSourceUnitCursorIndex = t),
              e
            );
          }),
          (t.prototype.rewind = function (e) {
            (this._changeRange = e.changeRange),
              (this._changeDelta = e.changeDelta),
              this._oldSourceUnitCursor.rewindToPinnedCursorIndex(
                e.oldSourceUnitCursorIndex
              ),
              this._normalParserSource.rewind(e);
          }),
          (t.prototype.releaseRewindPoint = function (e) {
            this._oldSourceUnitCursor.releaseAndUnpinCursorIndex(
              e.oldSourceUnitCursorIndex
            ),
              this._normalParserSource.releaseRewindPoint(e);
          }),
          (t.prototype.canReadFromOldSourceUnit = function () {
            return this._normalParserSource.isPinned()
              ? !1
              : null !== this._changeRange &&
                this._changeRange
                  .newSpan()
                  .intersectsWithPosition(this.absolutePosition())
              ? !1
              : (this.syncCursorToNewTextIfBehind(),
                0 === this._changeDelta &&
                  !this._oldSourceUnitCursor.isFinished());
          }),
          (t.prototype.currentNode = function () {
            return this.canReadFromOldSourceUnit()
              ? this.tryGetNodeFromOldSourceUnit()
              : null;
          }),
          (t.prototype.currentToken = function () {
            if (this.canReadFromOldSourceUnit()) {
              var e = this.tryGetTokenFromOldSourceUnit();
              if (null !== e) return e;
            }
            return this._normalParserSource.currentToken();
          }),
          (t.prototype.currentTokenAllowingRegularExpression = function () {
            return this._normalParserSource.currentTokenAllowingRegularExpression();
          }),
          (t.prototype.syncCursorToNewTextIfBehind = function () {
            for (;;) {
              if (this._oldSourceUnitCursor.isFinished()) break;
              if (this._changeDelta >= 0) break;
              var e = this._oldSourceUnitCursor.currentElement();
              e.isNode() && e.fullWidth() > Math.abs(this._changeDelta)
                ? this._oldSourceUnitCursor.moveToFirstChild()
                : (this._oldSourceUnitCursor.moveToNextSibling(),
                  (this._changeDelta += e.fullWidth()));
            }
          }),
          (t.prototype.intersectsWithChangeRangeSpanInOriginalText = function (
            e,
            t
          ) {
            return (
              null !== this._changeRange &&
              this._changeRange.span().intersectsWith(e, t)
            );
          }),
          (t.prototype.tryGetNodeFromOldSourceUnit = function () {
            for (;;) {
              var e = this._oldSourceUnitCursor.currentNode();
              if (null === e) return null;
              if (
                !this.intersectsWithChangeRangeSpanInOriginalText(
                  this.absolutePosition(),
                  e.fullWidth()
                ) &&
                !e.isIncrementallyUnusable()
              )
                return e;
              this._oldSourceUnitCursor.moveToFirstChild();
            }
          }),
          (t.prototype.canReuseTokenFromOldSourceUnit = function (e, t) {
            return null === t ||
              this.intersectsWithChangeRangeSpanInOriginalText(
                e,
                t.fullWidth()
              ) ||
              t.isIncrementallyUnusable()
              ? !1
              : !0;
          }),
          (t.prototype.tryGetTokenFromOldSourceUnit = function () {
            var e = this._oldSourceUnitCursor.currentToken();
            return this.canReuseTokenFromOldSourceUnit(
              this.absolutePosition(),
              e
            )
              ? e
              : null;
          }),
          (t.prototype.peekToken = function (e) {
            if (this.canReadFromOldSourceUnit()) {
              var t = this.tryPeekTokenFromOldSourceUnit(e);
              if (null !== t) return t;
            }
            return this._normalParserSource.peekToken(e);
          }),
          (t.prototype.tryPeekTokenFromOldSourceUnit = function (e) {
            for (var t = this.absolutePosition(), n = 0; e > n; n++) {
              var r = this._oldSourceUnitCursor.peekToken(n);
              if (!this.canReuseTokenFromOldSourceUnit(t, r)) return null;
              t += r.fullWidth();
            }
            var i = this._oldSourceUnitCursor.peekToken(e);
            return this.canReuseTokenFromOldSourceUnit(t, i) ? i : null;
          }),
          (t.prototype.moveToNextNode = function () {
            var e =
              (this._oldSourceUnitCursor.currentElement(),
              this._oldSourceUnitCursor.currentNode());
            this._oldSourceUnitCursor.moveToNextSibling();
            var t = this.absolutePosition() + e.fullWidth(),
              n = e.lastToken();
            this._normalParserSource.resetToPosition(t, n),
              null !== this._changeRange;
          }),
          (t.prototype.moveToNextToken = function () {
            var e = this.currentToken();
            if (this._oldSourceUnitCursor.currentToken() === e) {
              this._oldSourceUnitCursor.moveToNextSibling();
              var t = this.absolutePosition() + e.fullWidth(),
                n = e;
              this._normalParserSource.resetToPosition(t, n),
                null !== this._changeRange;
            } else if (
              ((this._changeDelta -= e.fullWidth()),
              this._normalParserSource.moveToNextToken(),
              null !== this._changeRange)
            ) {
              var r = this._changeRange.newSpan();
              this.absolutePosition() >= r.end() &&
                ((this._changeDelta +=
                  this._changeRange.newLength() -
                  this._changeRange.span().length()),
                (this._changeRange = null));
            }
          }),
          t
        );
      })(),
      c = (function () {
        function t(t, n, r, i, o) {
          (this.newText_forDebuggingPurposesOnly = o),
            (this.listParsingState = 0),
            (this.isInStrictMode = !1),
            (this.diagnostics = []),
            (this.factory = e.Syntax.normalModeFactory),
            (this.mergeTokensStorage = []),
            (this.arrayPool = []),
            (this.fileName = t),
            (this.lineMap = n),
            (this.source = r),
            (this.parseOptions = i);
        }
        return (
          (t.prototype.getRewindPoint = function () {
            var e = this.source.getRewindPoint();
            return (
              (e.diagnosticsCount = this.diagnostics.length),
              (e.isInStrictMode = this.isInStrictMode),
              (e.listParsingState = this.listParsingState),
              e
            );
          }),
          (t.prototype.rewind = function (e) {
            this.source.rewind(e),
              (this.diagnostics.length = e.diagnosticsCount);
          }),
          (t.prototype.releaseRewindPoint = function (e) {
            this.source.releaseRewindPoint(e);
          }),
          (t.prototype.currentTokenStart = function () {
            return (
              this.source.absolutePosition() +
              this.currentToken().leadingTriviaWidth()
            );
          }),
          (t.prototype.previousTokenStart = function () {
            return null === this.previousToken()
              ? 0
              : this.source.absolutePosition() -
                  this.previousToken().fullWidth() +
                  this.previousToken().leadingTriviaWidth();
          }),
          (t.prototype.previousTokenEnd = function () {
            return null === this.previousToken()
              ? 0
              : this.previousTokenStart() + this.previousToken().width();
          }),
          (t.prototype.currentNode = function () {
            var e = this.source.currentNode();
            return null === e || e.parsedInStrictMode() !== this.isInStrictMode
              ? null
              : e;
          }),
          (t.prototype.currentToken = function () {
            return this.source.currentToken();
          }),
          (t.prototype.currentTokenAllowingRegularExpression = function () {
            return this.source.currentTokenAllowingRegularExpression();
          }),
          (t.prototype.peekToken = function (e) {
            return this.source.peekToken(e);
          }),
          (t.prototype.eatAnyToken = function () {
            var e = this.currentToken();
            return this.moveToNextToken(), e;
          }),
          (t.prototype.moveToNextToken = function () {
            this.source.moveToNextToken();
          }),
          (t.prototype.previousToken = function () {
            return this.source.previousToken();
          }),
          (t.prototype.eatNode = function () {
            var e = this.source.currentNode();
            return this.source.moveToNextNode(), e;
          }),
          (t.prototype.eatToken = function (e) {
            var t = this.currentToken();
            return t.tokenKind === e
              ? (this.moveToNextToken(), t)
              : this.createMissingToken(e, t);
          }),
          (t.prototype.tryEatToken = function (e) {
            return this.currentToken().tokenKind === e
              ? this.eatToken(e)
              : null;
          }),
          (t.prototype.eatKeyword = function (e) {
            var t = this.currentToken();
            return t.tokenKind === e
              ? (this.moveToNextToken(), t)
              : this.createMissingToken(e, t);
          }),
          (t.prototype.isIdentifier = function (e) {
            var t = e.tokenKind;
            return 11 === t
              ? !0
              : t >= 51
              ? 59 >= t
                ? !this.isInStrictMode
                : 69 >= t
              : !1;
          }),
          (t.prototype.eatIdentifierNameToken = function () {
            var t = this.currentToken();
            return 11 === t.tokenKind
              ? (this.moveToNextToken(), t)
              : e.SyntaxFacts.isAnyKeyword(t.tokenKind)
              ? (this.moveToNextToken(), e.Syntax.convertToIdentifierName(t))
              : this.createMissingToken(11, t);
          }),
          (t.prototype.eatIdentifierToken = function () {
            var t = this.currentToken();
            return this.isIdentifier(t)
              ? (this.moveToNextToken(),
                11 === t.tokenKind ? t : e.Syntax.convertToIdentifierName(t))
              : this.createMissingToken(11, t);
          }),
          (t.prototype.canEatAutomaticSemicolon = function (e) {
            var t = this.currentToken();
            return 10 === t.tokenKind
              ? !0
              : 71 === t.tokenKind
              ? !0
              : e
              ? !0
              : null !== this.previousToken() &&
                this.previousToken().hasTrailingNewLine()
              ? !0
              : !1;
          }),
          (t.prototype.canEatExplicitOrAutomaticSemicolon = function (e) {
            var t = this.currentToken();
            return 78 === t.tokenKind ? !0 : this.canEatAutomaticSemicolon(e);
          }),
          (t.prototype.eatExplicitOrAutomaticSemicolon = function (t) {
            var n = this.currentToken();
            if (78 === n.tokenKind) return this.eatToken(78);
            if (this.canEatAutomaticSemicolon(t)) {
              var r = e.Syntax.emptyToken(78);
              return (
                this.parseOptions.allowAutomaticSemicolonInsertion() ||
                  this.addDiagnostic(
                    new e.Diagnostic(
                      this.fileName,
                      this.lineMap,
                      this.previousTokenEnd(),
                      0,
                      e.DiagnosticCode.Automatic_semicolon_insertion_not_allowed,
                      null
                    )
                  ),
                r
              );
            }
            return this.eatToken(78);
          }),
          (t.prototype.isKeyword = function (e) {
            if (e >= 15) {
              if (50 >= e) return !0;
              if (this.isInStrictMode) return 59 >= e;
            }
            return !1;
          }),
          (t.prototype.createMissingToken = function (t, n) {
            var r = this.getExpectedTokenDiagnostic(t, n);
            return this.addDiagnostic(r), e.Syntax.emptyToken(t);
          }),
          (t.prototype.getExpectedTokenDiagnostic = function (t, n) {
            var r = this.currentToken();
            return e.SyntaxFacts.isAnyKeyword(t) ||
              e.SyntaxFacts.isAnyPunctuation(t)
              ? new e.Diagnostic(
                  this.fileName,
                  this.lineMap,
                  this.currentTokenStart(),
                  r.width(),
                  e.DiagnosticCode._0_expected,
                  [e.SyntaxFacts.getText(t)]
                )
              : null !== n && e.SyntaxFacts.isAnyKeyword(n.tokenKind)
              ? new e.Diagnostic(
                  this.fileName,
                  this.lineMap,
                  this.currentTokenStart(),
                  r.width(),
                  e.DiagnosticCode.Identifier_expected_0_is_a_keyword,
                  [e.SyntaxFacts.getText(n.tokenKind)]
                )
              : new e.Diagnostic(
                  this.fileName,
                  this.lineMap,
                  this.currentTokenStart(),
                  r.width(),
                  e.DiagnosticCode.Identifier_expected,
                  null
                );
          }),
          (t.getPrecedence = function (t) {
            switch (t) {
              case 173:
                return 1;
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
              case 183:
              case 184:
              case 185:
                return 2;
              case 186:
                return 3;
              case 187:
                return 5;
              case 188:
                return 6;
              case 189:
                return 7;
              case 190:
                return 8;
              case 191:
                return 9;
              case 192:
              case 193:
              case 194:
              case 195:
                return 10;
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
              case 201:
                return 11;
              case 202:
              case 203:
              case 204:
                return 12;
              case 208:
              case 209:
                return 13;
              case 205:
              case 206:
              case 207:
                return 14;
              case 164:
              case 165:
              case 166:
              case 167:
              case 170:
              case 171:
              case 172:
              case 168:
              case 169:
                return 15;
            }
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.addSkippedTokenAfterNodeOrToken = function (t, n) {
            if (t.isToken()) return this.addSkippedTokenAfterToken(t, n);
            if (t.isNode()) return this.addSkippedTokenAfterNode(t, n);
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.addSkippedTokenAfterNode = function (e, t) {
            var n = e.lastToken(),
              r = this.addSkippedTokenAfterToken(n, t);
            return e.replaceToken(n, r);
          }),
          (t.prototype.addSkippedTokensBeforeNode = function (e, t) {
            if (t.length > 0) {
              var n = e.firstToken(),
                r = this.addSkippedTokensBeforeToken(n, t);
              return e.replaceToken(n, r);
            }
            return e;
          }),
          (t.prototype.addSkippedTokensBeforeToken = function (t, n) {
            for (var r = [], i = 0, o = n.length; o > i; i++)
              this.addSkippedTokenToTriviaArray(r, n[i]);
            return (
              this.addTriviaTo(t.leadingTrivia(), r),
              this.returnArray(n),
              t.withLeadingTrivia(e.Syntax.triviaList(r))
            );
          }),
          (t.prototype.addSkippedTokensAfterToken = function (t, n) {
            if (0 === n.length) return this.returnArray(n), t;
            for (
              var r = t.trailingTrivia().toArray(), i = 0, o = n.length;
              o > i;
              i++
            )
              this.addSkippedTokenToTriviaArray(r, n[i]);
            return (
              this.returnArray(n), t.withTrailingTrivia(e.Syntax.triviaList(r))
            );
          }),
          (t.prototype.addSkippedTokenAfterToken = function (t, n) {
            var r = t.trailingTrivia().toArray();
            return (
              this.addSkippedTokenToTriviaArray(r, n),
              t.withTrailingTrivia(e.Syntax.triviaList(r))
            );
          }),
          (t.prototype.addSkippedTokenToTriviaArray = function (t, n) {
            this.addTriviaTo(n.leadingTrivia(), t);
            var r = n
              .withLeadingTrivia(e.Syntax.emptyTriviaList)
              .withTrailingTrivia(e.Syntax.emptyTriviaList);
            t.push(e.Syntax.skippedTokenTrivia(r)),
              this.addTriviaTo(n.trailingTrivia(), t);
          }),
          (t.prototype.addTriviaTo = function (e, t) {
            for (var n = 0, r = e.count(); r > n; n++)
              t.push(e.syntaxTriviaAt(n));
          }),
          (t.prototype.parseSyntaxTree = function (t) {
            var n = this.parseSourceUnit(),
              r = this.source.tokenDiagnostics().concat(this.diagnostics);
            return (
              r.sort(function (e, t) {
                return e.start() - t.start();
              }),
              new e.SyntaxTree(
                n,
                t,
                r,
                this.fileName,
                this.lineMap,
                this.parseOptions
              )
            );
          }),
          (t.prototype.setStrictMode = function (t) {
            (this.isInStrictMode = t),
              (this.factory = t
                ? e.Syntax.strictModeFactory
                : e.Syntax.normalModeFactory);
          }),
          (t.prototype.parseSourceUnit = function () {
            var n = this.isInStrictMode,
              r = this.parseSyntaxList(1, t.updateStrictModeState),
              i = r.list;
            this.setStrictMode(n);
            var o = this.factory.sourceUnit(i, this.currentToken());
            return (
              (o = this.addSkippedTokensBeforeNode(o, r.skippedTokens)),
              e.Debug.shouldAssert(2) &&
                (e.Debug.assert(
                  o.fullWidth() ===
                    this.newText_forDebuggingPurposesOnly.length()
                ),
                e.Debug.shouldAssert(3) &&
                  e.Debug.assert(
                    o.fullText() ===
                      this.newText_forDebuggingPurposesOnly.substr(
                        0,
                        this.newText_forDebuggingPurposesOnly.length(),
                        !1
                      )
                  )),
              o
            );
          }),
          (t.updateStrictModeState = function (t, n) {
            if (!t.isInStrictMode) {
              for (var r = 0; r < n.length; r++) {
                var i = n[r];
                if (!e.SyntaxFacts.isDirectivePrologueElement(i)) return;
              }
              t.setStrictMode(
                e.SyntaxFacts.isUseStrictDirective(n[n.length - 1])
              );
            }
          }),
          (t.prototype.isModuleElement = function (e) {
            if (
              null !== this.currentNode() &&
              this.currentNode().isModuleElement()
            )
              return !0;
            var t = this.modifierCount();
            return (
              this.isImportDeclaration(t) ||
              this.isExportAssignment() ||
              this.isModuleDeclaration(t) ||
              this.isInterfaceDeclaration(t) ||
              this.isClassDeclaration(t) ||
              this.isEnumDeclaration(t) ||
              this.isStatement(e)
            );
          }),
          (t.prototype.parseModuleElement = function (t) {
            if (
              null !== this.currentNode() &&
              this.currentNode().isModuleElement()
            )
              return this.eatNode();
            var n = this.modifierCount();
            if (this.isImportDeclaration(n))
              return this.parseImportDeclaration();
            if (this.isExportAssignment()) return this.parseExportAssignment();
            if (this.isModuleDeclaration(n))
              return this.parseModuleDeclaration();
            if (this.isInterfaceDeclaration(n))
              return this.parseInterfaceDeclaration();
            if (this.isClassDeclaration(n)) return this.parseClassDeclaration();
            if (this.isEnumDeclaration(n)) return this.parseEnumDeclaration();
            if (this.isStatement(t)) return this.parseStatement(t);
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.isImportDeclaration = function (e) {
            return e > 0 && 49 === this.peekToken(e).tokenKind
              ? !0
              : 49 === this.currentToken().tokenKind &&
                  this.isIdentifier(this.peekToken(1));
          }),
          (t.prototype.parseImportDeclaration = function () {
            var e = this.parseModifiers(),
              t = this.eatKeyword(49),
              n = this.eatIdentifierToken(),
              r = this.eatToken(107),
              i = this.parseModuleReference(),
              o = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.importDeclaration(e, t, n, r, i, o);
          }),
          (t.prototype.isExportAssignment = function () {
            return (
              47 === this.currentToken().tokenKind &&
              107 === this.peekToken(1).tokenKind
            );
          }),
          (t.prototype.parseExportAssignment = function () {
            var e = this.eatKeyword(47),
              t = this.eatToken(107),
              n = this.eatIdentifierToken(),
              r = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.exportAssignment(e, t, n, r);
          }),
          (t.prototype.parseModuleReference = function () {
            return this.isExternalModuleReference()
              ? this.parseExternalModuleReference()
              : this.parseModuleNameModuleReference();
          }),
          (t.prototype.isExternalModuleReference = function () {
            var e = this.currentToken();
            return 66 === e.tokenKind ? 72 === this.peekToken(1).tokenKind : !1;
          }),
          (t.prototype.parseExternalModuleReference = function () {
            var e = this.eatKeyword(66),
              t = this.eatToken(72),
              n = this.eatToken(14),
              r = this.eatToken(73);
            return this.factory.externalModuleReference(e, t, n, r);
          }),
          (t.prototype.parseModuleNameModuleReference = function () {
            var e = this.parseName();
            return this.factory.moduleNameModuleReference(e);
          }),
          (t.prototype.parseIdentifierName = function () {
            var e = this.eatIdentifierNameToken();
            return e;
          }),
          (t.prototype.tryParseTypeArgumentList = function (e) {
            if (80 !== this.currentToken().kind()) return null;
            var t, n, r, i;
            if (!e)
              return (
                (t = this.eatToken(80)),
                (r = this.parseSeparatedSyntaxList(262144)),
                (i = r.list),
                (t = this.addSkippedTokensAfterToken(t, r.skippedTokens)),
                (n = this.eatToken(81)),
                this.factory.typeArgumentList(t, i, n)
              );
            var o = this.getRewindPoint();
            if (
              ((t = this.eatToken(80)),
              (r = this.parseSeparatedSyntaxList(262144)),
              (i = r.list),
              (t = this.addSkippedTokensAfterToken(t, r.skippedTokens)),
              (n = this.eatToken(81)),
              0 !== n.fullWidth() &&
                this.canFollowTypeArgumentListInExpression(
                  this.currentToken().kind()
                ))
            ) {
              this.releaseRewindPoint(o);
              var s = this.factory.typeArgumentList(t, i, n);
              return s;
            }
            return this.rewind(o), this.releaseRewindPoint(o), null;
          }),
          (t.prototype.canFollowTypeArgumentListInExpression = function (e) {
            switch (e) {
              case 72:
              case 76:
              case 73:
              case 75:
              case 106:
              case 78:
              case 79:
              case 105:
              case 84:
              case 87:
              case 86:
              case 88:
              case 103:
              case 104:
              case 100:
              case 98:
              case 99:
              case 71:
              case 10:
                return !0;
              default:
                return !1;
            }
          }),
          (t.prototype.parseName = function () {
            for (
              var t = this.isIdentifier(this.currentToken()),
                n = this.eatIdentifierToken();
              t && 76 === this.currentToken().tokenKind;

            ) {
              var r,
                i = this.eatToken(76),
                o = this.currentToken();
              (r =
                e.SyntaxFacts.isAnyKeyword(o.tokenKind) &&
                this.previousToken().hasTrailingNewLine() &&
                !o.hasTrailingNewLine() &&
                e.SyntaxFacts.isIdentifierNameOrAnyKeyword(this.peekToken(1))
                  ? this.createMissingToken(11, o)
                  : this.eatIdentifierNameToken()),
                (n = this.factory.qualifiedName(n, i, r)),
                (t = r.fullWidth() > 0);
            }
            return n;
          }),
          (t.prototype.isEnumDeclaration = function (e) {
            return e > 0 && 46 === this.peekToken(e).tokenKind
              ? !0
              : 46 === this.currentToken().tokenKind &&
                  this.isIdentifier(this.peekToken(1));
          }),
          (t.prototype.parseEnumDeclaration = function () {
            var t = this.parseModifiers(),
              n = this.eatKeyword(46),
              r = this.eatIdentifierToken(),
              i = this.eatToken(70),
              o = e.Syntax.emptySeparatedList;
            if (i.width() > 0) {
              var s = this.parseSeparatedSyntaxList(256);
              (o = s.list),
                (i = this.addSkippedTokensAfterToken(i, s.skippedTokens));
            }
            var a = this.eatToken(71);
            return this.factory.enumDeclaration(t, n, r, i, o, a);
          }),
          (t.prototype.isEnumElement = function (e) {
            return null !== this.currentNode() &&
              243 === this.currentNode().kind()
              ? !0
              : this.isPropertyName(this.currentToken(), e);
          }),
          (t.prototype.parseEnumElement = function () {
            if (
              null !== this.currentNode() &&
              243 === this.currentNode().kind()
            )
              return this.eatNode();
            var e = this.eatPropertyName(),
              t = null;
            return (
              this.isEqualsValueClause(!1) &&
                (t = this.parseEqualsValueClause(!0)),
              this.factory.enumElement(e, t)
            );
          }),
          (t.isModifier = function (e) {
            switch (e.tokenKind) {
              case 57:
              case 55:
              case 58:
              case 47:
              case 63:
                return !0;
              default:
                return !1;
            }
          }),
          (t.prototype.modifierCount = function () {
            for (var e = 0; ; ) {
              if (!t.isModifier(this.peekToken(e))) break;
              e++;
            }
            return e;
          }),
          (t.prototype.parseModifiers = function () {
            for (var n = this.getArray(); ; ) {
              if (!t.isModifier(this.currentToken())) break;
              n.push(this.eatAnyToken());
            }
            var r = e.Syntax.list(n);
            return this.returnZeroOrOneLengthArray(n), r;
          }),
          (t.prototype.isClassDeclaration = function (e) {
            return e > 0 && 44 === this.peekToken(e).tokenKind
              ? !0
              : 44 === this.currentToken().tokenKind &&
                  this.isIdentifier(this.peekToken(1));
          }),
          (t.prototype.parseHeritageClauses = function () {
            var t = e.Syntax.emptyList;
            if (this.isHeritageClause()) {
              var n = this.parseSyntaxList(1024);
              (t = n.list), e.Debug.assert(0 === n.skippedTokens.length);
            }
            return t;
          }),
          (t.prototype.parseClassDeclaration = function () {
            var t = this.parseModifiers(),
              n = this.eatKeyword(44),
              r = this.eatIdentifierToken(),
              i = this.parseOptionalTypeParameterList(!1),
              o = this.parseHeritageClauses(),
              s = this.eatToken(70),
              a = e.Syntax.emptyList;
            if (s.width() > 0) {
              var l = this.parseSyntaxList(2);
              (a = l.list),
                (s = this.addSkippedTokensAfterToken(s, l.skippedTokens));
            }
            var c = this.eatToken(71);
            return this.factory.classDeclaration(t, n, r, i, o, s, a, c);
          }),
          (t.isPublicOrPrivateKeyword = function (e) {
            return 57 === e.tokenKind || 55 === e.tokenKind;
          }),
          (t.prototype.isAccessor = function (e) {
            var t = this.modifierCount();
            return 64 !== this.peekToken(t).tokenKind &&
              68 !== this.peekToken(t).tokenKind
              ? !1
              : (t++, this.isPropertyName(this.peekToken(t), e));
          }),
          (t.prototype.parseAccessor = function (t) {
            var n = this.parseModifiers();
            if (64 === this.currentToken().tokenKind)
              return this.parseGetMemberAccessorDeclaration(n, t);
            if (68 === this.currentToken().tokenKind)
              return this.parseSetMemberAccessorDeclaration(n, t);
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.parseGetMemberAccessorDeclaration = function (e, t) {
            var n = this.eatKeyword(64),
              r = this.eatPropertyName(),
              i = this.parseParameterList(),
              o = this.parseOptionalTypeAnnotation(!1),
              s = this.parseBlock(!1, t);
            return this.factory.getAccessor(e, n, r, i, o, s);
          }),
          (t.prototype.parseSetMemberAccessorDeclaration = function (e, t) {
            var n = this.eatKeyword(68),
              r = this.eatPropertyName(),
              i = this.parseParameterList(),
              o = this.parseBlock(!1, t);
            return this.factory.setAccessor(e, n, r, i, o);
          }),
          (t.prototype.isClassElement = function (e) {
            return null !== this.currentNode() &&
              this.currentNode().isClassElement()
              ? !0
              : this.isConstructorDeclaration() ||
                  this.isMemberFunctionDeclaration(e) ||
                  this.isAccessor(e) ||
                  this.isMemberVariableDeclaration(e) ||
                  this.isIndexMemberDeclaration();
          }),
          (t.prototype.parseClassElement = function (t) {
            if (
              null !== this.currentNode() &&
              this.currentNode().isClassElement()
            )
              return this.eatNode();
            if (this.isConstructorDeclaration())
              return this.parseConstructorDeclaration();
            if (this.isMemberFunctionDeclaration(t))
              return this.parseMemberFunctionDeclaration();
            if (this.isAccessor(t)) return this.parseAccessor(!1);
            if (this.isMemberVariableDeclaration(t))
              return this.parseMemberVariableDeclaration();
            if (this.isIndexMemberDeclaration())
              return this.parseIndexMemberDeclaration();
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.isConstructorDeclaration = function () {
            var e = this.modifierCount();
            return 62 === this.peekToken(e).tokenKind;
          }),
          (t.prototype.parseConstructorDeclaration = function () {
            var e = this.parseModifiers(),
              t = this.eatKeyword(62),
              n = this.parseCallSignature(!1),
              r = null,
              i = null;
            return (
              this.isBlock()
                ? (i = this.parseBlock(!1, !0))
                : (r = this.eatExplicitOrAutomaticSemicolon(!1)),
              this.factory.constructorDeclaration(e, t, n, i, r)
            );
          }),
          (t.prototype.isMemberFunctionDeclaration = function (e) {
            for (var n = 0; ; ) {
              var r = this.peekToken(n);
              if (this.isPropertyName(r, e) && this.isCallSignature(n + 1))
                return !0;
              {
                if (!t.isModifier(r)) return !1;
                n++;
              }
            }
          }),
          (t.prototype.parseMemberFunctionDeclaration = function () {
            for (var n = this.getArray(); ; ) {
              var r = this.currentToken();
              if (this.isPropertyName(r, !1) && this.isCallSignature(1)) break;
              e.Debug.assert(t.isModifier(r)), n.push(this.eatAnyToken());
            }
            var i = e.Syntax.list(n);
            this.returnZeroOrOneLengthArray(n);
            var o = this.eatPropertyName(),
              s = this.parseCallSignature(!1),
              a = !1,
              l = this.tryAddUnexpectedEqualsGreaterThanToken(s);
            l !== s && ((a = !0), (s = l));
            var c = null,
              u = null;
            return (
              a || this.isBlock()
                ? (c = this.parseBlock(a, !0))
                : (u = this.eatExplicitOrAutomaticSemicolon(!1)),
              this.factory.memberFunctionDeclaration(i, o, s, c, u)
            );
          }),
          (t.prototype.isDefinitelyMemberVariablePropertyName = function (t) {
            if (!e.SyntaxFacts.isAnyKeyword(this.peekToken(t).tokenKind))
              return !0;
            switch (this.peekToken(t + 1).tokenKind) {
              case 78:
              case 107:
              case 106:
              case 71:
              case 10:
                return !0;
              default:
                return !1;
            }
          }),
          (t.prototype.isMemberVariableDeclaration = function (e) {
            for (var n = 0; ; ) {
              var r = this.peekToken(n);
              if (
                this.isPropertyName(r, e) &&
                this.isDefinitelyMemberVariablePropertyName(n)
              )
                return !0;
              {
                if (!t.isModifier(this.peekToken(n))) return !1;
                n++;
              }
            }
          }),
          (t.prototype.parseMemberVariableDeclaration = function () {
            for (var n = this.getArray(); ; ) {
              var r = this.currentToken();
              if (
                this.isPropertyName(r, !1) &&
                this.isDefinitelyMemberVariablePropertyName(0)
              )
                break;
              e.Debug.assert(t.isModifier(r)), n.push(this.eatAnyToken());
            }
            var i = e.Syntax.list(n);
            this.returnZeroOrOneLengthArray(n);
            var o = this.parseVariableDeclarator(!0, !0),
              s = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.memberVariableDeclaration(i, o, s);
          }),
          (t.prototype.isIndexMemberDeclaration = function () {
            var e = this.modifierCount();
            return this.isIndexSignature(e);
          }),
          (t.prototype.parseIndexMemberDeclaration = function () {
            var e = this.parseModifiers(),
              t = this.parseIndexSignature(),
              n = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.indexMemberDeclaration(e, t, n);
          }),
          (t.prototype.tryAddUnexpectedEqualsGreaterThanToken = function (t) {
            var n = this.currentToken(),
              r = 85 === n.tokenKind;
            if (r && t.lastToken()) {
              var i = new e.Diagnostic(
                this.fileName,
                this.lineMap,
                this.currentTokenStart(),
                n.width(),
                e.DiagnosticCode.Unexpected_token_0_expected,
                [e.SyntaxFacts.getText(70)]
              );
              this.addDiagnostic(i);
              {
                this.eatAnyToken();
              }
              return this.addSkippedTokenAfterNode(t, n);
            }
            return t;
          }),
          (t.prototype.isFunctionDeclaration = function () {
            var e = this.modifierCount();
            return 27 === this.peekToken(e).tokenKind;
          }),
          (t.prototype.parseFunctionDeclaration = function () {
            var e = this.parseModifiers(),
              t = this.eatKeyword(27),
              n = this.eatIdentifierToken(),
              r = this.parseCallSignature(!1),
              i = !1,
              o = this.tryAddUnexpectedEqualsGreaterThanToken(r);
            o !== r && ((i = !0), (r = o));
            var s = null,
              a = null;
            return (
              i || this.isBlock()
                ? (a = this.parseBlock(i, !0))
                : (s = this.eatExplicitOrAutomaticSemicolon(!1)),
              this.factory.functionDeclaration(e, t, n, r, a, s)
            );
          }),
          (t.prototype.isModuleDeclaration = function (e) {
            if (e > 0 && 65 === this.peekToken(e).tokenKind) return !0;
            if (65 === this.currentToken().tokenKind) {
              var t = this.peekToken(1);
              return this.isIdentifier(t) || 14 === t.tokenKind;
            }
            return !1;
          }),
          (t.prototype.parseModuleDeclaration = function () {
            var t = this.parseModifiers(),
              n = this.eatKeyword(65),
              r = null,
              i = null;
            14 === this.currentToken().tokenKind
              ? (i = this.eatToken(14))
              : (r = this.parseName());
            var o = this.eatToken(70),
              s = e.Syntax.emptyList;
            if (o.width() > 0) {
              var a = this.parseSyntaxList(4);
              (s = a.list),
                (o = this.addSkippedTokensAfterToken(o, a.skippedTokens));
            }
            var l = this.eatToken(71);
            return this.factory.moduleDeclaration(t, n, r, i, o, s, l);
          }),
          (t.prototype.isInterfaceDeclaration = function (e) {
            return e > 0 && 52 === this.peekToken(e).tokenKind
              ? !0
              : 52 === this.currentToken().tokenKind &&
                  this.isIdentifier(this.peekToken(1));
          }),
          (t.prototype.parseInterfaceDeclaration = function () {
            var e = this.parseModifiers(),
              t = this.eatKeyword(52),
              n = this.eatIdentifierToken(),
              r = this.parseOptionalTypeParameterList(!1),
              i = this.parseHeritageClauses(),
              o = this.parseObjectType();
            return this.factory.interfaceDeclaration(e, t, n, r, i, o);
          }),
          (t.prototype.parseObjectType = function () {
            var t = this.eatToken(70),
              n = e.Syntax.emptySeparatedList;
            if (t.width() > 0) {
              var r = this.parseSeparatedSyntaxList(512);
              (n = r.list),
                (t = this.addSkippedTokensAfterToken(t, r.skippedTokens));
            }
            var i = this.eatToken(71);
            return this.factory.objectType(t, n, i);
          }),
          (t.prototype.isTypeMember = function (e) {
            return null !== this.currentNode() &&
              this.currentNode().isTypeMember()
              ? !0
              : this.isCallSignature(0) ||
                  this.isConstructSignature() ||
                  this.isIndexSignature(0) ||
                  this.isMethodSignature(e) ||
                  this.isPropertySignature(e);
          }),
          (t.prototype.parseTypeMember = function (t) {
            if (
              null !== this.currentNode() &&
              this.currentNode().isTypeMember()
            )
              return this.eatNode();
            if (this.isCallSignature(0)) return this.parseCallSignature(!1);
            if (this.isConstructSignature())
              return this.parseConstructSignature();
            if (this.isIndexSignature(0)) return this.parseIndexSignature();
            if (this.isMethodSignature(t)) return this.parseMethodSignature();
            if (this.isPropertySignature(t))
              return this.parsePropertySignature();
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.parseConstructSignature = function () {
            var e = this.eatKeyword(31),
              t = this.parseCallSignature(!1);
            return this.factory.constructSignature(e, t);
          }),
          (t.prototype.parseIndexSignature = function () {
            var e = this.eatToken(74),
              t = this.parseParameter(),
              n = this.eatToken(75),
              r = this.parseOptionalTypeAnnotation(!1);
            return this.factory.indexSignature(e, t, n, r);
          }),
          (t.prototype.parseMethodSignature = function () {
            var e = this.eatPropertyName(),
              t = this.tryEatToken(105),
              n = this.parseCallSignature(!1);
            return this.factory.methodSignature(e, t, n);
          }),
          (t.prototype.parsePropertySignature = function () {
            var e = this.eatPropertyName(),
              t = this.tryEatToken(105),
              n = this.parseOptionalTypeAnnotation(!1);
            return this.factory.propertySignature(e, t, n);
          }),
          (t.prototype.isCallSignature = function (e) {
            var t = this.peekToken(e).tokenKind;
            return 72 === t || 80 === t;
          }),
          (t.prototype.isConstructSignature = function () {
            if (31 !== this.currentToken().tokenKind) return !1;
            var e = this.peekToken(1);
            return 80 === e.tokenKind || 72 === e.tokenKind;
          }),
          (t.prototype.isIndexSignature = function (e) {
            return 74 === this.peekToken(e).tokenKind;
          }),
          (t.prototype.isMethodSignature = function (e) {
            if (this.isPropertyName(this.currentToken(), e)) {
              if (this.isCallSignature(1)) return !0;
              if (
                105 === this.peekToken(1).tokenKind &&
                this.isCallSignature(2)
              )
                return !0;
            }
            return !1;
          }),
          (t.prototype.isPropertySignature = function (e) {
            var n = this.currentToken();
            return t.isModifier(n) &&
              !n.hasTrailingNewLine() &&
              this.isPropertyName(this.peekToken(1), e)
              ? !1
              : this.isPropertyName(n, e);
          }),
          (t.prototype.isHeritageClause = function () {
            var e = this.currentToken();
            return 48 === e.tokenKind || 51 === e.tokenKind;
          }),
          (t.prototype.isNotHeritageClauseTypeName = function () {
            return 51 === this.currentToken().tokenKind ||
              48 === this.currentToken().tokenKind
              ? this.isIdentifier(this.peekToken(1))
              : !1;
          }),
          (t.prototype.isHeritageClauseTypeName = function () {
            return this.isIdentifier(this.currentToken())
              ? !this.isNotHeritageClauseTypeName()
              : !1;
          }),
          (t.prototype.parseHeritageClause = function () {
            var t = this.eatAnyToken();
            e.Debug.assert(48 === t.tokenKind || 51 === t.tokenKind);
            var n = this.parseSeparatedSyntaxList(2048),
              r = n.list;
            return (
              (t = this.addSkippedTokensAfterToken(t, n.skippedTokens)),
              this.factory.heritageClause(48 === t.tokenKind ? 230 : 231, t, r)
            );
          }),
          (t.prototype.isStatement = function (t) {
            if (null !== this.currentNode() && this.currentNode().isStatement())
              return !0;
            var n = this.currentToken(),
              r = n.tokenKind;
            switch (r) {
              case 57:
              case 55:
              case 58:
                var i = this.peekToken(1);
                if (e.SyntaxFacts.isIdentifierNameOrAnyKeyword(i)) return !1;
                break;
              case 28:
              case 70:
              case 33:
              case 34:
              case 36:
              case 15:
              case 18:
              case 26:
              case 42:
              case 43:
              case 22:
              case 38:
              case 19:
                return !0;
            }
            return this.isInterfaceDeclaration(0) ||
              this.isClassDeclaration(0) ||
              this.isEnumDeclaration(0) ||
              this.isModuleDeclaration(0)
              ? !1
              : this.isLabeledStatement(n) ||
                  this.isVariableStatement() ||
                  this.isFunctionDeclaration() ||
                  this.isEmptyStatement(n, t) ||
                  this.isExpressionStatement(n);
          }),
          (t.prototype.parseStatement = function (e) {
            if (null !== this.currentNode() && this.currentNode().isStatement())
              return this.eatNode();
            var t = this.currentToken(),
              n = t.tokenKind;
            switch (n) {
              case 28:
                return this.parseIfStatement();
              case 70:
                return this.parseBlock(!1, !1);
              case 33:
                return this.parseReturnStatement();
              case 34:
                return this.parseSwitchStatement();
              case 36:
                return this.parseThrowStatement();
              case 15:
                return this.parseBreakStatement();
              case 18:
                return this.parseContinueStatement();
              case 26:
                return this.parseForOrForInStatement();
              case 42:
                return this.parseWhileStatement();
              case 43:
                return this.parseWithStatement();
              case 22:
                return this.parseDoStatement();
              case 38:
                return this.parseTryStatement();
              case 19:
                return this.parseDebuggerStatement();
            }
            return this.isVariableStatement()
              ? this.parseVariableStatement()
              : this.isLabeledStatement(t)
              ? this.parseLabeledStatement()
              : this.isFunctionDeclaration()
              ? this.parseFunctionDeclaration()
              : this.isEmptyStatement(t, e)
              ? this.parseEmptyStatement()
              : this.parseExpressionStatement();
          }),
          (t.prototype.parseDebuggerStatement = function () {
            var e = this.eatKeyword(19),
              t = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.debuggerStatement(e, t);
          }),
          (t.prototype.parseDoStatement = function () {
            var e = this.eatKeyword(22),
              t = this.parseStatement(!1),
              n = this.eatKeyword(42),
              r = this.eatToken(72),
              i = this.parseExpression(!0),
              o = this.eatToken(73),
              s = this.eatExplicitOrAutomaticSemicolon(!0);
            return this.factory.doStatement(e, t, n, r, i, o, s);
          }),
          (t.prototype.isLabeledStatement = function (e) {
            return this.isIdentifier(e) && 106 === this.peekToken(1).tokenKind;
          }),
          (t.prototype.parseLabeledStatement = function () {
            var e = this.eatIdentifierToken(),
              t = this.eatToken(106),
              n = this.parseStatement(!1);
            return this.factory.labeledStatement(e, t, n);
          }),
          (t.prototype.parseTryStatement = function () {
            var e = this.eatKeyword(38),
              t = this.listParsingState;
            this.listParsingState |= 64;
            var n = this.parseBlock(!1, !1);
            this.listParsingState = t;
            var r = null;
            this.isCatchClause() && (r = this.parseCatchClause());
            var i = null;
            return (
              (null === r || this.isFinallyClause()) &&
                (i = this.parseFinallyClause()),
              this.factory.tryStatement(e, n, r, i)
            );
          }),
          (t.prototype.isCatchClause = function () {
            return 17 === this.currentToken().tokenKind;
          }),
          (t.prototype.parseCatchClause = function () {
            var e = this.eatKeyword(17),
              t = this.eatToken(72),
              n = this.eatIdentifierToken(),
              r = this.parseOptionalTypeAnnotation(!1),
              i = this.eatToken(73),
              o = this.listParsingState;
            this.listParsingState |= 128;
            var s = this.parseBlock(!1, !1);
            return (
              (this.listParsingState = o),
              this.factory.catchClause(e, t, n, r, i, s)
            );
          }),
          (t.prototype.isFinallyClause = function () {
            return 25 === this.currentToken().tokenKind;
          }),
          (t.prototype.parseFinallyClause = function () {
            var e = this.eatKeyword(25),
              t = this.parseBlock(!1, !1);
            return this.factory.finallyClause(e, t);
          }),
          (t.prototype.parseWithStatement = function () {
            var e = this.eatKeyword(43),
              t = this.eatToken(72),
              n = this.parseExpression(!0),
              r = this.eatToken(73),
              i = this.parseStatement(!1);
            return this.factory.withStatement(e, t, n, r, i);
          }),
          (t.prototype.parseWhileStatement = function () {
            var e = this.eatKeyword(42),
              t = this.eatToken(72),
              n = this.parseExpression(!0),
              r = this.eatToken(73),
              i = this.parseStatement(!1);
            return this.factory.whileStatement(e, t, n, r, i);
          }),
          (t.prototype.isEmptyStatement = function (e, t) {
            return t ? !1 : 78 === e.tokenKind;
          }),
          (t.prototype.parseEmptyStatement = function () {
            var e = this.eatToken(78);
            return this.factory.emptyStatement(e);
          }),
          (t.prototype.parseForOrForInStatement = function () {
            var e = this.eatKeyword(26),
              t = this.eatToken(72),
              n = this.currentToken();
            return 40 === n.tokenKind
              ? this.parseForOrForInStatementWithVariableDeclaration(e, t)
              : 78 === n.tokenKind
              ? this.parseForStatementWithNoVariableDeclarationOrInitializer(
                  e,
                  t
                )
              : this.parseForOrForInStatementWithInitializer(e, t);
          }),
          (t.prototype.parseForOrForInStatementWithVariableDeclaration = function (
            e,
            t
          ) {
            var n = this.parseVariableDeclaration(!1);
            return 29 === this.currentToken().tokenKind
              ? this.parseForInStatementWithVariableDeclarationOrInitializer(
                  e,
                  t,
                  n,
                  null
                )
              : this.parseForStatementWithVariableDeclarationOrInitializer(
                  e,
                  t,
                  n,
                  null
                );
          }),
          (t.prototype.parseForInStatementWithVariableDeclarationOrInitializer = function (
            e,
            t,
            n,
            r
          ) {
            var i = this.eatKeyword(29),
              o = this.parseExpression(!0),
              s = this.eatToken(73),
              a = this.parseStatement(!1);
            return this.factory.forInStatement(e, t, n, r, i, o, s, a);
          }),
          (t.prototype.parseForOrForInStatementWithInitializer = function (
            e,
            t
          ) {
            var n = this.parseExpression(!1);
            return 29 === this.currentToken().tokenKind
              ? this.parseForInStatementWithVariableDeclarationOrInitializer(
                  e,
                  t,
                  null,
                  n
                )
              : this.parseForStatementWithVariableDeclarationOrInitializer(
                  e,
                  t,
                  null,
                  n
                );
          }),
          (t.prototype.parseForStatementWithNoVariableDeclarationOrInitializer = function (
            e,
            t
          ) {
            return this.parseForStatementWithVariableDeclarationOrInitializer(
              e,
              t,
              null,
              null
            );
          }),
          (t.prototype.parseForStatementWithVariableDeclarationOrInitializer = function (
            e,
            t,
            n,
            r
          ) {
            var i = this.eatToken(78),
              o = null;
            78 !== this.currentToken().tokenKind &&
              73 !== this.currentToken().tokenKind &&
              10 !== this.currentToken().tokenKind &&
              (o = this.parseExpression(!0));
            var s = this.eatToken(78),
              a = null;
            73 !== this.currentToken().tokenKind &&
              10 !== this.currentToken().tokenKind &&
              (a = this.parseExpression(!0));
            var l = this.eatToken(73),
              c = this.parseStatement(!1);
            return this.factory.forStatement(e, t, n, r, i, o, s, a, l, c);
          }),
          (t.prototype.parseBreakStatement = function () {
            var e = this.eatKeyword(15),
              t = null;
            this.canEatExplicitOrAutomaticSemicolon(!1) ||
              (this.isIdentifier(this.currentToken()) &&
                (t = this.eatIdentifierToken()));
            var n = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.breakStatement(e, t, n);
          }),
          (t.prototype.parseContinueStatement = function () {
            var e = this.eatKeyword(18),
              t = null;
            this.canEatExplicitOrAutomaticSemicolon(!1) ||
              (this.isIdentifier(this.currentToken()) &&
                (t = this.eatIdentifierToken()));
            var n = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.continueStatement(e, t, n);
          }),
          (t.prototype.parseSwitchStatement = function () {
            var t = this.eatKeyword(34),
              n = this.eatToken(72),
              r = this.parseExpression(!0),
              i = this.eatToken(73),
              o = this.eatToken(70),
              s = e.Syntax.emptyList;
            if (o.width() > 0) {
              var a = this.parseSyntaxList(8);
              (s = a.list),
                (o = this.addSkippedTokensAfterToken(o, a.skippedTokens));
            }
            var l = this.eatToken(71);
            return this.factory.switchStatement(t, n, r, i, o, s, l);
          }),
          (t.prototype.isCaseSwitchClause = function () {
            return 16 === this.currentToken().tokenKind;
          }),
          (t.prototype.isDefaultSwitchClause = function () {
            return 20 === this.currentToken().tokenKind;
          }),
          (t.prototype.isSwitchClause = function () {
            return null !== this.currentNode() &&
              this.currentNode().isSwitchClause()
              ? !0
              : this.isCaseSwitchClause() || this.isDefaultSwitchClause();
          }),
          (t.prototype.parseSwitchClause = function () {
            if (
              null !== this.currentNode() &&
              this.currentNode().isSwitchClause()
            )
              return this.eatNode();
            if (this.isCaseSwitchClause()) return this.parseCaseSwitchClause();
            if (this.isDefaultSwitchClause())
              return this.parseDefaultSwitchClause();
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.parseCaseSwitchClause = function () {
            var t = this.eatKeyword(16),
              n = this.parseExpression(!0),
              r = this.eatToken(106),
              i = e.Syntax.emptyList;
            if (r.fullWidth() > 0) {
              var o = this.parseSyntaxList(16);
              (i = o.list),
                (r = this.addSkippedTokensAfterToken(r, o.skippedTokens));
            }
            return this.factory.caseSwitchClause(t, n, r, i);
          }),
          (t.prototype.parseDefaultSwitchClause = function () {
            var t = this.eatKeyword(20),
              n = this.eatToken(106),
              r = e.Syntax.emptyList;
            if (n.fullWidth() > 0) {
              var i = this.parseSyntaxList(16);
              (r = i.list),
                (n = this.addSkippedTokensAfterToken(n, i.skippedTokens));
            }
            return this.factory.defaultSwitchClause(t, n, r);
          }),
          (t.prototype.parseThrowStatement = function () {
            var e = this.eatKeyword(36),
              t = null;
            if (this.canEatExplicitOrAutomaticSemicolon(!1)) {
              var n = this.createMissingToken(11, null);
              t = n;
            } else t = this.parseExpression(!0);
            var r = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.throwStatement(e, t, r);
          }),
          (t.prototype.parseReturnStatement = function () {
            var e = this.eatKeyword(33),
              t = null;
            this.canEatExplicitOrAutomaticSemicolon(!1) ||
              (t = this.parseExpression(!0));
            var n = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.returnStatement(e, t, n);
          }),
          (t.prototype.isExpressionStatement = function (e) {
            var t = e.tokenKind;
            return 70 === t || 27 === t ? !1 : this.isExpression(e);
          }),
          (t.prototype.isAssignmentOrOmittedExpression = function () {
            var e = this.currentToken();
            return 79 === e.tokenKind ? !0 : this.isExpression(e);
          }),
          (t.prototype.parseAssignmentOrOmittedExpression = function () {
            return 79 === this.currentToken().tokenKind
              ? this.factory.omittedExpression()
              : this.parseAssignmentExpression(!0);
          }),
          (t.prototype.isExpression = function (e) {
            switch (e.tokenKind) {
              case 13:
              case 14:
              case 12:
              case 74:
              case 72:
              case 80:
              case 93:
              case 94:
              case 89:
              case 90:
              case 102:
              case 101:
              case 70:
              case 85:
              case 118:
              case 119:
              case 50:
              case 35:
              case 37:
              case 24:
              case 32:
              case 31:
              case 21:
              case 41:
              case 39:
              case 27:
                return !0;
            }
            return this.isIdentifier(e);
          }),
          (t.prototype.parseExpressionStatement = function () {
            var e = this.parseExpression(!0),
              t = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.expressionStatement(e, t);
          }),
          (t.prototype.parseIfStatement = function () {
            var e = this.eatKeyword(28),
              t = this.eatToken(72),
              n = this.parseExpression(!0),
              r = this.eatToken(73),
              i = this.parseStatement(!1),
              o = null;
            return (
              this.isElseClause() && (o = this.parseElseClause()),
              this.factory.ifStatement(e, t, n, r, i, o)
            );
          }),
          (t.prototype.isElseClause = function () {
            return 23 === this.currentToken().tokenKind;
          }),
          (t.prototype.parseElseClause = function () {
            var e = this.eatKeyword(23),
              t = this.parseStatement(!1);
            return this.factory.elseClause(e, t);
          }),
          (t.prototype.isVariableStatement = function () {
            var e = this.modifierCount();
            return 40 === this.peekToken(e).tokenKind;
          }),
          (t.prototype.parseVariableStatement = function () {
            var e = this.parseModifiers(),
              t = this.parseVariableDeclaration(!0),
              n = this.eatExplicitOrAutomaticSemicolon(!1);
            return this.factory.variableStatement(e, t, n);
          }),
          (t.prototype.parseVariableDeclaration = function (e) {
            var t = this.eatKeyword(40),
              n = e ? 4096 : 8192,
              r = this.parseSeparatedSyntaxList(n),
              i = r.list;
            return (
              (t = this.addSkippedTokensAfterToken(t, r.skippedTokens)),
              this.factory.variableDeclaration(t, i)
            );
          }),
          (t.prototype.isVariableDeclarator = function () {
            return null !== this.currentNode() &&
              225 === this.currentNode().kind()
              ? !0
              : this.isIdentifier(this.currentToken());
          }),
          (t.prototype.canReuseVariableDeclaratorNode = function (e) {
            if (null === e || 225 !== e.kind()) return !1;
            var t = e;
            return null === t.equalsValueClause;
          }),
          (t.prototype.parseVariableDeclarator = function (e, t) {
            if (this.canReuseVariableDeclaratorNode(this.currentNode()))
              return this.eatNode();
            var n = t ? this.eatPropertyName() : this.eatIdentifierToken(),
              r = null,
              i = null;
            return (
              n.width() > 0 &&
                ((i = this.parseOptionalTypeAnnotation(!1)),
                this.isEqualsValueClause(!1) &&
                  (r = this.parseEqualsValueClause(e))),
              this.factory.variableDeclarator(n, i, r)
            );
          }),
          (t.prototype.isColonValueClause = function () {
            return 106 === this.currentToken().tokenKind;
          }),
          (t.prototype.isEqualsValueClause = function (e) {
            var t = this.currentToken();
            return 107 === t.tokenKind
              ? !0
              : this.previousToken().hasTrailingNewLine()
              ? !1
              : 85 === t.tokenKind
              ? !1
              : 70 === t.tokenKind && e
              ? !1
              : this.isExpression(t);
          }),
          (t.prototype.parseEqualsValueClause = function (e) {
            var t = this.eatToken(107),
              n = this.parseAssignmentExpression(e);
            return this.factory.equalsValueClause(t, n);
          }),
          (t.prototype.parseExpression = function (e) {
            return this.parseSubExpression(0, e);
          }),
          (t.prototype.parseAssignmentExpression = function (e) {
            return this.parseSubExpression(2, e);
          }),
          (t.prototype.parseUnaryExpressionOrLower = function () {
            var t = this.currentToken().tokenKind;
            if (e.SyntaxFacts.isPrefixUnaryExpressionOperatorToken(t)) {
              var n = e.SyntaxFacts.getPrefixUnaryExpressionFromOperatorToken(
                  t
                ),
                r = this.eatAnyToken(),
                i = this.parseUnaryExpressionOrLower();
              return this.factory.prefixUnaryExpression(n, r, i);
            }
            return 39 === t
              ? this.parseTypeOfExpression()
              : 41 === t
              ? this.parseVoidExpression()
              : 21 === t
              ? this.parseDeleteExpression()
              : 80 === t
              ? this.parseCastExpression()
              : this.parsePostfixExpressionOrLower();
          }),
          (t.prototype.parseSubExpression = function (e, t) {
            if (2 >= e) {
              if (this.isSimpleArrowFunctionExpression())
                return this.parseSimpleArrowFunctionExpression();
              var n = this.tryParseParenthesizedArrowFunctionExpression();
              if (null !== n) return n;
            }
            var r = this.parseUnaryExpressionOrLower();
            return this.parseBinaryOrConditionalExpressions(e, t, r);
          }),
          (t.prototype.parseBinaryOrConditionalExpressions = function (
            n,
            r,
            i
          ) {
            for (;;) {
              var o = this.currentToken(),
                s = o.tokenKind;
              if (e.SyntaxFacts.isBinaryExpressionOperatorToken(s)) {
                if (29 === s && !r) break;
                var a = this.tryMergeBinaryExpressionTokens(),
                  l = null === a ? s : a.syntaxKind,
                  c = e.SyntaxFacts.getBinaryExpressionFromOperatorToken(l),
                  u = t.getPrecedence(c);
                if (n > u) break;
                if (u === n && !this.isRightAssociative(c)) break;
                for (
                  var p =
                      null === a
                        ? o
                        : e.Syntax.token(a.syntaxKind)
                            .withLeadingTrivia(o.leadingTrivia())
                            .withTrailingTrivia(
                              this.peekToken(a.tokenCount - 1).trailingTrivia()
                            ),
                    h = null === a ? 1 : a.tokenCount,
                    d = 0;
                  h > d;
                  d++
                )
                  this.eatAnyToken();
                i = this.factory.binaryExpression(
                  c,
                  i,
                  p,
                  this.parseSubExpression(u, r)
                );
              } else {
                if (!(105 === s && 3 >= n)) break;
                var m = this.eatToken(105),
                  f = this.parseAssignmentExpression(r),
                  g = this.eatToken(106),
                  v = this.parseAssignmentExpression(r);
                i = this.factory.conditionalExpression(i, m, f, g, v);
              }
            }
            return i;
          }),
          (t.prototype.tryMergeBinaryExpressionTokens = function () {
            var e = this.currentToken();
            if (81 === e.tokenKind && !e.hasTrailingTrivia()) {
              var t = this.mergeTokensStorage;
              (t[0] = 0), (t[1] = 0), (t[2] = 0);
              for (var n = 0; n < t.length; n++) {
                var r = this.peekToken(n + 1);
                if (
                  (r.hasLeadingTrivia() || (t[n] = r.tokenKind),
                  r.hasTrailingTrivia())
                )
                  break;
              }
              if (81 === t[0])
                return 81 === t[1]
                  ? 107 === t[2]
                    ? { tokenCount: 4, syntaxKind: 114 }
                    : { tokenCount: 3, syntaxKind: 97 }
                  : 107 === t[1]
                  ? { tokenCount: 3, syntaxKind: 113 }
                  : { tokenCount: 2, syntaxKind: 96 };
              if (107 === t[0]) return { tokenCount: 2, syntaxKind: 83 };
            }
            return null;
          }),
          (t.prototype.isRightAssociative = function (e) {
            switch (e) {
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
              case 183:
              case 184:
              case 185:
                return !0;
              default:
                return !1;
            }
          }),
          (t.prototype.parseMemberExpressionOrLower = function (e) {
            if (31 === this.currentToken().tokenKind)
              return this.parseObjectCreationExpression();
            var t = this.parsePrimaryExpression();
            return null === t
              ? this.eatIdentifierToken()
              : this.parseMemberExpressionRest(t, !1, e);
          }),
          (t.prototype.parseCallExpressionOrLower = function () {
            var e;
            if (50 === this.currentToken().tokenKind) {
              e = this.eatKeyword(50);
              var t = this.currentToken().tokenKind;
              72 !== t &&
                76 !== t &&
                (e = this.factory.memberAccessExpression(
                  e,
                  this.eatToken(76),
                  this.eatIdentifierNameToken()
                ));
            } else e = this.parseMemberExpressionOrLower(!1);
            return this.parseMemberExpressionRest(e, !0, !1);
          }),
          (t.prototype.parseMemberExpressionRest = function (e, t, n) {
            for (;;) {
              var r = this.currentToken().tokenKind;
              switch (r) {
                case 72:
                  if (!t) return e;
                  e = this.factory.invocationExpression(
                    e,
                    this.parseArgumentList(null)
                  );
                  continue;
                case 80:
                  if (!t) return e;
                  var i = this.tryParseArgumentList();
                  if (null !== i) {
                    e = this.factory.invocationExpression(e, i);
                    continue;
                  }
                  break;
                case 74:
                  e = this.parseElementAccessExpression(e, n);
                  continue;
                case 76:
                  e = this.factory.memberAccessExpression(
                    e,
                    this.eatToken(76),
                    this.eatIdentifierNameToken()
                  );
                  continue;
              }
              return e;
            }
          }),
          (t.prototype.parseLeftHandSideExpressionOrLower = function () {
            return 31 === this.currentToken().tokenKind
              ? this.parseObjectCreationExpression()
              : this.parseCallExpressionOrLower();
          }),
          (t.prototype.parsePostfixExpressionOrLower = function () {
            var t = this.parseLeftHandSideExpressionOrLower();
            if (null === t) return this.eatIdentifierToken();
            var n = this.currentToken().tokenKind;
            switch (n) {
              case 93:
              case 94:
                if (
                  null !== this.previousToken() &&
                  this.previousToken().hasTrailingNewLine()
                )
                  break;
                return this.factory.postfixUnaryExpression(
                  e.SyntaxFacts.getPostfixUnaryExpressionFromOperatorToken(n),
                  t,
                  this.eatAnyToken()
                );
            }
            return t;
          }),
          (t.prototype.tryParseGenericArgumentList = function () {
            var t = this.getRewindPoint(),
              n = this.tryParseTypeArgumentList(!0),
              r = this.currentToken(),
              i = 72 === r.tokenKind,
              o = 76 === r.tokenKind,
              s = i || o;
            if (null !== n && s) {
              if ((this.releaseRewindPoint(t), o)) {
                var a = new e.Diagnostic(
                  this.fileName,
                  this.lineMap,
                  this.currentTokenStart(),
                  r.width(),
                  e.DiagnosticCode.A_parameter_list_must_follow_a_generic_type_argument_list_expected,
                  null
                );
                return (
                  this.addDiagnostic(a),
                  this.factory.argumentList(
                    n,
                    e.Syntax.emptyToken(72),
                    e.Syntax.emptySeparatedList,
                    e.Syntax.emptyToken(73)
                  )
                );
              }
              return this.parseArgumentList(n);
            }
            return this.rewind(t), this.releaseRewindPoint(t), null;
          }),
          (t.prototype.tryParseArgumentList = function () {
            return 80 === this.currentToken().tokenKind
              ? this.tryParseGenericArgumentList()
              : 72 === this.currentToken().tokenKind
              ? this.parseArgumentList(null)
              : null;
          }),
          (t.prototype.parseArgumentList = function (t) {
            var n = this.eatToken(72),
              r = e.Syntax.emptySeparatedList;
            if (n.fullWidth() > 0) {
              var i = this.parseSeparatedSyntaxList(16384);
              (r = i.list),
                (n = this.addSkippedTokensAfterToken(n, i.skippedTokens));
            }
            var o = this.eatToken(73);
            return this.factory.argumentList(t, n, r, o);
          }),
          (t.prototype.parseElementAccessExpression = function (t, n) {
            var r,
              i = this.currentTokenStart(),
              o = this.eatToken(74);
            if (75 === this.currentToken().tokenKind && n) {
              var s = this.currentTokenStart() + this.currentToken().width(),
                a = new e.Diagnostic(
                  this.fileName,
                  this.lineMap,
                  i,
                  s - i,
                  e.DiagnosticCode.new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead,
                  null
                );
              this.addDiagnostic(a), (r = e.Syntax.emptyToken(11));
            } else r = this.parseExpression(!0);
            var l = this.eatToken(75);
            return this.factory.elementAccessExpression(t, o, r, l);
          }),
          (t.prototype.parsePrimaryExpression = function () {
            var e = this.currentToken();
            if (this.isIdentifier(e)) return this.eatIdentifierToken();
            var t = e.tokenKind;
            switch (t) {
              case 35:
                return this.parseThisExpression();
              case 37:
              case 24:
                return this.parseLiteralExpression();
              case 32:
                return this.parseLiteralExpression();
              case 27:
                return this.parseFunctionExpression();
              case 13:
                return this.parseLiteralExpression();
              case 12:
                return this.parseLiteralExpression();
              case 14:
                return this.parseLiteralExpression();
              case 74:
                return this.parseArrayLiteralExpression();
              case 70:
                return this.parseObjectLiteralExpression();
              case 72:
                return this.parseParenthesizedExpression();
              case 118:
              case 119:
                var n = this.tryReparseDivideAsRegularExpression();
                if (null !== n) return n;
            }
            return null;
          }),
          (t.prototype.tryReparseDivideAsRegularExpression = function () {
            var t = this.currentToken();
            if (null !== this.previousToken()) {
              var n = this.previousToken().tokenKind;
              switch (n) {
                case 11:
                  return null;
                case 35:
                case 37:
                case 24:
                  return null;
                case 14:
                case 13:
                case 12:
                case 93:
                case 94:
                case 75:
                  return null;
              }
            }
            if (
              ((t = this.currentTokenAllowingRegularExpression()),
              118 === t.tokenKind || 119 === t.tokenKind)
            )
              return null;
            if (12 === t.tokenKind) return this.parseLiteralExpression();
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.parseTypeOfExpression = function () {
            var e = this.eatKeyword(39),
              t = this.parseUnaryExpressionOrLower();
            return this.factory.typeOfExpression(e, t);
          }),
          (t.prototype.parseDeleteExpression = function () {
            var e = this.eatKeyword(21),
              t = this.parseUnaryExpressionOrLower();
            return this.factory.deleteExpression(e, t);
          }),
          (t.prototype.parseVoidExpression = function () {
            var e = this.eatKeyword(41),
              t = this.parseUnaryExpressionOrLower();
            return this.factory.voidExpression(e, t);
          }),
          (t.prototype.parseFunctionExpression = function () {
            var e = this.eatKeyword(27),
              t = null;
            this.isIdentifier(this.currentToken()) &&
              (t = this.eatIdentifierToken());
            var n = this.parseCallSignature(!1),
              r = this.parseBlock(!1, !0);
            return this.factory.functionExpression(e, t, n, r);
          }),
          (t.prototype.parseObjectCreationExpression = function () {
            var e = this.eatKeyword(31),
              t = this.parseObjectCreationExpressionOrLower(!0),
              n = this.tryParseArgumentList(),
              r = this.factory.objectCreationExpression(e, t, n);
            return this.parseMemberExpressionRest(r, !0, !1);
          }),
          (t.prototype.parseObjectCreationExpressionOrLower = function (e) {
            return 31 === this.currentToken().tokenKind
              ? this.parseObjectCreationExpression()
              : this.parseMemberExpressionOrLower(e);
          }),
          (t.prototype.parseCastExpression = function () {
            var e = this.eatToken(80),
              t = this.parseType(),
              n = this.eatToken(81),
              r = this.parseUnaryExpressionOrLower();
            return this.factory.castExpression(e, t, n, r);
          }),
          (t.prototype.parseParenthesizedExpression = function () {
            var e = this.eatToken(72),
              t = this.parseExpression(!0),
              n = this.eatToken(73);
            return this.factory.parenthesizedExpression(e, t, n);
          }),
          (t.prototype.tryParseParenthesizedArrowFunctionExpression = function () {
            var e = this.currentToken().tokenKind;
            if (72 !== e && 80 !== e) return null;
            if (this.isDefinitelyArrowFunctionExpression())
              return this.parseParenthesizedArrowFunctionExpression(!1);
            if (!this.isPossiblyArrowFunctionExpression()) return null;
            var t = this.getRewindPoint(),
              n = this.parseParenthesizedArrowFunctionExpression(!0);
            return null === n && this.rewind(t), this.releaseRewindPoint(t), n;
          }),
          (t.prototype.parseParenthesizedArrowFunctionExpression = function (
            e
          ) {
            var t = (this.currentToken(), this.parseCallSignature(!0));
            if (e && 85 !== this.currentToken().tokenKind) return null;
            var n = this.eatToken(85),
              r = this.tryParseArrowFunctionBlock(),
              i = null;
            return (
              null === r && (i = this.parseAssignmentExpression(!0)),
              this.factory.parenthesizedArrowFunctionExpression(t, n, r, i)
            );
          }),
          (t.prototype.tryParseArrowFunctionBlock = function () {
            return this.isBlock()
              ? this.parseBlock(!1, !1)
              : !this.isStatement(!1) ||
                this.isExpressionStatement(this.currentToken()) ||
                this.isFunctionDeclaration()
              ? null
              : this.parseBlock(!0, !1);
          }),
          (t.prototype.isSimpleArrowFunctionExpression = function () {
            return 85 === this.currentToken().tokenKind
              ? !0
              : this.isIdentifier(this.currentToken()) &&
                  85 === this.peekToken(1).tokenKind;
          }),
          (t.prototype.parseSimpleArrowFunctionExpression = function () {
            var e = this.eatIdentifierToken(),
              t = this.eatToken(85),
              n = this.tryParseArrowFunctionBlock(),
              r = null;
            return (
              null === n && (r = this.parseAssignmentExpression(!0)),
              this.factory.simpleArrowFunctionExpression(e, t, n, r)
            );
          }),
          (t.prototype.isBlock = function () {
            return 70 === this.currentToken().tokenKind;
          }),
          (t.prototype.isDefinitelyArrowFunctionExpression = function () {
            var e = this.currentToken();
            if (72 !== e.tokenKind) return !1;
            var t,
              n = this.peekToken(1);
            if (73 === n.tokenKind)
              return (
                (t = this.peekToken(2)),
                106 === t.tokenKind || 85 === t.tokenKind || 70 === t.tokenKind
              );
            if (77 === n.tokenKind) return !0;
            if (
              ((t = this.peekToken(2)),
              (57 === n.tokenKind || 55 === n.tokenKind) &&
                this.isIdentifier(t))
            )
              return !0;
            if (!this.isIdentifier(n)) return !1;
            if (106 === t.tokenKind) return !0;
            var r = this.peekToken(3);
            return 105 !== t.tokenKind ||
              (106 !== r.tokenKind && 73 !== r.tokenKind && 79 !== r.tokenKind)
              ? 73 === t.tokenKind && 85 === r.tokenKind
                ? !0
                : !1
              : !0;
          }),
          (t.prototype.isPossiblyArrowFunctionExpression = function () {
            var e = this.currentToken();
            if (72 !== e.tokenKind) return !0;
            var t = this.peekToken(1);
            if (!this.isIdentifier(t)) return !1;
            var n = this.peekToken(2);
            if (107 === n.tokenKind) return !0;
            if (79 === n.tokenKind) return !0;
            if (73 === n.tokenKind) {
              var r = this.peekToken(3);
              if (106 === r.tokenKind) return !0;
            }
            return !1;
          }),
          (t.prototype.parseObjectLiteralExpression = function () {
            var e = this.eatToken(70),
              t = this.parseSeparatedSyntaxList(32768),
              n = t.list;
            e = this.addSkippedTokensAfterToken(e, t.skippedTokens);
            var r = this.eatToken(71);
            return this.factory.objectLiteralExpression(e, n, r);
          }),
          (t.prototype.parsePropertyAssignment = function (t) {
            if (this.isAccessor(t)) return this.parseAccessor(!0);
            if (this.isFunctionPropertyAssignment(t))
              return this.parseFunctionPropertyAssignment();
            if (this.isSimplePropertyAssignment(t))
              return this.parseSimplePropertyAssignment();
            throw e.Errors.invalidOperation();
          }),
          (t.prototype.isPropertyAssignment = function (e) {
            return (
              this.isAccessor(e) ||
              this.isFunctionPropertyAssignment(e) ||
              this.isSimplePropertyAssignment(e)
            );
          }),
          (t.prototype.eatPropertyName = function () {
            return e.SyntaxFacts.isIdentifierNameOrAnyKeyword(
              this.currentToken()
            )
              ? this.eatIdentifierNameToken()
              : this.eatAnyToken();
          }),
          (t.prototype.isFunctionPropertyAssignment = function (e) {
            return (
              this.isPropertyName(this.currentToken(), e) &&
              this.isCallSignature(1)
            );
          }),
          (t.prototype.parseFunctionPropertyAssignment = function () {
            var e = this.eatPropertyName(),
              t = this.parseCallSignature(!1),
              n = this.parseBlock(!1, !0);
            return this.factory.functionPropertyAssignment(e, t, n);
          }),
          (t.prototype.isSimplePropertyAssignment = function (e) {
            return this.isPropertyName(this.currentToken(), e);
          }),
          (t.prototype.parseSimplePropertyAssignment = function () {
            var e = this.eatPropertyName(),
              t = this.eatToken(106),
              n = this.parseAssignmentExpression(!0);
            return this.factory.simplePropertyAssignment(e, t, n);
          }),
          (t.prototype.isPropertyName = function (t, n) {
            if (e.SyntaxFacts.isIdentifierNameOrAnyKeyword(t))
              return n ? this.isIdentifier(t) : !0;
            switch (t.tokenKind) {
              case 14:
              case 13:
                return !0;
              default:
                return !1;
            }
          }),
          (t.prototype.parseArrayLiteralExpression = function () {
            var e = this.eatToken(74),
              t = this.parseSeparatedSyntaxList(65536),
              n = t.list;
            e = this.addSkippedTokensAfterToken(e, t.skippedTokens);
            var r = this.eatToken(75);
            return this.factory.arrayLiteralExpression(e, n, r);
          }),
          (t.prototype.parseLiteralExpression = function () {
            return this.eatAnyToken();
          }),
          (t.prototype.parseThisExpression = function () {
            return this.eatKeyword(35);
          }),
          (t.prototype.parseBlock = function (n, r) {
            var i = this.eatToken(70),
              o = e.Syntax.emptyList;
            if (n || i.width() > 0) {
              var s = this.isInStrictMode,
                a = r ? t.updateStrictModeState : null,
                l = this.parseSyntaxList(32, a);
              (o = l.list),
                (i = this.addSkippedTokensAfterToken(i, l.skippedTokens)),
                this.setStrictMode(s);
            }
            var c = this.eatToken(71);
            return this.factory.block(i, o, c);
          }),
          (t.prototype.parseCallSignature = function (e) {
            var t = this.parseOptionalTypeParameterList(e),
              n = this.parseParameterList(),
              r = this.parseOptionalTypeAnnotation(!1);
            return this.factory.callSignature(t, n, r);
          }),
          (t.prototype.parseOptionalTypeParameterList = function (e) {
            if (80 !== this.currentToken().tokenKind) return null;
            var t = this.getRewindPoint(),
              n = this.eatToken(80),
              r = this.parseSeparatedSyntaxList(524288),
              i = r.list;
            n = this.addSkippedTokensAfterToken(n, r.skippedTokens);
            var o = this.eatToken(81);
            if (e && 0 === o.fullWidth())
              return this.rewind(t), this.releaseRewindPoint(t), null;
            this.releaseRewindPoint(t);
            var s = this.factory.typeParameterList(n, i, o);
            return s;
          }),
          (t.prototype.isTypeParameter = function () {
            return this.isIdentifier(this.currentToken());
          }),
          (t.prototype.parseTypeParameter = function () {
            var e = this.eatIdentifierToken(),
              t = this.parseOptionalConstraint();
            return this.factory.typeParameter(e, t);
          }),
          (t.prototype.parseOptionalConstraint = function () {
            if (48 !== this.currentToken().kind()) return null;
            var e = this.eatKeyword(48),
              t = this.parseType();
            return this.factory.constraint(e, t);
          }),
          (t.prototype.parseParameterList = function () {
            var t = this.eatToken(72),
              n = e.Syntax.emptySeparatedList;
            if (t.width() > 0) {
              var r = this.parseSeparatedSyntaxList(131072);
              (n = r.list),
                (t = this.addSkippedTokensAfterToken(t, r.skippedTokens));
            }
            var i = this.eatToken(73);
            return this.factory.parameterList(t, n, i);
          }),
          (t.prototype.isTypeAnnotation = function () {
            return 106 === this.currentToken().tokenKind;
          }),
          (t.prototype.parseOptionalTypeAnnotation = function (e) {
            return this.isTypeAnnotation() ? this.parseTypeAnnotation(e) : null;
          }),
          (t.prototype.parseTypeAnnotation = function (e) {
            var t = this.eatToken(106),
              n =
                e && 14 === this.currentToken().tokenKind
                  ? this.eatToken(14)
                  : this.parseType();
            return this.factory.typeAnnotation(t, n);
          }),
          (t.prototype.isType = function () {
            var e = this.currentToken(),
              t = e.tokenKind;
            switch (t) {
              case 39:
              case 60:
              case 67:
              case 61:
              case 69:
              case 41:
              case 70:
              case 72:
              case 80:
              case 31:
                return !0;
            }
            return this.isIdentifier(e);
          }),
          (t.prototype.parseType = function () {
            for (
              var e = this.currentToken(),
                t = (e.tokenKind, this.parseNonArrayType(e));
              74 === this.currentToken().tokenKind;

            ) {
              var n = this.eatToken(74),
                r = this.eatToken(75);
              t = this.factory.arrayType(t, n, r);
            }
            return t;
          }),
          (t.prototype.isTypeQuery = function () {
            return 39 === this.currentToken().tokenKind;
          }),
          (t.prototype.parseTypeQuery = function () {
            var e = this.eatToken(39),
              t = this.parseName();
            return this.factory.typeQuery(e, t);
          }),
          (t.prototype.parseNonArrayType = function (e) {
            var t = e.tokenKind;
            switch (t) {
              case 60:
              case 67:
              case 61:
              case 69:
              case 41:
                return this.eatAnyToken();
              case 70:
                return this.parseObjectType();
              case 72:
              case 80:
                return this.parseFunctionType();
              case 31:
                return this.parseConstructorType();
              case 39:
                return this.parseTypeQuery();
            }
            return this.parseNameOrGenericType();
          }),
          (t.prototype.parseNameOrGenericType = function () {
            var e = this.parseName(),
              t = this.tryParseTypeArgumentList(!1);
            return null === t ? e : this.factory.genericType(e, t);
          }),
          (t.prototype.parseFunctionType = function () {
            var e = this.parseOptionalTypeParameterList(!1),
              t = this.parseParameterList(),
              n = this.eatToken(85),
              r = this.parseType();
            return this.factory.functionType(e, t, n, r);
          }),
          (t.prototype.parseConstructorType = function () {
            var e = this.eatKeyword(31),
              t = this.parseOptionalTypeParameterList(!1),
              n = this.parseParameterList(),
              r = this.eatToken(85),
              i = this.parseType();
            return this.factory.constructorType(e, t, n, r, i);
          }),
          (t.prototype.isParameter = function () {
            if (
              null !== this.currentNode() &&
              242 === this.currentNode().kind()
            )
              return !0;
            var e = this.currentToken(),
              n = e.tokenKind;
            return 77 === n
              ? !0
              : t.isModifier(e) && !this.isModifierUsedAsParameterIdentifier(e)
              ? !0
              : this.isIdentifier(e);
          }),
          (t.prototype.isModifierUsedAsParameterIdentifier = function (e) {
            if (this.isIdentifier(e)) {
              var t = this.peekToken(1).tokenKind;
              switch (t) {
                case 73:
                case 106:
                case 107:
                case 79:
                case 105:
                  return !0;
              }
            }
            return !1;
          }),
          (t.prototype.parseParameter = function () {
            if (
              null !== this.currentNode() &&
              242 === this.currentNode().kind()
            )
              return this.eatNode();
            for (var n = this.tryEatToken(77), r = this.getArray(); ; ) {
              var i = this.currentToken();
              {
                if (
                  !t.isModifier(i) ||
                  this.isModifierUsedAsParameterIdentifier(i)
                )
                  break;
                r.push(this.eatAnyToken());
              }
            }
            var o = e.Syntax.list(r);
            this.returnZeroOrOneLengthArray(r);
            var s = this.eatIdentifierToken(),
              a = this.tryEatToken(105),
              l = this.parseOptionalTypeAnnotation(!0),
              c = null;
            return (
              this.isEqualsValueClause(!0) &&
                (c = this.parseEqualsValueClause(!0)),
              this.factory.parameter(n, o, s, a, l, c)
            );
          }),
          (t.prototype.parseSyntaxList = function (e, t) {
            "undefined" == typeof t && (t = null);
            var n = this.listParsingState;
            this.listParsingState |= e;
            var r = this.parseSyntaxListWorker(e, t);
            return (this.listParsingState = n), r;
          }),
          (t.prototype.parseSeparatedSyntaxList = function (e) {
            var t = this.listParsingState;
            this.listParsingState |= e;
            var n = this.parseSeparatedSyntaxListWorker(e);
            return (this.listParsingState = t), n;
          }),
          (t.prototype.abortParsingListOrMoveToNextToken = function (e, t, n) {
            this.reportUnexpectedTokenDiagnostic(e);
            for (var r = 524288; r >= 1; r >>= 1)
              if (
                0 !== (this.listParsingState & r) &&
                (this.isExpectedListTerminator(r) ||
                  this.isExpectedListItem(r, !0))
              )
                return !0;
            var i = this.currentToken();
            return (
              this.moveToNextToken(), this.addSkippedTokenToList(t, n, i), !1
            );
          }),
          (t.prototype.addSkippedTokenToList = function (e, t, n) {
            for (var r = e.length - 1; r >= 0; r--) {
              var i = e[r],
                o = i.lastToken();
              if (o.fullWidth() > 0)
                return (
                  (e[r] = this.addSkippedTokenAfterNodeOrToken(i, n)), void 0
                );
            }
            t.push(n);
          }),
          (t.prototype.tryParseExpectedListItem = function (e, t, n, r) {
            if (this.isExpectedListItem(e, t)) {
              var i = this.parseExpectedListItem(e, t);
              n.push(i), null !== r && r(this, n);
            }
          }),
          (t.prototype.listIsTerminated = function (e) {
            return (
              this.isExpectedListTerminator(e) ||
              10 === this.currentToken().tokenKind
            );
          }),
          (t.prototype.getArray = function () {
            return this.arrayPool.length > 0 ? this.arrayPool.pop() : [];
          }),
          (t.prototype.returnZeroOrOneLengthArray = function (e) {
            e.length <= 1 && this.returnArray(e);
          }),
          (t.prototype.returnArray = function (e) {
            (e.length = 0), this.arrayPool.push(e);
          }),
          (t.prototype.parseSyntaxListWorker = function (t, n) {
            for (var r = this.getArray(), i = this.getArray(); ; ) {
              var o = r.length;
              this.tryParseExpectedListItem(t, !1, r, n);
              var s = r.length;
              if (s === o) {
                if (this.listIsTerminated(t)) break;
                var a = this.abortParsingListOrMoveToNextToken(t, r, i);
                if (a) break;
              }
            }
            var l = e.Syntax.list(r);
            return (
              this.returnZeroOrOneLengthArray(r), { skippedTokens: i, list: l }
            );
          }),
          (t.prototype.parseSeparatedSyntaxListWorker = function (t) {
            var n = this.getArray(),
              r = this.getArray();
            e.Debug.assert(0 === n.length),
              e.Debug.assert(0 === r.length),
              e.Debug.assert(r !== n);
            for (
              var i = this.separatorKind(t), o = 78 === i, s = !1, a = !1;
              ;

            ) {
              var l = n.length;
              this.tryParseExpectedListItem(t, s, n, null);
              var c = n.length;
              if (c !== l) {
                s = !1;
                var u = this.currentToken();
                if (u.tokenKind !== i && 79 !== u.tokenKind) {
                  if (this.listIsTerminated(t)) {
                    a = !0;
                    break;
                  }
                  o && this.canEatAutomaticSemicolon(!1)
                    ? n.push(this.eatExplicitOrAutomaticSemicolon(!1))
                    : (n.push(this.eatToken(i)), (s = !0));
                } else n.push(this.eatAnyToken());
              } else {
                if (this.listIsTerminated(t)) {
                  a = !0;
                  break;
                }
                var p = this.abortParsingListOrMoveToNextToken(t, n, r);
                if (p) break;
                s = !0;
              }
            }
            var h = e.Syntax.separatedList(n);
            return (
              this.returnZeroOrOneLengthArray(n), { skippedTokens: r, list: h }
            );
          }),
          (t.prototype.separatorKind = function (t) {
            switch (t) {
              case 2048:
              case 16384:
              case 256:
              case 4096:
              case 8192:
              case 32768:
              case 131072:
              case 65536:
              case 262144:
              case 524288:
                return 79;
              case 512:
                return 78;
              case 1:
              case 1024:
              case 2:
              case 4:
              case 8:
              case 16:
              case 32:
              default:
                throw e.Errors.notYetImplemented();
            }
          }),
          (t.prototype.reportUnexpectedTokenDiagnostic = function (t) {
            var n = this.currentToken(),
              r = new e.Diagnostic(
                this.fileName,
                this.lineMap,
                this.currentTokenStart(),
                n.width(),
                e.DiagnosticCode.Unexpected_token_0_expected,
                [this.getExpectedListElementType(t)]
              );
            this.addDiagnostic(r);
          }),
          (t.prototype.addDiagnostic = function (e) {
            (this.diagnostics.length > 0 &&
              this.diagnostics[this.diagnostics.length - 1].start() ===
                e.start()) ||
              this.diagnostics.push(e);
          }),
          (t.prototype.isExpectedListTerminator = function (t) {
            switch (t) {
              case 1:
                return this.isExpectedSourceUnit_ModuleElementsTerminator();
              case 1024:
                return this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator();
              case 2:
                return this.isExpectedClassDeclaration_ClassElementsTerminator();
              case 4:
                return this.isExpectedModuleDeclaration_ModuleElementsTerminator();
              case 8:
                return this.isExpectedSwitchStatement_SwitchClausesTerminator();
              case 16:
                return this.isExpectedSwitchClause_StatementsTerminator();
              case 32:
                return this.isExpectedBlock_StatementsTerminator();
              case 64:
                return this.isExpectedTryBlock_StatementsTerminator();
              case 128:
                return this.isExpectedCatchBlock_StatementsTerminator();
              case 256:
                return this.isExpectedEnumDeclaration_EnumElementsTerminator();
              case 512:
                return this.isExpectedObjectType_TypeMembersTerminator();
              case 16384:
                return this.isExpectedArgumentList_AssignmentExpressionsTerminator();
              case 2048:
                return this.isExpectedHeritageClause_TypeNameListTerminator();
              case 4096:
                return this.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator();
              case 8192:
                return this.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator();
              case 32768:
                return this.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();
              case 131072:
                return this.isExpectedParameterList_ParametersTerminator();
              case 262144:
                return this.isExpectedTypeArgumentList_TypesTerminator();
              case 524288:
                return this.isExpectedTypeParameterList_TypeParametersTerminator();
              case 65536:
                return this.isExpectedLiteralExpression_AssignmentExpressionsTerminator();
              default:
                throw e.Errors.invalidOperation();
            }
          }),
          (t.prototype.isExpectedSourceUnit_ModuleElementsTerminator = function () {
            return 10 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedEnumDeclaration_EnumElementsTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedModuleDeclaration_ModuleElementsTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedObjectType_TypeMembersTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedLiteralExpression_AssignmentExpressionsTerminator = function () {
            return 75 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedTypeArgumentList_TypesTerminator = function () {
            var e = this.currentToken();
            return 81 === e.tokenKind
              ? !0
              : this.canFollowTypeArgumentListInExpression(e.tokenKind)
              ? !0
              : !1;
          }),
          (t.prototype.isExpectedTypeParameterList_TypeParametersTerminator = function () {
            var e = this.currentToken();
            return 81 === e.tokenKind
              ? !0
              : 72 === e.tokenKind ||
                70 === e.tokenKind ||
                48 === e.tokenKind ||
                51 === e.tokenKind
              ? !0
              : !1;
          }),
          (t.prototype.isExpectedParameterList_ParametersTerminator = function () {
            var e = this.currentToken();
            return 73 === e.tokenKind
              ? !0
              : 70 === e.tokenKind
              ? !0
              : 85 === e.tokenKind
              ? !0
              : !1;
          }),
          (t.prototype.isExpectedVariableDeclaration_VariableDeclarators_DisallowInTerminator = function () {
            return 78 === this.currentToken().tokenKind ||
              73 === this.currentToken().tokenKind
              ? !0
              : 29 === this.currentToken().tokenKind
              ? !0
              : !1;
          }),
          (t.prototype.isExpectedVariableDeclaration_VariableDeclarators_AllowInTerminator = function () {
            return 79 === this.previousToken().tokenKind
              ? !1
              : 85 === this.currentToken().tokenKind
              ? !0
              : this.canEatExplicitOrAutomaticSemicolon(!1);
          }),
          (t.prototype.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator = function () {
            var e = this.currentToken();
            return 70 === e.tokenKind || 71 === e.tokenKind ? !0 : !1;
          }),
          (t.prototype.isExpectedHeritageClause_TypeNameListTerminator = function () {
            var e = this.currentToken();
            return 48 === e.tokenKind || 51 === e.tokenKind
              ? !0
              : this.isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator()
              ? !0
              : !1;
          }),
          (t.prototype.isExpectedArgumentList_AssignmentExpressionsTerminator = function () {
            var e = this.currentToken();
            return 73 === e.tokenKind || 78 === e.tokenKind;
          }),
          (t.prototype.isExpectedClassDeclaration_ClassElementsTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedSwitchStatement_SwitchClausesTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedSwitchClause_StatementsTerminator = function () {
            return (
              71 === this.currentToken().tokenKind || this.isSwitchClause()
            );
          }),
          (t.prototype.isExpectedBlock_StatementsTerminator = function () {
            return 71 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedTryBlock_StatementsTerminator = function () {
            return (
              17 === this.currentToken().tokenKind ||
              25 === this.currentToken().tokenKind
            );
          }),
          (t.prototype.isExpectedCatchBlock_StatementsTerminator = function () {
            return 25 === this.currentToken().tokenKind;
          }),
          (t.prototype.isExpectedListItem = function (t, n) {
            switch (t) {
              case 1:
                return this.isModuleElement(n);
              case 1024:
                return this.isHeritageClause();
              case 2:
                return this.isClassElement(n);
              case 4:
                return this.isModuleElement(n);
              case 8:
                return this.isSwitchClause();
              case 16:
                return this.isStatement(n);
              case 32:
                return this.isStatement(n);
              case 64:
              case 128:
                return !1;
              case 256:
                return this.isEnumElement(n);
              case 4096:
              case 8192:
                return this.isVariableDeclarator();
              case 512:
                return this.isTypeMember(n);
              case 16384:
                return this.isExpectedArgumentList_AssignmentExpression();
              case 2048:
                return this.isHeritageClauseTypeName();
              case 32768:
                return this.isPropertyAssignment(n);
              case 131072:
                return this.isParameter();
              case 262144:
                return this.isType();
              case 524288:
                return this.isTypeParameter();
              case 65536:
                return this.isAssignmentOrOmittedExpression();
              default:
                throw e.Errors.invalidOperation();
            }
          }),
          (t.prototype.isExpectedArgumentList_AssignmentExpression = function () {
            var e = this.currentToken();
            return this.isExpression(e) ? !0 : 79 === e.tokenKind ? !0 : !1;
          }),
          (t.prototype.parseExpectedListItem = function (t, n) {
            switch (t) {
              case 1:
                return this.parseModuleElement(n);
              case 1024:
                return this.parseHeritageClause();
              case 2:
                return this.parseClassElement(n);
              case 4:
                return this.parseModuleElement(n);
              case 8:
                return this.parseSwitchClause();
              case 16:
                return this.parseStatement(n);
              case 32:
                return this.parseStatement(n);
              case 256:
                return this.parseEnumElement();
              case 512:
                return this.parseTypeMember(n);
              case 16384:
                return this.parseAssignmentExpression(!0);
              case 2048:
                return this.parseNameOrGenericType();
              case 4096:
                return this.parseVariableDeclarator(!0, !1);
              case 8192:
                return this.parseVariableDeclarator(!1, !1);
              case 32768:
                return this.parsePropertyAssignment(n);
              case 65536:
                return this.parseAssignmentOrOmittedExpression();
              case 131072:
                return this.parseParameter();
              case 262144:
                return this.parseType();
              case 524288:
                return this.parseTypeParameter();
              default:
                throw e.Errors.invalidOperation();
            }
          }),
          (t.prototype.getExpectedListElementType = function (t) {
            switch (t) {
              case 1:
                return e.getLocalizedText(
                  e.DiagnosticCode
                    .module_class_interface_enum_import_or_statement,
                  null
                );
              case 1024:
                return "{";
              case 2:
                return e.getLocalizedText(
                  e.DiagnosticCode.constructor_function_accessor_or_variable,
                  null
                );
              case 4:
                return e.getLocalizedText(
                  e.DiagnosticCode
                    .module_class_interface_enum_import_or_statement,
                  null
                );
              case 8:
                return e.getLocalizedText(
                  e.DiagnosticCode.case_or_default_clause,
                  null
                );
              case 16:
                return e.getLocalizedText(e.DiagnosticCode.statement, null);
              case 32:
                return e.getLocalizedText(e.DiagnosticCode.statement, null);
              case 4096:
              case 8192:
                return e.getLocalizedText(e.DiagnosticCode.identifier, null);
              case 256:
                return e.getLocalizedText(e.DiagnosticCode.identifier, null);
              case 512:
                return e.getLocalizedText(
                  e.DiagnosticCode
                    .call_construct_index_property_or_function_signature,
                  null
                );
              case 16384:
                return e.getLocalizedText(e.DiagnosticCode.expression, null);
              case 2048:
                return e.getLocalizedText(e.DiagnosticCode.type_name, null);
              case 32768:
                return e.getLocalizedText(
                  e.DiagnosticCode.property_or_accessor,
                  null
                );
              case 131072:
                return e.getLocalizedText(e.DiagnosticCode.parameter, null);
              case 262144:
                return e.getLocalizedText(e.DiagnosticCode.type, null);
              case 524288:
                return e.getLocalizedText(
                  e.DiagnosticCode.type_parameter,
                  null
                );
              case 65536:
                return e.getLocalizedText(e.DiagnosticCode.expression, null);
              default:
                throw e.Errors.invalidOperation();
            }
          }),
          t
        );
      })();
    (t.parse = n), (t.incrementalParse = r);
  })(e.Parser || (e.Parser = {}));
  e.Parser;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e, t, n, r, i, o) {
      (this._allDiagnostics = null),
        (this._sourceUnit = e),
        (this._isDeclaration = t),
        (this._parserDiagnostics = n),
        (this._fileName = r),
        (this._lineMap = i),
        (this._parseOptions = o);
    }
    return (
      (t.prototype.toJSON = function () {
        var t = {};
        return (
          (t.isDeclaration = this._isDeclaration),
          (t.languageVersion =
            e.LanguageVersion[this._parseOptions.languageVersion()]),
          (t.parseOptions = this._parseOptions),
          this.diagnostics().length > 0 && (t.diagnostics = this.diagnostics()),
          (t.sourceUnit = this._sourceUnit),
          (t.lineMap = this._lineMap),
          t
        );
      }),
      (t.prototype.sourceUnit = function () {
        return this._sourceUnit;
      }),
      (t.prototype.isDeclaration = function () {
        return this._isDeclaration;
      }),
      (t.prototype.computeDiagnostics = function () {
        if (this._parserDiagnostics.length > 0) return this._parserDiagnostics;
        var e = [];
        return this.sourceUnit().accept(new n(this, e)), e;
      }),
      (t.prototype.diagnostics = function () {
        return (
          null === this._allDiagnostics &&
            (this._allDiagnostics = this.computeDiagnostics()),
          this._allDiagnostics
        );
      }),
      (t.prototype.fileName = function () {
        return this._fileName;
      }),
      (t.prototype.lineMap = function () {
        return this._lineMap;
      }),
      (t.prototype.parseOptions = function () {
        return this._parseOptions;
      }),
      (t.prototype.structuralEquals = function (t) {
        return (
          e.ArrayUtilities.sequenceEquals(
            this.diagnostics(),
            t.diagnostics(),
            e.Diagnostic.equals
          ) && this.sourceUnit().structuralEquals(t.sourceUnit())
        );
      }),
      t
    );
  })();
  e.SyntaxTree = t;
  var n = (function (t) {
    function n(e, n) {
      t.call(this),
        (this.syntaxTree = e),
        (this.diagnostics = n),
        (this.inAmbientDeclaration = !1),
        (this.inBlock = !1),
        (this.inObjectLiteralExpression = !1),
        (this.currentConstructor = null);
    }
    return (
      __extends(n, t),
      (n.prototype.childFullStart = function (t, n) {
        return this.position() + e.Syntax.childOffset(t, n);
      }),
      (n.prototype.childStart = function (e, t) {
        return this.childFullStart(e, t) + t.leadingTriviaWidth();
      }),
      (n.prototype.pushDiagnostic = function (t, n, r, i) {
        "undefined" == typeof i && (i = null),
          this.diagnostics.push(
            new e.Diagnostic(
              this.syntaxTree.fileName(),
              this.syntaxTree.lineMap(),
              t,
              n,
              r,
              i
            )
          );
      }),
      (n.prototype.pushDiagnostic1 = function (t, n, r, i) {
        "undefined" == typeof i && (i = null),
          this.diagnostics.push(
            new e.Diagnostic(
              this.syntaxTree.fileName(),
              this.syntaxTree.lineMap(),
              t + n.leadingTriviaWidth(),
              n.width(),
              r,
              i
            )
          );
      }),
      (n.prototype.visitCatchClause = function (n) {
        n.typeAnnotation &&
          this.pushDiagnostic(
            this.childStart(n, n.typeAnnotation),
            n.typeAnnotation.width(),
            e.DiagnosticCode
              .Catch_clause_parameter_cannot_have_a_type_annotation
          ),
          t.prototype.visitCatchClause.call(this, n);
      }),
      (n.prototype.checkParameterListOrder = function (t) {
        for (
          var n = this.childFullStart(t, t.parameters),
            r = !1,
            i = t.parameters.nonSeparatorCount(),
            o = 0,
            s = t.parameters.childCount();
          s > o;
          o++
        ) {
          var a = t.parameters.childAt(o);
          if (o % 2 === 0) {
            var l = o / 2,
              c = t.parameters.childAt(o);
            if (c.dotDotDotToken) {
              if (l !== i - 1)
                return (
                  this.pushDiagnostic1(
                    n,
                    c,
                    e.DiagnosticCode.Rest_parameter_must_be_last_in_list
                  ),
                  !0
                );
              if (c.questionToken)
                return (
                  this.pushDiagnostic1(
                    n,
                    c,
                    e.DiagnosticCode.Rest_parameter_cannot_be_optional
                  ),
                  !0
                );
              if (c.equalsValueClause)
                return (
                  this.pushDiagnostic1(
                    n,
                    c,
                    e.DiagnosticCode.Rest_parameter_cannot_have_an_initializer
                  ),
                  !0
                );
            } else if (c.questionToken || c.equalsValueClause) {
              if (((r = !0), c.questionToken && c.equalsValueClause))
                return (
                  this.pushDiagnostic1(
                    n,
                    c,
                    e.DiagnosticCode
                      .Parameter_cannot_have_question_mark_and_initializer
                  ),
                  !0
                );
            } else if (r)
              return (
                this.pushDiagnostic1(
                  n,
                  c,
                  e.DiagnosticCode
                    .Required_parameter_cannot_follow_optional_parameter
                ),
                !0
              );
          }
          n += a.fullWidth();
        }
        return !1;
      }),
      (n.prototype.checkParameterListAcessibilityModifiers = function (e) {
        for (
          var t = this.childFullStart(e, e.parameters),
            n = 0,
            r = e.parameters.childCount();
          r > n;
          n++
        ) {
          var i = e.parameters.childAt(n);
          if (n % 2 === 0) {
            var o = e.parameters.childAt(n);
            if (this.checkParameterAccessibilityModifiers(e, o, t)) return !0;
          }
          t += i.fullWidth();
        }
        return !1;
      }),
      (n.prototype.checkParameterAccessibilityModifiers = function (t, n, r) {
        if (n.modifiers.childCount() > 0)
          for (
            var i = n.modifiers,
              o = r + e.Syntax.childOffset(n, i),
              s = 0,
              a = i.childCount();
            a > s;
            s++
          ) {
            var l = i.childAt(s);
            if (this.checkParameterAccessibilityModifier(t, l, o, s)) return !0;
            o += l.fullWidth();
          }
        return !1;
      }),
      (n.prototype.checkParameterAccessibilityModifier = function (t, n, r, i) {
        return 57 !== n.tokenKind && 55 !== n.tokenKind
          ? (this.pushDiagnostic1(
              r,
              n,
              e.DiagnosticCode._0_modifier_cannot_appear_on_a_parameter,
              [n.text()]
            ),
            !0)
          : i > 0
          ? (this.pushDiagnostic1(
              r,
              n,
              e.DiagnosticCode.Accessibility_modifier_already_seen
            ),
            !0)
          : this.inAmbientDeclaration ||
            !this.currentConstructor ||
            this.currentConstructor.block ||
            this.currentConstructor.callSignature.parameterList !== t
          ? this.inAmbientDeclaration ||
            null === this.currentConstructor ||
            this.currentConstructor.callSignature.parameterList !== t
            ? (this.pushDiagnostic1(
                r,
                n,
                e.DiagnosticCode
                  .Parameter_property_declarations_can_only_be_used_in_a_non_ambient_constructor_declaration
              ),
              !0)
            : !1
          : (this.pushDiagnostic1(
              r,
              n,
              e.DiagnosticCode
                .Parameter_property_declarations_cannot_be_used_in_a_constructor_overload
            ),
            !0);
      }),
      (n.prototype.checkForTrailingSeparator = function (t, n) {
        if (0 === n.childCount() || n.childCount() % 2 === 1) return !1;
        for (
          var r = this.childFullStart(t, n), i = 0, o = n.childCount();
          o > i;
          i++
        ) {
          var s = n.childAt(i);
          i === o - 1 &&
            this.pushDiagnostic1(
              r,
              s,
              e.DiagnosticCode.Trailing_separator_not_allowed
            ),
            (r += s.fullWidth());
        }
        return !0;
      }),
      (n.prototype.checkForAtLeastOneElement = function (t, n, r) {
        if (n.childCount() > 0) return !1;
        var i = this.childFullStart(t, n),
          o = this.syntaxTree.sourceUnit().findToken(i);
        return (
          this.pushDiagnostic1(
            i,
            o.token(),
            e.DiagnosticCode.Unexpected_token_0_expected,
            [r]
          ),
          !0
        );
      }),
      (n.prototype.visitParameterList = function (e) {
        return this.checkParameterListAcessibilityModifiers(e) ||
          this.checkParameterListOrder(e) ||
          this.checkForTrailingSeparator(e, e.parameters)
          ? (this.skip(e), void 0)
          : (t.prototype.visitParameterList.call(this, e), void 0);
      }),
      (n.prototype.visitHeritageClause = function (n) {
        return this.checkForTrailingSeparator(n, n.typeNames) ||
          this.checkForAtLeastOneElement(
            n,
            n.typeNames,
            e.getLocalizedText(e.DiagnosticCode.type_name, null)
          )
          ? (this.skip(n), void 0)
          : (t.prototype.visitHeritageClause.call(this, n), void 0);
      }),
      (n.prototype.visitArgumentList = function (e) {
        return this.checkForTrailingSeparator(e, e.arguments)
          ? (this.skip(e), void 0)
          : (t.prototype.visitArgumentList.call(this, e), void 0);
      }),
      (n.prototype.visitVariableDeclaration = function (n) {
        return this.checkForTrailingSeparator(n, n.variableDeclarators) ||
          this.checkForAtLeastOneElement(
            n,
            n.variableDeclarators,
            e.getLocalizedText(e.DiagnosticCode.identifier, null)
          )
          ? (this.skip(n), void 0)
          : (t.prototype.visitVariableDeclaration.call(this, n), void 0);
      }),
      (n.prototype.visitTypeArgumentList = function (n) {
        return this.checkForTrailingSeparator(n, n.typeArguments) ||
          this.checkForAtLeastOneElement(
            n,
            n.typeArguments,
            e.getLocalizedText(e.DiagnosticCode.identifier, null)
          )
          ? (this.skip(n), void 0)
          : (t.prototype.visitTypeArgumentList.call(this, n), void 0);
      }),
      (n.prototype.visitTypeParameterList = function (n) {
        return this.checkForTrailingSeparator(n, n.typeParameters) ||
          this.checkForAtLeastOneElement(
            n,
            n.typeParameters,
            e.getLocalizedText(e.DiagnosticCode.identifier, null)
          )
          ? (this.skip(n), void 0)
          : (t.prototype.visitTypeParameterList.call(this, n), void 0);
      }),
      (n.prototype.checkIndexSignatureParameter = function (t) {
        var n = this.childFullStart(t, t.parameter),
          r = t.parameter;
        return r.dotDotDotToken
          ? (this.pushDiagnostic1(
              n,
              r,
              e.DiagnosticCode.Index_signatures_cannot_have_rest_parameters
            ),
            !0)
          : r.modifiers.childCount() > 0
          ? (this.pushDiagnostic1(
              n,
              r,
              e.DiagnosticCode
                .Index_signature_parameter_cannot_have_accessibility_modifiers
            ),
            !0)
          : r.questionToken
          ? (this.pushDiagnostic1(
              n,
              r,
              e.DiagnosticCode
                .Index_signature_parameter_cannot_have_a_question_mark
            ),
            !0)
          : r.equalsValueClause
          ? (this.pushDiagnostic1(
              n,
              r,
              e.DiagnosticCode
                .Index_signature_parameter_cannot_have_an_initializer
            ),
            !0)
          : r.typeAnnotation
          ? 69 !== r.typeAnnotation.type.kind() &&
            67 !== r.typeAnnotation.type.kind()
            ? (this.pushDiagnostic1(
                n,
                r,
                e.DiagnosticCode
                  .Index_signature_parameter_type_must_be_string_or_number
              ),
              !0)
            : !1
          : (this.pushDiagnostic1(
              n,
              r,
              e.DiagnosticCode
                .Index_signature_parameter_must_have_a_type_annotation
            ),
            !0);
      }),
      (n.prototype.visitIndexSignature = function (n) {
        return this.checkIndexSignatureParameter(n)
          ? (this.skip(n), void 0)
          : n.typeAnnotation
          ? (t.prototype.visitIndexSignature.call(this, n), void 0)
          : (this.pushDiagnostic1(
              this.position(),
              n,
              e.DiagnosticCode.Index_signature_must_have_a_type_annotation
            ),
            this.skip(n),
            void 0);
      }),
      (n.prototype.checkClassDeclarationHeritageClauses = function (t) {
        for (
          var n = this.childFullStart(t, t.heritageClauses),
            r = !1,
            i = !1,
            o = 0,
            s = t.heritageClauses.childCount();
          s > o;
          o++
        ) {
          e.Debug.assert(2 >= o);
          var a = t.heritageClauses.childAt(o);
          if (48 === a.extendsOrImplementsKeyword.tokenKind) {
            if (r)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.extends_clause_already_seen
                ),
                !0
              );
            if (i)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.extends_clause_must_precede_implements_clause
                ),
                !0
              );
            if (a.typeNames.nonSeparatorCount() > 1)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.Classes_can_only_extend_a_single_class
                ),
                !0
              );
            r = !0;
          } else {
            if (
              (e.Debug.assert(51 === a.extendsOrImplementsKeyword.tokenKind), i)
            )
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.implements_clause_already_seen
                ),
                !0
              );
            i = !0;
          }
          n += a.fullWidth();
        }
        return !1;
      }),
      (n.prototype.checkForDisallowedDeclareModifier = function (t) {
        if (this.inAmbientDeclaration) {
          var n = e.SyntaxUtilities.getToken(t, 63);
          if (n)
            return (
              this.pushDiagnostic1(
                this.childFullStart(t, n),
                n,
                e.DiagnosticCode
                  .declare_modifier_not_allowed_for_code_already_in_an_ambient_context
              ),
              !0
            );
        }
        return !1;
      }),
      (n.prototype.checkForRequiredDeclareModifier = function (t, n, r) {
        return this.inAmbientDeclaration ||
          !this.syntaxTree.isDeclaration() ||
          e.SyntaxUtilities.containsToken(r, 63)
          ? void 0
          : (this.pushDiagnostic1(
              this.childFullStart(t, n),
              n.firstToken(),
              e.DiagnosticCode.declare_modifier_required_for_top_level_element
            ),
            !0);
      }),
      (n.prototype.checkFunctionOverloads = function (t, n) {
        if (!this.inAmbientDeclaration && !this.syntaxTree.isDeclaration())
          for (
            var r = this.childFullStart(t, n),
              i = !1,
              o = null,
              s = 0,
              a = n.childCount();
            a > s;
            s++
          ) {
            var l = n.childAt(s),
              c = s === a - 1;
            if (i) {
              if (129 !== l.kind())
                return (
                  this.pushDiagnostic1(
                    r,
                    l.firstToken(),
                    e.DiagnosticCode.Function_implementation_expected
                  ),
                  !0
                );
              var u = l;
              if (u.identifier.valueText() !== o) {
                var p = r + e.Syntax.childOffset(l, u.identifier);
                return (
                  this.pushDiagnostic1(
                    p,
                    u.identifier,
                    e.DiagnosticCode.Function_overload_name_must_be_0,
                    [o]
                  ),
                  !0
                );
              }
            }
            if (129 === l.kind())
              if (((u = l), e.SyntaxUtilities.containsToken(u.modifiers, 63)))
                (i = !1), (o = "");
              else if (
                ((i = null === u.block), (o = u.identifier.valueText()), i)
              ) {
                if (c)
                  return (
                    this.pushDiagnostic1(
                      r,
                      l.firstToken(),
                      e.DiagnosticCode.Function_implementation_expected
                    ),
                    !0
                  );
                var h = n.childAt(s + 1);
                if (129 === h.kind()) {
                  var d = h;
                  if (d.identifier.valueText() !== o && null === d.block) {
                    var p = r + e.Syntax.childOffset(l, u.identifier);
                    return (
                      this.pushDiagnostic1(
                        p,
                        u.identifier,
                        e.DiagnosticCode.Function_implementation_expected
                      ),
                      !0
                    );
                  }
                }
              }
            r += l.fullWidth();
          }
        return !1;
      }),
      (n.prototype.checkClassOverloads = function (t) {
        if (
          !this.inAmbientDeclaration &&
          !e.SyntaxUtilities.containsToken(t.modifiers, 63)
        )
          for (
            var n = this.childFullStart(t, t.classElements),
              r = !1,
              i = !1,
              o = null,
              s = null,
              a = null,
              l = 0,
              c = t.classElements.childCount();
            c > l;
            l++
          ) {
            var u = t.classElements.childAt(l),
              p = l === c - 1,
              h = null;
            if (r) {
              if (135 !== u.kind())
                return (
                  this.pushDiagnostic1(
                    n,
                    u.firstToken(),
                    e.DiagnosticCode.Function_implementation_expected
                  ),
                  !0
                );
              if (((a = u), a.propertyName.valueText() !== o)) {
                var d = n + e.Syntax.childOffset(u, a.propertyName);
                return (
                  this.pushDiagnostic1(
                    d,
                    a.propertyName,
                    e.DiagnosticCode.Function_overload_name_must_be_0,
                    [o]
                  ),
                  !0
                );
              }
              if (
                ((h = e.SyntaxUtilities.containsToken(a.modifiers, 58)),
                h !== s)
              ) {
                var d = n + e.Syntax.childOffset(u, a.propertyName),
                  m = s
                    ? e.DiagnosticCode.Function_overload_must_be_static
                    : e.DiagnosticCode.Function_overload_must_not_be_static;
                return this.pushDiagnostic1(d, a.propertyName, m, null), !0;
              }
            } else if (i && 137 !== u.kind())
              return (
                this.pushDiagnostic1(
                  n,
                  u.firstToken(),
                  e.DiagnosticCode.Constructor_implementation_expected
                ),
                !0
              );
            if (135 === u.kind()) {
              if (
                ((a = u),
                (r = null === a.block),
                (o = a.propertyName.valueText()),
                (s = e.SyntaxUtilities.containsToken(a.modifiers, 58)),
                r)
              ) {
                if (p)
                  return (
                    this.pushDiagnostic1(
                      n,
                      u.firstToken(),
                      e.DiagnosticCode.Function_implementation_expected
                    ),
                    !0
                  );
                var f = t.classElements.childAt(l + 1);
                if (135 === f.kind()) {
                  var g = f;
                  if (g.propertyName.valueText() !== o && null === g.block) {
                    var d = n + e.Syntax.childOffset(u, a.propertyName);
                    return (
                      this.pushDiagnostic1(
                        d,
                        a.propertyName,
                        e.DiagnosticCode.Function_implementation_expected
                      ),
                      !0
                    );
                  }
                }
              }
            } else if (137 === u.kind()) {
              var v = u;
              if (((i = null === v.block), p && i))
                return (
                  this.pushDiagnostic1(
                    n,
                    u.firstToken(),
                    e.DiagnosticCode.Constructor_implementation_expected
                  ),
                  !0
                );
            }
            n += u.fullWidth();
          }
        return !1;
      }),
      (n.prototype.checkForReservedName = function (t, n, r) {
        for (var i, o, s = this.childFullStart(t, n), a = n; null !== a; ) {
          if (121 === a.kind()) {
            var l = a;
            (i = l.right), (o = s + this.childFullStart(l, i)), (a = l.left);
          } else e.Debug.assert(11 === a.kind()), (i = a), (o = s), (a = null);
          switch (i.valueText()) {
            case "any":
            case "number":
            case "boolean":
            case "string":
            case "void":
              return (
                this.pushDiagnostic(o + i.leadingTriviaWidth(), i.width(), r, [
                  i.valueText(),
                ]),
                !0
              );
          }
        }
        return !1;
      }),
      (n.prototype.visitClassDeclaration = function (n) {
        if (
          this.checkForReservedName(
            n,
            n.identifier,
            e.DiagnosticCode.Class_name_cannot_be_0
          ) ||
          this.checkForDisallowedDeclareModifier(n.modifiers) ||
          this.checkForRequiredDeclareModifier(
            n,
            n.classKeyword,
            n.modifiers
          ) ||
          this.checkModuleElementModifiers(n.modifiers) ||
          this.checkClassDeclarationHeritageClauses(n) ||
          this.checkClassOverloads(n)
        )
          return this.skip(n), void 0;
        var r = this.inAmbientDeclaration;
        (this.inAmbientDeclaration =
          this.inAmbientDeclaration ||
          this.syntaxTree.isDeclaration() ||
          e.SyntaxUtilities.containsToken(n.modifiers, 63)),
          t.prototype.visitClassDeclaration.call(this, n),
          (this.inAmbientDeclaration = r);
      }),
      (n.prototype.checkInterfaceDeclarationHeritageClauses = function (t) {
        for (
          var n = this.childFullStart(t, t.heritageClauses),
            r = !1,
            i = 0,
            o = t.heritageClauses.childCount();
          o > i;
          i++
        ) {
          e.Debug.assert(1 >= i);
          var s = t.heritageClauses.childAt(i);
          if (48 !== s.extendsOrImplementsKeyword.tokenKind)
            return (
              e.Debug.assert(51 === s.extendsOrImplementsKeyword.tokenKind),
              this.pushDiagnostic1(
                n,
                s,
                e.DiagnosticCode
                  .Interface_declaration_cannot_have_implements_clause
              ),
              !0
            );
          if (r)
            return (
              this.pushDiagnostic1(
                n,
                s,
                e.DiagnosticCode.extends_clause_already_seen
              ),
              !0
            );
          (r = !0), (n += s.fullWidth());
        }
        return !1;
      }),
      (n.prototype.checkInterfaceModifiers = function (t) {
        for (var n = this.position(), r = 0, i = t.childCount(); i > r; r++) {
          var o = t.childAt(r);
          if (63 === o.tokenKind)
            return (
              this.pushDiagnostic1(
                n,
                o,
                e.DiagnosticCode
                  .declare_modifier_cannot_appear_on_an_interface_declaration
              ),
              !0
            );
          n += o.fullWidth();
        }
        return !1;
      }),
      (n.prototype.visitInterfaceDeclaration = function (n) {
        return this.checkForReservedName(
          n,
          n.identifier,
          e.DiagnosticCode.Interface_name_cannot_be_0
        ) ||
          this.checkInterfaceModifiers(n.modifiers) ||
          this.checkModuleElementModifiers(n.modifiers) ||
          this.checkInterfaceDeclarationHeritageClauses(n)
          ? (this.skip(n), void 0)
          : (t.prototype.visitInterfaceDeclaration.call(this, n), void 0);
      }),
      (n.prototype.checkClassElementModifiers = function (t) {
        for (
          var n = this.position(), r = !1, i = !1, o = 0, s = t.childCount();
          s > o;
          o++
        ) {
          var a = t.childAt(o);
          if (57 === a.tokenKind || 55 === a.tokenKind) {
            if (r)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.Accessibility_modifier_already_seen
                ),
                !0
              );
            if (i) {
              var l = t.childAt(o - 1);
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode._0_modifier_must_precede_1_modifier,
                  [a.text(), l.text()]
                ),
                !0
              );
            }
            r = !0;
          } else {
            if (58 !== a.tokenKind)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode._0_modifier_cannot_appear_on_a_class_element,
                  [a.text()]
                ),
                !0
              );
            if (i)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode._0_modifier_already_seen,
                  [a.text()]
                ),
                !0
              );
            i = !0;
          }
          n += a.fullWidth();
        }
        return !1;
      }),
      (n.prototype.visitMemberVariableDeclaration = function (e) {
        return this.checkClassElementModifiers(e.modifiers)
          ? (this.skip(e), void 0)
          : (t.prototype.visitMemberVariableDeclaration.call(this, e), void 0);
      }),
      (n.prototype.visitMemberFunctionDeclaration = function (e) {
        return this.checkClassElementModifiers(e.modifiers)
          ? (this.skip(e), void 0)
          : (t.prototype.visitMemberFunctionDeclaration.call(this, e), void 0);
      }),
      (n.prototype.checkGetAccessorParameter = function (t, n, r) {
        var i = this.childFullStart(t, n);
        return 0 !== r.parameters.childCount()
          ? (this.pushDiagnostic1(
              i,
              n,
              e.DiagnosticCode.get_accessor_cannot_have_parameters
            ),
            !0)
          : !1;
      }),
      (n.prototype.visitIndexMemberDeclaration = function (e) {
        return this.checkIndexMemberModifiers(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitIndexMemberDeclaration.call(this, e), void 0);
      }),
      (n.prototype.checkIndexMemberModifiers = function (t) {
        if (t.modifiers.childCount() > 0) {
          var n = this.childFullStart(t, t.modifiers);
          return (
            this.pushDiagnostic1(
              n,
              t.modifiers.childAt(0),
              e.DiagnosticCode.Modifiers_cannot_appear_here
            ),
            !0
          );
        }
        return !1;
      }),
      (n.prototype.checkEcmaScriptVersionIsAtLeast = function (e, t, n, r) {
        if (this.syntaxTree.parseOptions().languageVersion() < n) {
          var i = this.childFullStart(e, t);
          return this.pushDiagnostic1(i, t, r), !0;
        }
        return !1;
      }),
      (n.prototype.visitObjectLiteralExpression = function (e) {
        var n = this.inObjectLiteralExpression;
        (this.inObjectLiteralExpression = !0),
          t.prototype.visitObjectLiteralExpression.call(this, e),
          (this.inObjectLiteralExpression = n);
      }),
      (n.prototype.visitGetAccessor = function (n) {
        return this.checkForAccessorDeclarationInAmbientContext(n) ||
          this.checkEcmaScriptVersionIsAtLeast(
            n,
            n.getKeyword,
            1,
            e.DiagnosticCode
              .Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher
          ) ||
          this.checkForDisallowedModifiers(n, n.modifiers) ||
          this.checkClassElementModifiers(n.modifiers) ||
          this.checkGetAccessorParameter(n, n.getKeyword, n.parameterList)
          ? (this.skip(n), void 0)
          : (t.prototype.visitGetAccessor.call(this, n), void 0);
      }),
      (n.prototype.checkForAccessorDeclarationInAmbientContext = function (t) {
        return this.inAmbientDeclaration
          ? (this.pushDiagnostic1(
              this.position(),
              t,
              e.DiagnosticCode.Accessors_are_not_allowed_in_ambient_contexts,
              null
            ),
            !0)
          : !1;
      }),
      (n.prototype.checkSetAccessorParameter = function (t, n, r) {
        var i = this.childFullStart(t, n);
        if (1 !== r.parameters.childCount())
          return (
            this.pushDiagnostic1(
              i,
              n,
              e.DiagnosticCode.set_accessor_must_have_one_and_only_one_parameter
            ),
            !0
          );
        var o = this.childFullStart(t, r),
          s = o + e.Syntax.childOffset(r, r.openParenToken),
          a = r.parameters.childAt(0);
        return a.questionToken
          ? (this.pushDiagnostic1(
              s,
              a,
              e.DiagnosticCode.set_accessor_parameter_cannot_be_optional
            ),
            !0)
          : a.equalsValueClause
          ? (this.pushDiagnostic1(
              s,
              a,
              e.DiagnosticCode.set_accessor_parameter_cannot_have_an_initializer
            ),
            !0)
          : a.dotDotDotToken
          ? (this.pushDiagnostic1(
              s,
              a,
              e.DiagnosticCode.set_accessor_cannot_have_rest_parameter
            ),
            !0)
          : !1;
      }),
      (n.prototype.visitSetAccessor = function (n) {
        return this.checkForAccessorDeclarationInAmbientContext(n) ||
          this.checkEcmaScriptVersionIsAtLeast(
            n,
            n.setKeyword,
            1,
            e.DiagnosticCode
              .Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher
          ) ||
          this.checkForDisallowedModifiers(n, n.modifiers) ||
          this.checkClassElementModifiers(n.modifiers) ||
          this.checkSetAccessorParameter(n, n.setKeyword, n.parameterList)
          ? (this.skip(n), void 0)
          : (t.prototype.visitSetAccessor.call(this, n), void 0);
      }),
      (n.prototype.visitEnumDeclaration = function (n) {
        if (
          (this.checkForReservedName(
            n,
            n.identifier,
            e.DiagnosticCode.Enum_name_cannot_be_0
          ) ||
            this.checkForDisallowedDeclareModifier(n.modifiers) ||
            this.checkForRequiredDeclareModifier(
              n,
              n.enumKeyword,
              n.modifiers
            ) ||
            this.checkModuleElementModifiers(n.modifiers),
          this.checkEnumElements(n))
        )
          return this.skip(n), void 0;
        var r = this.inAmbientDeclaration;
        (this.inAmbientDeclaration =
          this.inAmbientDeclaration ||
          this.syntaxTree.isDeclaration() ||
          e.SyntaxUtilities.containsToken(n.modifiers, 63)),
          t.prototype.visitEnumDeclaration.call(this, n),
          (this.inAmbientDeclaration = r);
      }),
      (n.prototype.checkEnumElements = function (t) {
        for (
          var n = this.childFullStart(t, t.enumElements),
            r = !1,
            i = 0,
            o = t.enumElements.childCount();
          o > i;
          i++
        ) {
          var s = t.enumElements.childAt(i);
          if (i % 2 === 0) {
            var a = s;
            if (!a.equalsValueClause && r)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.Enum_member_must_have_initializer,
                  null
                ),
                !0
              );
            if (a.equalsValueClause) {
              var l = a.equalsValueClause.value;
              r = !e.Syntax.isIntegerLiteral(l);
            }
          }
          n += s.fullWidth();
        }
        return !1;
      }),
      (n.prototype.visitEnumElement = function (n) {
        if (this.inAmbientDeclaration && n.equalsValueClause) {
          var r = n.equalsValueClause.value;
          if (!e.Syntax.isIntegerLiteral(r))
            return (
              this.pushDiagnostic1(
                this.childFullStart(n, n.equalsValueClause),
                n.equalsValueClause.firstToken(),
                e.DiagnosticCode
                  .Ambient_enum_elements_can_only_have_integer_literal_initializers
              ),
              this.skip(n),
              void 0
            );
        }
        t.prototype.visitEnumElement.call(this, n);
      }),
      (n.prototype.visitInvocationExpression = function (n) {
        50 === n.expression.kind() &&
          null !== n.argumentList.typeArgumentList &&
          this.pushDiagnostic1(
            this.position(),
            n,
            e.DiagnosticCode.super_invocation_cannot_have_type_arguments
          ),
          t.prototype.visitInvocationExpression.call(this, n);
      }),
      (n.prototype.checkModuleElementModifiers = function (t) {
        for (
          var n = this.position(), r = !1, i = !1, o = 0, s = t.childCount();
          s > o;
          o++
        ) {
          var a = t.childAt(o);
          if (57 === a.tokenKind || 55 === a.tokenKind || 58 === a.tokenKind)
            return (
              this.pushDiagnostic1(
                n,
                a,
                e.DiagnosticCode._0_modifier_cannot_appear_on_a_module_element,
                [a.text()]
              ),
              !0
            );
          if (63 === a.tokenKind) {
            if (i)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode.Accessibility_modifier_already_seen
                ),
                void 0
              );
            i = !0;
          } else if (47 === a.tokenKind) {
            if (r)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode._0_modifier_already_seen,
                  [a.text()]
                ),
                void 0
              );
            if (i)
              return (
                this.pushDiagnostic1(
                  n,
                  a,
                  e.DiagnosticCode._0_modifier_must_precede_1_modifier,
                  [e.SyntaxFacts.getText(47), e.SyntaxFacts.getText(63)]
                ),
                void 0
              );
            r = !0;
          }
          n += a.fullWidth();
        }
        return !1;
      }),
      (n.prototype.checkForDisallowedImportDeclaration = function (t) {
        for (
          var n = this.childFullStart(t, t.moduleElements),
            r = 0,
            i = t.moduleElements.childCount();
          i > r;
          r++
        ) {
          var o = t.moduleElements.childAt(r);
          if (133 === o.kind()) {
            var s = o;
            245 === s.moduleReference.kind() &&
              null === t.stringLiteral &&
              this.pushDiagnostic1(
                n,
                s,
                e.DiagnosticCode
                  .Import_declarations_in_an_internal_module_cannot_reference_an_external_module,
                null
              );
          }
          n += o.fullWidth();
        }
        return !1;
      }),
      (n.prototype.checkForDisallowedDeclareModifierOnImportDeclaration = function (
        t
      ) {
        var n = e.SyntaxUtilities.getToken(t, 63);
        return n
          ? (this.pushDiagnostic1(
              this.childFullStart(t, n),
              n,
              e.DiagnosticCode
                .declare_modifier_not_allowed_on_import_declaration
            ),
            !0)
          : void 0;
      }),
      (n.prototype.visitImportDeclaration = function (e) {
        return this.checkForDisallowedDeclareModifierOnImportDeclaration(
          e.modifiers
        ) || this.checkModuleElementModifiers(e.modifiers)
          ? (this.skip(e), void 0)
          : (t.prototype.visitImportDeclaration.call(this, e), void 0);
      }),
      (n.prototype.visitModuleDeclaration = function (n) {
        if (
          this.checkForReservedName(
            n,
            n.name,
            e.DiagnosticCode.Module_name_cannot_be_0
          ) ||
          this.checkForDisallowedDeclareModifier(n.modifiers) ||
          this.checkForRequiredDeclareModifier(
            n,
            n.moduleKeyword,
            n.modifiers
          ) ||
          this.checkModuleElementModifiers(n.modifiers) ||
          this.checkForDisallowedImportDeclaration(n) ||
          this.checkForDisallowedExports(n, n.moduleElements) ||
          this.checkForMultipleExportAssignments(n, n.moduleElements)
        )
          return this.skip(n), void 0;
        if (
          !e.SyntaxUtilities.containsToken(n.modifiers, 63) &&
          this.checkFunctionOverloads(n, n.moduleElements)
        )
          return this.skip(n), void 0;
        if (
          n.stringLiteral &&
          !this.inAmbientDeclaration &&
          !e.SyntaxUtilities.containsToken(n.modifiers, 63)
        ) {
          var r = this.childFullStart(n, n.stringLiteral);
          return (
            this.pushDiagnostic1(
              r,
              n.stringLiteral,
              e.DiagnosticCode.Only_ambient_modules_can_use_quoted_names
            ),
            this.skip(n),
            void 0
          );
        }
        if (!n.stringLiteral && this.checkForDisallowedExportAssignment(n))
          return this.skip(n), void 0;
        var i = this.inAmbientDeclaration;
        (this.inAmbientDeclaration =
          this.inAmbientDeclaration ||
          this.syntaxTree.isDeclaration() ||
          e.SyntaxUtilities.containsToken(n.modifiers, 63)),
          t.prototype.visitModuleDeclaration.call(this, n),
          (this.inAmbientDeclaration = i);
      }),
      (n.prototype.checkForDisallowedExports = function (t, n) {
        for (var r = !1, i = 0, o = n.childCount(); o > i; i++) {
          var s = n.childAt(i);
          if (e.SyntaxUtilities.hasExportKeyword(s)) {
            r = !0;
            break;
          }
        }
        var a = this.childFullStart(t, n);
        if (r)
          for (var i = 0, o = n.childCount(); o > i; i++) {
            var s = n.childAt(i);
            if (134 === s.kind())
              return (
                this.pushDiagnostic1(
                  a,
                  s,
                  e.DiagnosticCode
                    .Export_assignment_not_allowed_in_module_with_exported_element
                ),
                !0
              );
            a += s.fullWidth();
          }
        return !1;
      }),
      (n.prototype.checkForMultipleExportAssignments = function (t, n) {
        for (
          var r = this.childFullStart(t, n),
            i = !1,
            o = !1,
            s = 0,
            a = n.childCount();
          a > s;
          s++
        ) {
          var l = n.childAt(s);
          134 === l.kind() &&
            (i &&
              (this.pushDiagnostic1(
                r,
                l,
                e.DiagnosticCode.Module_cannot_have_multiple_export_assignments
              ),
              (o = !0)),
            (i = !0)),
            (r += l.fullWidth());
        }
        return o;
      }),
      (n.prototype.checkForDisallowedExportAssignment = function (t) {
        for (
          var n = this.childFullStart(t, t.moduleElements),
            r = 0,
            i = t.moduleElements.childCount();
          i > r;
          r++
        ) {
          var o = t.moduleElements.childAt(r);
          if (134 === o.kind())
            return (
              this.pushDiagnostic1(
                n,
                o,
                e.DiagnosticCode
                  .Export_assignment_cannot_be_used_in_internal_modules
              ),
              !0
            );
          n += o.fullWidth();
        }
        return !1;
      }),
      (n.prototype.visitBlock = function (n) {
        if (this.inAmbientDeclaration || this.syntaxTree.isDeclaration())
          return (
            this.pushDiagnostic1(
              this.position(),
              n.firstToken(),
              e.DiagnosticCode
                .Implementations_are_not_allowed_in_ambient_contexts
            ),
            this.skip(n),
            void 0
          );
        if (this.checkFunctionOverloads(n, n.statements))
          return this.skip(n), void 0;
        var r = this.inBlock;
        (this.inBlock = !0),
          t.prototype.visitBlock.call(this, n),
          (this.inBlock = r);
      }),
      (n.prototype.checkForStatementInAmbientContxt = function (t) {
        return this.inAmbientDeclaration || this.syntaxTree.isDeclaration()
          ? (this.pushDiagnostic1(
              this.position(),
              t.firstToken(),
              e.DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts
            ),
            !0)
          : !1;
      }),
      (n.prototype.visitBreakStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitBreakStatement.call(this, e), void 0);
      }),
      (n.prototype.visitContinueStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitContinueStatement.call(this, e), void 0);
      }),
      (n.prototype.visitDebuggerStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitDebuggerStatement.call(this, e), void 0);
      }),
      (n.prototype.visitDoStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitDoStatement.call(this, e), void 0);
      }),
      (n.prototype.visitEmptyStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitEmptyStatement.call(this, e), void 0);
      }),
      (n.prototype.visitExpressionStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitExpressionStatement.call(this, e), void 0);
      }),
      (n.prototype.visitForInStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e) ||
          this.checkForInStatementVariableDeclaration(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitForInStatement.call(this, e), void 0);
      }),
      (n.prototype.checkForInStatementVariableDeclaration = function (t) {
        if (
          t.variableDeclaration &&
          t.variableDeclaration.variableDeclarators.nonSeparatorCount() > 1
        ) {
          var n = this.childFullStart(t, t.variableDeclaration);
          return (
            this.pushDiagnostic1(
              n,
              t.variableDeclaration,
              e.DiagnosticCode
                .Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement
            ),
            !0
          );
        }
        return !1;
      }),
      (n.prototype.visitForStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitForStatement.call(this, e), void 0);
      }),
      (n.prototype.visitIfStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitIfStatement.call(this, e), void 0);
      }),
      (n.prototype.visitLabeledStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitLabeledStatement.call(this, e), void 0);
      }),
      (n.prototype.visitReturnStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitReturnStatement.call(this, e), void 0);
      }),
      (n.prototype.visitSwitchStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitSwitchStatement.call(this, e), void 0);
      }),
      (n.prototype.visitThrowStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitThrowStatement.call(this, e), void 0);
      }),
      (n.prototype.visitTryStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitTryStatement.call(this, e), void 0);
      }),
      (n.prototype.visitWhileStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitWhileStatement.call(this, e), void 0);
      }),
      (n.prototype.visitWithStatement = function (e) {
        return this.checkForStatementInAmbientContxt(e)
          ? (this.skip(e), void 0)
          : (t.prototype.visitWithStatement.call(this, e), void 0);
      }),
      (n.prototype.checkForDisallowedModifiers = function (t, n) {
        if (
          (this.inBlock || this.inObjectLiteralExpression) &&
          n.childCount() > 0
        ) {
          var r = this.childFullStart(t, n);
          return (
            this.pushDiagnostic1(
              r,
              n.childAt(0),
              e.DiagnosticCode.Modifiers_cannot_appear_here
            ),
            !0
          );
        }
        return !1;
      }),
      (n.prototype.visitFunctionDeclaration = function (n) {
        if (
          this.checkForDisallowedDeclareModifier(n.modifiers) ||
          this.checkForDisallowedModifiers(n, n.modifiers) ||
          this.checkForRequiredDeclareModifier(
            n,
            n.functionKeyword,
            n.modifiers
          ) ||
          this.checkModuleElementModifiers(n.modifiers)
        )
          return this.skip(n), void 0;
        var r = this.inAmbientDeclaration;
        (this.inAmbientDeclaration =
          this.inAmbientDeclaration ||
          this.syntaxTree.isDeclaration() ||
          e.SyntaxUtilities.containsToken(n.modifiers, 63)),
          t.prototype.visitFunctionDeclaration.call(this, n),
          (this.inAmbientDeclaration = r);
      }),
      (n.prototype.visitVariableStatement = function (n) {
        if (
          this.checkForDisallowedDeclareModifier(n.modifiers) ||
          this.checkForDisallowedModifiers(n, n.modifiers) ||
          this.checkForRequiredDeclareModifier(
            n,
            n.variableDeclaration,
            n.modifiers
          ) ||
          this.checkModuleElementModifiers(n.modifiers)
        )
          return this.skip(n), void 0;
        var r = this.inAmbientDeclaration;
        (this.inAmbientDeclaration =
          this.inAmbientDeclaration ||
          this.syntaxTree.isDeclaration() ||
          e.SyntaxUtilities.containsToken(n.modifiers, 63)),
          t.prototype.visitVariableStatement.call(this, n),
          (this.inAmbientDeclaration = r);
      }),
      (n.prototype.checkListSeparators = function (t, n, r) {
        for (
          var i = this.childFullStart(t, n), o = 0, s = n.childCount();
          s > o;
          o++
        ) {
          var a = n.childAt(o);
          o % 2 === 1 &&
            a.kind() !== r &&
            this.pushDiagnostic1(i, a, e.DiagnosticCode._0_expected, [
              e.SyntaxFacts.getText(r),
            ]),
            (i += a.fullWidth());
        }
        return !1;
      }),
      (n.prototype.visitObjectType = function (e) {
        if (this.checkListSeparators(e, e.typeMembers, 78))
          return this.skip(e), void 0;
        var n = this.inAmbientDeclaration;
        (this.inAmbientDeclaration = !0),
          t.prototype.visitObjectType.call(this, e),
          (this.inAmbientDeclaration = n);
      }),
      (n.prototype.visitArrayType = function (e) {
        var n = this.inAmbientDeclaration;
        (this.inAmbientDeclaration = !0),
          t.prototype.visitArrayType.call(this, e),
          (this.inAmbientDeclaration = n);
      }),
      (n.prototype.visitFunctionType = function (e) {
        var n = this.inAmbientDeclaration;
        (this.inAmbientDeclaration = !0),
          t.prototype.visitFunctionType.call(this, e),
          (this.inAmbientDeclaration = n);
      }),
      (n.prototype.visitConstructorType = function (e) {
        var n = this.inAmbientDeclaration;
        (this.inAmbientDeclaration = !0),
          t.prototype.visitConstructorType.call(this, e),
          (this.inAmbientDeclaration = n);
      }),
      (n.prototype.visitVariableDeclarator = function (n) {
        return this.inAmbientDeclaration && n.equalsValueClause
          ? (this.pushDiagnostic1(
              this.childFullStart(n, n.equalsValueClause),
              n.equalsValueClause.firstToken(),
              e.DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts
            ),
            this.skip(n),
            void 0)
          : (t.prototype.visitVariableDeclarator.call(this, n), void 0);
      }),
      (n.prototype.visitConstructorDeclaration = function (e) {
        if (
          this.checkClassElementModifiers(e.modifiers) ||
          this.checkConstructorModifiers(e.modifiers) ||
          this.checkConstructorTypeParameterList(e) ||
          this.checkConstructorTypeAnnotation(e)
        )
          return this.skip(e), void 0;
        var n = this.currentConstructor;
        (this.currentConstructor = e),
          t.prototype.visitConstructorDeclaration.call(this, e),
          (this.currentConstructor = n);
      }),
      (n.prototype.checkConstructorModifiers = function (t) {
        for (var n = this.position(), r = 0, i = t.childCount(); i > r; r++) {
          var o = t.childAt(r);
          if (57 !== o.kind())
            return (
              this.pushDiagnostic1(
                n,
                o,
                e.DiagnosticCode
                  ._0_modifier_cannot_appear_on_a_constructor_declaration,
                [e.SyntaxFacts.getText(o.kind())]
              ),
              !0
            );
          n += o.fullWidth();
        }
        return !1;
      }),
      (n.prototype.checkConstructorTypeParameterList = function (t) {
        this.position();
        if (t.callSignature.typeParameterList) {
          {
            var n = this.childFullStart(t, t.callSignature);
            n +
              e.Syntax.childOffset(
                t.callSignature,
                t.callSignature.typeAnnotation
              );
          }
          return (
            this.pushDiagnostic1(
              n,
              t.callSignature.typeParameterList,
              e.DiagnosticCode
                .Type_parameters_cannot_appear_on_a_constructor_declaration
            ),
            !0
          );
        }
        return !1;
      }),
      (n.prototype.checkConstructorTypeAnnotation = function (t) {
        this.position();
        if (t.callSignature.typeAnnotation) {
          var n = this.childFullStart(t, t.callSignature),
            r =
              n +
              e.Syntax.childOffset(
                t.callSignature,
                t.callSignature.typeAnnotation
              );
          return (
            this.pushDiagnostic1(
              r,
              t.callSignature.typeAnnotation,
              e.DiagnosticCode
                .Type_annotation_cannot_appear_on_a_constructor_declaration
            ),
            !0
          );
        }
        return !1;
      }),
      (n.prototype.visitSourceUnit = function (e) {
        return this.checkFunctionOverloads(e, e.moduleElements) ||
          this.checkForDisallowedExports(e, e.moduleElements) ||
          this.checkForMultipleExportAssignments(e, e.moduleElements)
          ? (this.skip(e), void 0)
          : (t.prototype.visitSourceUnit.call(this, e), void 0);
      }),
      n
    );
  })(e.PositionTrackingWalker);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {}
    return (
      (t.lookupInUnicodeMap = function (e, t) {
        if (e < t[0]) return !1;
        for (var n, r = 0, i = t.length; i > r + 1; ) {
          if (((n = r + (i - r) / 2), (n -= n % 2), t[n] <= e && e <= t[n + 1]))
            return !0;
          e < t[n] ? (i = n) : (r = n + 2);
        }
        return !1;
      }),
      (t.isIdentifierStart = function (n, r) {
        if (0 === r)
          return t.lookupInUnicodeMap(n, t.unicodeES3IdentifierStart);
        if (1 === r)
          return t.lookupInUnicodeMap(n, t.unicodeES5IdentifierStart);
        throw e.Errors.argumentOutOfRange("languageVersion");
      }),
      (t.isIdentifierPart = function (n, r) {
        if (0 === r) return t.lookupInUnicodeMap(n, t.unicodeES3IdentifierPart);
        if (1 === r) return t.lookupInUnicodeMap(n, t.unicodeES5IdentifierPart);
        throw e.Errors.argumentOutOfRange("languageVersion");
      }),
      (t.unicodeES3IdentifierStart = [
        170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        543,
        546,
        563,
        592,
        685,
        688,
        696,
        699,
        705,
        720,
        721,
        736,
        740,
        750,
        750,
        890,
        890,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        974,
        976,
        983,
        986,
        1011,
        1024,
        1153,
        1164,
        1220,
        1223,
        1224,
        1227,
        1228,
        1232,
        1269,
        1272,
        1273,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1488,
        1514,
        1520,
        1522,
        1569,
        1594,
        1600,
        1610,
        1649,
        1747,
        1749,
        1749,
        1765,
        1766,
        1786,
        1788,
        1808,
        1808,
        1810,
        1836,
        1920,
        1957,
        2309,
        2361,
        2365,
        2365,
        2384,
        2384,
        2392,
        2401,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2524,
        2525,
        2527,
        2529,
        2544,
        2545,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2649,
        2652,
        2654,
        2654,
        2674,
        2676,
        2693,
        2699,
        2701,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2749,
        2749,
        2768,
        2768,
        2784,
        2784,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2870,
        2873,
        2877,
        2877,
        2908,
        2909,
        2911,
        2913,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        2997,
        2999,
        3001,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3168,
        3169,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3294,
        3294,
        3296,
        3297,
        3333,
        3340,
        3342,
        3344,
        3346,
        3368,
        3370,
        3385,
        3424,
        3425,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3585,
        3632,
        3634,
        3635,
        3648,
        3654,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3760,
        3762,
        3763,
        3773,
        3773,
        3776,
        3780,
        3782,
        3782,
        3804,
        3805,
        3840,
        3840,
        3904,
        3911,
        3913,
        3946,
        3976,
        3979,
        4096,
        4129,
        4131,
        4135,
        4137,
        4138,
        4176,
        4181,
        4256,
        4293,
        4304,
        4342,
        4352,
        4441,
        4447,
        4514,
        4520,
        4601,
        4608,
        4614,
        4616,
        4678,
        4680,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4742,
        4744,
        4744,
        4746,
        4749,
        4752,
        4782,
        4784,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4814,
        4816,
        4822,
        4824,
        4846,
        4848,
        4878,
        4880,
        4880,
        4882,
        4885,
        4888,
        4894,
        4896,
        4934,
        4936,
        4954,
        5024,
        5108,
        5121,
        5740,
        5743,
        5750,
        5761,
        5786,
        5792,
        5866,
        6016,
        6067,
        6176,
        6263,
        6272,
        6312,
        7680,
        7835,
        7840,
        7929,
        7936,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8319,
        8319,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8497,
        8499,
        8505,
        8544,
        8579,
        12293,
        12295,
        12321,
        12329,
        12337,
        12341,
        12344,
        12346,
        12353,
        12436,
        12445,
        12446,
        12449,
        12538,
        12540,
        12542,
        12549,
        12588,
        12593,
        12686,
        12704,
        12727,
        13312,
        19893,
        19968,
        40869,
        40960,
        42124,
        44032,
        55203,
        63744,
        64045,
        64256,
        64262,
        64275,
        64279,
        64285,
        64285,
        64287,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65136,
        65138,
        65140,
        65140,
        65142,
        65276,
        65313,
        65338,
        65345,
        65370,
        65382,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500,
      ]),
      (t.unicodeES3IdentifierPart = [
        170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        543,
        546,
        563,
        592,
        685,
        688,
        696,
        699,
        705,
        720,
        721,
        736,
        740,
        750,
        750,
        768,
        846,
        864,
        866,
        890,
        890,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        974,
        976,
        983,
        986,
        1011,
        1024,
        1153,
        1155,
        1158,
        1164,
        1220,
        1223,
        1224,
        1227,
        1228,
        1232,
        1269,
        1272,
        1273,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1425,
        1441,
        1443,
        1465,
        1467,
        1469,
        1471,
        1471,
        1473,
        1474,
        1476,
        1476,
        1488,
        1514,
        1520,
        1522,
        1569,
        1594,
        1600,
        1621,
        1632,
        1641,
        1648,
        1747,
        1749,
        1756,
        1759,
        1768,
        1770,
        1773,
        1776,
        1788,
        1808,
        1836,
        1840,
        1866,
        1920,
        1968,
        2305,
        2307,
        2309,
        2361,
        2364,
        2381,
        2384,
        2388,
        2392,
        2403,
        2406,
        2415,
        2433,
        2435,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2492,
        2492,
        2494,
        2500,
        2503,
        2504,
        2507,
        2509,
        2519,
        2519,
        2524,
        2525,
        2527,
        2531,
        2534,
        2545,
        2562,
        2562,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2620,
        2620,
        2622,
        2626,
        2631,
        2632,
        2635,
        2637,
        2649,
        2652,
        2654,
        2654,
        2662,
        2676,
        2689,
        2691,
        2693,
        2699,
        2701,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2748,
        2757,
        2759,
        2761,
        2763,
        2765,
        2768,
        2768,
        2784,
        2784,
        2790,
        2799,
        2817,
        2819,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2870,
        2873,
        2876,
        2883,
        2887,
        2888,
        2891,
        2893,
        2902,
        2903,
        2908,
        2909,
        2911,
        2913,
        2918,
        2927,
        2946,
        2947,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        2997,
        2999,
        3001,
        3006,
        3010,
        3014,
        3016,
        3018,
        3021,
        3031,
        3031,
        3047,
        3055,
        3073,
        3075,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3134,
        3140,
        3142,
        3144,
        3146,
        3149,
        3157,
        3158,
        3168,
        3169,
        3174,
        3183,
        3202,
        3203,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3262,
        3268,
        3270,
        3272,
        3274,
        3277,
        3285,
        3286,
        3294,
        3294,
        3296,
        3297,
        3302,
        3311,
        3330,
        3331,
        3333,
        3340,
        3342,
        3344,
        3346,
        3368,
        3370,
        3385,
        3390,
        3395,
        3398,
        3400,
        3402,
        3405,
        3415,
        3415,
        3424,
        3425,
        3430,
        3439,
        3458,
        3459,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3530,
        3530,
        3535,
        3540,
        3542,
        3542,
        3544,
        3551,
        3570,
        3571,
        3585,
        3642,
        3648,
        3662,
        3664,
        3673,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3769,
        3771,
        3773,
        3776,
        3780,
        3782,
        3782,
        3784,
        3789,
        3792,
        3801,
        3804,
        3805,
        3840,
        3840,
        3864,
        3865,
        3872,
        3881,
        3893,
        3893,
        3895,
        3895,
        3897,
        3897,
        3902,
        3911,
        3913,
        3946,
        3953,
        3972,
        3974,
        3979,
        3984,
        3991,
        3993,
        4028,
        4038,
        4038,
        4096,
        4129,
        4131,
        4135,
        4137,
        4138,
        4140,
        4146,
        4150,
        4153,
        4160,
        4169,
        4176,
        4185,
        4256,
        4293,
        4304,
        4342,
        4352,
        4441,
        4447,
        4514,
        4520,
        4601,
        4608,
        4614,
        4616,
        4678,
        4680,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4742,
        4744,
        4744,
        4746,
        4749,
        4752,
        4782,
        4784,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4814,
        4816,
        4822,
        4824,
        4846,
        4848,
        4878,
        4880,
        4880,
        4882,
        4885,
        4888,
        4894,
        4896,
        4934,
        4936,
        4954,
        4969,
        4977,
        5024,
        5108,
        5121,
        5740,
        5743,
        5750,
        5761,
        5786,
        5792,
        5866,
        6016,
        6099,
        6112,
        6121,
        6160,
        6169,
        6176,
        6263,
        6272,
        6313,
        7680,
        7835,
        7840,
        7929,
        7936,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8255,
        8256,
        8319,
        8319,
        8400,
        8412,
        8417,
        8417,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8497,
        8499,
        8505,
        8544,
        8579,
        12293,
        12295,
        12321,
        12335,
        12337,
        12341,
        12344,
        12346,
        12353,
        12436,
        12441,
        12442,
        12445,
        12446,
        12449,
        12542,
        12549,
        12588,
        12593,
        12686,
        12704,
        12727,
        13312,
        19893,
        19968,
        40869,
        40960,
        42124,
        44032,
        55203,
        63744,
        64045,
        64256,
        64262,
        64275,
        64279,
        64285,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65056,
        65059,
        65075,
        65076,
        65101,
        65103,
        65136,
        65138,
        65140,
        65140,
        65142,
        65276,
        65296,
        65305,
        65313,
        65338,
        65343,
        65343,
        65345,
        65370,
        65381,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500,
      ]),
      (t.unicodeES5IdentifierStart = [
        170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        705,
        710,
        721,
        736,
        740,
        748,
        748,
        750,
        750,
        880,
        884,
        886,
        887,
        890,
        893,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        1013,
        1015,
        1153,
        1162,
        1319,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1488,
        1514,
        1520,
        1522,
        1568,
        1610,
        1646,
        1647,
        1649,
        1747,
        1749,
        1749,
        1765,
        1766,
        1774,
        1775,
        1786,
        1788,
        1791,
        1791,
        1808,
        1808,
        1810,
        1839,
        1869,
        1957,
        1969,
        1969,
        1994,
        2026,
        2036,
        2037,
        2042,
        2042,
        2048,
        2069,
        2074,
        2074,
        2084,
        2084,
        2088,
        2088,
        2112,
        2136,
        2208,
        2208,
        2210,
        2220,
        2308,
        2361,
        2365,
        2365,
        2384,
        2384,
        2392,
        2401,
        2417,
        2423,
        2425,
        2431,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2493,
        2493,
        2510,
        2510,
        2524,
        2525,
        2527,
        2529,
        2544,
        2545,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2649,
        2652,
        2654,
        2654,
        2674,
        2676,
        2693,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2749,
        2749,
        2768,
        2768,
        2784,
        2785,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2869,
        2873,
        2877,
        2877,
        2908,
        2909,
        2911,
        2913,
        2929,
        2929,
        2947,
        2947,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        3001,
        3024,
        3024,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3133,
        3133,
        3160,
        3161,
        3168,
        3169,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3261,
        3261,
        3294,
        3294,
        3296,
        3297,
        3313,
        3314,
        3333,
        3340,
        3342,
        3344,
        3346,
        3386,
        3389,
        3389,
        3406,
        3406,
        3424,
        3425,
        3450,
        3455,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3585,
        3632,
        3634,
        3635,
        3648,
        3654,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3760,
        3762,
        3763,
        3773,
        3773,
        3776,
        3780,
        3782,
        3782,
        3804,
        3807,
        3840,
        3840,
        3904,
        3911,
        3913,
        3948,
        3976,
        3980,
        4096,
        4138,
        4159,
        4159,
        4176,
        4181,
        4186,
        4189,
        4193,
        4193,
        4197,
        4198,
        4206,
        4208,
        4213,
        4225,
        4238,
        4238,
        4256,
        4293,
        4295,
        4295,
        4301,
        4301,
        4304,
        4346,
        4348,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4744,
        4746,
        4749,
        4752,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4822,
        4824,
        4880,
        4882,
        4885,
        4888,
        4954,
        4992,
        5007,
        5024,
        5108,
        5121,
        5740,
        5743,
        5759,
        5761,
        5786,
        5792,
        5866,
        5870,
        5872,
        5888,
        5900,
        5902,
        5905,
        5920,
        5937,
        5952,
        5969,
        5984,
        5996,
        5998,
        6e3,
        6016,
        6067,
        6103,
        6103,
        6108,
        6108,
        6176,
        6263,
        6272,
        6312,
        6314,
        6314,
        6320,
        6389,
        6400,
        6428,
        6480,
        6509,
        6512,
        6516,
        6528,
        6571,
        6593,
        6599,
        6656,
        6678,
        6688,
        6740,
        6823,
        6823,
        6917,
        6963,
        6981,
        6987,
        7043,
        7072,
        7086,
        7087,
        7098,
        7141,
        7168,
        7203,
        7245,
        7247,
        7258,
        7293,
        7401,
        7404,
        7406,
        7409,
        7413,
        7414,
        7424,
        7615,
        7680,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8305,
        8305,
        8319,
        8319,
        8336,
        8348,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8505,
        8508,
        8511,
        8517,
        8521,
        8526,
        8526,
        8544,
        8584,
        11264,
        11310,
        11312,
        11358,
        11360,
        11492,
        11499,
        11502,
        11506,
        11507,
        11520,
        11557,
        11559,
        11559,
        11565,
        11565,
        11568,
        11623,
        11631,
        11631,
        11648,
        11670,
        11680,
        11686,
        11688,
        11694,
        11696,
        11702,
        11704,
        11710,
        11712,
        11718,
        11720,
        11726,
        11728,
        11734,
        11736,
        11742,
        11823,
        11823,
        12293,
        12295,
        12321,
        12329,
        12337,
        12341,
        12344,
        12348,
        12353,
        12438,
        12445,
        12447,
        12449,
        12538,
        12540,
        12543,
        12549,
        12589,
        12593,
        12686,
        12704,
        12730,
        12784,
        12799,
        13312,
        19893,
        19968,
        40908,
        40960,
        42124,
        42192,
        42237,
        42240,
        42508,
        42512,
        42527,
        42538,
        42539,
        42560,
        42606,
        42623,
        42647,
        42656,
        42735,
        42775,
        42783,
        42786,
        42888,
        42891,
        42894,
        42896,
        42899,
        42912,
        42922,
        43e3,
        43009,
        43011,
        43013,
        43015,
        43018,
        43020,
        43042,
        43072,
        43123,
        43138,
        43187,
        43250,
        43255,
        43259,
        43259,
        43274,
        43301,
        43312,
        43334,
        43360,
        43388,
        43396,
        43442,
        43471,
        43471,
        43520,
        43560,
        43584,
        43586,
        43588,
        43595,
        43616,
        43638,
        43642,
        43642,
        43648,
        43695,
        43697,
        43697,
        43701,
        43702,
        43705,
        43709,
        43712,
        43712,
        43714,
        43714,
        43739,
        43741,
        43744,
        43754,
        43762,
        43764,
        43777,
        43782,
        43785,
        43790,
        43793,
        43798,
        43808,
        43814,
        43816,
        43822,
        43968,
        44002,
        44032,
        55203,
        55216,
        55238,
        55243,
        55291,
        63744,
        64109,
        64112,
        64217,
        64256,
        64262,
        64275,
        64279,
        64285,
        64285,
        64287,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65136,
        65140,
        65142,
        65276,
        65313,
        65338,
        65345,
        65370,
        65382,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500,
      ]),
      (t.unicodeES5IdentifierPart = [
        170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        705,
        710,
        721,
        736,
        740,
        748,
        748,
        750,
        750,
        768,
        884,
        886,
        887,
        890,
        893,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        1013,
        1015,
        1153,
        1155,
        1159,
        1162,
        1319,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1425,
        1469,
        1471,
        1471,
        1473,
        1474,
        1476,
        1477,
        1479,
        1479,
        1488,
        1514,
        1520,
        1522,
        1552,
        1562,
        1568,
        1641,
        1646,
        1747,
        1749,
        1756,
        1759,
        1768,
        1770,
        1788,
        1791,
        1791,
        1808,
        1866,
        1869,
        1969,
        1984,
        2037,
        2042,
        2042,
        2048,
        2093,
        2112,
        2139,
        2208,
        2208,
        2210,
        2220,
        2276,
        2302,
        2304,
        2403,
        2406,
        2415,
        2417,
        2423,
        2425,
        2431,
        2433,
        2435,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2492,
        2500,
        2503,
        2504,
        2507,
        2510,
        2519,
        2519,
        2524,
        2525,
        2527,
        2531,
        2534,
        2545,
        2561,
        2563,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2620,
        2620,
        2622,
        2626,
        2631,
        2632,
        2635,
        2637,
        2641,
        2641,
        2649,
        2652,
        2654,
        2654,
        2662,
        2677,
        2689,
        2691,
        2693,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2748,
        2757,
        2759,
        2761,
        2763,
        2765,
        2768,
        2768,
        2784,
        2787,
        2790,
        2799,
        2817,
        2819,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2869,
        2873,
        2876,
        2884,
        2887,
        2888,
        2891,
        2893,
        2902,
        2903,
        2908,
        2909,
        2911,
        2915,
        2918,
        2927,
        2929,
        2929,
        2946,
        2947,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        3001,
        3006,
        3010,
        3014,
        3016,
        3018,
        3021,
        3024,
        3024,
        3031,
        3031,
        3046,
        3055,
        3073,
        3075,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3133,
        3140,
        3142,
        3144,
        3146,
        3149,
        3157,
        3158,
        3160,
        3161,
        3168,
        3171,
        3174,
        3183,
        3202,
        3203,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3260,
        3268,
        3270,
        3272,
        3274,
        3277,
        3285,
        3286,
        3294,
        3294,
        3296,
        3299,
        3302,
        3311,
        3313,
        3314,
        3330,
        3331,
        3333,
        3340,
        3342,
        3344,
        3346,
        3386,
        3389,
        3396,
        3398,
        3400,
        3402,
        3406,
        3415,
        3415,
        3424,
        3427,
        3430,
        3439,
        3450,
        3455,
        3458,
        3459,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3530,
        3530,
        3535,
        3540,
        3542,
        3542,
        3544,
        3551,
        3570,
        3571,
        3585,
        3642,
        3648,
        3662,
        3664,
        3673,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3769,
        3771,
        3773,
        3776,
        3780,
        3782,
        3782,
        3784,
        3789,
        3792,
        3801,
        3804,
        3807,
        3840,
        3840,
        3864,
        3865,
        3872,
        3881,
        3893,
        3893,
        3895,
        3895,
        3897,
        3897,
        3902,
        3911,
        3913,
        3948,
        3953,
        3972,
        3974,
        3991,
        3993,
        4028,
        4038,
        4038,
        4096,
        4169,
        4176,
        4253,
        4256,
        4293,
        4295,
        4295,
        4301,
        4301,
        4304,
        4346,
        4348,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4744,
        4746,
        4749,
        4752,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4822,
        4824,
        4880,
        4882,
        4885,
        4888,
        4954,
        4957,
        4959,
        4992,
        5007,
        5024,
        5108,
        5121,
        5740,
        5743,
        5759,
        5761,
        5786,
        5792,
        5866,
        5870,
        5872,
        5888,
        5900,
        5902,
        5908,
        5920,
        5940,
        5952,
        5971,
        5984,
        5996,
        5998,
        6e3,
        6002,
        6003,
        6016,
        6099,
        6103,
        6103,
        6108,
        6109,
        6112,
        6121,
        6155,
        6157,
        6160,
        6169,
        6176,
        6263,
        6272,
        6314,
        6320,
        6389,
        6400,
        6428,
        6432,
        6443,
        6448,
        6459,
        6470,
        6509,
        6512,
        6516,
        6528,
        6571,
        6576,
        6601,
        6608,
        6617,
        6656,
        6683,
        6688,
        6750,
        6752,
        6780,
        6783,
        6793,
        6800,
        6809,
        6823,
        6823,
        6912,
        6987,
        6992,
        7001,
        7019,
        7027,
        7040,
        7155,
        7168,
        7223,
        7232,
        7241,
        7245,
        7293,
        7376,
        7378,
        7380,
        7414,
        7424,
        7654,
        7676,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8204,
        8205,
        8255,
        8256,
        8276,
        8276,
        8305,
        8305,
        8319,
        8319,
        8336,
        8348,
        8400,
        8412,
        8417,
        8417,
        8421,
        8432,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8505,
        8508,
        8511,
        8517,
        8521,
        8526,
        8526,
        8544,
        8584,
        11264,
        11310,
        11312,
        11358,
        11360,
        11492,
        11499,
        11507,
        11520,
        11557,
        11559,
        11559,
        11565,
        11565,
        11568,
        11623,
        11631,
        11631,
        11647,
        11670,
        11680,
        11686,
        11688,
        11694,
        11696,
        11702,
        11704,
        11710,
        11712,
        11718,
        11720,
        11726,
        11728,
        11734,
        11736,
        11742,
        11744,
        11775,
        11823,
        11823,
        12293,
        12295,
        12321,
        12335,
        12337,
        12341,
        12344,
        12348,
        12353,
        12438,
        12441,
        12442,
        12445,
        12447,
        12449,
        12538,
        12540,
        12543,
        12549,
        12589,
        12593,
        12686,
        12704,
        12730,
        12784,
        12799,
        13312,
        19893,
        19968,
        40908,
        40960,
        42124,
        42192,
        42237,
        42240,
        42508,
        42512,
        42539,
        42560,
        42607,
        42612,
        42621,
        42623,
        42647,
        42655,
        42737,
        42775,
        42783,
        42786,
        42888,
        42891,
        42894,
        42896,
        42899,
        42912,
        42922,
        43e3,
        43047,
        43072,
        43123,
        43136,
        43204,
        43216,
        43225,
        43232,
        43255,
        43259,
        43259,
        43264,
        43309,
        43312,
        43347,
        43360,
        43388,
        43392,
        43456,
        43471,
        43481,
        43520,
        43574,
        43584,
        43597,
        43600,
        43609,
        43616,
        43638,
        43642,
        43643,
        43648,
        43714,
        43739,
        43741,
        43744,
        43759,
        43762,
        43766,
        43777,
        43782,
        43785,
        43790,
        43793,
        43798,
        43808,
        43814,
        43816,
        43822,
        43968,
        44010,
        44012,
        44013,
        44016,
        44025,
        44032,
        55203,
        55216,
        55238,
        55243,
        55291,
        63744,
        64109,
        64112,
        64217,
        64256,
        64262,
        64275,
        64279,
        64285,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65024,
        65039,
        65056,
        65062,
        65075,
        65076,
        65101,
        65103,
        65136,
        65140,
        65142,
        65276,
        65296,
        65305,
        65313,
        65338,
        65343,
        65343,
        65345,
        65370,
        65382,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500,
      ]),
      t
    );
  })();
  e.Unicode = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e, t, n) {
    var r = new Date().getTime(),
      i = n(),
      o = new Date().getTime();
    return (
      e.information() && e.log(t + " completed in " + (o - r) + " msec"), i
    );
  }
  !(function (e) {
    function t(t) {
      e.diagnosticWriter && e.diagnosticWriter.Alert(t);
    }
    function n(n) {
      e.debug && t(n);
    }
    function r(n, r) {
      e.debug && (n || t(r));
    }
    (e.debug = !1),
      (e.diagnosticWriter = null),
      (e.analysisPass = 0),
      (e.Alert = t),
      (e.debugPrint = n),
      (e.assert = r);
  })(e.CompilerDiagnostics || (e.CompilerDiagnostics = {}));
  var n =
    (e.CompilerDiagnostics,
    (function () {
      function e() {}
      return (
        (e.prototype.information = function () {
          return !1;
        }),
        (e.prototype.debug = function () {
          return !1;
        }),
        (e.prototype.warning = function () {
          return !1;
        }),
        (e.prototype.error = function () {
          return !1;
        }),
        (e.prototype.fatal = function () {
          return !1;
        }),
        (e.prototype.log = function () {}),
        e
      );
    })());
  (e.NullLogger = n), (e.timeFunction = t);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e, t, n, r, i, o, s, a, l, c) {
      (this._compiler = e),
        (this._semanticInfoChain = t),
        (this.fileName = n),
        (this.referencedFiles = r),
        (this._scriptSnapshot = i),
        (this.byteOrderMark = o),
        (this.version = s),
        (this.isOpen = a),
        (this._syntaxTree = l),
        (this._topLevelDecl = c),
        (this._diagnostics = null),
        (this._bloomFilter = null),
        (this._sourceUnit = null),
        (this._lineMap = null),
        (this._declASTMap = []),
        (this._astDeclMap = []),
        (this._amdDependencies = void 0),
        (this._externalModuleIndicatorSpan = void 0);
    }
    return (
      (t.prototype.invalidate = function () {
        (this._declASTMap.length = 0),
          (this._astDeclMap.length = 0),
          (this._topLevelDecl = null),
          (this._syntaxTree = null),
          (this._sourceUnit = null),
          (this._diagnostics = null),
          (this._bloomFilter = null);
      }),
      (t.prototype.isDeclareFile = function () {
        return e.isDTSFile(this.fileName);
      }),
      (t.prototype.cacheSyntaxTreeInfo = function (t) {
        var n = new Date().getTime();
        (this._diagnostics = t.diagnostics()),
          (e.syntaxDiagnosticsTime += new Date().getTime() - n),
          (this._lineMap = t.lineMap());
        var r = t.sourceUnit(),
          i = r.leadingTrivia();
        this._externalModuleIndicatorSpan =
          this.getImplicitImportSpan(i) ||
          this.getTopLevelImportOrExportSpan(r);
        for (var o = [], s = 0, a = i.count(); a > s; s++) {
          var l = i.syntaxTriviaAt(s);
          if (l.isComment()) {
            var c = this.getAmdDependency(l.fullText());
            c && o.push(c);
          }
        }
        this._amdDependencies = o;
      }),
      (t.prototype.getAmdDependency = function (e) {
        var t = /^\/\/\/\s*<amd-dependency\s+path=('|")(.+?)\1/gim,
          n = t.exec(e);
        return n ? n[2] : null;
      }),
      (t.prototype.getImplicitImportSpan = function (e) {
        for (var t = 0, n = 0, r = e.count(); r > n; n++) {
          var i = e.syntaxTriviaAt(n);
          if (i.isComment()) {
            var o = this.getImplicitImportSpanWorker(i, t);
            if (o) return o;
          }
          t += i.fullWidth();
        }
        return null;
      }),
      (t.prototype.getImplicitImportSpanWorker = function (t, n) {
        var r = /^(\/\/\/\s*<implicit-import\s*)*\/>/gim,
          i = r.exec(t.fullText());
        return i ? new e.TextSpan(n, t.fullWidth()) : null;
      }),
      (t.prototype.getTopLevelImportOrExportSpan = function (t) {
        for (
          var n, r = 0, i = 0, o = t.moduleElements.childCount();
          o > i;
          i++
        ) {
          var s = t.moduleElements.childAt(i);
          if (((n = s.firstToken()), null !== n && 47 === n.tokenKind))
            return new e.TextSpan(r + n.leadingTriviaWidth(), n.width());
          if (133 === s.kind()) {
            var a = s;
            if (245 === a.moduleReference.kind())
              return new e.TextSpan(r + a.leadingTriviaWidth(), a.width());
          }
          r += s.fullWidth();
        }
        return null;
      }),
      (t.prototype.sourceUnit = function () {
        if (!this._sourceUnit) {
          var t = new Date().getTime(),
            n = this.syntaxTree();
          (this._sourceUnit = e.SyntaxTreeToAstVisitor.visit(
            n,
            this.fileName,
            this._compiler.compilationSettings(),
            this.isOpen
          )),
            (e.astTranslationTime += new Date().getTime() - t),
            this.isOpen || (this._syntaxTree = null);
        }
        return this._sourceUnit;
      }),
      (t.prototype.diagnostics = function () {
        return (
          null === this._diagnostics &&
            (this.syntaxTree(), e.Debug.assert(this._diagnostics)),
          this._diagnostics
        );
      }),
      (t.prototype.lineMap = function () {
        return (
          null === this._lineMap &&
            (this.syntaxTree(), e.Debug.assert(this._lineMap)),
          this._lineMap
        );
      }),
      (t.prototype.isExternalModule = function () {
        return null !== this.externalModuleIndicatorSpan();
      }),
      (t.prototype.externalModuleIndicatorSpan = function () {
        return (
          void 0 === this._externalModuleIndicatorSpan &&
            (this.syntaxTree(),
            e.Debug.assert(void 0 !== this._externalModuleIndicatorSpan)),
          this._externalModuleIndicatorSpan
        );
      }),
      (t.prototype.amdDependencies = function () {
        return (
          void 0 === this._amdDependencies &&
            (this.syntaxTree(),
            e.Debug.assert(void 0 !== this._amdDependencies)),
          this._amdDependencies
        );
      }),
      (t.prototype.syntaxTree = function () {
        var t = this._syntaxTree;
        if (!t) {
          var n = new Date().getTime();
          (t = e.Parser.parse(
            this.fileName,
            e.SimpleText.fromScriptSnapshot(this._scriptSnapshot),
            e.isDTSFile(this.fileName),
            e.getParseOptions(this._compiler.compilationSettings())
          )),
            (e.syntaxTreeParseTime += new Date().getTime() - n),
            (this.isOpen || !this._sourceUnit) && (this._syntaxTree = t);
        }
        return this.cacheSyntaxTreeInfo(t), t;
      }),
      (t.prototype.bloomFilter = function () {
        if (!this._bloomFilter) {
          var t = e.createIntrinsicsObject(),
            n = function (n) {
              if (e.ASTHelpers.isValidAstNode(n) && 11 === n.kind()) {
                var r = n.valueText();
                t[r] = !0;
              }
            };
          e.getAstWalkerFactory().simpleWalk(this.sourceUnit(), n, null, t);
          var r = 0;
          for (var i in t) t[i] && r++;
          (this._bloomFilter = new e.BloomFilter(r)),
            this._bloomFilter.addKeys(t);
        }
        return this._bloomFilter;
      }),
      (t.prototype.emitToOwnOutputFile = function () {
        return (
          !this._compiler.compilationSettings().outFileOption() ||
          this.isExternalModule()
        );
      }),
      (t.prototype.update = function (n, r, i, o) {
        var s = this._syntaxTree;
        if (null !== o && e.Debug.shouldAssert(1)) {
          var a = this._scriptSnapshot,
            l = n;
          if (
            (e.Debug.assert(
              a.getLength() - o.span().length() + o.newLength() ===
                l.getLength()
            ),
            e.Debug.shouldAssert(3))
          ) {
            var c = a.getText(0, o.span().start()),
              u = l.getText(0, o.span().start());
            e.Debug.assert(c === u);
            var p = a.getText(o.span().end(), a.getLength()),
              h = l.getText(o.newSpan().end(), l.getLength());
            e.Debug.assert(p === h);
          }
        }
        var d = e.SimpleText.fromScriptSnapshot(n),
          m =
            null === o || null === s
              ? e.Parser.parse(
                  this.fileName,
                  d,
                  e.isDTSFile(this.fileName),
                  e.getParseOptions(this._compiler.compilationSettings())
                )
              : e.Parser.incrementalParse(s, o, d);
        return new t(
          this._compiler,
          this._semanticInfoChain,
          this.fileName,
          this.referencedFiles,
          n,
          this.byteOrderMark,
          r,
          i,
          m,
          null
        );
      }),
      (t.create = function (e, n, r, i, o, s, a, l) {
        return new t(e, n, r, l, i, o, s, a, null, null);
      }),
      (t.prototype.topLevelDecl = function () {
        return (
          null === this._topLevelDecl &&
            (this._topLevelDecl = e.DeclarationCreator.create(
              this,
              this._semanticInfoChain,
              this._compiler.compilationSettings()
            )),
          this._topLevelDecl
        );
      }),
      (t.prototype._getDeclForAST = function (e) {
        return this.topLevelDecl(), this._astDeclMap[e.syntaxID()];
      }),
      (t.prototype.getEnclosingDecl = function (e) {
        if (120 === e.kind()) return this._getDeclForAST(e);
        e = e.parent;
        for (var t = null; e && !(t = this._getDeclForAST(e)); ) e = e.parent;
        return t._getEnclosingDeclFromParentDecl();
      }),
      (t.prototype._setDeclForAST = function (t, n) {
        e.Debug.assert(n.fileName() === this.fileName),
          (this._astDeclMap[t.syntaxID()] = n);
      }),
      (t.prototype._getASTForDecl = function (e) {
        return this._declASTMap[e.declID];
      }),
      (t.prototype._setASTForDecl = function (t, n) {
        e.Debug.assert(t.fileName() === this.fileName),
          (this._declASTMap[t.declID] = n);
      }),
      t
    );
  })();
  e.Document = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e, t) {
    return 0 !== (e & t);
  }
  (e.hasFlag = t),
    (function (e) {
      (e[(e.SuccessfulComparison = 0)] = "SuccessfulComparison"),
        (e[(e.RequiredPropertyIsMissing = 2)] = "RequiredPropertyIsMissing"),
        (e[(e.IncompatibleSignatures = 4)] = "IncompatibleSignatures"),
        (e[(e.SourceSignatureHasTooManyParameters = 3)] =
          "SourceSignatureHasTooManyParameters"),
        (e[(e.IncompatibleReturnTypes = 16)] = "IncompatibleReturnTypes"),
        (e[(e.IncompatiblePropertyTypes = 32)] = "IncompatiblePropertyTypes"),
        (e[(e.IncompatibleParameterTypes = 64)] = "IncompatibleParameterTypes"),
        (e[(e.InconsistantPropertyAccesibility = 128)] =
          "InconsistantPropertyAccesibility");
    })(e.TypeRelationshipFlags || (e.TypeRelationshipFlags = {}));
  e.TypeRelationshipFlags;
  !(function (e) {
    (e[(e.Unspecified = 0)] = "Unspecified"),
      (e[(e.Synchronous = 1)] = "Synchronous"),
      (e[(e.Asynchronous = 2)] = "Asynchronous");
  })(e.ModuleGenTarget || (e.ModuleGenTarget = {}));
  e.ModuleGenTarget;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t() {
    return new r();
  }
  var n = "__proto__",
    r = (function () {
      function e() {
        (this.prototype = void 0),
          (this.toString = void 0),
          (this.toLocaleString = void 0),
          (this.valueOf = void 0),
          (this.hasOwnProperty = void 0),
          (this.propertyIsEnumerable = void 0),
          (this.isPrototypeOf = void 0),
          (this.constructor = void 0),
          (this[n] = null),
          (this[n] = void 0);
      }
      return e;
    })();
  e.createIntrinsicsObject = t;
  var i = (function () {
    function e() {
      (this.itemCount = 0), (this.table = t());
    }
    return (
      (e.prototype.getAllKeys = function () {
        var e = [];
        for (var t in this.table) void 0 !== this.table[t] && e.push(t);
        return e;
      }),
      (e.prototype.add = function (e, t) {
        return void 0 !== this.table[e]
          ? !1
          : ((this.table[e] = t), this.itemCount++, !0);
      }),
      (e.prototype.addOrUpdate = function (e, t) {
        return void 0 !== this.table[e]
          ? ((this.table[e] = t), !1)
          : ((this.table[e] = t), this.itemCount++, !0);
      }),
      (e.prototype.map = function (e, t) {
        for (var n in this.table) {
          var r = this.table[n];
          void 0 !== r && e(n, this.table[n], t);
        }
      }),
      (e.prototype.every = function (e, t) {
        for (var n in this.table) {
          var r = this.table[n];
          if (void 0 !== r && !e(n, this.table[n], t)) return !1;
        }
        return !0;
      }),
      (e.prototype.some = function (e, t) {
        for (var n in this.table) {
          var r = this.table[n];
          if (void 0 !== r && e(n, this.table[n], t)) return !0;
        }
        return !1;
      }),
      (e.prototype.count = function () {
        return this.itemCount;
      }),
      (e.prototype.lookup = function (e) {
        var t = this.table[e];
        return void 0 === t ? null : t;
      }),
      (e.prototype.remove = function (e) {
        void 0 !== this.table[e] &&
          ((this.table[e] = void 0), this.itemCount--);
      }),
      e
    );
  })();
  e.StringHashTable = i;
  var o = (function (e) {
    function t() {
      e.apply(this, arguments);
    }
    return (
      __extends(t, e),
      (t.prototype.getAllKeys = function () {
        var t = [];
        return (
          e.prototype.map.call(
            this,
            function (e, n) {
              void 0 !== n && t.push(e.substring(1));
            },
            null
          ),
          t
        );
      }),
      (t.prototype.add = function (t, n) {
        return e.prototype.add.call(this, "#" + t, n);
      }),
      (t.prototype.addOrUpdate = function (t, n) {
        return e.prototype.addOrUpdate.call(this, "#" + t, n);
      }),
      (t.prototype.map = function (t, n) {
        return e.prototype.map.call(
          this,
          function (e, n, r) {
            return t(e.substring(1), n, r);
          },
          n
        );
      }),
      (t.prototype.every = function (t, n) {
        return e.prototype.every.call(
          this,
          function (e, n, r) {
            return t(e.substring(1), n, r);
          },
          n
        );
      }),
      (t.prototype.some = function (t, n) {
        return e.prototype.some.call(
          this,
          function (e, n, r) {
            return t(e.substring(1), n, r);
          },
          n
        );
      }),
      (t.prototype.lookup = function (t) {
        return e.prototype.lookup.call(this, "#" + t);
      }),
      t
    );
  })(i);
  e.IdentiferNameHashTable = o;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(t) {
      return e.isDTSFile(t.fileName()) || i(t.moduleElements);
    }
    function r(t) {
      return e.hasModifier(t.modifiers, 8) || i(t.moduleElements);
    }
    function i(e) {
      for (var t = 0, n = e.childCount(); n > t; t++) {
        var i = e.childAt(t);
        if (130 === i.kind()) {
          if (!r(i)) return !1;
        } else if (128 !== i.kind()) return !1;
      }
      return !0;
    }
    function o(t) {
      return e.hasModifier(t.modifiers, 8) ? !0 : !1;
    }
    function s(e) {
      return e ? (-1 === e.start() || -1 === e.end() ? !1 : !0) : !1;
    }
    function a(t, n, r, i) {
      "undefined" == typeof r && (r = !0), "undefined" == typeof i && (i = !1);
      var o = null,
        a = function (e, a) {
          if (s(e)) {
            var l = 149 === e.kind() && 0 === e.width();
            if (l) a.options.goChildren = !1;
            else {
              var c =
                  i ||
                  11 === e.kind() ||
                  212 === e.kind() ||
                  121 === e.kind() ||
                  224 === e.kind() ||
                  225 === e.kind() ||
                  213 === e.kind() ||
                  n === t.end() + t.trailingTriviaWidth(),
                u = e.start(),
                p = e.end() + (r ? e.trailingTriviaWidth() : 0) + (c ? 1 : 0);
              n >= u &&
                p > n &&
                ((1 !== e.kind() && 2 !== e.kind()) || e.end() > e.start()) &&
                (null === o
                  ? (o = e)
                  : e.start() >= o.start() &&
                    e.end() + (r ? e.trailingTriviaWidth() : 0) <=
                      o.end() + (r ? o.trailingTriviaWidth() : 0) &&
                    (0 !== o.width() || 0 !== e.width()) &&
                    (o = e)),
                (a.options.goChildren = n >= u && p >= n);
            }
          }
        };
      return e.getAstWalkerFactory().walk(t, a), o;
    }
    function l(e) {
      return e
        ? e.firstOrDefault(function (e) {
            return e.typeNames.nonSeparatorCount() > 0 && 230 === e.kind();
          })
        : null;
    }
    function c(e) {
      return e
        ? e.firstOrDefault(function (e) {
            return e.typeNames.nonSeparatorCount() > 0 && 231 === e.kind();
          })
        : null;
    }
    function u(e) {
      return (e && 213 === e.kind()) || (e && 216 === e.kind());
    }
    function p(e) {
      if (!e) return !1;
      for (
        var t = e;
        t && t.parent && 212 === t.parent.kind() && t.parent.name === t;

      )
        t = t.parent;
      return t &&
        t.parent &&
        (213 === t.parent.kind() || 216 === t.parent.kind())
        ? t === t.parent.expression
        : !1;
    }
    function h(e) {
      if (null === e || null === e.parent) return !1;
      if (11 !== e.kind()) return !1;
      switch (e.parent.kind()) {
        case 131:
          return e.parent.identifier === e;
        case 128:
          return e.parent.identifier === e;
        case 132:
          return e.parent.identifier === e;
        case 130:
          return e.parent.name === e || e.parent.stringLiteral === e;
        case 225:
          return e.parent.propertyName === e;
        case 129:
          return e.parent.identifier === e;
        case 135:
          return e.parent.propertyName === e;
        case 242:
          return e.parent.identifier === e;
        case 238:
          return e.parent.identifier === e;
        case 240:
          return e.parent.propertyName === e;
        case 241:
          return e.parent.propertyName === e;
        case 243:
          return e.parent.propertyName === e;
        case 133:
          return e.parent.identifier === e;
      }
      return !1;
    }
    function d(e) {
      return h(e) || k(e);
    }
    function m(e) {
      for (var t = e; t; ) {
        switch (t.kind()) {
          case 232:
            if (t.parent && 242 === t.parent.kind()) return t.parent;
            break;
          case 131:
          case 128:
          case 130:
            return null;
        }
        t = t.parent;
      }
      return null;
    }
    function f(e) {
      for (var t = e; t; ) {
        switch (t.kind()) {
          case 136:
            return t;
          case 131:
          case 128:
          case 130:
            return null;
        }
        t = t.parent;
      }
      return null;
    }
    function g(e) {
      return (
        e &&
        e.parent &&
        11 === e.kind() &&
        129 === e.parent.kind() &&
        e.parent.identifier === e
      );
    }
    function v(e) {
      return (
        e &&
        e.parent &&
        11 === e.kind() &&
        135 === e.parent.kind() &&
        e.parent.propertyName === e
      );
    }
    function y(e) {
      return e && e.parent && 212 === e.parent.kind() && e.parent.name === e
        ? !0
        : !1;
    }
    function b(e) {
      return e && e.parent && 121 === e.parent.kind() && e.parent.right === e
        ? !0
        : !1;
    }
    function _(e) {
      return {
        length: 1,
        lastParameterIsRest: function () {
          return !1;
        },
        ast: e,
        astAt: function () {
          return e;
        },
        identifierAt: function () {
          return e;
        },
        typeAt: function () {
          return null;
        },
        initializerAt: function () {
          return null;
        },
        isOptionalAt: function () {
          return !1;
        },
      };
    }
    function w(e) {
      return {
        length: 1,
        lastParameterIsRest: function () {
          return null !== e.dotDotDotToken;
        },
        ast: e,
        astAt: function () {
          return e;
        },
        identifierAt: function () {
          return e.identifier;
        },
        typeAt: function () {
          return A(e);
        },
        initializerAt: function () {
          return e.equalsValueClause;
        },
        isOptionalAt: function () {
          return S(e);
        },
      };
    }
    function S(e) {
      return null !== e.questionToken || null !== e.equalsValueClause;
    }
    function T(t) {
      return {
        length: t.parameters.nonSeparatorCount(),
        lastParameterIsRest: function () {
          return e.lastParameterIsRest(t);
        },
        ast: t.parameters,
        astAt: function (e) {
          return t.parameters.nonSeparatorAt(e);
        },
        identifierAt: function (e) {
          return t.parameters.nonSeparatorAt(e).identifier;
        },
        typeAt: function (e) {
          return A(t.parameters.nonSeparatorAt(e));
        },
        initializerAt: function (e) {
          return t.parameters.nonSeparatorAt(e).equalsValueClause;
        },
        isOptionalAt: function (e) {
          return S(t.parameters.nonSeparatorAt(e));
        },
      };
    }
    function k(e) {
      switch (e.kind()) {
        case 225:
          return null !== L(e);
        case 133:
        case 131:
        case 128:
        case 242:
        case 219:
        case 218:
        case 144:
        case 129:
        case 130:
        case 124:
        case 122:
        case 238:
        case 137:
        case 135:
        case 139:
        case 140:
        case 136:
        case 138:
        case 132:
        case 243:
        case 240:
        case 241:
        case 222:
        case 142:
        case 143:
        case 145:
        case 141:
          return !0;
        default:
          return !1;
      }
    }
    function x(t) {
      if (k(t)) {
        var n = 225 === t.kind() ? L(t).preComments() : t.preComments();
        if (n && n.length > 0) {
          for (
            var r = n.length, i = new Array(), o = r - 1;
            o >= 0 && C(n[o]);
            o--
          )
            i.push(n[o]);
          return i.reverse();
        }
      }
      return e.sentinelEmptyArray;
    }
    function C(e) {
      if (6 === e.kind()) {
        var t = e.fullText();
        return "*" === t.charAt(2) && "/" !== t.charAt(3);
      }
      return !1;
    }
    function E(e) {
      if (e)
        switch (e.kind()) {
          case 137:
            return E(e.callSignature);
          case 129:
            return E(e.callSignature);
          case 218:
            return E(e.callSignature);
          case 143:
            return E(e.callSignature);
          case 135:
            return E(e.callSignature);
          case 241:
            return E(e.callSignature);
          case 222:
            return E(e.callSignature);
          case 145:
            return E(e.callSignature);
          case 125:
            return e.parameterList;
          case 123:
            return e.parameterList;
          case 142:
            return e.parameterList;
          case 139:
            return e.parameterList;
          case 140:
            return e.parameterList;
        }
      return null;
    }
    function A(e) {
      if (e)
        switch (e.kind()) {
          case 129:
            return A(e.callSignature);
          case 218:
            return A(e.callSignature);
          case 143:
            return A(e.callSignature);
          case 135:
            return A(e.callSignature);
          case 241:
            return A(e.callSignature);
          case 222:
            return A(e.callSignature);
          case 145:
            return A(e.callSignature);
          case 142:
            return A(e.typeAnnotation);
          case 144:
            return A(e.typeAnnotation);
          case 141:
            return A(e.typeAnnotation);
          case 139:
            return A(e.typeAnnotation);
          case 242:
            return A(e.typeAnnotation);
          case 136:
            return A(e.variableDeclarator);
          case 225:
            return A(e.typeAnnotation);
          case 236:
            return A(e.typeAnnotation);
          case 125:
            return e.type;
          case 123:
            return e.type;
          case 244:
            return e.type;
        }
      return null;
    }
    function L(e) {
      return e &&
        e.parent &&
        e.parent.parent &&
        e.parent.parent.parent &&
        2 === e.parent.kind() &&
        224 === e.parent.parent.kind() &&
        148 === e.parent.parent.parent.kind()
        ? e.parent.parent.parent
        : null;
    }
    function I(t) {
      var n = L(t);
      return n ? n.modifiers : e.sentinelEmptyArray;
    }
    function D(t) {
      if (t)
        switch (t.kind()) {
          case 164:
          case 165:
            return (
              (t = t.operand),
              13 === t.kind() && e.IntegerUtilities.isInteger(t.text())
            );
          case 13:
            var n = t.text();
            return (
              e.IntegerUtilities.isInteger(n) ||
              e.IntegerUtilities.isHexInteger(n)
            );
        }
      return !1;
    }
    function P(e) {
      for (; e; ) {
        if (130 === e.kind()) return e;
        e = e.parent;
      }
      return null;
    }
    function N(t, n) {
      if (t) {
        if (t.stringLiteral) return n === t.stringLiteral;
        var r = e.getModuleNames(t.name),
          i = r.indexOf(n);
        return i === r.length - 1;
      }
      return !1;
    }
    function M(t, n) {
      if (t) {
        if (t.stringLiteral) return t.stringLiteral === n;
        var r = e.getModuleNames(t.name),
          i = r.indexOf(n);
        return i >= 0;
      }
      return !1;
    }
    function R(t) {
      if (11 === t.kind()) return t.text();
      e.Debug.assert(121 == t.kind());
      var n = t;
      return R(n.left) + "." + R(n.right);
    }
    (t.scriptIsElided = n),
      (t.moduleIsElided = r),
      (t.enumIsElided = o),
      (t.isValidAstNode = s),
      (t.getAstAtPosition = a),
      (t.getExtendsHeritageClause = l),
      (t.getImplementsHeritageClause = c),
      (t.isCallExpression = u),
      (t.isCallExpressionTarget = p),
      (t.isDeclarationASTOrDeclarationNameAST = d),
      (t.getEnclosingParameterForInitializer = m),
      (t.getEnclosingMemberVariableDeclaration = f),
      (t.isNameOfFunction = g),
      (t.isNameOfMemberFunction = v),
      (t.isNameOfMemberAccessExpression = y),
      (t.isRightSideOfQualifiedName = b),
      (t.parametersFromIdentifier = _),
      (t.parametersFromParameter = w),
      (t.parametersFromParameterList = T),
      (t.isDeclarationAST = k),
      (t.docComments = x),
      (t.getParameterList = E),
      (t.getType = A),
      (t.getVariableDeclaratorModifiers = I),
      (t.isIntegerLiteralAST = D),
      (t.getEnclosingModuleDeclaration = P),
      (t.isLastNameOfModule = N),
      (t.isAnyNameOfModule = M),
      (t.getNameOfIdenfierOrQualifiedName = R);
  })(e.ASTHelpers || (e.ASTHelpers = {}));
  e.ASTHelpers;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e, t) {
    for (var n = 0, r = e.childCount(); r > n; n++) t.walk(e.childAt(n));
  }
  function n(e, t) {
    t.walk(e.expression);
  }
  function r(e, t) {
    t.walk(e.operand);
  }
  function i(e, t) {
    t.walk(e.operand);
  }
  function o(e, t) {
    t.walk(e.expression);
  }
  function s(e, t) {
    t.walk(e.typeArguments);
  }
  function a(e, t) {
    t.walk(e.expression);
  }
  function l(e, t) {
    t.walk(e.expression);
  }
  function c(e, t) {
    t.walk(e.typeArgumentList), t.walk(e.arguments);
  }
  function u(e, t) {
    t.walk(e.expressions);
  }
  function p(e, t) {
    t.walk(e.propertyName), t.walk(e.expression);
  }
  function h(e, t) {
    t.walk(e.propertyName), t.walk(e.callSignature), t.walk(e.block);
  }
  function d(e, t) {
    t.walk(e.propertyName),
      t.walk(e.parameterList),
      t.walk(e.typeAnnotation),
      t.walk(e.block);
  }
  function m(e, t) {
    for (var n = 0, r = e.nonSeparatorCount(); r > n; n++)
      t.walk(e.nonSeparatorAt(n));
  }
  function f(e, t) {
    t.walk(e.propertyName), t.walk(e.parameterList), t.walk(e.block);
  }
  function g(e, t) {
    t.walk(e.propertyAssignments);
  }
  function v(e, t) {
    t.walk(e.type), t.walk(e.expression);
  }
  function y(e, t) {
    t.walk(e.expression);
  }
  function b(e, t) {
    t.walk(e.expression), t.walk(e.argumentExpression);
  }
  function _(e, t) {
    t.walk(e.expression), t.walk(e.name);
  }
  function w(e, t) {
    t.walk(e.left), t.walk(e.right);
  }
  function S(e, t) {
    t.walk(e.left), t.walk(e.right);
  }
  function T(e, t) {
    t.walk(e.value);
  }
  function k(e, t) {
    t.walk(e.identifier), t.walk(e.constraint);
  }
  function x(e, t) {
    t.walk(e.typeParameters);
  }
  function C(e, t) {
    t.walk(e.name), t.walk(e.typeArgumentList);
  }
  function E(e, t) {
    t.walk(e.type);
  }
  function A(e, t) {
    t.walk(e.name);
  }
  function L(e, t) {
    t.walk(e.expression), t.walk(e.argumentList);
  }
  function I(e, t) {
    t.walk(e.expression), t.walk(e.argumentList);
  }
  function D(e, t) {
    t.walk(e.condition), t.walk(e.whenTrue), t.walk(e.whenFalse);
  }
  function P(e, t) {
    t.walk(e.identifier), t.walk(e.callSignature), t.walk(e.block);
  }
  function N(e, t) {
    t.walk(e.typeParameterList), t.walk(e.parameterList), t.walk(e.type);
  }
  function M(e, t) {
    t.walk(e.callSignature), t.walk(e.block), t.walk(e.expression);
  }
  function R(e, t) {
    t.walk(e.identifier), t.walk(e.block), t.walk(e.expression);
  }
  function O(e, t) {
    t.walk(e.propertyName), t.walk(e.callSignature), t.walk(e.block);
  }
  function F(e, t) {
    t.walk(e.identifier), t.walk(e.callSignature), t.walk(e.block);
  }
  function V(e, t) {
    t.walk(e.indexSignature);
  }
  function G(e, t) {
    t.walk(e.parameter), t.walk(e.typeAnnotation);
  }
  function B(e, t) {
    t.walk(e.typeParameterList),
      t.walk(e.parameterList),
      t.walk(e.typeAnnotation);
  }
  function W(e, t) {
    t.walk(e.type);
  }
  function z(e, t) {
    t.walk(e.callSignature), t.walk(e.block);
  }
  function H(e, t) {
    t.walk(e.typeParameterList), t.walk(e.parameterList), t.walk(e.type);
  }
  function $(e, t) {
    t.walk(e.callSignature);
  }
  function U(e, t) {
    t.walk(e.identifier), t.walk(e.typeAnnotation), t.walk(e.equalsValueClause);
  }
  function q(e, t) {
    t.walk(e.parameters);
  }
  function j(e, t) {
    t.walk(e.propertyName), t.walk(e.typeAnnotation);
  }
  function K(e, t) {
    t.walk(e.propertyName),
      t.walk(e.typeAnnotation),
      t.walk(e.equalsValueClause);
  }
  function Y(e, t) {
    t.walk(e.variableDeclarator);
  }
  function X(e, t) {
    t.walk(e.propertyName), t.walk(e.callSignature);
  }
  function J(e, t) {
    t.walk(e.expression);
  }
  function Q(e, t) {
    t.walk(e.variableDeclaration),
      t.walk(e.initializer),
      t.walk(e.condition),
      t.walk(e.incrementor),
      t.walk(e.statement);
  }
  function Z(e, t) {
    t.walk(e.variableDeclaration),
      t.walk(e.left),
      t.walk(e.expression),
      t.walk(e.statement);
  }
  function et(e, t) {
    t.walk(e.condition), t.walk(e.statement), t.walk(e.elseClause);
  }
  function tt(e, t) {
    t.walk(e.statement);
  }
  function nt(e, t) {
    t.walk(e.condition), t.walk(e.statement);
  }
  function rt(e, t) {
    t.walk(e.condition), t.walk(e.statement);
  }
  function it(e, t) {
    t.walk(e.statements);
  }
  function ot(e, t) {
    t.walk(e.declarators);
  }
  function st(e, t) {
    t.walk(e.expression), t.walk(e.statements);
  }
  function at(e, t) {
    t.walk(e.statements);
  }
  function lt(e, t) {
    t.walk(e.expression), t.walk(e.switchClauses);
  }
  function ct(e, t) {
    t.walk(e.block), t.walk(e.catchClause), t.walk(e.finallyClause);
  }
  function ut(e, t) {
    t.walk(e.identifier), t.walk(e.typeAnnotation), t.walk(e.block);
  }
  function pt(e, t) {
    t.walk(e.stringLiteral);
  }
  function ht(e, t) {
    t.walk(e.block);
  }
  function dt(e, t) {
    t.walk(e.identifier),
      t.walk(e.typeParameterList),
      t.walk(e.heritageClauses),
      t.walk(e.classElements);
  }
  function mt(e, t) {
    t.walk(e.moduleElements);
  }
  function ft(e, t) {
    t.walk(e.typeNames);
  }
  function gt(e, t) {
    t.walk(e.identifier),
      t.walk(e.typeParameterList),
      t.walk(e.heritageClauses),
      t.walk(e.body);
  }
  function vt(e, t) {
    t.walk(e.typeMembers);
  }
  function yt(e, t) {
    t.walk(e.type);
  }
  function bt(e, t) {
    t.walk(e.name), t.walk(e.stringLiteral), t.walk(e.moduleElements);
  }
  function _t(e, t) {
    t.walk(e.moduleName);
  }
  function wt(e, t) {
    t.walk(e.identifier), t.walk(e.enumElements);
  }
  function St(e, t) {
    t.walk(e.propertyName), t.walk(e.equalsValueClause);
  }
  function Tt(e, t) {
    t.walk(e.identifier), t.walk(e.moduleReference);
  }
  function kt(e, t) {
    t.walk(e.identifier);
  }
  function xt(e, t) {
    t.walk(e.condition), t.walk(e.statement);
  }
  function Ct(e, t) {
    t.walk(e.expression);
  }
  function Et(e, t) {
    t.walk(e.identifier), t.walk(e.statement);
  }
  function At(e, t) {
    t.walk(e.declaration);
  }
  function Lt() {
    return Gt;
  }
  for (var It = new Array(247), Dt = 9, Pt = 119; Pt >= Dt; Dt++) It[Dt] = null;
  for (var Dt = 4, Pt = 8; Pt >= Dt; Dt++) It[Dt] = null;
  (It[175] = S),
    (It[208] = S),
    (It[180] = S),
    (It[60] = null),
    (It[226] = c),
    (It[214] = u),
    (It[124] = yt),
    (It[219] = R),
    (It[218] = M),
    (It[174] = S),
    (It[191] = S),
    (It[190] = S),
    (It[166] = r),
    (It[189] = S),
    (It[146] = it),
    (It[61] = null),
    (It[152] = null),
    (It[142] = B),
    (It[233] = st),
    (It[220] = v),
    (It[236] = ut),
    (It[131] = dt),
    (It[173] = S),
    (It[186] = D),
    (It[239] = W),
    (It[137] = z),
    (It[143] = $),
    (It[153] = null),
    (It[125] = H),
    (It[162] = null),
    (It[234] = at),
    (It[170] = o),
    (It[178] = S),
    (It[206] = S),
    (It[161] = rt),
    (It[221] = b),
    (It[235] = tt),
    (It[156] = null),
    (It[132] = wt),
    (It[243] = St),
    (It[194] = S),
    (It[232] = T),
    (It[192] = S),
    (It[181] = S),
    (It[134] = kt),
    (It[149] = Ct),
    (It[230] = ft),
    (It[245] = pt),
    (It[24] = null),
    (It[237] = ht),
    (It[155] = Z),
    (It[154] = Q),
    (It[129] = F),
    (It[222] = P),
    (It[241] = h),
    (It[123] = N),
    (It[126] = C),
    (It[139] = d),
    (It[197] = S),
    (It[199] = S),
    (It[147] = et),
    (It[231] = ft),
    (It[133] = Tt),
    (It[138] = V),
    (It[144] = G),
    (It[201] = S),
    (It[200] = S),
    (It[128] = gt),
    (It[213] = L),
    (It[160] = Et),
    (It[183] = S),
    (It[202] = S),
    (It[196] = S),
    (It[198] = S),
    (It[1] = t),
    (It[188] = S),
    (It[167] = r),
    (It[187] = S),
    (It[212] = _),
    (It[135] = O),
    (It[136] = Y),
    (It[145] = X),
    (It[130] = bt),
    (It[246] = _t),
    (It[179] = S),
    (It[207] = S),
    (It[177] = S),
    (It[205] = S),
    (It[11] = null),
    (It[165] = r),
    (It[0] = null),
    (It[195] = S),
    (It[193] = S),
    (It[32] = null),
    (It[67] = null),
    (It[13] = null),
    (It[216] = I),
    (It[215] = g),
    (It[122] = vt),
    (It[223] = null),
    (It[182] = S),
    (It[242] = U),
    (It[227] = q),
    (It[217] = y),
    (It[164] = r),
    (It[211] = i),
    (It[210] = i),
    (It[169] = r),
    (It[168] = r),
    (It[141] = j),
    (It[121] = w),
    (It[12] = null),
    (It[150] = J),
    (It[120] = mt),
    (It[2] = m),
    (It[140] = f),
    (It[184] = S),
    (It[203] = S),
    (It[240] = p),
    (It[14] = null),
    (It[69] = null),
    (It[176] = S),
    (It[209] = S),
    (It[50] = null),
    (It[151] = lt),
    (It[35] = null),
    (It[157] = n),
    (It[3] = null),
    (It[37] = null),
    (It[159] = ct),
    (It[244] = E),
    (It[228] = s),
    (It[171] = a),
    (It[238] = k),
    (It[229] = x),
    (It[127] = A),
    (It[185] = S),
    (It[204] = S),
    (It[224] = ot),
    (It[225] = K),
    (It[148] = At),
    (It[172] = l),
    (It[41] = null),
    (It[158] = nt),
    (It[163] = xt);
  for (var Nt in e.SyntaxKind)
    e.SyntaxKind.hasOwnProperty(Nt) &&
      e.StringUtilities.isString(e.SyntaxKind[Nt]) &&
      e.Debug.assert(void 0 !== It[Nt], "Fix initWalkers: " + e.SyntaxKind[Nt]);
  var Mt = (function () {
    function e() {
      (this.goChildren = !0), (this.stopWalking = !1);
    }
    return e;
  })();
  e.AstWalkOptions = Mt;
  var Rt = (function () {
      function e(e, t) {
        (this.pre = e), (this.state = t), (this.options = new Mt());
      }
      return (
        (e.prototype.walk = function (e) {
          if (e) {
            this.pre(e, this.state);
            var t = It[e.kind()];
            t && t(e, this);
          }
        }),
        e
      );
    })(),
    Ot = (function () {
      function e(e, t, n) {
        (this.pre = e),
          (this.post = t),
          (this.state = n),
          (this.options = new Mt());
      }
      return (
        (e.prototype.walk = function (e) {
          if (e) {
            this.pre(e, this.state);
            var t = It[e.kind()];
            t && t(e, this), this.post(e, this.state);
          }
        }),
        e
      );
    })(),
    Ft = (function () {
      function e(e, t, n) {
        (this.pre = e),
          (this.post = t),
          (this.state = n),
          (this.options = new Mt());
      }
      return (
        (e.prototype.walk = function (e) {
          if (
            e &&
            !this.options.stopWalking &&
            (this.pre(e, this), !this.options.stopWalking)
          ) {
            if (this.options.goChildren) {
              var t = It[e.kind()];
              t && t(e, this);
            } else this.options.goChildren = !0;
            this.post && this.post(e, this);
          }
        }),
        e
      );
    })(),
    Vt = (function () {
      function e() {}
      return (
        (e.prototype.walk = function (e, t, n, r) {
          new Ft(t, n, r).walk(e);
        }),
        (e.prototype.simpleWalk = function (e, t, n, r) {
          n ? new Ot(t, n, r).walk(e) : new Rt(t, r).walk(e);
        }),
        e
      );
    })();
  e.AstWalkerFactory = Vt;
  var Gt = new Vt();
  e.getAstWalkerFactory = Lt;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
      function e() {}
      return (
        (e.encode = function (t) {
          if (64 > t) return e.encodedValues.charAt(t);
          throw TypeError(t + ": not a 64 based value");
        }),
        (e.decodeChar = function (t) {
          if (1 === t.length) return e.encodedValues.indexOf(t);
          throw TypeError('"' + t + '" must have length 1');
        }),
        (e.encodedValues =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),
        e
      );
    })(),
    n = (function () {
      function n() {}
      return (
        (n.encode = function (e) {
          0 > e ? (e = (-e << 1) + 1) : (e <<= 1);
          var n = "";
          do {
            var r = 31 & e;
            (e >>= 5), e > 0 && (r = 32 | r), (n += t.encode(r));
          } while (e > 0);
          return n;
        }),
        (n.decode = function (n) {
          for (var r = 0, i = !1, o = 0, s = 0; s < n.length; s++) {
            var a = t.decodeChar(n[s]);
            if (
              (0 === s
                ? (1 === (1 & a) && (i = !0), (r = (a >> 1) & 15))
                : (r |= (31 & a) << o),
              (o += 0 === s ? 4 : 5),
              32 !== (32 & a))
            )
              return { value: i ? -r : r, rest: n.substr(s + 1) };
          }
          throw new Error(
            e.getDiagnosticMessage(
              e.DiagnosticCode.Base64_value_0_finished_with_a_continuation_bit,
              [n]
            )
          );
        }),
        n
      );
    })();
  e.Base64VLQFormat = n;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {}
    return e;
  })();
  e.SourceMapPosition = t;
  var n = (function () {
    function e() {
      (this.start = new t()),
        (this.end = new t()),
        (this.nameIndex = -1),
        (this.childMappings = []);
    }
    return e;
  })();
  e.SourceMapping = n;
  var r = (function () {
    function t(t, n, r, i, o, s, a) {
      (this.emittedFile = t),
        (this.emittedLine = n),
        (this.emittedColumn = r),
        (this.sourceFile = i),
        (this.sourceLine = o),
        (this.sourceColumn = s),
        (this.sourceName = a),
        e.Debug.assert(isFinite(n)),
        e.Debug.assert(isFinite(r)),
        e.Debug.assert(isFinite(s)),
        e.Debug.assert(isFinite(o));
    }
    return t;
  })();
  e.SourceMapEntry = r;
  var i = (function () {
    function t(e, t, n, r, i, o) {
      (this.jsFile = e),
        (this.sourceMapOut = t),
        (this.names = []),
        (this.mappingLevel = []),
        (this.tsFilePaths = []),
        (this.allSourceMappings = []),
        (this.sourceMapEntries = []),
        this.setSourceMapOptions(n, r, i, o),
        this.setNewSourceFile(n, i);
    }
    return (
      (t.prototype.getOutputFile = function () {
        var e = this.sourceMapOut.getOutputFile();
        return (e.sourceMapEntries = this.sourceMapEntries), e;
      }),
      (t.prototype.increaseMappingLevel = function (e) {
        this.mappingLevel.push(e);
      }),
      (t.prototype.decreaseMappingLevel = function (t) {
        e.Debug.assert(
          this.mappingLevel.length > 0,
          "Mapping level should never be less than 0. This suggests a missing start call."
        );
        var n = this.mappingLevel.pop(),
          r = n.kind ? e.SyntaxKind[n.kind()] : [n.start(), n.end()],
          i = t.kind ? e.SyntaxKind[t.kind()] : [t.start(), t.end()];
        e.Debug.assert(
          t === n,
          "Provided ast is not the expected AST, Expected: " +
            r +
            " Given: " +
            i
        );
      }),
      (t.prototype.setNewSourceFile = function (e, t) {
        var n = [];
        this.allSourceMappings.push(n),
          (this.currentMappings = [n]),
          (this.currentNameIndex = []),
          this.setNewSourceFilePath(e, t);
      }),
      (t.prototype.setSourceMapOptions = function (n, r, i, o) {
        var s = e.getPrettyName(r, !1, !0),
          a = s + t.MapFileExtension;
        (this.jsFileName = s),
          i.sourceMapRootDirectory()
            ? ((this.sourceMapDirectory = i.sourceMapRootDirectory()),
              n.emitToOwnOutputFile() &&
                (this.sourceMapDirectory =
                  this.sourceMapDirectory +
                  e.switchToForwardSlashes(
                    e
                      .getRootFilePath(n.fileName)
                      .replace(i.commonDirectoryPath(), "")
                  )),
              e.isRelative(this.sourceMapDirectory)
                ? ((this.sourceMapDirectory =
                    i.commonDirectoryPath() + this.sourceMapDirectory),
                  (this.sourceMapDirectory = e.convertToDirectoryPath(
                    e.switchToForwardSlashes(o(this.sourceMapDirectory))
                  )),
                  (this.sourceMapPath = e.getRelativePathToFixedPath(
                    e.getRootFilePath(r),
                    this.sourceMapDirectory + a
                  )))
                : (this.sourceMapPath = this.sourceMapDirectory + a))
            : ((this.sourceMapPath = a),
              (this.sourceMapDirectory = e.getRootFilePath(r))),
          (this.sourceRoot = i.sourceRootDirectory());
      }),
      (t.prototype.setNewSourceFilePath = function (t, n) {
        var r = e.switchToForwardSlashes(t.fileName);
        (r = n.sourceRootDirectory()
          ? e.getRelativePathToFixedPath(n.commonDirectoryPath(), r)
          : e.getRelativePathToFixedPath(this.sourceMapDirectory, r)),
          this.tsFilePaths.push(r);
      }),
      (t.prototype.emitSourceMapping = function () {
        var t = this;
        e.Debug.assert(
          0 === this.mappingLevel.length,
          "Mapping level is not 0. This suggest a missing end call. Value: " +
            this.mappingLevel
              .map(function (t) {
                return [
                  "Node of type",
                  e.SyntaxKind[t.kind()],
                  "at",
                  t.start(),
                  "to",
                  t.end(),
                ].join(" ");
              })
              .join(", ")
        ),
          this.jsFile.WriteLine("//# sourceMappingURL=" + this.sourceMapPath);
        for (
          var n = "",
            i = 0,
            o = 0,
            s = 0,
            a = 0,
            l = 0,
            c = 0,
            u = !1,
            p = null,
            h = 0;
          h < this.tsFilePaths.length;
          h++
        ) {
          var d = function (d, m) {
              if (
                null === p ||
                p.emittedColumn !== d.emittedColumn ||
                p.emittedLine !== d.emittedLine
              ) {
                if (o !== d.emittedLine) {
                  for (; o < d.emittedLine; ) (i = 0), (n += ";"), o++;
                  u = !1;
                } else u && (n += ",");
                t.sourceMapEntries.push(
                  new r(
                    t.jsFileName,
                    d.emittedLine + 1,
                    d.emittedColumn + 1,
                    t.tsFilePaths[h],
                    d.sourceLine,
                    d.sourceColumn + 1,
                    m >= 0 ? t.names[m] : void 0
                  )
                ),
                  (n += e.Base64VLQFormat.encode(d.emittedColumn - i)),
                  (i = d.emittedColumn),
                  (n += e.Base64VLQFormat.encode(h - l)),
                  (l = h),
                  (n += e.Base64VLQFormat.encode(d.sourceLine - 1 - a)),
                  (a = d.sourceLine - 1),
                  (n += e.Base64VLQFormat.encode(d.sourceColumn - s)),
                  (s = d.sourceColumn),
                  m >= 0 && ((n += e.Base64VLQFormat.encode(m - c)), (c = m)),
                  (u = !0),
                  (p = d);
              }
            },
            m = function (e) {
              for (var t = 0; t < e.length; t++) {
                var n = e[t];
                d(n.start, n.nameIndex),
                  m(n.childMappings),
                  d(n.end, n.nameIndex);
              }
            };
          m(this.allSourceMappings[h]);
        }
        this.sourceMapOut.Write(
          JSON.stringify({
            version: 3,
            file: this.jsFileName,
            sourceRoot: this.sourceRoot,
            sources: this.tsFilePaths,
            names: this.names,
            mappings: n,
          })
        ),
          this.sourceMapOut.Close();
      }),
      (t.MapFileExtension = ".map"),
      t
    );
  })();
  e.SourceMapper = i;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e) {
    var t = e.parameters;
    return (
      t.nonSeparatorCount() > 0 &&
      null !== t.nonSeparatorAt(t.nonSeparatorCount() - 1).dotDotDotToken
    );
  }
  function n(e) {
    return e.classElements.lastOrDefault(function (e) {
      return 137 === e.kind();
    });
  }
  function r(e) {
    return 6 === e.kind()
      ? e
          .fullText()
          .split("\n")
          .map(function (e) {
            return e.trim();
          })
      : [e.fullText().trim()];
  }
  !(function (e) {
    (e[(e.Prog = 0)] = "Prog"),
      (e[(e.Module = 1)] = "Module"),
      (e[(e.DynamicModule = 2)] = "DynamicModule"),
      (e[(e.Class = 3)] = "Class"),
      (e[(e.Constructor = 4)] = "Constructor"),
      (e[(e.Function = 5)] = "Function"),
      (e[(e.Args = 6)] = "Args"),
      (e[(e.Interface = 7)] = "Interface");
  })(e.EmitContainer || (e.EmitContainer = {}));
  var i =
    (e.EmitContainer,
    (function () {
      function e() {
        (this.column = 0), (this.line = 0), (this.container = 0);
      }
      return e;
    })());
  e.EmitState = i;
  var o = (function () {
    function t(t, n) {
      (this.resolvePath = n),
        (this._diagnostic = null),
        (this._settings = null),
        (this._commonDirectoryPath = ""),
        (this._sharedOutputFile = ""),
        (this._sourceRootDirectory = ""),
        (this._sourceMapRootDirectory = ""),
        (this._outputDirectory = "");
      var r = t.compilationSettings();
      if (((this._settings = r), 0 === r.moduleGenTarget()))
        for (var i = t.fileNames(), o = 0, s = i.length; s > o; o++) {
          var a = t.getDocument(i[o]);
          if (!a.isDeclareFile() && a.isExternalModule()) {
            var l = a.externalModuleIndicatorSpan();
            return (
              (this._diagnostic = new e.Diagnostic(
                a.fileName,
                a.lineMap(),
                l.start(),
                l.length(),
                e.DiagnosticCode.Cannot_compile_external_modules_unless_the_module_flag_is_provided
              )),
              void 0
            );
          }
        }
      if (!r.mapSourceFiles()) {
        if (r.mapRoot())
          return r.sourceRoot()
            ? ((this._diagnostic = new e.Diagnostic(
                null,
                null,
                0,
                0,
                e.DiagnosticCode.Options_mapRoot_and_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option,
                null
              )),
              void 0)
            : ((this._diagnostic = new e.Diagnostic(
                null,
                null,
                0,
                0,
                e.DiagnosticCode.Option_mapRoot_cannot_be_specified_without_specifying_sourcemap_option,
                null
              )),
              void 0);
        if (r.sourceRoot())
          return (
            (this._diagnostic = new e.Diagnostic(
              null,
              null,
              0,
              0,
              e.DiagnosticCode.Option_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option,
              null
            )),
            void 0
          );
      }
      (this._sourceMapRootDirectory = e.convertToDirectoryPath(
        e.switchToForwardSlashes(r.mapRoot())
      )),
        (this._sourceRootDirectory = e.convertToDirectoryPath(
          e.switchToForwardSlashes(r.sourceRoot())
        )),
        (r.outFileOption() ||
          r.outDirOption() ||
          r.mapRoot() ||
          r.sourceRoot()) &&
          (r.outFileOption() &&
            (this._sharedOutputFile = e.switchToForwardSlashes(
              n(r.outFileOption())
            )),
          r.outDirOption() &&
            (this._outputDirectory = e.convertToDirectoryPath(
              e.switchToForwardSlashes(n(r.outDirOption()))
            )),
          (this._outputDirectory ||
            this._sourceMapRootDirectory ||
            this.sourceRootDirectory) &&
            this.determineCommonDirectoryPath(t));
    }
    return (
      (t.prototype.diagnostic = function () {
        return this._diagnostic;
      }),
      (t.prototype.commonDirectoryPath = function () {
        return this._commonDirectoryPath;
      }),
      (t.prototype.sharedOutputFile = function () {
        return this._sharedOutputFile;
      }),
      (t.prototype.sourceRootDirectory = function () {
        return this._sourceRootDirectory;
      }),
      (t.prototype.sourceMapRootDirectory = function () {
        return this._sourceMapRootDirectory;
      }),
      (t.prototype.outputDirectory = function () {
        return this._outputDirectory;
      }),
      (t.prototype.compilationSettings = function () {
        return this._settings;
      }),
      (t.prototype.determineCommonDirectoryPath = function (t) {
        for (
          var n = [], r = -1, i = t.fileNames(), o = 0, s = i.length;
          s > o;
          o++
        ) {
          {
            var a = i[o],
              l = t.getDocument(i[o]);
            l.sourceUnit();
          }
          if (!l.isDeclareFile()) {
            var c = e.filePathComponents(a);
            if (-1 === r) (n = c), (r = n.length);
            else {
              for (var u = !1, p = 0; r > p && p < c.length; p++)
                if (n[p] !== c[p]) {
                  if (((r = p), (u = !0), 0 === p)) {
                    if (this._outputDirectory || this._sourceMapRootDirectory)
                      return (
                        (this._diagnostic = new e.Diagnostic(
                          null,
                          null,
                          0,
                          0,
                          e.DiagnosticCode.Cannot_find_the_common_subdirectory_path_for_the_input_files,
                          null
                        )),
                        void 0
                      );
                    return;
                  }
                  break;
                }
              !u && c.length < r && (r = c.length);
            }
          }
        }
        this._commonDirectoryPath = n.slice(0, r).join("/") + "/";
      }),
      t
    );
  })();
  e.EmitOptions = o;
  var s = (function () {
    function e() {
      this.indentAmt = 0;
    }
    return (
      (e.prototype.increaseIndent = function () {
        this.indentAmt += e.indentStep;
      }),
      (e.prototype.decreaseIndent = function () {
        this.indentAmt -= e.indentStep;
      }),
      (e.prototype.getIndent = function () {
        var t = e.indentStrings[this.indentAmt];
        if (void 0 === t) {
          t = "";
          for (var n = 0; n < this.indentAmt; n += e.indentStep)
            t += e.indentStepString;
          e.indentStrings[this.indentAmt] = t;
        }
        return t;
      }),
      (e.indentStep = 4),
      (e.indentStepString = "    "),
      (e.indentStrings = []),
      e
    );
  })();
  (e.Indenter = s), (e.lastParameterIsRest = t);
  var a = (function () {
    function t(e, t, n, r) {
      (this.emittingFileName = e),
        (this.outfile = t),
        (this.emitOptions = n),
        (this.semanticInfoChain = r),
        (this.globalThisCapturePrologueEmitted = !1),
        (this.extendsPrologueEmitted = !1),
        (this.thisClassNode = null),
        (this.inArrowFunction = !1),
        (this.moduleName = ""),
        (this.emitState = new i()),
        (this.indenter = new s()),
        (this.sourceMapper = null),
        (this.captureThisStmtString = "var _this = this;"),
        (this.declStack = []),
        (this.exportAssignmentIdentifier = null),
        (this.inWithBlock = !1),
        (this.document = null),
        (this.detachedCommentsElement = null);
    }
    return (
      (t.prototype.pushDecl = function (e) {
        e && (this.declStack[this.declStack.length] = e);
      }),
      (t.prototype.popDecl = function (e) {
        e && this.declStack.length--;
      }),
      (t.prototype.getEnclosingDecl = function () {
        var e = this.declStack.length,
          t = e > 0 ? this.declStack[e - 1] : null;
        return t;
      }),
      (t.prototype.setExportAssignmentIdentifier = function (e) {
        this.exportAssignmentIdentifier = e;
      }),
      (t.prototype.getExportAssignmentIdentifier = function () {
        return this.exportAssignmentIdentifier;
      }),
      (t.prototype.setDocument = function (e) {
        this.document = e;
      }),
      (t.prototype.shouldEmitImportDeclaration = function (t) {
        var n = 245 === t.moduleReference.kind(),
          r = this.semanticInfoChain.getDeclForAST(t),
          i = e.hasFlag(r.flags, 1),
          o = 2 === this.emitOptions.compilationSettings().moduleGenTarget();
        if (n && !i && o) return !1;
        var s = r.getSymbol();
        if (s.isUsedAsValue()) return !0;
        if (245 !== t.moduleReference.kind()) {
          var a = i || s.typeUsedExternally() || s.isUsedInExportedAlias();
          if (
            (a ||
              this.document.isExternalModule() ||
              (a = e.hasFlag(r.getParentDecl().kind, 33)),
            a)
          ) {
            if (s.getExportAssignedValueSymbol()) return !0;
            var l = s.getExportAssignedContainerSymbol();
            if (l && l.getInstanceSymbol()) return !0;
          }
        }
        return !1;
      }),
      (t.prototype.emitImportDeclaration = function (t) {
        var n = 245 === t.moduleReference.kind(),
          r = this.semanticInfoChain.getDeclForAST(t),
          i = e.hasFlag(r.flags, 1),
          o = 2 === this.emitOptions.compilationSettings().moduleGenTarget();
        this.emitComments(t, !0);
        var s,
          a = r.getSymbol(),
          l = a.getContainer(),
          c = l ? l.kind : 0,
          u = l ? l.getAssociatedContainerType() : null,
          p = u ? u.kind : 0,
          h = !1,
          d = !1;
        if (i && (4 === c || 32 === c || 4 === p || 32 === p)) {
          if (
            a.getExportAssignedTypeSymbol() ||
            a.getExportAssignedContainerSymbol()
          )
            h = !0;
          else {
            var m = a.getExportAssignedValueSymbol();
            !m || (65536 !== m.kind && 16384 !== m.kind) ? (d = !0) : (h = !0);
          }
          s =
            2 === this.emitState.container ? "exports." : this.moduleName + ".";
        }
        if (o && n) h = !0;
        else {
          this.recordSourceMappingStart(t),
            d ? this.writeToOutput(s) : this.writeToOutput("var "),
            this.writeToOutput(t.identifier.text() + " = ");
          var f = t.moduleReference;
          n
            ? this.writeToOutput("require(" + f.stringLiteral.text() + ")")
            : this.emitJavascript(f.moduleName, !1),
            this.recordSourceMappingEnd(t),
            this.writeToOutput(";"),
            h && (this.writeLineToOutput(""), this.emitIndent());
        }
        h &&
          (this.writeToOutputWithSourceMapRecord(
            s + t.identifier.text() + " = " + t.identifier.text(),
            t
          ),
          this.writeToOutput(";")),
          this.emitComments(t, !1);
      }),
      (t.prototype.createSourceMapper = function (t, n, r, i, o) {
        this.sourceMapper = new e.SourceMapper(r, i, t, n, this.emitOptions, o);
      }),
      (t.prototype.setSourceMapperNewSourceFile = function (e) {
        this.sourceMapper.setNewSourceFile(e, this.emitOptions);
      }),
      (t.prototype.updateLineAndColumn = function (t) {
        var n = e.TextUtilities.parseLineStarts(t);
        n.length > 1
          ? ((this.emitState.line += n.length - 1),
            (this.emitState.column = t.length - n[n.length - 1]))
          : (this.emitState.column += t.length);
      }),
      (t.prototype.writeToOutputWithSourceMapRecord = function (e, t) {
        this.recordSourceMappingStart(t),
          this.writeToOutput(e),
          this.recordSourceMappingEnd(t);
      }),
      (t.prototype.writeToOutput = function (e) {
        this.outfile.Write(e), this.updateLineAndColumn(e);
      }),
      (t.prototype.writeLineToOutput = function (e, t) {
        "undefined" == typeof t && (t = !1),
          (t || "" !== e || 0 !== this.emitState.column) &&
            (this.outfile.WriteLine(e),
            this.updateLineAndColumn(e),
            (this.emitState.column = 0),
            this.emitState.line++);
      }),
      (t.prototype.writeCaptureThisStatement = function (e) {
        this.emitIndent(),
          this.writeToOutputWithSourceMapRecord(this.captureThisStmtString, e),
          this.writeLineToOutput("");
      }),
      (t.prototype.setContainer = function (e) {
        var t = this.emitState.container;
        return (this.emitState.container = e), t;
      }),
      (t.prototype.getIndentString = function () {
        return this.indenter.getIndent();
      }),
      (t.prototype.emitIndent = function () {
        this.writeToOutput(this.getIndentString());
      }),
      (t.prototype.emitComment = function (e, t, n) {
        if (!this.emitOptions.compilationSettings().removeComments()) {
          var i = r(e),
            o = this.emitState.column;
          if (
            (0 === o ? this.emitIndent() : t && n && this.writeToOutput(" "),
            6 === e.kind())
          ) {
            if (
              (this.recordSourceMappingStart(e),
              this.writeToOutput(i[0]),
              !(i.length > 1 || e.endsLine))
            )
              return (
                this.recordSourceMappingEnd(e), this.writeToOutput(" "), void 0
              );
            for (var s = 1; s < i.length; s++)
              this.writeLineToOutput(""),
                this.emitIndent(),
                this.writeToOutput(i[s]);
            this.recordSourceMappingEnd(e), this.writeLineToOutput("");
          } else
            this.recordSourceMappingStart(e),
              this.writeToOutput(i[0]),
              this.recordSourceMappingEnd(e),
              this.writeLineToOutput("");
          t || 0 === o || this.emitIndent();
        }
      }),
      (t.prototype.emitComments = function (t, n, r) {
        var i = this;
        if (
          ("undefined" == typeof r && (r = !1),
          !t ||
            146 === t.kind() ||
            (219 !== t.parent.kind() && 218 !== t.parent.kind()))
        )
          if (n) {
            var o = t.preComments();
            if (o && t === this.detachedCommentsElement) {
              var s = this.getDetachedComments(t);
              (o = o.slice(s.length)), (this.detachedCommentsElement = null);
            }
            o &&
              r &&
              (o = e.ArrayUtilities.where(o, function (e) {
                return i.isPinnedOrTripleSlash(e);
              })),
              this.emitCommentsArray(o, !1);
          } else this.emitCommentsArray(t.postComments(), !0);
      }),
      (t.prototype.isPinnedOrTripleSlash = function (t) {
        var n = t.fullText();
        return n.match(e.tripleSlashReferenceRegExp)
          ? !0
          : 0 === n.indexOf("/*!");
      }),
      (t.prototype.emitCommentsArray = function (e, t) {
        if (!this.emitOptions.compilationSettings().removeComments() && e)
          for (var n = 0, r = e.length; r > n; n++)
            this.emitComment(e[n], t, 0 === n);
      }),
      (t.prototype.emitObjectLiteralExpression = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("{"),
          this.emitCommaSeparatedList(e, e.propertyAssignments, " ", !0),
          this.writeToOutput("}"),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitArrayLiteralExpression = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("["),
          this.emitCommaSeparatedList(e, e.expressions, "", !0),
          this.writeToOutput("]"),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitObjectCreationExpression = function (e) {
        this.recordSourceMappingStart(e), this.writeToOutput("new ");
        var t = e.expression;
        this.emit(t),
          e.argumentList &&
            (this.recordSourceMappingStart(e.argumentList),
            this.writeToOutput("("),
            this.emitCommaSeparatedList(
              e.argumentList,
              e.argumentList.arguments,
              "",
              !1
            ),
            this.writeToOutputWithSourceMapRecord(
              ")",
              e.argumentList.closeParenToken
            ),
            this.recordSourceMappingEnd(e.argumentList)),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.getConstantDecl = function (e) {
        var t = this.semanticInfoChain.getSymbolForAST(e);
        if (t && 67108864 === t.kind) {
          var n = t.getDeclarations();
          if (1 === n.length) {
            var r = n[0];
            if (67108864 === r.kind) return r;
          }
        }
        return null;
      }),
      (t.prototype.tryEmitConstant = function (e) {
        var t = e.name,
          n = this.getConstantDecl(e);
        if (n) {
          var r = n.constantValue;
          if (null !== r) {
            this.recordSourceMappingStart(e), this.writeToOutput(r.toString());
            var i = " /* ";
            return (
              (i += t.text()),
              (i += " */"),
              this.writeToOutput(i),
              this.recordSourceMappingEnd(e),
              !0
            );
          }
        }
        return !1;
      }),
      (t.prototype.emitInvocationExpression = function (e) {
        this.recordSourceMappingStart(e);
        var t = e.expression,
          n = e.argumentList.arguments;
        212 === t.kind() && 50 === t.expression.kind()
          ? (this.emit(t),
            this.writeToOutput(".call"),
            this.recordSourceMappingStart(n),
            this.writeToOutput("("),
            this.emitThis(),
            n &&
              n.nonSeparatorCount() > 0 &&
              (this.writeToOutput(", "),
              this.emitCommaSeparatedList(e.argumentList, n, "", !1)))
          : (50 === e.expression.kind() && 4 === this.emitState.container
              ? this.writeToOutput("_super.call")
              : this.emitJavascript(t, !1),
            this.recordSourceMappingStart(n),
            this.writeToOutput("("),
            50 === e.expression.kind() &&
              4 === this.emitState.container &&
              (this.writeToOutput("this"),
              n && n.nonSeparatorCount() > 0 && this.writeToOutput(", ")),
            this.emitCommaSeparatedList(e.argumentList, n, "", !1)),
          this.writeToOutputWithSourceMapRecord(
            ")",
            e.argumentList.closeParenToken
          ),
          this.recordSourceMappingEnd(n),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitParameterList = function (t) {
        this.writeToOutput("("),
          this.emitCommentsArray(t.openParenTrailingComments, !0),
          this.emitFunctionParameters(
            e.ASTHelpers.parametersFromParameterList(t)
          ),
          this.writeToOutput(")");
      }),
      (t.prototype.emitFunctionParameters = function (e) {
        var t = 0;
        if (e) {
          this.emitComments(e.ast, !0);
          var n = this.setContainer(6);
          t = e.length;
          var r = t;
          e.lastParameterIsRest() && r--;
          for (var i = 0; r > i; i++) {
            var o = e.astAt(i);
            this.emit(o), r - 1 > i && this.writeToOutput(", ");
          }
          this.setContainer(n), this.emitComments(e.ast, !1);
        }
      }),
      (t.prototype.emitFunctionBodyStatements = function (e, t, n, r, i) {
        this.writeLineToOutput(" {"),
          e && this.recordSourceMappingNameStart(e),
          this.indenter.increaseIndent(),
          r && this.emitDetachedComments(r.statements),
          this.shouldCaptureThis(t) && this.writeCaptureThisStatement(t),
          n &&
            (this.emitDefaultValueAssignments(n),
            this.emitRestParameterInitializer(n)),
          r
            ? (this.emitList(r.statements),
              this.emitCommentsArray(r.closeBraceLeadingComments, !1))
            : (this.emitIndent(),
              this.emitCommentsArray(i.preComments(), !1),
              this.writeToOutput("return "),
              this.emit(i),
              this.writeLineToOutput(";"),
              this.emitCommentsArray(i.postComments(), !0)),
          this.indenter.decreaseIndent(),
          this.emitIndent(),
          r
            ? this.writeToOutputWithSourceMapRecord("}", r.closeBraceToken)
            : this.writeToOutputWithSourceMapRecord("}", i),
          e && this.recordSourceMappingNameEnd();
      }),
      (t.prototype.emitDefaultValueAssignments = function (e) {
        var t = e.length;
        e.lastParameterIsRest() && t--;
        for (var n = 0; t > n; n++) {
          var r = e.astAt(n),
            i = e.identifierAt(n),
            o = e.initializerAt(n);
          o &&
            (this.emitIndent(),
            this.recordSourceMappingStart(r),
            this.writeToOutput(
              "if (typeof " + i.text() + ' === "undefined") { '
            ),
            this.writeToOutputWithSourceMapRecord(i.text(), i),
            this.emitJavascript(o, !1),
            this.writeLineToOutput("; }"),
            this.recordSourceMappingEnd(r));
        }
      }),
      (t.prototype.emitRestParameterInitializer = function (e) {
        if (e.lastParameterIsRest()) {
          var t = e.length,
            n = e.astAt(t - 1),
            r = e.identifierAt(t - 1);
          this.emitIndent(),
            this.recordSourceMappingStart(n),
            this.writeToOutput("var "),
            this.writeToOutputWithSourceMapRecord(r.text(), r),
            this.writeLineToOutput(" = [];"),
            this.recordSourceMappingEnd(n),
            this.emitIndent(),
            this.writeToOutput("for ("),
            this.writeToOutputWithSourceMapRecord("var _i = 0;", n),
            this.writeToOutput(" "),
            this.writeToOutputWithSourceMapRecord(
              "_i < (arguments.length - " + (t - 1) + ")",
              n
            ),
            this.writeToOutput("; "),
            this.writeToOutputWithSourceMapRecord("_i++", n),
            this.writeLineToOutput(") {"),
            this.indenter.increaseIndent(),
            this.emitIndent(),
            this.writeToOutputWithSourceMapRecord(
              r.text() + "[_i] = arguments[_i + " + (t - 1) + "];",
              n
            ),
            this.writeLineToOutput(""),
            this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.writeLineToOutput("}");
        }
      }),
      (t.prototype.getImportDecls = function () {
        for (
          var e = this.semanticInfoChain.topLevelDecl(this.document.fileName),
            t = [],
            n = e.getChildDecls()[0],
            r = n.getChildDecls(),
            i = 0,
            o = r.length;
          o > i;
          i++
        ) {
          var s = r[i];
          if (128 & s.kind) {
            var a = this.semanticInfoChain.getASTForDecl(s);
            if (245 === a.moduleReference.kind()) {
              var l = s.getSymbol(),
                c = l && l.type;
              c &&
                c !== this.semanticInfoChain.anyTypeSymbol &&
                !c.isError() &&
                t.push(s);
            }
          }
        }
        return t;
      }),
      (t.prototype.getModuleImportAndDependencyList = function () {
        var e = "",
          t = "",
          n = this.getImportDecls(this.document.fileName);
        if (n.length)
          for (var r = 0; r < n.length; r++) {
            var i = n[r],
              o = i.getSymbol(),
              s = this.semanticInfoChain.getASTForDecl(i);
            o.isUsedAsValue() &&
              (r <= n.length - 1 && ((t += ", "), (e += ", ")),
              (e += i.name),
              (t += s.moduleReference.stringLiteral.text()));
          }
        for (var a = this.document.amdDependencies(), r = 0; r < a.length; r++)
          t += ', "' + a[r] + '"';
        return { importList: e, dependencyList: t };
      }),
      (t.prototype.shouldCaptureThis = function (t) {
        if (120 === t.kind()) {
          var n = this.semanticInfoChain.topLevelDecl(this.document.fileName);
          return e.hasFlag(n.flags, 262144);
        }
        var r = this.semanticInfoChain.getDeclForAST(t);
        return r ? e.hasFlag(r.flags, 262144) : !1;
      }),
      (t.prototype.emitEnum = function (t) {
        var n = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(n);
        var r = this.moduleName;
        this.moduleName = t.identifier.text();
        var i = this.setContainer(1),
          o = e.hasFlag(n.flags, 1);
        o ||
          (this.recordSourceMappingStart(t),
          this.writeToOutput("var "),
          this.recordSourceMappingStart(t.identifier),
          this.writeToOutput(this.moduleName),
          this.recordSourceMappingEnd(t.identifier),
          this.writeLineToOutput(";"),
          this.recordSourceMappingEnd(t),
          this.emitIndent()),
          this.writeToOutput("("),
          this.recordSourceMappingStart(t),
          this.writeToOutput("function ("),
          this.writeToOutputWithSourceMapRecord(this.moduleName, t.identifier),
          this.writeLineToOutput(") {"),
          this.recordSourceMappingNameStart(this.moduleName),
          this.indenter.increaseIndent(),
          this.shouldCaptureThis(t) && this.writeCaptureThisStatement(t),
          this.emitSeparatedList(t.enumElements),
          this.indenter.decreaseIndent(),
          this.emitIndent();
        var s = 2 === i;
        if (0 === i && o)
          this.writeToOutput("}"),
            this.recordSourceMappingNameEnd(),
            this.writeToOutput(
              ")(this." +
                this.moduleName +
                " || (this." +
                this.moduleName +
                " = {}));"
            );
        else if (o || 0 === i) {
          var a = "" !== r ? (s ? "exports" : r) + "." : r;
          this.writeToOutput("}"),
            this.recordSourceMappingNameEnd(),
            this.writeToOutput(
              ")(" +
                a +
                this.moduleName +
                " || (" +
                a +
                this.moduleName +
                " = {}));"
            );
        } else
          o || 0 === i
            ? (this.writeToOutput("}"),
              this.recordSourceMappingNameEnd(),
              this.writeToOutput(")();"))
            : (this.writeToOutput("}"),
              this.recordSourceMappingNameEnd(),
              this.writeToOutput(
                ")(" + this.moduleName + " || (" + this.moduleName + " = {}));"
              ));
        this.recordSourceMappingEnd(t),
          0 !== i &&
            o &&
            (this.recordSourceMappingStart(t),
            s
              ? (this.writeLineToOutput(""),
                this.emitIndent(),
                this.writeToOutput(
                  "var " +
                    this.moduleName +
                    " = exports." +
                    this.moduleName +
                    ";"
                ))
              : (this.writeLineToOutput(""),
                this.emitIndent(),
                this.writeToOutput(
                  "var " +
                    this.moduleName +
                    " = " +
                    r +
                    "." +
                    this.moduleName +
                    ";"
                )),
            this.recordSourceMappingEnd(t)),
          this.setContainer(i),
          (this.moduleName = r),
          this.popDecl(n);
      }),
      (t.prototype.getModuleDeclToVerifyChildNameCollision = function (t, n) {
        if (e.ArrayUtilities.contains(this.declStack, t)) return t;
        if (n) {
          var r = t.getSymbol();
          if (r)
            for (var i = r.getDeclarations(), o = 0; o < i.length; o++)
              if (e.ArrayUtilities.contains(this.declStack, i[o])) return i[o];
        }
        return null;
      }),
      (t.prototype.hasChildNameCollision = function (t, n) {
        var r = this,
          i = n.getChildDecls();
        return e.ArrayUtilities.any(i, function (e) {
          var i = r.semanticInfoChain.getASTForDecl(e);
          if (67108864 != e.kind && r.shouldEmit(i)) {
            if (e.name === t) {
              if (8 != n.kind) return !0;
              if (
                65536 != e.kind &&
                4096 != e.kind &&
                524288 != e.kind &&
                262144 != e.kind
              )
                return !0;
            }
            if (r.hasChildNameCollision(t, e)) return !0;
          }
          return !1;
        });
      }),
      (t.prototype.getModuleName = function (e, t) {
        var n = e.name,
          r = e.getDisplayName();
        if (
          ((e = this.getModuleDeclToVerifyChildNameCollision(e, t)),
          e && 64 != e.kind)
        )
          for (; this.hasChildNameCollision(n, e); )
            (n = "_" + n), (r = "_" + r);
        return r;
      }),
      (t.prototype.emitModuleDeclarationWorker = function (t) {
        if (t.stringLiteral)
          this.emitSingleModuleDeclaration(t, t.stringLiteral);
        else {
          var n = e.getModuleNames(t.name);
          this.emitSingleModuleDeclaration(t, n[0]);
        }
      }),
      (t.prototype.emitSingleModuleDeclaration = function (t, n) {
        var r = e.ASTHelpers.isLastNameOfModule(t, n);
        r && this.emitComments(t, !0);
        var i = this.semanticInfoChain.getDeclForAST(n);
        this.pushDecl(i);
        var o = this.moduleName;
        t.stringLiteral
          ? ((this.moduleName = t.stringLiteral.valueText()),
            e.isTSFile(this.moduleName) &&
              (this.moduleName = this.moduleName.substring(
                0,
                this.moduleName.length - ".ts".length
              )))
          : (this.moduleName = n.text());
        var s = this.setContainer(1),
          a = e.hasFlag(i.flags, 1);
        if (
          (a ||
            (this.recordSourceMappingStart(t),
            this.writeToOutput("var "),
            this.recordSourceMappingStart(n),
            this.writeToOutput(this.moduleName),
            this.recordSourceMappingEnd(n),
            this.writeLineToOutput(";"),
            this.recordSourceMappingEnd(t),
            this.emitIndent()),
          this.writeToOutput("("),
          this.recordSourceMappingStart(t),
          this.writeToOutput("function ("),
          (this.moduleName = this.getModuleName(i)),
          this.writeToOutputWithSourceMapRecord(this.moduleName, n),
          this.writeLineToOutput(") {"),
          this.recordSourceMappingNameStart(n.text()),
          this.indenter.increaseIndent(),
          this.shouldCaptureThis(t) && this.writeCaptureThisStatement(t),
          n === t.stringLiteral)
        )
          this.emitList(t.moduleElements);
        else {
          var l = e.getModuleNames(t.name),
            c = l.indexOf(n);
          e.Debug.assert(c >= 0),
            r
              ? this.emitList(t.moduleElements)
              : (this.emitIndent(),
                this.emitSingleModuleDeclaration(t, l[c + 1]),
                this.writeLineToOutput(""));
        }
        (this.moduleName = n.text()),
          this.indenter.decreaseIndent(),
          this.emitIndent();
        var u = 2 === s;
        if ((this.recordSourceMappingStart(t.endingToken), 0 === s && a))
          this.writeToOutput("}"),
            this.recordSourceMappingNameEnd(),
            this.recordSourceMappingEnd(t.endingToken),
            this.writeToOutput(
              ")(this." +
                this.moduleName +
                " || (this." +
                this.moduleName +
                " = {}));"
            );
        else if (a || 0 === s) {
          var p = "" !== o ? (u ? "exports" : o) + "." : o;
          this.writeToOutput("}"),
            this.recordSourceMappingNameEnd(),
            this.recordSourceMappingEnd(t.endingToken),
            this.writeToOutput(
              ")(" +
                p +
                this.moduleName +
                " || (" +
                p +
                this.moduleName +
                " = {}));"
            );
        } else
          a || 0 === s
            ? (this.writeToOutput("}"),
              this.recordSourceMappingNameEnd(),
              this.recordSourceMappingEnd(t.endingToken),
              this.writeToOutput(")();"))
            : (this.writeToOutput("}"),
              this.recordSourceMappingNameEnd(),
              this.recordSourceMappingEnd(t.endingToken),
              this.writeToOutput(
                ")(" + this.moduleName + " || (" + this.moduleName + " = {}));"
              ));
        this.recordSourceMappingEnd(t),
          0 !== s &&
            a &&
            (this.recordSourceMappingStart(t),
            u
              ? (this.writeLineToOutput(""),
                this.emitIndent(),
                this.writeToOutput(
                  "var " +
                    this.moduleName +
                    " = exports." +
                    this.moduleName +
                    ";"
                ))
              : (this.writeLineToOutput(""),
                this.emitIndent(),
                this.writeToOutput(
                  "var " +
                    this.moduleName +
                    " = " +
                    o +
                    "." +
                    this.moduleName +
                    ";"
                )),
            this.recordSourceMappingEnd(t)),
          this.setContainer(s),
          (this.moduleName = o),
          this.popDecl(i),
          r && this.emitComments(t, !1);
      }),
      (t.prototype.emitEnumElement = function (t) {
        var n = this.semanticInfoChain.getDeclForAST(t);
        e.Debug.assert(n && 67108864 === n.kind),
          this.emitComments(t, !0),
          this.recordSourceMappingStart(t);
        var r = t.propertyName.text(),
          i = e.isQuoted(r);
        this.writeToOutput(this.moduleName),
          this.writeToOutput("["),
          this.writeToOutput(this.moduleName),
          this.writeToOutput("["),
          this.writeToOutput(i ? r : '"' + r + '"'),
          this.writeToOutput("]"),
          t.equalsValueClause
            ? this.emit(t.equalsValueClause)
            : null !== n.constantValue
            ? (this.writeToOutput(" = "),
              this.writeToOutput(n.constantValue.toString()))
            : this.writeToOutput(" = null"),
          this.writeToOutput("] = "),
          this.writeToOutput(i ? r : '"' + r + '"'),
          this.recordSourceMappingEnd(t),
          this.emitComments(t, !1),
          this.writeToOutput(";");
      }),
      (t.prototype.emitElementAccessExpression = function (e) {
        this.recordSourceMappingStart(e),
          this.emit(e.expression),
          this.writeToOutput("["),
          this.emit(e.argumentExpression),
          this.writeToOutput("]"),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitSimpleArrowFunctionExpression = function (t) {
        this.emitAnyArrowFunctionExpression(
          t,
          null,
          e.ASTHelpers.parametersFromIdentifier(t.identifier),
          t.block,
          t.expression
        );
      }),
      (t.prototype.emitParenthesizedArrowFunctionExpression = function (t) {
        this.emitAnyArrowFunctionExpression(
          t,
          null,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          t.block,
          t.expression
        );
      }),
      (t.prototype.emitAnyArrowFunctionExpression = function (e, t, n, r, i) {
        var o = this.inArrowFunction;
        this.inArrowFunction = !0;
        var s = this.setContainer(5);
        this.recordSourceMappingStart(e);
        var a = this.semanticInfoChain.getDeclForAST(e);
        this.pushDecl(a),
          this.emitComments(e, !0),
          this.recordSourceMappingStart(e),
          this.writeToOutput("function "),
          this.writeToOutput("("),
          this.emitFunctionParameters(n),
          this.writeToOutput(")"),
          this.emitFunctionBodyStatements(t, e, n, r, i),
          this.recordSourceMappingEnd(e),
          this.recordSourceMappingEnd(e),
          this.emitComments(e, !1),
          this.popDecl(a),
          this.setContainer(s),
          (this.inArrowFunction = o);
      }),
      (t.prototype.emitConstructor = function (t) {
        if (t.block) {
          var n = this.setContainer(4);
          this.recordSourceMappingStart(t);
          var r = this.semanticInfoChain.getDeclForAST(t);
          this.pushDecl(r),
            this.emitComments(t, !0),
            this.recordSourceMappingStart(t),
            this.writeToOutput("function "),
            this.writeToOutput(this.thisClassNode.identifier.text()),
            this.writeToOutput("(");
          var i = e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          );
          this.emitFunctionParameters(i),
            this.writeLineToOutput(") {"),
            this.recordSourceMappingNameStart("constructor"),
            this.indenter.increaseIndent(),
            this.emitDefaultValueAssignments(i),
            this.emitRestParameterInitializer(i),
            this.shouldCaptureThis(t) && this.writeCaptureThisStatement(t),
            this.emitConstructorStatements(t),
            this.emitCommentsArray(t.block.closeBraceLeadingComments, !1),
            this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.writeToOutputWithSourceMapRecord("}", t.block.closeBraceToken),
            this.recordSourceMappingNameEnd(),
            this.recordSourceMappingEnd(t),
            this.recordSourceMappingEnd(t),
            this.emitComments(t, !1),
            this.popDecl(r),
            this.setContainer(n);
        }
      }),
      (t.prototype.emitGetAccessor = function (t) {
        this.recordSourceMappingStart(t), this.writeToOutput("get ");
        var n = this.setContainer(5);
        this.recordSourceMappingStart(t);
        var r = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(r), this.recordSourceMappingStart(t);
        {
          var i = e.PullHelpers.getAccessorSymbol(t, this.semanticInfoChain),
            o = i.getContainer();
          o.kind;
        }
        this.recordSourceMappingNameStart(t.propertyName.text()),
          this.writeToOutput(t.propertyName.text()),
          this.writeToOutput("("),
          this.writeToOutput(")"),
          this.emitFunctionBodyStatements(
            null,
            t,
            e.ASTHelpers.parametersFromParameterList(t.parameterList),
            t.block,
            null
          ),
          this.recordSourceMappingEnd(t),
          this.recordSourceMappingEnd(t),
          this.popDecl(r),
          this.setContainer(n),
          this.recordSourceMappingEnd(t);
      }),
      (t.prototype.emitSetAccessor = function (t) {
        this.recordSourceMappingStart(t), this.writeToOutput("set ");
        var n = this.setContainer(5);
        this.recordSourceMappingStart(t);
        var r = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(r), this.recordSourceMappingStart(t);
        {
          var i = e.PullHelpers.getAccessorSymbol(t, this.semanticInfoChain),
            o = i.getContainer();
          o.kind;
        }
        this.recordSourceMappingNameStart(t.propertyName.text()),
          this.writeToOutput(t.propertyName.text()),
          this.writeToOutput("(");
        var s = e.ASTHelpers.parametersFromParameterList(t.parameterList);
        this.emitFunctionParameters(s),
          this.writeToOutput(")"),
          this.emitFunctionBodyStatements(null, t, s, t.block, null),
          this.recordSourceMappingEnd(t),
          this.recordSourceMappingEnd(t),
          this.popDecl(r),
          this.setContainer(n),
          this.recordSourceMappingEnd(t);
      }),
      (t.prototype.emitFunctionExpression = function (t) {
        var n = this.inArrowFunction;
        this.inArrowFunction = !1;
        var r = this.setContainer(5),
          i = t.identifier ? t.identifier.text() : null;
        this.recordSourceMappingStart(t);
        var o = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(o),
          this.recordSourceMappingStart(t),
          this.writeToOutput("function "),
          t.identifier &&
            (this.recordSourceMappingStart(t.identifier),
            this.writeToOutput(t.identifier.text()),
            this.recordSourceMappingEnd(t.identifier)),
          this.writeToOutput("(");
        var s = e.ASTHelpers.parametersFromParameterList(
          t.callSignature.parameterList
        );
        this.emitFunctionParameters(s),
          this.writeToOutput(")"),
          this.emitFunctionBodyStatements(i, t, s, t.block, null),
          this.recordSourceMappingEnd(t),
          this.recordSourceMappingEnd(t),
          this.emitComments(t, !1),
          this.popDecl(o),
          this.setContainer(r),
          (this.inArrowFunction = n);
      }),
      (t.prototype.emitFunction = function (t) {
        if (null !== t.block) {
          var n = this.inArrowFunction;
          this.inArrowFunction = !1;
          var r = this.setContainer(5),
            i = t.identifier.text();
          this.recordSourceMappingStart(t);
          var o = null !== t.identifier,
            s = this.semanticInfoChain.getDeclForAST(t);
          if (
            (this.pushDecl(s),
            this.emitComments(t, !0),
            this.recordSourceMappingStart(t),
            this.writeToOutput("function "),
            o)
          ) {
            var a = t.identifier.text();
            a &&
              (t.identifier && this.recordSourceMappingStart(t.identifier),
              this.writeToOutput(a),
              t.identifier && this.recordSourceMappingEnd(t.identifier));
          }
          this.emitParameterList(t.callSignature.parameterList);
          var l = e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          );
          if (
            (this.emitFunctionBodyStatements(
              t.identifier.text(),
              t,
              l,
              t.block,
              null
            ),
            this.recordSourceMappingEnd(t),
            this.recordSourceMappingEnd(t),
            this.emitComments(t, !1),
            this.popDecl(s),
            this.setContainer(r),
            (this.inArrowFunction = n),
            t.block)
          ) {
            var c = this.semanticInfoChain.getDeclForAST(t);
            if (
              (1 === this.emitState.container ||
                2 === this.emitState.container) &&
              c &&
              e.hasFlag(c.flags, 1)
            ) {
              this.writeLineToOutput(""), this.emitIndent();
              var u =
                1 === this.emitState.container ? this.moduleName : "exports";
              this.recordSourceMappingStart(t),
                this.writeToOutput(u + "." + i + " = " + i + ";"),
                this.recordSourceMappingEnd(t);
            }
          }
        }
      }),
      (t.prototype.emitAmbientVarDecl = function (e) {
        this.recordSourceMappingStart(this.currentVariableDeclaration),
          e.equalsValueClause &&
            (this.emitComments(e, !0),
            this.recordSourceMappingStart(e),
            this.writeToOutputWithSourceMapRecord(
              e.propertyName.text(),
              e.propertyName
            ),
            this.emitJavascript(e.equalsValueClause, !1),
            this.recordSourceMappingEnd(e),
            this.emitComments(e, !1));
      }),
      (t.prototype.emitVarDeclVar = function () {
        this.currentVariableDeclaration && this.writeToOutput("var ");
      }),
      (t.prototype.emitVariableDeclaration = function (t) {
        {
          var n = t.declarators.nonSeparatorAt(0),
            r = this.semanticInfoChain.getSymbolForAST(n),
            i = r ? r.getContainer() : null;
          i ? i.kind : 0;
        }
        this.emitComments(t, !0);
        var o = this.semanticInfoChain.getDeclForAST(n),
          s = o && e.hasFlag(o.flags, 8) && null === n.equalsValueClause;
        if (!s) {
          var a = this.currentVariableDeclaration;
          this.currentVariableDeclaration = t;
          for (var l = 0, c = t.declarators.nonSeparatorCount(); c > l; l++) {
            var u = t.declarators.nonSeparatorAt(l);
            l > 0 && this.writeToOutput(", "), this.emit(u);
          }
          (this.currentVariableDeclaration = a), this.recordSourceMappingEnd(t);
        }
        this.emitComments(t, !1);
      }),
      (t.prototype.emitMemberVariableDeclaration = function (t) {
        e.Debug.assert(
          !e.hasModifier(t.modifiers, 16) &&
            t.variableDeclarator.equalsValueClause
        );
        var n = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(n),
          this.emitComments(t, !0),
          this.recordSourceMappingStart(t);
        {
          var r = t.variableDeclarator.propertyName.text(),
            i =
              e.isQuoted(r) || 11 !== t.variableDeclarator.propertyName.kind(),
            o = this.semanticInfoChain.getSymbolForAST(t);
          o ? o.getContainer() : null, n && n.getParentDecl();
        }
        if (
          (i ? this.writeToOutput("this[") : this.writeToOutput("this."),
          this.writeToOutputWithSourceMapRecord(
            t.variableDeclarator.propertyName.text(),
            t.variableDeclarator.propertyName
          ),
          i && this.writeToOutput("]"),
          t.variableDeclarator.equalsValueClause)
        ) {
          var s = this.currentVariableDeclaration;
          this.emit(t.variableDeclarator.equalsValueClause),
            (this.currentVariableDeclaration = s);
        }
        6 !== this.emitState.container && this.writeToOutput(";"),
          this.recordSourceMappingEnd(t),
          this.emitComments(t, !1),
          this.popDecl(n);
      }),
      (t.prototype.emitVariableDeclarator = function (t) {
        var n = this.semanticInfoChain.getDeclForAST(t);
        if ((this.pushDecl(n), n && 8 === (8 & n.flags)))
          this.emitAmbientVarDecl(t);
        else {
          this.emitComments(t, !0),
            this.recordSourceMappingStart(this.currentVariableDeclaration),
            this.recordSourceMappingStart(t);
          var r =
              (t.propertyName.text(),
              this.semanticInfoChain.getSymbolForAST(t)),
            i = (r ? r.getContainer() : null, n && n.getParentDecl()),
            o = i && 102400 & i.flags;
          if (
            (o
              ? e.hasFlag(n.flags, 1)
                ? 2 === this.emitState.container
                  ? this.writeToOutput("exports.")
                  : this.writeToOutput(this.moduleName + ".")
                : this.emitVarDeclVar()
              : this.emitVarDeclVar(),
            this.writeToOutputWithSourceMapRecord(
              t.propertyName.text(),
              t.propertyName
            ),
            t.equalsValueClause)
          ) {
            var s = this.currentVariableDeclaration;
            this.emit(t.equalsValueClause),
              (this.currentVariableDeclaration = s);
          }
          this.recordSourceMappingEnd(t), this.emitComments(t, !1);
        }
        (this.currentVariableDeclaration = void 0), this.popDecl(n);
      }),
      (t.prototype.symbolIsUsedInItsEnclosingContainer = function (e, t) {
        "undefined" == typeof t && (t = !1);
        var n = e.getDeclarations();
        if (n.length) {
          var r = this.getEnclosingDecl();
          if (r) {
            var i = n[0].getParentDecl();
            if (i) {
              for (var o = i, s = r; o && o.kind !== (t ? 32 : 4); )
                o = o.getParentDecl();
              if (o)
                for (; s && s.kind !== (t ? 32 : 4); ) s = s.getParentDecl();
              if (o && s) {
                var a = o === s;
                return (
                  !a &&
                    e.anyDeclHasFlag(32768) &&
                    (a = o === s.getParentDecl()),
                  a
                );
              }
            }
          }
        }
        return !1;
      }),
      (t.prototype.getPotentialDeclPathInfoForEmit = function (e) {
        var t = e.getDeclarations()[0],
          n = t.getParentDecl(),
          r = n ? n.getParentPath() : [],
          i = this.declStack,
          o = -1;
        if (i.length)
          for (var s = r.length - 1; s >= 0; s--) {
            for (var a = r[s], l = i.length - 1; l >= 0; l--) {
              var c = i[l];
              if (a === c) {
                o = s;
                break;
              }
            }
            if (o >= 0) break;
          }
        for (var u = r.length - 1, s = u - 1; s > o && 1 & r[s + 1].flags; s--)
          u = s;
        return { potentialPath: r, startingIndex: u };
      }),
      (t.prototype.emitDottedNameFromDeclPath = function (e, t, n) {
        for (var r = t; n >= r; r++)
          32 === e[r].kind || 65536 & e[r].flags
            ? this.writeToOutput("exports.")
            : this.writeToOutput(this.getModuleName(e[r], !0) + ".");
      }),
      (t.prototype.emitSymbolContainerNameInEnclosingContext = function (e) {
        var t = this.getPotentialDeclPathInfoForEmit(e),
          n = t.potentialPath,
          r = t.startingIndex;
        this.emitDottedNameFromDeclPath(n, r, n.length - 1);
      }),
      (t.prototype.getSymbolForEmit = function (t) {
        var n = this.semanticInfoChain.getSymbolForAST(t),
          r = this.semanticInfoChain.getAliasSymbolForAST(t);
        if (n && r) {
          var i = e.isTypesOnlyLocation(t)
            ? r.getExportAssignedTypeSymbol()
            : r.getExportAssignedValueSymbol();
          n === i && ((n = r), (r = null));
        }
        return { symbol: n, aliasSymbol: r };
      }),
      (t.prototype.emitName = function (t, n) {
        if (
          (this.emitComments(t, !0),
          this.recordSourceMappingStart(t),
          t.text().length > 0)
        ) {
          var r = this.getSymbolForEmit(t),
            i = r.symbol;
          i || (i = this.semanticInfoChain.anyTypeSymbol);
          var o = r.aliasSymbol,
            s = i.kind,
            a =
              o &&
              o.getDeclarations()[0].getParentDecl() ===
                this.getEnclosingDecl();
          if (n && 6 !== this.emitState.container && i) {
            var l = i.getContainer();
            if (l) {
              var c = l.kind;
              8 === c
                ? i.anyDeclHasFlag(16)
                  ? this.emitSymbolContainerNameInEnclosingContext(i)
                  : 4096 === s && (this.emitThis(), this.writeToOutput("."))
                : e.PullHelpers.symbolIsModule(l) ||
                  64 === c ||
                  l.anyDeclHasFlag(36864)
                ? 4096 === s || 67108864 === s
                  ? this.emitSymbolContainerNameInEnclosingContext(i)
                  : i.anyDeclHasFlag(1) && 512 === s && !i.anyDeclHasFlag(36864)
                  ? this.emitSymbolContainerNameInEnclosingContext(i)
                  : i.anyDeclHasFlag(1) &&
                    !this.symbolIsUsedInItsEnclosingContainer(i) &&
                    this.emitSymbolContainerNameInEnclosingContext(i)
                : (32 === c || l.anyDeclHasFlag(65536)) &&
                  (4096 === s
                    ? this.writeToOutput("exports.")
                    : !i.anyDeclHasFlag(1) ||
                      a ||
                      i.anyDeclHasFlag(118784) ||
                      32768 === i.kind ||
                      8 === i.kind ||
                      64 === i.kind ||
                      this.writeToOutput("exports."));
            }
          }
          this.writeToOutput(t.text());
        }
        this.recordSourceMappingEnd(t), this.emitComments(t, !1);
      }),
      (t.prototype.recordSourceMappingNameStart = function (e) {
        if (this.sourceMapper) {
          var t = -1;
          if (e) {
            if (this.sourceMapper.currentNameIndex.length > 0) {
              var n = this.sourceMapper.currentNameIndex[
                this.sourceMapper.currentNameIndex.length - 1
              ];
              -1 !== n && (e = this.sourceMapper.names[n] + "." + e);
            }
            var t = this.sourceMapper.names.length - 1;
            for (t; t >= 0 && this.sourceMapper.names[t] !== e; t--);
            -1 === t &&
              ((t = this.sourceMapper.names.length),
              this.sourceMapper.names.push(e));
          }
          this.sourceMapper.currentNameIndex.push(t);
        }
      }),
      (t.prototype.recordSourceMappingNameEnd = function () {
        this.sourceMapper && this.sourceMapper.currentNameIndex.pop();
      }),
      (t.prototype.recordSourceMappingStart = function (t) {
        if (this.sourceMapper && e.ASTHelpers.isValidAstNode(t)) {
          var n = { line: -1, character: -1 },
            r = new e.SourceMapping();
          (r.start.emittedColumn = this.emitState.column),
            (r.start.emittedLine = this.emitState.line);
          var i = this.document.lineMap();
          i.fillLineAndCharacterFromPosition(t.start(), n),
            (r.start.sourceColumn = n.character),
            (r.start.sourceLine = n.line + 1),
            i.fillLineAndCharacterFromPosition(t.end(), n),
            (r.end.sourceColumn = n.character),
            (r.end.sourceLine = n.line + 1),
            e.Debug.assert(!isNaN(r.start.emittedColumn)),
            e.Debug.assert(!isNaN(r.start.emittedLine)),
            e.Debug.assert(!isNaN(r.start.sourceColumn)),
            e.Debug.assert(!isNaN(r.start.sourceLine)),
            e.Debug.assert(!isNaN(r.end.sourceColumn)),
            e.Debug.assert(!isNaN(r.end.sourceLine)),
            this.sourceMapper.currentNameIndex.length > 0 &&
              (r.nameIndex = this.sourceMapper.currentNameIndex[
                this.sourceMapper.currentNameIndex.length - 1
              ]);
          var o = this.sourceMapper.currentMappings[
            this.sourceMapper.currentMappings.length - 1
          ];
          o.push(r),
            this.sourceMapper.currentMappings.push(r.childMappings),
            this.sourceMapper.increaseMappingLevel(t);
        }
      }),
      (t.prototype.recordSourceMappingEnd = function (t) {
        if (this.sourceMapper && e.ASTHelpers.isValidAstNode(t)) {
          this.sourceMapper.currentMappings.pop();
          var n = this.sourceMapper.currentMappings[
              this.sourceMapper.currentMappings.length - 1
            ],
            r = n[n.length - 1];
          (r.end.emittedColumn = this.emitState.column),
            (r.end.emittedLine = this.emitState.line),
            e.Debug.assert(!isNaN(r.end.emittedColumn)),
            e.Debug.assert(!isNaN(r.end.emittedLine)),
            this.sourceMapper.decreaseMappingLevel(t);
        }
      }),
      (t.prototype.getOutputFiles = function () {
        var e = [];
        return (
          null !== this.sourceMapper &&
            (this.sourceMapper.emitSourceMapping(),
            e.push(this.sourceMapper.getOutputFile())),
          e.push(this.outfile.getOutputFile()),
          e
        );
      }),
      (t.prototype.emitParameterPropertyAndMemberVariableAssignments = function () {
        var t = n(this.thisClassNode);
        if (t)
          for (
            var r = 0,
              i = t.callSignature.parameterList.parameters.nonSeparatorCount();
            i > r;
            r++
          ) {
            var o = t.callSignature.parameterList.parameters.nonSeparatorAt(r),
              s = this.semanticInfoChain.getDeclForAST(o);
            e.hasFlag(s.flags, 8388608) &&
              (this.emitIndent(),
              this.recordSourceMappingStart(o),
              this.writeToOutputWithSourceMapRecord(
                "this." + o.identifier.text(),
                o.identifier
              ),
              this.writeToOutput(" = "),
              this.writeToOutputWithSourceMapRecord(
                o.identifier.text(),
                o.identifier
              ),
              this.writeLineToOutput(";"),
              this.recordSourceMappingEnd(o));
          }
        for (
          var r = 0, i = this.thisClassNode.classElements.childCount();
          i > r;
          r++
        )
          if (136 === this.thisClassNode.classElements.childAt(r).kind()) {
            var a = this.thisClassNode.classElements.childAt(r);
            !e.hasModifier(a.modifiers, 16) &&
              a.variableDeclarator.equalsValueClause &&
              (this.emitIndent(),
              this.emitMemberVariableDeclaration(a),
              this.writeLineToOutput(""));
          }
      }),
      (t.prototype.isOnSameLine = function (e, t) {
        var n = this.document.lineMap();
        return (
          n.getLineNumberFromPosition(e) === n.getLineNumberFromPosition(t)
        );
      }),
      (t.prototype.emitCommaSeparatedList = function (e, t, n, r) {
        if (null !== t && 0 !== t.nonSeparatorCount()) {
          var i = r && !this.isOnSameLine(e.end(), t.nonSeparatorAt(0).end());
          r && this.indenter.increaseIndent(),
            i ? this.writeLineToOutput("") : this.writeToOutput(n);
          for (var o = 0, s = t.nonSeparatorCount(); s > o; o++) {
            var a = t.nonSeparatorAt(o);
            this.emitJavascript(a, i),
              s - 1 > o &&
                ((i =
                  r &&
                  !this.isOnSameLine(a.end(), t.nonSeparatorAt(o + 1).start())),
                i ? this.writeLineToOutput(",") : this.writeToOutput(", "));
          }
          r && this.indenter.decreaseIndent(),
            r &&
            !this.isOnSameLine(
              e.end(),
              t.nonSeparatorAt(t.nonSeparatorCount() - 1).end()
            )
              ? (this.writeLineToOutput(""), this.emitIndent())
              : this.writeToOutput(n);
        }
      }),
      (t.prototype.emitList = function (e, t, n, r) {
        if (
          ("undefined" == typeof t && (t = !0),
          "undefined" == typeof n && (n = 0),
          "undefined" == typeof r && (r = e.childCount()),
          null !== e)
        ) {
          this.emitComments(e, !0);
          for (var i = null, o = n; r > o; o++) {
            var s = e.childAt(o);
            this.shouldEmit(s) &&
              (this.emitSpaceBetweenConstructs(i, s),
              this.emitJavascript(s, !0),
              t && this.writeLineToOutput(""),
              (i = s));
          }
          this.emitComments(e, !1);
        }
      }),
      (t.prototype.emitSeparatedList = function (e, t, n, r) {
        if (
          ("undefined" == typeof t && (t = !0),
          "undefined" == typeof n && (n = 0),
          "undefined" == typeof r && (r = e.nonSeparatorCount()),
          null !== e)
        ) {
          this.emitComments(e, !0);
          for (var i = null, o = n; r > o; o++) {
            var s = e.nonSeparatorAt(o);
            this.shouldEmit(s) &&
              (this.emitSpaceBetweenConstructs(i, s),
              this.emitJavascript(s, !0),
              t && this.writeLineToOutput(""),
              (i = s));
          }
          this.emitComments(e, !1);
        }
      }),
      (t.prototype.isDirectivePrologueElement = function (e) {
        if (149 === e.kind()) {
          var t = e;
          return 14 === t.expression.kind();
        }
        return !1;
      }),
      (t.prototype.emitSpaceBetweenConstructs = function (e, t) {
        if (
          null !== e &&
          null !== t &&
          -1 !== e.start() &&
          -1 !== e.end() &&
          -1 !== t.start() &&
          -1 !== t.end()
        ) {
          var n = this.document.lineMap(),
            r = n.getLineNumberFromPosition(e.end()),
            i = n.getLineNumberFromPosition(t.start());
          i - r > 1 && this.writeLineToOutput("", !0);
        }
      }),
      (t.prototype.getDetachedComments = function (t) {
        var n = t.preComments();
        if (n) {
          for (
            var r = this.document.lineMap(),
              i = [],
              o = null,
              s = 0,
              a = n.length;
            a > s;
            s++
          ) {
            var l = n[s];
            if (o) {
              var c = r.getLineNumberFromPosition(o.end()),
                u = r.getLineNumberFromPosition(l.start());
              if (u >= c + 2) return i;
            }
            i.push(l), (o = l);
          }
          var c = r.getLineNumberFromPosition(e.ArrayUtilities.last(i).end()),
            p = r.getLineNumberFromPosition(t.start());
          if (p >= c + 2) return i;
        }
        return [];
      }),
      (t.prototype.emitPossibleCopyrightHeaders = function (e) {
        this.emitDetachedComments(e.moduleElements);
      }),
      (t.prototype.emitDetachedComments = function (e) {
        if (e.childCount() > 0) {
          var t = e.childAt(0);
          (this.detachedCommentsElement = t),
            this.emitCommentsArray(
              this.getDetachedComments(this.detachedCommentsElement),
              !1
            );
        }
      }),
      (t.prototype.emitScriptElements = function (t) {
        var n = t.moduleElements;
        this.emitPossibleCopyrightHeaders(t);
        for (var r = 0, i = n.childCount(); i > r; r++) {
          var o = n.childAt(r);
          if (!this.isDirectivePrologueElement(o)) break;
          this.emitJavascript(o, !0), this.writeLineToOutput("");
        }
        this.emitPrologue(t);
        var s = this.document.isExternalModule(),
          a = s && !e.ASTHelpers.scriptIsElided(t);
        if (
          a &&
          (this.recordSourceMappingStart(t),
          2 === this.emitOptions.compilationSettings().moduleGenTarget())
        ) {
          var l = '["require", "exports"',
            c = "require, exports",
            u = this.getModuleImportAndDependencyList(t);
          (c += u.importList),
            (l += u.dependencyList + "]"),
            this.writeLineToOutput("define(" + l + ", function(" + c + ") {");
        }
        if (s) {
          var p = this.setContainer(2),
            h = this.moduleName;
          (this.moduleName = t.fileName()),
            e.isTSFile(this.moduleName) &&
              (this.moduleName = this.moduleName.substring(
                0,
                this.moduleName.length - ".ts".length
              )),
            this.setExportAssignmentIdentifier(null),
            2 === this.emitOptions.compilationSettings().moduleGenTarget() &&
              this.indenter.increaseIndent();
          var d = this.semanticInfoChain.getDeclForAST(
            this.document.sourceUnit()
          );
          e.hasFlag(d.flags, 262144) && this.writeCaptureThisStatement(t),
            this.pushDecl(d);
        }
        if ((this.emitList(n, !0, r, i), s)) {
          if (
            (2 === this.emitOptions.compilationSettings().moduleGenTarget() &&
              this.indenter.decreaseIndent(),
            a)
          ) {
            var m = this.getExportAssignmentIdentifier(),
              f = d.getSymbol().getExportAssignedValueSymbol();
            2 === this.emitOptions.compilationSettings().moduleGenTarget()
              ? (!m ||
                  !f ||
                  58720272 & f.kind ||
                  (this.indenter.increaseIndent(),
                  this.emitIndent(),
                  this.writeLineToOutput("return " + m + ";"),
                  this.indenter.decreaseIndent()),
                this.writeToOutput("});"))
              : !m ||
                !f ||
                58720272 & f.kind ||
                (this.emitIndent(),
                this.writeToOutput("module.exports = " + m + ";")),
              this.recordSourceMappingEnd(t),
              this.writeLineToOutput("");
          }
          this.setContainer(p), (this.moduleName = h), this.popDecl(d);
        }
      }),
      (t.prototype.emitConstructorStatements = function (t) {
        var n = t.block.statements;
        if (null !== n) {
          this.emitComments(n, !0);
          for (
            var r =
                null !==
                e.ASTHelpers.getExtendsHeritageClause(
                  this.thisClassNode.heritageClauses
                ),
              i = r ? 1 : 0,
              o = null,
              s = 0,
              a = n.childCount();
            a > s;
            s++
          ) {
            s === i && this.emitParameterPropertyAndMemberVariableAssignments();
            var l = n.childAt(s);
            this.shouldEmit(l) &&
              (this.emitSpaceBetweenConstructs(o, l),
              this.emitJavascript(l, !0),
              this.writeLineToOutput(""),
              (o = l));
          }
          s === i && this.emitParameterPropertyAndMemberVariableAssignments(),
            this.emitComments(n, !1);
        }
      }),
      (t.prototype.emitJavascript = function (e, t) {
        null !== e &&
          (t && this.indenter.indentAmt > 0 && this.emitIndent(), this.emit(e));
      }),
      (t.prototype.emitAccessorMemberDeclaration = function (t, n, r, i) {
        if (139 !== t.kind()) {
          var o = e.PullHelpers.getAccessorSymbol(t, this.semanticInfoChain);
          if (o.getGetter()) return;
        }
        this.emitIndent(),
          this.recordSourceMappingStart(t),
          this.writeToOutput("Object.defineProperty(" + r),
          i ? this.writeToOutput(".prototype, ") : this.writeToOutput(", ");
        var s = n.text();
        e.isQuoted(s)
          ? this.writeToOutput(s)
          : this.writeToOutput('"' + s + '"'),
          this.writeLineToOutput(", {"),
          this.indenter.increaseIndent();
        var a = e.PullHelpers.getGetterAndSetterFunction(
          t,
          this.semanticInfoChain
        );
        a.getter &&
          (this.emitIndent(),
          this.recordSourceMappingStart(a.getter),
          this.emitComments(a.getter, !0),
          this.writeToOutput("get: "),
          this.emitAccessorBody(
            a.getter,
            a.getter.parameterList,
            a.getter.block
          ),
          this.writeLineToOutput(",")),
          a.setter &&
            (this.emitIndent(),
            this.recordSourceMappingStart(a.setter),
            this.emitComments(a.setter, !0),
            this.writeToOutput("set: "),
            this.emitAccessorBody(
              a.setter,
              a.setter.parameterList,
              a.setter.block
            ),
            this.writeLineToOutput(",")),
          this.emitIndent(),
          this.writeLineToOutput("enumerable: true,"),
          this.emitIndent(),
          this.writeLineToOutput("configurable: true"),
          this.indenter.decreaseIndent(),
          this.emitIndent(),
          this.writeLineToOutput("});"),
          this.recordSourceMappingEnd(t);
      }),
      (t.prototype.emitAccessorBody = function (t, n, r) {
        var i = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(i),
          this.recordSourceMappingStart(t),
          this.writeToOutput("function "),
          this.writeToOutput("(");
        var o = e.ASTHelpers.parametersFromParameterList(n);
        this.emitFunctionParameters(o),
          this.writeToOutput(")"),
          this.emitFunctionBodyStatements(null, t, o, r, null),
          this.recordSourceMappingEnd(t),
          this.recordSourceMappingEnd(t),
          this.popDecl(i);
      }),
      (t.prototype.emitClass = function (t) {
        var r = this.semanticInfoChain.getDeclForAST(t);
        this.pushDecl(r);
        var i = this.thisClassNode;
        this.thisClassNode = t;
        var o = t.identifier.text();
        this.emitComments(t, !0);
        var s = this.setContainer(3);
        this.recordSourceMappingStart(t), this.writeToOutput("var " + o);
        var a =
            null !== e.ASTHelpers.getExtendsHeritageClause(t.heritageClauses),
          l = null;
        a
          ? this.writeLineToOutput(" = (function (_super) {")
          : this.writeLineToOutput(" = (function () {"),
          this.recordSourceMappingNameStart(o),
          this.indenter.increaseIndent(),
          a &&
            ((l = e.ASTHelpers.getExtendsHeritageClause(
              t.heritageClauses
            ).typeNames.nonSeparatorAt(0)),
            this.emitIndent(),
            this.writeLineToOutput("__extends(" + o + ", _super);")),
          this.emitIndent();
        var c = n(t);
        if (
          (c
            ? (this.emit(c), this.writeLineToOutput(""))
            : (this.recordSourceMappingStart(t),
              this.indenter.increaseIndent(),
              this.writeLineToOutput(
                "function " + t.identifier.text() + "() {"
              ),
              this.recordSourceMappingNameStart("constructor"),
              a &&
                (this.emitIndent(),
                this.writeLineToOutput("_super.apply(this, arguments);")),
              this.shouldCaptureThis(t) && this.writeCaptureThisStatement(t),
              this.emitParameterPropertyAndMemberVariableAssignments(),
              this.indenter.decreaseIndent(),
              this.emitIndent(),
              this.writeLineToOutput("}"),
              this.recordSourceMappingNameEnd(),
              this.recordSourceMappingEnd(t)),
          this.emitClassMembers(t),
          this.emitIndent(),
          this.writeToOutputWithSourceMapRecord(
            "return " + o + ";",
            t.closeBraceToken
          ),
          this.writeLineToOutput(""),
          this.indenter.decreaseIndent(),
          this.emitIndent(),
          this.writeToOutputWithSourceMapRecord("}", t.closeBraceToken),
          this.recordSourceMappingNameEnd(),
          this.recordSourceMappingStart(t),
          this.writeToOutput(")("),
          a && this.emitJavascript(l, !1),
          this.writeToOutput(");"),
          this.recordSourceMappingEnd(t),
          (1 === s || 2 === s) && e.hasFlag(r.flags, 1))
        ) {
          this.writeLineToOutput(""), this.emitIndent();
          var u = 1 === s ? this.moduleName : "exports";
          this.writeToOutputWithSourceMapRecord(
            u + "." + o + " = " + o + ";",
            t
          );
        }
        this.recordSourceMappingEnd(t),
          this.emitComments(t, !1),
          this.setContainer(s),
          (this.thisClassNode = i),
          this.popDecl(r);
      }),
      (t.prototype.emitClassMembers = function (t) {
        for (
          var n = null, r = 0, i = t.classElements.childCount();
          i > r;
          r++
        ) {
          var o = t.classElements.childAt(r);
          if (139 === o.kind()) {
            this.emitSpaceBetweenConstructs(n, o);
            var s = o;
            this.emitAccessorMemberDeclaration(
              s,
              s.propertyName,
              t.identifier.text(),
              !e.hasModifier(s.modifiers, 16)
            ),
              (n = o);
          } else if (140 === o.kind()) {
            this.emitSpaceBetweenConstructs(n, o);
            var a = o;
            this.emitAccessorMemberDeclaration(
              a,
              a.propertyName,
              t.identifier.text(),
              !e.hasModifier(a.modifiers, 16)
            ),
              (n = o);
          } else if (135 === o.kind()) {
            var l = o;
            l.block &&
              (this.emitSpaceBetweenConstructs(n, o),
              this.emitClassMemberFunctionDeclaration(t, l),
              (n = o));
          }
        }
        for (var r = 0, i = t.classElements.childCount(); i > r; r++) {
          var o = t.classElements.childAt(r);
          if (136 === o.kind()) {
            var c = o;
            if (
              e.hasModifier(c.modifiers, 16) &&
              c.variableDeclarator.equalsValueClause
            ) {
              this.emitSpaceBetweenConstructs(n, c),
                this.emitIndent(),
                this.recordSourceMappingStart(c);
              var u = c.variableDeclarator.propertyName.text();
              e.isQuoted(u) || 11 !== c.variableDeclarator.propertyName.kind()
                ? this.writeToOutput(t.identifier.text() + "[" + u + "]")
                : this.writeToOutput(t.identifier.text() + "." + u),
                this.emit(c.variableDeclarator.equalsValueClause),
                this.recordSourceMappingEnd(c),
                this.writeLineToOutput(";"),
                (n = c);
            }
          }
        }
      }),
      (t.prototype.emitClassMemberFunctionDeclaration = function (t, n) {
        this.emitIndent(),
          this.recordSourceMappingStart(n),
          this.emitComments(n, !0);
        var r = n.propertyName.text();
        this.writeToOutput(t.identifier.text()),
          e.hasModifier(n.modifiers, 16) || this.writeToOutput(".prototype"),
          e.isQuoted(r) || 11 !== n.propertyName.kind()
            ? this.writeToOutput("[" + r + "] = ")
            : this.writeToOutput("." + r + " = ");
        var i = this.semanticInfoChain.getDeclForAST(n);
        this.pushDecl(i),
          this.recordSourceMappingStart(n),
          this.writeToOutput("function "),
          this.emitParameterList(n.callSignature.parameterList);
        var o = e.ASTHelpers.parametersFromParameterList(
          n.callSignature.parameterList
        );
        this.emitFunctionBodyStatements(
          n.propertyName.text(),
          n,
          o,
          n.block,
          null
        ),
          this.recordSourceMappingEnd(n),
          this.emitComments(n, !1),
          this.recordSourceMappingEnd(n),
          this.popDecl(i),
          this.writeLineToOutput(";");
      }),
      (t.prototype.requiresExtendsBlock = function (t) {
        for (var n = 0, r = t.childCount(); r > n; n++) {
          var i = t.childAt(n);
          if (130 === i.kind()) {
            var o = i;
            if (
              !e.hasModifier(o.modifiers, 8) &&
              this.requiresExtendsBlock(o.moduleElements)
            )
              return !0;
          } else if (131 === i.kind()) {
            var s = i;
            if (
              !e.hasModifier(s.modifiers, 8) &&
              null !== e.ASTHelpers.getExtendsHeritageClause(s.heritageClauses)
            )
              return !0;
          }
        }
        return !1;
      }),
      (t.prototype.emitPrologue = function (e) {
        this.extendsPrologueEmitted ||
          (this.requiresExtendsBlock(e.moduleElements) &&
            ((this.extendsPrologueEmitted = !0),
            this.writeLineToOutput(
              "var __extends = this.__extends || function (d, b) {"
            ),
            this.writeLineToOutput(
              "    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];"
            ),
            this.writeLineToOutput(
              "    function __() { this.constructor = d; }"
            ),
            this.writeLineToOutput("    __.prototype = b.prototype;"),
            this.writeLineToOutput("    d.prototype = new __();"),
            this.writeLineToOutput("};"))),
          this.globalThisCapturePrologueEmitted ||
            (this.shouldCaptureThis(e) &&
              ((this.globalThisCapturePrologueEmitted = !0),
              this.writeLineToOutput(this.captureThisStmtString)));
      }),
      (t.prototype.emitThis = function () {
        !this.inWithBlock && this.inArrowFunction
          ? this.writeToOutput("_this")
          : this.writeToOutput("this");
      }),
      (t.prototype.emitBlockOrStatement = function (e) {
        146 === e.kind()
          ? this.emit(e)
          : (this.writeLineToOutput(""),
            this.indenter.increaseIndent(),
            this.emitJavascript(e, !0),
            this.indenter.decreaseIndent());
      }),
      (t.prototype.emitLiteralExpression = function (t) {
        switch (t.kind()) {
          case 32:
            this.writeToOutputWithSourceMapRecord("null", t);
            break;
          case 24:
            this.writeToOutputWithSourceMapRecord("false", t);
            break;
          case 37:
            this.writeToOutputWithSourceMapRecord("true", t);
            break;
          default:
            throw e.Errors.abstract();
        }
      }),
      (t.prototype.emitThisExpression = function (e) {
        !this.inWithBlock && this.inArrowFunction
          ? this.writeToOutputWithSourceMapRecord("_this", e)
          : this.writeToOutputWithSourceMapRecord("this", e);
      }),
      (t.prototype.emitSuperExpression = function (e) {
        this.writeToOutputWithSourceMapRecord("_super.prototype", e);
      }),
      (t.prototype.emitParenthesizedExpression = function (e) {
        220 === e.expression.kind() && null === e.openParenTrailingComments
          ? this.emit(e.expression)
          : (this.recordSourceMappingStart(e),
            this.writeToOutput("("),
            this.emitCommentsArray(e.openParenTrailingComments, !1),
            this.emit(e.expression),
            this.writeToOutput(")"),
            this.recordSourceMappingEnd(e));
      }),
      (t.prototype.emitCastExpression = function (e) {
        this.emit(e.expression);
      }),
      (t.prototype.emitPrefixUnaryExpression = function (t) {
        var n = t.kind();
        switch ((this.recordSourceMappingStart(t), n)) {
          case 167:
            this.writeToOutput("!"), this.emit(t.operand);
            break;
          case 166:
            this.writeToOutput("~"), this.emit(t.operand);
            break;
          case 165:
            this.writeToOutput("-"),
              (165 === t.operand.kind() || 169 === t.operand.kind()) &&
                this.writeToOutput(" "),
              this.emit(t.operand);
            break;
          case 164:
            this.writeToOutput("+"),
              (164 === t.operand.kind() || 168 === t.operand.kind()) &&
                this.writeToOutput(" "),
              this.emit(t.operand);
            break;
          case 168:
            this.writeToOutput("++"), this.emit(t.operand);
            break;
          case 169:
            this.writeToOutput("--"), this.emit(t.operand);
            break;
          default:
            throw e.Errors.abstract();
        }
        this.recordSourceMappingEnd(t);
      }),
      (t.prototype.emitPostfixUnaryExpression = function (t) {
        var n = t.kind();
        switch ((this.recordSourceMappingStart(t), n)) {
          case 210:
            this.emit(t.operand), this.writeToOutput("++");
            break;
          case 211:
            this.emit(t.operand), this.writeToOutput("--");
            break;
          default:
            throw e.Errors.abstract();
        }
        this.recordSourceMappingEnd(t);
      }),
      (t.prototype.emitTypeOfExpression = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("typeof "),
          this.emit(e.expression),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitDeleteExpression = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("delete "),
          this.emit(e.expression),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitVoidExpression = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("void "),
          this.emit(e.expression),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.canEmitDottedNameMemberAccessExpression = function (t) {
        var n = t.expression.kind();
        if (11 === n || 212 == n) {
          var r = this.getSymbolForEmit(t).symbol,
            i = this.getSymbolForEmit(t.expression).symbol;
          if (
            r &&
            i &&
            !this.semanticInfoChain.getAliasSymbolForAST(t.expression) &&
            (e.PullHelpers.symbolIsModule(i) ||
              64 === i.kind ||
              i.anyDeclHasFlag(36864))
          ) {
            var o = r.kind;
            if (
              4096 === o ||
              67108864 === o ||
              (r.anyDeclHasFlag(1) && 512 === o && !r.anyDeclHasFlag(36864)) ||
              (r.anyDeclHasFlag(1) &&
                !this.symbolIsUsedInItsEnclosingContainer(r))
            )
              return 212 === n
                ? this.canEmitDottedNameMemberAccessExpression(t.expression)
                : !0;
          }
        }
        return !1;
      }),
      (t.prototype.emitDottedNameMemberAccessExpressionWorker = function (
        e,
        t,
        n,
        r
      ) {
        this.recordSourceMappingStart(e),
          212 === e.expression.kind()
            ? this.emitDottedNameMemberAccessExpressionRecurse(
                e.expression,
                t,
                n,
                r - 1
              )
            : (this.emitComments(e.expression, !0),
              this.recordSourceMappingStart(e.expression),
              this.emitDottedNameFromDeclPath(t, n, r - 2),
              this.writeToOutput(e.expression.text()),
              this.recordSourceMappingEnd(e.expression),
              this.emitComments(e.expression, !1)),
          this.writeToOutput("."),
          this.emitName(e.name, !1),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitDottedNameMemberAccessExpressionRecurse = function (
        t,
        n,
        r,
        i
      ) {
        this.emitComments(t, !0),
          1 > i - r && ((r = i - 1), e.Debug.assert(r >= 0)),
          this.emitDottedNameMemberAccessExpressionWorker(t, n, r, i),
          this.emitComments(t, !1);
      }),
      (t.prototype.emitDottedNameMemberAccessExpression = function (e) {
        var t = this.getSymbolForEmit(e).symbol,
          n = this.getPotentialDeclPathInfoForEmit(t);
        this.emitDottedNameMemberAccessExpressionWorker(
          e,
          n.potentialPath,
          n.startingIndex,
          n.potentialPath.length
        );
      }),
      (t.prototype.emitMemberAccessExpression = function (e) {
        this.tryEmitConstant(e) ||
          (this.canEmitDottedNameMemberAccessExpression(e)
            ? this.emitDottedNameMemberAccessExpression(e)
            : (this.recordSourceMappingStart(e),
              this.emit(e.expression),
              this.writeToOutput("."),
              this.emitName(e.name, !1),
              this.recordSourceMappingEnd(e)));
      }),
      (t.prototype.emitQualifiedName = function (e) {
        this.recordSourceMappingStart(e),
          this.emit(e.left),
          this.writeToOutput("."),
          this.emitName(e.right, !1),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitBinaryExpression = function (t) {
        switch ((this.recordSourceMappingStart(t), t.kind())) {
          case 173:
            this.emit(t.left), this.writeToOutput(", "), this.emit(t.right);
            break;
          default:
            this.emit(t.left);
            var n = e.SyntaxFacts.getText(
              e.SyntaxFacts.getOperatorTokenFromBinaryExpression(t.kind())
            );
            "instanceof" === n
              ? this.writeToOutput(" instanceof ")
              : "in" === n
              ? this.writeToOutput(" in ")
              : this.writeToOutput(" " + n + " "),
              this.emit(t.right);
        }
        this.recordSourceMappingEnd(t);
      }),
      (t.prototype.emitSimplePropertyAssignment = function (e) {
        this.recordSourceMappingStart(e),
          this.emit(e.propertyName),
          this.writeToOutput(": "),
          this.emit(e.expression),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitFunctionPropertyAssignment = function (t) {
        this.recordSourceMappingStart(t),
          this.emit(t.propertyName),
          this.writeToOutput(": ");
        var n = (this.semanticInfoChain.getDeclForAST(t), this.inArrowFunction);
        this.inArrowFunction = !1;
        var r = this.setContainer(5),
          i = (t.propertyName, this.semanticInfoChain.getDeclForAST(t));
        this.pushDecl(i),
          this.recordSourceMappingStart(t),
          this.writeToOutput("function "),
          this.writeToOutput("(");
        var o = e.ASTHelpers.parametersFromParameterList(
          t.callSignature.parameterList
        );
        this.emitFunctionParameters(o),
          this.writeToOutput(")"),
          this.emitFunctionBodyStatements(
            t.propertyName.text(),
            t,
            o,
            t.block,
            null
          ),
          this.recordSourceMappingEnd(t),
          this.recordSourceMappingEnd(t),
          this.emitComments(t, !1),
          this.popDecl(i),
          this.setContainer(r),
          (this.inArrowFunction = n);
      }),
      (t.prototype.emitConditionalExpression = function (e) {
        this.emit(e.condition),
          this.writeToOutput(" ? "),
          this.emit(e.whenTrue),
          this.writeToOutput(" : "),
          this.emit(e.whenFalse);
      }),
      (t.prototype.emitThrowStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("throw "),
          this.emit(e.expression),
          this.recordSourceMappingEnd(e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitExpressionStatement = function (e) {
        var t = 219 === e.expression.kind() || 218 === e.expression.kind();
        this.recordSourceMappingStart(e),
          t && this.writeToOutput("("),
          this.emit(e.expression),
          t && this.writeToOutput(")"),
          this.recordSourceMappingEnd(e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitLabeledStatement = function (e) {
        this.writeToOutputWithSourceMapRecord(
          e.identifier.text(),
          e.identifier
        ),
          this.writeLineToOutput(":"),
          this.emitJavascript(e.statement, !0);
      }),
      (t.prototype.emitBlock = function (e) {
        this.recordSourceMappingStart(e),
          this.writeLineToOutput(" {"),
          this.indenter.increaseIndent(),
          e.statements && this.emitList(e.statements),
          this.emitCommentsArray(e.closeBraceLeadingComments, !1),
          this.indenter.decreaseIndent(),
          this.emitIndent(),
          this.writeToOutput("}"),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitBreakStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("break"),
          e.identifier && this.writeToOutput(" " + e.identifier.text()),
          this.recordSourceMappingEnd(e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitContinueStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("continue"),
          e.identifier && this.writeToOutput(" " + e.identifier.text()),
          this.recordSourceMappingEnd(e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitWhileStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("while ("),
          this.emit(e.condition),
          this.writeToOutput(")"),
          this.emitBlockOrStatement(e.statement),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitDoStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("do"),
          this.emitBlockOrStatement(e.statement),
          this.writeToOutputWithSourceMapRecord(" while", e.whileKeyword),
          this.writeToOutput("("),
          this.emit(e.condition),
          this.writeToOutput(")"),
          this.recordSourceMappingEnd(e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitIfStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("if ("),
          this.emit(e.condition),
          this.writeToOutput(")"),
          this.emitBlockOrStatement(e.statement),
          e.elseClause &&
            (146 !== e.statement.kind()
              ? (this.writeLineToOutput(""), this.emitIndent())
              : this.writeToOutput(" "),
            this.emit(e.elseClause)),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitElseClause = function (e) {
        147 === e.statement.kind()
          ? (this.writeToOutput("else "), this.emit(e.statement))
          : (this.writeToOutput("else"),
            this.emitBlockOrStatement(e.statement));
      }),
      (t.prototype.emitReturnStatement = function (e) {
        this.recordSourceMappingStart(e),
          e.expression
            ? (this.writeToOutput("return "), this.emit(e.expression))
            : this.writeToOutput("return"),
          this.recordSourceMappingEnd(e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitForInStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("for ("),
          e.left ? this.emit(e.left) : this.emit(e.variableDeclaration),
          this.writeToOutput(" in "),
          this.emit(e.expression),
          this.writeToOutput(")"),
          this.emitBlockOrStatement(e.statement),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitForStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("for ("),
          e.variableDeclaration
            ? this.emit(e.variableDeclaration)
            : e.initializer && this.emit(e.initializer),
          this.writeToOutput("; "),
          this.emitJavascript(e.condition, !1),
          this.writeToOutput(";"),
          e.incrementor &&
            (this.writeToOutput(" "), this.emitJavascript(e.incrementor, !1)),
          this.writeToOutput(")"),
          this.emitBlockOrStatement(e.statement),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitWithStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("with ("),
          e.condition && this.emit(e.condition),
          this.writeToOutput(")");
        var t = this.inWithBlock;
        (this.inWithBlock = !0),
          this.emitBlockOrStatement(e.statement),
          (this.inWithBlock = t),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitSwitchStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("switch ("),
          this.emit(e.expression),
          this.recordSourceMappingStart(e.closeParenToken),
          this.writeToOutput(")"),
          this.recordSourceMappingEnd(e.closeParenToken),
          this.writeLineToOutput(" {"),
          this.indenter.increaseIndent(),
          this.emitList(e.switchClauses, !1),
          this.indenter.decreaseIndent(),
          this.emitIndent(),
          this.writeToOutput("}"),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitCaseSwitchClause = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("case "),
          this.emit(e.expression),
          this.writeToOutput(":"),
          this.emitSwitchClauseBody(e.statements),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitSwitchClauseBody = function (e) {
        1 === e.childCount() && 146 === e.childAt(0).kind()
          ? (this.emit(e.childAt(0)), this.writeLineToOutput(""))
          : (this.writeLineToOutput(""),
            this.indenter.increaseIndent(),
            this.emit(e),
            this.indenter.decreaseIndent());
      }),
      (t.prototype.emitDefaultSwitchClause = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("default:"),
          this.emitSwitchClauseBody(e.statements),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitTryStatement = function (e) {
        this.recordSourceMappingStart(e),
          this.writeToOutput("try "),
          this.emit(e.block),
          this.emitJavascript(e.catchClause, !1),
          e.finallyClause && this.emit(e.finallyClause),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitCatchClause = function (e) {
        this.writeToOutput(" "),
          this.recordSourceMappingStart(e),
          this.writeToOutput("catch ("),
          this.emit(e.identifier),
          this.writeToOutput(")"),
          this.emit(e.block),
          this.recordSourceMappingEnd(e);
      }),
      (t.prototype.emitFinallyClause = function (e) {
        this.writeToOutput(" finally"), this.emit(e.block);
      }),
      (t.prototype.emitDebuggerStatement = function (e) {
        this.writeToOutputWithSourceMapRecord("debugger", e),
          this.writeToOutput(";");
      }),
      (t.prototype.emitNumericLiteral = function (e) {
        this.writeToOutputWithSourceMapRecord(e.text(), e);
      }),
      (t.prototype.emitRegularExpressionLiteral = function (e) {
        this.writeToOutputWithSourceMapRecord(e.text(), e);
      }),
      (t.prototype.emitStringLiteral = function (e) {
        this.writeToOutputWithSourceMapRecord(e.text(), e);
      }),
      (t.prototype.emitEqualsValueClause = function (e) {
        this.writeToOutput(" = "), this.emit(e.value);
      }),
      (t.prototype.emitParameter = function (e) {
        this.writeToOutputWithSourceMapRecord(e.identifier.text(), e);
      }),
      (t.prototype.emitConstructorDeclaration = function (e) {
        e.block ? this.emitConstructor(e) : this.emitComments(e, !0, !0);
      }),
      (t.prototype.shouldEmitFunctionDeclaration = function (t) {
        return (
          null !== t.preComments() ||
          (!e.hasModifier(t.modifiers, 8) && null !== t.block)
        );
      }),
      (t.prototype.emitFunctionDeclaration = function (t) {
        e.hasModifier(t.modifiers, 8) || null === t.block
          ? this.emitComments(t, !0, !0)
          : this.emitFunction(t);
      }),
      (t.prototype.emitSourceUnit = function (e) {
        if (!this.document.isDeclareFile()) {
          var t = this.semanticInfoChain.getDeclForAST(e);
          this.pushDecl(t),
            this.emitScriptElements(e),
            this.popDecl(t),
            this.emitCommentsArray(e.endOfFileTokenLeadingComments, !1);
        }
      }),
      (t.prototype.shouldEmitEnumDeclaration = function (t) {
        return null !== t.preComments() || !e.ASTHelpers.enumIsElided(t);
      }),
      (t.prototype.emitEnumDeclaration = function (t) {
        e.ASTHelpers.enumIsElided(t)
          ? this.emitComments(t, !0, !0)
          : (this.emitComments(t, !0),
            this.emitEnum(t),
            this.emitComments(t, !1));
      }),
      (t.prototype.shouldEmitModuleDeclaration = function (t) {
        return null !== t.preComments() || !e.ASTHelpers.moduleIsElided(t);
      }),
      (t.prototype.emitModuleDeclaration = function (t) {
        e.ASTHelpers.moduleIsElided(t)
          ? this.emitComments(t, !0, !0)
          : this.emitModuleDeclarationWorker(t);
      }),
      (t.prototype.shouldEmitClassDeclaration = function (t) {
        return null !== t.preComments() || !e.hasModifier(t.modifiers, 8);
      }),
      (t.prototype.emitClassDeclaration = function (t) {
        e.hasModifier(t.modifiers, 8)
          ? this.emitComments(t, !0, !0)
          : this.emitClass(t);
      }),
      (t.prototype.shouldEmitInterfaceDeclaration = function (e) {
        return null !== e.preComments();
      }),
      (t.prototype.emitInterfaceDeclaration = function (e) {
        this.emitComments(e, !0, !0);
      }),
      (t.prototype.firstVariableDeclarator = function (e) {
        return e.declaration.declarators.nonSeparatorAt(0);
      }),
      (t.prototype.isNotAmbientOrHasInitializer = function (t) {
        return (
          !e.hasModifier(t.modifiers, 8) ||
          null !== this.firstVariableDeclarator(t).equalsValueClause
        );
      }),
      (t.prototype.shouldEmitVariableStatement = function (e) {
        return null !== e.preComments() || this.isNotAmbientOrHasInitializer(e);
      }),
      (t.prototype.emitVariableStatement = function (e) {
        this.isNotAmbientOrHasInitializer(e)
          ? (this.emitComments(e, !0),
            this.emit(e.declaration),
            this.writeToOutput(";"),
            this.emitComments(e, !1))
          : this.emitComments(e, !0, !0);
      }),
      (t.prototype.emitGenericType = function (e) {
        this.emit(e.name);
      }),
      (t.prototype.shouldEmit = function (e) {
        if (!e) return !1;
        switch (e.kind()) {
          case 133:
            return this.shouldEmitImportDeclaration(e);
          case 131:
            return this.shouldEmitClassDeclaration(e);
          case 128:
            return this.shouldEmitInterfaceDeclaration(e);
          case 129:
            return this.shouldEmitFunctionDeclaration(e);
          case 130:
            return this.shouldEmitModuleDeclaration(e);
          case 148:
            return this.shouldEmitVariableStatement(e);
          case 223:
            return !1;
          case 132:
            return this.shouldEmitEnumDeclaration(e);
        }
        return !0;
      }),
      (t.prototype.emit = function (e) {
        if (e) {
          switch (e.kind()) {
            case 2:
              return this.emitSeparatedList(e);
            case 1:
              return this.emitList(e);
            case 120:
              return this.emitSourceUnit(e);
            case 133:
              return this.emitImportDeclaration(e);
            case 134:
              return this.setExportAssignmentIdentifier(e.identifier.text());
            case 131:
              return this.emitClassDeclaration(e);
            case 128:
              return this.emitInterfaceDeclaration(e);
            case 11:
              return this.emitName(e, !0);
            case 225:
              return this.emitVariableDeclarator(e);
            case 219:
              return this.emitSimpleArrowFunctionExpression(e);
            case 218:
              return this.emitParenthesizedArrowFunctionExpression(e);
            case 129:
              return this.emitFunctionDeclaration(e);
            case 130:
              return this.emitModuleDeclaration(e);
            case 224:
              return this.emitVariableDeclaration(e);
            case 126:
              return this.emitGenericType(e);
            case 137:
              return this.emitConstructorDeclaration(e);
            case 132:
              return this.emitEnumDeclaration(e);
            case 243:
              return this.emitEnumElement(e);
            case 222:
              return this.emitFunctionExpression(e);
            case 148:
              return this.emitVariableStatement(e);
          }
          this.emitComments(e, !0),
            this.emitWorker(e),
            this.emitComments(e, !1);
        }
      }),
      (t.prototype.emitWorker = function (e) {
        if (e)
          switch (e.kind()) {
            case 13:
              return this.emitNumericLiteral(e);
            case 12:
              return this.emitRegularExpressionLiteral(e);
            case 14:
              return this.emitStringLiteral(e);
            case 24:
            case 32:
            case 37:
              return this.emitLiteralExpression(e);
            case 35:
              return this.emitThisExpression(e);
            case 50:
              return this.emitSuperExpression(e);
            case 217:
              return this.emitParenthesizedExpression(e);
            case 214:
              return this.emitArrayLiteralExpression(e);
            case 211:
            case 210:
              return this.emitPostfixUnaryExpression(e);
            case 167:
            case 166:
            case 165:
            case 164:
            case 168:
            case 169:
              return this.emitPrefixUnaryExpression(e);
            case 213:
              return this.emitInvocationExpression(e);
            case 221:
              return this.emitElementAccessExpression(e);
            case 212:
              return this.emitMemberAccessExpression(e);
            case 121:
              return this.emitQualifiedName(e);
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 187:
            case 188:
            case 189:
            case 190:
            case 191:
            case 192:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
              return this.emitBinaryExpression(e);
            case 186:
              return this.emitConditionalExpression(e);
            case 232:
              return this.emitEqualsValueClause(e);
            case 242:
              return this.emitParameter(e);
            case 146:
              return this.emitBlock(e);
            case 235:
              return this.emitElseClause(e);
            case 147:
              return this.emitIfStatement(e);
            case 149:
              return this.emitExpressionStatement(e);
            case 139:
              return this.emitGetAccessor(e);
            case 140:
              return this.emitSetAccessor(e);
            case 157:
              return this.emitThrowStatement(e);
            case 150:
              return this.emitReturnStatement(e);
            case 216:
              return this.emitObjectCreationExpression(e);
            case 151:
              return this.emitSwitchStatement(e);
            case 233:
              return this.emitCaseSwitchClause(e);
            case 234:
              return this.emitDefaultSwitchClause(e);
            case 152:
              return this.emitBreakStatement(e);
            case 153:
              return this.emitContinueStatement(e);
            case 154:
              return this.emitForStatement(e);
            case 155:
              return this.emitForInStatement(e);
            case 158:
              return this.emitWhileStatement(e);
            case 163:
              return this.emitWithStatement(e);
            case 220:
              return this.emitCastExpression(e);
            case 215:
              return this.emitObjectLiteralExpression(e);
            case 240:
              return this.emitSimplePropertyAssignment(e);
            case 241:
              return this.emitFunctionPropertyAssignment(e);
            case 156:
              return this.writeToOutputWithSourceMapRecord(";", e);
            case 159:
              return this.emitTryStatement(e);
            case 236:
              return this.emitCatchClause(e);
            case 237:
              return this.emitFinallyClause(e);
            case 160:
              return this.emitLabeledStatement(e);
            case 161:
              return this.emitDoStatement(e);
            case 171:
              return this.emitTypeOfExpression(e);
            case 170:
              return this.emitDeleteExpression(e);
            case 172:
              return this.emitVoidExpression(e);
            case 162:
              return this.emitDebuggerStatement(e);
          }
      }),
      t
    );
  })();
  (e.Emitter = a), (e.getLastConstructor = n), (e.getTrimmedTextLines = r);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {
      (this.prefix = ""), (this.suffix = "");
    }
    return (
      (e.prototype.isString = function () {
        return !1;
      }),
      (e.prototype.isArray = function () {
        return !1;
      }),
      (e.prototype.isMarker = function () {
        return !this.isString() && !this.isArray();
      }),
      (e.prototype.toString = function () {
        return e.memberNameToString(this);
      }),
      (e.memberNameToString = function (t, n, r) {
        "undefined" == typeof r && (r = 0);
        var i = t.prefix;
        if (t.isString()) i += t.text;
        else if (t.isArray())
          for (var o = t, s = 0; s < o.entries.length; s++)
            o.entries[s].isMarker()
              ? n && n.push(r + i.length)
              : ((i += e.memberNameToString(o.entries[s], n, r + i.length)),
                (i += o.delim));
        return (i += t.suffix);
      }),
      (e.create = function (e, t, i) {
        if ("string" == typeof e) return new n(e);
        var o = new r();
        return t && (o.prefix = t), i && (o.suffix = i), o.entries.push(e), o;
      }),
      e
    );
  })();
  e.MemberName = t;
  var n = (function (e) {
    function t(t) {
      e.call(this), (this.text = t);
    }
    return (
      __extends(t, e),
      (t.prototype.isString = function () {
        return !0;
      }),
      t
    );
  })(t);
  e.MemberNameString = n;
  var r = (function (e) {
    function t() {
      e.call(this), (this.delim = ""), (this.entries = []);
    }
    return (
      __extends(t, e),
      (t.prototype.isArray = function () {
        return !0;
      }),
      (t.prototype.add = function (e) {
        this.entries.push(e);
      }),
      (t.prototype.addAll = function (e) {
        for (var t = 0; t < e.length; t++) this.entries.push(e[t]);
      }),
      t
    );
  })(t);
  e.MemberNameArray = r;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e) {
    var t = e && e.charCodeAt(0);
    return e &&
      e.length >= 2 &&
      t === e.charCodeAt(e.length - 1) &&
      (39 === t || 34 === t)
      ? e.substring(1, e.length - 1)
      : e;
  }
  function n(e) {
    return (
      e &&
      e.length >= 2 &&
      e.charCodeAt(0) === e.charCodeAt(e.length - 1) &&
      39 === e.charCodeAt(0)
    );
  }
  function r(e) {
    return (
      e &&
      e.length >= 2 &&
      e.charCodeAt(0) === e.charCodeAt(e.length - 1) &&
      34 === e.charCodeAt(0)
    );
  }
  function i(e) {
    return r(e) || n(e);
  }
  function o(e) {
    return '"' + e + '"';
  }
  function s(e) {
    return e.replace(T, "/");
  }
  function a(e) {
    return e.length > 5 && ".d.ts" === e.substring(e.length - 5, e.length)
      ? e.substring(0, e.length - 5)
      : e.length > 3 && ".ts" === e.substring(e.length - 3, e.length)
      ? e.substring(0, e.length - 3)
      : e.length > 3 && ".js" === e.substring(e.length - 3, e.length)
      ? e.substring(0, e.length - 3)
      : e;
  }
  function l(e) {
    return u(e) ? f(e) : f(e);
  }
  function c(e, t) {
    var n = e.toLocaleUpperCase(),
      r = t.toLocaleUpperCase(),
      i = r.length;
    return n.length > i && n.substring(n.length - i, n.length) === r;
  }
  function u(e) {
    return c(e, ".ts");
  }
  function p(e) {
    return c(e, ".d.ts");
  }
  function h(e, n, r) {
    "undefined" == typeof n && (n = !0), "undefined" == typeof r && (r = !1);
    var i = r ? s(e) : a(t(e)),
      l = this.getPathComponents(i);
    return l.length ? (n ? o(l[l.length - 1]) : l[l.length - 1]) : e;
  }
  function d(e) {
    return e.split("/");
  }
  function m(e, t, n) {
    "undefined" == typeof n && (n = !0), (t = s(t));
    for (
      var r = this.getPathComponents(t), i = this.getPathComponents(e), o = 0;
      o < r.length && o < i.length && i[o] === r[o];
      o++
    );
    if (0 !== o) {
      for (var a = "", l = r.slice(o, r.length); o < i.length; o++)
        "" !== i[o] && (a += "../");
      return a + l.join("/");
    }
    return n && -1 === t.indexOf("://") && (t = "file:///" + t), t;
  }
  function f(e) {
    return a(t(e)) + ".d.ts";
  }
  function g(e) {
    return e.length > 0 && "." === e.charAt(0);
  }
  function v(e) {
    return (
      e.length > 0 &&
      ("\\" === e.charAt(0) ||
        "/" === e.charAt(0) ||
        -1 !== e.indexOf(":\\") ||
        -1 !== e.indexOf(":/"))
    );
  }
  function y(e) {
    if ("" === e) return e;
    var t = -1 !== e.indexOf("/");
    return t ? _(e) : "";
  }
  function b(e) {
    e = s(e);
    var t = d(e);
    return t.slice(0, t.length - 1);
  }
  function _(e) {
    var t = b(e);
    return t.join("/") + "/";
  }
  function w(e) {
    return e && "/" !== e.charAt(e.length - 1) && (e += "/"), e;
  }
  function S(t) {
    k.test(t) && (t = "file:" + t);
    for (
      var n = this.getPathComponents(s(t)), r = [], i = 0;
      i < n.length;
      i++
    ) {
      var o = n[i];
      "." !== o &&
        (r.length > 0 && ".." !== e.ArrayUtilities.last(r) && ".." === o
          ? r.pop()
          : r.push(o));
    }
    return r.join("/");
  }
  (e.stripStartAndEndQuotes = t),
    (e.isSingleQuoted = n),
    (e.isDoubleQuoted = r),
    (e.isQuoted = i),
    (e.quoteStr = o);
  var T = /\\/g;
  (e.switchToForwardSlashes = s),
    (e.trimModName = a),
    (e.getDeclareFilePath = l),
    (e.isTSFile = u),
    (e.isDTSFile = p),
    (e.getPrettyName = h),
    (e.getPathComponents = d),
    (e.getRelativePathToFixedPath = m),
    (e.changePathToDTS = f),
    (e.isRelative = g),
    (e.isRooted = v),
    (e.getRootFilePath = y),
    (e.filePathComponents = b),
    (e.filePath = _),
    (e.convertToDirectoryPath = w);
  var k = /^\\\\[^\\]/;
  e.normalizePath = S;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e) {
    var t = /^(\/\/\/\s*<reference\s+no-default-lib=)('|")(.+?)\2\s*\/>/gim;
    return t.exec(e);
  }
  function n(n, r, i, o, s) {
    var a = /^\/\/\/\s*<reference\s+/gim;
    if (a.exec(o)) {
      var l = t(o);
      if (!l) {
        var c = e.tripleSlashReferenceRegExp,
          u = c.exec(o);
        if (u) {
          var p = e.normalizePath(u[3]),
            h = e.normalizePath(p),
            d = u.length >= 7 && "true" === u[6];
          return (
            d && e.CompilerDiagnostics.debugPrint(p + " is resident"),
            {
              line: 0,
              character: 0,
              position: 0,
              length: 0,
              path: e.switchToForwardSlashes(h),
              isResident: d,
            }
          );
        }
        s.push(
          new e.Diagnostic(
            n,
            r,
            i,
            o.length,
            e.DiagnosticCode.Invalid_reference_directive_syntax
          )
        );
      }
    }
    return null;
  }
  function r(t, n, r, i) {
    for (
      var o = 0, s = { line: -1, character: -1 }, a = new Date().getTime();
      10 !== r.tokenKind;

    ) {
      if (49 === r.tokenKind) {
        var l = o + r.leadingTriviaWidth();
        if (
          ((r = n.scan(c, !1)),
          e.SyntaxFacts.isIdentifierNameOrAnyKeyword(r) &&
            ((r = n.scan(c, !1)),
            107 === r.tokenKind &&
              ((r = n.scan(c, !1)),
              (65 === r.tokenKind || 66 === r.tokenKind) &&
                ((r = n.scan(c, !1)), 72 === r.tokenKind))))
        ) {
          var u = n.absoluteIndex();
          if (
            ((r = n.scan(c, !1)),
            t.fillLineAndCharacterFromPosition(l, s),
            14 === r.tokenKind)
          ) {
            var p = {
              line: s.line,
              character: s.character,
              position: u + r.leadingTriviaWidth(),
              length: r.width(),
              path: e.stripStartAndEndQuotes(
                e.switchToForwardSlashes(r.text())
              ),
              isResident: !1,
            };
            i.push(p);
          }
        }
      }
      (o = n.absoluteIndex()), (r = n.scan(c, !1));
    }
    var h = new Date().getTime() - a;
    e.fileResolutionScanImportsTime += h;
  }
  function i(e, r, i) {
    for (
      var o = i.leadingTrivia(),
        s = 0,
        a = { line: -1, character: -1 },
        l = !1,
        c = [],
        u = [],
        p = 0,
        h = o.count();
      h > p;
      p++
    ) {
      var d = o.syntaxTriviaAt(p);
      if (7 === d.kind()) {
        var m = d.fullText(),
          f = n(e, r, s, m, c);
        f &&
          (r.fillLineAndCharacterFromPosition(s, a),
          (f.position = s),
          (f.length = d.fullWidth()),
          (f.line = a.line),
          (f.character = a.character),
          u.push(f));
        var g = t(m);
        g && (l = "true" === g[3]);
      }
      s += d.fullWidth();
    }
    return { noDefaultLib: l, diagnostics: c, referencedFiles: u };
  }
  function o(t, n, o) {
    "undefined" == typeof o && (o = !0);
    var s = e.SimpleText.fromScriptSnapshot(n),
      a = new e.Scanner(t, s, 1, l),
      u = a.scan(c, !1),
      p = [];
    o && r(s.lineMap(), a, u, p);
    var h = i(t, s.lineMap(), u);
    return (
      (c.length = 0),
      {
        referencedFiles: h.referencedFiles,
        importedFiles: p,
        isLibFile: h.noDefaultLib,
        diagnostics: h.diagnostics,
      }
    );
  }
  function s(t) {
    return new e.ParseOptions(
      t.codeGenTarget(),
      t.allowAutomaticSemicolonInsertion()
    );
  }
  function a(e, t) {
    return o(e, t, !1).referencedFiles;
  }
  e.tripleSlashReferenceRegExp = /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\2\s*)*\/>/;
  var l = e.ArrayUtilities.createArray(2048, 0),
    c = [];
  (e.preProcessFile = o), (e.getParseOptions = s), (e.getReferencedFiles = a);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {
      (this.resolvedFiles = []),
        (this.diagnostics = []),
        (this.seenNoDefaultLibTag = !1);
    }
    return e;
  })();
  e.ReferenceResolutionResult = t;
  var n = (function () {
      function e(e, t, n, r, i) {
        (this.filePath = e),
          (this.lineMap = t),
          (this.position = n),
          (this.length = r),
          (this.isImported = i);
      }
      return e;
    })(),
    r = (function () {
      function r(e, t, n) {
        (this.useCaseSensitiveFileResolution = n),
          (this.inputFileNames = e),
          (this.host = t),
          (this.visited = {});
      }
      return (
        (r.resolve = function (e, t, n) {
          var i = new r(e, t, n);
          return i.resolveInputFiles();
        }),
        (r.prototype.resolveInputFiles = function () {
          var e = this,
            r = new t();
          if (!this.inputFileNames || this.inputFileNames.length <= 0) return r;
          var i = new n(null, null, 0, 0, !1);
          return (
            this.inputFileNames.forEach(function (t) {
              return e.resolveIncludedFile(t, i, r);
            }),
            r
          );
        }),
        (r.prototype.resolveIncludedFile = function (t, n, r) {
          var i = this.getNormalizedFilePath(t, n.filePath);
          if (this.isSameFile(i, n.filePath))
            return (
              n.isImported ||
                r.diagnostics.push(
                  new e.Diagnostic(
                    n.filePath,
                    n.lineMap,
                    n.position,
                    n.length,
                    e.DiagnosticCode.A_file_cannot_have_a_reference_to_itself,
                    null
                  )
                ),
              i
            );
          if (!e.isTSFile(i) && !e.isDTSFile(i)) {
            var o = i + ".d.ts",
              s = i + ".ts";
            i = this.host.fileExists(s) ? s : o;
          }
          return this.host.fileExists(i)
            ? this.resolveFile(i, r)
            : (n.isImported ||
                r.diagnostics.push(
                  new e.Diagnostic(
                    n.filePath,
                    n.lineMap,
                    n.position,
                    n.length,
                    e.DiagnosticCode.Cannot_resolve_referenced_file_0,
                    [t]
                  )
                ),
              i);
        }),
        (r.prototype.resolveImportedFile = function (t, n, r) {
          var i = e.isRelative(t),
            o = i ? !1 : e.isRooted(t);
          if (i || o) return this.resolveIncludedFile(t, n, r);
          var s = this.host.getParentDirectory(n.filePath),
            a = null,
            l = t + ".d.ts",
            c = t + ".ts",
            u = new Date().getTime();
          do {
            if (
              ((p = this.host.resolveRelativePath(c, s)),
              this.host.fileExists(p))
            ) {
              a = p;
              break;
            }
            var p = this.host.resolveRelativePath(l, s);
            if (this.host.fileExists(p)) {
              a = p;
              break;
            }
            s = this.host.getParentDirectory(s);
          } while (s);
          return (
            (e.fileResolutionImportFileSearchTime += new Date().getTime() - u),
            a ? this.resolveFile(a, r) : t
          );
        }),
        (r.prototype.resolveFile = function (t, r) {
          var i = this,
            o = this.isVisited(t);
          if (o) t = o;
          else {
            this.recordVisitedFile(t);
            var s = new Date().getTime(),
              a = this.host.getScriptSnapshot(t),
              l = new Date().getTime() - s;
            e.fileResolutionIOTime += l;
            var c = e.LineMap1.fromScriptSnapshot(a),
              u = e.preProcessFile(t, a);
            r.diagnostics.push.apply(r.diagnostics, u.diagnostics),
              u.isLibFile && (r.seenNoDefaultLibTag = !0);
            var p = [];
            u.referencedFiles.forEach(function (e) {
              var o = new n(t, c, e.position, e.length, !1),
                s = i.resolveIncludedFile(e.path, o, r);
              p.push(s);
            });
            for (var h = [], d = 0; d < u.importedFiles.length; d++) {
              var m = u.importedFiles[d],
                f = new n(t, c, m.position, m.length, !0),
                g = this.resolveImportedFile(m.path, f, r);
              h.push(g);
            }
            r.resolvedFiles.push({
              path: t,
              referencedFiles: p,
              importedFiles: h,
            });
          }
          return t;
        }),
        (r.prototype.getNormalizedFilePath = function (e, t) {
          var n = t ? this.host.getParentDirectory(t) : "",
            r = this.host.resolveRelativePath(e, n);
          return r;
        }),
        (r.prototype.getUniqueFileId = function (e) {
          return this.useCaseSensitiveFileResolution
            ? e
            : e.toLocaleUpperCase();
        }),
        (r.prototype.recordVisitedFile = function (e) {
          this.visited[this.getUniqueFileId(e)] = e;
        }),
        (r.prototype.isVisited = function (e) {
          return this.visited[this.getUniqueFileId(e)];
        }),
        (r.prototype.isSameFile = function (e, t) {
          return e && t
            ? this.useCaseSensitiveFileResolution
              ? e === t
              : e.toLocaleUpperCase() === t.toLocaleUpperCase()
            : !1;
        }),
        r
      );
    })();
  e.ReferenceResolver = r;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e, t, n) {
      (this.name = e),
        (this.writeByteOrderMark = t),
        (this.outputFileType = n),
        (this.contents = ""),
        (this.onNewLine = !0);
    }
    return (
      (t.prototype.Write = function (e) {
        (this.contents += e), (this.onNewLine = !1);
      }),
      (t.prototype.WriteLine = function (t) {
        (this.contents += t),
          (this.contents += e.newLine()),
          (this.onNewLine = !0);
      }),
      (t.prototype.Close = function () {}),
      (t.prototype.getOutputFile = function () {
        return new e.OutputFile(
          this.name,
          this.writeByteOrderMark,
          this.contents,
          this.outputFileType
        );
      }),
      t
    );
  })();
  e.TextWriter = t;
  var n = (function () {
    function n(n, r, i, o, s) {
      (this.emittingFileName = n),
        (this.document = r),
        (this.compiler = i),
        (this.emitOptions = o),
        (this.semanticInfoChain = s),
        (this.declFile = null),
        (this.indenter = new e.Indenter()),
        (this.emittedReferencePaths = !1),
        (this.declFile = new t(n, 0 !== this.document.byteOrderMark, 2));
    }
    return (
      (n.prototype.getOutputFile = function () {
        return this.declFile.getOutputFile();
      }),
      (n.prototype.emitDeclarations = function (e) {
        this.emitDeclarationsForSourceUnit(e);
      }),
      (n.prototype.emitDeclarationsForList = function (e) {
        for (var t = 0, n = e.childCount(); n > t; t++)
          this.emitDeclarationsForAST(e.childAt(t));
      }),
      (n.prototype.emitSeparatedList = function (e) {
        for (var t = 0, n = e.nonSeparatorCount(); n > t; t++)
          this.emitDeclarationsForAST(e.nonSeparatorAt(t));
      }),
      (n.prototype.emitDeclarationsForAST = function (e) {
        switch (e.kind()) {
          case 148:
            return this.emitDeclarationsForVariableStatement(e);
          case 141:
            return this.emitPropertySignature(e);
          case 225:
            return this.emitVariableDeclarator(e, !0, !0);
          case 136:
            return this.emitDeclarationsForMemberVariableDeclaration(e);
          case 137:
            return this.emitDeclarationsForConstructorDeclaration(e);
          case 139:
            return this.emitDeclarationsForGetAccessor(e);
          case 140:
            return this.emitDeclarationsForSetAccessor(e);
          case 138:
            return this.emitIndexMemberDeclaration(e);
          case 144:
            return this.emitIndexSignature(e);
          case 142:
            return this.emitCallSignature(e);
          case 143:
            return this.emitConstructSignature(e);
          case 145:
            return this.emitMethodSignature(e);
          case 129:
            return this.emitDeclarationsForFunctionDeclaration(e);
          case 135:
            return this.emitMemberFunctionDeclaration(e);
          case 131:
            return this.emitDeclarationsForClassDeclaration(e);
          case 128:
            return this.emitDeclarationsForInterfaceDeclaration(e);
          case 133:
            return this.emitDeclarationsForImportDeclaration(e);
          case 130:
            return this.emitDeclarationsForModuleDeclaration(e);
          case 132:
            return this.emitDeclarationsForEnumDeclaration(e);
          case 134:
            return this.emitDeclarationsForExportAssignment(e);
        }
      }),
      (n.prototype.getIndentString = function (e) {
        return "undefined" == typeof e && (e = !1), this.indenter.getIndent();
      }),
      (n.prototype.emitIndent = function () {
        this.declFile.Write(this.getIndentString());
      }),
      (n.prototype.canEmitDeclarations = function (t) {
        var n = this.getEnclosingContainer(t);
        if (130 === n.kind() || 120 === n.kind()) {
          var r = this.semanticInfoChain.getDeclForAST(t);
          if (!e.hasFlag(r.flags, 1)) {
            var i = new Date().getTime(),
              o = this.semanticInfoChain.getSymbolForAST(t),
              s = o && o.isExternallyVisible();
            return (
              (e.declarationEmitIsExternallyVisibleTime +=
                new Date().getTime() - i),
              s
            );
          }
        }
        return !0;
      }),
      (n.prototype.getDeclFlagsString = function (t, n) {
        var r = this.getIndentString(),
          i = t.flags;
        if (e.hasFlag(i, 16))
          e.hasFlag(i, 2) && (r += "private "), (r += "static ");
        else if (e.hasFlag(i, 2)) r += "private ";
        else if (e.hasFlag(i, 4)) r += "public ";
        else {
          var o = !e.hasFlag(i, 1),
            s = this.semanticInfoChain.getASTForDecl(t),
            a = this.getEnclosingContainer(s);
          130 === a.kind() &&
            e.ASTHelpers.isAnyNameOfModule(a, s) &&
            (a = this.getEnclosingContainer(a));
          var l = 120 === a.kind() && this.document.isExternalModule();
          l && e.hasFlag(i, 1) && ((r += "export "), (o = !0)),
            (l || 120 === a.kind()) &&
              o &&
              "interface" !== n &&
              "import" !== n &&
              (r += "declare "),
            (r += n + " ");
        }
        return r;
      }),
      (n.prototype.emitDeclFlags = function (e, t) {
        this.declFile.Write(
          this.getDeclFlagsString(this.semanticInfoChain.getDeclForAST(e), t)
        );
      }),
      (n.prototype.emitTypeNamesMember = function (e, t) {
        if (
          ("undefined" == typeof t && (t = !1),
          "{ " === e.prefix
            ? (t && this.emitIndent(),
              this.declFile.WriteLine("{"),
              this.indenter.increaseIndent(),
              (t = !0))
            : "" !== e.prefix &&
              (t && this.emitIndent(), this.declFile.Write(e.prefix), (t = !1)),
          e.isString())
        )
          t && this.emitIndent(), this.declFile.Write(e.text);
        else if (e.isArray())
          for (var n = e, r = 0; r < n.entries.length; r++)
            this.emitTypeNamesMember(n.entries[r], t),
              "; " === n.delim && this.declFile.WriteLine(";");
        "}" === e.suffix
          ? (this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.declFile.Write(e.suffix))
          : this.declFile.Write(e.suffix);
      }),
      (n.prototype.emitTypeSignature = function (t, n) {
        var r = this.getEnclosingContainer(t),
          i = new Date().getTime(),
          o = this.semanticInfoChain.getDeclForAST(r),
          s = o.getSymbol();
        e.declarationEmitTypeSignatureTime += new Date().getTime() - i;
        var a = 126 !== t.kind(),
          l = n.getScopedNameEx(s, !1, !1, !1, !1, !1, a);
        this.emitTypeNamesMember(l);
      }),
      (n.prototype.emitComment = function (t) {
        var n = e.getTrimmedTextLines(t);
        this.declFile.onNewLine
          ? this.emitIndent()
          : 6 !== t.kind() && (this.declFile.WriteLine(""), this.emitIndent()),
          this.declFile.Write(n[0]);
        for (var r = 1; r < n.length; r++)
          this.declFile.WriteLine(""),
            this.emitIndent(),
            this.declFile.Write(n[r]);
        t.endsLine || 6 !== t.kind()
          ? this.declFile.WriteLine("")
          : this.declFile.Write(" ");
      }),
      (n.prototype.emitDeclarationComments = function (t, n) {
        if (
          ("undefined" == typeof n && (n = !0),
          !this.emitOptions.compilationSettings().removeComments())
        ) {
          var r = t.docComments ? t.docComments() : e.ASTHelpers.docComments(t);
          this.writeDeclarationComments(r, n);
        }
      }),
      (n.prototype.writeDeclarationComments = function (e, t) {
        if (("undefined" == typeof t && (t = !0), e.length > 0)) {
          for (var n = 0; n < e.length; n++) this.emitComment(e[n]);
          t
            ? this.declFile.onNewLine || this.declFile.WriteLine("")
            : this.declFile.onNewLine && this.emitIndent();
        }
      }),
      (n.prototype.emitTypeOfVariableDeclaratorOrParameter = function (t) {
        var n = new Date().getTime(),
          r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        e.declarationEmitGetBoundDeclTypeTime += new Date().getTime() - n;
        var o = i.type;
        e.Debug.assert(o),
          this.declFile.Write(": "),
          this.emitTypeSignature(t, o);
      }),
      (n.prototype.emitPropertySignature = function (e) {
        this.emitDeclarationComments(e),
          this.emitIndent(),
          this.declFile.Write(e.propertyName.text()),
          e.questionToken && this.declFile.Write("?"),
          this.emitTypeOfVariableDeclaratorOrParameter(e),
          this.declFile.WriteLine(";");
      }),
      (n.prototype.emitVariableDeclarator = function (t, n, r) {
        this.canEmitDeclarations(t) &&
          (this.emitDeclarationComments(t),
          n && this.emitDeclFlags(t, "var"),
          this.declFile.Write(t.propertyName.text()),
          e.hasModifier(e.ASTHelpers.getVariableDeclaratorModifiers(t), 2) ||
            this.emitTypeOfVariableDeclaratorOrParameter(t),
          r ? this.declFile.WriteLine(";") : this.declFile.Write(", "));
      }),
      (n.prototype.emitClassElementModifiers = function (t) {
        e.hasModifier(t, 16)
          ? (e.hasModifier(t, 2) && this.declFile.Write("private "),
            this.declFile.Write("static "))
          : e.hasModifier(t, 2)
          ? this.declFile.Write("private ")
          : this.declFile.Write("public ");
      }),
      (n.prototype.emitDeclarationsForMemberVariableDeclaration = function (t) {
        this.canEmitDeclarations(t) &&
          (this.emitDeclarationComments(t),
          this.declFile.Write(this.getIndentString()),
          this.emitClassElementModifiers(t.modifiers),
          this.declFile.Write(t.variableDeclarator.propertyName.text()),
          e.hasModifier(t.modifiers, 2) ||
            this.emitTypeOfVariableDeclaratorOrParameter(t),
          this.declFile.WriteLine(";"));
      }),
      (n.prototype.emitDeclarationsForVariableStatement = function (e) {
        this.emitDeclarationsForVariableDeclaration(e.declaration);
      }),
      (n.prototype.emitDeclarationsForVariableDeclaration = function (e) {
        for (var t = e.declarators.nonSeparatorCount(), n = 0; t > n; n++)
          this.emitVariableDeclarator(
            e.declarators.nonSeparatorAt(n),
            0 === n,
            n === t - 1
          );
      }),
      (n.prototype.emitArgDecl = function (e, t, n, r) {
        this.indenter.increaseIndent(),
          this.emitDeclarationComments(e, !1),
          this.declFile.Write(t.text()),
          n && this.declFile.Write("?"),
          this.indenter.decreaseIndent(),
          r || this.emitTypeOfVariableDeclaratorOrParameter(e);
      }),
      (n.prototype.isOverloadedCallSignature = function (t) {
        var n = new Date().getTime(),
          r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        e.declarationEmitIsOverloadedCallSignatureTime +=
          new Date().getTime() - n;
        var o = i.type,
          s = o.getCallSignatures(),
          a = s && s.length > 1;
        return a;
      }),
      (n.prototype.emitDeclarationsForConstructorDeclaration = function (t) {
        var n = new Date().getTime(),
          r = this.semanticInfoChain.getSymbolForAST(t);
        e.declarationEmitFunctionDeclarationGetSymbolTime +=
          new Date().getTime() - n;
        var i = r.type;
        if (t.block) {
          var o = i.getConstructSignatures();
          if (o && o.length > 1) return;
        }
        {
          var s = this.semanticInfoChain.getDeclForAST(t);
          s.getSignatureSymbol();
        }
        this.emitDeclarationComments(t),
          this.emitIndent(),
          this.declFile.Write("constructor"),
          this.declFile.Write("("),
          this.emitParameters(
            !1,
            e.ASTHelpers.parametersFromParameterList(
              t.callSignature.parameterList
            )
          ),
          this.declFile.Write(")"),
          this.declFile.WriteLine(";");
      }),
      (n.prototype.emitParameterList = function (t, n) {
        this.declFile.Write("("),
          this.emitParameters(t, e.ASTHelpers.parametersFromParameterList(n)),
          this.declFile.Write(")");
      }),
      (n.prototype.emitParameters = function (e, t) {
        var n = t.lastParameterIsRest(),
          r = t.length;
        n && r--;
        for (var i = 0; r > i; i++)
          this.emitArgDecl(t.astAt(i), t.identifierAt(i), t.isOptionalAt(i), e),
            r - 1 > i && this.declFile.Write(", ");
        if (n) {
          t.length > 1
            ? this.declFile.Write(", ...")
            : this.declFile.Write("...");
          var o = t.length - 1;
          this.emitArgDecl(t.astAt(o), t.identifierAt(o), t.isOptionalAt(o), e);
        }
      }),
      (n.prototype.emitMemberFunctionDeclaration = function (t) {
        var n = new Date().getTime(),
          r = this.semanticInfoChain.getSymbolForAST(t);
        e.declarationEmitFunctionDeclarationGetSymbolTime +=
          new Date().getTime() - n;
        var i = r.type;
        if (t.block) {
          var o = i.getConstructSignatures();
          if (o && o.length > 1) return;
          if (this.isOverloadedCallSignature(t)) return;
        } else if (
          e.hasModifier(t.modifiers, 2) &&
          this.isOverloadedCallSignature(t)
        ) {
          var s = i.getCallSignatures();
          e.Debug.assert(s && s.length > 1);
          var a = s[0].isDefinition() ? s[1] : s[0],
            l = a.getDeclarations()[0],
            c = this.semanticInfoChain.getASTForDecl(l);
          if (c !== t) return;
        }
        if (this.canEmitDeclarations(t)) {
          var u = this.semanticInfoChain.getDeclForAST(t),
            p = u.getSignatureSymbol();
          this.emitDeclarationComments(t), this.emitDeclFlags(t, "function");
          var h = t.propertyName.text();
          this.declFile.Write(h),
            this.emitTypeParameters(t.callSignature.typeParameterList, p);
          var d = e.hasModifier(t.modifiers, 2);
          if ((this.emitParameterList(d, t.callSignature.parameterList), !d)) {
            var m = p.returnType;
            this.declFile.Write(": "), this.emitTypeSignature(t, m);
          }
          this.declFile.WriteLine(";");
        }
      }),
      (n.prototype.emitCallSignature = function (t) {
        var n = this.semanticInfoChain.getDeclForAST(t);
        this.emitDeclarationComments(t);
        var r = n.getSignatureSymbol();
        this.emitTypeParameters(t.typeParameterList, r),
          this.emitIndent(),
          this.declFile.Write("("),
          this.emitParameters(
            !1,
            e.ASTHelpers.parametersFromParameterList(t.parameterList)
          ),
          this.declFile.Write(")");
        var i = r.returnType;
        this.declFile.Write(": "),
          i ? this.emitTypeSignature(t, i) : this.declFile.Write("any"),
          this.declFile.WriteLine(";");
      }),
      (n.prototype.emitConstructSignature = function (t) {
        {
          var n = this.semanticInfoChain.getDeclForAST(t),
            r = new Date().getTime();
          this.semanticInfoChain.getSymbolForAST(t);
        }
        (e.declarationEmitFunctionDeclarationGetSymbolTime +=
          new Date().getTime() - r),
          this.emitDeclarationComments(t),
          this.emitIndent(),
          this.declFile.Write("new");
        var i = n.getSignatureSymbol();
        this.emitTypeParameters(t.callSignature.typeParameterList, i),
          this.declFile.Write("("),
          this.emitParameters(
            !1,
            e.ASTHelpers.parametersFromParameterList(
              t.callSignature.parameterList
            )
          ),
          this.declFile.Write(")");
        var o = i.returnType;
        this.declFile.Write(": "),
          o ? this.emitTypeSignature(t, o) : this.declFile.Write("any"),
          this.declFile.WriteLine(";");
      }),
      (n.prototype.emitMethodSignature = function (t) {
        {
          var n = this.semanticInfoChain.getDeclForAST(t),
            r = new Date().getTime();
          this.semanticInfoChain.getSymbolForAST(t);
        }
        (e.declarationEmitFunctionDeclarationGetSymbolTime +=
          new Date().getTime() - r),
          this.emitDeclarationComments(t),
          this.emitIndent(),
          this.declFile.Write(t.propertyName.text()),
          t.questionToken && this.declFile.Write("? ");
        var i = n.getSignatureSymbol();
        this.emitTypeParameters(t.callSignature.typeParameterList, i),
          this.declFile.Write("("),
          this.emitParameters(
            !1,
            e.ASTHelpers.parametersFromParameterList(
              t.callSignature.parameterList
            )
          ),
          this.declFile.Write(")");
        var o = i.returnType;
        this.declFile.Write(": "),
          o ? this.emitTypeSignature(t, o) : this.declFile.Write("any"),
          this.declFile.WriteLine(";");
      }),
      (n.prototype.emitDeclarationsForFunctionDeclaration = function (t) {
        var n = this.semanticInfoChain.getDeclForAST(t),
          r = new Date().getTime(),
          i = this.semanticInfoChain.getSymbolForAST(t);
        if (
          ((e.declarationEmitFunctionDeclarationGetSymbolTime +=
            new Date().getTime() - r),
          t.block)
        ) {
          var o = i.type,
            s = o.getConstructSignatures();
          if (s && s.length > 1) return;
          if (this.isOverloadedCallSignature(t)) return;
        }
        if (this.canEmitDeclarations(t)) {
          this.emitDeclarationComments(t);
          var a = t.identifier.text();
          this.emitDeclFlags(t, "function"),
            "" !== a || !t.identifier || t.identifier.text().length > 0
              ? this.declFile.Write(a)
              : 2097152 === n.kind && this.declFile.Write("new");
          var l = n.getSignatureSymbol();
          this.emitTypeParameters(t.callSignature.typeParameterList, l),
            this.declFile.Write("("),
            this.emitParameters(
              !1,
              e.ASTHelpers.parametersFromParameterList(
                t.callSignature.parameterList
              )
            ),
            this.declFile.Write(")");
          var c = l.returnType;
          this.declFile.Write(": "),
            c ? this.emitTypeSignature(t, c) : this.declFile.Write("any"),
            this.declFile.WriteLine(";");
        }
      }),
      (n.prototype.emitIndexMemberDeclaration = function (e) {
        this.emitDeclarationsForAST(e.indexSignature);
      }),
      (n.prototype.emitIndexSignature = function (t) {
        if (this.canEmitDeclarations(t)) {
          this.emitDeclarationComments(t),
            this.emitIndent(),
            this.declFile.Write("["),
            this.emitParameters(
              !1,
              e.ASTHelpers.parametersFromParameter(t.parameter)
            ),
            this.declFile.Write("]");
          var n = this.semanticInfoChain.getDeclForAST(t),
            r = n.getSignatureSymbol(),
            i = r.returnType;
          this.declFile.Write(": "),
            this.emitTypeSignature(t, i),
            this.declFile.WriteLine(";");
        }
      }),
      (n.prototype.emitBaseList = function (e, t) {
        if (e && e.nonSeparatorCount() > 0) {
          var n = t ? "extends" : "implements";
          this.declFile.Write(" " + n + " ");
          for (var r = e.nonSeparatorCount(), i = 0; r > i; i++) {
            i > 0 && this.declFile.Write(", ");
            var o = e.nonSeparatorAt(i),
              s = this.semanticInfoChain.getSymbolForAST(o);
            this.emitTypeSignature(o, s);
          }
        }
      }),
      (n.prototype.emitAccessorDeclarationComments = function (t) {
        if (!this.emitOptions.compilationSettings().removeComments()) {
          var n =
            (new Date().getTime(),
            e.PullHelpers.getGetterAndSetterFunction(
              t,
              this.semanticInfoChain
            ));
          e.declarationEmitGetAccessorFunctionTime += new Date().getTime();
          var r = [];
          n.getter && (r = r.concat(e.ASTHelpers.docComments(n.getter))),
            n.setter && (r = r.concat(e.ASTHelpers.docComments(n.setter))),
            this.writeDeclarationComments(r);
        }
      }),
      (n.prototype.emitDeclarationsForGetAccessor = function (e) {
        this.emitMemberAccessorDeclaration(e, e.modifiers, e.propertyName);
      }),
      (n.prototype.emitDeclarationsForSetAccessor = function (e) {
        this.emitMemberAccessorDeclaration(e, e.modifiers, e.propertyName);
      }),
      (n.prototype.emitMemberAccessorDeclaration = function (t, n, r) {
        var i =
          (new Date().getTime(),
          e.PullHelpers.getAccessorSymbol(t, this.semanticInfoChain));
        if (
          ((e.declarationEmitGetAccessorFunctionTime += new Date().getTime()),
          140 !== t.kind() || !i.getGetter())
        ) {
          var o = e.hasModifier(n, 2);
          if (
            (this.emitAccessorDeclarationComments(t),
            this.declFile.Write(this.getIndentString()),
            this.emitClassElementModifiers(n),
            this.declFile.Write(r.text()),
            !o)
          ) {
            this.declFile.Write(" : ");
            var s = i.type;
            this.emitTypeSignature(t, s);
          }
          this.declFile.WriteLine(";");
        }
      }),
      (n.prototype.emitClassMembersFromConstructorDefinition = function (t) {
        var n = t.callSignature.parameterList.parameters.nonSeparatorCount();
        e.lastParameterIsRest(t.callSignature.parameterList) && n--;
        for (var r = 0; n > r; r++) {
          var i = t.callSignature.parameterList.parameters.nonSeparatorAt(r),
            o = this.semanticInfoChain.getDeclForAST(i);
          if (e.hasFlag(o.flags, 8388608)) {
            {
              this.semanticInfoChain.getDeclForAST(t);
            }
            this.emitDeclarationComments(i),
              this.declFile.Write(this.getIndentString()),
              this.emitClassElementModifiers(i.modifiers),
              this.declFile.Write(i.identifier.text()),
              e.hasModifier(i.modifiers, 2) ||
                this.emitTypeOfVariableDeclaratorOrParameter(i),
              this.declFile.WriteLine(";");
          }
        }
      }),
      (n.prototype.emitDeclarationsForClassDeclaration = function (t) {
        if (this.canEmitDeclarations(t)) {
          var n = t.identifier.text();
          this.emitDeclarationComments(t);
          {
            this.semanticInfoChain.getDeclForAST(t);
          }
          this.emitDeclFlags(t, "class"),
            this.declFile.Write(n),
            this.emitTypeParameters(t.typeParameterList),
            this.emitHeritageClauses(t.heritageClauses),
            this.declFile.WriteLine(" {"),
            this.indenter.increaseIndent();
          var r = e.getLastConstructor(t);
          r && this.emitClassMembersFromConstructorDefinition(r),
            this.emitDeclarationsForList(t.classElements),
            this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.declFile.WriteLine("}");
        }
      }),
      (n.prototype.emitHeritageClauses = function (e) {
        if (e)
          for (var t = 0, n = e.childCount(); n > t; t++)
            this.emitHeritageClause(e.childAt(t));
      }),
      (n.prototype.emitHeritageClause = function (e) {
        this.emitBaseList(e.typeNames, 230 === e.kind());
      }),
      (n.prototype.getEnclosingContainer = function (e) {
        for (e = e.parent; e; ) {
          if (
            131 === e.kind() ||
            128 === e.kind() ||
            130 === e.kind() ||
            120 === e.kind()
          )
            return e;
          e = e.parent;
        }
        return null;
      }),
      (n.prototype.emitTypeParameters = function (t, n) {
        if (t && t.typeParameters.nonSeparatorCount()) {
          this.declFile.Write("<");
          var r = this.getEnclosingContainer(t),
            i = new Date().getTime(),
            o = this.semanticInfoChain.getDeclForAST(r),
            s = o.getSymbol();
          e.declarationEmitGetTypeParameterSymbolTime +=
            new Date().getTime() - i;
          var a;
          a = n ? n.getTypeParameters() : s.getTypeArgumentsOrTypeParameters();
          for (var l = 0; l < a.length; l++) {
            l && this.declFile.Write(", ");
            var c = a[l].getScopedNameEx(s, !1, !0);
            this.emitTypeNamesMember(c);
          }
          this.declFile.Write(">");
        }
      }),
      (n.prototype.emitDeclarationsForInterfaceDeclaration = function (e) {
        if (this.canEmitDeclarations(e)) {
          var t = e.identifier.text();
          this.emitDeclarationComments(e);
          {
            this.semanticInfoChain.getDeclForAST(e);
          }
          this.emitDeclFlags(e, "interface"),
            this.declFile.Write(t),
            this.emitTypeParameters(e.typeParameterList),
            this.emitHeritageClauses(e.heritageClauses),
            this.declFile.WriteLine(" {"),
            this.indenter.increaseIndent(),
            this.emitSeparatedList(e.body.typeMembers),
            this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.declFile.WriteLine("}");
        }
      }),
      (n.prototype.emitDeclarationsForImportDeclaration = function (t) {
        var n = this.semanticInfoChain.getDeclForAST(t),
          r = n.getSymbol(),
          i = e.hasModifier(t.modifiers, 1);
        (i ||
          r.typeUsedExternally() ||
          e.PullContainerSymbol.usedAsSymbol(r.getContainer(), r)) &&
          (this.emitDeclarationComments(t),
          this.emitIndent(),
          i && this.declFile.Write("export "),
          this.declFile.Write("import "),
          this.declFile.Write(t.identifier.text() + " = "),
          245 === t.moduleReference.kind()
            ? this.declFile.WriteLine(
                "require(" + t.moduleReference.stringLiteral.text() + ");"
              )
            : this.declFile.WriteLine(
                e.ASTHelpers.getNameOfIdenfierOrQualifiedName(
                  t.moduleReference.moduleName
                ) + ";"
              ));
      }),
      (n.prototype.emitDeclarationsForEnumDeclaration = function (e) {
        if (this.canEmitDeclarations(e)) {
          this.emitDeclarationComments(e);
          {
            this.semanticInfoChain.getDeclForAST(e);
          }
          this.emitDeclFlags(e, "enum"),
            this.declFile.WriteLine(e.identifier.text() + " {"),
            this.indenter.increaseIndent();
          for (var t = e.enumElements.nonSeparatorCount(), n = 0; t > n; n++) {
            var r = e.enumElements.nonSeparatorAt(n),
              i = r,
              o = this.semanticInfoChain.getDeclForAST(i);
            this.emitDeclarationComments(i),
              this.emitIndent(),
              this.declFile.Write(i.propertyName.text()),
              null !== o.constantValue &&
                this.declFile.Write(" = " + o.constantValue),
              this.declFile.WriteLine(",");
          }
          this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.declFile.WriteLine("}");
        }
      }),
      (n.prototype.emitDeclarationsForModuleDeclaration = function (t) {
        if (this.canEmitDeclarations(t)) {
          {
            this.semanticInfoChain.getDeclForAST(t);
          }
          this.emitDeclarationComments(t);
          var n =
            t.stringLiteral || e.ArrayUtilities.first(e.getModuleNames(t.name));
          this.emitDeclFlags(n, "module"),
            t.stringLiteral
              ? this.declFile.Write(t.stringLiteral.text())
              : this.declFile.Write(
                  e.ASTHelpers.getNameOfIdenfierOrQualifiedName(t.name)
                ),
            this.declFile.WriteLine(" {"),
            this.indenter.increaseIndent(),
            this.emitDeclarationsForList(t.moduleElements),
            this.indenter.decreaseIndent(),
            this.emitIndent(),
            this.declFile.WriteLine("}");
        }
      }),
      (n.prototype.emitDeclarationsForExportAssignment = function (e) {
        this.emitIndent(),
          this.declFile.Write("export = "),
          this.declFile.Write(e.identifier.text()),
          this.declFile.WriteLine(";");
      }),
      (n.prototype.resolveScriptReference = function (t, n) {
        if (
          !this.emitOptions.compilationSettings().noResolve() ||
          e.isRooted(n)
        )
          return n;
        var r = e.convertToDirectoryPath(
            e.switchToForwardSlashes(e.getRootFilePath(t.fileName))
          ),
          i = this.emitOptions.resolvePath(r + n);
        return i;
      }),
      (n.prototype.emitReferencePaths = function () {
        if (!this.emittedReferencePaths) {
          var t = [];
          if (this.document.emitToOwnOutputFile())
            for (
              var n = this.document.referencedFiles, r = !1, i = 0;
              i < n.length;
              i++
            ) {
              var o = this.resolveScriptReference(this.document, n[i]),
                s = this.compiler.getDocument(o);
              s &&
                (s.emitToOwnOutputFile() || s.isDeclareFile() || !r) &&
                ((t = t.concat(s)),
                !s.isDeclareFile() && s.isExternalModule() && (r = !0));
            }
          else
            for (var a = this.compiler.fileNames(), l = 0; l < a.length; l++) {
              var c = this.compiler.getDocument(a[l]);
              if (!c.isDeclareFile() && !c.isExternalModule())
                for (var n = c.referencedFiles, i = 0; i < n.length; i++) {
                  var o = this.resolveScriptReference(c, n[i]),
                    s = this.compiler.getDocument(o);
                  if (s && (s.isDeclareFile() || s.isExternalModule())) {
                    for (var u = 0; u < t.length && t[u] !== s; u++);
                    u === t.length && (t = t.concat(s));
                  }
                }
            }
          for (
            var p = t.length ? e.getRootFilePath(this.emittingFileName) : null,
              l = 0;
            l < t.length;
            l++
          ) {
            var h,
              s = t[l];
            (h = s.isDeclareFile()
              ? s.fileName
              : this.compiler.mapOutputFileName(
                  s,
                  this.emitOptions,
                  e.TypeScriptCompiler.mapToDTSFileName
                )),
              (h = e.getRelativePathToFixedPath(p, h, !1)),
              this.declFile.WriteLine('/// <reference path="' + h + '" />');
          }
          this.emittedReferencePaths = !0;
        }
      }),
      (n.prototype.emitDeclarationsForSourceUnit = function (e) {
        this.emitReferencePaths(e),
          this.emitDeclarationsForList(e.moduleElements);
      }),
      n
    );
  })();
  e.DeclarationEmitter = n;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(e) {
      var n = Math.max(1, t.computeM(e)),
        r = Math.max(1, t.computeK(e)),
        i = (n + 7) & -8;
      this.bitArray = [];
      for (var o = 0, s = i; s > o; o++) this.bitArray[o] = !1;
      this.hashFunctionCount = r;
    }
    return (
      (t.computeM = function (e) {
        var n = t.falsePositiveProbability,
          r = e,
          i = r * Math.log(n),
          o = Math.log(1 / Math.pow(2, Math.log(2)));
        return Math.ceil(i / o);
      }),
      (t.computeK = function (e) {
        var n = e,
          r = t.computeM(e),
          i = (Math.log(2) * r) / n;
        return Math.round(i);
      }),
      (t.prototype.computeHash = function (t, n) {
        return e.Hash.computeMurmur2StringHashCode(t, n);
      }),
      (t.prototype.addKeys = function (e) {
        for (var t in e) e[t] && this.add(t);
      }),
      (t.prototype.add = function (e) {
        for (var t = 0; t < this.hashFunctionCount; t++) {
          var n = this.computeHash(e, t);
          (n %= this.bitArray.length), (this.bitArray[Math.abs(n)] = !0);
        }
      }),
      (t.prototype.probablyContains = function (e) {
        for (var t = 0; t < this.hashFunctionCount; t++) {
          var n = this.computeHash(e, t);
          if (((n %= this.bitArray.length), !this.bitArray[Math.abs(n)]))
            return !1;
        }
        return !0;
      }),
      (t.prototype.isEquivalent = function (e) {
        return (
          t.isEquivalent(this.bitArray, e.bitArray) &&
          this.hashFunctionCount === e.hashFunctionCount
        );
      }),
      (t.isEquivalent = function (e, t) {
        if (e.length !== t.length) return !1;
        for (var n = 0; n < e.length; n++) if (e[n] !== t[n]) return !1;
        return !0;
      }),
      (t.falsePositiveProbability = 1e-4),
      t
    );
  })();
  e.BloomFilter = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function (e) {
    function t(t) {
      e.call(this), (this.list = t);
    }
    return (
      __extends(t, e),
      (t.prototype.visitToken = function (e) {
        this.list[e.text()] = !0;
      }),
      t
    );
  })(e.SyntaxWalker);
  e.IdentifierWalker = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function e() {
      (this.propagateEnumConstants = !1),
        (this.removeComments = !1),
        (this.watch = !1),
        (this.noResolve = !1),
        (this.allowAutomaticSemicolonInsertion = !0),
        (this.noImplicitAny = !1),
        (this.noLib = !1),
        (this.codeGenTarget = 0),
        (this.moduleGenTarget = 0),
        (this.outFileOption = ""),
        (this.outDirOption = ""),
        (this.mapSourceFiles = !1),
        (this.mapRoot = ""),
        (this.sourceRoot = ""),
        (this.generateDeclarationFiles = !1),
        (this.useCaseSensitiveFileResolution = !1),
        (this.gatherDiagnostics = !1),
        (this.codepage = null),
        (this.createFileLog = !1);
    }
    return e;
  })();
  e.CompilationSettings = t;
  var n = (function () {
    function n(e, t, n, r, i, o, s, a, l, c, u, p, h, d, m, f, g, v, y) {
      (this._propagateEnumConstants = e),
        (this._removeComments = t),
        (this._watch = n),
        (this._noResolve = r),
        (this._allowAutomaticSemicolonInsertion = i),
        (this._noImplicitAny = o),
        (this._noLib = s),
        (this._codeGenTarget = a),
        (this._moduleGenTarget = l),
        (this._outFileOption = c),
        (this._outDirOption = u),
        (this._mapSourceFiles = p),
        (this._mapRoot = h),
        (this._sourceRoot = d),
        (this._generateDeclarationFiles = m),
        (this._useCaseSensitiveFileResolution = f),
        (this._gatherDiagnostics = g),
        (this._codepage = v),
        (this._createFileLog = y);
    }
    return (
      (n.prototype.propagateEnumConstants = function () {
        return this._propagateEnumConstants;
      }),
      (n.prototype.removeComments = function () {
        return this._removeComments;
      }),
      (n.prototype.watch = function () {
        return this._watch;
      }),
      (n.prototype.noResolve = function () {
        return this._noResolve;
      }),
      (n.prototype.allowAutomaticSemicolonInsertion = function () {
        return this._allowAutomaticSemicolonInsertion;
      }),
      (n.prototype.noImplicitAny = function () {
        return this._noImplicitAny;
      }),
      (n.prototype.noLib = function () {
        return this._noLib;
      }),
      (n.prototype.codeGenTarget = function () {
        return this._codeGenTarget;
      }),
      (n.prototype.moduleGenTarget = function () {
        return this._moduleGenTarget;
      }),
      (n.prototype.outFileOption = function () {
        return this._outFileOption;
      }),
      (n.prototype.outDirOption = function () {
        return this._outDirOption;
      }),
      (n.prototype.mapSourceFiles = function () {
        return this._mapSourceFiles;
      }),
      (n.prototype.mapRoot = function () {
        return this._mapRoot;
      }),
      (n.prototype.sourceRoot = function () {
        return this._sourceRoot;
      }),
      (n.prototype.generateDeclarationFiles = function () {
        return this._generateDeclarationFiles;
      }),
      (n.prototype.useCaseSensitiveFileResolution = function () {
        return this._useCaseSensitiveFileResolution;
      }),
      (n.prototype.gatherDiagnostics = function () {
        return this._gatherDiagnostics;
      }),
      (n.prototype.codepage = function () {
        return this._codepage;
      }),
      (n.prototype.createFileLog = function () {
        return this._createFileLog;
      }),
      (n.defaultSettings = function () {
        return (
          n._defaultSettings ||
            (n._defaultSettings = n.fromCompilationSettings(new t())),
          n._defaultSettings
        );
      }),
      (n.fromCompilationSettings = function (e) {
        return new n(
          e.propagateEnumConstants,
          e.removeComments,
          e.watch,
          e.noResolve,
          e.allowAutomaticSemicolonInsertion,
          e.noImplicitAny,
          e.noLib,
          e.codeGenTarget,
          e.moduleGenTarget,
          e.outFileOption,
          e.outDirOption,
          e.mapSourceFiles,
          e.mapRoot,
          e.sourceRoot,
          e.generateDeclarationFiles,
          e.useCaseSensitiveFileResolution,
          e.gatherDiagnostics,
          e.codepage,
          e.createFileLog
        );
      }),
      (n.prototype.toCompilationSettings = function () {
        var n = new t(),
          r = this,
          i = n;
        for (var o in this)
          this.hasOwnProperty(o) &&
            e.StringUtilities.startsWith(o, "_") &&
            (i[o.substr(1)] = r[o]);
        return n;
      }),
      n
    );
  })();
  e.ImmutableCompilationSettings = n;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(t, n) {
    for (var r = 0, i = t.length; i > r; r++) if (e.hasFlag(t[r], n)) return !0;
    return !1;
  }
  !(function (e) {
    (e[(e.None = 0)] = "None"),
      (e[(e.Exported = 1)] = "Exported"),
      (e[(e.Private = 2)] = "Private"),
      (e[(e.Public = 4)] = "Public"),
      (e[(e.Ambient = 8)] = "Ambient"),
      (e[(e.Static = 16)] = "Static"),
      (e[(e.Optional = 128)] = "Optional"),
      (e[(e.Signature = 2048)] = "Signature"),
      (e[(e.Enum = 4096)] = "Enum"),
      (e[(e.ArrowFunction = 8192)] = "ArrowFunction"),
      (e[(e.ClassConstructorVariable = 16384)] = "ClassConstructorVariable"),
      (e[(e.InitializedModule = 32768)] = "InitializedModule"),
      (e[(e.InitializedDynamicModule = 65536)] = "InitializedDynamicModule"),
      (e[(e.MustCaptureThis = 1 << 18)] = "MustCaptureThis"),
      (e[(e.DeclaredInAWithBlock = 1 << 21)] = "DeclaredInAWithBlock"),
      (e[(e.HasReturnStatement = 1 << 22)] = "HasReturnStatement"),
      (e[(e.PropertyParameter = 1 << 23)] = "PropertyParameter"),
      (e[(e.IsAnnotatedWithAny = 1 << 24)] = "IsAnnotatedWithAny"),
      (e[(e.HasDefaultArgs = 1 << 25)] = "HasDefaultArgs"),
      (e[(e.ConstructorParameter = 1 << 26)] = "ConstructorParameter"),
      (e[
        (e.ImplicitVariable =
          e.ClassConstructorVariable |
          e.InitializedModule |
          e.InitializedDynamicModule |
          e.Enum)
      ] = "ImplicitVariable"),
      (e[
        (e.SomeInitializedModule =
          e.InitializedModule | e.InitializedDynamicModule | e.Enum)
      ] = "SomeInitializedModule");
  })(e.PullElementFlags || (e.PullElementFlags = {}));
  e.PullElementFlags;
  (e.hasModifier = t),
    (function (e) {
      (e[(e.None = 0)] = "None"),
        (e[(e.Global = 0)] = "Global"),
        (e[(e.Script = 1)] = "Script"),
        (e[(e.Primitive = 2)] = "Primitive"),
        (e[(e.Container = 4)] = "Container"),
        (e[(e.Class = 8)] = "Class"),
        (e[(e.Interface = 16)] = "Interface"),
        (e[(e.DynamicModule = 32)] = "DynamicModule"),
        (e[(e.Enum = 64)] = "Enum"),
        (e[(e.TypeAlias = 128)] = "TypeAlias"),
        (e[(e.ObjectLiteral = 256)] = "ObjectLiteral"),
        (e[(e.Variable = 512)] = "Variable"),
        (e[(e.CatchVariable = 1024)] = "CatchVariable"),
        (e[(e.Parameter = 2048)] = "Parameter"),
        (e[(e.Property = 4096)] = "Property"),
        (e[(e.TypeParameter = 8192)] = "TypeParameter"),
        (e[(e.Function = 16384)] = "Function"),
        (e[(e.ConstructorMethod = 32768)] = "ConstructorMethod"),
        (e[(e.Method = 65536)] = "Method"),
        (e[(e.FunctionExpression = 1 << 17)] = "FunctionExpression"),
        (e[(e.GetAccessor = 1 << 18)] = "GetAccessor"),
        (e[(e.SetAccessor = 1 << 19)] = "SetAccessor"),
        (e[(e.CallSignature = 1 << 20)] = "CallSignature"),
        (e[(e.ConstructSignature = 1 << 21)] = "ConstructSignature"),
        (e[(e.IndexSignature = 1 << 22)] = "IndexSignature"),
        (e[(e.ObjectType = 1 << 23)] = "ObjectType"),
        (e[(e.FunctionType = 1 << 24)] = "FunctionType"),
        (e[(e.ConstructorType = 1 << 25)] = "ConstructorType"),
        (e[(e.EnumMember = 1 << 26)] = "EnumMember"),
        (e[(e.WithBlock = 1 << 27)] = "WithBlock"),
        (e[(e.CatchBlock = 1 << 28)] = "CatchBlock"),
        (e[
          (e.All =
            e.Script |
            e.Global |
            e.Primitive |
            e.Container |
            e.Class |
            e.Interface |
            e.DynamicModule |
            e.Enum |
            e.TypeAlias |
            e.ObjectLiteral |
            e.Variable |
            e.Parameter |
            e.Property |
            e.TypeParameter |
            e.Function |
            e.ConstructorMethod |
            e.Method |
            e.FunctionExpression |
            e.GetAccessor |
            e.SetAccessor |
            e.CallSignature |
            e.ConstructSignature |
            e.IndexSignature |
            e.ObjectType |
            e.FunctionType |
            e.ConstructorType |
            e.EnumMember |
            e.WithBlock |
            e.CatchBlock)
        ] = "All"),
        (e[
          (e.SomeFunction =
            e.Function |
            e.ConstructorMethod |
            e.Method |
            e.FunctionExpression |
            e.GetAccessor |
            e.SetAccessor)
        ] = "SomeFunction"),
        (e[
          (e.SomeValue =
            e.Variable |
            e.Parameter |
            e.Property |
            e.EnumMember |
            e.SomeFunction)
        ] = "SomeValue"),
        (e[
          (e.SomeType =
            e.Script |
            e.Global |
            e.Primitive |
            e.Class |
            e.Interface |
            e.Enum |
            e.ObjectLiteral |
            e.ObjectType |
            e.FunctionType |
            e.ConstructorType |
            e.TypeParameter)
        ] = "SomeType"),
        (e[
          (e.AcceptableAlias =
            e.Variable |
            e.SomeFunction |
            e.Class |
            e.Interface |
            e.Enum |
            e.Container |
            e.ObjectType |
            e.FunctionType |
            e.ConstructorType)
        ] = "AcceptableAlias"),
        (e[(e.SomeContainer = e.Container | e.DynamicModule | e.TypeAlias)] =
          "SomeContainer"),
        (e[
          (e.SomeSignature =
            e.CallSignature | e.ConstructSignature | e.IndexSignature)
        ] = "SomeSignature"),
        (e[
          (e.SomeTypeReference =
            e.Interface | e.ObjectType | e.FunctionType | e.ConstructorType)
        ] = "SomeTypeReference"),
        (e[
          (e.SomeInstantiatableType = e.Class | e.Interface | e.TypeParameter)
        ] = "SomeInstantiatableType");
    })(e.PullElementKind || (e.PullElementKind = {}));
  e.PullElementKind;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = 0,
    n = [],
    r = (function () {
      function r(e, n, r, i, o) {
        (this.declID = t++),
          (this.flags = 0),
          (this.declGroups = null),
          (this.childDecls = null),
          (this.typeParameters = null),
          (this.synthesizedValDecl = null),
          (this.containerDecl = null),
          (this.childDeclTypeCache = null),
          (this.childDeclValueCache = null),
          (this.childDeclNamespaceCache = null),
          (this.childDeclTypeParameterCache = null),
          (this.name = e),
          (this.kind = r),
          (this.flags = i),
          (this.semanticInfoChain = o),
          n !== this.name && (this.declDisplayName = n);
      }
      return (
        (r.prototype.fileName = function () {
          throw e.Errors.abstract();
        }),
        (r.prototype.getParentPath = function () {
          throw e.Errors.abstract();
        }),
        (r.prototype.getParentDecl = function () {
          throw e.Errors.abstract();
        }),
        (r.prototype.isExternalModule = function () {
          throw e.Errors.abstract();
        }),
        (r.prototype.getEnclosingDecl = function () {
          throw e.Errors.abstract();
        }),
        (r.prototype._getEnclosingDeclFromParentDecl = function () {
          for (var t = this; t; ) {
            switch (t.kind) {
              default:
                return t;
              case 512:
              case 8192:
              case 2048:
              case 128:
              case 67108864:
            }
            t = t.getParentDecl();
          }
          e.Debug.fail();
        }),
        (r.prototype.getDisplayName = function () {
          return void 0 === this.declDisplayName
            ? this.name
            : this.declDisplayName;
        }),
        (r.prototype.setSymbol = function (e) {
          this.semanticInfoChain.setSymbolForDecl(this, e);
        }),
        (r.prototype.ensureSymbolIsBound = function () {
          if (!this.hasBeenBound() && 1 !== this.kind) {
            var e = this.semanticInfoChain.getBinder();
            e.bindDeclToPullSymbol(this);
          }
        }),
        (r.prototype.getSymbol = function () {
          return 1 === this.kind
            ? null
            : (this.ensureSymbolIsBound(),
              this.semanticInfoChain.getSymbolForDecl(this));
        }),
        (r.prototype.hasSymbol = function () {
          var e = this.semanticInfoChain.getSymbolForDecl(this);
          return !!e;
        }),
        (r.prototype.setSignatureSymbol = function (e) {
          this.semanticInfoChain.setSignatureSymbolForDecl(this, e);
        }),
        (r.prototype.getSignatureSymbol = function () {
          return (
            this.ensureSymbolIsBound(),
            this.semanticInfoChain.getSignatureSymbolForDecl(this)
          );
        }),
        (r.prototype.hasSignatureSymbol = function () {
          var e = this.semanticInfoChain.getSignatureSymbolForDecl(this);
          return !!e;
        }),
        (r.prototype.setFlags = function (e) {
          this.flags = e;
        }),
        (r.prototype.setFlag = function (e) {
          this.flags |= e;
        }),
        (r.prototype.setValueDecl = function (e) {
          (this.synthesizedValDecl = e), (e.containerDecl = this);
        }),
        (r.prototype.getValueDecl = function () {
          return this.synthesizedValDecl;
        }),
        (r.prototype.getContainerDecl = function () {
          return this.containerDecl;
        }),
        (r.prototype.getChildDeclCache = function (t) {
          return 8192 === t
            ? (this.childDeclTypeParameterCache ||
                (this.childDeclTypeParameterCache = e.createIntrinsicsObject()),
              this.childDeclTypeParameterCache)
            : e.hasFlag(t, 164)
            ? (this.childDeclNamespaceCache ||
                (this.childDeclNamespaceCache = e.createIntrinsicsObject()),
              this.childDeclNamespaceCache)
            : e.hasFlag(t, 58728795)
            ? (this.childDeclTypeCache ||
                (this.childDeclTypeCache = e.createIntrinsicsObject()),
              this.childDeclTypeCache)
            : (this.childDeclValueCache ||
                (this.childDeclValueCache = e.createIntrinsicsObject()),
              this.childDeclValueCache);
        }),
        (r.prototype.addChildDecl = function (e) {
          8192 === e.kind
            ? (this.typeParameters || (this.typeParameters = []),
              (this.typeParameters[this.typeParameters.length] = e))
            : (this.childDecls || (this.childDecls = []),
              (this.childDecls[this.childDecls.length] = e));
          var t = e.name;
          if (!(7340032 & e.kind)) {
            var n = this.getChildDeclCache(e.kind),
              r = n[t];
            r || (r = []), r.push(e), (n[t] = r);
          }
        }),
        (r.prototype.searchChildDecls = function (e, t) {
          var r = null;
          return (
            (r =
              58728795 & t
                ? this.childDeclTypeCache
                  ? this.childDeclTypeCache[e]
                  : null
                : 164 & t
                ? this.childDeclNamespaceCache
                  ? this.childDeclNamespaceCache[e]
                  : null
                : this.childDeclValueCache
                ? this.childDeclValueCache[e]
                : null),
            r
              ? r
              : 58728795 & t &&
                (r = this.childDeclTypeParameterCache
                  ? this.childDeclTypeParameterCache[e]
                  : null)
              ? r
              : n
          );
        }),
        (r.prototype.getChildDecls = function () {
          return this.childDecls || n;
        }),
        (r.prototype.getTypeParameters = function () {
          return this.typeParameters || n;
        }),
        (r.prototype.addVariableDeclToGroup = function (t) {
          this.declGroups || (this.declGroups = e.createIntrinsicsObject());
          var n = this.declGroups[t.name];
          n
            ? n.addDecl(t)
            : ((n = new c(t.name)),
              n.addDecl(t),
              (this.declGroups[t.name] = n));
        }),
        (r.prototype.getVariableDeclGroups = function () {
          var e = null;
          if (this.declGroups)
            for (var t in this.declGroups)
              this.declGroups[t] &&
                (null === e && (e = []), e.push(this.declGroups[t].getDecls()));
          return e || n;
        }),
        (r.prototype.hasBeenBound = function () {
          return this.hasSymbol() || this.hasSignatureSymbol();
        }),
        (r.prototype.isSynthesized = function () {
          return !1;
        }),
        (r.prototype.ast = function () {
          return this.semanticInfoChain.getASTForDecl(this);
        }),
        (r.prototype.isRootDecl = function () {
          throw e.Errors.abstract();
        }),
        r
      );
    })();
  e.PullDecl = r;
  var i = (function (e) {
    function t(t, n, r, i, o, s) {
      e.call(this, t, t, r, i, o),
        (this.semanticInfoChain = o),
        (this._isExternalModule = s),
        (this._fileName = n);
    }
    return (
      __extends(t, e),
      (t.prototype.fileName = function () {
        return this._fileName;
      }),
      (t.prototype.getParentPath = function () {
        return [this];
      }),
      (t.prototype.getParentDecl = function () {
        return null;
      }),
      (t.prototype.isExternalModule = function () {
        return this._isExternalModule;
      }),
      (t.prototype.getEnclosingDecl = function () {
        return this;
      }),
      (t.prototype.isRootDecl = function () {
        return !0;
      }),
      t
    );
  })(r);
  e.RootPullDecl = i;
  var o = (function (t) {
    function n(n, r, i, o, s, a) {
      "undefined" == typeof a && (a = !0),
        t.call(this, n, r, i, o, s ? s.semanticInfoChain : null),
        (this.parentDecl = null),
        (this.parentPath = null),
        (this.parentDecl = s),
        a && s.addChildDecl(this),
        this.parentDecl
          ? (this._rootDecl = this.parentDecl.isRootDecl()
              ? this.parentDecl
              : this.parentDecl._rootDecl)
          : (e.Debug.assert(this.isSynthesized()), (this._rootDecl = null));
    }
    return (
      __extends(n, t),
      (n.prototype.fileName = function () {
        return this._rootDecl.fileName();
      }),
      (n.prototype.getParentDecl = function () {
        return this.parentDecl;
      }),
      (n.prototype.getParentPath = function () {
        if (!this.parentPath) {
          for (var e = [this], t = this.parentDecl; t; )
            !t || e[e.length - 1] === t || 8388864 & t.kind || e.unshift(t),
              (t = t.getParentDecl());
          this.parentPath = e;
        }
        return this.parentPath;
      }),
      (n.prototype.isExternalModule = function () {
        return !1;
      }),
      (n.prototype.getEnclosingDecl = function () {
        return (
          this.parentDecl && this.parentDecl._getEnclosingDeclFromParentDecl()
        );
      }),
      (n.prototype.isRootDecl = function () {
        return !1;
      }),
      n
    );
  })(r);
  e.NormalPullDecl = o;
  var s = (function (e) {
    function t(t, n, r) {
      e.call(this, t, n, 67108864, 4, r), (this.constantValue = null);
    }
    return __extends(t, e), t;
  })(o);
  e.PullEnumElementDecl = s;
  var a = (function (e) {
    function t(t, n, r, i) {
      "undefined" == typeof i && (i = ""),
        e.call(this, "", i, 131072, n, r),
        (this.functionExpressionName = t);
    }
    return (
      __extends(t, e),
      (t.prototype.getFunctionExpressionName = function () {
        return this.functionExpressionName;
      }),
      t
    );
  })(o);
  e.PullFunctionExpressionDecl = a;
  var l = (function (e) {
    function t(t, n, r, i, o, s) {
      e.call(this, t, n, r, i, o, !1), (this.semanticInfoChain = s);
    }
    return (
      __extends(t, e),
      (t.prototype.isSynthesized = function () {
        return !0;
      }),
      (t.prototype.fileName = function () {
        return this._rootDecl ? this._rootDecl.fileName() : "";
      }),
      t
    );
  })(o);
  e.PullSynthesizedDecl = l;
  var c = (function () {
    function e(e) {
      (this.name = e), (this._decls = []);
    }
    return (
      (e.prototype.addDecl = function (e) {
        e.name === this.name && (this._decls[this._decls.length] = e);
      }),
      (e.prototype.getDecls = function () {
        return this._decls;
      }),
      e
    );
  })();
  e.PullDeclGroup = c;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e, t) {
    for (
      var r = "", i = e.getAllowedToReferenceTypeParameters(), o = 0;
      o < i.length;
      o++
    ) {
      var s = i[o],
        a = s.pullSymbolID,
        l = t[a];
      l || (l = s), (r += a + ":" + n(l));
    }
    return r;
  }
  function n(e) {
    var t;
    return (
      e.isError()
        ? (t = "E" + n(e._anyType))
        : e.isNamedTypeSymbol() || (t = r(e)),
      t || (t = e.pullSymbolID + "#"),
      t
    );
  }
  function r(t) {
    if (t.isResolved) {
      var n = new m();
      e.PullHelpers.walkPullTypeSymbolStructure(t, n);
    }
    return null;
  }
  (e.pullSymbolID = 0), (e.sentinelEmptyArray = []);
  var i = (function () {
    function t(t, n) {
      (this.pullSymbolID = ++e.pullSymbolID),
        (this._container = null),
        (this.type = null),
        (this._declarations = null),
        (this.isResolved = !1),
        (this.isOptional = !1),
        (this.inResolution = !1),
        (this.isSynthesized = !1),
        (this.isVarArg = !1),
        (this.rootSymbol = null),
        (this._enclosingSignature = null),
        (this._docComments = null),
        (this.isPrinting = !1),
        (this.name = t),
        (this.kind = n);
    }
    return (
      (t.prototype.isAny = function () {
        return !1;
      }),
      (t.prototype.isType = function () {
        return 0 !== (58728795 & this.kind);
      }),
      (t.prototype.isTypeReference = function () {
        return !1;
      }),
      (t.prototype.isSignature = function () {
        return 0 !== (7340032 & this.kind);
      }),
      (t.prototype.isArrayNamedTypeReference = function () {
        return !1;
      }),
      (t.prototype.isPrimitive = function () {
        return 2 === this.kind;
      }),
      (t.prototype.isAccessor = function () {
        return !1;
      }),
      (t.prototype.isError = function () {
        return !1;
      }),
      (t.prototype.isInterface = function () {
        return 16 === this.kind;
      }),
      (t.prototype.isMethod = function () {
        return 65536 === this.kind;
      }),
      (t.prototype.isProperty = function () {
        return 4096 === this.kind;
      }),
      (t.prototype.isAlias = function () {
        return !1;
      }),
      (t.prototype.isContainer = function () {
        return !1;
      }),
      (t.prototype.findAliasedType = function (t, n, r, i, o) {
        "undefined" == typeof i && (i = []),
          "undefined" == typeof o && (o = []);
        for (var s = t.getDeclarations(), a = [], l = 0; l < s.length; l++) {
          var c = s[l];
          if (!e.ArrayUtilities.contains(o, c)) {
            o.push(c);
            for (var p = c.getChildDecls(), h = 0; h < p.length; h++) {
              var d = p[h];
              if (128 === d.kind && (!r || 1 & d.flags)) {
                var m = d.getSymbol();
                if (
                  u.usedAsSymbol(m, this) ||
                  (this.rootSymbol && u.usedAsSymbol(m, this.rootSymbol))
                )
                  return i.push(m), i;
                !n &&
                  this.isExternalModuleReferenceAlias(m) &&
                  (!m.assignedContainer().hasExportAssignment() ||
                    (m.assignedContainer().getExportAssignedContainerSymbol() &&
                      32 ===
                        m.assignedContainer().getExportAssignedContainerSymbol()
                          .kind)) &&
                  a.push(m);
              }
            }
          }
        }
        for (var l = 0; l < a.length; l++) {
          var f = a[l];
          i.push(f);
          var g = this.findAliasedType(
            f.assignedContainer().hasExportAssignment()
              ? f.assignedContainer().getExportAssignedContainerSymbol()
              : f.assignedContainer(),
            !1,
            !0,
            i,
            o
          );
          if (g) return g;
          i.pop();
        }
        return null;
      }),
      (t.prototype.getExternalAliasedSymbols = function (e) {
        if (!e) return null;
        var t = e.pathToRoot();
        if (t.length && 32 === t[t.length - 1].kind) {
          var n = this.findAliasedType(t[t.length - 1]);
          return n;
        }
        return null;
      }),
      (t.prototype.isExternalModuleReferenceAlias = function (e) {
        return e
          ? e.assignedValue()
            ? !1
            : e.assignedType() && e.assignedType() !== e.assignedContainer()
            ? !1
            : e.assignedContainer() && 32 !== e.assignedContainer().kind
            ? !1
            : !0
          : !1;
      }),
      (t.prototype.getExportedInternalAliasSymbol = function (t) {
        if (t && 128 !== this.kind)
          for (var n = t.pathToRoot(), r = 0; r < n.length; r++) {
            var i = this.findAliasedType(t, !0, !0);
            if (i) return e.Debug.assert(1 === i.length), i[0];
          }
        return null;
      }),
      (t.prototype.getAliasSymbolName = function (e, t, n, r) {
        if (!r) {
          var i = this.getExportedInternalAliasSymbol(e);
          if (i) return t(i);
        }
        var o = this.getExternalAliasedSymbols(e);
        if (o && this.isExternalModuleReferenceAlias(o[o.length - 1])) {
          var s = t(o[0]);
          if (!s) return null;
          for (var a = 1, l = o.length; l > a; a++) s = s + "." + n(o[a]);
          return s;
        }
        return null;
      }),
      (t.prototype._getResolver = function () {
        return (
          e.Debug.assert(this._declarations && this._declarations.length > 0),
          this._declarations[0].semanticInfoChain.getResolver()
        );
      }),
      (t.prototype._resolveDeclaredSymbol = function () {
        return this._getResolver().resolveDeclaredSymbol(this);
      }),
      (t.prototype.getName = function (e, t) {
        var n = this.getAliasSymbolName(
          e,
          function (n) {
            return n.getName(e, t);
          },
          function (e) {
            return e.getName();
          }
        );
        return n || this.name;
      }),
      (t.prototype.getDisplayName = function (e, t, n) {
        var r = this.getAliasSymbolName(
          e,
          function (n) {
            return n.getDisplayName(e, t);
          },
          function (e) {
            return e.getDisplayName();
          },
          n
        );
        if (r) return r;
        var i = this.getDeclarations(),
          o = i.length && i[0].getDisplayName();
        return o && o.length ? o : this.name;
      }),
      (t.prototype.getIsSpecialized = function () {
        return !1;
      }),
      (t.prototype.getRootSymbol = function () {
        return this.rootSymbol ? this.rootSymbol : this;
      }),
      (t.prototype.setRootSymbol = function (e) {
        this.rootSymbol = e;
      }),
      (t.prototype.setIsSynthesized = function (t) {
        "undefined" == typeof t && (t = !0),
          e.Debug.assert(null == this.rootSymbol),
          (this.isSynthesized = t);
      }),
      (t.prototype.getIsSynthesized = function () {
        return this.rootSymbol
          ? this.rootSymbol.getIsSynthesized()
          : this.isSynthesized;
      }),
      (t.prototype.setEnclosingSignature = function (e) {
        this._enclosingSignature = e;
      }),
      (t.prototype.getEnclosingSignature = function () {
        return this._enclosingSignature;
      }),
      (t.prototype.addDeclaration = function (t) {
        e.Debug.assert(!!t),
          this.rootSymbol ||
            (this._declarations
              ? (this._declarations[this._declarations.length] = t)
              : (this._declarations = [t]));
      }),
      (t.prototype.getDeclarations = function () {
        return this.rootSymbol
          ? this.rootSymbol.getDeclarations()
          : (this._declarations || (this._declarations = []),
            this._declarations);
      }),
      (t.prototype.hasDeclaration = function (t) {
        return this._declarations
          ? e.ArrayUtilities.any(this._declarations, function (e) {
              return e === t;
            })
          : !1;
      }),
      (t.prototype.setContainer = function (e) {
        this.rootSymbol || (this._container = e);
      }),
      (t.prototype.getContainer = function () {
        return this.rootSymbol
          ? this.rootSymbol.getContainer()
          : this._container;
      }),
      (t.prototype.setResolved = function () {
        (this.isResolved = !0), (this.inResolution = !1);
      }),
      (t.prototype.startResolving = function () {
        this.inResolution = !0;
      }),
      (t.prototype.setUnresolved = function () {
        (this.isResolved = !1), (this.inResolution = !1);
      }),
      (t.prototype.anyDeclHasFlag = function (t) {
        for (var n = this.getDeclarations(), r = 0, i = n.length; i > r; r++)
          if (e.hasFlag(n[r].flags, t)) return !0;
        return !1;
      }),
      (t.prototype.allDeclsHaveFlag = function (t) {
        for (var n = this.getDeclarations(), r = 0, i = n.length; i > r; r++)
          if (!e.hasFlag(n[r].flags, t)) return !1;
        return !0;
      }),
      (t.prototype.pathToRoot = function () {
        for (var e = [], t = this; t; ) {
          if (t.isType()) {
            var n = t.getAssociatedContainerType();
            n && (t = n);
          }
          e[e.length] = t;
          var r = t.kind;
          if (2048 === r) break;
          t = t.getContainer();
        }
        return e;
      }),
      (t.prototype.findCommonAncestorPath = function (e) {
        var t = this.pathToRoot();
        if (1 === t.length) return t;
        var n;
        if (!e) return t;
        n = e.pathToRoot();
        for (var r = -1, i = 0, o = t.length; o > i; i++) {
          for (var s = t[i], a = 0, l = n.length; l > a; a++) {
            var c = n[a];
            if (s === c) {
              var u = null;
              if (i > 0) {
                var p = t[i - 1].getDeclarations();
                p.length && (u = p[0].getParentDecl());
              }
              var h = null;
              if (a > 0) {
                var p = n[a - 1].getDeclarations();
                p.length && (h = p[0].getParentDecl());
              }
              if (!u || !h || u === h) {
                r = i;
                break;
              }
            }
          }
          if (r >= 0) break;
        }
        return r >= 0 ? t.slice(0, r) : t;
      }),
      (t.prototype.toString = function (e) {
        var t = this.getNameAndTypeName(e);
        return t;
      }),
      (t.prototype.getNamePartForFullName = function () {
        return this.getDisplayName(null, !0);
      }),
      (t.prototype.fullName = function (t) {
        var n = this,
          r = this.pathToRoot(),
          i = "",
          o = this.getAliasSymbolName(
            t,
            function (e) {
              return e.fullName(t);
            },
            function (e) {
              return e.getNamePartForFullName();
            }
          );
        if (o) return o;
        for (var s = 1; s < r.length; s++) {
          var o = r[s].getAliasSymbolName(
            t,
            function (e) {
              return e === n ? null : e.fullName(t);
            },
            function (e) {
              return e.getNamePartForFullName();
            }
          );
          if (o) {
            i = o + "." + i;
            break;
          }
          var a = r[s].getNamePartForFullName();
          if (32 === r[s].kind && !e.isQuoted(a)) break;
          if ("" === a) break;
          i = a + "." + i;
        }
        return (i += this.getNamePartForFullName());
      }),
      (t.prototype.getScopedName = function (t, n, r, i) {
        var o = this.findCommonAncestorPath(t),
          s = "",
          a = this.getAliasSymbolName(
            t,
            function (e) {
              return e.getScopedName(t, n, r, i);
            },
            function (e) {
              return e.getNamePartForFullName();
            },
            i
          );
        if (a) return a;
        for (var l = 1; l < o.length; l++) {
          var c = o[l].kind;
          if (4 !== c && 32 !== c) break;
          var a = o[l].getAliasSymbolName(
            t,
            function (e) {
              return e.getScopedName(t, n, !1, i);
            },
            function (e) {
              return e.getNamePartForFullName();
            },
            i
          );
          if (a) {
            s = a + "." + s;
            break;
          }
          if (4 !== c) {
            var u = o[l].getDisplayName();
            e.isQuoted(u) && (s = u + "." + s);
            break;
          }
          s = o[l].getDisplayName() + "." + s;
        }
        return (s += this.getDisplayName(t, r, i));
      }),
      (t.prototype.getScopedNameEx = function (t, n, r, i, o, s) {
        var a = this.getScopedName(t, n, r, s);
        return e.MemberName.create(a);
      }),
      (t.prototype.getTypeName = function (e, t) {
        var n = this.getTypeNameEx(e, t);
        return n.toString();
      }),
      (t.prototype.getTypeNameEx = function (t, n) {
        var r = this.type;
        if (r) {
          var i = n ? this.getTypeNameForFunctionSignature("", t, n) : null;
          return i || (i = r.getScopedNameEx(t, !1, !0, n)), i;
        }
        return e.MemberName.create("");
      }),
      (t.prototype.getTypeNameForFunctionSignature = function (t, n, r) {
        var i = this.type;
        if (
          i &&
          !i.isNamedTypeSymbol() &&
          4096 !== this.kind &&
          512 !== this.kind &&
          2048 !== this.kind
        ) {
          var s = i.getCallSignatures();
          if (1 === s.length || (r && s.length)) {
            var a = new e.MemberNameArray(),
              l = o.getSignaturesTypeNameEx(s, t, !1, !1, n, r);
            return a.addAll(l), a;
          }
        }
        return null;
      }),
      (t.prototype.getNameAndTypeName = function (e) {
        var t = this.getNameAndTypeNameEx(e);
        return t.toString();
      }),
      (t.prototype.getNameAndTypeNameEx = function (t) {
        var n = this.type,
          r = this.getDisplayName(t);
        if (n) {
          r += this.isOptional ? "?" : "";
          var i = this.getTypeNameForFunctionSignature(r, t);
          if (!i) {
            var o = n.getScopedNameEx(t);
            i = e.MemberName.create(o, r + ": ", "");
          }
          return i;
        }
        return e.MemberName.create(r);
      }),
      (t.getTypeParameterString = function (e, n, r) {
        return t.getTypeParameterStringEx(e, n, void 0, r).toString();
      }),
      (t.getTypeParameterStringEx = function (t, n, r, i) {
        var o = new e.MemberNameArray();
        if (((o.prefix = ""), t && t.length)) {
          o.add(e.MemberName.create("<"));
          for (var s = 0; s < t.length; s++)
            s && o.add(e.MemberName.create(", ")),
              r && o.add(new e.MemberName()),
              o.add(t[s].getScopedNameEx(n, !1, i)),
              r && o.add(new e.MemberName());
          o.add(e.MemberName.create(">"));
        }
        return o;
      }),
      (t.getIsExternallyVisible = function (t, n, r) {
        if (r) {
          for (var i = 0; i < r.length; i++) if (r[i] === t) return !0;
        } else r = [];
        if (n === t) return !0;
        r.push(n);
        var o = t.isExternallyVisible(r);
        return e.Debug.assert(e.ArrayUtilities.last(r) === n), r.pop(), o;
      }),
      (t.prototype.isExternallyVisible = function (e) {
        var n = this.kind;
        if (2 === n) return !0;
        if (this.rootSymbol)
          return t.getIsExternallyVisible(this.rootSymbol, this, e);
        if (this.isType()) {
          var r = this.getAssociatedContainerType();
          if (r) return t.getIsExternallyVisible(r, this, e);
        }
        if (this.anyDeclHasFlag(2)) return !1;
        var i = this.getContainer();
        if (null === i) {
          var o = this.getDeclarations();
          if (o.length) {
            var s = o[0].getParentDecl();
            if (s) {
              var a = s.getSymbol();
              return a && 1 !== s.kind
                ? t.getIsExternallyVisible(a, this, e)
                : !0;
            }
          }
          return !0;
        }
        if (
          32 === i.kind ||
          (i.getAssociatedContainerType() &&
            32 === i.getAssociatedContainerType().kind)
        ) {
          var l = 32 === i.kind ? i : i.getAssociatedContainerType();
          if (u.usedAsSymbol(l, this)) return !0;
        }
        return this.anyDeclHasFlag(1) || 4096 === n || 65536 === n
          ? t.getIsExternallyVisible(i, this, e)
          : !1;
      }),
      (t.prototype.getDocCommentsOfDecl = function (t) {
        var n = t.ast();
        if (n) {
          var r = e.ASTHelpers.getEnclosingModuleDeclaration(n);
          if (e.ASTHelpers.isLastNameOfModule(r, n))
            return e.ASTHelpers.docComments(r);
          if (130 !== n.kind() || 512 !== t.kind)
            return e.ASTHelpers.docComments(n);
        }
        return [];
      }),
      (t.prototype.getDocCommentArray = function (e) {
        var t = [];
        if (!e) return t;
        for (
          var n = 2048 === e.kind, r = e.getDeclarations(), i = 0;
          i < r.length;
          i++
        )
          (n && 4096 === r[i].kind) ||
            (t = t.concat(this.getDocCommentsOfDecl(r[i])));
        return t;
      }),
      (t.getDefaultConstructorSymbolForDocComments = function (e) {
        if (e.getHasDefaultConstructor()) {
          var n = e.getExtendedTypes();
          if (n.length)
            return t.getDefaultConstructorSymbolForDocComments(n[0]);
        }
        return e.type.getConstructSignatures()[0];
      }),
      (t.prototype.getDocCommentText = function (e) {
        for (var t = new Array(), n = 0; n < e.length; n++) {
          var r = this.getDocCommentTextValue(e[n]);
          "" !== r && t.push(r);
        }
        return t.join("\n");
      }),
      (t.prototype.getDocCommentTextValue = function (e) {
        return this.cleanJSDocComment(e.fullText());
      }),
      (t.prototype.docComments = function (e) {
        var t = this.getDeclarations();
        if (e && t.length && 32768 === t[0].kind) {
          var n = t[0].getParentDecl();
          return this.getDocCommentText(this.getDocCommentsOfDecl(n));
        }
        if (null === this._docComments) {
          var r = "";
          if (!e && 2097152 === this.kind && t.length && 8 === t[0].kind) {
            var i = this.returnType,
              o = i.getExtendedTypes();
            r = o.length ? o[0].getConstructorMethod().docComments() : "";
          } else if (2048 === this.kind) {
            var s = [],
              a = this.getEnclosingSignature(),
              l = this.getDocCommentArray(a),
              c = this.getParameterDocCommentText(this.getDisplayName(), l);
            "" != c && s.push(c);
            var u = this.getDocCommentText(this.getDocCommentArray(this));
            "" != u && s.push(u), (r = s.join("\n"));
          } else {
            var p = !0;
            if (16777216 === this.kind) {
              var h = this.getFunctionSymbol();
              if (h) (r = h._docComments || ""), (p = !1);
              else {
                var d = this.getDeclarations();
                d.length > 0 &&
                  ((r = d[0].getSymbol()._docComments || ""), (p = !1));
              }
            }
            if (
              p &&
              ((r = this.getDocCommentText(this.getDocCommentArray(this))),
              "" === r && 1048576 === this.kind)
            ) {
              var m = this.functionType;
              m && 1 === m.getCallSignatures().length && (r = m.docComments());
            }
          }
          this._docComments = r;
        }
        return this._docComments;
      }),
      (t.prototype.getParameterDocCommentText = function (e, t) {
        if (0 === t.length || 6 !== t[0].kind()) return "";
        for (var n = 0; n < t.length; n++)
          for (
            var r = t[n].fullText(), i = r.indexOf("@param", 0);
            i >= 0;
            i = r.indexOf("@param", i)
          )
            if (((i += 6), this.isSpaceChar(r, i))) {
              if (((i = this.consumeLeadingSpace(r, i)), -1 === i)) break;
              if (123 === r.charCodeAt(i)) {
                i++;
                for (var o = 0, s = 1; i < r.length; i++)
                  if (((o = r.charCodeAt(i)), 123 !== o)) {
                    if (125 !== o) {
                      if (64 === o) break;
                    } else if ((s--, 0 === s)) break;
                  } else s++;
                if (i === r.length) break;
                if (64 === o) continue;
                if (((i = this.consumeLeadingSpace(r, i + 1)), -1 === i)) break;
              }
              if (
                e === r.substr(i, e.length) &&
                this.isSpaceChar(r, i + e.length)
              ) {
                if (((i = this.consumeLeadingSpace(r, i + e.length)), -1 === i))
                  return "";
                var a = r.indexOf("@", i),
                  l = r.substring(i, 0 > a ? r.length : a),
                  c = void 0,
                  u = r.substring(0, i).lastIndexOf("\n") + 1;
                0 !== u && i > u && "\r" === r.charAt(u + 1) && u++;
                var p = this.consumeLeadingSpace(r, u);
                return (
                  p !== i && "*" === r.charAt(p) && (c = i - p - 1),
                  this.cleanJSDocComment(l, c)
                );
              }
            }
        return "";
      }),
      (t.prototype.cleanJSDocComment = function (e, t) {
        var n = new Array();
        (e = e.replace("/**", "")),
          e.length >= 2 &&
            "/" === e.charAt(e.length - 1) &&
            "*" === e.charAt(e.length - 2) &&
            (e = e.substring(0, e.length - 2));
        for (var r = e.split("\n"), i = !1, o = 0; o < r.length; o++) {
          var s = r[o],
            a = this.cleanDocCommentLine(s, !0, t);
          if (a) {
            for (
              var l = "", c = a.start, u = s.indexOf("@", a.start);
              u >= 0 && u < a.end;
              u = s.indexOf("@", u + 1)
            ) {
              var p = i;
              s.indexOf("param", u + 1) === u + 1 && this.isSpaceChar(s, u + 6)
                ? (p || (l += s.substring(c, u)), (c = u), (i = !0))
                : p && ((c = u), (i = !1));
            }
            i || (l += s.substring(c, a.end));
            var h = this.cleanDocCommentLine(l, !1);
            h && (void 0 === t && (t = a.jsDocSpacesRemoved), n.push(l));
          }
        }
        return n.join("\n");
      }),
      (t.prototype.consumeLeadingSpace = function (t, n, r) {
        var i = t.length;
        for (void 0 !== r && (i = e.MathPrototype.min(n + r, i)); i > n; n++) {
          var o = t.charCodeAt(n);
          if (32 !== o && 9 !== o) return n;
        }
        return i !== t.length ? i : -1;
      }),
      (t.prototype.isSpaceChar = function (e, t) {
        var n = e.length;
        if (n > t) {
          var r = e.charCodeAt(t);
          return 32 === r || 9 === r;
        }
        return t === n;
      }),
      (t.prototype.cleanDocCommentLine = function (e, t, n) {
        var r = this.consumeLeadingSpace(e, 0);
        if (-1 !== r) {
          var i = r;
          if (t && "*" === e.charAt(r)) {
            var o = r + 1;
            if (((r = this.consumeLeadingSpace(e, o, n)), -1 === r))
              return null;
            i = r - o;
          }
          return {
            start: r,
            end: "\r" === e.charAt(e.length - 1) ? e.length - 1 : e.length,
            jsDocSpacesRemoved: i,
          };
        }
        return null;
      }),
      t
    );
  })();
  e.PullSymbol = i;
  var o = (function (n) {
    function r(t, r) {
      "undefined" == typeof r && (r = !1),
        n.call(this, "", t),
        (this._isDefinition = r),
        (this._memberTypeParameterNameCache = null),
        (this._stringConstantOverload = void 0),
        (this.parameters = e.sentinelEmptyArray),
        (this._typeParameters = null),
        (this.returnType = null),
        (this.functionType = null),
        (this.hasOptionalParam = !1),
        (this.nonOptionalParamCount = 0),
        (this.hasVarArgs = !1),
        (this._allowedToReferenceTypeParameters = null),
        (this._instantiationCache = null),
        (this.hasBeenChecked = !1),
        (this.inWrapCheck = !1),
        (this.inWrapInfiniteExpandingReferenceCheck = !1);
    }
    return (
      __extends(r, n),
      (r.prototype.isDefinition = function () {
        return this._isDefinition;
      }),
      (r.prototype.isGeneric = function () {
        var e = this.getTypeParameters();
        return !!e && 0 !== e.length;
      }),
      (r.prototype.addParameter = function (t, n) {
        "undefined" == typeof n && (n = !1),
          this.parameters === e.sentinelEmptyArray && (this.parameters = []),
          (this.parameters[this.parameters.length] = t),
          (this.hasOptionalParam = n),
          t.getEnclosingSignature() || t.setEnclosingSignature(this),
          n || this.nonOptionalParamCount++;
      }),
      (r.prototype.addTypeParameter = function (t) {
        this._typeParameters || (this._typeParameters = []),
          this._memberTypeParameterNameCache ||
            (this._memberTypeParameterNameCache = e.createIntrinsicsObject()),
          (this._typeParameters[this._typeParameters.length] = t),
          (this._memberTypeParameterNameCache[t.getName()] = t);
      }),
      (r.prototype.addTypeParametersFromReturnType = function () {
        for (
          var e = this.returnType.getTypeParameters(), t = 0;
          t < e.length;
          t++
        )
          this.addTypeParameter(e[t]);
      }),
      (r.prototype.getTypeParameters = function () {
        return (
          this._typeParameters || (this._typeParameters = []),
          this._typeParameters
        );
      }),
      (r.prototype.findTypeParameter = function (t) {
        var n;
        if (!this._memberTypeParameterNameCache) {
          this._memberTypeParameterNameCache = e.createIntrinsicsObject();
          for (var r = 0; r < this.getTypeParameters().length; r++)
            this._memberTypeParameterNameCache[
              this._typeParameters[r].getName()
            ] = this._typeParameters[r];
        }
        return (n = this._memberTypeParameterNameCache[t]);
      }),
      (r.prototype.getTypeParameterArgumentMap = function () {
        return null;
      }),
      (r.prototype.getAllowedToReferenceTypeParameters = function () {
        return (
          e.Debug.assert(this.getRootSymbol() == this),
          this._allowedToReferenceTypeParameters ||
            (this._allowedToReferenceTypeParameters = e.PullInstantiationHelpers.getAllowedToReferenceTypeParametersFromDecl(
              this.getDeclarations()[0]
            )),
          this._allowedToReferenceTypeParameters
        );
      }),
      (r.prototype.addSpecialization = function (n, r) {
        e.Debug.assert(this.getRootSymbol() == this),
          this._instantiationCache ||
            (this._instantiationCache = e.createIntrinsicsObject()),
          (this._instantiationCache[t(this, r)] = n);
      }),
      (r.prototype.getSpecialization = function (n) {
        if (
          (e.Debug.assert(this.getRootSymbol() == this),
          !this._instantiationCache)
        )
          return null;
        var r = this._instantiationCache[t(this, n)];
        return r || null;
      }),
      (r.prototype.isStringConstantOverloadSignature = function () {
        if (void 0 === this._stringConstantOverload) {
          var e = this.parameters;
          this._stringConstantOverload = !1;
          for (var t = 0; t < e.length; t++) {
            var n = e[t].type;
            n &&
              n.isPrimitive() &&
              n.isStringConstant() &&
              (this._stringConstantOverload = !0);
          }
        }
        return this._stringConstantOverload;
      }),
      (r.prototype.getParameterTypeAtIndex = function (e) {
        if (
          e < this.parameters.length - 1 ||
          (e < this.parameters.length && !this.hasVarArgs)
        )
          return this.parameters[e].type;
        if (this.hasVarArgs) {
          var t = this.parameters[this.parameters.length - 1].type;
          return t.isArrayNamedTypeReference() && (t = t.getElementType()), t;
        }
        return null;
      }),
      (r.getSignatureTypeMemberName = function (t, n, i) {
        var o = new e.MemberNameArray(),
          s = r.getSignaturesTypeNameEx(n, "", !1, !1, i, !0, t);
        return o.addAll(s), o;
      }),
      (r.getSignaturesTypeNameEx = function (t, n, r, i, o, s, a) {
        var l = [];
        if (!t) return l;
        var c = t.length;
        !s && c > 1 && (r = !1);
        var u = !1;
        a && a.isDefinition() && c > 1 && (a = null);
        for (var p = 0; c > p; p++)
          if (c > 1 && t[p].isDefinition()) u = !0;
          else {
            var h = t[p];
            if (
              (s && a && (h = a),
              l.push(h.getSignatureTypeNameEx(n, r, i, o)),
              s)
            )
              break;
          }
        if (s && l.length && c > 1) {
          for (var d = l[l.length - 1], p = p + 1; c > p; p++)
            if (t[p].isDefinition()) {
              u = !0;
              break;
            }
          var m = e.getLocalizedText(e.DiagnosticCode._0_overload_s, [
            u ? c - 2 : c - 1,
          ]);
          d.add(e.MemberName.create(m));
        }
        return l;
      }),
      (r.prototype.toString = function (e, t) {
        var n = this.getSignatureTypeNameEx(
          this.getScopedNameEx().toString(),
          !1,
          !1,
          e,
          void 0,
          t
        ).toString();
        return n;
      }),
      (r.prototype.getSignatureTypeNameEx = function (t, n, r, o, s, a) {
        var l = new e.MemberNameArray();
        l.add(i.getTypeParameterStringEx(this.getTypeParameters(), o, a, !0)),
          r ? l.add(e.MemberName.create("[")) : l.add(e.MemberName.create("("));
        var c = new e.MemberNameArray();
        (c.prefix = t),
          a
            ? ((c.prefix = t), c.addAll(l.entries))
            : (c.prefix = t + l.toString());
        for (var u = this.parameters, p = u.length, h = 0; p > h; h++) {
          var d = u[h].type,
            m = d ? ": " : "",
            f = u[h].isVarArg,
            g = f ? "..." : "",
            v = !f && u[h].isOptional ? "?" : "";
          s && c.add(new e.MemberName()),
            c.add(
              e.MemberName.create(
                g + u[h].getScopedNameEx(o).toString() + v + m
              )
            ),
            d && c.add(d.getScopedNameEx(o)),
            s && c.add(new e.MemberName()),
            p - 1 > h && c.add(e.MemberName.create(", "));
        }
        return (
          n
            ? r
              ? c.add(e.MemberName.create("] => "))
              : c.add(e.MemberName.create(") => "))
            : r
            ? c.add(e.MemberName.create("]: "))
            : c.add(e.MemberName.create("): ")),
          this.returnType
            ? c.add(this.returnType.getScopedNameEx(o))
            : c.add(e.MemberName.create("any")),
          c
        );
      }),
      (r.prototype.forAllParameterTypes = function (e, t) {
        this.parameters.length < e &&
          !this.hasVarArgs &&
          (e = this.parameters.length);
        for (var n = 0; e > n; n++) {
          var r = this.getParameterTypeAtIndex(n);
          if (!t(r, n)) return !1;
        }
        return !0;
      }),
      (r.prototype.forAllCorrespondingParameterTypesInThisAndOtherSignature = function (
        e,
        t
      ) {
        var n;
        n = this.hasVarArgs
          ? e.hasVarArgs
            ? Math.max(this.parameters.length, e.parameters.length)
            : e.parameters.length
          : e.hasVarArgs
          ? this.parameters.length
          : Math.min(this.parameters.length, e.parameters.length);
        for (var r = 0; n > r; r++) {
          var i = this.getParameterTypeAtIndex(r),
            o = e.getParameterTypeAtIndex(r);
          if (!t(i, o, r)) return !1;
        }
        return !0;
      }),
      (r.prototype.wrapsSomeTypeParameter = function (e) {
        return 0 !== this.getWrappingTypeParameterID(e);
      }),
      (r.prototype.getWrappingTypeParameterID = function (t) {
        var n = this;
        if (n.inWrapCheck) return 0;
        this._wrapsTypeParameterCache =
          this._wrapsTypeParameterCache || new e.WrapsTypeParameterCache();
        var r = this._wrapsTypeParameterCache.getWrapsTypeParameter(t);
        return (
          void 0 === r &&
            ((r = this.getWrappingTypeParameterIDWorker(t)),
            this._wrapsTypeParameterCache.setWrapsTypeParameter(t, r)),
          r
        );
      }),
      (r.prototype.getWrappingTypeParameterIDWorker = function (t) {
        var n = this;
        (n.inWrapCheck = !0), e.PullHelpers.resolveDeclaredSymbolToUseType(n);
        for (
          var r = n.returnType ? n.returnType.getWrappingTypeParameterID(t) : 0,
            i = n.parameters,
            o = 0;
          !r && o < i.length;
          o++
        )
          e.PullHelpers.resolveDeclaredSymbolToUseType(i[o]),
            (r = i[o].type.getWrappingTypeParameterID(t));
        return (n.inWrapCheck = !1), r;
      }),
      (r.prototype._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReference = function (
        e,
        t
      ) {
        var n = t.valueAt(this.pullSymbolID, e.pullSymbolID);
        return void 0 != n
          ? n
          : this.inWrapInfiniteExpandingReferenceCheck
          ? !1
          : ((this.inWrapInfiniteExpandingReferenceCheck = !0),
            (n = this._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceWorker(
              e,
              t
            )),
            t.setValueAt(this.pullSymbolID, e.pullSymbolID, n),
            (this.inWrapInfiniteExpandingReferenceCheck = !1),
            n);
      }),
      (r.prototype._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceWorker = function (
        e,
        t
      ) {
        if (
          this.returnType &&
          this.returnType._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceRecurse(
            e,
            t
          )
        )
          return !0;
        for (var n = this.parameters, r = 0; r < n.length; r++)
          if (
            n[r].type &&
            n[
              r
            ].type._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceRecurse(
              e,
              t
            )
          )
            return !0;
        return !1;
      }),
      r
    );
  })(i);
  e.PullSignatureSymbol = o;
  var s = (function (n) {
    function r(t, r) {
      n.call(this, t, r),
        (this._members = e.sentinelEmptyArray),
        (this._enclosedMemberTypes = null),
        (this._enclosedMemberContainers = null),
        (this._typeParameters = null),
        (this._allowedToReferenceTypeParameters = null),
        (this._specializedVersionsOfThisType = null),
        (this._arrayVersionOfThisType = null),
        (this._implementedTypes = null),
        (this._extendedTypes = null),
        (this._typesThatExplicitlyImplementThisType = null),
        (this._typesThatExtendThisType = null),
        (this._callSignatures = null),
        (this._allCallSignatures = null),
        (this._constructSignatures = null),
        (this._indexSignatures = null),
        (this._allIndexSignatures = null),
        (this._allIndexSignaturesOfAugmentedType = null),
        (this._memberNameCache = null),
        (this._enclosedTypeNameCache = null),
        (this._enclosedContainerCache = null),
        (this._typeParameterNameCache = null),
        (this._containedNonMemberNameCache = null),
        (this._containedNonMemberTypeNameCache = null),
        (this._containedNonMemberContainerCache = null),
        (this._simpleInstantiationCache = null),
        (this._complexInstantiationCache = null),
        (this._hasGenericSignature = !1),
        (this._hasGenericMember = !1),
        (this._hasBaseTypeConflict = !1),
        (this._knownBaseTypeCount = 0),
        (this._associatedContainerTypeSymbol = null),
        (this._constructorMethod = null),
        (this._hasDefaultConstructor = !1),
        (this._functionSymbol = null),
        (this._inMemberTypeNameEx = !1),
        (this.inSymbolPrivacyCheck = !1),
        (this.inWrapCheck = !1),
        (this.inWrapInfiniteExpandingReferenceCheck = !1),
        (this.typeReference = null),
        (this._widenedType = null),
        (this._isArrayNamedTypeReference = void 0),
        (this.type = this);
    }
    return (
      __extends(r, n),
      (r.prototype.isArrayNamedTypeReference = function () {
        return (
          void 0 === this._isArrayNamedTypeReference &&
            (this._isArrayNamedTypeReference = this.computeIsArrayNamedTypeReference()),
          this._isArrayNamedTypeReference
        );
      }),
      (r.prototype.computeIsArrayNamedTypeReference = function () {
        var e = this.getTypeArguments();
        if (
          e &&
          1 === this.getTypeArguments().length &&
          "Array" === this.name
        ) {
          var t = this.getDeclarations()[0];
          if (
            t &&
            t.getParentDecl() &&
            null === t.getParentDecl().getParentDecl()
          )
            return !0;
        }
        return !1;
      }),
      (r.prototype.isType = function () {
        return !0;
      }),
      (r.prototype.isClass = function () {
        return 8 === this.kind || null !== this._constructorMethod;
      }),
      (r.prototype.isFunction = function () {
        return 0 !== (50331648 & this.kind);
      }),
      (r.prototype.isConstructor = function () {
        return 33554432 === this.kind;
      }),
      (r.prototype.isTypeParameter = function () {
        return !1;
      }),
      (r.prototype.isTypeVariable = function () {
        return !1;
      }),
      (r.prototype.isError = function () {
        return !1;
      }),
      (r.prototype.isEnum = function () {
        return 64 === this.kind;
      }),
      (r.prototype.getTypeParameterArgumentMap = function () {
        return null;
      }),
      (r.prototype.isObject = function () {
        return e.hasFlag(this.kind, 58720600);
      }),
      (r.prototype.isFunctionType = function () {
        return (
          this.getCallSignatures().length > 0 ||
          this.getConstructSignatures().length > 0
        );
      }),
      (r.prototype.getKnownBaseTypeCount = function () {
        return this._knownBaseTypeCount;
      }),
      (r.prototype.resetKnownBaseTypeCount = function () {
        this._knownBaseTypeCount = 0;
      }),
      (r.prototype.incrementKnownBaseCount = function () {
        this._knownBaseTypeCount++;
      }),
      (r.prototype.setHasBaseTypeConflict = function () {
        this._hasBaseTypeConflict = !0;
      }),
      (r.prototype.hasBaseTypeConflict = function () {
        return this._hasBaseTypeConflict;
      }),
      (r.prototype.hasMembers = function () {
        if (this._members !== e.sentinelEmptyArray) return !0;
        for (var t = this.getExtendedTypes(), n = 0; n < t.length; n++)
          if (t[n].hasMembers()) return !0;
        return !1;
      }),
      (r.prototype.setHasGenericSignature = function () {
        this._hasGenericSignature = !0;
      }),
      (r.prototype.getHasGenericSignature = function () {
        return this._hasGenericSignature;
      }),
      (r.prototype.setHasGenericMember = function () {
        this._hasGenericMember = !0;
      }),
      (r.prototype.getHasGenericMember = function () {
        return this._hasGenericMember;
      }),
      (r.prototype.setAssociatedContainerType = function (e) {
        this._associatedContainerTypeSymbol = e;
      }),
      (r.prototype.getAssociatedContainerType = function () {
        return this._associatedContainerTypeSymbol;
      }),
      (r.prototype.getArrayType = function () {
        return this._arrayVersionOfThisType;
      }),
      (r.prototype.getElementType = function () {
        return null;
      }),
      (r.prototype.setArrayType = function (e) {
        this._arrayVersionOfThisType = e;
      }),
      (r.prototype.getFunctionSymbol = function () {
        return this._functionSymbol;
      }),
      (r.prototype.setFunctionSymbol = function (e) {
        e && (this._functionSymbol = e);
      }),
      (r.prototype.findContainedNonMember = function (e) {
        return this._containedNonMemberNameCache
          ? this._containedNonMemberNameCache[e]
          : null;
      }),
      (r.prototype.findContainedNonMemberType = function (t, n) {
        if (
          ("undefined" == typeof n && (n = 0),
          !this._containedNonMemberTypeNameCache)
        )
          return null;
        var r = this._containedNonMemberTypeNameCache[t];
        return r && 0 !== n && (r = e.hasFlag(r.kind, n) ? r : null), r;
      }),
      (r.prototype.findContainedNonMemberContainer = function (t, n) {
        if (
          ("undefined" == typeof n && (n = 0),
          !this._containedNonMemberContainerCache)
        )
          return null;
        var r = this._containedNonMemberContainerCache[t];
        return r && 0 !== n && (r = e.hasFlag(r.kind, n) ? r : null), r;
      }),
      (r.prototype.addMember = function (t) {
        t &&
          (t.setContainer(this),
          this._memberNameCache ||
            (this._memberNameCache = e.createIntrinsicsObject()),
          this._members === e.sentinelEmptyArray && (this._members = []),
          this._members.push(t),
          (this._memberNameCache[t.name] = t));
      }),
      (r.prototype.addEnclosedMemberType = function (t) {
        t &&
          (t.setContainer(this),
          this._enclosedTypeNameCache ||
            (this._enclosedTypeNameCache = e.createIntrinsicsObject()),
          this._enclosedMemberTypes || (this._enclosedMemberTypes = []),
          (this._enclosedMemberTypes[this._enclosedMemberTypes.length] = t),
          (this._enclosedTypeNameCache[t.name] = t));
      }),
      (r.prototype.addEnclosedMemberContainer = function (t) {
        t &&
          (t.setContainer(this),
          this._enclosedContainerCache ||
            (this._enclosedContainerCache = e.createIntrinsicsObject()),
          this._enclosedMemberContainers ||
            (this._enclosedMemberContainers = []),
          (this._enclosedMemberContainers[
            this._enclosedMemberContainers.length
          ] = t),
          (this._enclosedContainerCache[t.name] = t));
      }),
      (r.prototype.addEnclosedNonMember = function (t) {
        t &&
          (t.setContainer(this),
          this._containedNonMemberNameCache ||
            (this._containedNonMemberNameCache = e.createIntrinsicsObject()),
          (this._containedNonMemberNameCache[t.name] = t));
      }),
      (r.prototype.addEnclosedNonMemberType = function (t) {
        t &&
          (t.setContainer(this),
          this._containedNonMemberTypeNameCache ||
            (this._containedNonMemberTypeNameCache = e.createIntrinsicsObject()),
          (this._containedNonMemberTypeNameCache[t.name] = t));
      }),
      (r.prototype.addEnclosedNonMemberContainer = function (t) {
        t &&
          (t.setContainer(this),
          this._containedNonMemberContainerCache ||
            (this._containedNonMemberContainerCache = e.createIntrinsicsObject()),
          (this._containedNonMemberContainerCache[t.name] = t));
      }),
      (r.prototype.addTypeParameter = function (t) {
        t &&
          (t.getContainer() || t.setContainer(this),
          this._typeParameterNameCache ||
            (this._typeParameterNameCache = e.createIntrinsicsObject()),
          this._typeParameters || (this._typeParameters = []),
          (this._typeParameters[this._typeParameters.length] = t),
          (this._typeParameterNameCache[t.getName()] = t));
      }),
      (r.prototype.getMembers = function () {
        return this._members;
      }),
      (r.prototype.setHasDefaultConstructor = function (e) {
        "undefined" == typeof e && (e = !0), (this._hasDefaultConstructor = e);
      }),
      (r.prototype.getHasDefaultConstructor = function () {
        return this._hasDefaultConstructor;
      }),
      (r.prototype.getConstructorMethod = function () {
        return this._constructorMethod;
      }),
      (r.prototype.setConstructorMethod = function (e) {
        this._constructorMethod = e;
      }),
      (r.prototype.getTypeParameters = function () {
        return this._typeParameters
          ? this._typeParameters
          : e.sentinelEmptyArray;
      }),
      (r.prototype.getAllowedToReferenceTypeParameters = function () {
        return this.kind && this.isNamedTypeSymbol() && !this.isTypeParameter()
          ? this.getTypeParameters()
          : (this._allowedToReferenceTypeParameters ||
              (this._allowedToReferenceTypeParameters = e.PullInstantiationHelpers.getAllowedToReferenceTypeParametersFromDecl(
                this.getDeclarations()[0]
              )),
            this._allowedToReferenceTypeParameters);
      }),
      (r.prototype.isGeneric = function () {
        return (
          (this._typeParameters && this._typeParameters.length > 0) ||
          this._hasGenericSignature ||
          this._hasGenericMember ||
          this.isArrayNamedTypeReference()
        );
      }),
      (r.prototype.canUseSimpleInstantiationCache = function (e) {
        if (this.isTypeParameter()) return !0;
        var t = this.getTypeParameters();
        return (
          e &&
          this.isNamedTypeSymbol() &&
          1 === t.length &&
          8388608 !== e[t[0].pullSymbolID].kind
        );
      }),
      (r.prototype.getSimpleInstantiationCacheId = function (e) {
        return this.isTypeParameter()
          ? e[0].pullSymbolID
          : e[this.getTypeParameters()[0].pullSymbolID].pullSymbolID;
      }),
      (r.prototype.addSpecialization = function (n, r) {
        this.canUseSimpleInstantiationCache(r)
          ? (this._simpleInstantiationCache ||
              (this._simpleInstantiationCache = []),
            (this._simpleInstantiationCache[
              this.getSimpleInstantiationCacheId(r)
            ] = n))
          : (this._complexInstantiationCache ||
              (this._complexInstantiationCache = e.createIntrinsicsObject()),
            (this._complexInstantiationCache[t(this, r)] = n)),
          this._specializedVersionsOfThisType ||
            (this._specializedVersionsOfThisType = []),
          this._specializedVersionsOfThisType.push(n);
      }),
      (r.prototype.getSpecialization = function (e) {
        if (this.canUseSimpleInstantiationCache(e)) {
          if (!this._simpleInstantiationCache) return null;
          var n = this._simpleInstantiationCache[
            this.getSimpleInstantiationCacheId(e)
          ];
          return n || null;
        }
        if (!this._complexInstantiationCache) return null;
        if (0 == this.getAllowedToReferenceTypeParameters().length) return this;
        var n = this._complexInstantiationCache[t(this, e)];
        return n || null;
      }),
      (r.prototype.getKnownSpecializations = function () {
        return this._specializedVersionsOfThisType
          ? this._specializedVersionsOfThisType
          : e.sentinelEmptyArray;
      }),
      (r.prototype.getTypeArguments = function () {
        return null;
      }),
      (r.prototype.getTypeArgumentsOrTypeParameters = function () {
        return this.getTypeParameters();
      }),
      (r.prototype.addCallSignaturePrerequisite = function (e) {
        this._callSignatures || (this._callSignatures = []),
          e.isGeneric() && (this._hasGenericSignature = !0),
          (e.functionType = this);
      }),
      (r.prototype.appendCallSignature = function (e) {
        this.addCallSignaturePrerequisite(e), this._callSignatures.push(e);
      }),
      (r.prototype.insertCallSignatureAtIndex = function (t, n) {
        this.addCallSignaturePrerequisite(t),
          e.Debug.assert(n <= this._callSignatures.length),
          n === this._callSignatures.length
            ? this._callSignatures.push(t)
            : this._callSignatures.splice(n, 0, t);
      }),
      (r.prototype.addConstructSignaturePrerequisite = function (e) {
        this._constructSignatures || (this._constructSignatures = []),
          e.isGeneric() && (this._hasGenericSignature = !0),
          (e.functionType = this);
      }),
      (r.prototype.appendConstructSignature = function (e) {
        this.addConstructSignaturePrerequisite(e),
          this._constructSignatures.push(e);
      }),
      (r.prototype.insertConstructSignatureAtIndex = function (t, n) {
        this.addConstructSignaturePrerequisite(t),
          e.Debug.assert(n <= this._constructSignatures.length),
          n === this._constructSignatures.length
            ? this._constructSignatures.push(t)
            : this._constructSignatures.splice(n, 0, t);
      }),
      (r.prototype.addIndexSignature = function (e) {
        this._indexSignatures || (this._indexSignatures = []),
          (this._indexSignatures[this._indexSignatures.length] = e),
          e.isGeneric() && (this._hasGenericSignature = !0),
          (e.functionType = this);
      }),
      (r.prototype.hasOwnCallSignatures = function () {
        return null !== this._callSignatures;
      }),
      (r.prototype.getOwnCallSignatures = function () {
        return this._callSignatures || e.sentinelEmptyArray;
      }),
      (r.prototype.getCallSignatures = function () {
        if (this._allCallSignatures) return this._allCallSignatures;
        var e = [];
        if (
          (this._callSignatures && (e = e.concat(this._callSignatures)),
          this._extendedTypes && 16 === this.kind)
        )
          for (var t = 0; t < this._extendedTypes.length; t++)
            this._extendedTypes[t].hasBase(this) ||
              this._getResolver()._addUnhiddenSignaturesFromBaseType(
                this._callSignatures,
                this._extendedTypes[t].getCallSignatures(),
                e
              );
        return (this._allCallSignatures = e), e;
      }),
      (r.prototype.hasOwnConstructSignatures = function () {
        return null !== this._constructSignatures;
      }),
      (r.prototype.getOwnConstructSignatures = function () {
        return this._constructSignatures || e.sentinelEmptyArray;
      }),
      (r.prototype.getConstructSignatures = function () {
        var e = [];
        if (
          (this._constructSignatures &&
            (e = e.concat(this._constructSignatures)),
          this._extendedTypes && 16 === this.kind)
        )
          for (var t = 0; t < this._extendedTypes.length; t++)
            this._extendedTypes[t].hasBase(this) ||
              this._getResolver()._addUnhiddenSignaturesFromBaseType(
                this._constructSignatures,
                this._extendedTypes[t].getConstructSignatures(),
                e
              );
        return e;
      }),
      (r.prototype.hasOwnIndexSignatures = function () {
        return null !== this._indexSignatures;
      }),
      (r.prototype.getOwnIndexSignatures = function () {
        return this._indexSignatures || e.sentinelEmptyArray;
      }),
      (r.prototype.getIndexSignatures = function () {
        if (this._allIndexSignatures) return this._allIndexSignatures;
        var e = [];
        if (
          (this._indexSignatures && (e = e.concat(this._indexSignatures)),
          this._extendedTypes)
        )
          for (var t = 0; t < this._extendedTypes.length; t++)
            this._extendedTypes[t].hasBase(this) ||
              this._getResolver()._addUnhiddenSignaturesFromBaseType(
                this._indexSignatures,
                this._extendedTypes[t].getIndexSignatures(),
                e
              );
        return (this._allIndexSignatures = e), e;
      }),
      (r.prototype.getIndexSignaturesOfAugmentedType = function (e, t, n) {
        if (!this._allIndexSignaturesOfAugmentedType) {
          var r = this.getIndexSignatures(),
            i = !1,
            o = !1;
          if (t && this.isFunctionType() && this !== t) {
            var s = t.getIndexSignatures();
            s.length && (i = !0);
          }
          if (n && this !== n) {
            var a = n.getIndexSignatures();
            a.length && (o = !0);
          }
          i || o
            ? ((this._allIndexSignaturesOfAugmentedType = r.slice(0)),
              i &&
                e._addUnhiddenSignaturesFromBaseType(
                  r,
                  s,
                  this._allIndexSignaturesOfAugmentedType
                ),
              o &&
                (i && (r = r.concat(s)),
                e._addUnhiddenSignaturesFromBaseType(
                  r,
                  a,
                  this._allIndexSignaturesOfAugmentedType
                )))
            : (this._allIndexSignaturesOfAugmentedType = r);
        }
        return this._allIndexSignaturesOfAugmentedType;
      }),
      (r.prototype.addImplementedType = function (e) {
        e &&
          (this._implementedTypes || (this._implementedTypes = []),
          (this._implementedTypes[this._implementedTypes.length] = e),
          e.addTypeThatExplicitlyImplementsThisType(this));
      }),
      (r.prototype.getImplementedTypes = function () {
        return this._implementedTypes
          ? this._implementedTypes
          : e.sentinelEmptyArray;
      }),
      (r.prototype.addExtendedType = function (e) {
        e &&
          (this._extendedTypes || (this._extendedTypes = []),
          (this._extendedTypes[this._extendedTypes.length] = e),
          e.addTypeThatExtendsThisType(this));
      }),
      (r.prototype.getExtendedTypes = function () {
        return this._extendedTypes ? this._extendedTypes : e.sentinelEmptyArray;
      }),
      (r.prototype.addTypeThatExtendsThisType = function (e) {
        e &&
          (this._typesThatExtendThisType ||
            (this._typesThatExtendThisType = []),
          (this._typesThatExtendThisType[
            this._typesThatExtendThisType.length
          ] = e));
      }),
      (r.prototype.getTypesThatExtendThisType = function () {
        return (
          this._typesThatExtendThisType || (this._typesThatExtendThisType = []),
          this._typesThatExtendThisType
        );
      }),
      (r.prototype.addTypeThatExplicitlyImplementsThisType = function (e) {
        e &&
          (this._typesThatExplicitlyImplementThisType ||
            (this._typesThatExplicitlyImplementThisType = []),
          (this._typesThatExplicitlyImplementThisType[
            this._typesThatExplicitlyImplementThisType.length
          ] = e));
      }),
      (r.prototype.getTypesThatExplicitlyImplementThisType = function () {
        return (
          this._typesThatExplicitlyImplementThisType ||
            (this._typesThatExplicitlyImplementThisType = []),
          this._typesThatExplicitlyImplementThisType
        );
      }),
      (r.prototype.hasBase = function (t, n) {
        if (
          ("undefined" == typeof n && (n = []),
          this === t ||
            this.getRootSymbol() === t ||
            this === t.getRootSymbol())
        )
          return !0;
        if (e.ArrayUtilities.contains(n, this)) return !0;
        n.push(this);
        for (var r = this.getExtendedTypes(), i = 0; i < r.length; i++)
          if (r[i].hasBase(t, n)) return !0;
        for (var o = this.getImplementedTypes(), i = 0; i < o.length; i++)
          if (o[i].hasBase(t, n)) return !0;
        return n.pop(), !1;
      }),
      (r.prototype.isValidBaseKind = function (e, t) {
        if (e.isError()) return !1;
        var n = this.isClass();
        if (t) {
          if (n) return 8 === e.kind;
        } else if (!n) return !1;
        return !!(24 & e.kind);
      }),
      (r.prototype.findMember = function (e, t) {
        var n = null;
        if ((this._memberNameCache && (n = this._memberNameCache[e]), n || !t))
          return n;
        if (this._extendedTypes)
          for (var r = 0; r < this._extendedTypes.length; r++)
            if ((n = this._extendedTypes[r].findMember(e, t))) return n;
        return null;
      }),
      (r.prototype.findNestedType = function (t, n) {
        "undefined" == typeof n && (n = 0);
        var r;
        return this._enclosedTypeNameCache
          ? ((r = this._enclosedTypeNameCache[t]),
            r && 0 !== n && (r = e.hasFlag(r.kind, n) ? r : null),
            r)
          : null;
      }),
      (r.prototype.findNestedContainer = function (t, n) {
        "undefined" == typeof n && (n = 0);
        var r;
        return this._enclosedContainerCache
          ? ((r = this._enclosedContainerCache[t]),
            r && 0 !== n && (r = e.hasFlag(r.kind, n) ? r : null),
            r)
          : null;
      }),
      (r.prototype.getAllMembers = function (t, n) {
        var r = [];
        if (this._members !== e.sentinelEmptyArray)
          for (var i = 0, o = this._members.length; o > i; i++) {
            var s = this._members[i];
            s.kind & t &&
              (2 !== n || !s.anyDeclHasFlag(2)) &&
              (r[r.length] = s);
          }
        if (this._extendedTypes)
          for (
            var a = 0 !== n ? 2 : 0, i = 0, o = this._extendedTypes.length;
            o > i;
            i++
          )
            for (
              var l = this._extendedTypes[i].getAllMembers(t, a),
                c = 0,
                u = l.length;
              u > c;
              c++
            ) {
              var p = l[c];
              (this._memberNameCache && this._memberNameCache[p.name]) ||
                (r[r.length] = p);
            }
        if (this.isContainer()) {
          if (this._enclosedMemberTypes)
            for (var i = 0; i < this._enclosedMemberTypes.length; i++)
              r[r.length] = this._enclosedMemberTypes[i];
          if (this._enclosedMemberContainers)
            for (var i = 0; i < this._enclosedMemberContainers.length; i++)
              r[r.length] = this._enclosedMemberContainers[i];
        }
        return r;
      }),
      (r.prototype.findTypeParameter = function (e) {
        return this._typeParameterNameCache
          ? this._typeParameterNameCache[e]
          : null;
      }),
      (r.prototype.setResolved = function () {
        n.prototype.setResolved.call(this);
      }),
      (r.prototype.getNamePartForFullName = function () {
        var e = n.prototype.getNamePartForFullName.call(this),
          t = this.getTypeArgumentsOrTypeParameters(),
          r = i.getTypeParameterString(t, this, !0);
        return e + r;
      }),
      (r.prototype.getScopedName = function (e, t, n, r) {
        return this.getScopedNameEx(e, t, n, !1, !1, r).toString();
      }),
      (r.prototype.isNamedTypeSymbol = function () {
        var e = this.kind;
        return 2 === e ||
          8 === e ||
          4 === e ||
          32 === e ||
          128 === e ||
          64 === e ||
          8192 === e ||
          ((16 === e || 8388608 === e) && "" !== this.name)
          ? !0
          : !1;
      }),
      (r.prototype.toString = function (e, t) {
        var n = this.getScopedNameEx(e, !1, t).toString();
        return n;
      }),
      (r.prototype.getScopedNameEx = function (t, r, o, s, a, l, c) {
        if (
          ("undefined" == typeof c && (c = !0),
          this.isArrayNamedTypeReference() && c)
        ) {
          var u = this.getElementType(),
            p = u
              ? u.isArrayNamedTypeReference() || u.isNamedTypeSymbol()
                ? u.getScopedNameEx(t, !1, !1, s, a, l)
                : u.getMemberTypeNameEx(!1, t, s)
              : e.MemberName.create("any");
          return e.MemberName.create(p, "", "[]");
        }
        if (!this.isNamedTypeSymbol())
          return this.getMemberTypeNameEx(!0, t, s);
        if (r)
          return e.MemberName.create(
            n.prototype.getScopedName.call(this, t, r, o, l)
          );
        var h = new e.MemberNameArray();
        h.prefix = n.prototype.getScopedName.call(this, t, r, o, l);
        var d = this.getTypeArgumentsOrTypeParameters();
        return h.add(i.getTypeParameterStringEx(d, t, a, o)), h;
      }),
      (r.prototype.hasOnlyOverloadCallSignatures = function () {
        var e = this.getMembers(),
          t = this.getCallSignatures(),
          n = this.getConstructSignatures();
        return 0 === e.length && 0 === n.length && t.length > 1;
      }),
      (r.prototype.getTypeOfSymbol = function () {
        var t = this.getAssociatedContainerType();
        if (t && t.isNamedTypeSymbol()) return t;
        var n = this.getFunctionSymbol();
        return n && 16384 === n.kind && !e.PullHelpers.isSymbolLocal(n)
          ? e.PullHelpers.isExportedSymbolInClodule(n)
            ? null
            : n
          : null;
      }),
      (r.prototype.getMemberTypeNameEx = function (t, n, r) {
        var i = this.getMembers(),
          s = this.getCallSignatures(),
          a = this.getConstructSignatures(),
          l = this.getIndexSignatures();
        if (i.length > 0 || s.length > 0 || a.length > 0 || l.length > 0) {
          var c = this.getTypeOfSymbol();
          if (c) {
            var u = c.getScopedNameEx(n, !0);
            return e.MemberName.create(u, "typeof ", "");
          }
          if (this._inMemberTypeNameEx) return e.MemberName.create("any");
          this._inMemberTypeNameEx = !0;
          for (
            var p = new e.MemberNameArray(),
              h = !t || 0 !== l.length,
              d = "; ",
              m = 0;
            m < i.length;
            m++
          ) {
            if (
              65536 === i[m].kind &&
              i[m].type.hasOnlyOverloadCallSignatures()
            ) {
              var f = i[m].type.getCallSignatures(),
                g = i[m].getDisplayName(n) + (i[m].isOptional ? "?" : ""),
                v = o.getSignaturesTypeNameEx(f, g, !1, !1, n);
              p.addAll(v);
            } else {
              var y = i[m].getNameAndTypeNameEx(n);
              y.isArray() && y.delim === d ? p.addAll(y.entries) : p.add(y);
            }
            h = !0;
          }
          var b,
            _ = r && !h && this.hasOnlyOverloadCallSignatures(),
            w = s.length + a.length + l.length,
            S = !h && 1 === w;
          return (
            s.length > 0 &&
              ((b = o.getSignaturesTypeNameEx(s, "", S, !1, n, _)),
              p.addAll(b)),
            a.length > 0 &&
              ((b = o.getSignaturesTypeNameEx(a, "new", S, !1, n)),
              p.addAll(b)),
            l.length > 0 &&
              ((b = o.getSignaturesTypeNameEx(l, "", S, !0, n)), p.addAll(b)),
            h || (!_ && w > 1 && t)
              ? ((p.prefix = "{ "), (p.suffix = "}"), (p.delim = d))
              : p.entries.length > 1 && (p.delim = d),
            (this._inMemberTypeNameEx = !1),
            p
          );
        }
        return e.MemberName.create("{}");
      }),
      (r.prototype.getGenerativeTypeClassification = function () {
        return 2;
      }),
      (r.prototype.wrapsSomeTypeParameter = function (e, t) {
        return 0 != this.getWrappingTypeParameterID(e, t);
      }),
      (r.prototype.getWrappingTypeParameterID = function (t, n) {
        var r = this;
        if (r.isTypeParameter()) {
          if (t[r.pullSymbolID] || t[r.getRootSymbol().pullSymbolID])
            return r.pullSymbolID;
          var i = r.getConstraint(),
            o = i ? i.getWrappingTypeParameterID(t) : 0;
          return o;
        }
        if (r.inWrapCheck) return 0;
        this._wrapsTypeParameterCache =
          this._wrapsTypeParameterCache || new e.WrapsTypeParameterCache();
        var o = this._wrapsTypeParameterCache.getWrapsTypeParameter(t);
        return (
          void 0 === o &&
            ((o = this.getWrappingTypeParameterIDWorker(t, n)),
            this._wrapsTypeParameterCache.setWrapsTypeParameter(t, o)),
          o
        );
      }),
      (r.prototype.getWrappingTypeParameterIDFromSignatures = function (e, t) {
        for (var n = 0; n < e.length; n++) {
          var r = e[n].getWrappingTypeParameterID(t);
          if (0 !== r) return r;
        }
        return 0;
      }),
      (r.prototype.getWrappingTypeParameterIDWorker = function (t, n) {
        var r = this,
          i = 0;
        if (!n) {
          r.inWrapCheck = !0;
          var o = r.getTypeArguments();
          if ((r.isGeneric() && !o && (o = r.getTypeParameters()), o))
            for (var s = 0; !i && s < o.length; s++)
              i = o[s].getWrappingTypeParameterID(t);
        }
        if (n || !(8216 & r.kind) || !r.name) {
          for (
            var a = r.getAllMembers(68147712, 0), s = 0;
            !i && s < a.length;
            s++
          )
            e.PullHelpers.resolveDeclaredSymbolToUseType(a[s]),
              (i = a[s].type.getWrappingTypeParameterID(t));
          i =
            i ||
            this.getWrappingTypeParameterIDFromSignatures(
              r.getCallSignatures(),
              t
            ) ||
            this.getWrappingTypeParameterIDFromSignatures(
              r.getConstructSignatures(),
              t
            ) ||
            this.getWrappingTypeParameterIDFromSignatures(
              r.getIndexSignatures(),
              t
            );
        }
        return n || (r.inWrapCheck = !1), i;
      }),
      (r.prototype.wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReference = function (
        t
      ) {
        e.Debug.assert(this.isNamedTypeSymbol()),
          e.Debug.assert(e.PullHelpers.getRootType(t) == t);
        var n = e.BitMatrix.getBitMatrix(!0),
          r = this._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceRecurse(
            t,
            n
          );
        return n.release(), r;
      }),
      (r.prototype._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceRecurse = function (
        e,
        t
      ) {
        var n = t.valueAt(this.pullSymbolID, e.pullSymbolID);
        return void 0 != n
          ? n
          : this.inWrapInfiniteExpandingReferenceCheck
          ? !1
          : ((this.inWrapInfiniteExpandingReferenceCheck = !0),
            (n = this._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceWorker(
              e,
              t
            )),
            t.setValueAt(this.pullSymbolID, e.pullSymbolID, n),
            (this.inWrapInfiniteExpandingReferenceCheck = !1),
            n);
      }),
      (r.prototype._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceWorker = function (
        t,
        n
      ) {
        var r = e.PullHelpers.getRootType(this);
        if (r != t) {
          var i = this.isNamedTypeSymbol();
          if (i) {
            if (r.inWrapInfiniteExpandingReferenceCheck) return !1;
            r.inWrapInfiniteExpandingReferenceCheck = !0;
          }
          var o = this._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceStructure(
            t,
            n
          );
          return i && (r.inWrapInfiniteExpandingReferenceCheck = !1), o;
        }
        for (
          var s = t.getTypeParameters(), a = this.getTypeArguments(), l = 0;
          l < a.length;
          l++
        )
          if (
            !e.ArrayUtilities.contains(s, a[l]) &&
            a[l].wrapsSomeTypeParameter(this.getTypeParameterArgumentMap())
          )
            return !0;
        return !1;
      }),
      (r.prototype._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceStructure = function (
        e,
        t
      ) {
        for (var n = this.getAllMembers(68147712, 0), r = 0; r < n.length; r++)
          if (
            n[r].type &&
            n[
              r
            ].type._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReferenceRecurse(
              e,
              t
            )
          )
            return !0;
        for (var i = this.getCallSignatures(), r = 0; r < i.length; r++)
          if (
            i[r]._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReference(
              e,
              t
            )
          )
            return !0;
        i = this.getConstructSignatures();
        for (var r = 0; r < i.length; r++)
          if (
            i[r]._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReference(
              e,
              t
            )
          )
            return !0;
        i = this.getIndexSignatures();
        for (var r = 0; r < i.length; r++)
          if (
            i[r]._wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReference(
              e,
              t
            )
          )
            return !0;
        return !1;
      }),
      (r.prototype.widenedType = function (e, t, n) {
        return (
          this._widenedType || (this._widenedType = e.widenType(this, t, n)),
          this._widenedType
        );
      }),
      r
    );
  })(i);
  e.PullTypeSymbol = s;
  var a = (function (e) {
    function t(t) {
      e.call(this, t, 2), (this.isResolved = !0);
    }
    return (
      __extends(t, e),
      (t.prototype.isAny = function () {
        return !this.isStringConstant() && "any" === this.name;
      }),
      (t.prototype.isNull = function () {
        return !this.isStringConstant() && "null" === this.name;
      }),
      (t.prototype.isUndefined = function () {
        return !this.isStringConstant() && "undefined" === this.name;
      }),
      (t.prototype.isStringConstant = function () {
        return !1;
      }),
      (t.prototype.setUnresolved = function () {}),
      (t.prototype.getDisplayName = function () {
        return this.isNull() || this.isUndefined()
          ? "any"
          : e.prototype.getDisplayName.call(this);
      }),
      t
    );
  })(s);
  e.PullPrimitiveTypeSymbol = a;
  var l = (function (e) {
    function t(t) {
      e.call(this, t);
    }
    return (
      __extends(t, e),
      (t.prototype.isStringConstant = function () {
        return !0;
      }),
      t
    );
  })(a);
  e.PullStringConstantTypeSymbol = l;
  var c = (function (t) {
    function n(n, r) {
      t.call(this, r),
        (this._anyType = n),
        e.Debug.assert(this._anyType),
        (this.isResolved = !0);
    }
    return (
      __extends(n, t),
      (n.prototype.isError = function () {
        return !0;
      }),
      (n.prototype._getResolver = function () {
        return this._anyType._getResolver();
      }),
      (n.prototype.getName = function (e, t) {
        return this._anyType.getName(e, t);
      }),
      (n.prototype.getDisplayName = function (e, t) {
        return this._anyType.getName(e, t);
      }),
      (n.prototype.toString = function (e, t) {
        return this._anyType.getName(e, t);
      }),
      n
    );
  })(a);
  e.PullErrorTypeSymbol = c;
  var u = (function (e) {
    function t(t, n) {
      e.call(this, t, n),
        (this.instanceSymbol = null),
        (this.assignedValue = null),
        (this.assignedType = null),
        (this.assignedContainer = null);
    }
    return (
      __extends(t, e),
      (t.prototype.isContainer = function () {
        return !0;
      }),
      (t.prototype.setInstanceSymbol = function (e) {
        this.instanceSymbol = e;
      }),
      (t.prototype.getInstanceSymbol = function () {
        return this.instanceSymbol;
      }),
      (t.prototype.setExportAssignedValueSymbol = function (e) {
        this.assignedValue = e;
      }),
      (t.prototype.getExportAssignedValueSymbol = function () {
        return this.assignedValue;
      }),
      (t.prototype.setExportAssignedTypeSymbol = function (e) {
        this.assignedType = e;
      }),
      (t.prototype.getExportAssignedTypeSymbol = function () {
        return this.assignedType;
      }),
      (t.prototype.setExportAssignedContainerSymbol = function (e) {
        this.assignedContainer = e;
      }),
      (t.prototype.getExportAssignedContainerSymbol = function () {
        return this.assignedContainer;
      }),
      (t.prototype.hasExportAssignment = function () {
        return (
          !!this.assignedValue ||
          !!this.assignedType ||
          !!this.assignedContainer
        );
      }),
      (t.usedAsSymbol = function (e, n) {
        if (!e || !e.isContainer()) return !1;
        if (!e.isAlias() && e.type === n) return !0;
        var r = e,
          i = r.getExportAssignedValueSymbol(),
          o = r.getExportAssignedTypeSymbol(),
          s = r.getExportAssignedContainerSymbol();
        return i || o || s
          ? i === n || o == n || s == n || t.usedAsSymbol(s, n)
          : !1;
      }),
      (t.prototype.getInstanceType = function () {
        return this.instanceSymbol ? this.instanceSymbol.type : null;
      }),
      t
    );
  })(s);
  e.PullContainerSymbol = u;
  var p = (function (t) {
    function n(e) {
      t.call(this, e, 128),
        (this._assignedValue = null),
        (this._assignedType = null),
        (this._assignedContainer = null),
        (this._isUsedAsValue = !1),
        (this._typeUsedExternally = !1),
        (this._isUsedInExportAlias = !1),
        (this.retrievingExportAssignment = !1),
        (this.linkedAliasSymbols = null);
    }
    return (
      __extends(n, t),
      (n.prototype.isUsedInExportedAlias = function () {
        return this._resolveDeclaredSymbol(), this._isUsedInExportAlias;
      }),
      (n.prototype.typeUsedExternally = function () {
        return this._resolveDeclaredSymbol(), this._typeUsedExternally;
      }),
      (n.prototype.isUsedAsValue = function () {
        return this._resolveDeclaredSymbol(), this._isUsedAsValue;
      }),
      (n.prototype.setTypeUsedExternally = function () {
        this._typeUsedExternally = !0;
      }),
      (n.prototype.setIsUsedInExportedAlias = function () {
        (this._isUsedInExportAlias = !0),
          this.linkedAliasSymbols &&
            this.linkedAliasSymbols.forEach(function (e) {
              return e.setIsUsedInExportedAlias();
            });
      }),
      (n.prototype.addLinkedAliasSymbol = function (e) {
        this.linkedAliasSymbols
          ? this.linkedAliasSymbols.push(e)
          : (this.linkedAliasSymbols = [e]);
      }),
      (n.prototype.setIsUsedAsValue = function () {
        (this._isUsedAsValue = !0),
          this.linkedAliasSymbols &&
            this.linkedAliasSymbols.forEach(function (e) {
              return e.setIsUsedAsValue();
            });
      }),
      (n.prototype.assignedValue = function () {
        return this._resolveDeclaredSymbol(), this._assignedValue;
      }),
      (n.prototype.assignedType = function () {
        return this._resolveDeclaredSymbol(), this._assignedType;
      }),
      (n.prototype.assignedContainer = function () {
        return this._resolveDeclaredSymbol(), this._assignedContainer;
      }),
      (n.prototype.isAlias = function () {
        return !0;
      }),
      (n.prototype.isContainer = function () {
        return !0;
      }),
      (n.prototype.setAssignedValueSymbol = function (e) {
        this._assignedValue = e;
      }),
      (n.prototype.getExportAssignedValueSymbol = function () {
        if (this._assignedValue) return this._assignedValue;
        if (this.retrievingExportAssignment) return null;
        if (this._assignedContainer) {
          this.retrievingExportAssignment = !0;
          var e = this._assignedContainer.getExportAssignedValueSymbol();
          return (this.retrievingExportAssignment = !1), e;
        }
        return null;
      }),
      (n.prototype.setAssignedTypeSymbol = function (e) {
        this._assignedType = e;
      }),
      (n.prototype.getExportAssignedTypeSymbol = function () {
        if (this.retrievingExportAssignment) return null;
        if (this._assignedType)
          if (this._assignedType.isAlias()) {
            this.retrievingExportAssignment = !0;
            var e = this._assignedType.getExportAssignedTypeSymbol();
            this.retrievingExportAssignment = !1;
          } else if (this._assignedType !== this._assignedContainer)
            return this._assignedType;
        if (this._assignedContainer) {
          this.retrievingExportAssignment = !0;
          var e = this._assignedContainer.getExportAssignedTypeSymbol();
          if (((this.retrievingExportAssignment = !1), e)) return e;
        }
        return this._assignedContainer;
      }),
      (n.prototype.setAssignedContainerSymbol = function (e) {
        this._assignedContainer = e;
      }),
      (n.prototype.getExportAssignedContainerSymbol = function () {
        if (this.retrievingExportAssignment) return null;
        if (this._assignedContainer) {
          this.retrievingExportAssignment = !0;
          var e = this._assignedContainer.getExportAssignedContainerSymbol();
          if (((this.retrievingExportAssignment = !1), e)) return e;
        }
        return this._assignedContainer;
      }),
      (n.prototype.getMembers = function () {
        return this._assignedType
          ? this._assignedType.getMembers()
          : e.sentinelEmptyArray;
      }),
      (n.prototype.getCallSignatures = function () {
        return this._assignedType
          ? this._assignedType.getCallSignatures()
          : e.sentinelEmptyArray;
      }),
      (n.prototype.getConstructSignatures = function () {
        return this._assignedType
          ? this._assignedType.getConstructSignatures()
          : e.sentinelEmptyArray;
      }),
      (n.prototype.getIndexSignatures = function () {
        return this._assignedType
          ? this._assignedType.getIndexSignatures()
          : e.sentinelEmptyArray;
      }),
      (n.prototype.findMember = function (e) {
        return this._assignedType ? this._assignedType.findMember(e, !0) : null;
      }),
      (n.prototype.findNestedType = function (e) {
        return this._assignedType ? this._assignedType.findNestedType(e) : null;
      }),
      (n.prototype.findNestedContainer = function (e) {
        return this._assignedType
          ? this._assignedType.findNestedContainer(e)
          : null;
      }),
      (n.prototype.getAllMembers = function (t, n) {
        return this._assignedType
          ? this._assignedType.getAllMembers(t, n)
          : e.sentinelEmptyArray;
      }),
      n
    );
  })(s);
  e.PullTypeAliasSymbol = p;
  var h = (function (t) {
    function n(e) {
      t.call(this, e, 8192), (this._constraint = null);
    }
    return (
      __extends(n, t),
      (n.prototype.isTypeParameter = function () {
        return !0;
      }),
      (n.prototype.setConstraint = function (e) {
        this._constraint = e;
      }),
      (n.prototype.getConstraint = function () {
        return this._constraint;
      }),
      (n.prototype.getBaseConstraint = function (t) {
        var n = this.getConstraintRecursively({});
        return (
          e.Debug.assert(null === n || !n.isTypeParameter()),
          n || t.emptyTypeSymbol
        );
      }),
      (n.prototype.getConstraintRecursively = function (e) {
        var t = this.getConstraint();
        if (t) {
          if (!t.isTypeParameter()) return t;
          var n = t;
          if (!e[n.pullSymbolID])
            return (e[n.pullSymbolID] = n), n.getConstraintRecursively(e);
        }
        return null;
      }),
      (n.prototype.getDefaultConstraint = function (e) {
        return this._constraint || e.emptyTypeSymbol;
      }),
      (n.prototype.getCallSignatures = function () {
        return this._constraint
          ? this._constraint.getCallSignatures()
          : t.prototype.getCallSignatures.call(this);
      }),
      (n.prototype.getConstructSignatures = function () {
        return this._constraint
          ? this._constraint.getConstructSignatures()
          : t.prototype.getConstructSignatures.call(this);
      }),
      (n.prototype.getIndexSignatures = function () {
        return this._constraint
          ? this._constraint.getIndexSignatures()
          : t.prototype.getIndexSignatures.call(this);
      }),
      (n.prototype.isGeneric = function () {
        return !0;
      }),
      (n.prototype.fullName = function (e) {
        var t = this.getDisplayName(e),
          n = this.getContainer();
        if (n) {
          var r = n.fullName(e);
          t = t + " in " + r;
        }
        return t;
      }),
      (n.prototype.getName = function (e, n) {
        var r = t.prototype.getName.call(this, e);
        return this.isPrinting
          ? r
          : ((this.isPrinting = !0),
            n &&
              this._constraint &&
              (r += " extends " + this._constraint.toString(e)),
            (this.isPrinting = !1),
            r);
      }),
      (n.prototype.getDisplayName = function (e, n, r) {
        var i = t.prototype.getDisplayName.call(this, e, n, r);
        return this.isPrinting
          ? i
          : ((this.isPrinting = !0),
            n &&
              this._constraint &&
              (i += " extends " + this._constraint.toString(e)),
            (this.isPrinting = !1),
            i);
      }),
      (n.prototype.isExternallyVisible = function () {
        return !0;
      }),
      n
    );
  })(s);
  e.PullTypeParameterSymbol = h;
  var d = (function (e) {
    function t(t) {
      e.call(this, t, 4096),
        (this._getterSymbol = null),
        (this._setterSymbol = null);
    }
    return (
      __extends(t, e),
      (t.prototype.isAccessor = function () {
        return !0;
      }),
      (t.prototype.setSetter = function (e) {
        e && (this._setterSymbol = e);
      }),
      (t.prototype.getSetter = function () {
        return this._setterSymbol;
      }),
      (t.prototype.setGetter = function (e) {
        e && (this._getterSymbol = e);
      }),
      (t.prototype.getGetter = function () {
        return this._getterSymbol;
      }),
      t
    );
  })(i);
  (e.PullAccessorSymbol = d), (e.getIDForTypeSubstitutions = t);
  var m = (function () {
    function e() {
      this.structure = "";
    }
    return (
      (e.prototype.memberSymbolWalk = function (e) {
        return (this.structure += e.name + "@" + n(e.type)), !0;
      }),
      (e.prototype.callSignatureWalk = function () {
        return (this.structure += "("), !0;
      }),
      (e.prototype.constructSignatureWalk = function () {
        return (this.structure += "new("), !0;
      }),
      (e.prototype.indexSignatureWalk = function () {
        return (this.structure += "[]("), !0;
      }),
      (e.prototype.signatureParameterWalk = function (e) {
        return (this.structure += e.name + "@" + n(e.type)), !0;
      }),
      (e.prototype.signatureReturnTypeWalk = function (e) {
        return (this.structure += ")" + n(e)), !0;
      }),
      e
    );
  })();
  !(function (e) {
    (e[(e.all = 0)] = "all"),
      (e[(e.internallyVisible = 1)] = "internallyVisible"),
      (e[(e.externallyVisible = 2)] = "externallyVisible");
  })(e.GetAllMembersVisiblity || (e.GetAllMembersVisiblity = {}));
  e.GetAllMembersVisiblity;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {
      this.currentSymbols = null;
    }
    return (
      (t.prototype.getEnclosingType = function () {
        return this.currentSymbols && this.currentSymbols.length > 0
          ? this.currentSymbols[0]
          : null;
      }),
      (t.prototype._canWalkStructure = function () {
        var e = this.getEnclosingType();
        return !!e && e.isGeneric();
      }),
      (t.prototype._getCurrentSymbol = function () {
        return this.currentSymbols && this.currentSymbols.length
          ? this.currentSymbols[this.currentSymbols.length - 1]
          : null;
      }),
      (t.prototype.getGenerativeClassification = function () {
        if (this._canWalkStructure()) {
          var e = this.currentSymbols[this.currentSymbols.length - 1];
          if (!e) return 0;
          var t = this.getEnclosingType();
          return e.getGenerativeTypeClassification(t);
        }
        return 2;
      }),
      (t.prototype._pushSymbol = function (e) {
        return this.currentSymbols.push(e);
      }),
      (t.prototype._popSymbol = function () {
        return this.currentSymbols.pop();
      }),
      (t.prototype._setEnclosingTypeOfParentDecl = function (e, t) {
        var n = e.getParentDecl();
        if (
          n &&
          (8216 & n.kind
            ? this._setEnclosingTypeWorker(n.getSymbol(), !0)
            : this._setEnclosingTypeOfParentDecl(n, !0),
          this._canWalkStructure())
        ) {
          var r = e.getSymbol();
          if (
            (r &&
              ((2048 == r.kind ||
                4096 == r.kind ||
                65536 == r.kind ||
                32768 == r.kind ||
                131072 == r.kind) &&
                (r = r.type),
              this._pushSymbol(r)),
            t)
          ) {
            var i = e.getSignatureSymbol();
            i && this._pushSymbol(i);
          }
        }
      }),
      (t.prototype._setEnclosingTypeWorker = function (t, n) {
        if (t.isType() && t.isNamedTypeSymbol())
          return (this.currentSymbols = [e.PullHelpers.getRootType(t)]), void 0;
        for (var r = t.getDeclarations(), i = 0; i < r.length; i++) {
          var o = r[i];
          if (
            (this._setEnclosingTypeOfParentDecl(o, n), this._canWalkStructure())
          )
            return;
        }
      }),
      (t.prototype.setCurrentSymbol = function (t) {
        e.Debug.assert(this._canWalkStructure()),
          (this.currentSymbols[this.currentSymbols.length - 1] = t);
      }),
      (t.prototype.startWalkingType = function (e) {
        var t = this.currentSymbols,
          n = !this.getEnclosingType() || e.isNamedTypeSymbol();
        return n && ((this.currentSymbols = null), this.setEnclosingType(e)), t;
      }),
      (t.prototype.endWalkingType = function (e) {
        this.currentSymbols = e;
      }),
      (t.prototype.setEnclosingType = function (t) {
        e.Debug.assert(!this.getEnclosingType()),
          this._setEnclosingTypeWorker(t, t.isSignature());
      }),
      (t.prototype.walkMemberType = function (e, t) {
        if (this._canWalkStructure()) {
          var n = this._getCurrentSymbol(),
            r = n ? t._getNamedPropertySymbolOfAugmentedType(e, n) : null;
          this._pushSymbol(r ? r.type : null);
        }
      }),
      (t.prototype.postWalkMemberType = function () {
        this._canWalkStructure() && this._popSymbol();
      }),
      (t.prototype.walkSignature = function (e, t) {
        if (this._canWalkStructure()) {
          var n,
            r = this._getCurrentSymbol();
          r &&
            (n =
              1048576 == e
                ? r.getCallSignatures()
                : 2097152 == e
                ? r.getConstructSignatures()
                : r.getIndexSignatures()),
            this._pushSymbol(n ? n[t] : null);
        }
      }),
      (t.prototype.postWalkSignature = function () {
        this._canWalkStructure() && this._popSymbol();
      }),
      (t.prototype.walkTypeArgument = function (e) {
        if (this._canWalkStructure()) {
          var t = null,
            n = this._getCurrentSymbol();
          if (n) {
            var r = n.getTypeArguments();
            t = r ? r[e] : null;
          }
          this._pushSymbol(t);
        }
      }),
      (t.prototype.postWalkTypeArgument = function () {
        this._canWalkStructure() && this._popSymbol();
      }),
      (t.prototype.walkTypeParameterConstraint = function (t) {
        if (this._canWalkStructure()) {
          var n,
            r = this._getCurrentSymbol();
          r &&
            (r.isSignature()
              ? (n = r.getTypeParameters())
              : (e.Debug.assert(r.isType()), (n = r.getTypeParameters()))),
            this._pushSymbol(n ? n[t].getConstraint() : null);
        }
      }),
      (t.prototype.postWalkTypeParameterConstraint = function () {
        this._canWalkStructure() && this._popSymbol();
      }),
      (t.prototype.walkReturnType = function () {
        if (this._canWalkStructure()) {
          var e = this._getCurrentSymbol();
          this._pushSymbol(e ? e.returnType : null);
        }
      }),
      (t.prototype.postWalkReturnType = function () {
        this._canWalkStructure() && this._popSymbol();
      }),
      (t.prototype.walkParameterType = function (e) {
        if (this._canWalkStructure()) {
          var t = this._getCurrentSymbol();
          this._pushSymbol(t ? t.getParameterTypeAtIndex(e) : null);
        }
      }),
      (t.prototype.postWalkParameterType = function () {
        this._canWalkStructure() && this._popSymbol();
      }),
      (t.prototype.getBothKindOfIndexSignatures = function (e, t, n) {
        if (this._canWalkStructure()) {
          var r = this._getCurrentSymbol();
          if (r) return e._getBothKindsOfIndexSignatures(r, t, n);
        }
        return null;
      }),
      (t.prototype.walkIndexSignatureReturnType = function (e, t, n) {
        if (this._canWalkStructure()) {
          var r = e ? (t ? e.stringSignature : e.numericSignature) : null;
          this._pushSymbol(r), n || this._pushSymbol(r ? r.returnType : null);
        }
      }),
      (t.prototype.postWalkIndexSignatureReturnType = function (e) {
        this._canWalkStructure() && (e || this._popSymbol(), this._popSymbol());
      }),
      t
    );
  })();
  e.PullTypeEnclosingTypeWalker = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {
      (this.typeParameter = null),
        (this._inferredTypeAfterFixing = null),
        (this.inferenceCandidates = []);
    }
    return (
      (t.prototype.addCandidate = function (e) {
        this._inferredTypeAfterFixing ||
          (this.inferenceCandidates[this.inferenceCandidates.length] = e);
      }),
      (t.prototype.isFixed = function () {
        return !!this._inferredTypeAfterFixing;
      }),
      (t.prototype.fixTypeParameter = function (t, n) {
        var r = this;
        if (!this._inferredTypeAfterFixing) {
          var i = {
              getLength: function () {
                return r.inferenceCandidates.length;
              },
              getTypeAtIndex: function (e) {
                return r.inferenceCandidates[e].type;
              },
            },
            o = t.findBestCommonType(i, n, new e.TypeComparisonInfo());
          this._inferredTypeAfterFixing = o.widenedType(t, null, n);
        }
      }),
      t
    );
  })();
  e.CandidateInferenceInfo = t;
  var n = (function () {
    function n(t, n, r) {
      (this.resolver = t),
        (this.context = n),
        (this.signatureBeingInferred = r),
        (this.inferenceCache = e.BitMatrix.getBitMatrix(!1)),
        (this.candidateCache = []);
      for (var i = r.getTypeParameters(), o = 0; o < i.length; o++)
        this.addInferenceRoot(i[o]);
    }
    return (
      (n.prototype.alreadyRelatingTypes = function (e, t) {
        return this.inferenceCache.valueAt(e.pullSymbolID, t.pullSymbolID)
          ? !0
          : (this.inferenceCache.setValueAt(e.pullSymbolID, t.pullSymbolID, !0),
            !1);
      }),
      (n.prototype.resetRelationshipCache = function () {
        this.inferenceCache.release(),
          (this.inferenceCache = e.BitMatrix.getBitMatrix(!1));
      }),
      (n.prototype.addInferenceRoot = function (e) {
        var n = this.candidateCache[e.pullSymbolID];
        n ||
          ((n = new t()),
          (n.typeParameter = e),
          (this.candidateCache[e.pullSymbolID] = n));
      }),
      (n.prototype.getInferenceInfo = function (e) {
        return this.candidateCache[e.pullSymbolID];
      }),
      (n.prototype.addCandidateForInference = function (e, t) {
        var n = this.getInferenceInfo(e);
        n && t && n.inferenceCandidates.indexOf(t) < 0 && n.addCandidate(t);
      }),
      (n.prototype.inferTypeArguments = function () {
        throw e.Errors.abstract();
      }),
      (n.prototype.fixTypeParameter = function (e) {
        var t = this.candidateCache[e.pullSymbolID];
        t && t.fixTypeParameter(this.resolver, this.context);
      }),
      (n.prototype._finalizeInferredTypeArguments = function () {
        for (
          var e = [],
            t = this.signatureBeingInferred.getTypeParameters(),
            n = 0;
          n < t.length;
          n++
        ) {
          var r = this.candidateCache[t[n].pullSymbolID];
          r.fixTypeParameter(this.resolver, this.context);
          for (var n = 0; n < e.length; n++)
            e[n].type === r.typeParameter &&
              (e[n].type = r._inferredTypeAfterFixing);
          e.push(r._inferredTypeAfterFixing);
        }
        return e;
      }),
      (n.prototype.isInvocationInferenceContext = function () {
        throw e.Errors.abstract();
      }),
      n
    );
  })();
  e.TypeArgumentInferenceContext = n;
  var r = (function (e) {
    function t(t, n, r, i) {
      e.call(this, t, n, r), (this.argumentASTs = i);
    }
    return (
      __extends(t, e),
      (t.prototype.isInvocationInferenceContext = function () {
        return !0;
      }),
      (t.prototype.inferTypeArguments = function () {
        var e = this;
        return (
          this.signatureBeingInferred.forAllParameterTypes(
            this.argumentASTs.nonSeparatorCount(),
            function (t, n) {
              var r = e.argumentASTs.nonSeparatorAt(n);
              e.context.pushInferentialType(t, e);
              var i = e.resolver.resolveAST(r, !0, e.context).type;
              return (
                e.resolver.relateTypeToTypeParametersWithNewEnclosingTypes(
                  i,
                  t,
                  e,
                  e.context
                ),
                e.context.popAnyContextualType(),
                !0
              );
            }
          ),
          this._finalizeInferredTypeArguments()
        );
      }),
      t
    );
  })(n);
  e.InvocationTypeArgumentInferenceContext = r;
  var i = (function (e) {
    function t(t, n, r, i, o) {
      e.call(this, t, n, r),
        (this.contextualSignature = i),
        (this.shouldFixContextualSignatureParameterTypes = o);
    }
    return (
      __extends(t, e),
      (t.prototype.isInvocationInferenceContext = function () {
        return !1;
      }),
      (t.prototype.inferTypeArguments = function () {
        var e = this,
          t = function (t, n) {
            return (
              e.shouldFixContextualSignatureParameterTypes &&
                (n = e.context.fixAllTypeParametersReferencedByType(
                  n,
                  e.resolver,
                  e
                )),
              e.resolver.relateTypeToTypeParametersWithNewEnclosingTypes(
                n,
                t,
                e,
                e.context
              ),
              !0
            );
          };
        return (
          this.signatureBeingInferred.forAllCorrespondingParameterTypesInThisAndOtherSignature(
            this.contextualSignature,
            t
          ),
          this._finalizeInferredTypeArguments()
        );
      }),
      t
    );
  })(n);
  e.ContextualSignatureInstantiationTypeArgumentInferenceContext = i;
  var o = (function () {
    function e(e, t, n, r) {
      (this.contextualType = e),
        (this.provisional = t),
        (this.isInferentiallyTyping = n),
        (this.typeArgumentInferenceContext = r),
        (this.provisionallyTypedSymbols = []),
        (this.hasProvisionalErrors = !1),
        (this.astSymbolMap = []);
    }
    return (
      (e.prototype.recordProvisionallyTypedSymbol = function (e) {
        this.provisionallyTypedSymbols[
          this.provisionallyTypedSymbols.length
        ] = e;
      }),
      (e.prototype.invalidateProvisionallyTypedSymbols = function () {
        for (var e = 0; e < this.provisionallyTypedSymbols.length; e++)
          this.provisionallyTypedSymbols[e].setUnresolved();
      }),
      (e.prototype.setSymbolForAST = function (e, t) {
        this.astSymbolMap[e.syntaxID()] = t;
      }),
      (e.prototype.getSymbolForAST = function (e) {
        return this.astSymbolMap[e.syntaxID()];
      }),
      e
    );
  })();
  e.PullContextualTypeContext = o;
  var s = (function () {
    function t(t, n, r) {
      "undefined" == typeof n && (n = !1),
        "undefined" == typeof r && (r = null),
        (this.resolver = t),
        (this.inTypeCheck = n),
        (this.fileName = r),
        (this.contextStack = []),
        (this.typeCheckedNodes = null),
        (this.enclosingTypeWalker1 = null),
        (this.enclosingTypeWalker2 = null),
        (this.inBaseTypeResolution = !1),
        n &&
          (e.Debug.assert(
            r,
            "A file name must be provided if you are typechecking"
          ),
          (this.typeCheckedNodes = e.BitVector.getBitVector(!1)));
    }
    return (
      (t.prototype.setTypeChecked = function (e) {
        this.inProvisionalResolution() ||
          this.typeCheckedNodes.setValueAt(e.syntaxID(), !0);
      }),
      (t.prototype.canTypeCheckAST = function (e) {
        return (
          this.typeCheck() &&
          !this.typeCheckedNodes.valueAt(e.syntaxID()) &&
          this.fileName === e.fileName()
        );
      }),
      (t.prototype._pushAnyContextualType = function (e, t, n, r) {
        this.contextStack.push(new o(e, t, n, r));
      }),
      (t.prototype.pushNewContextualType = function (e) {
        this._pushAnyContextualType(
          e,
          this.inProvisionalResolution(),
          !1,
          null
        );
      }),
      (t.prototype.propagateContextualType = function (e) {
        this._pushAnyContextualType(
          e,
          this.inProvisionalResolution(),
          this.isInferentiallyTyping(),
          this.getCurrentTypeArgumentInferenceContext()
        );
      }),
      (t.prototype.pushInferentialType = function (e, t) {
        this._pushAnyContextualType(e, !0, !0, t);
      }),
      (t.prototype.pushProvisionalType = function (e) {
        this._pushAnyContextualType(e, !0, !1, null);
      }),
      (t.prototype.popAnyContextualType = function () {
        var e = this.contextStack.pop();
        return (
          e.invalidateProvisionallyTypedSymbols(),
          e.hasProvisionalErrors &&
            this.inProvisionalResolution() &&
            (this.contextStack[
              this.contextStack.length - 1
            ].hasProvisionalErrors = !0),
          e
        );
      }),
      (t.prototype.hasProvisionalErrors = function () {
        return this.contextStack.length
          ? this.contextStack[this.contextStack.length - 1].hasProvisionalErrors
          : !1;
      }),
      (t.prototype.getContextualType = function () {
        var e = this.contextStack.length
          ? this.contextStack[this.contextStack.length - 1]
          : null;
        if (e) {
          var t = e.contextualType;
          return t ? t : null;
        }
        return null;
      }),
      (t.prototype.fixAllTypeParametersReferencedByType = function (t, n, r) {
        var r = this.getCurrentTypeArgumentInferenceContext();
        if (t.wrapsSomeTypeParameter(r.candidateCache)) {
          var i = [];
          for (var o in r.candidateCache) {
            var s = r.candidateCache[o] && r.candidateCache[o].typeParameter;
            if (s) {
              var a = [];
              (a[s.pullSymbolID] = s),
                t.wrapsSomeTypeParameter(a) &&
                  (r.fixTypeParameter(s),
                  e.Debug.assert(r.candidateCache[o]._inferredTypeAfterFixing),
                  (i[s.pullSymbolID] =
                    r.candidateCache[o]._inferredTypeAfterFixing));
            }
          }
          return n.instantiateType(t, i);
        }
        return t;
      }),
      (t.prototype.getCurrentTypeArgumentInferenceContext = function () {
        return this.contextStack.length
          ? this.contextStack[this.contextStack.length - 1]
              .typeArgumentInferenceContext
          : null;
      }),
      (t.prototype.isInferentiallyTyping = function () {
        return (
          this.contextStack.length > 0 &&
          this.contextStack[this.contextStack.length - 1].isInferentiallyTyping
        );
      }),
      (t.prototype.inProvisionalResolution = function () {
        return this.contextStack.length
          ? this.contextStack[this.contextStack.length - 1].provisional
          : !1;
      }),
      (t.prototype.isInBaseTypeResolution = function () {
        return this.inBaseTypeResolution;
      }),
      (t.prototype.startBaseTypeResolution = function () {
        var e = this.inBaseTypeResolution;
        return (this.inBaseTypeResolution = !0), e;
      }),
      (t.prototype.doneBaseTypeResolution = function (e) {
        this.inBaseTypeResolution = e;
      }),
      (t.prototype.setTypeInContext = function (e, t) {
        (e.type && e.type.isError() && !t.isError()) ||
          ((e.type = t),
          this.contextStack.length &&
            this.inProvisionalResolution() &&
            this.contextStack[
              this.contextStack.length - 1
            ].recordProvisionallyTypedSymbol(e));
      }),
      (t.prototype.postDiagnostic = function (e) {
        e &&
          (this.inProvisionalResolution()
            ? (this.contextStack[
                this.contextStack.length - 1
              ].hasProvisionalErrors = !0)
            : this.inTypeCheck &&
              this.resolver &&
              this.resolver.semanticInfoChain.addDiagnostic(e));
      }),
      (t.prototype.typeCheck = function () {
        return this.inTypeCheck && !this.inProvisionalResolution();
      }),
      (t.prototype.setSymbolForAST = function (e, t) {
        this.contextStack[this.contextStack.length - 1].setSymbolForAST(e, t);
      }),
      (t.prototype.getSymbolForAST = function (e) {
        for (var t = this.contextStack.length - 1; t >= 0; t--) {
          var n = this.contextStack[t];
          if (!n.provisional) break;
          var r = n.getSymbolForAST(e);
          if (r) return r;
        }
        return null;
      }),
      (t.prototype.startWalkingTypes = function (t, n) {
        this.enclosingTypeWalker1 ||
          (this.enclosingTypeWalker1 = new e.PullTypeEnclosingTypeWalker());
        var r = this.enclosingTypeWalker1.startWalkingType(t);
        this.enclosingTypeWalker2 ||
          (this.enclosingTypeWalker2 = new e.PullTypeEnclosingTypeWalker());
        var i = this.enclosingTypeWalker2.startWalkingType(n);
        return {
          symbolsWhenStartedWalkingTypes1: r,
          symbolsWhenStartedWalkingTypes2: i,
        };
      }),
      (t.prototype.endWalkingTypes = function (e) {
        this.enclosingTypeWalker1.endWalkingType(
          e.symbolsWhenStartedWalkingTypes1
        ),
          this.enclosingTypeWalker2.endWalkingType(
            e.symbolsWhenStartedWalkingTypes2
          );
      }),
      (t.prototype.setEnclosingTypes = function (t, n) {
        this.enclosingTypeWalker1 ||
          (this.enclosingTypeWalker1 = new e.PullTypeEnclosingTypeWalker()),
          this.enclosingTypeWalker1.setEnclosingType(t),
          this.enclosingTypeWalker2 ||
            (this.enclosingTypeWalker2 = new e.PullTypeEnclosingTypeWalker()),
          this.enclosingTypeWalker2.setEnclosingType(n);
      }),
      (t.prototype.walkMemberTypes = function (e) {
        this.enclosingTypeWalker1.walkMemberType(e, this.resolver),
          this.enclosingTypeWalker2.walkMemberType(e, this.resolver);
      }),
      (t.prototype.postWalkMemberTypes = function () {
        this.enclosingTypeWalker1.postWalkMemberType(),
          this.enclosingTypeWalker2.postWalkMemberType();
      }),
      (t.prototype.walkSignatures = function (e, t, n) {
        this.enclosingTypeWalker1.walkSignature(e, t),
          this.enclosingTypeWalker2.walkSignature(e, void 0 == n ? t : n);
      }),
      (t.prototype.postWalkSignatures = function () {
        this.enclosingTypeWalker1.postWalkSignature(),
          this.enclosingTypeWalker2.postWalkSignature();
      }),
      (t.prototype.walkTypeParameterConstraints = function (e) {
        this.enclosingTypeWalker1.walkTypeParameterConstraint(e),
          this.enclosingTypeWalker2.walkTypeParameterConstraint(e);
      }),
      (t.prototype.postWalkTypeParameterConstraints = function () {
        this.enclosingTypeWalker1.postWalkTypeParameterConstraint(),
          this.enclosingTypeWalker2.postWalkTypeParameterConstraint();
      }),
      (t.prototype.walkTypeArgument = function (e) {
        this.enclosingTypeWalker1.walkTypeArgument(e),
          this.enclosingTypeWalker2.walkTypeArgument(e);
      }),
      (t.prototype.postWalkTypeArgument = function () {
        this.enclosingTypeWalker1.postWalkTypeArgument(),
          this.enclosingTypeWalker2.postWalkTypeArgument();
      }),
      (t.prototype.walkReturnTypes = function () {
        this.enclosingTypeWalker1.walkReturnType(),
          this.enclosingTypeWalker2.walkReturnType();
      }),
      (t.prototype.postWalkReturnTypes = function () {
        this.enclosingTypeWalker1.postWalkReturnType(),
          this.enclosingTypeWalker2.postWalkReturnType();
      }),
      (t.prototype.walkParameterTypes = function (e) {
        this.enclosingTypeWalker1.walkParameterType(e),
          this.enclosingTypeWalker2.walkParameterType(e);
      }),
      (t.prototype.postWalkParameterTypes = function () {
        this.enclosingTypeWalker1.postWalkParameterType(),
          this.enclosingTypeWalker2.postWalkParameterType();
      }),
      (t.prototype.getBothKindOfIndexSignatures = function (e, t) {
        var n = this.enclosingTypeWalker1.getBothKindOfIndexSignatures(
            this.resolver,
            this,
            e
          ),
          r = this.enclosingTypeWalker2.getBothKindOfIndexSignatures(
            this.resolver,
            this,
            t
          );
        return { indexSigs1: n, indexSigs2: r };
      }),
      (t.prototype.walkIndexSignatureReturnTypes = function (e, t, n, r) {
        this.enclosingTypeWalker1.walkIndexSignatureReturnType(
          e.indexSigs1,
          t,
          r
        ),
          this.enclosingTypeWalker2.walkIndexSignatureReturnType(
            e.indexSigs2,
            n,
            r
          );
      }),
      (t.prototype.postWalkIndexSignatureReturnTypes = function (e) {
        this.enclosingTypeWalker1.postWalkIndexSignatureReturnType(e),
          this.enclosingTypeWalker2.postWalkIndexSignatureReturnType(e);
      }),
      (t.prototype.swapEnclosingTypeWalkers = function () {
        var e = this.enclosingTypeWalker1;
        (this.enclosingTypeWalker1 = this.enclosingTypeWalker2),
          (this.enclosingTypeWalker2 = e);
      }),
      (t.prototype.oneOfClassificationsIsInfinitelyExpanding = function () {
        var e = this.enclosingTypeWalker1.getGenerativeClassification();
        if (3 === e) return !0;
        var t = this.enclosingTypeWalker2.getGenerativeClassification();
        return 3 === t ? !0 : !1;
      }),
      (t.prototype.resetEnclosingTypeWalkers = function () {
        var e = this.enclosingTypeWalker1,
          t = this.enclosingTypeWalker2;
        return (
          (this.enclosingTypeWalker1 = null),
          (this.enclosingTypeWalker2 = null),
          { enclosingTypeWalker1: e, enclosingTypeWalker2: t }
        );
      }),
      (t.prototype.setEnclosingTypeWalkers = function (e) {
        (this.enclosingTypeWalker1 = e.enclosingTypeWalker1),
          (this.enclosingTypeWalker2 = e.enclosingTypeWalker2);
      }),
      t
    );
  })();
  e.PullTypeResolutionContext = s;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e) {
    var t = e.valueText();
    return a[t];
  }
  function n(t) {
    if (11 === t.kind())
      return { actualText: t.text(), memberName: t.valueText() };
    if (14 === t.kind())
      return { actualText: t.text(), memberName: t.valueText() };
    if (13 === t.kind())
      return { actualText: t.text(), memberName: t.valueText() };
    throw e.Errors.invalidOperation();
  }
  function r(e) {
    for (; e && e.parent; ) {
      switch (e.parent.kind()) {
        case 244:
          return !0;
        case 127:
          return !1;
        case 125:
          var t = e.parent;
          if (t.type === e) return !0;
          break;
        case 123:
          var n = e.parent;
          if (n.type === e) return !0;
          break;
        case 239:
          var r = e.parent;
          if (r.type === e) return !0;
          break;
        case 220:
          var i = e.parent;
          return i.type === e;
        case 230:
        case 231:
          return !0;
        case 228:
          return !0;
        case 131:
        case 128:
        case 130:
        case 129:
        case 145:
        case 212:
        case 242:
          return !1;
      }
      e = e.parent;
    }
    return !1;
  }
  var i;
  !(function (e) {
    (e[(e.NotAssignable = 0)] = "NotAssignable"),
      (e[(e.AssignableButWithProvisionalErrors = 1)] =
        "AssignableButWithProvisionalErrors"),
      (e[(e.AssignableWithNoProvisionalErrors = 2)] =
        "AssignableWithNoProvisionalErrors"),
      (e[(e.Subtype = 3)] = "Subtype");
  })(i || (i = {}));
  var o = (function () {
    function e() {
      (this.targetSymbol = null),
        (this.resolvedSignatures = null),
        (this.candidateSignature = null),
        (this.actualParametersContextTypeSymbols = null),
        (this.diagnosticsFromOverloadResolution = []);
    }
    return e;
  })();
  e.PullAdditionalCallResolutionData = o;
  var s = (function () {
    function e() {
      this.membersContextTypeSymbols = null;
    }
    return e;
  })();
  e.PullAdditionalObjectLiteralResolutionData = s;
  var a,
    l = (function () {
      function e(e, t) {
        (this.memberSymbol = e), (this.baseOrigin = t);
      }
      return e;
    })(),
    c = (function () {
      function e(e, t) {
        (this.signature = e), (this.baseOrigin = t);
      }
      return e;
    })(),
    u = (function () {
      function e() {}
      return e;
    })();
  !(function (e) {
    (e[(e._this = 1)] = "_this"),
      (e[(e._super = 2)] = "_super"),
      (e[(e.arguments = 3)] = "arguments"),
      (e[(e._i = 4)] = "_i"),
      (e[(e.require = 5)] = "require"),
      (e[(e.exports = 6)] = "exports");
  })(a || (a = {}));
  var p = (function () {
    function i(t, n) {
      (this.compilationSettings = t),
        (this.semanticInfoChain = n),
        (this._cachedArrayInterfaceType = null),
        (this._cachedNumberInterfaceType = null),
        (this._cachedStringInterfaceType = null),
        (this._cachedBooleanInterfaceType = null),
        (this._cachedObjectInterfaceType = null),
        (this._cachedFunctionInterfaceType = null),
        (this._cachedIArgumentsInterfaceType = null),
        (this._cachedRegExpInterfaceType = null),
        (this._cachedAnyTypeArgs = null),
        (this.typeCheckCallBacks = []),
        (this.postTypeCheckWorkitems = []),
        (this._cachedFunctionArgumentsSymbol = null),
        (this.assignableCache = e.BitMatrix.getBitMatrix(!0)),
        (this.subtypeCache = e.BitMatrix.getBitMatrix(!0)),
        (this.identicalCache = e.BitMatrix.getBitMatrix(!0)),
        (this.inResolvingOtherDeclsWalker = new e.PullHelpers.OtherPullDeclsWalker());
    }
    return (
      (i.prototype.cachedArrayInterfaceType = function () {
        return (
          this._cachedArrayInterfaceType ||
            (this._cachedArrayInterfaceType =
              this.getSymbolFromDeclPath("Array", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedArrayInterfaceType.isResolved ||
            this.resolveDeclaredSymbol(
              this._cachedArrayInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedArrayInterfaceType
        );
      }),
      (i.prototype.getArrayNamedType = function () {
        return this.cachedArrayInterfaceType();
      }),
      (i.prototype.cachedNumberInterfaceType = function () {
        return (
          this._cachedNumberInterfaceType ||
            (this._cachedNumberInterfaceType =
              this.getSymbolFromDeclPath("Number", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedNumberInterfaceType &&
            !this._cachedNumberInterfaceType.isResolved &&
            this.resolveDeclaredSymbol(
              this._cachedNumberInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedNumberInterfaceType
        );
      }),
      (i.prototype.cachedStringInterfaceType = function () {
        return (
          this._cachedStringInterfaceType ||
            (this._cachedStringInterfaceType =
              this.getSymbolFromDeclPath("String", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedStringInterfaceType &&
            !this._cachedStringInterfaceType.isResolved &&
            this.resolveDeclaredSymbol(
              this._cachedStringInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedStringInterfaceType
        );
      }),
      (i.prototype.cachedBooleanInterfaceType = function () {
        return (
          this._cachedBooleanInterfaceType ||
            (this._cachedBooleanInterfaceType =
              this.getSymbolFromDeclPath("Boolean", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedBooleanInterfaceType &&
            !this._cachedBooleanInterfaceType.isResolved &&
            this.resolveDeclaredSymbol(
              this._cachedBooleanInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedBooleanInterfaceType
        );
      }),
      (i.prototype.cachedObjectInterfaceType = function () {
        return (
          this._cachedObjectInterfaceType ||
            (this._cachedObjectInterfaceType =
              this.getSymbolFromDeclPath("Object", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedObjectInterfaceType ||
            (this._cachedObjectInterfaceType = this.semanticInfoChain.anyTypeSymbol),
          this._cachedObjectInterfaceType.isResolved ||
            this.resolveDeclaredSymbol(
              this._cachedObjectInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedObjectInterfaceType
        );
      }),
      (i.prototype.cachedFunctionInterfaceType = function () {
        return (
          this._cachedFunctionInterfaceType ||
            (this._cachedFunctionInterfaceType =
              this.getSymbolFromDeclPath("Function", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedFunctionInterfaceType &&
            !this._cachedFunctionInterfaceType.isResolved &&
            this.resolveDeclaredSymbol(
              this._cachedFunctionInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedFunctionInterfaceType
        );
      }),
      (i.prototype.cachedIArgumentsInterfaceType = function () {
        return (
          this._cachedIArgumentsInterfaceType ||
            (this._cachedIArgumentsInterfaceType =
              this.getSymbolFromDeclPath("IArguments", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedIArgumentsInterfaceType &&
            !this._cachedIArgumentsInterfaceType.isResolved &&
            this.resolveDeclaredSymbol(
              this._cachedIArgumentsInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedIArgumentsInterfaceType
        );
      }),
      (i.prototype.cachedRegExpInterfaceType = function () {
        return (
          this._cachedRegExpInterfaceType ||
            (this._cachedRegExpInterfaceType =
              this.getSymbolFromDeclPath("RegExp", [], 16) ||
              this.semanticInfoChain.emptyTypeSymbol),
          this._cachedRegExpInterfaceType &&
            !this._cachedRegExpInterfaceType.isResolved &&
            this.resolveDeclaredSymbol(
              this._cachedRegExpInterfaceType,
              new e.PullTypeResolutionContext(this)
            ),
          this._cachedRegExpInterfaceType
        );
      }),
      (i.prototype.cachedFunctionArgumentsSymbol = function () {
        if (!this._cachedFunctionArgumentsSymbol) {
          (this._cachedFunctionArgumentsSymbol = new e.PullSymbol(
            "arguments",
            512
          )),
            (this._cachedFunctionArgumentsSymbol.type =
              this.cachedIArgumentsInterfaceType() ||
              this.semanticInfoChain.anyTypeSymbol),
            this._cachedFunctionArgumentsSymbol.setResolved();
          var t = new e.PullSynthesizedDecl(
            "arguments",
            "arguments",
            2048,
            0,
            null,
            this.semanticInfoChain
          );
          t.setSymbol(this._cachedFunctionArgumentsSymbol),
            this._cachedFunctionArgumentsSymbol.addDeclaration(t);
        }
        return this._cachedFunctionArgumentsSymbol;
      }),
      (i.prototype.getApparentType = function (e) {
        if (e.isTypeParameter()) {
          var t = e.getBaseConstraint(this.semanticInfoChain);
          if (t === this.semanticInfoChain.anyTypeSymbol)
            return this.semanticInfoChain.emptyTypeSymbol;
          e = t;
        }
        return e.isPrimitive()
          ? e === this.semanticInfoChain.numberTypeSymbol
            ? this.cachedNumberInterfaceType()
            : e === this.semanticInfoChain.booleanTypeSymbol
            ? this.cachedBooleanInterfaceType()
            : e === this.semanticInfoChain.stringTypeSymbol
            ? this.cachedStringInterfaceType()
            : e
          : e.isEnum()
          ? this.cachedNumberInterfaceType()
          : e;
      }),
      (i.prototype.setTypeChecked = function (e, t) {
        t.setTypeChecked(e);
      }),
      (i.prototype.canTypeCheckAST = function (e, t) {
        return t.canTypeCheckAST(e);
      }),
      (i.prototype.setSymbolForAST = function (e, t, n) {
        n && n.inProvisionalResolution()
          ? n.setSymbolForAST(e, t)
          : this.semanticInfoChain.setSymbolForAST(e, t);
      }),
      (i.prototype.getSymbolForAST = function (e, t) {
        var n = this.semanticInfoChain.getSymbolForAST(e);
        return (
          n || (t && t.inProvisionalResolution() && (n = t.getSymbolForAST(e))),
          n
        );
      }),
      (i.prototype.getASTForDecl = function (e) {
        return this.semanticInfoChain.getASTForDecl(e);
      }),
      (i.prototype.getNewErrorTypeSymbol = function (t) {
        return (
          "undefined" == typeof t && (t = null),
          new e.PullErrorTypeSymbol(this.semanticInfoChain.anyTypeSymbol, t)
        );
      }),
      (i.prototype.getEnclosingDecl = function (e) {
        var t = e.getParentPath();
        return t.length > 1 && t[t.length - 1] === e
          ? t[t.length - 2]
          : t[t.length - 1];
      }),
      (i.prototype.getExportedMemberSymbol = function (e, t) {
        if (!(69632 & e.kind)) {
          var n = 0 !== (36 & t.kind),
            r = n ? t : t.getAssociatedContainerType();
          if (n && r) return e.anyDeclHasFlag(1) ? e : null;
        }
        return e;
      }),
      (i.prototype._getNamedPropertySymbolOfAugmentedType = function (e, t) {
        var n = this.getNamedPropertySymbol(e, 68147712, t);
        return n
          ? n
          : this.cachedFunctionInterfaceType() &&
            t.isFunctionType() &&
            (n = this.cachedFunctionInterfaceType().findMember(e, !0))
          ? n
          : this.cachedObjectInterfaceType()
          ? this.cachedObjectInterfaceType().findMember(e, !0)
          : null;
      }),
      (i.prototype.getNamedPropertySymbol = function (e, t, n) {
        var r = null;
        if (
          (68147712 & t
            ? (r = n.findMember(e, !0))
            : 58728795 & t
            ? (r = n.findNestedType(e))
            : 164 & t && (r = n.findNestedContainer(e)),
          r)
        )
          return this.getExportedMemberSymbol(r, n);
        var i = n.getAssociatedContainerType();
        if (i) {
          if (i.isClass()) return null;
          if (
            ((n = i),
            68147712 & t
              ? (r = n.findMember(e, !0))
              : 58728795 & t
              ? (r = n.findNestedType(e))
              : 164 & t && (r = n.findNestedContainer(e)),
            r)
          )
            return this.getExportedMemberSymbol(r, n);
        }
        if (164 & n.kind)
          for (
            var o = n.getDeclarations(), s = null, a = 0;
            a < o.length;
            a++
          ) {
            if (((s = o[a].searchChildDecls(e, t)), s.length))
              return (
                (r = s[0].getSymbol()),
                r || (r = s[0].getSignatureSymbol()),
                this.getExportedMemberSymbol(r, n)
              );
            if (
              (0 !== (58728795 & t) || 0 !== (68147712 & t)) &&
              ((s = o[a].searchChildDecls(e, 128)),
              s.length && 128 === s[0].kind)
            ) {
              var l = this.getExportedMemberSymbol(s[0].getSymbol(), n);
              if (l) {
                if (0 !== (58728795 & t)) {
                  var c = l.getExportAssignedTypeSymbol();
                  if (c) return c;
                } else {
                  var u = l.getExportAssignedValueSymbol();
                  if (u) return l.setIsUsedAsValue(), u;
                }
                return l;
              }
            }
          }
      }),
      (i.prototype.getSymbolFromDeclPath = function (t, n, r) {
        var i,
          o,
          s = this,
          a = null,
          l = null,
          c = null,
          u = null,
          p = null,
          h = null,
          d = null,
          m = 36;
        e.hasFlag(r, 67108864) && (m |= 64);
        for (
          var f = function (t) {
              if (t.isAlias())
                if ((s.resolveDeclaredSymbol(t), e.hasFlag(r, 164))) {
                  if (
                    t.assignedContainer() ||
                    t.getExportAssignedContainerSymbol()
                  )
                    return !0;
                } else if (e.hasFlag(r, 58728795)) {
                  var n = t.getExportAssignedTypeSymbol();
                  if (n && 32 !== n.kind) return !0;
                  var n = t.assignedType();
                  if (n && 32 !== n.kind) return !0;
                } else if (e.hasFlag(r, 1038848)) {
                  if (t.assignedType() && t.assignedType().isError()) return !0;
                  if (t.assignedValue() || t.getExportAssignedValueSymbol())
                    return !0;
                  var i = t.assignedType();
                  if (i && i.isContainer() && i.getInstanceType()) return !0;
                  var o = t.getDeclarations(),
                    a = o[0].ast();
                  return 245 === a.moduleReference.kind();
                }
              return !1;
            },
            g = function (e) {
              var n = e.searchChildDecls(t, 128);
              if (n.length) {
                var r = n[0].getSymbol();
                if (f(r)) return r;
              }
              return null;
            },
            v = n.length - 1;
          v >= 0;
          v--
        ) {
          if (((l = n[v]), (o = l.kind), 2097152 & l.flags))
            return this.semanticInfoChain.anyTypeSymbol;
          if (o & m) {
            if (((i = l.searchChildDecls(t, r)), i.length))
              return i[0].getSymbol();
            var y = g(l);
            if (y) return y;
            if (68147712 & r) {
              if (
                ((p = l.getSymbol().getInstanceSymbol()),
                p &&
                  ((h = p.type),
                  (d = this.getNamedPropertySymbol(t, r, h)),
                  d && d.kind & r && !d.anyDeclHasFlag(16)))
              )
                return d;
              (u = l.getValueDecl()), u && (l = u);
            }
            c = l.getSymbol().type;
            var d = this.getNamedPropertySymbol(t, r, c);
            if (d && d.kind & r && !d.anyDeclHasFlag(16)) return d;
          } else if (58728959 & r || !(8 & o)) {
            var b = null;
            if (
              (131072 === o &&
                t === l.getFunctionExpressionName() &&
                (b = l.getSymbol()),
              (i = l.searchChildDecls(t, r)),
              i.length)
            )
              return (
                1032192 & l.kind && l.ensureSymbolIsBound(), i[0].getSymbol()
              );
            if (b) return b;
            var y = g(l);
            if (y) return y;
          }
        }
        return (
          (a = this.semanticInfoChain.findSymbol([t], r)),
          a
            ? a
            : !e.hasFlag(r, 128) &&
              ((a = this.semanticInfoChain.findSymbol([t], 128)), a && f(a))
            ? a
            : null
        );
      }),
      (i.prototype.getVisibleDeclsFromDeclPath = function (e, t) {
        for (var n, r = [], i = null, o = e.length - 1; o >= 0; o--) {
          (i = e[o]), (n = i.kind);
          var s = i.kind;
          switch (
            (8 !== s &&
              16 !== s &&
              this.addFilteredDecls(i.getChildDecls(), t, r),
            s)
          ) {
            case 4:
            case 32:
              for (
                var a = this.semanticInfoChain.findDeclsFromPath(
                    e.slice(0, o + 1),
                    164
                  ),
                  l = 0,
                  c = a.length;
                c > l;
                l++
              ) {
                var u = a[l];
                if (u !== i)
                  for (
                    var p = u.getChildDecls(), h = 0, d = p.length;
                    d > h;
                    h++
                  ) {
                    var m = p[h];
                    1 & m.flags && m.kind & t && r.push(m);
                  }
              }
              break;
            case 8:
            case 16:
              var f = i.getTypeParameters();
              f && f.length && this.addFilteredDecls(f, t, r);
              break;
            case 131072:
              var g = i.getFunctionExpressionName();
              g && r.push(i);
            case 16384:
            case 32768:
            case 65536:
              var f = i.getTypeParameters();
              f && f.length && this.addFilteredDecls(f, t, r);
          }
        }
        for (
          var v = this.semanticInfoChain.topLevelDecls(), o = 0, y = v.length;
          y > o;
          o++
        ) {
          var b = v[o];
          (e.length > 0 && b.fileName() === e[0].fileName()) ||
            b.isExternalModule() ||
            this.addFilteredDecls(b.getChildDecls(), t, r);
        }
        return r;
      }),
      (i.prototype.addFilteredDecls = function (e, t, n) {
        if (e.length)
          for (var r = 0, i = e.length; i > r; r++) {
            var o = e[r];
            o.kind & t && n.push(o);
          }
      }),
      (i.prototype.getVisibleDecls = function (e) {
        var t = e.getParentPath(),
          n = 126876671;
        return this.getVisibleDeclsFromDeclPath(t, n);
      }),
      (i.prototype.getVisibleContextSymbols = function (e, t) {
        var n = t.getContextualType();
        if (!n || this.isAnyOrEquivalent(n)) return null;
        for (
          var r = 126876671, i = n.getAllMembers(r, 2), o = 0;
          o < i.length;
          o++
        )
          i[o].setUnresolved();
        return i;
      }),
      (i.prototype.getVisibleMembersFromExpression = function (t, n, i) {
        var o = this.resolveAST(t, !1, i);
        if (r(t) && (8 === o.kind || 16 === o.kind || 64 === o.kind))
          return null;
        var s = o.type;
        if (!s) return null;
        if (
          (this.resolveDeclaredSymbol(s, i),
          s.isContainer() &&
            s.isAlias() &&
            (s = s.getExportAssignedTypeSymbol()),
          this.isAnyOrEquivalent(s))
        )
          return null;
        var a = 2,
          l = s;
        if (
          (33554432 === l.kind &&
            (l = l.getConstructSignatures()[0].returnType),
          l && l.isClass())
        ) {
          var c = n.getParentPath();
          if (c && c.length)
            for (var u = l.getDeclarations(), p = 0, h = u.length; h > p; p++) {
              var d = u[p];
              if (e.ArrayUtilities.contains(c, d)) {
                a = 1;
                break;
              }
            }
        }
        var m = 126876671,
          f = [];
        if (s.isContainer()) {
          var g = s.getExportAssignedContainerSymbol();
          g && (s = g);
        }
        if (((s = this.getApparentType(s)), !s.isResolved)) {
          var v = this.resolveDeclaredSymbol(s, i);
          v !== s && (o.isType() || i.setTypeInContext(o, v), (s = v));
        }
        if (((f = s.getAllMembers(m, a)), s.isContainer())) {
          var y = s.getInstanceSymbol();
          if (y) {
            var b = y.type;
            this.resolveDeclaredSymbol(b, i);
            var _ = b.getAllMembers(m, a);
            f = f.concat(_);
          }
          var w = s.getExportAssignedContainerSymbol();
          if (w) {
            var S = w.getAllMembers(m, a);
            f = f.concat(S);
          }
        } else if (!s.isConstructor() && !s.isEnum()) {
          var T = s.getAssociatedContainerType();
          if (T) {
            var k = T.type;
            this.resolveDeclaredSymbol(k, i);
            var x = k.getAllMembers(m, a);
            f = f.concat(x);
          }
        }
        return (
          s.isFunctionType() &&
            this.cachedFunctionInterfaceType() &&
            (f = f.concat(
              this.cachedFunctionInterfaceType().getAllMembers(m, 2)
            )),
          f
        );
      }),
      (i.prototype.isAnyOrEquivalent = function (e) {
        return e === this.semanticInfoChain.anyTypeSymbol || e.isError();
      }),
      (i.prototype.resolveExternalModuleReference = function (t, n) {
        var r = t,
          i = null;
        if (e.isRelative(r)) {
          var o = e.getRootFilePath(e.switchToForwardSlashes(n));
          i = this.semanticInfoChain.findExternalModule(o + t);
        } else if (
          ((t = r),
          (i = this.semanticInfoChain.findAmbientExternalModuleInGlobalContext(
            e.quoteStr(r)
          )),
          !i)
        )
          for (
            var o = e.getRootFilePath(e.switchToForwardSlashes(n));
            null === i && "" != o;

          )
            (i = this.semanticInfoChain.findExternalModule(o + t)),
              null === i &&
                ("/" === o
                  ? (o = "")
                  : ((o = e.normalizePath(o + "..")),
                    (o = o && "/" != o ? o + "/" : o)));
        return i;
      }),
      (i.prototype.resolveDeclaredSymbol = function (t, n) {
        return !t || t.isResolved || t.isTypeReference()
          ? t
          : (n || (n = new e.PullTypeResolutionContext(this)),
            this.resolveDeclaredSymbolWorker(t, n));
      }),
      (i.prototype.resolveDeclaredSymbolWorker = function (t, n) {
        if (!t || t.isResolved) return t;
        if (t.inResolution)
          return (
            t.type ||
              t.isType() ||
              (t.type = this.semanticInfoChain.anyTypeSymbol),
            t
          );
        for (var r = t.getDeclarations(), i = 0; i < r.length; i++) {
          var o = r[i],
            s = this.semanticInfoChain.getASTForDecl(o);
          if (
            !s ||
            (139 === s.kind() && 215 === s.parent.parent.kind()) ||
            (140 === s.kind() && 215 === s.parent.parent.kind())
          )
            return t;
          if (s.parent && 236 === s.parent.kind() && s.parent.identifier === s)
            return t;
          if (s.parent && 219 === s.parent.kind() && s.parent.identifier === s)
            return t;
          var a,
            l = e.ASTHelpers.getEnclosingModuleDeclaration(s);
          e.ASTHelpers.isAnyNameOfModule(l, s)
            ? (a = this.resolveSingleModuleDeclaration(l, s, n))
            : 120 === s.kind() && 32 === o.kind
            ? (a = this.resolveModuleSymbol(o.getSymbol(), n, null, null, s))
            : (e.Debug.assert(11 !== s.kind() && 212 !== s.kind()),
              (a = this.resolveAST(s, !1, n))),
            2048 === o.kind &&
              !t.isResolved &&
              !t.type &&
              a &&
              t.anyDeclHasFlag(75497472) &&
              ((t.type = a.type), t.setResolved());
        }
        return t;
      }),
      (i.prototype.resolveOtherDecl = function (t, n) {
        var r = this.getASTForDecl(t),
          i = e.ASTHelpers.getEnclosingModuleDeclaration(r);
        e.ASTHelpers.isAnyNameOfModule(i, r)
          ? this.resolveSingleModuleDeclaration(i, r, n)
          : this.resolveAST(r, !1, n);
      }),
      (i.prototype.resolveOtherDeclarations = function (e, t) {
        {
          var n = this,
            r = this.semanticInfoChain.getDeclForAST(e),
            i = r.getSymbol();
          i.getDeclarations();
        }
        this.inResolvingOtherDeclsWalker.walkOtherPullDecls(
          r,
          i.getDeclarations(),
          function (e) {
            return n.resolveOtherDecl(e, t);
          }
        );
      }),
      (i.prototype.resolveSourceUnit = function (e, t) {
        var n = this.getEnclosingDeclForAST(e),
          r = n.getSymbol();
        return (
          this.ensureAllSymbolsAreBound(r),
          this.resolveFirstExportAssignmentStatement(e.moduleElements, t),
          this.resolveAST(e.moduleElements, !1, t),
          this.canTypeCheckAST(e, t) && this.typeCheckSourceUnit(e, t),
          r
        );
      }),
      (i.prototype.typeCheckSourceUnit = function (e, t) {
        var n = this;
        this.setTypeChecked(e, t),
          this.resolveAST(e.moduleElements, !1, t),
          this.typeCheckCallBacks.push(function () {
            return n.verifyUniquenessOfImportNamesInSourceUnit(e);
          });
      }),
      (i.prototype.verifyUniquenessOfImportNamesInSourceUnit = function (e) {
        var t = this,
          n = this.semanticInfoChain.getDeclForAST(e),
          r = function (e) {
            var n = t.semanticInfoChain.findTopLevelSymbol(e, 128, null);
            return n && n.isAlias();
          };
        this.checkUniquenessOfImportNames([n], r);
      }),
      (i.prototype.resolveEnumDeclaration = function (e, t) {
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol();
        if (r.isResolved || r.inResolution) return r;
        r.inResolution = !0;
        for (var i = r.getDeclarations(), o = 0; o < i.length; o++)
          for (var s = i[o].getChildDecls(), a = 0; a < s.length; a++)
            s[a].ensureSymbolIsBound();
        return (
          r.setResolved(),
          this.resolveOtherDeclarations(e, t),
          this.canTypeCheckAST(e, t) && this.typeCheckEnumDeclaration(e, t),
          r
        );
      }),
      (i.prototype.typeCheckEnumDeclaration = function (t, n) {
        var r = this;
        this.setTypeChecked(t, n), this.resolveAST(t.enumElements, !1, n);
        var i = this.semanticInfoChain.getDeclForAST(t);
        this.validateVariableDeclarationGroups(i, n),
          this.typeCheckCallBacks.push(function (e) {
            return r.checkInitializersInEnumDeclarations(i, e);
          }),
          e.ASTHelpers.enumIsElided(t) ||
            this.checkNameForCompilerGeneratedDeclarationCollision(
              t,
              !0,
              t.identifier,
              n
            );
      }),
      (i.prototype.postTypeCheckEnumDeclaration = function (e, t) {
        this.checkThisCaptureVariableCollides(e, !0, t);
      }),
      (i.prototype.checkInitializersInEnumDeclarations = function (t) {
        var n = t.getSymbol(),
          r = n.getDeclarations();
        if (t === r[0])
          for (var i = !1, o = 0; o < r.length; ++o) {
            var s = r[o],
              a = s.ast();
            if (0 !== a.enumElements.nonSeparatorCount()) {
              var l = a.enumElements.nonSeparatorAt(0);
              l.equalsValueClause ||
                (i
                  ? this.semanticInfoChain.addDiagnosticFromAST(
                      l,
                      e.DiagnosticCode
                        .In_enums_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_the_first_enum_element
                    )
                  : (i = !0));
            }
          }
      }),
      (i.prototype.resolveModuleDeclaration = function (t, n) {
        var r;
        if (t.stringLiteral)
          r = this.resolveSingleModuleDeclaration(t, t.stringLiteral, n);
        else
          for (
            var i = e.getModuleNames(t.name), o = 0, s = i.length;
            s > o;
            o++
          )
            r = this.resolveSingleModuleDeclaration(t, i[o], n);
        return (
          this.canTypeCheckAST(t, n) && this.typeCheckModuleDeclaration(t, n), r
        );
      }),
      (i.prototype.ensureAllSymbolsAreBound = function (e) {
        if (e)
          for (var t = e.getDeclarations(), n = 0; n < t.length; n++)
            for (var r = t[n].getChildDecls(), i = 0; i < r.length; i++)
              r[i].ensureSymbolIsBound();
      }),
      (i.prototype.resolveModuleSymbol = function (t, n, r, i, o) {
        if (t.isResolved || t.inResolution) return t;
        (t.inResolution = !0), this.ensureAllSymbolsAreBound(t);
        var s = t.getInstanceSymbol();
        s && this.resolveDeclaredSymbol(s, n);
        var a = e.ASTHelpers.isLastNameOfModule(r, i);
        return (
          a
            ? this.resolveFirstExportAssignmentStatement(r.moduleElements, n)
            : o &&
              this.resolveFirstExportAssignmentStatement(o.moduleElements, n),
          t.setResolved(),
          i && this.resolveOtherDeclarations(i, n),
          t
        );
      }),
      (i.prototype.resolveFirstExportAssignmentStatement = function (e, t) {
        for (var n = 0, r = e.childCount(); r > n; n++) {
          var i = e.childAt(n);
          if (134 === i.kind())
            return this.resolveExportAssignmentStatement(i, t), void 0;
        }
      }),
      (i.prototype.resolveSingleModuleDeclaration = function (e, t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        return this.resolveModuleSymbol(i, n, e, t, null);
      }),
      (i.prototype.typeCheckModuleDeclaration = function (t, n) {
        if (t.stringLiteral)
          this.typeCheckSingleModuleDeclaration(t, t.stringLiteral, n);
        else
          for (
            var r = e.getModuleNames(t.name), i = 0, o = r.length;
            o > i;
            i++
          )
            this.typeCheckSingleModuleDeclaration(t, r[i], n);
      }),
      (i.prototype.typeCheckSingleModuleDeclaration = function (t, n, r) {
        var i = this;
        this.setTypeChecked(t, r),
          e.ASTHelpers.isLastNameOfModule(t, n) &&
            this.resolveAST(t.moduleElements, !1, r);
        var o = this.semanticInfoChain.getDeclForAST(n);
        this.validateVariableDeclarationGroups(o, r),
          t.stringLiteral &&
            e.isRelative(t.stringLiteral.valueText()) &&
            this.semanticInfoChain.addDiagnosticFromAST(
              t.stringLiteral,
              e.DiagnosticCode
                .Ambient_external_module_declaration_cannot_specify_relative_module_name
            ),
          e.ASTHelpers.moduleIsElided(t) ||
            t.stringLiteral ||
            this.checkNameForCompilerGeneratedDeclarationCollision(n, !0, n, r),
          this.typeCheckCallBacks.push(function () {
            return i.verifyUniquenessOfImportNamesInModule(o);
          });
      }),
      (i.prototype.verifyUniquenessOfImportNamesInModule = function (e) {
        var t = e.getSymbol();
        if (t) {
          var n = t.getDeclarations();
          n[0] === e && this.checkUniquenessOfImportNames(n);
        }
      }),
      (i.prototype.checkUniquenessOfImportNames = function (t, n) {
        for (var r, i = this, o = 0; o < t.length; ++o)
          for (var s = t[o].getChildDecls(), a = 0; a < s.length; ++a) {
            var l = s[a];
            128 === l.kind &&
              ((r = r || e.createIntrinsicsObject()), (r[l.name] = !0));
          }
        if (r || n)
          for (var o = 0; o < t.length; ++o)
            this.scanVariableDeclarationGroups(t[o], function (t) {
              var o = r && r[t.name];
              o ||
                ((o = n && n(t.name)),
                o && ((r = r || e.createIntrinsicsObject()), (r[t.name] = !0))),
                o &&
                  i.semanticInfoChain.addDiagnosticFromAST(
                    t.ast(),
                    e.DiagnosticCode
                      .Variable_declaration_cannot_have_the_same_name_as_an_import_declaration
                  );
            });
      }),
      (i.prototype.scanVariableDeclarationGroups = function (e, t, n) {
        for (var r = e.getVariableDeclGroups(), i = 0; i < r.length; i++) {
          var o = null;
          if (1 === e.kind && r[i].length) {
            var s = r[i][0].name,
              a = this.semanticInfoChain.findTopLevelSymbol(s, 512, e);
            a && a.isResolved && (a.anyDeclHasFlag(118784) || (o = a));
          }
          for (var l = 0; l < r[i].length; l++) {
            var c = r[i][l],
              s = c.name,
              u = c.getSymbol();
            if (0 === l) {
              if ((t(c), !n)) break;
              if (!o || !o.type) {
                o = u;
                continue;
              }
            }
            n(c, o);
          }
        }
      }),
      (i.prototype.postTypeCheckModuleDeclaration = function (e, t) {
        this.checkThisCaptureVariableCollides(e, !0, t);
      }),
      (i.prototype.isTypeRefWithoutTypeArgs = function (e) {
        if (11 === e.kind()) return !0;
        if (121 === e.kind()) {
          var t = e;
          if (11 === t.right.kind()) return !0;
        }
        return !1;
      }),
      (i.prototype.createInstantiatedType = function (t, n) {
        if (!t.isGeneric()) return t;
        for (
          var r = t.getTypeArgumentsOrTypeParameters(), i = [], o = 0;
          o < r.length;
          o++
        )
          i[r[o].pullSymbolID] =
            n[o] ||
            new e.PullErrorTypeSymbol(
              this.semanticInfoChain.anyTypeSymbol,
              r[o].name
            );
        return e.PullInstantiatedTypeReferenceSymbol.create(this, t, i);
      }),
      (i.prototype.resolveReferenceTypeDeclaration = function (t, n, r, i) {
        var o = this,
          s = this.semanticInfoChain.getDeclForAST(t),
          a = (this.getEnclosingDecl(s), s.getSymbol()),
          l = 131 === t.kind(),
          c = null !== this.getSymbolForAST(t, i);
        if (
          (a.isResolved && c) ||
          (a.inResolution && !i.isInBaseTypeResolution())
        )
          return a;
        a.inResolution;
        a.startResolving();
        for (var u = a.getDeclarations(), p = 0; p < u.length; p++)
          for (var h = u[p].getChildDecls(), d = 0; d < h.length; d++)
            h[d].ensureSymbolIsBound();
        if (!a.isResolved)
          for (var m = a.getTypeParameters(), p = 0; p < m.length; p++)
            this.resolveDeclaredSymbol(m[p], i);
        var f = i.startBaseTypeResolution();
        l || c || a.resetKnownBaseTypeCount();
        var g = e.ASTHelpers.getExtendsHeritageClause(r);
        if (g)
          for (
            var p = a.getKnownBaseTypeCount();
            p < g.typeNames.nonSeparatorCount();
            p = a.getKnownBaseTypeCount()
          ) {
            a.incrementKnownBaseCount();
            var v = this.resolveTypeReference(g.typeNames.nonSeparatorAt(p), i);
            if (a.isValidBaseKind(v, !0)) {
              if (
                (this.setSymbolForAST(g.typeNames.nonSeparatorAt(p), v, null),
                !a.hasBase(v) && !v.hasBase(a))
              ) {
                a.addExtendedType(v);
                for (
                  var y = a.getKnownSpecializations(), d = 0;
                  d < y.length;
                  d++
                )
                  y[d].addExtendedType(v);
              }
            } else
              v &&
                !this.getSymbolForAST(g.typeNames.nonSeparatorAt(p), i) &&
                this.setSymbolForAST(g.typeNames.nonSeparatorAt(p), v, null);
          }
        var b = e.ASTHelpers.getImplementsHeritageClause(r);
        if (b && l)
          for (
            var _ = g ? g.typeNames.nonSeparatorCount() : 0,
              p = a.getKnownBaseTypeCount();
            p - _ >= 0 && p - _ < b.typeNames.nonSeparatorCount();
            p = a.getKnownBaseTypeCount()
          ) {
            a.incrementKnownBaseCount();
            var w = b.typeNames.nonSeparatorAt(p - _),
              S = this.resolveTypeReference(w, i);
            a.isValidBaseKind(S, !1)
              ? (this.setSymbolForAST(
                  b.typeNames.nonSeparatorAt(p - _),
                  S,
                  null
                ),
                a.hasBase(S) || S.hasBase(a) || a.addImplementedType(S))
              : S &&
                !this.getSymbolForAST(b.typeNames.nonSeparatorAt(p - _), i) &&
                this.setSymbolForAST(
                  b.typeNames.nonSeparatorAt(p - _),
                  S,
                  null
                );
          }
        return (
          i.doneBaseTypeResolution(f),
          f
            ? ((a.inResolution = !1),
              this.typeCheckCallBacks.push(function (e) {
                131 === t.kind()
                  ? o.resolveClassDeclaration(t, e)
                  : o.resolveInterfaceDeclaration(t, e);
              }),
              a)
            : (this.setSymbolForAST(n, a, i),
              this.setSymbolForAST(t, a, i),
              a.setResolved(),
              a)
        );
      }),
      (i.prototype.resolveClassDeclaration = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        if (!i.isResolved) {
          this.resolveReferenceTypeDeclaration(
            t,
            t.identifier,
            t.heritageClauses,
            n
          );
          var o = i.getConstructorMethod(),
            s = i.getExtendedTypes(),
            a = s.length ? s[0] : null;
          if (o) {
            var l = o.type,
              c = l.getConstructSignatures();
            if (!c.length) {
              var u,
                p = a ? a.getConstructorMethod() : null;
              if (p) {
                this.resolveDeclaredSymbol(p, n);
                var h,
                  d,
                  m = p.type,
                  f = m.getConstructSignatures();
                f.length ||
                  ((h = new e.PullSignatureSymbol(2097152)),
                  (h.returnType = a),
                  h.addTypeParametersFromReturnType(),
                  m.appendConstructSignature(h),
                  h.addDeclaration(a.getDeclarations()[0]),
                  (f = [h]));
                for (var g = 0; g < f.length; g++) {
                  (h = f[g]),
                    (d = h.parameters),
                    (u = new e.PullSignatureSymbol(2097152, h.isDefinition())),
                    (u.returnType = i),
                    u.addTypeParametersFromReturnType();
                  for (var v = 0; v < d.length; v++)
                    u.addParameter(d[v], d[v].isOptional);
                  l.appendConstructSignature(u), u.addDeclaration(r);
                }
              } else
                (u = new e.PullSignatureSymbol(2097152)),
                  (u.returnType = i),
                  u.addTypeParametersFromReturnType(),
                  l.appendConstructSignature(u),
                  u.addDeclaration(r);
            }
            if (!i.isResolved) return i;
            if (a) {
              var y = a.getConstructorMethod();
              if (y) {
                var b = y.type;
                l.hasBase(b) || l.addExtendedType(b);
              }
            }
          }
          this.resolveOtherDeclarations(t, n);
        }
        return (
          this.canTypeCheckAST(t, n) && this.typeCheckClassDeclaration(t, n), i
        );
      }),
      (i.prototype.typeCheckTypeParametersOfTypeDeclaration = function (e, t) {
        var n = this,
          r = 131 == e.kind() ? e.typeParameterList : e.typeParameterList;
        if (r)
          for (
            var i = this.semanticInfoChain.getDeclForAST(e),
              o = i.getSymbol(),
              s = 0;
            s < r.typeParameters.nonSeparatorCount();
            s++
          ) {
            var a = r.typeParameters.nonSeparatorAt(s);
            this.resolveTypeParameterDeclaration(a, t);
            var l = this.semanticInfoChain.getDeclForAST(a),
              c = l.getSymbol();
            this.checkSymbolPrivacy(o, c, function (r) {
              return n.typeParameterOfTypeDeclarationPrivacyErrorReporter(
                e,
                a,
                c,
                r,
                t
              );
            });
          }
      }),
      (i.prototype.typeCheckClassDeclaration = function (e, t) {
        this.setTypeChecked(e, t);
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol();
        this.checkNameForCompilerGeneratedDeclarationCollision(
          e,
          !0,
          e.identifier,
          t
        ),
          this.resolveAST(e.classElements, !1, t),
          this.typeCheckTypeParametersOfTypeDeclaration(e, t),
          this.typeCheckBases(
            e,
            e.identifier,
            e.heritageClauses,
            r,
            this.getEnclosingDecl(n),
            t
          ),
          r.hasBaseTypeConflict() ||
            this.typeCheckMembersAgainstIndexer(r, n, t),
          this.checkTypeForDuplicateIndexSignatures(r);
      }),
      (i.prototype.postTypeCheckClassDeclaration = function (e, t) {
        this.checkThisCaptureVariableCollides(e, !0, t);
      }),
      (i.prototype.resolveTypeSymbolSignatures = function (e, t) {
        for (var n = e.getCallSignatures(), r = 0; r < n.length; r++)
          this.resolveDeclaredSymbol(n[r], t);
        for (var i = e.getConstructSignatures(), r = 0; r < i.length; r++)
          this.resolveDeclaredSymbol(i[r], t);
        for (var o = e.getIndexSignatures(), r = 0; r < o.length; r++)
          this.resolveDeclaredSymbol(o[r], t);
      }),
      (i.prototype.resolveInterfaceDeclaration = function (e, t) {
        this.resolveReferenceTypeDeclaration(
          e,
          e.identifier,
          e.heritageClauses,
          t
        );
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol();
        return (
          this.resolveTypeSymbolSignatures(r, t),
          r.isResolved &&
            (this.resolveOtherDeclarations(e, t),
            this.canTypeCheckAST(e, t) &&
              this.typeCheckInterfaceDeclaration(e, t)),
          r
        );
      }),
      (i.prototype.typeCheckInterfaceDeclaration = function (t, n) {
        this.setTypeChecked(t, n);
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        this.resolveAST(t.body.typeMembers, !1, n),
          this.typeCheckTypeParametersOfTypeDeclaration(t, n),
          this.typeCheckBases(
            t,
            t.identifier,
            t.heritageClauses,
            i,
            this.getEnclosingDecl(r),
            n
          ),
          i.hasBaseTypeConflict() ||
            this.typeCheckMembersAgainstIndexer(i, r, n);
        var o = i.getDeclarations();
        r === o[o.length - 1] && this.checkTypeForDuplicateIndexSignatures(i),
          this.checkInterfaceDeclForIdenticalTypeParameters(t, n) ||
            this.semanticInfoChain.addDiagnosticFromAST(
              t.identifier,
              e.DiagnosticCode
                .All_declarations_of_an_interface_must_have_identical_type_parameters
            );
      }),
      (i.prototype.checkInterfaceDeclForIdenticalTypeParameters = function (
        e,
        t
      ) {
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol();
        if (!r.isGeneric()) return !0;
        var i = r.getDeclarations()[0];
        if (i == n) return !0;
        var o = n.getTypeParameters(),
          s = i.getTypeParameters();
        if (o.length != s.length) return !1;
        for (var a = 0; a < o.length; a++) {
          var l = o[a],
            c = s[a];
          if (l.name != c.name) return !1;
          var u = l.getSymbol(),
            p = this.semanticInfoChain.getASTForDecl(l),
            h = this.semanticInfoChain.getASTForDecl(c);
          if (!!p.constraint != !!h.constraint) return !1;
          if (p.constraint) {
            var d = this.resolveAST(p.constraint, !1, t);
            if (
              !this.typesAreIdenticalWithNewEnclosingTypes(
                d,
                u.getConstraint(),
                t
              )
            )
              return !1;
          }
        }
        return !0;
      }),
      (i.prototype.checkTypeForDuplicateIndexSignatures = function (t) {
        for (
          var n = t.getOwnIndexSignatures(), r = null, i = null, o = 0;
          o < n.length;
          o++
        ) {
          var s = n[o],
            a = s.parameters[0].type;
          if (
            (e.Debug.assert(a), a === this.semanticInfoChain.stringTypeSymbol)
          ) {
            if (r)
              return (
                this.semanticInfoChain.addDiagnosticFromAST(
                  s.getDeclarations()[0].ast(),
                  e.DiagnosticCode.Duplicate_string_index_signature,
                  null,
                  [
                    this.semanticInfoChain.locationFromAST(
                      r.getDeclarations()[0].ast()
                    ),
                  ]
                ),
                void 0
              );
            r = s;
          } else if (a === this.semanticInfoChain.numberTypeSymbol) {
            if (i)
              return (
                this.semanticInfoChain.addDiagnosticFromAST(
                  s.getDeclarations()[0].ast(),
                  e.DiagnosticCode.Duplicate_number_index_signature,
                  null,
                  [
                    this.semanticInfoChain.locationFromAST(
                      i.getDeclarations()[0].ast()
                    ),
                  ]
                ),
                void 0
              );
            i = s;
          }
        }
      }),
      (i.prototype.filterSymbol = function (e, t, n, r) {
        if (e) {
          if (e.kind & t) return e;
          if (e.isAlias()) {
            this.resolveDeclaredSymbol(e, r);
            var i = e;
            if (164 & t) return i.getExportAssignedContainerSymbol();
            if (58728795 & t) return i.getExportAssignedTypeSymbol();
            if (68147712 & t) return i.getExportAssignedValueSymbol();
          }
        }
        return null;
      }),
      (i.prototype.getMemberSymbolOfKind = function (e, t, n, r, i) {
        var o = this.getNamedPropertySymbol(e, t, n);
        return {
          symbol: this.filterSymbol(o, t, r, i),
          aliasSymbol: o && o.isAlias() ? o : null,
        };
      }),
      (i.prototype.resolveIdentifierOfInternalModuleReference = function (
        t,
        n,
        r,
        i,
        o
      ) {
        var s = n.valueText();
        if (0 === s.length) return null;
        var a = r.type,
          l = this.getMemberSymbolOfKind(s, 164, a, i, o),
          c = l.symbol,
          u = null,
          p = null,
          h = null,
          d = !0;
        if (
          (c && ((d = 0 !== (59753052 & c.kind)), (h = l.aliasSymbol)),
          !d && c && 128 === c.kind)
        ) {
          this.resolveDeclaredSymbol(c, o);
          var m = c.getExportAssignedValueSymbol(),
            f = c.getExportAssignedTypeSymbol(),
            g = c.getExportAssignedContainerSymbol();
          (m || f || g) && ((h = c), (u = m), (p = f), (c = g), (d = !0));
        }
        return d
          ? (u ||
              (a.getInstanceSymbol() &&
                ((l = this.getMemberSymbolOfKind(
                  s,
                  68147712,
                  a.getInstanceSymbol().type,
                  i,
                  o
                )),
                (u = l.symbol),
                u && l.aliasSymbol && (h = l.aliasSymbol))),
            p ||
              ((l = this.getMemberSymbolOfKind(s, 58728795, a, i, o)),
              (p = l.symbol),
              p && l.aliasSymbol && (h = l.aliasSymbol)),
            u || p || c
              ? (!p && c && (p = c),
                {
                  valueSymbol: u,
                  typeSymbol: p,
                  containerSymbol: c,
                  aliasSymbol: h,
                })
              : (this.semanticInfoChain.addDiagnosticFromAST(
                  n,
                  e.DiagnosticCode.Could_not_find_symbol_0_in_module_1,
                  [s, r.toString()]
                ),
                null))
          : (this.semanticInfoChain.addDiagnosticFromAST(
              n,
              e.DiagnosticCode
                .Import_declaration_referencing_identifier_from_internal_module_can_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules
            ),
            null);
      }),
      (i.prototype.resolveModuleReference = function (t, n, r, i, o) {
        e.Debug.assert(
          121 === n.kind() || 11 === n.kind() || 14 === n.kind(),
          "resolving module reference should always be either name or member reference"
        );
        var s,
          a = null;
        if (121 === n.kind()) {
          var l = n,
            c = this.resolveModuleReference(t, l.left, r, i, o);
          c &&
            ((s = l.right.valueText()),
            (a = this.getMemberSymbolOfKind(s, 4, c.type, r, i).symbol),
            a ||
              this.semanticInfoChain.addDiagnosticFromAST(
                l.right,
                e.DiagnosticCode.Could_not_find_module_0_in_module_1,
                [s, c.toString()]
              ));
        } else {
          var u = 11 === n.kind() ? n.valueText() : n.valueText(),
            p = 11 === n.kind() ? n.text() : n.text();
          if (p.length > 0) {
            var h = this.getSymbolFromDeclPath(u, o, 4);
            if ((a = this.filterSymbol(h, 4, r, i))) {
              if ((this.semanticInfoChain.setSymbolForAST(n, a), h.isAlias())) {
                this.semanticInfoChain.setAliasSymbolForAST(n, h);
                var d = t.getSymbol();
                d.addLinkedAliasSymbol(h);
              }
            } else
              this.semanticInfoChain.addDiagnosticFromAST(
                n,
                e.DiagnosticCode.Unable_to_resolve_module_reference_0,
                [u]
              );
          }
        }
        return a;
      }),
      (i.prototype.resolveInternalModuleReference = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = this.getEnclosingDecl(r),
          o = t.moduleReference,
          s = 245 === o.kind() ? o.stringLiteral : o.moduleName,
          a = i.getParentPath(),
          l = null,
          c = r.getSymbol();
        if (11 === s.kind() || 14 === s.kind()) {
          var u = this.resolveModuleReference(r, s, i, n, a);
          if (u) {
            if (
              ((l = u.type),
              this.semanticInfoChain.setAliasSymbolForAST(
                o,
                this.semanticInfoChain.getAliasSymbolForAST(s)
              ),
              l.anyDeclHasFlag(32768))
            ) {
              var p = 11 === s.kind() ? s.valueText() : s.valueText(),
                h = this.getSymbolFromDeclPath(p, a, 68147712),
                d = l.getInstanceSymbol();
              if (!h || (d == h && h.type !== l)) c.setAssignedValueSymbol(h);
              else {
                var m = 11 === s.kind() ? s.text() : s.text();
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    s,
                    e.DiagnosticCode
                      .Internal_module_reference_0_in_import_declaration_does_not_reference_module_instance_for_1,
                    [m, u.type.toString(i ? i.getSymbol() : null)]
                  )
                );
              }
            }
          } else l = this.getNewErrorTypeSymbol();
        } else if (121 === s.kind()) {
          var f = s,
            u = this.resolveModuleReference(r, f.left, i, n, a);
          if (u) {
            var g = this.resolveIdentifierOfInternalModuleReference(
              r,
              f.right,
              u,
              i,
              n
            );
            if (g)
              return (
                c.setAssignedValueSymbol(g.valueSymbol),
                c.setAssignedTypeSymbol(g.typeSymbol),
                c.setAssignedContainerSymbol(g.containerSymbol),
                this.semanticInfoChain.setAliasSymbolForAST(o, g.aliasSymbol),
                null
              );
          }
        }
        return l || c.setAssignedTypeSymbol(this.getNewErrorTypeSymbol()), l;
      }),
      (i.prototype.resolveImportDeclaration = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = this.getEnclosingDecl(r),
          o = r.getSymbol(),
          s = null;
        if (o.isResolved) return o;
        if ((o.startResolving(), 245 === t.moduleReference.kind())) {
          {
            var a = t.moduleReference.stringLiteral.valueText();
            i.getParentPath();
          }
          if (
            ((s = this.resolveExternalModuleReference(a, r.fileName())), !s)
          ) {
            var l = t.moduleReference.stringLiteral.text();
            this.semanticInfoChain.addDiagnosticFromAST(
              t,
              e.DiagnosticCode.Unable_to_resolve_external_module_0,
              [l]
            ),
              (s = this.getNewErrorTypeSymbol());
          }
        } else s = this.resolveInternalModuleReference(t, n);
        return (
          s &&
            (s.isContainer() ||
              (this.semanticInfoChain.addDiagnosticFromAST(
                t,
                e.DiagnosticCode.Module_cannot_be_aliased_to_a_non_module_type
              ),
              s.isError() || (s = this.getNewErrorTypeSymbol())),
            s.isContainer() && o.setAssignedContainerSymbol(s),
            o.setAssignedTypeSymbol(s),
            this.setSymbolForAST(t.moduleReference, s, null)),
          o.setResolved(),
          this.resolveDeclaredSymbol(o.assignedValue(), n),
          this.resolveDeclaredSymbol(o.assignedType(), n),
          this.resolveDeclaredSymbol(o.assignedContainer(), n),
          s &&
            o.anyDeclHasFlag(1) &&
            (o.setIsUsedInExportedAlias(),
            s.isContainer() &&
              s.getExportAssignedValueSymbol() &&
              o.setIsUsedAsValue()),
          this.canTypeCheckAST(t, n) && this.typeCheckImportDeclaration(t, n),
          o
        );
      }),
      (i.prototype.typeCheckImportDeclaration = function (t, n) {
        var r = this;
        this.setTypeChecked(t, n);
        var i = this.semanticInfoChain.getDeclForAST(t),
          o = this.getEnclosingDecl(i),
          s = i.getSymbol();
        if (245 === t.moduleReference.kind()) {
          this.compilationSettings.noResolve() &&
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Import_declaration_cannot_refer_to_external_module_reference_when_noResolve_option_is_set,
                null
              )
            );
          var a = t.moduleReference.stringLiteral.valueText();
          if (32 === o.kind) {
            var l = e.ASTHelpers.getEnclosingModuleDeclaration(
              this.getASTForDecl(o)
            );
            l &&
              130 === l.kind() &&
              e.isRelative(a) &&
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name
                )
              );
          }
        }
        var c;
        if (245 === t.moduleReference.kind()) {
          var u = s.getExportAssignedContainerSymbol(),
            p = u ? u.getContainer() : null;
          p && 32 === p.kind && (c = !0);
        } else c = !0;
        if (c) {
          var h = s.getExportAssignedTypeSymbol(),
            u = s.getExportAssignedContainerSymbol(),
            d = s.getExportAssignedValueSymbol();
          this.checkSymbolPrivacy(s, u, function (i) {
            var a =
                e.DiagnosticCode
                  .Exported_import_declaration_0_is_assigned_container_that_is_or_is_using_inaccessible_module_1,
              l = [
                s.getScopedName(o ? o.getSymbol() : null),
                i.getScopedName(o ? o.getSymbol() : null, !1, !1, !0),
              ];
            n.postDiagnostic(r.semanticInfoChain.diagnosticFromAST(t, a, l));
          }),
            h !== u &&
              this.checkSymbolPrivacy(s, h, function (i) {
                var a =
                    i.isContainer() && !i.isEnum()
                      ? e.DiagnosticCode
                          .Exported_import_declaration_0_is_assigned_type_that_is_using_inaccessible_module_1
                      : e.DiagnosticCode
                          .Exported_import_declaration_0_is_assigned_type_that_has_or_is_using_private_type_1,
                  l = [
                    s.getScopedName(o ? o.getSymbol() : null),
                    i.getScopedName(o ? o.getSymbol() : null, !1, !1, !0),
                  ];
                n.postDiagnostic(
                  r.semanticInfoChain.diagnosticFromAST(t, a, l)
                );
              }),
            d &&
              this.checkSymbolPrivacy(s, d.type, function (i) {
                var a =
                    i.isContainer() && !i.isEnum()
                      ? e.DiagnosticCode
                          .Exported_import_declaration_0_is_assigned_value_with_type_that_is_using_inaccessible_module_1
                      : e.DiagnosticCode
                          .Exported_import_declaration_0_is_assigned_value_with_type_that_has_or_is_using_private_type_1,
                  l = [
                    s.getScopedName(o ? o.getSymbol() : null),
                    i.getScopedName(o ? o.getSymbol() : null, !1, !1, !0),
                  ];
                n.postDiagnostic(
                  r.semanticInfoChain.diagnosticFromAST(t, a, l)
                );
              });
        }
        this.checkNameForCompilerGeneratedDeclarationCollision(
          t,
          !0,
          t.identifier,
          n
        );
      }),
      (i.prototype.postTypeCheckImportDeclaration = function (e, t) {
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol(),
          i = r.isUsedAsValue(),
          o =
            245 !== e.moduleReference.kind() &&
            null !== r.getExportAssignedValueSymbol();
        (i || o) && this.checkThisCaptureVariableCollides(e, !0, t);
      }),
      (i.prototype.resolveExportAssignmentStatement = function (t, n) {
        var r = t.identifier.valueText();
        if (0 === r.length) return this.semanticInfoChain.anyTypeSymbol;
        var i = null,
          o = null,
          s = null,
          a = this.getEnclosingDeclForAST(t),
          l = a.getSymbol();
        if (!l.isType() && l.isContainer())
          return (
            this.semanticInfoChain.addDiagnosticFromAST(
              t,
              e.DiagnosticCode
                .Export_assignments_may_only_be_used_at_the_top_level_of_external_modules
            ),
            this.semanticInfoChain.anyTypeSymbol
          );
        var c = null !== a ? [a] : [];
        s = this.getSymbolFromDeclPath(r, c, 164);
        var u = !0;
        if ((s && (u = 0 !== (59753052 & s.kind)), !u && s && 128 === s.kind)) {
          this.resolveDeclaredSymbol(s, n);
          var p = s,
            h = p.getExportAssignedValueSymbol(),
            d = p.getExportAssignedTypeSymbol(),
            m = p.getExportAssignedContainerSymbol();
          (h || d || m) &&
            ((i = h),
            (o = d),
            (s = m),
            p.setTypeUsedExternally(),
            i && p.setIsUsedAsValue(),
            (u = !0));
        }
        return u
          ? (i || (i = this.getSymbolFromDeclPath(r, c, 68147712)),
            o || (o = this.getSymbolFromDeclPath(r, c, 58728795)),
            i || o || s
              ? (i && l.setExportAssignedValueSymbol(i),
                o && l.setExportAssignedTypeSymbol(o),
                s && l.setExportAssignedContainerSymbol(s),
                this.resolveDeclaredSymbol(i, n),
                this.resolveDeclaredSymbol(o, n),
                this.resolveDeclaredSymbol(s, n),
                this.semanticInfoChain.voidTypeSymbol)
              : (n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Could_not_find_symbol_0,
                    [r]
                  )
                ),
                this.semanticInfoChain.voidTypeSymbol))
          : (this.semanticInfoChain.addDiagnosticFromAST(
              t,
              e.DiagnosticCode
                .Export_assignments_may_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules
            ),
            this.semanticInfoChain.voidTypeSymbol);
      }),
      (i.prototype.resolveAnyFunctionTypeSignature = function (t, n, r, i, o) {
        var s = this.semanticInfoChain.getDeclForAST(t);
        e.Debug.assert(s);
        var a = s.getSymbol(),
          l =
            33554432 === a.kind
              ? a.getConstructSignatures()[0]
              : a.getCallSignatures()[0];
        if ((i && (l.returnType = this.resolveTypeReference(i, o)), n))
          for (var c = 0; c < n.typeParameters.nonSeparatorCount(); c++)
            this.resolveTypeParameterDeclaration(
              n.typeParameters.nonSeparatorAt(c),
              o
            );
        if (r)
          for (var c = 0; c < r.parameters.nonSeparatorCount(); c++)
            this.resolveFunctionTypeSignatureParameter(
              r.parameters.nonSeparatorAt(c),
              l,
              s,
              o
            );
        return (
          a.setResolved(),
          this.canTypeCheckAST(t, o) &&
            (this.setTypeChecked(t, o), this.typeCheckFunctionOverloads(t, o)),
          a
        );
      }),
      (i.prototype.resolveFunctionTypeSignatureParameter = function (
        t,
        n,
        i,
        o
      ) {
        var s = this.semanticInfoChain.getDeclForAST(t),
          a = s.getSymbol();
        if (t.typeAnnotation) {
          var l = this.resolveTypeReference(e.ASTHelpers.getType(t), o);
          a.isVarArg &&
            !l.isArrayNamedTypeReference() &&
            (o.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Rest_parameters_must_be_array_types
              )
            ),
            (l = this.getNewErrorTypeSymbol())),
            o.setTypeInContext(a, l);
        } else
          a.isVarArg
            ? this.cachedArrayInterfaceType()
              ? o.setTypeInContext(
                  a,
                  this.createInstantiatedType(this.cachedArrayInterfaceType(), [
                    this.semanticInfoChain.anyTypeSymbol,
                  ])
                )
              : o.setTypeInContext(a, this.semanticInfoChain.anyTypeSymbol)
            : o.setTypeInContext(a, this.semanticInfoChain.anyTypeSymbol),
            this.compilationSettings.noImplicitAny() &&
              o.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Parameter_0_of_function_type_implicitly_has_an_any_type,
                  [t.identifier.text()]
                )
              );
        e.hasFlag(s.flags, 128) &&
          t.equalsValueClause &&
          r(t) &&
          o.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t,
              e.DiagnosticCode
                .Default_arguments_are_only_allowed_in_implementation
            )
          ),
          a.setResolved();
      }),
      (i.prototype.resolveFunctionExpressionParameter = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = this.semanticInfoChain.getDeclForAST(t),
          c = l.getSymbol(),
          u = o && o.type,
          p = !1;
        if (r) {
          var d = this.resolveTypeReference(r, a);
          if (c.isVarArg && !d.isArrayNamedTypeReference()) {
            {
              a.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Rest_parameters_must_be_array_types
                )
              );
            }
            d = this.getNewErrorTypeSymbol();
          }
          u = d || u;
        }
        u
          ? (a.isInferentiallyTyping() &&
              (u = a.fixAllTypeParametersReferencedByType(u, this)),
            a.setTypeInContext(c, u))
          : c.isVarArg &&
            (this.cachedArrayInterfaceType()
              ? a.setTypeInContext(
                  c,
                  this.createInstantiatedType(this.cachedArrayInterfaceType(), [
                    this.semanticInfoChain.anyTypeSymbol,
                  ])
                )
              : a.setTypeInContext(c, this.semanticInfoChain.anyTypeSymbol),
            (p = !0));
        var m = this.canTypeCheckAST(t, a);
        if (i && (m || !u)) {
          u && a.propagateContextualType(u);
          var f = this.resolveAST(i, null !== u, a);
          if ((u && a.popAnyContextualType(), f && f.type)) {
            var g = this.getInstanceTypeForAssignment(t, f.type, a);
            if (u) {
              var v = new h(),
                y = this.sourceIsAssignableToTarget(g, u, t, a, v);
              if (!y) {
                var b = this.getEnclosingSymbolForAST(t);
                v.message
                  ? a.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Cannot_convert_0_to_1_NL_2,
                        [g.toString(b), u.toString(b), v.message]
                      )
                    )
                  : a.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Cannot_convert_0_to_1,
                        [g.toString(b), u.toString(b)]
                      )
                    );
              }
            } else
              a.setTypeInContext(c, g.widenedType(this, i, a)),
                (p = g !== c.type);
          } else
            a.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Unable_to_resolve_type_of_0,
                [n.text()]
              )
            ),
              u || a.setTypeInContext(c, this.getNewErrorTypeSymbol(c.name));
        }
        if (
          (u ||
            c.isVarArg ||
            g ||
            (a.setTypeInContext(c, this.semanticInfoChain.anyTypeSymbol),
            (p = !0)),
          p && this.compilationSettings.noImplicitAny())
        ) {
          var _ = l.getParentDecl().getFunctionExpressionName();
          _
            ? a.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Parameter_0_of_1_implicitly_has_an_any_type,
                  [n.text(), _]
                )
              )
            : a.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Parameter_0_of_lambda_function_implicitly_has_an_any_type,
                  [n.text()]
                )
              );
        }
        m &&
          this.checkNameForCompilerGeneratedDeclarationCollision(t, !0, n, a),
          c.setResolved();
      }),
      (i.prototype.checkNameForCompilerGeneratedDeclarationCollision = function (
        e,
        n,
        r,
        i
      ) {
        var o = t(r);
        switch (o) {
          case 1:
            return this.postTypeCheckWorkitems.push(e), void 0;
          case 2:
            return this.checkSuperCaptureVariableCollides(e, n, i), void 0;
          case 3:
            return this.checkArgumentsCollides(e, i), void 0;
          case 4:
            return (
              this.checkIndexOfRestArgumentInitializationCollides(e, n, i),
              void 0
            );
          case 5:
          case 6:
            return (
              n && this.checkExternalModuleRequireExportsCollides(e, r, i),
              void 0
            );
        }
      }),
      (i.prototype.hasRestParameterCodeGen = function (t) {
        var n = this.getASTForDecl(t),
          r = n.kind();
        if (129 === r) {
          var i = n;
          return (
            !e.hasFlag(
              65536 === t.kind ? t.getParentDecl().flags : t.flags,
              8
            ) &&
            i.block &&
            e.lastParameterIsRest(i.callSignature.parameterList)
          );
        }
        if (135 === r) {
          var o = n;
          return (
            !e.hasFlag(
              65536 === t.kind ? t.getParentDecl().flags : t.flags,
              8
            ) &&
            o.block &&
            e.lastParameterIsRest(o.callSignature.parameterList)
          );
        }
        if (137 === r) {
          var s = n;
          return (
            !e.hasFlag(t.getParentDecl().flags, 8) &&
            s.block &&
            e.lastParameterIsRest(s.callSignature.parameterList)
          );
        }
        if (218 === r) {
          var a = n;
          return e.lastParameterIsRest(a.callSignature.parameterList);
        }
        if (222 === r) {
          var l = n;
          return e.lastParameterIsRest(l.callSignature.parameterList);
        }
        return !1;
      }),
      (i.prototype.checkArgumentsCollides = function (t, n) {
        if (242 === t.kind()) {
          var r = this.getEnclosingDeclForAST(t);
          e.hasFlag(r.kind, 1032192) &&
            this.hasRestParameterCodeGen(r) &&
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters
              )
            );
        }
      }),
      (i.prototype.checkIndexOfRestArgumentInitializationCollides = function (
        t,
        n,
        r
      ) {
        if (!n || 242 === t.kind())
          for (
            var i,
              o = this.getEnclosingDeclForAST(t),
              s = n ? [o] : o ? o.getParentPath() : [],
              a = null,
              l = s.length - 1;
            l >= 0;
            l--
          ) {
            var c = s[l];
            if (!n) {
              if (!a) {
                if (((a = this.resolveNameExpression(t, r)), a.isError()))
                  return;
                i = a.getContainer();
              }
              if (i && e.ArrayUtilities.contains(i.getDeclarations(), c)) break;
            }
            e.hasFlag(c.kind, 1032192) &&
              this.hasRestParameterCodeGen(c) &&
              r.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  n
                    ? e.DiagnosticCode
                        .Duplicate_identifier_i_Compiler_uses_i_to_initialize_rest_parameter
                    : e.DiagnosticCode
                        .Expression_resolves_to_variable_declaration_i_that_compiler_uses_to_initialize_rest_parameter
                )
              );
          }
      }),
      (i.prototype.checkExternalModuleRequireExportsCollides = function (
        t,
        n,
        r
      ) {
        var i = this.getEnclosingDeclForAST(t),
          o = e.ASTHelpers.getEnclosingModuleDeclaration(n);
        if (
          (e.ASTHelpers.isAnyNameOfModule(o, n) &&
            (i = this.getEnclosingDeclForAST(o)),
          i && 32 === i.kind)
        ) {
          var s = this.semanticInfoChain.getDeclForAST(t);
          if (!e.hasFlag(s.flags, 8)) {
            var a = n.valueText();
            r.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module,
                [a, a]
              )
            );
          }
        }
      }),
      (i.prototype.resolveObjectTypeTypeReference = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t);
        e.Debug.assert(r);
        var i = r.getSymbol();
        if ((e.Debug.assert(i), t.typeMembers))
          for (
            var o = null, s = null, a = null, l = t.typeMembers, c = 0;
            c < l.nonSeparatorCount();
            c++
          )
            (o = this.semanticInfoChain.getDeclForAST(l.nonSeparatorAt(c))),
              (s = 7340032 & o.kind ? o.getSignatureSymbol() : o.getSymbol()),
              this.resolveAST(l.nonSeparatorAt(c), !1, n),
              (a = s.type),
              ((a && a.isGeneric()) || (s.isSignature() && s.isGeneric())) &&
                i.setHasGenericMember();
        return (
          i.setResolved(),
          this.canTypeCheckAST(t, n) &&
            this.typeCheckObjectTypeTypeReference(t, n),
          i
        );
      }),
      (i.prototype.typeCheckObjectTypeTypeReference = function (e, t) {
        this.setTypeChecked(e, t);
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol();
        this.typeCheckMembersAgainstIndexer(r, n, t),
          this.checkTypeForDuplicateIndexSignatures(r);
      }),
      (i.prototype.resolveTypeAnnotation = function (e, t) {
        return this.resolveTypeReference(e.type, t);
      }),
      (i.prototype.resolveTypeReference = function (t, n) {
        if (null === t) return null;
        e.Debug.assert(244 !== t.kind());
        var r = null,
          i = this.computeTypeReferenceSymbol(t, n);
        if (4 === i.kind) {
          var o = i,
            s = o.getInstanceSymbol();
          s &&
            (s.anyDeclHasFlag(16384) || 32768 === s.kind) &&
            (i = s.type.getAssociatedContainerType());
        }
        return (
          i && i.isAlias() && ((r = i), (i = r.getExportAssignedTypeSymbol())),
          i &&
            !i.isGeneric() &&
            r &&
            this.semanticInfoChain.setAliasSymbolForAST(t, r),
          i &&
            !i.isError() &&
            0 === (58728795 & i.kind) &&
            (164 & i.kind
              ? n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Type_reference_cannot_refer_to_container_0,
                    [r ? r.toString() : i.toString()]
                  )
                )
              : n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Type_reference_must_refer_to_type
                  )
                )),
          this.canTypeCheckAST(t, n) && this.setTypeChecked(t, n),
          i
        );
      }),
      (i.prototype.getArrayType = function (e) {
        var t = e.getArrayType();
        return (
          t ||
            ((t = this.createInstantiatedType(this.cachedArrayInterfaceType(), [
              e,
            ])),
            t || (t = this.semanticInfoChain.anyTypeSymbol),
            e.setArrayType(t)),
          t
        );
      }),
      (i.prototype.computeTypeReferenceSymbol = function (t, n) {
        switch (t.kind()) {
          case 60:
            return this.semanticInfoChain.anyTypeSymbol;
          case 61:
            return this.semanticInfoChain.booleanTypeSymbol;
          case 67:
            return this.semanticInfoChain.numberTypeSymbol;
          case 69:
            return this.semanticInfoChain.stringTypeSymbol;
          case 41:
            return this.semanticInfoChain.voidTypeSymbol;
        }
        var r = null;
        if (11 === t.kind()) r = this.resolveTypeNameExpression(t, n);
        else if (123 === t.kind()) {
          var i = t;
          r = this.resolveAnyFunctionTypeSignature(
            i,
            i.typeParameterList,
            i.parameterList,
            i.type,
            n
          );
        } else if (125 === t.kind()) {
          var o = t;
          r = this.resolveAnyFunctionTypeSignature(
            o,
            o.typeParameterList,
            o.parameterList,
            o.type,
            n
          );
        } else if (122 === t.kind())
          r = this.resolveObjectTypeTypeReference(t, n);
        else if (126 === t.kind()) r = this.resolveGenericTypeReference(t, n);
        else if (121 === t.kind()) r = this.resolveQualifiedName(t, n);
        else if (14 === t.kind()) {
          var s = t,
            a = this.getEnclosingDeclForAST(t);
          r = new e.PullStringConstantTypeSymbol(s.text());
          var l = new e.PullSynthesizedDecl(
            s.text(),
            s.text(),
            r.kind,
            null,
            a,
            a.semanticInfoChain
          );
          r.addDeclaration(l);
        } else if (127 === t.kind()) {
          var c = t,
            u = c.name,
            p = this.resolveAST(u, !1, n);
          if (p && p.isAlias())
            if (p.assignedValue()) p = p.assignedValue();
            else {
              var h = p.getExportAssignedContainerSymbol();
              p =
                h && h.isContainer() && !h.isEnum()
                  ? h.getInstanceSymbol()
                  : null;
            }
          r = p ? p.type.widenedType(this, u, n) : this.getNewErrorTypeSymbol();
        } else {
          if (124 !== t.kind()) throw e.Errors.invalidOperation("unknown type");
          var d = t,
            m = this.resolveTypeReference(d.type, n);
          r = this.getArrayType(m);
        }
        return r
          ? r.isError()
            ? r
            : (this.genericTypeIsUsedWithoutRequiredTypeArguments(r, t, n) &&
                (n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Generic_type_references_must_include_all_type_arguments
                  )
                ),
                (r = this.instantiateTypeToAny(r, n))),
              r)
          : (n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Unable_to_resolve_type
              )
            ),
            this.getNewErrorTypeSymbol());
      }),
      (i.prototype.genericTypeIsUsedWithoutRequiredTypeArguments = function (
        e,
        t,
        n
      ) {
        return e
          ? e.isAlias()
            ? this.genericTypeIsUsedWithoutRequiredTypeArguments(
                e.getExportAssignedTypeSymbol(),
                t,
                n
              )
            : e.isNamedTypeSymbol() &&
              e.isGeneric() &&
              !e.isTypeParameter() &&
              (e.isResolved || e.inResolution) &&
              !e.getIsSpecialized() &&
              e.getTypeParameters().length &&
              null === e.getTypeArguments() &&
              this.isTypeRefWithoutTypeArgs(t)
          : !1;
      }),
      (i.prototype.resolveMemberVariableDeclaration = function (t, n) {
        return this.resolveVariableDeclaratorOrParameterOrEnumElement(
          t,
          t.modifiers,
          t.variableDeclarator.propertyName,
          e.ASTHelpers.getType(t.variableDeclarator),
          t.variableDeclarator.equalsValueClause,
          n
        );
      }),
      (i.prototype.resolvePropertySignature = function (t, n) {
        return this.resolveVariableDeclaratorOrParameterOrEnumElement(
          t,
          e.sentinelEmptyArray,
          t.propertyName,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.resolveVariableDeclarator = function (t, n) {
        return this.resolveVariableDeclaratorOrParameterOrEnumElement(
          t,
          e.ASTHelpers.getVariableDeclaratorModifiers(t),
          t.propertyName,
          e.ASTHelpers.getType(t),
          t.equalsValueClause,
          n
        );
      }),
      (i.prototype.resolveParameterList = function (e, t) {
        return this.resolveSeparatedList(e.parameters, t);
      }),
      (i.prototype.resolveParameter = function (t, n) {
        return this.resolveVariableDeclaratorOrParameterOrEnumElement(
          t,
          t.modifiers,
          t.identifier,
          e.ASTHelpers.getType(t),
          t.equalsValueClause,
          n
        );
      }),
      (i.prototype.getEnumTypeSymbol = function (e, t) {
        var n = e.parent.parent,
          r = this.semanticInfoChain.getDeclForAST(n),
          i = r.getSymbol();
        return this.resolveDeclaredSymbol(i, t), i;
      }),
      (i.prototype.resolveEnumElement = function (t, n) {
        return this.resolveVariableDeclaratorOrParameterOrEnumElement(
          t,
          e.sentinelEmptyArray,
          t.propertyName,
          null,
          t.equalsValueClause,
          n
        );
      }),
      (i.prototype.typeCheckEnumElement = function (t, n) {
        this.typeCheckVariableDeclaratorOrParameterOrEnumElement(
          t,
          e.sentinelEmptyArray,
          t.propertyName,
          null,
          t.equalsValueClause,
          n
        );
      }),
      (i.prototype.resolveEqualsValueClause = function (e, t, n) {
        return (
          this.canTypeCheckAST(e, n) && this.setTypeChecked(e, n),
          this.resolveAST(e.value, t, n)
        );
      }),
      (i.prototype.resolveVariableDeclaratorOrParameterOrEnumElement = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        var s = null !== r || 243 === e.kind(),
          a = this.getEnclosingDeclForAST(e),
          l = this.semanticInfoChain.getDeclForAST(e);
        a && 2048 === l.kind && a.ensureSymbolIsBound();
        var c = l.getSymbol(),
          u = l.getValueDecl() ? l.getValueDecl().getSymbol() : null;
        if (c.isResolved) {
          var p = c.type,
            h = l.getValueDecl();
          if (h) {
            var d = h.getSymbol();
            d && !d.isResolved && ((d.type = p), d.setResolved());
          }
        } else {
          if (c.inResolution)
            return (
              (c.type = this.semanticInfoChain.anyTypeSymbol),
              c.setResolved(),
              c
            );
          if (!c.type || !c.type.isError()) {
            c.startResolving();
            var m = this.resolveAndTypeCheckVariableDeclarationTypeExpr(
              e,
              n,
              r,
              o
            );
            if (
              (s ||
                this.resolveAndTypeCheckVariableDeclaratorOrParameterInitExpr(
                  e,
                  n,
                  r,
                  i,
                  o,
                  m
                ),
              !s && !i)
            ) {
              var f = this.semanticInfoChain.anyTypeSymbol;
              c.isVarArg &&
                this.cachedArrayInterfaceType() &&
                (f = this.createInstantiatedType(
                  this.cachedArrayInterfaceType(),
                  [f]
                )),
                o.setTypeInContext(c, f),
                u && (u.type = f);
            }
            c.setResolved(), u && u.setResolved();
          }
        }
        return (
          this.canTypeCheckAST(e, o) &&
            this.typeCheckVariableDeclaratorOrParameterOrEnumElement(
              e,
              t,
              n,
              r,
              i,
              o
            ),
          c
        );
      }),
      (i.prototype.resolveAndTypeCheckVariableDeclarationTypeExpr = function (
        t,
        n,
        r,
        i
      ) {
        var o = this.getEnclosingDeclForAST(t),
          s = this.semanticInfoChain.getDeclForAST(t),
          a = s.getSymbol(),
          l = s.getValueDecl() ? s.getValueDecl().getSymbol() : null;
        if (243 === t.kind()) {
          var c = this.getEnumTypeSymbol(t, i);
          return (a.type = c), c;
        }
        if (!r) return null;
        var u = this.getEnclosingDecl(s);
        u = u || o;
        var p = this.resolveTypeReference(r, i);
        if (p)
          if (p.isError())
            i.setTypeInContext(a, p), l && i.setTypeInContext(l, p);
          else {
            if (
              (p === this.semanticInfoChain.anyTypeSymbol &&
                s.setFlag(16777216),
              p.isContainer())
            ) {
              var h = p.getExportAssignedTypeSymbol();
              if (h) p = h;
              else if (
                ((p = p.type),
                p.isAlias() && (p = p.getExportAssignedTypeSymbol()),
                p && p.isContainer() && !p.isEnum())
              ) {
                var d = p.getInstanceSymbol();
                p =
                  d && e.PullHelpers.symbolIsEnum(d)
                    ? d.type
                    : this.getNewErrorTypeSymbol();
              }
            } else
              a.isVarArg &&
                !p.isArrayNamedTypeReference() &&
                p !== this.cachedArrayInterfaceType() &&
                (i.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Rest_parameters_must_be_array_types
                  )
                ),
                (p = this.getNewErrorTypeSymbol()));
            i.setTypeInContext(a, p),
              l && (l.type = p),
              16777216 !== p.kind ||
                p.getFunctionSymbol() ||
                p.setFunctionSymbol(a);
          }
        else
          i.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t,
              e.DiagnosticCode.Unable_to_resolve_type_of_0,
              [n.text()]
            )
          ),
            (a.type = this.getNewErrorTypeSymbol()),
            l && i.setTypeInContext(l, this.semanticInfoChain.anyTypeSymbol);
        return p;
      }),
      (i.prototype.resolveAndTypeCheckVariableDeclaratorOrParameterInitExpr = function (
        t,
        n,
        r,
        i,
        o,
        s
      ) {
        if (!i) return null;
        var a = null !== r || 243 === t.kind();
        s && o.pushNewContextualType(s);
        var l = this.getEnclosingDeclForAST(t),
          c = this.semanticInfoChain.getDeclForAST(t),
          u = c.getSymbol(),
          p = c.getValueDecl() ? c.getValueDecl().getSymbol() : null,
          h = this.getEnclosingDecl(c);
        h = h || l;
        var d = this.resolveAST(i, null !== s, o);
        if ((s && o.popAnyContextualType(), d)) {
          var m = d.type;
          if (!a) {
            var f = m.widenedType(this, i.value, o);
            return (
              o.setTypeInContext(u, f),
              p && o.setTypeInContext(p, f),
              this.compilationSettings.noImplicitAny() &&
                f !== m &&
                f === this.semanticInfoChain.anyTypeSymbol &&
                o.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Variable_0_implicitly_has_an_any_type,
                    [n.text()]
                  )
                ),
              f
            );
          }
        } else
          o.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t,
              e.DiagnosticCode.Unable_to_resolve_type_of_0,
              [n.text()]
            )
          ),
            a ||
              (o.setTypeInContext(u, this.getNewErrorTypeSymbol()),
              p && o.setTypeInContext(p, this.semanticInfoChain.anyTypeSymbol));
        return m;
      }),
      (i.prototype.typeCheckPropertySignature = function (t, n) {
        this.typeCheckVariableDeclaratorOrParameterOrEnumElement(
          t,
          e.sentinelEmptyArray,
          t.propertyName,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.typeCheckMemberVariableDeclaration = function (t, n) {
        this.typeCheckVariableDeclaratorOrParameterOrEnumElement(
          t,
          t.modifiers,
          t.variableDeclarator.propertyName,
          e.ASTHelpers.getType(t),
          t.variableDeclarator.equalsValueClause,
          n
        );
      }),
      (i.prototype.typeCheckVariableDeclarator = function (t, n) {
        this.typeCheckVariableDeclaratorOrParameterOrEnumElement(
          t,
          e.ASTHelpers.getVariableDeclaratorModifiers(t),
          t.propertyName,
          e.ASTHelpers.getType(t),
          t.equalsValueClause,
          n
        );
      }),
      (i.prototype.typeCheckParameter = function (t, n) {
        this.typeCheckVariableDeclaratorOrParameterOrEnumElement(
          t,
          t.modifiers,
          t.identifier,
          e.ASTHelpers.getType(t),
          t.equalsValueClause,
          n
        );
      }),
      (i.prototype.typeCheckVariableDeclaratorOrParameterOrEnumElement = function (
        t,
        n,
        r,
        i,
        o,
        s
      ) {
        var a = this;
        this.setTypeChecked(t, s);
        var l = null !== i || 243 === t.kind(),
          c = this.getEnclosingDeclForAST(t),
          u = this.semanticInfoChain.getDeclForAST(t),
          p = u.getSymbol(),
          d = this.resolveAndTypeCheckVariableDeclarationTypeExpr(t, r, i, s),
          m = this.resolveAndTypeCheckVariableDeclaratorOrParameterInitExpr(
            t,
            r,
            i,
            o,
            s,
            d
          );
        if (l || o) {
          if (
            (d && d.isAlias() && (d = d.getExportAssignedTypeSymbol()),
            d && 32 === d.kind)
          ) {
            var f = d.getExportAssignedTypeSymbol();
            if (f) d = f;
            else {
              var g = d.getInstanceType();
              g
                ? (d = g)
                : (s.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Tried_to_set_variable_type_to_uninitialized_module_type_0,
                      [d.toString()]
                    )
                  ),
                  (d = null));
            }
          }
          if (((m = this.getInstanceTypeForAssignment(t, m, s)), m && d)) {
            var v = new h(),
              y = this.sourceIsAssignableToTarget(m, d, t, s, v);
            if (!y) {
              var b = this.getEnclosingSymbolForAST(t);
              v.message
                ? s.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode.Cannot_convert_0_to_1_NL_2,
                      [m.toString(b), d.toString(b), v.message]
                    )
                  )
                : s.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode.Cannot_convert_0_to_1,
                      [m.toString(b), d.toString(b)]
                    )
                  );
            }
          }
        } else if (
          243 !== t.kind() &&
          this.compilationSettings.noImplicitAny() &&
          !this.isForInVariableDeclarator(t)
        ) {
          var _ = this.getEnclosingDecl(u);
          if (
            ((_ = _ || c),
            16384 === _.kind || 32768 === _.kind || 2097152 === _.kind)
          )
            s.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Parameter_0_of_1_implicitly_has_an_any_type,
                [r.text(), c.name]
              )
            );
          else if (65536 === _.kind) {
            var w = _.getParentDecl();
            e.hasFlag(w.flags, 8)
              ? e.hasFlag(w.flags, 8) &&
                !e.hasFlag(_.flags, 2) &&
                s.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Parameter_0_of_1_implicitly_has_an_any_type,
                    [r.text(), c.name]
                  )
                )
              : s.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Parameter_0_of_1_implicitly_has_an_any_type,
                    [r.text(), c.name]
                  )
                );
          } else
            4096 !== u.kind || p.getContainer().isNamedTypeSymbol()
              ? 268435456 !== _.kind &&
                (e.hasFlag(_.flags, 8)
                  ? e.hasFlag(_.flags, 8) &&
                    !e.hasModifier(n, 2) &&
                    s.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Variable_0_implicitly_has_an_any_type,
                        [r.text()]
                      )
                    )
                  : s.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Variable_0_implicitly_has_an_any_type,
                        [r.text()]
                      )
                    ))
              : s.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Member_0_of_object_type_implicitly_has_an_any_type,
                    [r.text()]
                  )
                );
        }
        if (o && 242 === t.kind()) {
          var S = c.getSignatureSymbol();
          S &&
            !S.isDefinition() &&
            s.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Default_arguments_are_only_allowed_in_implementation
              )
            );
        }
        2048 === p.kind ||
          (4096 === p.kind && !p.getContainer().isNamedTypeSymbol()) ||
          this.checkSymbolPrivacy(p, p.type, function (e) {
            return a.variablePrivacyErrorReporter(t, p, e, s);
          }),
          ((4096 !== p.kind && 67108864 !== p.kind) ||
            p.anyDeclHasFlag(8388608)) &&
            this.checkNameForCompilerGeneratedDeclarationCollision(t, !0, r, s);
      }),
      (i.prototype.isForInVariableDeclarator = function (e) {
        return (
          225 === e.kind() &&
          e.parent &&
          e.parent.parent &&
          e.parent.parent.parent &&
          2 === e.parent.kind() &&
          224 === e.parent.parent.kind() &&
          155 === e.parent.parent.parent.kind() &&
          e.parent.parent.parent.variableDeclaration === e.parent.parent
        );
      }),
      (i.prototype.checkSuperCaptureVariableCollides = function (t, n, r) {
        var i = this.getEnclosingDeclForAST(t),
          o = this.getContextualClassSymbolForEnclosingDecl(t, i);
        if (o && !o.anyDeclHasFlag(8)) {
          if (242 === t.kind()) {
            var s = this.getASTForDecl(i);
            if (218 !== s.kind() && 219 !== s.kind()) {
              var a = 65536 === i.kind ? s.block : s.block;
              if (!a) return;
            }
          }
          this.resolveDeclaredSymbol(o, r);
          var l = o.getExtendedTypes();
          l.length &&
            r.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                n
                  ? e.DiagnosticCode
                      .Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference
                  : e.DiagnosticCode
                      .Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference
              )
            );
        }
      }),
      (i.prototype.checkThisCaptureVariableCollides = function (t, n, r) {
        if (n) {
          var i = this.semanticInfoChain.getDeclForAST(t);
          if (e.hasFlag(i.flags, 8)) return;
        }
        var o = this.getEnclosingDeclForAST(t),
          s = e.ASTHelpers.getEnclosingModuleDeclaration(t);
        e.ASTHelpers.isAnyNameOfModule(s, t) &&
          (o = this.getEnclosingDeclForAST(s));
        for (var a = o.getParentPath(), l = a.length - 1; l >= 0; l--) {
          var i = a[l],
            c = i.kind;
          if (
            !(
              (131072 === c && e.hasFlag(i.flags, 8192)) ||
              (16384 !== c &&
                65536 !== c &&
                32768 !== c &&
                262144 !== c &&
                524288 !== c &&
                131072 !== c &&
                8 !== c &&
                4 !== c &&
                32 !== c &&
                1 !== c)
            )
          ) {
            e.hasFlag(i.flags, 262144) &&
              r.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  n
                    ? e.DiagnosticCode
                        .Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference
                    : e.DiagnosticCode
                        .Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference
                )
              );
            break;
          }
        }
      }),
      (i.prototype.postTypeCheckVariableDeclaratorOrParameter = function (
        e,
        t
      ) {
        this.checkThisCaptureVariableCollides(e, !0, t);
      }),
      (i.prototype.resolveTypeParameterDeclaration = function (e, t) {
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol();
        return (
          this.resolveFirstTypeParameterDeclaration(r, t),
          r.isResolved &&
            this.canTypeCheckAST(e, t) &&
            this.typeCheckTypeParameterDeclaration(e, t),
          r
        );
      }),
      (i.prototype.resolveFirstTypeParameterDeclaration = function (e, t) {
        var n = e.getDeclarations()[0],
          r = this.semanticInfoChain.getASTForDecl(n);
        if (!e.isResolved && !e.inResolution) {
          if ((e.startResolving(), r.constraint)) {
            var i = this.resolveTypeReference(r.constraint.type, t);
            i && e.setConstraint(i);
          }
          e.setResolved();
        }
      }),
      (i.prototype.typeCheckTypeParameterDeclaration = function (t, n) {
        this.setTypeChecked(t, n);
        var r = this.resolveAST(t.constraint, !1, n);
        if (r) {
          for (
            var i = t.parent, o = [], s = 0;
            s < i.nonSeparatorCount();
            s++
          ) {
            var a = i.nonSeparatorAt(s),
              l = this.semanticInfoChain.getDeclForAST(a),
              c = this.semanticInfoChain.getSymbolForDecl(l);
            o[c.pullSymbolID] = c;
          }
          r.wrapsSomeTypeParameter(o) &&
            this.semanticInfoChain.addDiagnosticFromAST(
              t,
              e.DiagnosticCode
                .Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list
            );
        }
      }),
      (i.prototype.resolveConstraint = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.setTypeChecked(e, t),
          this.resolveTypeReference(e.type, t)
        );
      }),
      (i.prototype.resolveFunctionBodyReturnTypes = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = this,
          c = [],
          u = [s],
          p = function (e, t) {
            var n = !0;
            switch (e.kind()) {
              case 129:
              case 219:
              case 218:
              case 222:
                n = !1;
                break;
              case 150:
                var r = e;
                s.setFlag(4194304),
                  c.push({
                    expression: r.expression,
                    enclosingDecl: u[u.length - 1],
                  }),
                  (n = !1);
                break;
              case 236:
              case 163:
                u[u.length] = l.semanticInfoChain.getDeclForAST(e);
            }
            return (t.options.goChildren = n), e;
          },
          d = function (e, t) {
            switch (e.kind()) {
              case 236:
              case 163:
                u.length--;
            }
            return (t.options.goChildren = !0), e;
          };
        if (
          (n
            ? e.getAstWalkerFactory().walk(n, p, d)
            : (c.push({ expression: r, enclosingDecl: s }), s.setFlag(4194304)),
          c.length)
        ) {
          for (var m = [], f = [], g = 0; g < c.length; g++) {
            var v = c[g].expression;
            if (v) {
              var y = this.resolveAST(v, o, a).type;
              if (y.isError()) return (i.returnType = y), void 0;
              150 === v.parent.kind() && this.setSymbolForAST(v.parent, y, a),
                m.push(y),
                f.push(v);
            }
          }
          if (m.length) {
            var b = {
                getLength: function () {
                  return m.length;
                },
                getTypeAtIndex: function (e) {
                  return m[e].type;
                },
              },
              _ = this.findBestCommonType(b, a, new h()),
              y = _,
              v = f[m.indexOf(y)],
              w = this.semanticInfoChain.getDeclForAST(t),
              S = w.getSymbol();
            if (y) {
              var T = y,
                k = y.widenedType(this, v, a);
              if (
                ((i.returnType = k),
                e.ArrayUtilities.contains(m, _) ||
                  a.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Could_not_find_the_best_common_type_of_types_of_all_return_statement_expressions
                    )
                  ),
                this.compilationSettings.noImplicitAny() &&
                  T !== k &&
                  k === this.semanticInfoChain.anyTypeSymbol)
              ) {
                var x = s.name;
                "" === x && (x = s.getFunctionExpressionName()),
                  "" != x
                    ? a.postDiagnostic(
                        this.semanticInfoChain.diagnosticFromAST(
                          t,
                          e.DiagnosticCode
                            ._0_which_lacks_return_type_annotation_implicitly_has_an_any_return_type,
                          [x]
                        )
                      )
                    : a.postDiagnostic(
                        this.semanticInfoChain.diagnosticFromAST(
                          t,
                          e.DiagnosticCode
                            .Function_expression_which_lacks_return_type_annotation_implicitly_has_an_any_return_type
                        )
                      );
              }
            }
            !S.type && S.isAccessor() && (S.type = i.returnType);
          } else i.returnType = this.semanticInfoChain.voidTypeSymbol;
        } else i.returnType = this.semanticInfoChain.voidTypeSymbol;
      }),
      (i.prototype.typeCheckConstructorDeclaration = function (t, n) {
        var r = this;
        this.setTypeChecked(t, n);
        for (
          var i = this.semanticInfoChain.getDeclForAST(t), o = 0;
          o < t.callSignature.parameterList.parameters.nonSeparatorCount();
          o++
        )
          this.resolveAST(
            t.callSignature.parameterList.parameters.nonSeparatorAt(o),
            !1,
            n
          );
        if (
          (this.resolveAST(t.block, !1, n),
          i.getSignatureSymbol() &&
            i.getSignatureSymbol().isDefinition() &&
            this.enclosingClassIsDerived(i.getParentDecl()))
        )
          if (this.constructorHasSuperCall(t)) {
            if (this.superCallMustBeFirstStatementInConstructor(i)) {
              var s = this.getFirstStatementOfBlockOrNull(t.block);
              (s && this.isSuperInvocationExpressionStatement(s)) ||
                n.postDiagnostic(
                  new e.Diagnostic(
                    t.fileName(),
                    this.semanticInfoChain.lineMap(t.fileName()),
                    t.start(),
                    "constructor".length,
                    e.DiagnosticCode.A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties
                  )
                );
            }
          } else
            n.postDiagnostic(
              new e.Diagnostic(
                t.fileName(),
                this.semanticInfoChain.lineMap(t.fileName()),
                t.start(),
                "constructor".length,
                e.DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call
              )
            );
        this.validateVariableDeclarationGroups(i, n),
          this.checkFunctionTypePrivacy(
            t,
            !1,
            null,
            e.ASTHelpers.parametersFromParameterList(
              t.callSignature.parameterList
            ),
            null,
            t.block,
            n
          ),
          this.typeCheckCallBacks.push(function (e) {
            r.typeCheckFunctionOverloads(t, e);
          });
      }),
      (i.prototype.constructorHasSuperCall = function (t) {
        var n = this;
        if (t.block) {
          var r = !1,
            i = function (e, t) {
              n.isSuperInvocationExpression(e) &&
                ((r = !0), (t.options.stopWalking = !0));
            };
          return e.getAstWalkerFactory().walk(t.block, i), r;
        }
        return !1;
      }),
      (i.prototype.typeCheckFunctionExpression = function (t, n, r) {
        this.typeCheckAnyFunctionExpression(
          t,
          t.callSignature.typeParameterList,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          t.callSignature.typeAnnotation,
          t.block,
          null,
          n,
          r
        );
      }),
      (i.prototype.typeCheckCallSignature = function (t, n) {
        this.typeCheckAnyFunctionDeclaration(
          t,
          !1,
          null,
          t.typeParameterList,
          t.parameterList,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.typeCheckConstructSignature = function (t, n) {
        this.typeCheckAnyFunctionDeclaration(
          t,
          !1,
          null,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.typeCheckMethodSignature = function (t, n) {
        this.typeCheckAnyFunctionDeclaration(
          t,
          !1,
          t.propertyName,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.typeCheckMemberFunctionDeclaration = function (t, n) {
        this.typeCheckAnyFunctionDeclaration(
          t,
          e.hasModifier(t.modifiers, 16),
          t.propertyName,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          t.block,
          n
        );
      }),
      (i.prototype.containsSingleThrowStatement = function (e) {
        return (
          null !== e &&
          1 === e.statements.childCount() &&
          157 === e.statements.childAt(0).kind()
        );
      }),
      (i.prototype.typeCheckAnyFunctionDeclaration = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = this;
        this.setTypeChecked(t, l);
        var u = this.semanticInfoChain.getDeclForAST(t);
        if (i)
          for (var p = 0; p < i.typeParameters.nonSeparatorCount(); p++)
            this.resolveTypeParameterDeclaration(
              i.typeParameters.nonSeparatorAt(p),
              l
            );
        this.resolveAST(o, !1, l), this.resolveAST(a, !1, l);
        this.getEnclosingDecl(u);
        this.resolveReturnTypeAnnotationOfFunctionDeclaration(t, s, l),
          this.validateVariableDeclarationGroups(u, l),
          this.checkFunctionTypePrivacy(
            t,
            n,
            i,
            e.ASTHelpers.parametersFromParameterList(o),
            s,
            a,
            l
          ),
          this.checkThatNonVoidFunctionHasReturnExpressionOrThrowStatement(
            u,
            s,
            u.getSignatureSymbol().returnType,
            a,
            l
          ),
          16384 === u.kind &&
            this.checkNameForCompilerGeneratedDeclarationCollision(t, !0, r, l),
          this.typeCheckCallBacks.push(function (e) {
            c.typeCheckFunctionOverloads(t, e);
          });
      }),
      (i.prototype.checkThatNonVoidFunctionHasReturnExpressionOrThrowStatement = function (
        t,
        n,
        r,
        i,
        o
      ) {
        var s = e.hasFlag(t.flags, 4194304);
        if (null !== i && null !== n && !s) {
          var a =
            this.isAnyOrEquivalent(r) ||
            r === this.semanticInfoChain.voidTypeSymbol;
          if (!a && !this.containsSingleThrowStatement(i)) {
            {
              t.getDisplayName() ||
                e.getLocalizedText(e.DiagnosticCode.expression, null);
            }
            o.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                n,
                e.DiagnosticCode
                  .Function_declared_a_non_void_return_type_but_has_no_return_expression
              )
            );
          }
        }
      }),
      (i.prototype.typeCheckIndexSignature = function (t, n) {
        var r = this;
        this.setTypeChecked(t, n);
        var i = this.semanticInfoChain.getDeclForAST(t);
        this.resolveAST(t.parameter, !1, n);
        this.getEnclosingDecl(i);
        this.resolveReturnTypeAnnotationOfFunctionDeclaration(
          t,
          e.ASTHelpers.getType(t),
          n
        ),
          this.validateVariableDeclarationGroups(i, n),
          this.checkFunctionTypePrivacy(
            t,
            !1,
            null,
            e.ASTHelpers.parametersFromParameter(t.parameter),
            e.ASTHelpers.getType(t),
            null,
            n
          );
        var o = i.getSignatureSymbol();
        this.typeCheckCallBacks.push(function (n) {
          var s = i.getSignatureSymbol().getContainer(),
            a = r.getBothKindsOfIndexSignaturesExcludingAugmentedType(s, n),
            l = a.stringSignature,
            c = a.numericSignature,
            u = c === o;
          if (
            c &&
            l &&
            (u ||
              l.getDeclarations()[0].getParentDecl() !==
                c.getDeclarations()[0].getParentDecl())
          ) {
            var p = new h();
            if (
              !r.sourceIsAssignableToTarget(c.returnType, l.returnType, t, n, p)
            ) {
              var d = r.getEnclosingSymbolForAST(t);
              p.message
                ? n.postDiagnostic(
                    r.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1_NL_2,
                      [
                        c.returnType.toString(d),
                        l.returnType.toString(d),
                        p.message,
                      ]
                    )
                  )
                : n.postDiagnostic(
                    r.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1,
                      [c.returnType.toString(d), l.returnType.toString(d)]
                    )
                  );
            }
          }
          for (
            var m = s.type.getAllMembers(536869887, 0), f = 0;
            f < m.length;
            f++
          ) {
            var g = m[f],
              v = g.name;
            if (
              (v || (4096 === g.kind && "" === v)) &&
              (m[f].isResolved || r.resolveDeclaredSymbol(m[f], n),
              s !== m[f].getContainer())
            ) {
              var y = e.PullHelpers.isNameNumeric(v),
                b = u === y,
                _ = !c;
              if (b || _) {
                var p = new h();
                r.sourceIsAssignableToTarget(
                  m[f].type,
                  o.returnType,
                  t,
                  n,
                  p,
                  !1
                ) ||
                  r.reportErrorThatMemberIsNotSubtypeOfIndexer(
                    m[f],
                    o,
                    t,
                    n,
                    p
                  );
              }
            }
          }
        });
      }),
      (i.prototype.postTypeCheckFunctionDeclaration = function (e, t) {
        this.checkThisCaptureVariableCollides(e, !0, t);
      }),
      (i.prototype.resolveReturnTypeAnnotationOfFunctionDeclaration = function (
        t,
        n,
        r
      ) {
        var i = null;
        if (n) {
          {
            this.semanticInfoChain.getDeclForAST(t);
          }
          if ((i = this.resolveTypeReference(n, r))) {
            var o = 137 === t.kind() || 143 === t.kind();
            o &&
              i === this.semanticInfoChain.voidTypeSymbol &&
              r.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Constructors_cannot_have_a_return_type_of_void
                )
              );
          } else
            r.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                n,
                e.DiagnosticCode.Cannot_resolve_return_type_reference
              )
            );
        }
        return i;
      }),
      (i.prototype.resolveMemberFunctionDeclaration = function (t, n) {
        return this.resolveFunctionDeclaration(
          t,
          e.hasModifier(t.modifiers, 16),
          t.propertyName,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          t.block,
          n
        );
      }),
      (i.prototype.resolveCallSignature = function (t, n) {
        return this.resolveFunctionDeclaration(
          t,
          !1,
          null,
          t.typeParameterList,
          t.parameterList,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.resolveConstructSignature = function (t, n) {
        return this.resolveFunctionDeclaration(
          t,
          !1,
          null,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.resolveMethodSignature = function (t, n) {
        return this.resolveFunctionDeclaration(
          t,
          !1,
          t.propertyName,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          null,
          n
        );
      }),
      (i.prototype.resolveAnyFunctionDeclaration = function (t, n) {
        return this.resolveFunctionDeclaration(
          t,
          e.hasModifier(t.modifiers, 16),
          t.identifier,
          t.callSignature.typeParameterList,
          t.callSignature.parameterList,
          e.ASTHelpers.getType(t),
          t.block,
          n
        );
      }),
      (i.prototype.resolveFunctionExpression = function (t, n, r) {
        return this.resolveAnyFunctionExpression(
          t,
          t.callSignature.typeParameterList,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          e.ASTHelpers.getType(t),
          t.block,
          null,
          n,
          r
        );
      }),
      (i.prototype.resolveSimpleArrowFunctionExpression = function (t, n, r) {
        return this.resolveAnyFunctionExpression(
          t,
          null,
          e.ASTHelpers.parametersFromIdentifier(t.identifier),
          null,
          t.block,
          t.expression,
          n,
          r
        );
      }),
      (i.prototype.resolveParenthesizedArrowFunctionExpression = function (
        t,
        n,
        r
      ) {
        return this.resolveAnyFunctionExpression(
          t,
          t.callSignature.typeParameterList,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          e.ASTHelpers.getType(t),
          t.block,
          t.expression,
          n,
          r
        );
      }),
      (i.prototype.getEnclosingClassDeclaration = function (e) {
        for (; e; ) {
          if (131 === e.kind()) return e;
          e = e.parent;
        }
        return null;
      }),
      (i.prototype.resolveConstructorDeclaration = function (e, t) {
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol(),
          i = n.getSignatureSymbol(),
          o = !1;
        if (i) {
          if (i.isResolved)
            return (
              this.canTypeCheckAST(e, t) &&
                this.typeCheckConstructorDeclaration(e, t),
              r
            );
          if (!i.inResolution) {
            var s = this.getEnclosingClassDeclaration(e);
            if (s) {
              var a = this.semanticInfoChain.getDeclForAST(s),
                l = a.getSymbol();
              l.isResolved ||
                l.inResolution ||
                this.resolveDeclaredSymbol(l, t);
            }
          }
          var c = r && r.type;
          if (i.inResolution)
            return (
              (i.returnType = this.semanticInfoChain.anyTypeSymbol),
              r &&
                (r.setUnresolved(),
                r.type === this.semanticInfoChain.anyTypeSymbol &&
                  (r.type = c)),
              i.setResolved(),
              r
            );
          r && r.startResolving(), i.startResolving();
          var u = t.inTypeCheck;
          t.inTypeCheck = !1;
          for (
            var p = 0;
            p < e.callSignature.parameterList.parameters.nonSeparatorCount();
            p++
          )
            this.resolveParameter(
              e.callSignature.parameterList.parameters.nonSeparatorAt(p),
              t
            );
          (t.inTypeCheck = u),
            i.isGeneric() && r && r.type.setHasGenericSignature(),
            o ||
              (r &&
                (r.setUnresolved(),
                r.type === this.semanticInfoChain.anyTypeSymbol &&
                  (r.type = c)),
              i.setResolved());
        }
        return (
          r && this.resolveOtherDeclarations(e, t),
          this.canTypeCheckAST(e, t) &&
            this.typeCheckConstructorDeclaration(e, t),
          r
        );
      }),
      (i.prototype.resolveIndexMemberDeclaration = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.setTypeChecked(e, t),
          this.resolveIndexSignature(e.indexSignature, t)
        );
      }),
      (i.prototype.resolveIndexSignature = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol(),
          o = r.getSignatureSymbol(),
          s = !1;
        if (o) {
          if (o.isResolved)
            return (
              this.canTypeCheckAST(t, n) && this.typeCheckIndexSignature(t, n),
              i
            );
          var a = i && i.type;
          if (o.inResolution) {
            if (t.typeAnnotation) {
              var l = this.resolveTypeReference(e.ASTHelpers.getType(t), n);
              l
                ? (o.returnType = l)
                : (n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      e.ASTHelpers.getType(t),
                      e.DiagnosticCode.Cannot_resolve_return_type_reference
                    )
                  ),
                  (o.returnType = this.getNewErrorTypeSymbol()),
                  (s = !0));
            } else o.returnType = this.semanticInfoChain.anyTypeSymbol;
            return (
              i &&
                (i.setUnresolved(),
                i.type === this.semanticInfoChain.anyTypeSymbol &&
                  (i.type = a)),
              o.setResolved(),
              i
            );
          }
          if ((i && i.startResolving(), o.startResolving(), t.parameter)) {
            var c = n.inTypeCheck;
            (n.inTypeCheck = !1),
              this.resolveParameter(t.parameter, n),
              (n.inTypeCheck = c);
          }
          t.typeAnnotation
            ? ((l = this.resolveReturnTypeAnnotationOfFunctionDeclaration(
                t,
                e.ASTHelpers.getType(t),
                n
              )),
              l
                ? (o.returnType = l)
                : ((o.returnType = this.getNewErrorTypeSymbol()), (s = !0)))
            : (o.returnType = this.semanticInfoChain.anyTypeSymbol),
            s ||
              (i &&
                (i.setUnresolved(),
                i.type === this.semanticInfoChain.anyTypeSymbol &&
                  (i.type = a)),
              o.setResolved());
        }
        return (
          i && this.resolveOtherDeclarations(t, n),
          this.canTypeCheckAST(t, n) && this.typeCheckIndexSignature(t, n),
          i
        );
      }),
      (i.prototype.resolveFunctionDeclaration = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = this.semanticInfoChain.getDeclForAST(t),
          u = c.getSymbol(),
          p = c.getSignatureSymbol(),
          h = !1,
          d = 143 === t.kind();
        if (p) {
          if (p.isResolved)
            return (
              this.canTypeCheckAST(t, l) &&
                this.typeCheckAnyFunctionDeclaration(t, n, r, i, o, s, a, l),
              u
            );
          if (d && !p.inResolution) {
            var m = this.getEnclosingClassDeclaration(t);
            if (m) {
              var f = this.semanticInfoChain.getDeclForAST(m),
                g = f.getSymbol();
              g.isResolved ||
                g.inResolution ||
                this.resolveDeclaredSymbol(g, l);
            }
          }
          var v = u && u.type;
          if (p.inResolution) {
            if (s) {
              var y = this.resolveTypeReference(s, l);
              y
                ? ((p.returnType = y),
                  d &&
                    y === this.semanticInfoChain.voidTypeSymbol &&
                    l.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Constructors_cannot_have_a_return_type_of_void
                      )
                    ))
                : (l.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      s,
                      e.DiagnosticCode.Cannot_resolve_return_type_reference
                    )
                  ),
                  (p.returnType = this.getNewErrorTypeSymbol()),
                  (h = !0));
            } else p.returnType = this.semanticInfoChain.anyTypeSymbol;
            return (
              u &&
                (u.setUnresolved(),
                u.type === this.semanticInfoChain.anyTypeSymbol &&
                  (u.type = v)),
              p.setResolved(),
              u
            );
          }
          if ((u && u.startResolving(), p.startResolving(), i))
            for (var b = 0; b < i.typeParameters.nonSeparatorCount(); b++)
              this.resolveTypeParameterDeclaration(
                i.typeParameters.nonSeparatorAt(b),
                l
              );
          if (o) {
            var _ = l.inTypeCheck;
            l.inTypeCheck = !1;
            for (var b = 0; b < o.parameters.nonSeparatorCount(); b++)
              this.resolveParameter(o.parameters.nonSeparatorAt(b), l);
            l.inTypeCheck = _;
          }
          if (s)
            (y = this.resolveReturnTypeAnnotationOfFunctionDeclaration(
              t,
              s,
              l
            )),
              y
                ? (p.returnType = y)
                : ((p.returnType = this.getNewErrorTypeSymbol()), (h = !0));
          else if (2097152 !== c.kind)
            if (e.hasFlag(c.flags, 2048)) {
              p.returnType = this.semanticInfoChain.anyTypeSymbol;
              var w = 0;
              if (e.hasFlag(c.kind, 65536) || e.hasFlag(c.kind, 32768)) {
                var S = c.getParentDecl();
                w = S.flags;
              }
              if (
                this.compilationSettings.noImplicitAny() &&
                (!e.hasFlag(w, 8) ||
                  (e.hasFlag(w, 8) && !e.hasFlag(c.flags, 2)))
              ) {
                var T = r;
                T
                  ? l.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          ._0_which_lacks_return_type_annotation_implicitly_has_an_any_return_type,
                        [T.text()]
                      )
                    )
                  : l.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Lambda_Function_which_lacks_return_type_annotation_implicitly_has_an_any_return_type
                      )
                    );
              }
            } else this.resolveFunctionBodyReturnTypes(t, a, null, p, !1, c, l);
          else
            2097152 === c.kind &&
              ((p.returnType = this.semanticInfoChain.anyTypeSymbol),
              this.compilationSettings.noImplicitAny() &&
                l.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Constructor_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type
                  )
                ));
          h ||
            (u &&
              (u.setUnresolved(),
              u.type === this.semanticInfoChain.anyTypeSymbol && (u.type = v)),
            p.setResolved());
        }
        return (
          u && this.resolveOtherDeclarations(t, l),
          this.canTypeCheckAST(t, l) &&
            this.typeCheckAnyFunctionDeclaration(t, n, r, i, o, s, a, l),
          u
        );
      }),
      (i.prototype.resolveGetterReturnTypeAnnotation = function (t, n, r) {
        return t && t.typeAnnotation
          ? this.resolveTypeReference(e.ASTHelpers.getType(t), r)
          : null;
      }),
      (i.prototype.resolveSetterArgumentTypeAnnotation = function (t, n, r) {
        if (
          t &&
          t.parameterList &&
          t.parameterList.parameters.nonSeparatorCount() > 0
        ) {
          var i = t.parameterList.parameters.nonSeparatorAt(0);
          return this.resolveTypeReference(e.ASTHelpers.getType(i), r);
        }
        return null;
      }),
      (i.prototype.resolveAccessorDeclaration = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        if (i.inResolution)
          return (
            (i.type = this.semanticInfoChain.anyTypeSymbol), i.setResolved(), i
          );
        if (i.isResolved)
          i.type || (i.type = this.semanticInfoChain.anyTypeSymbol);
        else {
          var o = i.getGetter(),
            s = o ? o.getDeclarations()[0].ast() : null,
            a = null !== o,
            l = i.getSetter(),
            c = l ? l.getDeclarations()[0].ast() : null,
            u = null !== l,
            p = this.resolveGetterReturnTypeAnnotation(s, r, n),
            h = null !== p,
            d = this.resolveSetterArgumentTypeAnnotation(c, r, n),
            m = null !== d;
          if (
            (i.startResolving(),
            a &&
              (o = this.resolveGetAccessorDeclaration(
                s,
                s.parameterList,
                e.ASTHelpers.getType(s),
                s.block,
                d,
                n
              )),
            u &&
              (l = this.resolveSetAccessorDeclaration(c, c.parameterList, n)),
            a && u)
          ) {
            var f = l.type.getCallSignatures()[0],
              g = f.parameters,
              v = g.length > 0,
              y = o.type.getCallSignatures()[0],
              b = v ? g[0].type : null,
              _ = y.returnType;
            m && !h
              ? ((_ = b), (y.returnType = b))
              : ((h && !m) || (!h && !m)) && ((b = _), v && (g[0].type = _)),
              (i.type = this.typesAreIdentical(b, _, n)
                ? _
                : this.getNewErrorTypeSymbol());
          } else if (u) {
            var f = l.type.getCallSignatures()[0],
              g = f.parameters,
              v = g.length > 0;
            i.type = v ? g[0].type : this.semanticInfoChain.anyTypeSymbol;
          } else {
            var y = o.type.getCallSignatures()[0];
            i.type = y.returnType;
          }
          i.setResolved();
        }
        return (
          this.canTypeCheckAST(t, n) && this.typeCheckAccessorDeclaration(t, n),
          i
        );
      }),
      (i.prototype.typeCheckAccessorDeclaration = function (e, t) {
        this.setTypeChecked(e, t);
        var n = this.semanticInfoChain.getDeclForAST(e),
          r = n.getSymbol(),
          i = r.getGetter(),
          o = (r.getSetter(), 139 === e.kind());
        if (o) {
          var s = e;
          t.pushNewContextualType(i.type),
            this.typeCheckGetAccessorDeclaration(s, t),
            t.popAnyContextualType();
        } else {
          var a = e;
          this.typeCheckSetAccessorDeclaration(a, t);
        }
      }),
      (i.prototype.resolveGetAccessorDeclaration = function (e, t, n, r, i, o) {
        var s = this.semanticInfoChain.getDeclForAST(e),
          a = s.getSymbol(),
          l = a.getGetter(),
          c = l.type,
          u = c.getCallSignatures()[0],
          p = !1;
        if (u) {
          if (u.isResolved) return l;
          if (u.inResolution)
            return (
              (u.returnType = this.semanticInfoChain.anyTypeSymbol),
              u.setResolved(),
              l
            );
          if ((u.startResolving(), n)) {
            var h = this.resolveReturnTypeAnnotationOfFunctionDeclaration(
              e,
              n,
              o
            );
            h
              ? (u.returnType = h)
              : ((u.returnType = this.getNewErrorTypeSymbol()), (p = !0));
          } else
            i
              ? (u.returnType = i)
              : this.resolveFunctionBodyReturnTypes(e, r, null, u, !1, s, o);
          p || u.setResolved();
        }
        return l;
      }),
      (i.prototype.checkIfGetterAndSetterTypeMatch = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          o = r.getSymbol(),
          s = o.getGetter(),
          a = o.getSetter();
        if (s && a) {
          var l = s.getDeclarations()[0].ast(),
            c = a.getDeclarations()[0].ast();
          if (l.typeAnnotation && i.hasSetAccessorParameterTypeAnnotation(c)) {
            var u = a.type.getCallSignatures()[0],
              p = u.parameters,
              s = o.getGetter(),
              h = s.type.getCallSignatures()[0],
              d = p[0].type,
              m = h.returnType;
            this.typesAreIdentical(d, m, n) ||
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.get_and_set_accessor_must_have_the_same_type
                )
              );
          }
        }
      }),
      (i.prototype.typeCheckGetAccessorDeclaration = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          i = r.getSymbol();
        this.resolveReturnTypeAnnotationOfFunctionDeclaration(
          t,
          e.ASTHelpers.getType(t),
          n
        ),
          this.resolveAST(t.block, !1, n),
          this.validateVariableDeclarationGroups(r, n);
        var o = (this.getEnclosingDecl(r), 0 !== (4196352 & r.flags)),
          s = t.propertyName;
        o ||
          this.containsSingleThrowStatement(t.block) ||
          n.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              s,
              e.DiagnosticCode.Getters_must_return_a_value
            )
          );
        var a = i.getSetter();
        if (a) {
          var l = a.getDeclarations()[0],
            c = e.hasFlag(l.flags, 2),
            u = e.hasModifier(t.modifiers, 2);
          u !== c &&
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                s,
                e.DiagnosticCode
                  .Getter_and_setter_accessors_do_not_agree_in_visibility
              )
            ),
            this.checkIfGetterAndSetterTypeMatch(t, n);
        }
        this.checkFunctionTypePrivacy(
          t,
          e.hasModifier(t.modifiers, 16),
          null,
          e.ASTHelpers.parametersFromParameterList(t.parameterList),
          e.ASTHelpers.getType(t),
          t.block,
          n
        );
      }),
      (i.hasSetAccessorParameterTypeAnnotation = function (e) {
        return (
          e.parameterList &&
          e.parameterList.parameters.nonSeparatorCount() > 0 &&
          null !== e.parameterList.parameters.nonSeparatorAt(0).typeAnnotation
        );
      }),
      (i.prototype.resolveSetAccessorDeclaration = function (e, t, n) {
        var r = this.semanticInfoChain.getDeclForAST(e),
          i = r.getSymbol(),
          o = i.getSetter(),
          s = (o.type, r.getSignatureSymbol()),
          a = !1;
        if (s) {
          if (s.isResolved) return o;
          if (s.inResolution)
            return (
              (s.returnType = this.semanticInfoChain.voidTypeSymbol),
              s.setResolved(),
              o
            );
          if ((s.startResolving(), t))
            for (var l = 0; l < t.parameters.nonSeparatorCount(); l++)
              this.resolveParameter(t.parameters.nonSeparatorAt(l), n);
          (s.returnType = this.semanticInfoChain.voidTypeSymbol),
            a || s.setResolved();
        }
        return o;
      }),
      (i.prototype.typeCheckSetAccessorDeclaration = function (t, n) {
        var r = this.semanticInfoChain.getDeclForAST(t),
          o = r.getSymbol();
        if (t.parameterList)
          for (
            var s = 0;
            s < t.parameterList.parameters.nonSeparatorCount();
            s++
          )
            this.resolveParameter(
              t.parameterList.parameters.nonSeparatorAt(s),
              n
            );
        this.resolveAST(t.block, !1, n),
          this.validateVariableDeclarationGroups(r, n);
        var a = (0 !== (4196352 & r.flags), o.getGetter()),
          l = t.propertyName;
        if (a) {
          var c = a.getDeclarations()[0],
            u = e.hasFlag(c.flags, 2),
            p = e.hasModifier(t.modifiers, 2);
          u !== p &&
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                l,
                e.DiagnosticCode
                  .Getter_and_setter_accessors_do_not_agree_in_visibility
              )
            ),
            this.checkIfGetterAndSetterTypeMatch(t, n);
        } else if (this.compilationSettings.noImplicitAny()) {
          var h = t;
          i.hasSetAccessorParameterTypeAnnotation(h) ||
            o.type !== this.semanticInfoChain.anyTypeSymbol ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  ._0_which_lacks_get_accessor_and_parameter_type_annotation_on_set_accessor_implicitly_has_an_any_type,
                [h.propertyName.text()]
              )
            );
        }
        this.checkFunctionTypePrivacy(
          t,
          e.hasModifier(t.modifiers, 16),
          null,
          e.ASTHelpers.parametersFromParameterList(t.parameterList),
          null,
          t.block,
          n
        );
      }),
      (i.prototype.resolveList = function (e, t) {
        if (this.canTypeCheckAST(e, t)) {
          this.setTypeChecked(e, t);
          for (var n = 0, r = e.childCount(); r > n; n++)
            this.resolveAST(e.childAt(n), !1, t);
        }
        return this.semanticInfoChain.voidTypeSymbol;
      }),
      (i.prototype.resolveSeparatedList = function (e, t) {
        if (this.canTypeCheckAST(e, t)) {
          this.setTypeChecked(e, t);
          for (var n = 0, r = e.nonSeparatorCount(); r > n; n++)
            this.resolveAST(e.nonSeparatorAt(n), !1, t);
        }
        return this.semanticInfoChain.voidTypeSymbol;
      }),
      (i.prototype.resolveVoidExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.expression, !1, t)),
          this.semanticInfoChain.undefinedTypeSymbol
        );
      }),
      (i.prototype.resolveLogicalOperation = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckLogicalOperation(e, t),
          this.semanticInfoChain.booleanTypeSymbol
        );
      }),
      (i.prototype.typeCheckLogicalOperation = function (t, n) {
        this.setTypeChecked(t, n);
        var r = this.resolveAST(t.left, !1, n).type,
          i = this.resolveAST(t.right, !1, n).type,
          o = new h();
        if (
          !this.sourceIsAssignableToTarget(r, i, t, n, o) &&
          !this.sourceIsAssignableToTarget(i, r, t, n, o)
        ) {
          var s = this.getEnclosingSymbolForAST(t);
          n.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t,
              e.DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,
              [
                e.SyntaxFacts.getText(
                  e.SyntaxFacts.getOperatorTokenFromBinaryExpression(t.kind())
                ),
                r.toString(s),
                i.toString(s),
              ]
            )
          );
        }
      }),
      (i.prototype.resolveLogicalNotExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.operand, !1, t)),
          this.semanticInfoChain.booleanTypeSymbol
        );
      }),
      (i.prototype.resolveUnaryArithmeticOperation = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            this.typeCheckUnaryArithmeticOperation(e, t),
          this.semanticInfoChain.numberTypeSymbol
        );
      }),
      (i.prototype.resolvePostfixUnaryExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            this.typeCheckPostfixUnaryExpression(e, t),
          this.semanticInfoChain.numberTypeSymbol
        );
      }),
      (i.prototype.isAnyOrNumberOrEnum = function (t) {
        return (
          this.isAnyOrEquivalent(t) ||
          t === this.semanticInfoChain.numberTypeSymbol ||
          e.PullHelpers.symbolIsEnum(t)
        );
      }),
      (i.prototype.typeCheckUnaryArithmeticOperation = function (t, n) {
        this.setTypeChecked(t, n);
        var r = t.kind(),
          i = this.resolveAST(t.operand, !1, n);
        if (164 !== r && 165 != r && 166 != r) {
          e.Debug.assert(168 === r || 169 === r);
          var o = i.type;
          this.isAnyOrNumberOrEnum(o) ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.operand,
                e.DiagnosticCode
                  .The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type_any_number_or_an_enum_type
              )
            ),
            this.isReference(t.operand, i) ||
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t.operand,
                  e.DiagnosticCode
                    .The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer
                )
              );
        }
      }),
      (i.prototype.typeCheckPostfixUnaryExpression = function (t, n) {
        this.setTypeChecked(t, n);
        var r = t.kind(),
          i = this.resolveAST(t.operand, !1, n);
        e.Debug.assert(210 === r || 211 === r);
        var o = i.type;
        this.isAnyOrNumberOrEnum(o) ||
          n.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t.operand,
              e.DiagnosticCode
                .The_type_of_a_unary_arithmetic_operation_operand_must_be_of_type_any_number_or_an_enum_type
            )
          ),
          this.isReference(t.operand, i) ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.operand,
                e.DiagnosticCode
                  .The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer
              )
            );
      }),
      (i.prototype.resolveBinaryArithmeticExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            this.typeCheckBinaryArithmeticExpression(e, t),
          this.semanticInfoChain.numberTypeSymbol
        );
      }),
      (i.prototype.typeCheckBinaryArithmeticExpression = function (t, n) {
        this.setTypeChecked(t, n);
        var r = this.resolveAST(t.left, !1, n),
          i = r.type,
          o = this.resolveAST(t.right, !1, n).type;
        (i === this.semanticInfoChain.nullTypeSymbol ||
          i === this.semanticInfoChain.undefinedTypeSymbol) &&
          (i = o),
          (o === this.semanticInfoChain.nullTypeSymbol ||
            o === this.semanticInfoChain.undefinedTypeSymbol) &&
            (o = i);
        var s = this.isAnyOrNumberOrEnum(i),
          a = this.isAnyOrNumberOrEnum(o);
        if (
          (a ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.right,
                e.DiagnosticCode
                  .The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type
              )
            ),
          s ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.left,
                e.DiagnosticCode
                  .The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type
              )
            ),
          s && a)
        )
          switch (t.kind()) {
            case 183:
            case 184:
            case 185:
            case 176:
            case 177:
            case 178:
            case 179:
            case 182:
            case 180:
            case 181:
              this.isReference(t.left, r) ||
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t.left,
                    e.DiagnosticCode
                      .Invalid_left_hand_side_of_assignment_expression
                  )
                ),
                this.checkAssignability(t.left, o, i, n);
          }
      }),
      (i.prototype.resolveTypeOfExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.expression, !1, t)),
          this.semanticInfoChain.stringTypeSymbol
        );
      }),
      (i.prototype.resolveThrowStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.expression, !1, t)),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.resolveDeleteExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.expression, !1, t)),
          this.semanticInfoChain.booleanTypeSymbol
        );
      }),
      (i.prototype.resolveInstanceOfExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            this.typeCheckInstanceOfExpression(e, t),
          this.semanticInfoChain.booleanTypeSymbol
        );
      }),
      (i.prototype.typeCheckInstanceOfExpression = function (t, n) {
        this.setTypeChecked(t, n);
        var r = this.resolveAST(t.left, !1, n).type,
          i = this.resolveAST(t.right, !1, n).type,
          o =
            (this.getEnclosingSymbolForAST(t),
            this.isAnyOrEquivalent(r) || r.isObject() || r.isTypeParameter()),
          s =
            this.isAnyOrEquivalent(i) ||
            this.typeIsAssignableToFunction(i, t, n);
        o ||
          n.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t.left,
              e.DiagnosticCode
                .The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter
            )
          ),
          s ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.right,
                e.DiagnosticCode
                  .The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type
              )
            );
      }),
      (i.prototype.resolveCommaExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.left, !1, t)),
          this.resolveAST(e.right, !1, t).type
        );
      }),
      (i.prototype.resolveInExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckInExpression(e, t),
          this.semanticInfoChain.booleanTypeSymbol
        );
      }),
      (i.prototype.typeCheckInExpression = function (t, n) {
        this.setTypeChecked(t, n);
        var r = this.resolveAST(t.left, !1, n).type,
          i = this.resolveAST(t.right, !1, n).type,
          o =
            this.isAnyOrEquivalent(r.type) ||
            r.type === this.semanticInfoChain.stringTypeSymbol ||
            r.type === this.semanticInfoChain.numberTypeSymbol,
          s = this.isAnyOrEquivalent(i) || i.isObject() || i.isTypeParameter();
        o ||
          n.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t.left,
              e.DiagnosticCode
                .The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number
            )
          ),
          s ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.right,
                e.DiagnosticCode
                  .The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter
              )
            );
      }),
      (i.prototype.resolveForStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t),
            this.resolveAST(e.variableDeclaration, !1, t),
            this.resolveAST(e.initializer, !1, t),
            this.resolveAST(e.condition, !1, t),
            this.resolveAST(e.incrementor, !1, t),
            this.resolveAST(e.statement, !1, t)),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.resolveForInStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckForInStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckForInStatement = function (t, n) {
        if ((this.setTypeChecked(t, n), t.variableDeclaration)) {
          var r = t.variableDeclaration;
          if (1 === r.declarators.nonSeparatorCount()) {
            var i = r.declarators.nonSeparatorAt(0);
            i.typeAnnotation &&
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  r,
                  e.DiagnosticCode
                    .Variable_declarations_of_a_for_statement_cannot_use_a_type_annotation
                )
              );
          }
        } else {
          var o = this.resolveAST(t.left, !1, n),
            s =
              o.type === this.semanticInfoChain.stringTypeSymbol ||
              this.isAnyOrEquivalent(o.type);
          s ||
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.left,
                e.DiagnosticCode
                  .Variable_declarations_of_a_for_statement_must_be_of_types_string_or_any
              )
            );
        }
        var a = this.resolveAST(t.expression, !1, n).type,
          l =
            a &&
            (this.isAnyOrEquivalent(a) || a.isObject() || a.isTypeParameter());
        l ||
          n.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t.expression,
              e.DiagnosticCode
                .The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter
            )
          ),
          this.resolveAST(t.statement, !1, n);
      }),
      (i.prototype.resolveWhileStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckWhileStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckWhileStatement = function (e, t) {
        this.setTypeChecked(e, t),
          this.resolveAST(e.condition, !1, t),
          this.resolveAST(e.statement, !1, t);
      }),
      (i.prototype.resolveDoStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckDoStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckDoStatement = function (e, t) {
        this.setTypeChecked(e, t),
          this.resolveAST(e.condition, !1, t),
          this.resolveAST(e.statement, !1, t);
      }),
      (i.prototype.resolveIfStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckIfStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckIfStatement = function (e, t) {
        this.setTypeChecked(e, t),
          this.resolveAST(e.condition, !1, t),
          this.resolveAST(e.statement, !1, t),
          this.resolveAST(e.elseClause, !1, t);
      }),
      (i.prototype.resolveElseClause = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckElseClause(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckElseClause = function (e, t) {
        this.setTypeChecked(e, t), this.resolveAST(e.statement, !1, t);
      }),
      (i.prototype.resolveBlock = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.statements, !1, t)),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.resolveVariableStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.declaration, !1, t)),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.resolveVariableDeclarationList = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.declarators, !1, t)),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.resolveWithStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckWithStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckWithStatement = function (t, n) {
        this.setTypeChecked(t, n);
        var r = t;
        n.postDiagnostic(
          this.semanticInfoChain.diagnosticFromAST(
            r.condition,
            e.DiagnosticCode
              .All_symbols_within_a_with_block_will_be_resolved_to_any
          )
        );
      }),
      (i.prototype.resolveTryStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckTryStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckTryStatement = function (e, t) {
        this.setTypeChecked(e, t);
        var n = e;
        this.resolveAST(n.block, !1, t),
          this.resolveAST(n.catchClause, !1, t),
          this.resolveAST(n.finallyClause, !1, t);
      }),
      (i.prototype.resolveCatchClause = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckCatchClause(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckCatchClause = function (e, t) {
        this.setTypeChecked(e, t), this.resolveAST(e.block, !1, t);
        var n = this.semanticInfoChain.getDeclForAST(e);
        this.validateVariableDeclarationGroups(n, t);
      }),
      (i.prototype.resolveFinallyClause = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckFinallyClause(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckFinallyClause = function (e, t) {
        this.setTypeChecked(e, t), this.resolveAST(e.block, !1, t);
      }),
      (i.prototype.getEnclosingFunctionDeclaration = function (e) {
        for (var t = this.getEnclosingDeclForAST(e); t; ) {
          if (1032192 & t.kind) return t;
          t = t.getParentDecl();
        }
        return null;
      }),
      (i.prototype.resolveReturnExpression = function (t, n, r) {
        n && n.setFlag(4194304);
        var i = !1;
        if (n) {
          var o = this.getASTForDecl(n),
            s = e.ASTHelpers.getType(o);
          if (s) {
            var a = this.resolveTypeReference(s, r);
            a && ((i = !0), r.pushNewContextualType(a));
          } else {
            var l = r.getContextualType();
            if (l && l.isFunction()) {
              var c =
                  33554432 == l.kind
                    ? l.getConstructSignatures()
                    : l.getCallSignatures(),
                u = c[0],
                p = u.returnType;
              p && ((i = !0), r.propagateContextualType(p));
            }
          }
        }
        var h = this.resolveAST(t, i, r).type;
        return i && r.popAnyContextualType(), h;
      }),
      (i.prototype.typeCheckReturnExpression = function (t, n, r, i) {
        if (r && 32768 === r.kind) {
          var o = r.getParentDecl();
          if (o) {
            var s = o.getSymbol();
            this.resolveDeclaredSymbol(s, i);
            var a = new h(),
              l = this.sourceIsAssignableToTarget(n, s.type, t, i, a);
            l ||
              i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class
                )
              );
          }
        }
        if (
          (r &&
            524288 === r.kind &&
            i.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Setters_cannot_return_a_value
              )
            ),
          r)
        ) {
          var c = this.getASTForDecl(r),
            u = e.ASTHelpers.getType(c);
          if (u || 262144 === r.kind) {
            var p = r.getSignatureSymbol(),
              d = p.returnType;
            if (n && d) {
              var a = new h();
              this.resolveDeclaredSymbol(n, i),
                this.resolveDeclaredSymbol(d, i);
              var l = this.sourceIsAssignableToTarget(n, d, t, i, a);
              if (!l) {
                var m = this.getEnclosingSymbolForAST(t);
                a.message
                  ? i.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Cannot_convert_0_to_1_NL_2,
                        [n.toString(m), d.toString(m), a.message]
                      )
                    )
                  : i.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Cannot_convert_0_to_1,
                        [n.toString(m), d.toString(m)]
                      )
                    );
              }
            }
          }
        }
      }),
      (i.prototype.resolveReturnStatement = function (e, t) {
        var n = this.getEnclosingFunctionDeclaration(e);
        n && n.setFlag(4194304);
        var r = this.getSymbolForAST(e, t),
          i = this.canTypeCheckAST(e, t);
        if (!r || i) {
          var o = e.expression,
            s =
              null === o
                ? this.semanticInfoChain.voidTypeSymbol
                : this.resolveReturnExpression(o, n, t);
          r || ((r = s), this.setSymbolForAST(e, s, t)),
            o &&
              i &&
              (this.setTypeChecked(o, t),
              this.typeCheckReturnExpression(o, s, n, t));
        }
        return r;
      }),
      (i.prototype.resolveSwitchStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckSwitchStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckSwitchStatement = function (t, n) {
        this.setTypeChecked(t, n);
        for (
          var r = this.resolveAST(t.expression, !1, n).type,
            i = 0,
            o = t.switchClauses.childCount();
          o > i;
          i++
        ) {
          var s = t.switchClauses.childAt(i);
          if (233 === s.kind()) {
            var a = s,
              l = this.resolveAST(a.expression, !1, n).type;
            this.resolveAST(a.statements, !1, n);
            var c = new h();
            if (
              !this.sourceIsAssignableToTarget(r, l, a.expression, n, c) &&
              !this.sourceIsAssignableToTarget(l, r, a.expression, n, c)
            ) {
              var u = this.getEnclosingSymbolForAST(a.expression);
              c.message
                ? n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      a.expression,
                      e.DiagnosticCode.Cannot_convert_0_to_1_NL_2,
                      [l.toString(u), r.toString(u), c.message]
                    )
                  )
                : n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      a.expression,
                      e.DiagnosticCode.Cannot_convert_0_to_1,
                      [l.toString(u), r.toString(u)]
                    )
                  );
            }
          } else {
            var p = s;
            this.resolveAST(p.statements, !1, n);
          }
        }
      }),
      (i.prototype.resolveLabeledStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckLabeledStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckLabeledStatement = function (t, n) {
        this.setTypeChecked(t, n);
        var r = t.identifier.valueText(),
          i = this.getEnclosingLabels(t, !0, !1),
          o = e.ArrayUtilities.firstOrDefault(i, function (e) {
            return e.identifier.valueText() === r;
          });
        o &&
          n.postDiagnostic(
            this.semanticInfoChain.duplicateIdentifierDiagnosticFromAST(
              t.identifier,
              r,
              o
            )
          ),
          this.resolveAST(t.statement, !1, n);
      }),
      (i.prototype.labelIsOnContinuableConstruct = function (e) {
        switch (e.kind()) {
          case 160:
            return this.labelIsOnContinuableConstruct(e.statement);
          case 158:
          case 154:
          case 155:
          case 161:
            return !0;
          default:
            return !1;
        }
      }),
      (i.prototype.resolveContinueStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckContinueStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.isIterationStatement = function (e) {
        switch (e.kind()) {
          case 154:
          case 155:
          case 158:
          case 161:
            return !0;
        }
        return !1;
      }),
      (i.prototype.isAnyFunctionExpressionOrDeclaration = function (e) {
        switch (e.kind()) {
          case 219:
          case 218:
          case 222:
          case 129:
          case 135:
          case 241:
          case 137:
          case 139:
          case 140:
            return !0;
        }
        return !1;
      }),
      (i.prototype.inSwitchStatement = function (e) {
        for (; e; ) {
          if (151 === e.kind()) return !0;
          if (this.isAnyFunctionExpressionOrDeclaration(e)) return !1;
          e = e.parent;
        }
        return !1;
      }),
      (i.prototype.inIterationStatement = function (e, t) {
        for (; e; ) {
          if (this.isIterationStatement(e)) return !0;
          if (!t && this.isAnyFunctionExpressionOrDeclaration(e)) return !1;
          e = e.parent;
        }
        return !1;
      }),
      (i.prototype.getEnclosingLabels = function (e, t, n) {
        var r = [];
        for (e = e.parent; e; ) {
          if (160 === e.kind()) {
            var i = e;
            t
              ? r.push(i)
              : this.labelIsOnContinuableConstruct(i.statement) && r.push(i);
          }
          if (!n && this.isAnyFunctionExpressionOrDeclaration(e)) break;
          e = e.parent;
        }
        return r;
      }),
      (i.prototype.typeCheckContinueStatement = function (t, n) {
        if ((this.setTypeChecked(t, n), this.inIterationStatement(t, !1))) {
          if (t.identifier) {
            var r = this.getEnclosingLabels(t, !1, !1);
            if (
              !e.ArrayUtilities.any(r, function (e) {
                return e.identifier.valueText() === t.identifier.valueText();
              })
            ) {
              var r = this.getEnclosingLabels(t, !1, !0);
              e.ArrayUtilities.any(r, function (e) {
                return e.identifier.valueText() === t.identifier.valueText();
              })
                ? n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Jump_target_cannot_cross_function_boundary
                    )
                  )
                : n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode.Jump_target_not_found
                    )
                  );
            }
          }
        } else
          this.inIterationStatement(t, !0)
            ? n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Jump_target_cannot_cross_function_boundary
                )
              )
            : n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .continue_statement_can_only_be_used_within_an_enclosing_iteration_statement
                )
              );
      }),
      (i.prototype.resolveBreakStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckBreakStatement(e, t),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.typeCheckBreakStatement = function (t, n) {
        if ((this.setTypeChecked(t, n), t.identifier)) {
          var r = this.getEnclosingLabels(t, !0, !1);
          if (
            !e.ArrayUtilities.any(r, function (e) {
              return e.identifier.valueText() === t.identifier.valueText();
            })
          ) {
            var r = this.getEnclosingLabels(t, !0, !0);
            e.ArrayUtilities.any(r, function (e) {
              return e.identifier.valueText() === t.identifier.valueText();
            })
              ? n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Jump_target_cannot_cross_function_boundary
                  )
                )
              : n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Jump_target_not_found
                  )
                );
          }
        } else
          this.inIterationStatement(t, !1) ||
            this.inSwitchStatement(t) ||
            (this.inIterationStatement(t, !0)
              ? n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode.Jump_target_cannot_cross_function_boundary
                  )
                )
              : n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement
                  )
                ));
      }),
      (i.prototype.resolveAST = function (t, n, i) {
        if (t) {
          var o = this.getSymbolForAST(t, i);
          if (o && o.isResolved) return this.typeCheckAST(t, n, i), o;
          if (t.isExpression() && !r(t))
            return this.resolveExpressionAST(t, n, i);
          var s = t.kind();
          switch (s) {
            case 124:
            case 126:
            case 122:
            case 127:
            case 125:
            case 123:
              return this.resolveTypeReference(t, i);
            case 1:
              return this.resolveList(t, i);
            case 2:
              return this.resolveSeparatedList(t, i);
            case 120:
              return this.resolveSourceUnit(t, i);
            case 132:
              return this.resolveEnumDeclaration(t, i);
            case 130:
              return this.resolveModuleDeclaration(t, i);
            case 128:
              return this.resolveInterfaceDeclaration(t, i);
            case 131:
              return this.resolveClassDeclaration(t, i);
            case 224:
              return this.resolveVariableDeclarationList(t, i);
            case 136:
              return this.resolveMemberVariableDeclaration(t, i);
            case 225:
              return this.resolveVariableDeclarator(t, i);
            case 141:
              return this.resolvePropertySignature(t, i);
            case 227:
              return this.resolveParameterList(t, i);
            case 242:
              return this.resolveParameter(t, i);
            case 243:
              return this.resolveEnumElement(t, i);
            case 232:
              return this.resolveEqualsValueClause(t, n, i);
            case 238:
              return this.resolveTypeParameterDeclaration(t, i);
            case 239:
              return this.resolveConstraint(t, i);
            case 133:
              return this.resolveImportDeclaration(t, i);
            case 240:
              return this.resolveSimplePropertyAssignment(t, n, i);
            case 241:
              return this.resolveFunctionPropertyAssignment(t, n, i);
            case 11:
              return e.Debug.assert(r(t)), this.resolveTypeNameExpression(t, i);
            case 121:
              return this.resolveQualifiedName(t, i);
            case 137:
              return this.resolveConstructorDeclaration(t, i);
            case 139:
            case 140:
              return this.resolveAccessorDeclaration(t, i);
            case 138:
              return this.resolveIndexMemberDeclaration(t, i);
            case 144:
              return this.resolveIndexSignature(t, i);
            case 135:
              return this.resolveMemberFunctionDeclaration(t, i);
            case 142:
              return this.resolveCallSignature(t, i);
            case 143:
              return this.resolveConstructSignature(t, i);
            case 145:
              return this.resolveMethodSignature(t, i);
            case 129:
              return this.resolveAnyFunctionDeclaration(t, i);
            case 244:
              return this.resolveTypeAnnotation(t, i);
            case 134:
              return this.resolveExportAssignmentStatement(t, i);
            case 157:
              return this.resolveThrowStatement(t, i);
            case 149:
              return this.resolveExpressionStatement(t, i);
            case 154:
              return this.resolveForStatement(t, i);
            case 155:
              return this.resolveForInStatement(t, i);
            case 158:
              return this.resolveWhileStatement(t, i);
            case 161:
              return this.resolveDoStatement(t, i);
            case 147:
              return this.resolveIfStatement(t, i);
            case 235:
              return this.resolveElseClause(t, i);
            case 146:
              return this.resolveBlock(t, i);
            case 148:
              return this.resolveVariableStatement(t, i);
            case 163:
              return this.resolveWithStatement(t, i);
            case 159:
              return this.resolveTryStatement(t, i);
            case 236:
              return this.resolveCatchClause(t, i);
            case 237:
              return this.resolveFinallyClause(t, i);
            case 150:
              return this.resolveReturnStatement(t, i);
            case 151:
              return this.resolveSwitchStatement(t, i);
            case 153:
              return this.resolveContinueStatement(t, i);
            case 152:
              return this.resolveBreakStatement(t, i);
            case 160:
              return this.resolveLabeledStatement(t, i);
          }
          return this.semanticInfoChain.anyTypeSymbol;
        }
      }),
      (i.prototype.resolveExpressionAST = function (e, t, n) {
        var r = this.resolveExpressionWorker(e, t, n);
        return t && n.isInferentiallyTyping()
          ? this.alterPotentialGenericFunctionTypeToInstantiatedFunctionTypeForTypeArgumentInference(
              r,
              n
            )
          : r;
      }),
      (i.prototype.resolveExpressionWorker = function (t, n, r) {
        switch (t.kind()) {
          case 215:
            return this.resolveObjectLiteralExpression(t, n, r);
          case 11:
            return this.resolveNameExpression(t, r);
          case 212:
            return this.resolveMemberAccessExpression(t, r);
          case 222:
            return this.resolveFunctionExpression(t, n, r);
          case 219:
            return this.resolveSimpleArrowFunctionExpression(t, n, r);
          case 218:
            return this.resolveParenthesizedArrowFunctionExpression(t, n, r);
          case 214:
            return this.resolveArrayLiteralExpression(t, n, r);
          case 35:
            return this.resolveThisExpression(t, r);
          case 50:
            return this.resolveSuperExpression(t, r);
          case 213:
            return this.resolveInvocationExpression(t, r);
          case 216:
            return this.resolveObjectCreationExpression(t, r);
          case 220:
            return this.resolveCastExpression(t, r);
          case 13:
            return this.semanticInfoChain.numberTypeSymbol;
          case 14:
            return this.semanticInfoChain.stringTypeSymbol;
          case 32:
            return this.semanticInfoChain.nullTypeSymbol;
          case 37:
          case 24:
            return this.semanticInfoChain.booleanTypeSymbol;
          case 172:
            return this.resolveVoidExpression(t, r);
          case 174:
            return this.resolveAssignmentExpression(t, r);
          case 167:
            return this.resolveLogicalNotExpression(t, r);
          case 193:
          case 192:
          case 194:
          case 195:
          case 196:
          case 198:
          case 199:
          case 197:
            return this.resolveLogicalOperation(t, r);
          case 208:
          case 175:
            return this.resolveBinaryAdditionOperation(t, r);
          case 164:
          case 165:
          case 166:
          case 168:
          case 169:
            return this.resolveUnaryArithmeticOperation(t, r);
          case 210:
          case 211:
            return this.resolvePostfixUnaryExpression(t, r);
          case 209:
          case 205:
          case 206:
          case 207:
          case 189:
          case 191:
          case 202:
          case 203:
          case 204:
          case 190:
          case 181:
          case 183:
          case 184:
          case 185:
          case 176:
          case 177:
          case 178:
          case 179:
          case 182:
          case 180:
            return this.resolveBinaryArithmeticExpression(t, r);
          case 221:
            return this.resolveElementAccessExpression(t, r);
          case 187:
            return this.resolveLogicalOrExpression(t, n, r);
          case 188:
            return this.resolveLogicalAndExpression(t, r);
          case 171:
            return this.resolveTypeOfExpression(t, r);
          case 170:
            return this.resolveDeleteExpression(t, r);
          case 186:
            return this.resolveConditionalExpression(t, n, r);
          case 12:
            return this.resolveRegularExpressionLiteral();
          case 217:
            return this.resolveParenthesizedExpression(t, r);
          case 200:
            return this.resolveInstanceOfExpression(t, r);
          case 173:
            return this.resolveCommaExpression(t, r);
          case 201:
            return this.resolveInExpression(t, r);
          case 223:
            return this.semanticInfoChain.undefinedTypeSymbol;
        }
        e.Debug.fail(
          "resolveExpressionASTWorker: Missing expression kind: " +
            e.SyntaxKind[t.kind()]
        );
      }),
      (i.prototype.typeCheckAST = function (t, n, i) {
        if (this.canTypeCheckAST(t, i)) {
          var o = t.kind();
          switch (o) {
            case 120:
              return this.typeCheckSourceUnit(t, i), void 0;
            case 132:
              return this.typeCheckEnumDeclaration(t, i), void 0;
            case 130:
              return this.typeCheckModuleDeclaration(t, i), void 0;
            case 128:
              return this.typeCheckInterfaceDeclaration(t, i), void 0;
            case 131:
              return this.typeCheckClassDeclaration(t, i), void 0;
            case 243:
              return this.typeCheckEnumElement(t, i), void 0;
            case 136:
              return this.typeCheckMemberVariableDeclaration(t, i), void 0;
            case 225:
              return this.typeCheckVariableDeclarator(t, i), void 0;
            case 141:
              return this.typeCheckPropertySignature(t, i), void 0;
            case 242:
              return this.typeCheckParameter(t, i), void 0;
            case 133:
              return this.typeCheckImportDeclaration(t, i), void 0;
            case 215:
              return this.resolveObjectLiteralExpression(t, n, i), void 0;
            case 241:
              return this.typeCheckFunctionPropertyAssignment(t, n, i), void 0;
            case 11:
              return (
                r(t)
                  ? this.resolveTypeNameExpression(t, i)
                  : this.resolveNameExpression(t, i),
                void 0
              );
            case 212:
              return this.resolveMemberAccessExpression(t, i), void 0;
            case 121:
              return this.resolveQualifiedName(t, i), void 0;
            case 222:
              return this.typeCheckFunctionExpression(t, n, i), void 0;
            case 137:
              return this.typeCheckConstructorDeclaration(t, i), void 0;
            case 139:
            case 140:
              return this.typeCheckAccessorDeclaration(t, i), void 0;
            case 135:
              return this.typeCheckMemberFunctionDeclaration(t, i), void 0;
            case 145:
              return this.typeCheckMethodSignature(t, i), void 0;
            case 144:
              this.typeCheckIndexSignature(t, i);
              break;
            case 142:
              return this.typeCheckCallSignature(t, i), void 0;
            case 143:
              return this.typeCheckConstructSignature(t, i), void 0;
            case 129:
              var s = t;
              return (
                this.typeCheckAnyFunctionDeclaration(
                  s,
                  e.hasModifier(s.modifiers, 16),
                  s.identifier,
                  s.callSignature.typeParameterList,
                  s.callSignature.parameterList,
                  e.ASTHelpers.getType(s),
                  s.block,
                  i
                ),
                void 0
              );
            case 219:
              return (
                this.typeCheckSimpleArrowFunctionExpression(t, n, i), void 0
              );
            case 218:
              return (
                this.typeCheckParenthesizedArrowFunctionExpression(t, n, i),
                void 0
              );
            case 214:
              return this.resolveArrayLiteralExpression(t, n, i), void 0;
            case 213:
              return this.typeCheckInvocationExpression(t, i), void 0;
            case 216:
              return this.typeCheckObjectCreationExpression(t, i), void 0;
            case 150:
              return this.resolveReturnStatement(t, i), void 0;
            default:
              e.Debug.assert(
                !1,
                "Failure nodeType: " +
                  e.SyntaxKind[t.kind()] +
                  ". Implement typeCheck when symbol is set for the ast as part of resolution."
              );
          }
        }
      }),
      (i.prototype.processPostTypeCheckWorkItems = function (e) {
        for (; this.postTypeCheckWorkitems.length; ) {
          var t = this.postTypeCheckWorkitems.pop();
          this.postTypeCheck(t, e);
        }
      }),
      (i.prototype.postTypeCheck = function (t, n) {
        var r = t.kind();
        switch (r) {
          case 242:
          case 225:
            return (
              this.postTypeCheckVariableDeclaratorOrParameter(t, n), void 0
            );
          case 131:
            return this.postTypeCheckClassDeclaration(t, n), void 0;
          case 129:
            return this.postTypeCheckFunctionDeclaration(t, n), void 0;
          case 130:
            return this.postTypeCheckModuleDeclaration(t, n), void 0;
          case 132:
            return this.postTypeCheckEnumDeclaration(t, n), void 0;
          case 133:
            return this.postTypeCheckImportDeclaration(t, n), void 0;
          case 11:
            return this.postTypeCheckNameExpression(t, n), void 0;
          default:
            e.Debug.assert(
              !1,
              "Implement postTypeCheck clause to handle the postTypeCheck work, nodeType: " +
                e.SyntaxKind[t.kind()]
            );
        }
      }),
      (i.prototype.resolveRegularExpressionLiteral = function () {
        return this.cachedRegExpInterfaceType()
          ? this.cachedRegExpInterfaceType()
          : this.semanticInfoChain.anyTypeSymbol;
      }),
      (i.prototype.postTypeCheckNameExpression = function (e, t) {
        this.checkThisCaptureVariableCollides(e, !1, t);
      }),
      (i.prototype.typeCheckNameExpression = function (e, t) {
        this.setTypeChecked(e, t),
          this.checkNameForCompilerGeneratedDeclarationCollision(e, !1, e, t);
      }),
      (i.prototype.resolveNameExpression = function (e, t) {
        var n = this.getSymbolForAST(e, t),
          r = null !== n;
        return (
          (!r || this.canTypeCheckAST(e, t)) &&
            (this.canTypeCheckAST(e, t) && this.typeCheckNameExpression(e, t),
            (n = this.computeNameExpression(e, t))),
          this.resolveDeclaredSymbol(n, t),
          n &&
            (n.type !== this.semanticInfoChain.anyTypeSymbol ||
              n.anyDeclHasFlag(16777217)) &&
            this.setSymbolForAST(e, n, t),
          n
        );
      }),
      (i.prototype.isInEnumDecl = function (e) {
        if (64 & e.kind) return !0;
        for (
          var t = e.getParentPath(), n = 58728959, r = t.length - 1;
          r >= 0;
          r--
        ) {
          var e = t[r];
          if (64 & e.kind) return !0;
          if (e.kind & n) return !1;
        }
        return !1;
      }),
      (i.prototype.getSomeInnermostFunctionScopeDecl = function (e) {
        for (var t = e.length - 1; t >= 0; t--) {
          var n = e[t];
          if (1032192 & n.kind) return n;
        }
        return null;
      }),
      (i.prototype.isFromFunctionScope = function (t, n) {
        var r = this;
        return e.ArrayUtilities.any(t.getDeclarations(), function (e) {
          return r.getSomeInnermostFunctionScopeDecl(e.getParentPath()) === n;
        });
      }),
      (i.prototype.findConstructorDeclOfEnclosingType = function (t) {
        for (var n = t; n; ) {
          if (e.hasFlag(n.kind, 4096)) {
            var r = n.getParentDecl();
            if (e.hasFlag(r.kind, 8))
              return e.ArrayUtilities.lastOrDefault(
                r.getChildDecls(),
                function (t) {
                  return e.hasFlag(t.kind, 32768);
                }
              );
          }
          if (e.hasFlag(n.kind, 164)) return null;
          n = n.getParentDecl();
        }
        return null;
      }),
      (i.prototype.checkNameAsPartOfInitializerExpressionForInstanceMemberVariable = function (
        t
      ) {
        var n = t.valueText();
        if (0 === n.length) return null;
        var r = e.ASTHelpers.getEnclosingMemberVariableDeclaration(t);
        if (r) {
          var i = this.semanticInfoChain.getDeclForAST(r);
          if (!e.hasFlag(i.flags, 16)) {
            var o = this.findConstructorDeclOfEnclosingType(i);
            if (o) {
              var s = o.searchChildDecls(n, 68147712);
              if (s.length) {
                var a = i.getSymbol();
                return this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor,
                  [a.getScopedName(o.getSymbol()), t.text()]
                );
              }
            }
          }
        }
        return null;
      }),
      (i.prototype.computeNameExpression = function (t, n) {
        var r = t.valueText();
        if (0 === r.length) return this.semanticInfoChain.anyTypeSymbol;
        var i = null,
          o = this.getEnclosingDeclForAST(t);
        if (e.hasFlag(o.flags, 8388608)) {
          var s = o.getValueDecl();
          s && e.hasFlag(s.kind, 2048) && (o = s);
        }
        var a = this.checkNameAsPartOfInitializerExpressionForInstanceMemberVariable(
          t
        );
        e.ASTHelpers.isDeclarationASTOrDeclarationNameAST(t) &&
          (i = this.semanticInfoChain.getDeclForAST(t.parent).getSymbol());
        var l = o.getParentPath();
        if (!i) {
          var c = 68147712;
          this.isInEnumDecl(o) || (c = -67108865 & c);
          var i = this.getSymbolFromDeclPath(r, l, c);
        }
        if ("arguments" === r) {
          var u = this.getSomeInnermostFunctionScopeDecl(l);
          u &&
            ((i && this.isFromFunctionScope(i, u)) ||
              ((i = this.cachedFunctionArgumentsSymbol()),
              this.resolveDeclaredSymbol(
                this.cachedIArgumentsInterfaceType(),
                n
              )));
        }
        if (!i)
          return (
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Could_not_find_symbol_0,
                [t.text()]
              )
            ),
            this.getNewErrorTypeSymbol(r)
          );
        if (a) return n.postDiagnostic(a), this.getNewErrorTypeSymbol(r);
        var p = i.getDeclarations()[0],
          h = p.getParentDecl();
        if (h && 1032192 & h.kind && 33554432 & h.flags) {
          var d = this.semanticInfoChain.getASTForDecl(h),
            m = this.getCurrentParameterIndexForFunction(t, d),
            f = e.ASTHelpers.getParameterList(d);
          if (m >= 0) {
            var g;
            if (f)
              for (var v = 0; m >= v; v++) {
                var y = f.parameters.nonSeparatorAt(v);
                if (y && y.identifier.valueText() === r) {
                  g = y;
                  break;
                }
              }
            if (!g)
              return (
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it,
                    [f.parameters.nonSeparatorAt(m).identifier.text(), t.text()]
                  )
                ),
                this.getNewErrorTypeSymbol(r)
              );
            if (g === e.ASTHelpers.getEnclosingParameterForInitializer(t))
              return (
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Parameter_0_cannot_be_referenced_in_its_initializer,
                    [f.parameters.nonSeparatorAt(m).identifier.text()]
                  )
                ),
                this.getNewErrorTypeSymbol(r)
              );
          }
        }
        var b = null;
        if (i.isType() && i.isAlias()) {
          (b = i),
            this.inTypeQuery(t) || b.setIsUsedAsValue(),
            this.resolveDeclaredSymbol(i, n),
            this.resolveDeclaredSymbol(b.assignedValue(), n),
            this.resolveDeclaredSymbol(b.assignedContainer(), n);
          var _ = i.getExportAssignedValueSymbol();
          _ ? (i = _) : (b = null);
        }
        return b && this.semanticInfoChain.setAliasSymbolForAST(t, b), i;
      }),
      (i.prototype.getCurrentParameterIndexForFunction = function (t, n) {
        var r = e.ASTHelpers.getParameterList(n);
        if (r)
          for (; t && t.parent; ) {
            if (t.parent.parent === r)
              return r.parameters.nonSeparatorIndexOf(t);
            t = t.parent;
          }
        return -1;
      }),
      (i.prototype.resolveMemberAccessExpression = function (e, t) {
        return this.resolveDottedNameExpression(e, e.expression, e.name, t);
      }),
      (i.prototype.resolveDottedNameExpression = function (e, t, n, r) {
        var i = this.getSymbolForAST(e, r),
          o = null !== i;
        if (!o || this.canTypeCheckAST(e, r)) {
          var s = this.canTypeCheckAST(e, r);
          s && this.setTypeChecked(e, r),
            (i = this.computeDottedNameExpression(t, n, r, s));
        }
        return (
          this.resolveDeclaredSymbol(i, r),
          i &&
            (i.type !== this.semanticInfoChain.anyTypeSymbol ||
              i.anyDeclHasFlag(16777217)) &&
            (this.setSymbolForAST(e, i, r), this.setSymbolForAST(n, i, r)),
          i
        );
      }),
      (i.prototype.computeDottedNameExpression = function (e, t, n, r) {
        var i = t.valueText();
        if (0 === i.length) return this.semanticInfoChain.anyTypeSymbol;
        var o = this.resolveAST(e, !1, n);
        return this.computeDottedNameExpressionFromLHS(o, e, t, n, r);
      }),
      (i.prototype.computeDottedNameExpressionFromLHS = function (
        t,
        n,
        r,
        i,
        o
      ) {
        var s = r.valueText();
        if (0 === s.length) return this.semanticInfoChain.anyTypeSymbol;
        var a = t.type;
        if (t.isAlias()) {
          var l = t;
          this.inTypeQuery(n) || l.setIsUsedAsValue(),
            (a = l.getExportAssignedTypeSymbol());
        }
        if ((a.isAlias() && (a = a.getExportAssignedTypeSymbol()), !a))
          return (
            i.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                r,
                e.DiagnosticCode
                  .Could_not_find_enclosing_symbol_for_dotted_name_0,
                [r.text()]
              )
            ),
            this.getNewErrorTypeSymbol()
          );
        if (!a.isResolved) {
          var c = this.resolveDeclaredSymbol(a, i);
          c !== a && (t.isType() || i.setTypeInContext(t, c), (a = c));
        }
        if (a.isContainer() && !a.isAlias() && !a.isEnum()) {
          var u = a.getInstanceSymbol();
          u && (a = u.type);
        }
        var p = a;
        if (
          ((a = this.getApparentType(a).widenedType(this, n, i)),
          this.isAnyOrEquivalent(a))
        )
          return a;
        var h = this._getNamedPropertySymbolOfAugmentedType(s, a);
        if (!h) {
          if (32 === a.kind) {
            var d = a,
              m = d.getInstanceSymbol();
            if (m) {
              var f = m.type;
              h = this.getNamedPropertySymbol(s, 68147712, f);
            }
          } else {
            var g = a.getAssociatedContainerType();
            g &&
              !g.isClass() &&
              (h = this.getNamedPropertySymbol(s, 68147712, g));
          }
          if (!h) {
            var v = this.getEnclosingDeclForAST(n);
            return (
              i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  r,
                  e.DiagnosticCode
                    .The_property_0_does_not_exist_on_value_of_type_1,
                  [r.text(), p.toString(v ? v.getSymbol() : null)]
                )
              ),
              this.getNewErrorTypeSymbol(s)
            );
          }
        }
        return (
          o &&
            (this.checkForSuperMemberAccess(n, r, h, i) ||
              this.checkForPrivateMemberAccess(r, a, h, i)),
          h
        );
      }),
      (i.prototype.resolveTypeNameExpression = function (e, t) {
        var n = this.getSymbolForAST(e, t);
        return (
          (n && n.isType() && !this.canTypeCheckAST(e, t)) ||
            (this.canTypeCheckAST(e, t) && this.setTypeChecked(e, t),
            (n = this.computeTypeNameExpression(e, t)),
            this.setSymbolForAST(e, n, t)),
          this.resolveDeclaredSymbol(n, t),
          n
        );
      }),
      (i.prototype.computeTypeNameExpression = function (t, n) {
        var r = t.valueText();
        if (0 === r.length) return this.semanticInfoChain.anyTypeSymbol;
        var i = this.getEnclosingDeclForAST(t),
          o = i.getParentPath(),
          s = this.isLeftSideOfQualifiedName(t),
          a = s ? 164 : 58728795,
          l = s ? 58728795 : 164,
          c = this.getSymbolFromDeclPath(r, o, a);
        if ((c || (c = this.getSymbolFromDeclPath(r, o, l)), !c))
          return (
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Could_not_find_symbol_0,
                [t.text()]
              )
            ),
            this.getNewErrorTypeSymbol(r)
          );
        var u = null;
        if (c.isAlias()) {
          (u = c), this.resolveDeclaredSymbol(c, n);
          var p = u.getExportAssignedTypeSymbol();
          this.resolveDeclaredSymbol(p, n);
        }
        if (c.isTypeParameter() && this.isInStaticMemberContext(i)) {
          var h = c.getDeclarations()[0].getParentDecl();
          if (8 === h.kind)
            return (
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Static_members_cannot_reference_class_type_parameters
                )
              ),
              this.getNewErrorTypeSymbol()
            );
        }
        return (
          c.isGeneric() ||
            (!c.isClass() && !c.isInterface()) ||
            (c = e.PullTypeReferenceSymbol.createTypeReference(c)),
          c
        );
      }),
      (i.prototype.isInStaticMemberContext = function (t) {
        for (; t; ) {
          if (e.hasFlag(t.kind, 1036288) && e.hasFlag(t.flags, 16)) return !0;
          if (e.hasFlag(t.kind, 164)) return !1;
          t = t.getParentDecl();
        }
        return !1;
      }),
      (i.prototype.isLeftSideOfQualifiedName = function (e) {
        return e && e.parent && 121 === e.parent.kind() && e.parent.left === e;
      }),
      (i.prototype.resolveGenericTypeReference = function (t, n) {
        var r = this.resolveAST(t.name, !1, n).type;
        if (r.isError()) return r;
        r.inResolution || r.isResolved || this.resolveDeclaredSymbol(r, n),
          r.isAlias() &&
            (this.inClassExtendsHeritageClause(t) &&
              !this.inTypeArgumentList(t) &&
              r.setIsUsedAsValue(),
            (r = r.getExportAssignedTypeSymbol()));
        var i = r.getTypeParameters();
        if (0 === i.length)
          return (
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Type_0_does_not_have_type_parameters,
                [r.toString()]
              )
            ),
            this.getNewErrorTypeSymbol()
          );
        var o = [];
        if (
          t.typeArgumentList &&
          t.typeArgumentList.typeArguments.nonSeparatorCount()
        )
          for (
            var s = 0;
            s < t.typeArgumentList.typeArguments.nonSeparatorCount();
            s++
          )
            (o[s] = this.resolveTypeReference(
              t.typeArgumentList.typeArguments.nonSeparatorAt(s),
              n
            )),
              o[s].isError() && (o[s] = this.semanticInfoChain.anyTypeSymbol);
        if (o.length && o.length !== i.length)
          return (
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Generic_type_0_requires_1_type_argument_s,
                [r.toString(), r.getTypeParameters().length]
              )
            ),
            this.getNewErrorTypeSymbol()
          );
        if (!r.isResolved)
          for (
            var a = r.getDeclarations(), l = null, s = 0;
            s < a.length;
            s++
          ) {
            l = a[s].getChildDecls();
            for (var c = 0; c < l.length; c++) l[c].ensureSymbolIsBound();
          }
        var u = this.createInstantiatedType(r, o),
          p = null,
          h = null;
        i = u.getTypeParameters();
        for (
          var d = [], m = null, f = u.getTypeParameterArgumentMap(), s = 0;
          s < i.length;
          s++
        )
          d[i[s].pullSymbolID] = i[s];
        for (var g in f) d[g] = f[g];
        for (var v = 0; v < o.length && v < i.length; v++)
          if (
            ((m = o[v]),
            (p = i[v].getConstraint()),
            (d[i[v].pullSymbolID] = m),
            p)
          ) {
            if (p.isTypeParameter())
              for (var c = 0; c < i.length && c < o.length; c++)
                i[c] === p && (p = o[c]);
            else p.isGeneric() && (p = this.instantiateType(p, d));
            if (
              (m.isTypeParameter() && ((h = m.getConstraint()), h && (m = h)),
              m.inResolution ||
                (m.isTypeReference() && m.referencedTypeSymbol.inResolution))
            )
              return u;
            if (!this.sourceIsAssignableToTarget(m, p, t, n)) {
              var y = this.getEnclosingSymbolForAST(t);
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Type_0_does_not_satisfy_the_constraint_1_for_type_parameter_2,
                  [m.toString(y, !0), p.toString(y, !0), i[v].toString(y, !0)]
                )
              );
            }
          }
        return u;
      }),
      (i.prototype.resolveQualifiedName = function (e, t) {
        if (this.inTypeQuery(e))
          return this.resolveDottedNameExpression(e, e.left, e.right, t).type;
        var n = this.getSymbolForAST(e, t);
        if (!n || this.canTypeCheckAST(e, t)) {
          var r = this.canTypeCheckAST(e, t);
          r && this.setTypeChecked(e, t),
            (n = this.computeQualifiedName(e, t)),
            this.setSymbolForAST(e, n, t);
        }
        return this.resolveDeclaredSymbol(n, t), n;
      }),
      (i.prototype.isLastNameOfModuleNameModuleReference = function (e) {
        return (
          11 === e.kind() &&
          e.parent &&
          121 === e.parent.kind() &&
          e.parent.right === e &&
          e.parent.parent &&
          246 === e.parent.parent.kind()
        );
      }),
      (i.prototype.computeQualifiedName = function (t, n) {
        var r = t.right.valueText();
        if (0 === r.length) return this.semanticInfoChain.anyTypeSymbol;
        var i = this.getEnclosingDeclForAST(t),
          o = this.resolveAST(t.left, !1, n),
          s = o.isAlias() ? o.getExportAssignedContainerSymbol() : o.type;
        if (
          (this.inClassExtendsHeritageClause(t) &&
            !this.inTypeArgumentList(t) &&
            o.isAlias() &&
            o.setIsUsedAsValue(),
          !s)
        )
          return this.getNewErrorTypeSymbol();
        if (this.isAnyOrEquivalent(s)) return s;
        var a = this.isLeftSideOfQualifiedName(t),
          l = 130 === t.parent.kind() && t.parent.name === t,
          c = a || l ? 164 : 58728795,
          u = this.getNamedPropertySymbol(r, c, s);
        if (
          (u ||
            l ||
            !this.isLastNameOfModuleNameModuleReference(t.right) ||
            (u = this.getNamedPropertySymbol(r, 68147712, s)),
          !u && s.isContainer())
        ) {
          var p = s.getExportAssignedContainerSymbol();
          p && (u = this.getNamedPropertySymbol(r, c, p));
        }
        if (!u && i) {
          for (var h = i; h && !(164 & h.kind); ) h = h.getParentDecl();
          if (h) {
            var d = h.getSymbol().type;
            d === s && (u = this.getNamedPropertySymbol(r, c, s));
          }
        }
        return u
          ? u
          : (n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t.right,
                e.DiagnosticCode
                  .The_property_0_does_not_exist_on_value_of_type_1,
                [t.right.text(), s.toString(i ? i.getSymbol() : null)]
              )
            ),
            this.getNewErrorTypeSymbol(r));
      }),
      (i.prototype.shouldContextuallyTypeAnyFunctionExpression = function (
        e,
        t,
        n,
        r,
        i
      ) {
        if (t && t.typeParameters.nonSeparatorCount() > 0) return !1;
        if (r) return !1;
        if (n)
          for (var o = 0, s = n.length; s > o; o++) if (n.typeAt(o)) return !1;
        var a = i.getContextualType();
        if (a) {
          this.resolveDeclaredSymbol(a, i);
          var l = a.getCallSignatures(),
            c = l && 1 === l.length;
          if (!c) return !1;
          var u = l[0].getTypeParameters().length > 0;
          return !u;
        }
        return !1;
      }),
      (i.prototype.resolveAnyFunctionExpression = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = null,
          u = this.semanticInfoChain.getDeclForAST(t);
        if (
          (e.Debug.assert(u),
          u &&
            u.hasSymbol() &&
            ((c = u.getSymbol()), c.isResolved || c.inResolution))
        )
          return c;
        (c = u.getSymbol()), e.Debug.assert(c);
        var p = c.type,
          h = p.getCallSignatures()[0];
        if ((c.startResolving(), n))
          for (var d = 0; d < n.typeParameters.nonSeparatorCount(); d++)
            this.resolveTypeParameterDeclaration(
              n.typeParameters.nonSeparatorAt(d),
              l
            );
        var m = null;
        if (
          (a &&
            this.shouldContextuallyTypeAnyFunctionExpression(t, n, r, i, l) &&
            (m = l.getContextualType().getCallSignatures()[0]),
          this.resolveAnyFunctionExpressionParameters(t, n, r, i, a, l),
          i)
        )
          h.returnType = this.resolveTypeReference(i, l);
        else if (m) {
          var f = m.returnType;
          if (f)
            l.propagateContextualType(f),
              this.resolveFunctionBodyReturnTypes(t, o, s, h, !0, u, l),
              l.popAnyContextualType();
          else if (
            ((h.returnType = this.semanticInfoChain.anyTypeSymbol),
            this.compilationSettings.noImplicitAny())
          ) {
            var g = u.getFunctionExpressionName();
            "" != g
              ? l.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      ._0_which_lacks_return_type_annotation_implicitly_has_an_any_return_type,
                    [g]
                  )
                )
              : l.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Function_expression_which_lacks_return_type_annotation_implicitly_has_an_any_return_type
                  )
                );
          }
        } else this.resolveFunctionBodyReturnTypes(t, o, s, h, !1, u, l);
        return (
          l.setTypeInContext(c, p),
          c.setResolved(),
          this.canTypeCheckAST(t, l) &&
            this.typeCheckAnyFunctionExpression(t, n, r, i, o, s, a, l),
          c
        );
      }),
      (i.prototype.resolveAnyFunctionExpressionParameters = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        if (n) {
          var s = this.semanticInfoChain.getDeclForAST(e),
            a = [],
            l = null;
          i &&
            this.shouldContextuallyTypeAnyFunctionExpression(e, t, n, r, o) &&
            (l = o.getContextualType().getCallSignatures()[0]),
            l && (a = l.parameters);
          for (var c = a.length, u = 0, p = n.length; p > u; u++) {
            var h = u === p - 1 && n.lastParameterIsRest(),
              d = null,
              m = null;
            c > u ? (d = a[u]) : c && a[c - 1].isVarArg && (d = a[c - 1]),
              d &&
                (d.isVarArg === h
                  ? (m = d.type)
                  : d.isVarArg && (m = d.type.getElementType())),
              this.resolveFunctionExpressionParameter(
                n.astAt(u),
                n.identifierAt(u),
                n.typeAt(u),
                n.initializerAt(u),
                m,
                s,
                o
              );
          }
        }
      }),
      (i.prototype.typeCheckSimpleArrowFunctionExpression = function (t, n, r) {
        return this.typeCheckAnyFunctionExpression(
          t,
          null,
          e.ASTHelpers.parametersFromIdentifier(t.identifier),
          null,
          t.block,
          t.expression,
          n,
          r
        );
      }),
      (i.prototype.typeCheckParenthesizedArrowFunctionExpression = function (
        t,
        n,
        r
      ) {
        return this.typeCheckAnyFunctionExpression(
          t,
          t.callSignature.typeParameterList,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          e.ASTHelpers.getType(t),
          t.block,
          t.expression,
          n,
          r
        );
      }),
      (i.prototype.typeCheckAnyFunctionExpression = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = this;
        this.setTypeChecked(e, a);
        var c = this.semanticInfoChain.getDeclForAST(e),
          u = c.getSymbol(),
          p = u.type,
          h = p.getCallSignatures()[0],
          d = h.returnType;
        if (t)
          for (var m = 0; m < t.typeParameters.nonSeparatorCount(); m++)
            this.resolveTypeParameterDeclaration(
              t.typeParameters.nonSeparatorAt(m),
              a
            );
        if (
          (this.resolveAnyFunctionExpressionParameters(e, t, n, r, s, a),
          a.pushNewContextualType(null),
          i)
        )
          this.resolveAST(i, !1, a);
        else {
          var f = this.resolveReturnExpression(o, c, a);
          this.typeCheckReturnExpression(o, f, c, a);
        }
        a.popAnyContextualType(),
          this.checkThatNonVoidFunctionHasReturnExpressionOrThrowStatement(
            c,
            r,
            d,
            i,
            a
          ),
          this.validateVariableDeclarationGroups(c, a),
          this.typeCheckCallBacks.push(function (t) {
            l.typeCheckFunctionOverloads(e, t);
          });
      }),
      (i.prototype.resolveThisExpression = function (e, t) {
        var n = this.getEnclosingDeclForAST(e),
          r =
            this.getContextualClassSymbolForEnclosingDecl(e, n) ||
            this.semanticInfoChain.anyTypeSymbol;
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckThisExpression(e, t, n), r
        );
      }),
      (i.prototype.inTypeArgumentList = function (e) {
        for (var t = null, n = e; n; ) {
          switch (n.kind()) {
            case 126:
              var r = n;
              if (r.typeArgumentList === t) return !0;
              break;
            case 226:
              var i = n;
              return i.typeArgumentList === t;
          }
          (t = n), (n = n.parent);
        }
        return !1;
      }),
      (i.prototype.inClassExtendsHeritageClause = function (e) {
        for (; e; ) {
          switch (e.kind()) {
            case 230:
              var t = e;
              return 131 === t.parent.parent.kind();
            case 137:
            case 131:
            case 130:
              return !1;
          }
          e = e.parent;
        }
        return !1;
      }),
      (i.prototype.inTypeQuery = function (e) {
        for (; e; ) {
          switch (e.kind()) {
            case 127:
              return !0;
            case 129:
            case 213:
            case 137:
            case 131:
            case 130:
              return !1;
          }
          e = e.parent;
        }
        return !1;
      }),
      (i.prototype.inArgumentListOfSuperInvocation = function (e) {
        for (var t = null, n = e; n; ) {
          switch (n.kind()) {
            case 213:
              var r = n;
              if (t === r.argumentList && 50 === r.expression.kind()) return !0;
              break;
            case 137:
            case 131:
            case 130:
              return !1;
          }
          (t = n), (n = n.parent);
        }
        return !1;
      }),
      (i.prototype.inConstructorParameterList = function (e) {
        for (var t = null, n = e; n; ) {
          switch (n.kind()) {
            case 142:
              var r = n;
              if (t === r.parameterList && 137 === r.parent.kind()) return !0;
            case 131:
            case 130:
              return !1;
          }
          (t = n), (n = n.parent);
        }
        return !1;
      }),
      (i.prototype.isFunctionAccessorOrNonArrowFunctionExpression = function (
        e
      ) {
        return 262144 === e.kind || 524288 === e.kind
          ? !0
          : this.isFunctionOrNonArrowFunctionExpression(e);
      }),
      (i.prototype.isFunctionOrNonArrowFunctionExpression = function (t) {
        return 16384 === t.kind
          ? !0
          : 131072 !== t.kind || e.hasFlag(t.flags, 8192)
          ? !1
          : !0;
      }),
      (i.prototype.typeCheckThisExpression = function (t, n, r) {
        if (
          (this.checkForThisCaptureInArrowFunction(t),
          this.inConstructorParameterList(t))
        )
          return (
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .this_cannot_be_referenced_in_constructor_arguments
              )
            ),
            void 0
          );
        for (var i = r; null !== i; i = i.getParentDecl()) {
          if (this.isFunctionAccessorOrNonArrowFunctionExpression(i)) return;
          if (4 === i.kind || 32 === i.kind)
            return null === i.getParentDecl()
              ? void 0
              : (n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .this_cannot_be_referenced_within_module_bodies
                  )
                ),
                void 0);
          if (64 === i.kind)
            return (
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.this_cannot_be_referenced_in_current_location
                )
              ),
              void 0
            );
          if (32768 === i.kind)
            return (
              this.inArgumentListOfSuperInvocation(t) &&
                this.superCallMustBeFirstStatementInConstructor(i) &&
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .this_cannot_be_referenced_in_current_location
                  )
                ),
              void 0
            );
          if (8 === i.kind)
            return (
              this.inStaticMemberVariableDeclaration(t) &&
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .this_cannot_be_referenced_in_static_initializers_in_a_class_body
                  )
                ),
              void 0
            );
        }
      }),
      (i.prototype.getContextualClassSymbolForEnclosingDecl = function (t, n) {
        var r = n.getParentPath();
        if (r.length)
          for (var i = !1, o = r.length - 1; o >= 0; o--) {
            var s = r[o],
              a = s.kind,
              l = s.flags;
            if (16 & l) i = !0;
            else {
              if (131072 === a && !e.hasFlag(l, 8192)) return null;
              if (16384 === a) return null;
              if (8 === a) {
                if (this.inStaticMemberVariableDeclaration(t))
                  return this.getNewErrorTypeSymbol();
                var c = s.getSymbol();
                if (i) {
                  var u = c.getConstructorMethod();
                  return u.type;
                }
                return c;
              }
            }
          }
        return null;
      }),
      (i.prototype.inStaticMemberVariableDeclaration = function (t) {
        for (; t; ) {
          if (136 === t.kind() && e.hasModifier(t.modifiers, 16)) return !0;
          t = t.parent;
        }
        return !1;
      }),
      (i.prototype.resolveSuperExpression = function (e, t) {
        var n = this.getEnclosingDeclForAST(e),
          r = this.semanticInfoChain.anyTypeSymbol,
          i = this.getContextualClassSymbolForEnclosingDecl(e, n);
        if (i) {
          this.resolveDeclaredSymbol(i, t);
          var o = i.getExtendedTypes();
          o.length && (r = o[0]);
        }
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckSuperExpression(e, t, n),
          r
        );
      }),
      (i.prototype.typeCheckSuperExpression = function (t, n, r) {
        this.setTypeChecked(t, n), this.checkForThisCaptureInArrowFunction(t);
        var i = 213 === t.parent.kind(),
          o = 212 === t.parent.kind();
        if ((e.Debug.assert(i || o), o)) {
          for (
            var s = r;
            null !== s && !this.isFunctionOrNonArrowFunctionExpression(s);
            s = s.getParentDecl()
          )
            if (8 === s.kind) {
              if (!this.enclosingClassIsDerived(s))
                return (
                  n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .super_cannot_be_referenced_in_non_derived_classes
                    )
                  ),
                  void 0
                );
              if (this.inConstructorParameterList(t))
                return (
                  n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .super_cannot_be_referenced_in_constructor_arguments
                    )
                  ),
                  void 0
                );
              if (this.inStaticMemberVariableDeclaration(t)) break;
              return;
            }
          return (
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class
              )
            ),
            void 0
          );
        }
        for (
          var s = r;
          null !== s && !this.isFunctionOrNonArrowFunctionExpression(s);
          s = s.getParentDecl()
        )
          if (32768 === s.kind) {
            var a = s.getParentDecl();
            if (!this.enclosingClassIsDerived(a))
              return (
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .super_cannot_be_referenced_in_non_derived_classes
                  )
                ),
                void 0
              );
            if (this.inConstructorParameterList(t))
              return (
                n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .super_cannot_be_referenced_in_constructor_arguments
                  )
                ),
                void 0
              );
            return;
          }
        n.postDiagnostic(
          this.semanticInfoChain.diagnosticFromAST(
            t,
            e.DiagnosticCode
              .Super_calls_are_not_permitted_outside_constructors_or_in_local_functions_inside_constructors
          )
        );
      }),
      (i.prototype.resolveSimplePropertyAssignment = function (e, t, n) {
        return this.resolveAST(e.expression, t, n);
      }),
      (i.prototype.resolveFunctionPropertyAssignment = function (t, n, r) {
        return this.resolveAnyFunctionExpression(
          t,
          t.callSignature.typeParameterList,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          e.ASTHelpers.getType(t),
          t.block,
          null,
          n,
          r
        );
      }),
      (i.prototype.typeCheckFunctionPropertyAssignment = function (t, n, r) {
        this.typeCheckAnyFunctionExpression(
          t,
          t.callSignature.typeParameterList,
          e.ASTHelpers.parametersFromParameterList(
            t.callSignature.parameterList
          ),
          e.ASTHelpers.getType(t),
          t.block,
          null,
          n,
          r
        );
      }),
      (i.prototype.resolveObjectLiteralExpression = function (e, t, n, r) {
        var i = this.getSymbolForAST(e, n),
          o = i && i.isResolved;
        return (
          (!o || r || this.canTypeCheckAST(e, n)) &&
            (this.canTypeCheckAST(e, n) && this.setTypeChecked(e, n),
            (i = this.computeObjectLiteralExpression(e, t, n, r)),
            this.setSymbolForAST(e, i, n)),
          i
        );
      }),
      (i.prototype.bindObjectLiteralMembers = function (t, r, i, o, s) {
        for (var a, l = [], c = 0, u = i.nonSeparatorCount(); u > c; c++) {
          var p = i.nonSeparatorAt(c),
            h = this.getPropertyAssignmentName(p),
            d = n(h),
            m = 139 === p.kind() || 140 === p.kind(),
            f = this.semanticInfoChain.getDeclForAST(p);
          if (
            (e.Debug.assert(f),
            240 === p.kind()
              ? o
                ? (a = f.getSymbol())
                : ((a = new e.PullSymbol(d.memberName, 4096)),
                  a.addDeclaration(f),
                  f.setSymbol(a))
              : 241 === p.kind()
              ? (a = f.getSymbol())
              : (e.Debug.assert(m), (a = f.getSymbol())),
            !o && !m)
          ) {
            var g = r.findMember(a.name, !0);
            g &&
              s.postDiagnostic(
                this.semanticInfoChain.duplicateIdentifierDiagnosticFromAST(
                  p,
                  d.actualText,
                  g.getDeclarations()[0].ast()
                )
              ),
              r.addMember(a);
          }
          l.push(a);
        }
        return l;
      }),
      (i.prototype.resolveObjectLiteralMembers = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l,
        c,
        u,
        p,
        h
      ) {
        for (var d = 0, m = i.nonSeparatorCount(); m > d; d++) {
          var f = i.nonSeparatorAt(d),
            g = !1,
            v = null,
            y = this.getPropertyAssignmentName(f),
            b = c[d],
            _ = null;
          r &&
            ((v = this.getNamedPropertySymbol(b.name, 68147712, r)),
            v ||
              (s && e.PullHelpers.isNameNumeric(b.name)
                ? (v = s)
                : o && (v = o)),
            v &&
              (this.resolveDeclaredSymbol(v, p),
              (_ = 4194304 === v.kind ? v.returnType : v.type),
              p.propagateContextualType(_),
              (g = !0),
              h && (h.membersContextTypeSymbols[d] = _)));
          var w = this.resolveAST(f, null !== _, p).type;
          w &&
            (w.isGeneric() && n.setHasGenericMember(),
            o && a.push(w),
            s && e.PullHelpers.isNameNumeric(b.name) && l.push(w)),
            g && p.popAnyContextualType();
          var S = 140 === f.kind() || 139 === f.kind();
          b.isResolved ||
            (S
              ? this.setSymbolForAST(y, w, p)
              : (p.setTypeInContext(b, w),
                b.setResolved(),
                this.setSymbolForAST(y, b, p)));
        }
      }),
      (i.prototype.computeObjectLiteralExpression = function (t, n, r, i) {
        var o = this.semanticInfoChain.getDeclForAST(t);
        e.Debug.assert(o);
        var s = this.getSymbolForAST(t, r),
          a = !!s;
        s ||
          ((s = new e.PullTypeSymbol("", 256)),
          s.addDeclaration(o),
          this.setSymbolForAST(t, s, r),
          o.setSymbol(s));
        var l = t.propertyAssignments,
          c = null;
        n && ((c = r.getContextualType()), this.resolveDeclaredSymbol(c, r));
        var u = null,
          p = null,
          h = null,
          d = null;
        if (c) {
          var m = this.getBothKindsOfIndexSignaturesExcludingAugmentedType(
            c,
            r
          );
          (u = m.stringSignature), (p = m.numericSignature);
          var f = r.isInferentiallyTyping();
          u && (h = f ? [] : [u.returnType]),
            p && (d = f ? [] : [p.returnType]);
        }
        if (l) {
          i && (i.membersContextTypeSymbols = []);
          var g = this.bindObjectLiteralMembers(o, s, l, a, r);
          this.resolveObjectLiteralMembers(o, s, c, l, u, p, h, d, g, a, r, i),
            a ||
              (this.stampObjectLiteralWithIndexSignature(s, h, u, r),
              this.stampObjectLiteralWithIndexSignature(s, d, p, r));
        }
        return s.setResolved(), s;
      }),
      (i.prototype.getPropertyAssignmentName = function (t) {
        return 240 === t.kind()
          ? t.propertyName
          : 241 === t.kind()
          ? t.propertyName
          : 139 === t.kind()
          ? t.propertyName
          : 140 === t.kind()
          ? t.propertyName
          : (e.Debug.assert(!1), void 0);
      }),
      (i.prototype.stampObjectLiteralWithIndexSignature = function (
        e,
        t,
        n,
        r
      ) {
        if (n) {
          var i = {
              getLength: function () {
                return t.length;
              },
              getTypeAtIndex: function (e) {
                return t[e];
              },
            },
            o = e.getDeclarations()[0],
            s = this.findBestCommonType(i, r).widenedType(this, null, r);
          s === n.returnType
            ? e.addIndexSignature(n)
            : this.semanticInfoChain.addSyntheticIndexSignature(
                o,
                e,
                this.getASTForDecl(o),
                n.parameters[0].name,
                n.parameters[0].type,
                s
              );
        }
      }),
      (i.prototype.resolveArrayLiteralExpression = function (e, t, n) {
        var r = this.getSymbolForAST(e, n);
        return (
          (!r || this.canTypeCheckAST(e, n)) &&
            (this.canTypeCheckAST(e, n) && this.setTypeChecked(e, n),
            (r = this.computeArrayLiteralExpressionSymbol(e, t, n)),
            this.setSymbolForAST(e, r, n)),
          r
        );
      }),
      (i.prototype.computeArrayLiteralExpressionSymbol = function (e, t, n) {
        var r = e.expressions,
          i = null,
          o = [],
          s = new h(),
          a = null;
        if (((s.onlyCaptureFirstError = !0), t)) {
          var l = n.getContextualType();
          if ((this.resolveDeclaredSymbol(l, n), l)) {
            var c = this.getBothKindsOfIndexSignaturesExcludingAugmentedType(
              l,
              n
            );
            c.numericSignature && (a = c.numericSignature.returnType);
          }
        }
        if (r) {
          a && n.propagateContextualType(a);
          for (var u = 0, p = r.nonSeparatorCount(); p > u; u++)
            o.push(this.resolveAST(r.nonSeparatorAt(u), null !== a, n).type);
          a && n.popAnyContextualType();
        }
        o.length && (i = o[0]);
        var d;
        return (
          a && !n.isInferentiallyTyping()
            ? (i || (i = a),
              (d = {
                getLength: function () {
                  return r.nonSeparatorCount() + 1;
                },
                getTypeAtIndex: function (e) {
                  return 0 === e ? a : o[e - 1];
                },
              }))
            : (d = {
                getLength: function () {
                  return r.nonSeparatorCount();
                },
                getTypeAtIndex: function (e) {
                  return o[e];
                },
              }),
          (i = i ? this.findBestCommonType(d, n, s) : i),
          i || (i = this.semanticInfoChain.undefinedTypeSymbol),
          this.getArrayType(i)
        );
      }),
      (i.prototype.resolveElementAccessExpression = function (e, t) {
        var n = this.computeElementAccessExpressionSymbolAndDiagnostic(e, t);
        return (
          this.canTypeCheckAST(e, t) &&
            this.typeCheckElementAccessExpression(e, t, n),
          n.symbol
        );
      }),
      (i.prototype.typeCheckElementAccessExpression = function (e, t, n) {
        this.setTypeChecked(e, t), t.postDiagnostic(n.diagnostic);
      }),
      (i.prototype.computeElementAccessExpressionSymbolAndDiagnostic = function (
        t,
        n
      ) {
        var r = this.resolveAST(t.expression, !1, n),
          i = this.resolveAST(t.argumentExpression, !1, n).type,
          o = r.type;
        if (((o = this.getApparentType(o)), this.isAnyOrEquivalent(o)))
          return { symbol: o };
        var s = o.getElementType(),
          a =
            i === this.semanticInfoChain.numberTypeSymbol ||
            e.PullHelpers.symbolIsEnum(i);
        if (s && a) return { symbol: s };
        if (
          14 === t.argumentExpression.kind() ||
          13 === t.argumentExpression.kind()
        ) {
          var l =
              14 === t.argumentExpression.kind()
                ? e.stripStartAndEndQuotes(t.argumentExpression.text())
                : t.argumentExpression.valueText(),
            c = this._getNamedPropertySymbolOfAugmentedType(l, o);
          if (c) return this.resolveDeclaredSymbol(c, n), { symbol: c.type };
        }
        var u = this.getBothKindsOfIndexSignaturesIncludingAugmentedType(o, n),
          p = u.stringSignature,
          h = u.numericSignature;
        return h && (a || i === this.semanticInfoChain.anyTypeSymbol)
          ? { symbol: h.returnType || this.semanticInfoChain.anyTypeSymbol }
          : p &&
            (a ||
              i === this.semanticInfoChain.anyTypeSymbol ||
              i === this.semanticInfoChain.stringTypeSymbol)
          ? { symbol: p.returnType || this.semanticInfoChain.anyTypeSymbol }
          : a ||
            i === this.semanticInfoChain.anyTypeSymbol ||
            i === this.semanticInfoChain.stringTypeSymbol
          ? (this.compilationSettings.noImplicitAny() &&
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t.argumentExpression,
                  e.DiagnosticCode
                    .Index_signature_of_object_type_implicitly_has_an_any_type
                )
              ),
            { symbol: this.semanticInfoChain.anyTypeSymbol })
          : {
              symbol: this.getNewErrorTypeSymbol(),
              diagnostic: this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode.Value_of_type_0_is_not_indexable_by_type_1,
                [o.toString(), i.toString()]
              ),
            };
      }),
      (i.prototype.getBothKindsOfIndexSignaturesIncludingAugmentedType = function (
        e,
        t
      ) {
        return this._getBothKindsOfIndexSignatures(e, t, !0);
      }),
      (i.prototype.getBothKindsOfIndexSignaturesExcludingAugmentedType = function (
        e,
        t
      ) {
        return this._getBothKindsOfIndexSignatures(e, t, !1);
      }),
      (i.prototype._getBothKindsOfIndexSignatures = function (e, t, n) {
        for (
          var r,
            i,
            o = n
              ? e.getIndexSignaturesOfAugmentedType(
                  this,
                  this.cachedFunctionInterfaceType(),
                  this.cachedObjectInterfaceType()
                )
              : e.getIndexSignatures(),
            s = null,
            a = null,
            l = null,
            c = 0;
          c < o.length && (!s || !a);
          c++
        )
          if (
            ((l = o[c]),
            l.isResolved || this.resolveDeclaredSymbol(l, t),
            (r = l.parameters),
            r.length)
          ) {
            if (
              ((i = r[0].type),
              !s && i === this.semanticInfoChain.stringTypeSymbol)
            ) {
              s = l;
              continue;
            }
            if (!a && i === this.semanticInfoChain.numberTypeSymbol) {
              a = l;
              continue;
            }
          }
        return { numericSignature: a, stringSignature: s };
      }),
      (i.prototype._addUnhiddenSignaturesFromBaseType = function (t, n, r) {
        var i = this;
        if (!t) return r.push.apply(r, n), void 0;
        for (
          var o = new e.PullTypeResolutionContext(this), s = 0;
          s < n.length;
          s++
        ) {
          var a = n[s],
            l = e.ArrayUtilities.any(t, function (e) {
              return i.signaturesAreIdenticalWithNewEnclosingTypes(a, e, o, !1);
            });
          l || r.push(a);
        }
      }),
      (i.prototype.resolveBinaryAdditionOperation = function (t, n) {
        var r = this.resolveAST(t.left, !1, n),
          i = r.type,
          o = this.resolveAST(t.right, !1, n).type;
        e.PullHelpers.symbolIsEnum(i) &&
          (i = this.semanticInfoChain.numberTypeSymbol),
          e.PullHelpers.symbolIsEnum(o) &&
            (o = this.semanticInfoChain.numberTypeSymbol);
        var s =
            i === this.semanticInfoChain.nullTypeSymbol ||
            i === this.semanticInfoChain.undefinedTypeSymbol,
          a =
            o === this.semanticInfoChain.nullTypeSymbol ||
            o === this.semanticInfoChain.undefinedTypeSymbol;
        s
          ? (i = a ? (o = this.semanticInfoChain.anyTypeSymbol) : o)
          : a && (o = i);
        var l = null;
        return (
          i === this.semanticInfoChain.stringTypeSymbol ||
          o === this.semanticInfoChain.stringTypeSymbol
            ? (l = this.semanticInfoChain.stringTypeSymbol)
            : this.isAnyOrEquivalent(i) || this.isAnyOrEquivalent(o)
            ? (l = this.semanticInfoChain.anyTypeSymbol)
            : o === this.semanticInfoChain.numberTypeSymbol &&
              i === this.semanticInfoChain.numberTypeSymbol &&
              (l = this.semanticInfoChain.numberTypeSymbol),
          this.canTypeCheckAST(t, n) &&
            (this.setTypeChecked(t, n),
            l
              ? 175 === t.kind() &&
                (this.isReference(t.left, r) ||
                  n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t.left,
                      e.DiagnosticCode
                        .Invalid_left_hand_side_of_assignment_expression
                    )
                  ),
                this.checkAssignability(t.left, l, i, n))
              : n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t.left,
                    e.DiagnosticCode
                      .Invalid_expression_types_not_known_to_support_the_addition_operator
                  )
                )),
          l || (l = this.semanticInfoChain.anyTypeSymbol),
          l
        );
      }),
      (i.prototype.bestCommonTypeOfTwoTypes = function (e, t, n) {
        return this.findBestCommonType(
          {
            getLength: function () {
              return 2;
            },
            getTypeAtIndex: function (n) {
              switch (n) {
                case 0:
                  return e;
                case 1:
                  return t;
              }
            },
          },
          n
        );
      }),
      (i.prototype.bestCommonTypeOfThreeTypes = function (e, t, n, r) {
        return this.findBestCommonType(
          {
            getLength: function () {
              return 3;
            },
            getTypeAtIndex: function (r) {
              switch (r) {
                case 0:
                  return e;
                case 1:
                  return t;
                case 2:
                  return n;
              }
            },
          },
          r
        );
      }),
      (i.prototype.resolveLogicalOrExpression = function (e, t, n) {
        if ((this.canTypeCheckAST(e, n) && this.setTypeChecked(e, n), t)) {
          var r = n.getContextualType(),
            i = this.resolveAST(e.left, t, n).type,
            o = this.resolveAST(e.right, t, n).type;
          return n.isInferentiallyTyping()
            ? this.bestCommonTypeOfTwoTypes(i, o, n)
            : this.bestCommonTypeOfThreeTypes(r, i, o, n);
        }
        var i = this.resolveAST(e.left, !1, n).type;
        n.pushNewContextualType(i);
        var o = this.resolveAST(e.right, !0, n).type;
        return n.popAnyContextualType(), this.bestCommonTypeOfTwoTypes(i, o, n);
      }),
      (i.prototype.resolveLogicalAndExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.left, !1, t)),
          this.resolveAST(e.right, !1, t).type
        );
      }),
      (i.prototype.computeTypeOfConditionalExpression = function (e, t, n, r) {
        if (n && !r.isInferentiallyTyping()) {
          var i = r.getContextualType();
          return this.bestCommonTypeOfThreeTypes(i, e, t, r);
        }
        return this.bestCommonTypeOfTwoTypes(e, t, r);
      }),
      (i.prototype.resolveConditionalExpression = function (t, n, r) {
        var i = this.resolveAST(t.whenTrue, n, r).type,
          o = this.resolveAST(t.whenFalse, n, r).type,
          s = this.computeTypeOfConditionalExpression(i, o, n, r),
          a = this.conditionExpressionTypesAreValid(i, o, s, n, r);
        if (
          this.canTypeCheckAST(t, r) &&
          (this.setTypeChecked(t, r),
          this.resolveAST(t.condition, !1, r),
          !this.conditionExpressionTypesAreValid(i, o, s, n, r))
        )
          if (n) {
            var l = r.getContextualType();
            r.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Type_of_conditional_0_must_be_identical_to_1_2_or_3,
                [s.toString(), i.toString(), o.toString(), l.toString()]
              )
            );
          } else
            r.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Type_of_conditional_0_must_be_identical_to_1_or_2,
                [s.toString(), i.toString(), o.toString()]
              )
            );
        return a ? s : this.getNewErrorTypeSymbol();
      }),
      (i.prototype.conditionExpressionTypesAreValid = function (e, t, n, r, i) {
        if (r) {
          var o = i.getContextualType();
          if (
            this.typesAreIdentical(n, e, i) ||
            this.typesAreIdentical(n, t, i) ||
            this.typesAreIdentical(n, o, i)
          )
            return !0;
        } else if (
          this.typesAreIdentical(n, e, i) ||
          this.typesAreIdentical(n, t, i)
        )
          return !0;
        return !1;
      }),
      (i.prototype.resolveParenthesizedExpression = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) && this.setTypeChecked(e, t),
          this.resolveAST(e.expression, !1, t)
        );
      }),
      (i.prototype.resolveExpressionStatement = function (e, t) {
        return (
          this.canTypeCheckAST(e, t) &&
            (this.setTypeChecked(e, t), this.resolveAST(e.expression, !1, t)),
          this.semanticInfoChain.voidTypeSymbol
        );
      }),
      (i.prototype.resolveInvocationExpression = function (e, t, n) {
        var r = this.getSymbolForAST(e, t);
        if (r && r.isResolved) {
          this.canTypeCheckAST(e, t) &&
            this.typeCheckInvocationExpression(e, t);
          var i = this.semanticInfoChain.getCallResolutionDataForAST(e);
          n &&
            i !== n &&
            ((n.actualParametersContextTypeSymbols =
              i.actualParametersContextTypeSymbols),
            (n.candidateSignature = i.candidateSignature),
            (n.resolvedSignatures = i.resolvedSignatures),
            (n.targetSymbol = i.targetSymbol));
        } else
          n || (n = new o()),
            (r = this.computeInvocationExpressionSymbol(e, t, n)),
            this.canTypeCheckAST(e, t) && this.setTypeChecked(e, t),
            r !== this.semanticInfoChain.anyTypeSymbol &&
              this.setSymbolForAST(e, r, t),
            this.semanticInfoChain.setCallResolutionDataForAST(e, n);
        return r;
      }),
      (i.prototype.typeCheckInvocationExpression = function (e, t) {
        this.setTypeChecked(e, t);
        this.resolveAST(e.expression, !1, t);
        if (e.argumentList.arguments)
          for (
            var n = this.semanticInfoChain.getCallResolutionDataForAST(e),
              r = e.argumentList.arguments.nonSeparatorCount(),
              i = 0;
            r > i;
            i++
          ) {
            var o = n.actualParametersContextTypeSymbols
              ? n.actualParametersContextTypeSymbols[i]
              : null;
            o && t.pushNewContextualType(o),
              this.resolveAST(
                e.argumentList.arguments.nonSeparatorAt(i),
                null !== o,
                t
              ),
              o && (t.popAnyContextualType(), (o = null));
          }
        for (var i = 0; i < n.diagnosticsFromOverloadResolution.length; i++)
          t.postDiagnostic(n.diagnosticsFromOverloadResolution[i]);
      }),
      (i.prototype.computeInvocationExpressionSymbol = function (t, n, r) {
        var i = this.resolveAST(t.expression, !1, n),
          o = this.getCallTargetErrorSpanAST(t),
          s = i.type;
        if (this.isAnyOrEquivalent(s))
          return (
            this.resolveAST(t.argumentList.arguments, !1, n),
            t.argumentList.typeArgumentList &&
            t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount() &&
            s === this.semanticInfoChain.anyTypeSymbol
              ? (this.postOverloadResolutionDiagnostics(
                  this.semanticInfoChain.diagnosticFromAST(
                    o,
                    e.DiagnosticCode
                      .Untyped_function_calls_may_not_accept_type_arguments
                  ),
                  r,
                  n
                ),
                this.getNewErrorTypeSymbol())
              : this.semanticInfoChain.anyTypeSymbol
          );
        var a = !1;
        if (50 === t.expression.kind()) {
          if (((a = !0), !s.isClass()))
            return (
              this.postOverloadResolutionDiagnostics(
                this.semanticInfoChain.diagnosticFromAST(
                  o,
                  e.DiagnosticCode.Calls_to_super_are_only_valid_inside_a_class
                ),
                r,
                n
              ),
              this.resolveAST(t.argumentList.arguments, !1, n),
              this.getNewErrorTypeSymbol()
            );
          (i = s.getConstructorMethod()),
            this.resolveDeclaredSymbol(i, n),
            (s = i.type);
        }
        var l = a ? s.getConstructSignatures() : s.getCallSignatures();
        l.length ||
          33554432 !== s.kind ||
          this.postOverloadResolutionDiagnostics(
            this.semanticInfoChain.diagnosticFromAST(
              o,
              e.DiagnosticCode
                .Value_of_type_0_is_not_callable_Did_you_mean_to_include_new,
              [s.toString()]
            ),
            r,
            n
          );
        var c,
          u = null,
          p = !1,
          d = null,
          m = null,
          f = [];
        if (
          t.argumentList.typeArgumentList &&
          ((u = []),
          t.argumentList.typeArgumentList &&
            t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount())
        )
          for (
            var g = 0;
            g <
            t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount();
            g++
          )
            u[g] = this.resolveTypeReference(
              t.argumentList.typeArgumentList.typeArguments.nonSeparatorAt(g),
              n
            );
        for (
          var v,
            y,
            b,
            _ = !1,
            w = [],
            S = null,
            T = l,
            k = s.getTypeParameterArgumentMap(),
            g = 0;
          g < l.length;
          g++
        )
          if (
            ((b = l[g].getTypeParameters()),
            (c = !1),
            l[g].isGeneric() && b.length)
          ) {
            if (
              (a &&
                s.isGeneric() &&
                !t.argumentList.typeArgumentList &&
                (u = l[g].returnType.getTypeArguments()),
              u)
            ) {
              if (u.length !== b.length) {
                m =
                  m ||
                  this.semanticInfoChain.diagnosticFromAST(
                    o,
                    e.DiagnosticCode
                      .Signature_expected_0_type_arguments_got_1_instead,
                    [b.length, u.length]
                  );
                continue;
              }
              v = u;
            } else {
              e.Debug.assert(t.argumentList);
              var x = new e.InvocationTypeArgumentInferenceContext(
                this,
                n,
                l[g],
                t.argumentList.arguments
              );
              (v = this.inferArgumentTypesForSignature(x, new h(), n)),
                (_ = !0);
            }
            e.Debug.assert(v && v.length == b.length);
            var C = new e.PullInstantiationHelpers.MutableTypeArgumentMap(
              k ? k : []
            );
            e.PullInstantiationHelpers.updateMutableTypeParameterArgumentMap(
              b,
              v,
              C
            );
            var E = C.typeParameterArgumentMap;
            if (u)
              for (var A = 0; A < b.length; A++)
                if ((S = b[A].getConstraint())) {
                  if (
                    (S.isGeneric() && (S = this.instantiateType(S, E)),
                    !this.sourceIsAssignableToTarget(v[A], S, o, n, null, !0))
                  ) {
                    var L = this.getEnclosingSymbolForAST(o);
                    (d = this.semanticInfoChain.diagnosticFromAST(
                      o,
                      e.DiagnosticCode
                        .Type_0_does_not_satisfy_the_constraint_1_for_type_parameter_2,
                      [
                        v[A].toString(L, !0),
                        S.toString(L, !0),
                        b[A].toString(L, !0),
                      ]
                    )),
                      (c = !0);
                  }
                  if (c) break;
                }
            if (c) continue;
            (y = this.instantiateSignature(l[g], E)), y && (w[w.length] = y);
          } else
            (t.argumentList.typeArgumentList &&
              t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount()) ||
              (w[w.length] = l[g]);
        l.length && !w.length && (p = !0), (l = w);
        var I = null;
        if (!l.length) {
          if (
            ((r.targetSymbol = i),
            (r.resolvedSignatures = T),
            (r.candidateSignature = T && T.length ? T[0] : null),
            (r.actualParametersContextTypeSymbols = R),
            this.resolveAST(t.argumentList.arguments, !1, n),
            p)
          )
            d
              ? this.postOverloadResolutionDiagnostics(d, r, n)
              : m
              ? this.postOverloadResolutionDiagnostics(m, r, n)
              : this.postOverloadResolutionDiagnostics(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode
                      .Could_not_select_overload_for_call_expression
                  ),
                  r,
                  n
                );
          else {
            if (
              this.cachedFunctionInterfaceType() &&
              this.sourceIsAssignableToTarget(
                s,
                this.cachedFunctionInterfaceType(),
                o,
                n
              )
            )
              return (
                t.argumentList.typeArgumentList &&
                  this.postOverloadResolutionDiagnostics(
                    this.semanticInfoChain.diagnosticFromAST(
                      o,
                      e.DiagnosticCode
                        .Non_generic_functions_may_not_accept_type_arguments
                    ),
                    r,
                    n
                  ),
                this.semanticInfoChain.anyTypeSymbol
              );
            this.postOverloadResolutionDiagnostics(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Cannot_invoke_an_expression_whose_type_lacks_a_call_signature
              ),
              r,
              n
            );
          }
          return this.getNewErrorTypeSymbol();
        }
        var D = this.resolveOverloads(
            t,
            l,
            null !== t.argumentList.typeArgumentList,
            n,
            f
          ),
          P = null == D;
        if (!D) {
          for (var g = 0; g < f.length; g++)
            this.postOverloadResolutionDiagnostics(f[g], r, n);
          if (
            (this.postOverloadResolutionDiagnostics(
              this.semanticInfoChain.diagnosticFromAST(
                o,
                e.DiagnosticCode.Could_not_select_overload_for_call_expression
              ),
              r,
              n
            ),
            (I = this.getNewErrorTypeSymbol()),
            !l.length)
          )
            return I;
          D = l[0];
        }
        var N = D.getRootSymbol();
        !N.isGeneric() && t.argumentList.typeArgumentList
          ? this.postOverloadResolutionDiagnostics(
              this.semanticInfoChain.diagnosticFromAST(
                o,
                e.DiagnosticCode
                  .Non_generic_functions_may_not_accept_type_arguments
              ),
              r,
              n
            )
          : N.isGeneric() &&
            t.argumentList.typeArgumentList &&
            N.getTypeParameters() &&
            t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount() !==
              N.getTypeParameters().length &&
            this.postOverloadResolutionDiagnostics(
              this.semanticInfoChain.diagnosticFromAST(
                o,
                e.DiagnosticCode
                  .Signature_expected_0_type_arguments_got_1_instead,
                [
                  N.getTypeParameters().length,
                  t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount(),
                ]
              ),
              r,
              n
            );
        var M = a ? this.semanticInfoChain.voidTypeSymbol : D.returnType,
          R = [];
        if (t.argumentList.arguments)
          for (
            var O = t.argumentList.arguments.nonSeparatorCount(),
              F = D.parameters,
              V = null,
              g = (D.getDeclarations()[0], 0);
            O > g;
            g++
          )
            F.length &&
              (g < F.length - 1 || (g < F.length && !D.hasVarArgs)
                ? (this.resolveDeclaredSymbol(F[g], n), (V = F[g].type))
                : D.hasVarArgs &&
                  ((V = F[F.length - 1].type),
                  V.isArrayNamedTypeReference() && (V = V.getElementType()))),
              V && (n.pushNewContextualType(V), (R[g] = V)),
              this.resolveAST(
                t.argumentList.arguments.nonSeparatorAt(g),
                null !== V,
                n
              ),
              V && (n.popAnyContextualType(), (V = null));
        return (
          (r.targetSymbol = i),
          P && T
            ? ((r.resolvedSignatures = T), (r.candidateSignature = T[0]))
            : ((r.resolvedSignatures = l), (r.candidateSignature = D)),
          (r.actualParametersContextTypeSymbols = R),
          I ? I : (M || (M = this.semanticInfoChain.anyTypeSymbol), M)
        );
      }),
      (i.prototype.resolveObjectCreationExpression = function (e, t, n) {
        var r = this.getSymbolForAST(e, t);
        if (r && r.isResolved) {
          this.canTypeCheckAST(e, t) &&
            this.typeCheckObjectCreationExpression(e, t);
          var i = this.semanticInfoChain.getCallResolutionDataForAST(e);
          n &&
            i !== n &&
            ((n.actualParametersContextTypeSymbols =
              i.actualParametersContextTypeSymbols),
            (n.candidateSignature = i.candidateSignature),
            (n.resolvedSignatures = i.resolvedSignatures),
            (n.targetSymbol = i.targetSymbol));
        } else
          n || (n = new o()),
            (r = this.computeObjectCreationExpressionSymbol(e, t, n)),
            this.canTypeCheckAST(e, t) && this.setTypeChecked(e, t),
            this.setSymbolForAST(e, r, t),
            this.semanticInfoChain.setCallResolutionDataForAST(e, n);
        return r;
      }),
      (i.prototype.typeCheckObjectCreationExpression = function (e, t) {
        this.setTypeChecked(e, t), this.resolveAST(e.expression, !1, t);
        var n = this.semanticInfoChain.getCallResolutionDataForAST(e);
        if (e.argumentList)
          for (
            var n = this.semanticInfoChain.getCallResolutionDataForAST(e),
              r = e.argumentList.arguments.nonSeparatorCount(),
              i = 0;
            r > i;
            i++
          ) {
            var o = n.actualParametersContextTypeSymbols
              ? n.actualParametersContextTypeSymbols[i]
              : null;
            o && t.pushNewContextualType(o),
              this.resolveAST(
                e.argumentList.arguments.nonSeparatorAt(i),
                null !== o,
                t
              ),
              o && (t.popAnyContextualType(), (o = null));
          }
        for (var i = 0; i < n.diagnosticsFromOverloadResolution.length; i++)
          t.postDiagnostic(n.diagnosticsFromOverloadResolution[i]);
      }),
      (i.prototype.postOverloadResolutionDiagnostics = function (e, t, n) {
        n.inProvisionalResolution() ||
          t.diagnosticsFromOverloadResolution.push(e),
          n.postDiagnostic(e);
      }),
      (i.prototype.computeObjectCreationExpressionSymbol = function (t, n, r) {
        var i,
          o = this,
          s = null,
          a = this.resolveAST(t.expression, !1, n),
          l = a.isType() ? a : a.type,
          c = this.getCallTargetErrorSpanAST(t),
          u = l.getConstructSignatures(),
          p = null,
          d = !1,
          m = null,
          f = null,
          g = [];
        if (this.isAnyOrEquivalent(l))
          return (
            t.argumentList && this.resolveAST(t.argumentList.arguments, !1, n),
            l
          );
        if (
          (u.length ||
            ((u = l.getCallSignatures()),
            (d = !0),
            this.compilationSettings.noImplicitAny() &&
              this.postOverloadResolutionDiagnostics(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .new_expression_which_lacks_a_constructor_signature_implicitly_has_an_any_type
                ),
                r,
                n
              )),
          u.length)
        ) {
          if (
            t.argumentList &&
            t.argumentList.typeArgumentList &&
            ((p = []),
            t.argumentList.typeArgumentList &&
              t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount())
          )
            for (
              var v = 0;
              v <
              t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount();
              v++
            )
              p[v] = this.resolveTypeReference(
                t.argumentList.typeArgumentList.typeArguments.nonSeparatorAt(v),
                n
              );
          if (l.isGeneric()) {
            for (
              var y,
                b,
                _,
                w,
                S = [],
                T = null,
                k = l.getTypeParameterArgumentMap(),
                v = 0;
              v < u.length;
              v++
            )
              if (((i = !1), u[v].isGeneric())) {
                if (((_ = u[v].getTypeParameters()), p)) {
                  if (p.length !== _.length) {
                    f =
                      f ||
                      this.semanticInfoChain.diagnosticFromAST(
                        c,
                        e.DiagnosticCode
                          .Signature_expected_0_type_arguments_got_1_instead,
                        [_.length, p.length]
                      );
                    continue;
                  }
                  y = p;
                } else if (t.argumentList) {
                  var x = new e.InvocationTypeArgumentInferenceContext(
                    this,
                    n,
                    u[v],
                    t.argumentList.arguments
                  );
                  (y = this.inferArgumentTypesForSignature(x, new h(), n)),
                    (w = !0);
                } else
                  y = e.ArrayUtilities.select(_, function (e) {
                    return e.getDefaultConstraint(o.semanticInfoChain);
                  });
                e.Debug.assert(y && y.length == _.length);
                var C = new e.PullInstantiationHelpers.MutableTypeArgumentMap(
                  k ? k : []
                );
                e.PullInstantiationHelpers.updateMutableTypeParameterArgumentMap(
                  _,
                  y,
                  C
                );
                var E = C.typeParameterArgumentMap;
                if (p)
                  for (var A = 0; A < _.length; A++)
                    if ((T = _[A].getConstraint())) {
                      if (
                        (T.isGeneric() && (T = this.instantiateType(T, E)),
                        !this.sourceIsAssignableToTarget(
                          y[A],
                          T,
                          c,
                          n,
                          null,
                          !0
                        ))
                      ) {
                        var L = this.getEnclosingSymbolForAST(c);
                        (m = this.semanticInfoChain.diagnosticFromAST(
                          c,
                          e.DiagnosticCode
                            .Type_0_does_not_satisfy_the_constraint_1_for_type_parameter_2,
                          [
                            y[A].toString(L, !0),
                            T.toString(L, !0),
                            _[A].toString(L, !0),
                          ]
                        )),
                          (i = !0);
                      }
                      if (i) break;
                    }
                if (i) continue;
                (b = this.instantiateSignature(u[v], E)),
                  b && (S[S.length] = b);
              } else
                (t.argumentList &&
                  t.argumentList.typeArgumentList &&
                  t.argumentList.typeArgumentList.typeArguments.nonSeparatorCount()) ||
                  (S[S.length] = u[v]);
            u = S;
          }
          var I = this.resolveOverloads(
            t,
            u,
            t.argumentList && null !== t.argumentList.typeArgumentList,
            n,
            g
          );
          if (
            ((r.targetSymbol = a),
            (r.resolvedSignatures = u),
            (r.candidateSignature = I),
            (r.actualParametersContextTypeSymbols = []),
            !u.length)
          )
            return (
              m
                ? this.postOverloadResolutionDiagnostics(m, r, n)
                : f && this.postOverloadResolutionDiagnostics(f, r, n),
              this.getNewErrorTypeSymbol()
            );
          var D = null;
          if (!I) {
            for (var v = 0; v < g.length; v++)
              this.postOverloadResolutionDiagnostics(g[v], r, n);
            if (
              (this.postOverloadResolutionDiagnostics(
                this.semanticInfoChain.diagnosticFromAST(
                  c,
                  e.DiagnosticCode.Could_not_select_overload_for_new_expression
                ),
                r,
                n
              ),
              (D = this.getNewErrorTypeSymbol()),
              !u.length)
            )
              return D;
            I = u[0];
          }
          if (
            ((s = I.returnType),
            s &&
              !I.isGeneric() &&
              s.isGeneric() &&
              !s.getIsSpecialized() &&
              (s =
                p && p.length
                  ? this.createInstantiatedType(s, p)
                  : this.instantiateTypeToAny(s, n)),
            d)
          ) {
            if (s !== this.semanticInfoChain.voidTypeSymbol)
              return (
                this.postOverloadResolutionDiagnostics(
                  this.semanticInfoChain.diagnosticFromAST(
                    c,
                    e.DiagnosticCode
                      .Call_signatures_used_in_a_new_expression_must_have_a_void_return_type
                  ),
                  r,
                  n
                ),
                this.getNewErrorTypeSymbol()
              );
            s = this.semanticInfoChain.anyTypeSymbol;
          }
          s || ((s = I.returnType), s || (s = l));
          var P = [];
          if (t.argumentList && t.argumentList.arguments)
            for (
              var N = t.argumentList.arguments.nonSeparatorCount(),
                M = I.parameters,
                R = null,
                v = (I.getDeclarations()[0], 0);
              N > v;
              v++
            )
              M.length &&
                (v < M.length - 1 || (v < M.length && !I.hasVarArgs)
                  ? (this.resolveDeclaredSymbol(M[v], n), (R = M[v].type))
                  : I.hasVarArgs &&
                    ((R = M[M.length - 1].type),
                    R.isArrayNamedTypeReference() && (R = R.getElementType()))),
                R && (n.pushNewContextualType(R), (P[v] = R)),
                this.resolveAST(
                  t.argumentList.arguments.nonSeparatorAt(v),
                  null !== R,
                  n
                ),
                R && (n.popAnyContextualType(), (R = null));
          return (
            (r.targetSymbol = a),
            (r.resolvedSignatures = u),
            (r.candidateSignature = I),
            (r.actualParametersContextTypeSymbols = P),
            D ? D : (s || (s = this.semanticInfoChain.anyTypeSymbol), s)
          );
        }
        return (
          t.argumentList && this.resolveAST(t.argumentList.arguments, !1, n),
          this.postOverloadResolutionDiagnostics(
            this.semanticInfoChain.diagnosticFromAST(
              c,
              e.DiagnosticCode.Invalid_new_expression
            ),
            r,
            n
          ),
          this.getNewErrorTypeSymbol()
        );
      }),
      (i.prototype.instantiateSignatureInContext = function (t, n, r, i) {
        var o,
          s = [],
          a = t.getTypeParameters(),
          l = new e.ContextualSignatureInstantiationTypeArgumentInferenceContext(
            this,
            r,
            t,
            n,
            i
          );
        o = this.inferArgumentTypesForSignature(l, new h(), r);
        var c,
          u = t.functionType,
          p = n.functionType;
        if (u) {
          c = u.getTypeParameterArgumentMap();
          for (var d in c) s[d] = c[d];
        }
        if (p) {
          c = p.getTypeParameterArgumentMap();
          for (var d in c) s[d] = c[d];
        }
        return (
          e.PullInstantiationHelpers.updateTypeParameterArgumentMap(a, o, s),
          this.instantiateSignature(t, s)
        );
      }),
      (i.prototype.resolveCastExpression = function (e, t) {
        var n = this.resolveTypeReference(e.type, t).type;
        return (
          this.canTypeCheckAST(e, t) && this.typeCheckCastExpression(e, t, n), n
        );
      }),
      (i.prototype.typeCheckCastExpression = function (t, n, r) {
        this.setTypeChecked(t, n), n.pushNewContextualType(r);
        var i = this.resolveAST(t.expression, !0, n).type;
        n.popAnyContextualType(),
          this.resolveDeclaredSymbol(r, n),
          this.resolveDeclaredSymbol(i, n);
        var o = new h(),
          s = this.sourceIsAssignableToTarget(i, r, t, n, o);
        if (!s) {
          var a = i.widenedType(this, t.expression, n);
          s = this.sourceIsAssignableToTarget(r, a, t, n, o);
        }
        if (!s) {
          var l = this.getEnclosingSymbolForAST(t);
          o.message
            ? n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Cannot_convert_0_to_1_NL_2,
                  [i.toString(l), r.toString(l), o.message]
                )
              )
            : n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Cannot_convert_0_to_1,
                  [i.toString(l), r.toString(l)]
                )
              );
        }
      }),
      (i.prototype.resolveAssignmentExpression = function (t, n) {
        var r = this.resolveAST(t.left, !1, n),
          i = r.type;
        n.pushNewContextualType(i);
        var o = this.resolveAST(t.right, !0, n).type;
        return (
          n.popAnyContextualType(),
          (o = this.getInstanceTypeForAssignment(t.left, o, n)),
          this.canTypeCheckAST(t, n) &&
            (this.setTypeChecked(t, n),
            this.isReference(t.left, r)
              ? this.checkAssignability(t.left, o, r.type, n)
              : n.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t.left,
                    e.DiagnosticCode
                      .Invalid_left_hand_side_of_assignment_expression
                  )
                )),
          o
        );
      }),
      (i.prototype.getInstanceTypeForAssignment = function (t, n, r) {
        var i = n;
        if (
          (i && i.isAlias() && (i = i.getExportAssignedTypeSymbol()),
          i && i.isContainer() && !i.isEnum())
        ) {
          var o = i.getInstanceType();
          o
            ? (i = o)
            : (r.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Tried_to_set_variable_type_to_uninitialized_module_type_0,
                  [n.toString()]
                )
              ),
              (i = null));
        }
        return i;
      }),
      (i.prototype.widenType = function (e, t, n) {
        return e === this.semanticInfoChain.undefinedTypeSymbol ||
          e === this.semanticInfoChain.nullTypeSymbol ||
          e.isError()
          ? this.semanticInfoChain.anyTypeSymbol
          : e.isArrayNamedTypeReference()
          ? this.widenArrayType(e, t, n)
          : 256 === e.kind
          ? this.widenObjectLiteralType(e, t, n)
          : e;
      }),
      (i.prototype.widenArrayType = function (t, n, r) {
        var i = t.getElementType().widenedType(this, n, r);
        return (
          this.compilationSettings.noImplicitAny() &&
            n &&
            i === this.semanticInfoChain.anyTypeSymbol &&
            t.getElementType() !== this.semanticInfoChain.anyTypeSymbol &&
            r.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                n,
                e.DiagnosticCode
                  .Array_Literal_implicitly_has_an_any_type_from_widening
              )
            ),
          this.getArrayType(i)
        );
      }),
      (i.prototype.widenObjectLiteralType = function (t, n, r) {
        if (!this.needsToWidenObjectLiteralType(t, n, r)) return t;
        e.Debug.assert("" === t.name);
        var i = new e.PullTypeSymbol(t.name, t.kind),
          o = t.getDeclarations();
        e.Debug.assert(1 === o.length), i.addDeclaration(o[0]);
        for (var s = t.getMembers(), a = 0; a < s.length; a++) {
          var l = s[a].type,
            c = s[a].type.widenedType(this, n, r),
            u = new e.PullSymbol(s[a].name, s[a].kind),
            p = s[a].getDeclarations();
          u.addDeclaration(p[0]),
            (u.type = c),
            i.addMember(u),
            u.setResolved(),
            this.compilationSettings.noImplicitAny() &&
              n &&
              c === this.semanticInfoChain.anyTypeSymbol &&
              l !== this.semanticInfoChain.anyTypeSymbol &&
              r.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  n,
                  e.DiagnosticCode
                    .Object_literal_s_property_0_implicitly_has_an_any_type_from_widening,
                  [s[a].name]
                )
              );
        }
        for (var h = t.getIndexSignatures(), a = 0; a < h.length; a++) {
          var d = new e.PullSignatureSymbol(4194304),
            m = h[a].parameters[0],
            f = new e.PullSymbol(m.name, m.kind);
          (f.type = m.type),
            d.addParameter(f),
            (d.returnType = h[a].returnType),
            i.addIndexSignature(d);
        }
        return i;
      }),
      (i.prototype.needsToWidenObjectLiteralType = function (e, t, n) {
        for (var r = e.getMembers(), i = 0; i < r.length; i++) {
          var o = r[i].type;
          if (o !== o.widenedType(this, t, n)) return !0;
        }
        return !1;
      }),
      (i.prototype.findBestCommonType = function (e, t) {
        for (var n = e.getLength(), r = 0; n > r; r++) {
          var i = e.getTypeAtIndex(r);
          if (this.typeIsBestCommonTypeCandidate(i, e, t)) return i;
        }
        return this.semanticInfoChain.emptyTypeSymbol;
      }),
      (i.prototype.typeIsBestCommonTypeCandidate = function (e, t, n) {
        for (var r = 0; r < t.getLength(); r++) {
          var i = t.getTypeAtIndex(r);
          if (e !== i && !this.sourceIsSubtypeOfTarget(i, e, null, n))
            return !1;
        }
        return !0;
      }),
      (i.prototype.typesAreIdenticalInEnclosingTypes = function (e, t, n) {
        return (
          (e = this.getSymbolForRelationshipCheck(e)),
          (t = this.getSymbolForRelationshipCheck(t)),
          e === t
            ? !0
            : e && t && n.oneOfClassificationsIsInfinitelyExpanding()
            ? this.infinitelyExpandingTypesAreIdentical(e, t, n)
            : this.typesAreIdentical(e, t, n)
        );
      }),
      (i.prototype.typesAreIdenticalWithNewEnclosingTypes = function (e, t, n) {
        var r = n.resetEnclosingTypeWalkers(),
          i = this.typesAreIdentical(e, t, n);
        return n.setEnclosingTypeWalkers(r), i;
      }),
      (i.prototype.typesAreIdentical = function (t, n, r) {
        if (
          ((t = this.getSymbolForRelationshipCheck(t)),
          (n = this.getSymbolForRelationshipCheck(n)),
          t === n)
        )
          return !0;
        if (!t || !n) return !1;
        if (e.hasFlag(t.kind, 64) || e.hasFlag(n.kind, 64)) return !1;
        if (
          t.isPrimitive() &&
          t.isStringConstant() &&
          n.isPrimitive() &&
          n.isStringConstant()
        )
          return (
            e.stripStartAndEndQuotes(t.name) ===
            e.stripStartAndEndQuotes(n.name)
          );
        if (t.isPrimitive() || n.isPrimitive()) return !1;
        if (t.isError() && n.isError()) return !0;
        var i = this.identicalCache.valueAt(t.pullSymbolID, n.pullSymbolID);
        if (void 0 != i) return i;
        if (t.isTypeParameter() !== n.isTypeParameter()) return !1;
        if (t.isTypeParameter()) {
          var o = t.getDeclarations()[0].getParentDecl(),
            s = n.getDeclarations()[0].getParentDecl();
          return o === s ? this.symbolsShareDeclaration(t, n) : !1;
        }
        if (t.isPrimitive() !== n.isPrimitive()) return !1;
        this.identicalCache.setValueAt(t.pullSymbolID, n.pullSymbolID, !0);
        var a = r.startWalkingTypes(t, n);
        return (
          (i = this.typesAreIdenticalWorker(t, n, r)),
          r.endWalkingTypes(a),
          this.identicalCache.setValueAt(t.pullSymbolID, n.pullSymbolID, i),
          i
        );
      }),
      (i.prototype.typesAreIdenticalWorker = function (t, n, r) {
        if (
          t.getIsSpecialized() &&
          n.getIsSpecialized() &&
          e.PullHelpers.getRootType(t) === e.PullHelpers.getRootType(n) &&
          e.PullHelpers.getRootType(t).isNamedTypeSymbol()
        ) {
          var i = t.getTypeArguments(),
            o = n.getTypeArguments();
          if (i && o)
            for (var s = 0; s < i.length; s++)
              if (!this.typesAreIdenticalWithNewEnclosingTypes(i[s], o[s], r))
                return !1;
          return !0;
        }
        if (t.hasMembers() && n.hasMembers()) {
          var a = t.getAllMembers(68147712, 0),
            l = n.getAllMembers(68147712, 0);
          if (a.length !== l.length) return !1;
          for (var c = null, u = null, p = 0; p < a.length; p++)
            if (
              ((c = a[p]),
              (u = this.getNamedPropertySymbol(c.name, 68147712, n)),
              !this.propertiesAreIdentical(c, u, r))
            )
              return !1;
        } else if (t.hasMembers() || n.hasMembers()) return !1;
        var h = t.getCallSignatures(),
          d = n.getCallSignatures(),
          m = t.getConstructSignatures(),
          f = n.getConstructSignatures(),
          g = t.getIndexSignatures(),
          v = n.getIndexSignatures();
        return this.signatureGroupsAreIdentical(h, d, r)
          ? this.signatureGroupsAreIdentical(m, f, r)
            ? this.signatureGroupsAreIdentical(g, v, r)
              ? !0
              : !1
            : !1
          : !1;
      }),
      (i.prototype.propertiesAreIdentical = function (e, t, n) {
        if (!t || e.isOptional !== t.isOptional) return !1;
        var r = e.anyDeclHasFlag(2),
          i = t.anyDeclHasFlag(2);
        if (r !== i) return !1;
        if (i && r) {
          var o = e.getDeclarations()[0],
            s = t.getDeclarations()[0];
          if (o !== s) return !1;
        }
        var a = e.type,
          l = t.type;
        n.walkMemberTypes(e.name);
        var c = this.typesAreIdenticalInEnclosingTypes(a, l, n);
        return n.postWalkMemberTypes(), c;
      }),
      (i.prototype.propertiesAreIdenticalWithNewEnclosingTypes = function (
        e,
        t,
        n,
        r,
        i
      ) {
        var o = i.resetEnclosingTypeWalkers();
        i.setEnclosingTypes(e, t);
        var s = this.propertiesAreIdentical(n, r, i);
        return i.setEnclosingTypeWalkers(o), s;
      }),
      (i.prototype.signatureGroupsAreIdentical = function (e, t, n) {
        if (e === t) return !0;
        if (!e || !t) return !1;
        if (e.length !== t.length) return !1;
        for (var r = 0; r < e.length; r++) {
          n.walkSignatures(e[r].kind, r);
          var i = this.signaturesAreIdentical(e[r], t[r], n, !0);
          if ((n.postWalkSignatures(), !i)) return !1;
        }
        return !0;
      }),
      (i.prototype.typeParametersAreIdentical = function (e, t, n) {
        var r = this.typeParametersAreIdenticalWorker(e, t, n);
        return this.setTypeParameterIdentity(e, t, void 0), r;
      }),
      (i.prototype.typeParametersAreIdenticalWorker = function (e, t, n) {
        if (!(!e || !e.length) != !(!t || !t.length)) return !1;
        if (e && t && e.length !== t.length) return !1;
        if (e && t)
          for (var r = 0; r < e.length; r++) {
            n.walkTypeParameterConstraints(r);
            var i = this.typesAreIdentical(
              e[r].getConstraint(),
              t[r].getConstraint(),
              n
            );
            if ((n.postWalkTypeParameterConstraints(), !i)) return !1;
          }
        return !0;
      }),
      (i.prototype.setTypeParameterIdentity = function (e, t, n) {
        if (e && t && e.length === t.length)
          for (var r = 0; r < e.length; r++)
            this.identicalCache.setValueAt(
              e[r].pullSymbolID,
              t[r].pullSymbolID,
              n
            );
      }),
      (i.prototype.signaturesAreIdenticalWithNewEnclosingTypes = function (
        e,
        t,
        n,
        r
      ) {
        "undefined" == typeof r && (r = !0);
        var i = n.resetEnclosingTypeWalkers();
        n.setEnclosingTypes(e, t);
        var o = this.signaturesAreIdentical(e, t, n, r);
        return n.setEnclosingTypeWalkers(i), o;
      }),
      (i.prototype.signaturesAreIdentical = function (e, t, n, r) {
        if (("undefined" == typeof r && (r = !0), e === t)) return !0;
        var i = this.identicalCache.valueAt(e.pullSymbolID, t.pullSymbolID);
        if (i || (void 0 != i && r)) return i;
        var o = i;
        return (
          this.identicalCache.setValueAt(e.pullSymbolID, t.pullSymbolID, !0),
          (i = this.signaturesAreIdenticalWorker(e, t, n, r)),
          r
            ? this.identicalCache.setValueAt(e.pullSymbolID, t.pullSymbolID, i)
            : this.identicalCache.setValueAt(e.pullSymbolID, t.pullSymbolID, o),
          i
        );
      }),
      (i.prototype.signaturesAreIdenticalWorker = function (e, t, n, r) {
        if (
          ("undefined" == typeof r && (r = !0), e.hasVarArgs !== t.hasVarArgs)
        )
          return !1;
        if (e.nonOptionalParamCount !== t.nonOptionalParamCount) return !1;
        if (e.parameters.length !== t.parameters.length) return !1;
        var i = e.getTypeParameters(),
          o = t.getTypeParameters();
        this.setTypeParameterIdentity(i, o, !0);
        var s = this.signatureTypeParametersParametersAndReturnTypesAreIdentical(
          e,
          t,
          n,
          r
        );
        return this.setTypeParameterIdentity(i, o, void 0), s;
      }),
      (i.prototype.signatureTypeParametersParametersAndReturnTypesAreIdentical = function (
        t,
        n,
        r,
        i
      ) {
        if (
          !this.typeParametersAreIdenticalWorker(
            t.getTypeParameters(),
            n.getTypeParameters(),
            r
          )
        )
          return !1;
        if (i) {
          e.PullHelpers.resolveDeclaredSymbolToUseType(t),
            e.PullHelpers.resolveDeclaredSymbolToUseType(n),
            r.walkReturnTypes();
          var o = this.typesAreIdenticalInEnclosingTypes(
            t.returnType,
            n.returnType,
            r
          );
          if ((r.postWalkReturnTypes(), !o)) return !1;
        }
        for (var s = t.parameters, a = n.parameters, l = 0; l < s.length; l++) {
          e.PullHelpers.resolveDeclaredSymbolToUseType(s[l]),
            e.PullHelpers.resolveDeclaredSymbolToUseType(a[l]),
            r.walkParameterTypes(l);
          var c = this.typesAreIdenticalInEnclosingTypes(
            s[l].type,
            a[l].type,
            r
          );
          if ((r.postWalkParameterTypes(), !c)) return !1;
        }
        return !0;
      }),
      (i.prototype.signatureReturnTypesAreIdentical = function (e, t, n) {
        var r = e.getTypeParameters(),
          i = t.getTypeParameters();
        this.setTypeParameterIdentity(r, i, !0);
        var o = n.resetEnclosingTypeWalkers();
        n.setEnclosingTypes(e, t), n.walkReturnTypes();
        var s = this.typesAreIdenticalInEnclosingTypes(
          e.returnType,
          t.returnType,
          n
        );
        return (
          n.setEnclosingTypeWalkers(o),
          this.setTypeParameterIdentity(r, i, void 0),
          s
        );
      }),
      (i.prototype.symbolsShareDeclaration = function (e, t) {
        var n = e.getDeclarations(),
          r = t.getDeclarations();
        return n.length && r.length ? n[0] === r[0] : !1;
      }),
      (i.prototype.sourceIsSubtypeOfTarget = function (e, t, n, r, i, o) {
        return this.sourceIsRelatableToTarget(
          e,
          t,
          !1,
          this.subtypeCache,
          n,
          r,
          i,
          o
        );
      }),
      (i.prototype.sourceMembersAreAssignableToTargetMembers = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        var s = r.resetEnclosingTypeWalkers();
        r.setEnclosingTypes(e, t);
        var a = this.sourceMembersAreRelatableToTargetMembers(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
        return r.setEnclosingTypeWalkers(s), a;
      }),
      (i.prototype.sourcePropertyIsAssignableToTargetProperty = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = o.resetEnclosingTypeWalkers();
        o.setEnclosingTypes(e, t);
        var c = this.sourcePropertyIsRelatableToTargetProperty(
          e,
          t,
          n,
          r,
          !0,
          this.assignableCache,
          i,
          o,
          s,
          a
        );
        return o.setEnclosingTypeWalkers(l), c;
      }),
      (i.prototype.sourceCallSignaturesAreAssignableToTargetCallSignatures = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        var s = r.resetEnclosingTypeWalkers();
        r.setEnclosingTypes(e, t);
        var a = this.sourceCallSignaturesAreRelatableToTargetCallSignatures(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
        return r.setEnclosingTypeWalkers(s), a;
      }),
      (i.prototype.sourceConstructSignaturesAreAssignableToTargetConstructSignatures = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        var s = r.resetEnclosingTypeWalkers();
        r.setEnclosingTypes(e, t);
        var a = this.sourceConstructSignaturesAreRelatableToTargetConstructSignatures(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
        return r.setEnclosingTypeWalkers(s), a;
      }),
      (i.prototype.sourceIndexSignaturesAreAssignableToTargetIndexSignatures = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        var s = r.resetEnclosingTypeWalkers();
        r.setEnclosingTypes(e, t);
        var a = this.sourceIndexSignaturesAreRelatableToTargetIndexSignatures(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
        return r.setEnclosingTypeWalkers(s), a;
      }),
      (i.prototype.typeIsAssignableToFunction = function (e, t, n) {
        return e.isFunctionType()
          ? !0
          : this.cachedFunctionInterfaceType() &&
              this.sourceIsAssignableToTarget(
                e,
                this.cachedFunctionInterfaceType(),
                t,
                n
              );
      }),
      (i.prototype.signatureIsAssignableToTarget = function (e, t, n, r, i, o) {
        var s = r.resetEnclosingTypeWalkers();
        r.setEnclosingTypes(e, t);
        var a = this.signatureIsRelatableToTarget(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
        return r.setEnclosingTypeWalkers(s), a;
      }),
      (i.prototype.sourceIsAssignableToTarget = function (e, t, n, r, i, o) {
        return this.sourceIsRelatableToTarget(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
      }),
      (i.prototype.sourceIsAssignableToTargetWithNewEnclosingTypes = function (
        e,
        t,
        n,
        r,
        i,
        o
      ) {
        return this.sourceIsRelatableToTargetWithNewEnclosingTypes(
          e,
          t,
          !0,
          this.assignableCache,
          n,
          r,
          i,
          o
        );
      }),
      (i.prototype.getSymbolForRelationshipCheck = function (e) {
        return e && e.isTypeReference() ? e.getReferencedTypeSymbol() : e;
      }),
      (i.prototype.sourceIsRelatableToTargetInEnclosingTypes = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        return (
          (e = this.getSymbolForRelationshipCheck(e)),
          (t = this.getSymbolForRelationshipCheck(t)),
          e === t
            ? !0
            : e && t && o.oneOfClassificationsIsInfinitelyExpanding()
            ? this.infinitelyExpandingSourceTypeIsRelatableToTargetType(
                e,
                t,
                n,
                r,
                i,
                o,
                s,
                a
              )
            : this.sourceIsRelatableToTarget(e, t, n, r, i, o, s, a)
        );
      }),
      (i.prototype.sourceIsRelatableToTargetWithNewEnclosingTypes = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = o.resetEnclosingTypeWalkers(),
          c = this.sourceIsRelatableToTarget(e, t, n, r, i, o, s, a);
        return o.setEnclosingTypeWalkers(l), c;
      }),
      (i.prototype.sourceIsRelatableToTargetInCache = function (e, t, n, r) {
        var i = n.valueAt(e.pullSymbolID, t.pullSymbolID);
        return i
          ? { isRelatable: i }
          : void 0 == i || r
          ? null
          : { isRelatable: i };
      }),
      (i.prototype.sourceIsRelatableToTarget = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        if (
          ((t = this.getSymbolForRelationshipCheck(t)),
          (n = this.getSymbolForRelationshipCheck(n)),
          t === n)
        )
          return !0;
        if (!t || !n) return !0;
        var c = this.getApparentType(t),
          u = this.sourceIsRelatableToTargetInCache(t, n, i, a);
        if (u) return u.isRelatable;
        if (
          t === this.semanticInfoChain.stringTypeSymbol &&
          n.isPrimitive() &&
          n.isStringConstant()
        )
          return (
            a &&
            a.stringConstantVal &&
            14 === a.stringConstantVal.kind() &&
            e.stripStartAndEndQuotes(a.stringConstantVal.text()) ===
              e.stripStartAndEndQuotes(n.name)
          );
        if (r) {
          if (this.isAnyOrEquivalent(t) || this.isAnyOrEquivalent(n)) return !0;
        } else if (this.isAnyOrEquivalent(n)) return !0;
        if (
          n === this.semanticInfoChain.stringTypeSymbol &&
          t.isPrimitive() &&
          t.isStringConstant()
        )
          return !0;
        if (
          t.isPrimitive() &&
          t.isStringConstant() &&
          n.isPrimitive() &&
          n.isStringConstant()
        )
          return (
            e.stripStartAndEndQuotes(t.name) ===
            e.stripStartAndEndQuotes(n.name)
          );
        if (t === this.semanticInfoChain.undefinedTypeSymbol) return !0;
        if (
          t === this.semanticInfoChain.nullTypeSymbol &&
          n !== this.semanticInfoChain.undefinedTypeSymbol &&
          n != this.semanticInfoChain.voidTypeSymbol
        )
          return !0;
        if (n === this.semanticInfoChain.voidTypeSymbol)
          return t === this.semanticInfoChain.undefinedTypeSymbol ||
            t == this.semanticInfoChain.nullTypeSymbol
            ? !0
            : !1;
        if (t === this.semanticInfoChain.voidTypeSymbol)
          return n === this.semanticInfoChain.anyTypeSymbol ? !0 : !1;
        if (
          n === this.semanticInfoChain.numberTypeSymbol &&
          e.PullHelpers.symbolIsEnum(t)
        )
          return !0;
        if (
          t === this.semanticInfoChain.numberTypeSymbol &&
          e.PullHelpers.symbolIsEnum(n)
        )
          return r;
        if (e.PullHelpers.symbolIsEnum(n) && e.PullHelpers.symbolIsEnum(t))
          return this.symbolsShareDeclaration(n, t);
        if (64 & t.kind || 64 & n.kind) return !1;
        if (
          t.getIsSpecialized() &&
          n.getIsSpecialized() &&
          e.PullHelpers.getRootType(t) === e.PullHelpers.getRootType(n) &&
          e.PullHelpers.getRootType(t).isNamedTypeSymbol()
        ) {
          var p = t.getTypeArguments(),
            h = n.getTypeArguments();
          if (p && h) {
            i.setValueAt(t.pullSymbolID, n.pullSymbolID, !0);
            for (
              var d = 0;
              d < p.length &&
              this.sourceIsRelatableToTargetWithNewEnclosingTypes(
                p[d],
                h[d],
                r,
                i,
                o,
                s,
                null,
                l
              );
              d++
            );
            if (d === p.length) return !0;
            i.setValueAt(t.pullSymbolID, n.pullSymbolID, void 0);
          }
        }
        if (n.isTypeParameter()) {
          if (t.isTypeParameter())
            return t.getConstraint()
              ? this.isSourceTypeParameterConstrainedToTargetTypeParameter(t, n)
              : this.typesAreIdentical(n, t, s);
          if (!l) return this.typesAreIdentical(n, c, s);
          n = n.getBaseConstraint(this.semanticInfoChain);
        }
        if (c.isPrimitive() || n.isPrimitive()) return !1;
        i.setValueAt(t.pullSymbolID, n.pullSymbolID, !0);
        var m = s.startWalkingTypes(c, n),
          f =
            t != c &&
            s.enclosingTypeWalker1._canWalkStructure() &&
            s.enclosingTypeWalker1._getCurrentSymbol() != c;
        f && s.enclosingTypeWalker1.setCurrentSymbol(c);
        var g = this.sourceIsRelatableToTargetWorker(t, n, c, r, i, o, s, a, l);
        return (
          f && s.enclosingTypeWalker1.setCurrentSymbol(t),
          s.endWalkingTypes(m),
          i.setValueAt(t.pullSymbolID, n.pullSymbolID, g),
          g
        );
      }),
      (i.prototype.isSourceTypeParameterConstrainedToTargetTypeParameter = function (
        e,
        t
      ) {
        for (var n = e; n && n.isTypeParameter(); ) {
          if (n === t) return !0;
          n = n.getConstraint();
        }
        return !1;
      }),
      (i.prototype.sourceIsRelatableToTargetWorker = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        return t.hasMembers() &&
          !this.sourceMembersAreRelatableToTargetMembers(n, t, r, i, o, s, a, l)
          ? !1
          : this.sourceCallSignaturesAreRelatableToTargetCallSignatures(
              n,
              t,
              r,
              i,
              o,
              s,
              a,
              l
            )
          ? this.sourceConstructSignaturesAreRelatableToTargetConstructSignatures(
              n,
              t,
              r,
              i,
              o,
              s,
              a,
              l
            )
            ? this.sourceIndexSignaturesAreRelatableToTargetIndexSignatures(
                n,
                t,
                r,
                i,
                o,
                s,
                a,
                l
              )
              ? !0
              : !1
            : !1
          : !1;
      }),
      (i.prototype.sourceMembersAreRelatableToTargetMembers = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        for (var c = n.getAllMembers(68147712, 0), u = 0; u < c.length; u++) {
          var p = c[u],
            h = this._getNamedPropertySymbolOfAugmentedType(p.name, t);
          this.resolveDeclaredSymbol(p, s);
          {
            p.type;
          }
          if (h) {
            if (
              !this.sourcePropertyIsRelatableToTargetProperty(
                t,
                n,
                h,
                p,
                r,
                i,
                o,
                s,
                a,
                l
              )
            )
              return !1;
          } else if (!p.isOptional) {
            if (a) {
              var d = this.getEnclosingSymbolForAST(o);
              (a.flags |= 2),
                a.addMessage(
                  e.getDiagnosticMessage(
                    e.DiagnosticCode.Type_0_is_missing_property_1_from_type_2,
                    [
                      t.toString(d),
                      p.getScopedNameEx().toString(),
                      n.toString(d),
                    ]
                  )
                );
            }
            return !1;
          }
        }
        return !0;
      }),
      (i.prototype.infinitelyExpandingSourceTypeIsRelatableToTargetType = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = n.widenedType(this, null, s),
          u = t.widenedType(this, null, s);
        if (
          u !== this.semanticInfoChain.anyTypeSymbol &&
          c !== this.semanticInfoChain.anyTypeSymbol
        ) {
          var p = e.PullHelpers.getRootType(t),
            d = e.PullHelpers.getRootType(n);
          if (p !== d) {
            if ((i.setValueAt(t.pullSymbolID, n.pullSymbolID, !1), a)) {
              var m = this.getEnclosingSymbolForAST(o);
              a.addMessage(
                e.getDiagnosticMessage(
                  e.DiagnosticCode
                    .Types_0_and_1_originating_in_infinitely_expanding_type_reference_do_not_refer_to_same_named_type,
                  [t.getScopedNameEx(m).toString(), n.toString(m)]
                )
              );
            }
            return !1;
          }
          var f = t.getTypeArguments(),
            g = n.getTypeArguments();
          if (!f && !g)
            return i.setValueAt(t.pullSymbolID, n.pullSymbolID, !0), !0;
          if (!f || !g || f.length !== g.length) {
            if ((i.setValueAt(t.pullSymbolID, n.pullSymbolID, !1), a)) {
              var m = this.getEnclosingSymbolForAST(o);
              a.addMessage(
                e.getDiagnosticMessage(
                  e.DiagnosticCode
                    .Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments,
                  [t.toString(m), n.toString(m)]
                )
              );
            }
            return !1;
          }
          var v = null;
          a && !a.onlyCaptureFirstError && (v = new h(a));
          for (var y = !0, b = 0; b < f.length && y; b++) {
            if (
              (s.walkTypeArgument(b),
              !this.sourceIsRelatableToTargetInEnclosingTypes(
                f[b],
                g[b],
                r,
                i,
                o,
                s,
                v,
                l
              ) && ((y = !1), a))
            ) {
              var _,
                m = this.getEnclosingSymbolForAST(o);
              (_ =
                v && v.message
                  ? e.getDiagnosticMessage(
                      e.DiagnosticCode
                        .Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments_NL_2,
                      [t.toString(m), n.toString(m), v.message]
                    )
                  : e.getDiagnosticMessage(
                      e.DiagnosticCode
                        .Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments,
                      [t.toString(m), n.toString(m)]
                    )),
                a.addMessage(_);
            }
            s.postWalkTypeArgument();
          }
        }
        return i.setValueAt(t.pullSymbolID, n.pullSymbolID, y), y;
      }),
      (i.prototype.infinitelyExpandingTypesAreIdentical = function (t, n, r) {
        var i = n.widenedType(this, null, null),
          o = t.widenedType(this, null, null);
        if (
          o !== this.semanticInfoChain.anyTypeSymbol &&
          i !== this.semanticInfoChain.anyTypeSymbol
        ) {
          var s = e.PullHelpers.getRootType(t),
            a = e.PullHelpers.getRootType(n);
          if (s !== a)
            return (
              this.identicalCache.setValueAt(
                t.pullSymbolID,
                n.pullSymbolID,
                !1
              ),
              !1
            );
          var l = t.getTypeArguments(),
            c = n.getTypeArguments();
          if (!l && !c)
            return (
              this.identicalCache.setValueAt(
                t.pullSymbolID,
                n.pullSymbolID,
                !0
              ),
              !0
            );
          if (!l || !c || l.length !== c.length)
            return (
              this.identicalCache.setValueAt(
                t.pullSymbolID,
                n.pullSymbolID,
                !1
              ),
              !1
            );
          for (var u = 0; u < l.length; u++) {
            r.walkTypeArgument(u);
            var p = this.typesAreIdenticalInEnclosingTypes(l[u], c[u], r);
            if ((r.postWalkTypeArgument(), !p))
              return (
                this.identicalCache.setValueAt(
                  t.pullSymbolID,
                  n.pullSymbolID,
                  !1
                ),
                !1
              );
          }
        }
        return (
          this.identicalCache.setValueAt(t.pullSymbolID, n.pullSymbolID, !0), !0
        );
      }),
      (i.prototype.sourcePropertyIsRelatableToTargetProperty = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l,
        c,
        u
      ) {
        var p = this,
          d = t.isConstructor() && n.isConstructor(),
          m = function (e) {
            var o = p.getEnclosingSymbolForAST(a),
              s = e ? r.getContainer() : t,
              l = e ? i.getContainer() : n;
            return (
              d &&
                ((s = s.getAssociatedContainerType()),
                (l = l.getAssociatedContainerType())),
              {
                propertyName: i.getScopedNameEx().toString(),
                sourceTypeName: s.toString(o),
                targetTypeName: l.toString(o),
              }
            );
          },
          f = i.anyDeclHasFlag(2),
          g = r.anyDeclHasFlag(2);
        if (f !== g) {
          if (c) {
            var v,
              y = m(!0);
            (v = f
              ? d
                ? e.DiagnosticCode
                    .Static_property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2
                : e.DiagnosticCode
                    .Property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2
              : d
              ? e.DiagnosticCode
                  .Static_property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2
              : e.DiagnosticCode
                  .Property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2),
              c.addMessage(
                e.getDiagnosticMessage(v, [
                  y.propertyName,
                  y.sourceTypeName,
                  y.targetTypeName,
                ])
              ),
              (c.flags |= 128);
          }
          return !1;
        }
        if (g && f) {
          var b = i.getDeclarations()[0],
            _ = r.getDeclarations()[0];
          if (b !== _) {
            if (c) {
              var y = m(!0);
              c.flags |= 128;
              var v = d
                ? e.DiagnosticCode
                    .Types_0_and_1_define_static_property_2_as_private
                : e.DiagnosticCode.Types_0_and_1_define_property_2_as_private;
              c.addMessage(
                e.getDiagnosticMessage(v, [
                  y.sourceTypeName,
                  y.targetTypeName,
                  y.propertyName,
                ])
              );
            }
            return !1;
          }
        }
        if (r.isOptional && !i.isOptional) {
          if (c) {
            var y = m(!0);
            (c.flags |= 2),
              c.addMessage(
                e.getDiagnosticMessage(
                  e.DiagnosticCode
                    .Property_0_defined_as_optional_in_type_1_but_is_required_in_type_2,
                  [y.propertyName, y.sourceTypeName, y.targetTypeName]
                )
              );
          }
          return !1;
        }
        this.resolveDeclaredSymbol(r, l);
        var w = r.type,
          S = i.type,
          T = this.sourceIsRelatableToTargetInCache(w, S, s, c);
        if (T) return T.isRelatable;
        var k = null;
        c && !c.onlyCaptureFirstError && (k = new h(c)),
          l.walkMemberTypes(i.name);
        var x = this.sourceIsRelatableToTargetInEnclosingTypes(
          w,
          S,
          o,
          s,
          a,
          l,
          k,
          u
        );
        if ((l.postWalkMemberTypes(), !x && c)) {
          {
            this.getEnclosingSymbolForAST(a);
          }
          c.flags |= 32;
          var C,
            y = m(!1);
          if (k && k.message) {
            var v = d
              ? e.DiagnosticCode
                  .Types_of_static_property_0_of_class_1_and_class_2_are_incompatible_NL_3
              : e.DiagnosticCode
                  .Types_of_property_0_of_types_1_and_2_are_incompatible_NL_3;
            C = e.getDiagnosticMessage(v, [
              y.propertyName,
              y.sourceTypeName,
              y.targetTypeName,
              k.message,
            ]);
          } else {
            var v = d
              ? e.DiagnosticCode
                  .Types_of_static_property_0_of_class_1_and_class_2_are_incompatible
              : e.DiagnosticCode
                  .Types_of_property_0_of_types_1_and_2_are_incompatible;
            C = e.getDiagnosticMessage(v, [
              y.propertyName,
              y.sourceTypeName,
              y.targetTypeName,
            ]);
          }
          c.addMessage(C);
        }
        return x;
      }),
      (i.prototype.sourceCallSignaturesAreRelatableToTargetCallSignatures = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = n.getCallSignatures();
        if (c.length) {
          var u = null;
          a && !a.onlyCaptureFirstError && (u = new h(a));
          var p = t.getCallSignatures();
          if (
            !this.signatureGroupIsRelatableToTarget(
              t,
              n,
              p,
              c,
              r,
              i,
              o,
              s,
              u,
              l
            )
          ) {
            if (a) {
              var d,
                m = this.getEnclosingSymbolForAST(o);
              if (p.length && c.length)
                d =
                  u && u.message
                    ? e.getDiagnosticMessage(
                        e.DiagnosticCode
                          .Call_signatures_of_types_0_and_1_are_incompatible_NL_2,
                        [t.toString(m), n.toString(m), u.message]
                      )
                    : e.getDiagnosticMessage(
                        e.DiagnosticCode
                          .Call_signatures_of_types_0_and_1_are_incompatible,
                        [t.toString(m), n.toString(m)]
                      );
              else {
                var f = c.length ? n.toString(m) : t.toString(m),
                  g = c.length ? t.toString(m) : n.toString(m);
                d = e.getDiagnosticMessage(
                  e.DiagnosticCode
                    .Type_0_requires_a_call_signature_but_type_1_lacks_one,
                  [f, g]
                );
              }
              (a.flags |= 4), a.addMessage(d);
            }
            return !1;
          }
        }
        return !0;
      }),
      (i.prototype.sourceConstructSignaturesAreRelatableToTargetConstructSignatures = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = n.getConstructSignatures();
        if (c.length) {
          var u = null;
          a && !a.onlyCaptureFirstError && (u = new h(a));
          var p = t.getConstructSignatures();
          if (
            !this.signatureGroupIsRelatableToTarget(
              t,
              n,
              p,
              c,
              r,
              i,
              o,
              s,
              u,
              l
            )
          ) {
            if (a) {
              var d,
                m = this.getEnclosingSymbolForAST(o);
              if (p.length && c.length)
                d =
                  u && u.message
                    ? e.getDiagnosticMessage(
                        e.DiagnosticCode
                          .Construct_signatures_of_types_0_and_1_are_incompatible_NL_2,
                        [t.toString(m), n.toString(m), u.message]
                      )
                    : e.getDiagnosticMessage(
                        e.DiagnosticCode
                          .Construct_signatures_of_types_0_and_1_are_incompatible,
                        [t.toString(m), n.toString(m)]
                      );
              else {
                var f = c.length ? n.toString(m) : t.toString(m),
                  g = c.length ? t.toString(m) : n.toString(m);
                d = e.getDiagnosticMessage(
                  e.DiagnosticCode
                    .Type_0_requires_a_construct_signature_but_type_1_lacks_one,
                  [f, g]
                );
              }
              (a.flags |= 4), a.addMessage(d);
            }
            return !1;
          }
        }
        return !0;
      }),
      (i.prototype.sourceIndexSignaturesAreRelatableToTargetIndexSignatures = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = this.getBothKindsOfIndexSignaturesExcludingAugmentedType(n, s),
          u = c.stringSignature,
          p = c.numericSignature;
        if (u || p) {
          var d = this.getBothKindsOfIndexSignaturesIncludingAugmentedType(
              t,
              s
            ),
            m = s.getBothKindOfIndexSignatures(!0, !1),
            f = d.stringSignature,
            g = d.numericSignature,
            v = !0,
            y = null;
          if (
            (a && !a.onlyCaptureFirstError && (y = new h(a)),
            u &&
              (f
                ? (s.walkIndexSignatureReturnTypes(m, !0, !0),
                  (v = this.sourceIsRelatableToTargetInEnclosingTypes(
                    f.returnType,
                    u.returnType,
                    r,
                    i,
                    o,
                    s,
                    y,
                    l
                  )),
                  s.postWalkIndexSignatureReturnTypes())
                : (v = !1)),
            v &&
              p &&
              (g
                ? (s.walkIndexSignatureReturnTypes(m, !1, !1),
                  (v = this.sourceIsRelatableToTargetInEnclosingTypes(
                    g.returnType,
                    p.returnType,
                    r,
                    i,
                    o,
                    s,
                    y,
                    l
                  )),
                  s.postWalkIndexSignatureReturnTypes())
                : f
                ? (s.walkIndexSignatureReturnTypes(m, !0, !1),
                  (v = this.sourceIsRelatableToTargetInEnclosingTypes(
                    f.returnType,
                    p.returnType,
                    r,
                    i,
                    o,
                    s,
                    y,
                    l
                  )),
                  s.postWalkIndexSignatureReturnTypes())
                : (v = !1)),
            !v)
          ) {
            if (a) {
              var b,
                _ = this.getEnclosingSymbolForAST(o);
              (b =
                y && y.message
                  ? e.getDiagnosticMessage(
                      e.DiagnosticCode
                        .Index_signatures_of_types_0_and_1_are_incompatible_NL_2,
                      [t.toString(_), n.toString(_), y.message]
                    )
                  : e.getDiagnosticMessage(
                      e.DiagnosticCode
                        .Index_signatures_of_types_0_and_1_are_incompatible,
                      [t.toString(_), n.toString(_)]
                    )),
                (a.flags |= 4),
                a.addMessage(b);
            }
            return !1;
          }
        }
        return !0;
      }),
      (i.prototype.signatureGroupIsRelatableToTarget = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l,
        c
      ) {
        if (n === r) return !0;
        if (!n.length || !r.length) return !1;
        var u = !1,
          p = r.length > 1,
          d = n.length > 1,
          m = 0,
          f = null;
        l && ((f = new h(l, !0)), (f.message = l.message));
        for (var g = 0; g < r.length; g++) {
          var v = r[g];
          if (
            !(v.isStringConstantOverloadSignature() || (p && v.isDefinition()))
          ) {
            for (var y = 0; y < n.length; y++) {
              var b = n[y];
              if (
                !(
                  b.isStringConstantOverloadSignature() ||
                  (d && b.isDefinition())
                )
              ) {
                a.walkSignatures(b.kind, y, g);
                var _ = this.signatureIsRelatableToTarget(
                  b,
                  v,
                  i,
                  o,
                  s,
                  a,
                  0 == m ? f : null,
                  c
                );
                if ((a.postWalkSignatures(), m++, _)) {
                  u = !0;
                  break;
                }
              }
            }
            if (!u) return l && 1 == m && (l.message = f.message), !1;
            u = !1;
          }
        }
        return !0;
      }),
      (i.prototype.signatureIsRelatableToTarget = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = this.sourceIsRelatableToTargetInCache(e, t, r, s);
        if (l) return l.isRelatable;
        r.setValueAt(e.pullSymbolID, t.pullSymbolID, !0);
        var c = this.signatureIsRelatableToTargetWorker(e, t, n, r, i, o, s, a);
        return r.setValueAt(e.pullSymbolID, t.pullSymbolID, c), c;
      }),
      (i.prototype.signatureIsRelatableToTargetWorker = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l
      ) {
        var c = this,
          u = t.parameters,
          p = n.parameters;
        if (!u || !p) return !1;
        var h = (n.nonOptionalParamCount, t.nonOptionalParamCount);
        if (!n.hasVarArgs && h > p.length)
          return (
            a &&
              ((a.flags |= 3),
              a.addMessage(
                e.getDiagnosticMessage(
                  e.DiagnosticCode.Call_signature_expects_0_or_fewer_parameters,
                  [p.length]
                )
              )),
            !1
          );
        if (this.signaturesAreIdentical(t, n, s)) return !0;
        n.isGeneric() && (n = this.instantiateSignatureToAny(n)),
          t.isGeneric() && (t = this.instantiateSignatureToAny(t));
        var d = t.returnType,
          m = n.returnType;
        if (m !== this.semanticInfoChain.voidTypeSymbol) {
          s.walkReturnTypes();
          var f = this.sourceIsRelatableToTargetInEnclosingTypes(
            d,
            m,
            r,
            i,
            o,
            s,
            a,
            l
          );
          if ((s.postWalkReturnTypes(), !f)) return a && (a.flags |= 16), !1;
        }
        return n.forAllCorrespondingParameterTypesInThisAndOtherSignature(
          t,
          function (e, t, n) {
            s.walkParameterTypes(n);
            var u = c.sourceIsRelatableToTargetInEnclosingTypes(
              t,
              e,
              r,
              i,
              o,
              s,
              a,
              l
            );
            return (
              u ||
                (s.swapEnclosingTypeWalkers(),
                (u = c.sourceIsRelatableToTargetInEnclosingTypes(
                  e,
                  t,
                  r,
                  i,
                  o,
                  s,
                  a,
                  l
                )),
                s.swapEnclosingTypeWalkers()),
              s.postWalkParameterTypes(),
              u || (a && (a.flags |= 64)),
              u
            );
          }
        );
      }),
      (i.prototype.resolveOverloads = function (t, n, r, i, o) {
        for (
          var s = this,
            a = n.length > 1,
            l = new h(),
            c = t.argumentList ? t.argumentList.arguments : null,
            u = e.ArrayUtilities.where(n, function (e) {
              if (a && e.isDefinition()) return !1;
              var t = e.getRootSymbol();
              return r && !t.isGeneric() ? !1 : s.overloadHasCorrectArity(e, c);
            }),
            p = null,
            d = null,
            m = 0;
          m < u.length;
          m++
        ) {
          var f = this.overloadIsApplicable(u[m], c, i, l);
          if (3 === f) return u[m];
          2 !== f || p ? 1 !== f || d || (d = u[m]) : (p = u[m]);
        }
        if (p || d) return p || d;
        var g = this.getCallTargetErrorSpanAST(t);
        return (
          l.message
            ? o.push(
                this.semanticInfoChain.diagnosticFromAST(
                  g,
                  e.DiagnosticCode
                    .Supplied_parameters_do_not_match_any_signature_of_call_target_NL_0,
                  [l.message]
                )
              )
            : o.push(
                this.semanticInfoChain.diagnosticFromAST(
                  g,
                  e.DiagnosticCode
                    .Supplied_parameters_do_not_match_any_signature_of_call_target,
                  null
                )
              ),
          null
        );
      }),
      (i.prototype.getCallTargetErrorSpanAST = function (e) {
        return 212 === e.expression.kind() ? e.expression.name : e.expression;
      }),
      (i.prototype.overloadHasCorrectArity = function (e, t) {
        if (null == t) return 0 === e.nonOptionalParamCount;
        var n =
          t.nonSeparatorCount() && t.nonSeparatorCount() === t.separatorCount()
            ? t.separatorCount() + 1
            : t.nonSeparatorCount();
        return n < e.nonOptionalParamCount
          ? !1
          : !e.hasVarArgs && n > e.parameters.length
          ? !1
          : !0;
      }),
      (i.prototype.overloadIsApplicable = function (e, t, n, r) {
        if (null === t) return 3;
        for (
          var i = !1, o = e.parameters, s = null, a = 3, l = 0;
          l < t.nonSeparatorCount();
          l++
        ) {
          i ||
            (this.resolveDeclaredSymbol(o[l], n),
            o[l].isVarArg
              ? ((s =
                  o[l].type.getElementType() ||
                  this.getNewErrorTypeSymbol(o[l].type.getName())),
                (i = !0))
              : (s = o[l].type));
          var c = this.overloadIsApplicableForArgument(
            s,
            t.nonSeparatorAt(l),
            l,
            n,
            r
          );
          if (0 === c) return 0;
          1 === c ? (a = 1) : 1 !== a && 2 === c && (a = 2);
        }
        return a;
      }),
      (i.prototype.overloadIsApplicableForArgument = function (t, n, r, i, o) {
        if (t.isAny()) return 3;
        if (t.isError()) return 1;
        if (219 === n.kind()) {
          var s = n;
          return this.overloadIsApplicableForAnyFunctionExpressionArgument(
            t,
            n,
            null,
            e.ASTHelpers.parametersFromIdentifier(s.identifier),
            null,
            s.block,
            s.expression,
            r,
            i,
            o
          );
        }
        if (218 === n.kind()) {
          var a = n;
          return this.overloadIsApplicableForAnyFunctionExpressionArgument(
            t,
            n,
            a.callSignature.typeParameterList,
            e.ASTHelpers.parametersFromParameterList(
              a.callSignature.parameterList
            ),
            e.ASTHelpers.getType(a),
            a.block,
            a.expression,
            r,
            i,
            o
          );
        }
        if (222 === n.kind()) {
          var l = n;
          return this.overloadIsApplicableForAnyFunctionExpressionArgument(
            t,
            n,
            l.callSignature.typeParameterList,
            e.ASTHelpers.parametersFromParameterList(
              l.callSignature.parameterList
            ),
            e.ASTHelpers.getType(l),
            l.block,
            null,
            r,
            i,
            o
          );
        }
        return 215 === n.kind()
          ? this.overloadIsApplicableForObjectLiteralArgument(t, n, r, i, o)
          : 214 === n.kind()
          ? this.overloadIsApplicableForArrayLiteralArgument(t, n, r, i, o)
          : this.overloadIsApplicableForOtherArgument(t, n, r, i, o);
      }),
      (i.prototype.overloadIsApplicableForAnyFunctionExpressionArgument = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s,
        a,
        l,
        c
      ) {
        if (
          this.cachedFunctionInterfaceType() &&
          e === this.cachedFunctionInterfaceType()
        )
          return 2;
        l.pushProvisionalType(e);
        var u = this.resolveAnyFunctionExpression(t, n, r, i, o, s, !0, l),
          p = this.overloadIsApplicableForArgumentHelper(e, u.type, a, c, t, l);
        return l.popAnyContextualType(), p;
      }),
      (i.prototype.overloadIsApplicableForObjectLiteralArgument = function (
        e,
        t,
        n,
        r,
        i
      ) {
        if (
          this.cachedObjectInterfaceType() &&
          e === this.cachedObjectInterfaceType()
        )
          return 2;
        r.pushProvisionalType(e);
        var o = this.resolveObjectLiteralExpression(t, !0, r),
          s = this.overloadIsApplicableForArgumentHelper(e, o.type, n, i, t, r);
        return r.popAnyContextualType(), s;
      }),
      (i.prototype.overloadIsApplicableForArrayLiteralArgument = function (
        e,
        t,
        n,
        r,
        i
      ) {
        if (e === this.cachedArrayInterfaceType()) return 2;
        r.pushProvisionalType(e);
        var o = this.resolveArrayLiteralExpression(t, !0, r),
          s = this.overloadIsApplicableForArgumentHelper(e, o.type, n, i, t, r);
        return r.popAnyContextualType(), s;
      }),
      (i.prototype.overloadIsApplicableForOtherArgument = function (
        e,
        t,
        n,
        r,
        i
      ) {
        var o = this.resolveAST(t, !1, r);
        if (o.type.isAlias()) {
          var s = o.type;
          o = s.getExportAssignedTypeSymbol();
        }
        return (
          (i.stringConstantVal = t),
          this.overloadIsApplicableForArgumentHelper(e, o.type, n, i, t, r)
        );
      }),
      (i.prototype.overloadIsApplicableForArgumentHelper = function (
        t,
        n,
        r,
        i,
        o,
        s
      ) {
        var a = new h();
        if (
          ((a.stringConstantVal = i.stringConstantVal),
          !s.hasProvisionalErrors() &&
            this.sourceIsSubtypeOfTarget(n.type, t, o, s, a))
        )
          return 3;
        if (this.sourceIsAssignableToTarget(n.type, t, o, s, i.message ? a : i))
          return s.hasProvisionalErrors() ? 1 : 2;
        if (!i.message) {
          var l = this.getEnclosingSymbolForAST(o);
          i.addMessage(
            e.getDiagnosticMessage(
              e.DiagnosticCode
                .Could_not_apply_type_0_to_argument_1_which_is_of_type_2,
              [t.toString(l), r + 1, n.getTypeName(l)]
            )
          );
        }
        return 0;
      }),
      (i.prototype.inferArgumentTypesForSignature = function (t, n, r) {
        var i = t.inferTypeArguments(),
          o = t.signatureBeingInferred.getTypeParameters();
        e.Debug.assert(o.length == i.length);
        for (var s = null, a = 0; a < i.length; a++)
          if (o[a].getConstraint()) {
            s =
              s ||
              e.PullInstantiationHelpers.createTypeParameterArgumentMap(o, i);
            var l = this.instantiateType(o[a].getConstraint(), s);
            this.sourceIsAssignableToTargetWithNewEnclosingTypes(
              i[a],
              l,
              null,
              r,
              null,
              !1
            ) || (i[a] = l);
          }
        if (t.isInvocationInferenceContext()) {
          var c = t;
          if (!this.typeParametersAreInScopeAtArgumentList(o, c.argumentASTs))
            for (var a = 0; a < i.length; a++)
              i[a].wrapsSomeTypeParameter(t.candidateCache) &&
                (i[a] = this.semanticInfoChain.anyTypeSymbol);
        }
        return i;
      }),
      (i.prototype.typeParametersAreInScopeAtArgumentList = function (e, t) {
        var n = this.getEnclosingDeclForAST(t),
          r = e[0].getDeclarations()[0].getParentDecl();
        return n.getParentPath().indexOf(r) > -1;
      }),
      (i.prototype.relateTypeToTypeParametersInEnclosingType = function (
        e,
        t,
        n,
        r
      ) {
        return e && t && r.oneOfClassificationsIsInfinitelyExpanding()
          ? (this.relateInifinitelyExpandingTypeToTypeParameters(e, t, n, r),
            void 0)
          : (this.relateTypeToTypeParameters(e, t, n, r), void 0);
      }),
      (i.prototype.relateTypeToTypeParametersWithNewEnclosingTypes = function (
        e,
        t,
        n,
        r
      ) {
        var i = r.resetEnclosingTypeWalkers();
        this.relateTypeToTypeParameters(e, t, n, r),
          r.setEnclosingTypeWalkers(i);
      }),
      (i.prototype.relateTypeToTypeParameters = function (t, n, r, i) {
        if (t && n) {
          if (
            (t.isError() && (t = this.semanticInfoChain.anyTypeSymbol),
            n.isTypeParameter())
          ) {
            var o = n;
            return r.addCandidateForInference(o, t), void 0;
          }
          if (!n.isNamedTypeSymbol() || n.isGeneric() || n.getTypeArguments())
            if (
              e.PullInstantiationHelpers.twoTypesAreInstantiationsOfSameNamedGenericType(
                t,
                n
              )
            )
              this.relateTypeArgumentsOfTypeToTypeParameters(t, n, r, i);
            else {
              var s = i.startWalkingTypes(t, n);
              this.relateObjectTypeToTypeParameters(t, n, r, i),
                i.endWalkingTypes(s);
            }
        }
      }),
      (i.prototype.relateTypeArgumentsOfTypeToTypeParameters = function (
        t,
        n,
        r,
        i
      ) {
        var o = n.getTypeArguments(),
          s = t.getTypeArguments();
        e.Debug.assert(o && s && o.length === s.length);
        for (var a = 0; a < o.length; a++)
          this.relateTypeToTypeParametersWithNewEnclosingTypes(
            s[a],
            o[a],
            r,
            i
          );
      }),
      (i.prototype.relateInifinitelyExpandingTypeToTypeParameters = function (
        t,
        n,
        r,
        i
      ) {
        if (t && n) {
          var o = e.PullHelpers.getRootType(t),
            s = e.PullHelpers.getRootType(n);
          if (o === s) {
            var a = t.getTypeArguments(),
              l = n.getTypeArguments();
            if (a && l && a.length === l.length)
              for (var c = 0; c < a.length; c++)
                this.relateTypeArgumentsOfTypeToTypeParameters(t, n, r, i);
          }
        }
      }),
      (i.prototype.relateFunctionSignatureToTypeParameters = function (
        e,
        t,
        n,
        r
      ) {
        var i = this,
          o = e.returnType,
          s = t.returnType;
        t.forAllCorrespondingParameterTypesInThisAndOtherSignature(e, function (
          e,
          t,
          o
        ) {
          return (
            r.walkParameterTypes(o),
            i.relateTypeToTypeParametersInEnclosingType(t, e, n, r),
            r.postWalkParameterTypes(),
            !0
          );
        }),
          r.walkReturnTypes(),
          this.relateTypeToTypeParametersInEnclosingType(o, s, n, r),
          r.postWalkReturnTypes();
      }),
      (i.prototype.relateObjectTypeToTypeParameters = function (e, t, n, r) {
        var i,
          o = t.getMembers();
        if (!n.alreadyRelatingTypes(e, t)) {
          for (var s = 0; s < o.length; s++)
            (i = this.getNamedPropertySymbol(o[s].name, 68147712, e)),
              i &&
                (this.resolveDeclaredSymbol(i),
                this.resolveDeclaredSymbol(o[s]),
                r.walkMemberTypes(o[s].name),
                this.relateTypeToTypeParametersInEnclosingType(
                  i.type,
                  o[s].type,
                  n,
                  r
                ),
                r.postWalkMemberTypes());
          this.relateSignatureGroupToTypeParameters(
            e.getCallSignatures(),
            t.getCallSignatures(),
            1048576,
            n,
            r
          ),
            this.relateSignatureGroupToTypeParameters(
              e.getConstructSignatures(),
              t.getConstructSignatures(),
              2097152,
              n,
              r
            );
          var a = this.getBothKindsOfIndexSignaturesExcludingAugmentedType(
              t,
              r
            ),
            l = this.getBothKindsOfIndexSignaturesExcludingAugmentedType(e, r),
            c = r.getBothKindOfIndexSignatures(!1, !1);
          a.stringSignature &&
            l.stringSignature &&
            (r.walkIndexSignatureReturnTypes(c, !0, !0, !0),
            this.relateFunctionSignatureToTypeParameters(
              l.stringSignature,
              a.stringSignature,
              n,
              r
            ),
            r.postWalkIndexSignatureReturnTypes(!0)),
            a.numericSignature &&
              l.numericSignature &&
              (r.walkIndexSignatureReturnTypes(c, !1, !1, !0),
              this.relateFunctionSignatureToTypeParameters(
                l.numericSignature,
                a.numericSignature,
                n,
                r
              ),
              r.postWalkIndexSignatureReturnTypes(!0));
        }
      }),
      (i.prototype.relateSignatureGroupToTypeParameters = function (
        e,
        t,
        n,
        r,
        i
      ) {
        for (var o = 0; o < t.length; o++) {
          var s = t[o];
          e.length > 0 &&
            s.isGeneric() &&
            (s = this.instantiateSignatureToAny(s));
          for (var a = 0; a < e.length; a++) {
            var l = e[a];
            l.nonOptionalParamCount > s.nonOptionalParamCount ||
              (l.isGeneric() && (l = this.instantiateSignatureToAny(l)),
              i.walkSignatures(n, a, o),
              this.relateFunctionSignatureToTypeParameters(l, s, r, i),
              i.postWalkSignatures());
          }
        }
      }),
      (i.prototype.alterPotentialGenericFunctionTypeToInstantiatedFunctionTypeForTypeArgumentInference = function (
        t,
        n
      ) {
        var r = n.getContextualType();
        e.Debug.assert(r);
        var i = t.type;
        if (
          this.isFunctionTypeWithExactlyOneCallSignatureAndNoOtherMembers(
            i,
            !0
          ) &&
          this.isFunctionTypeWithExactlyOneCallSignatureAndNoOtherMembers(r, !1)
        ) {
          var o = i.getCallSignatures()[0],
            s = r.getCallSignatures()[0],
            a = this.instantiateSignatureInContext(o, s, n, !0);
          if (null === a) return t;
          var l = new e.PullTypeSymbol("", 16777216);
          return l.appendCallSignature(a), l;
        }
        return t;
      }),
      (i.prototype.isFunctionTypeWithExactlyOneCallSignatureAndNoOtherMembers = function (
        t,
        n
      ) {
        if ((e.Debug.assert(t), 1 !== t.getCallSignatures().length)) return !1;
        var r = t.getCallSignatures()[0].isGeneric();
        if (r !== n) return !1;
        var i =
          t.getConstructSignatures().length ||
          t.getIndexSignatures().length ||
          t.getAllMembers(68147712, 0).length;
        return i ? !1 : !0;
      }),
      (i.prototype.instantiateTypeToAny = function (e) {
        var t = e.getTypeParameters();
        if (!t.length) return e;
        var n = null;
        if (
          (this._cachedAnyTypeArgs ||
            (this._cachedAnyTypeArgs = [
              [this.semanticInfoChain.anyTypeSymbol],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
            ]),
          t.length < this._cachedAnyTypeArgs.length)
        )
          n = this._cachedAnyTypeArgs[t.length - 1];
        else {
          n = [];
          for (var r = 0; r < t.length; r++)
            n[n.length] = this.semanticInfoChain.anyTypeSymbol;
        }
        var i = this.createInstantiatedType(e, n);
        return i;
      }),
      (i.prototype.instantiateSignatureToAny = function (t) {
        var n = t.getTypeParameters();
        if (
          (this._cachedAnyTypeArgs ||
            (this._cachedAnyTypeArgs = [
              [this.semanticInfoChain.anyTypeSymbol],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
              [
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
                this.semanticInfoChain.anyTypeSymbol,
              ],
            ]),
          n.length < this._cachedAnyTypeArgs.length)
        )
          var r = this._cachedAnyTypeArgs[n.length - 1];
        else
          for (var r = [], i = 0; i < n.length; i++)
            r[r.length] = this.semanticInfoChain.anyTypeSymbol;
        var o = e.PullInstantiationHelpers.createTypeParameterArgumentMap(n, r);
        return this.instantiateSignature(t, o);
      }),
      (i.typeCheck = function (t, n, r) {
        var i = r.sourceUnit(),
          o = n.getResolver(),
          s = new e.PullTypeResolutionContext(o, !0, i.fileName());
        if (o.canTypeCheckAST(i, s)) {
          for (
            o.resolveAST(i, !1, s),
              o.validateVariableDeclarationGroups(n.getDeclForAST(i), s);
            o.typeCheckCallBacks.length;

          ) {
            var a = o.typeCheckCallBacks.pop();
            a(s);
          }
          o.processPostTypeCheckWorkItems(s);
        }
      }),
      (i.prototype.validateVariableDeclarationGroups = function (t, n) {
        var r = this;
        this.scanVariableDeclarationGroups(
          t,
          function () {},
          function (t, i) {
            if (!e.hasFlag(t.kind, 2048) && !e.hasFlag(t.flags, 8388608)) {
              var o = r.semanticInfoChain.getASTForDecl(t),
                s = t.getSymbol(),
                a = s.type,
                l = i.type;
              a &&
                l &&
                a !== l &&
                !r.typesAreIdentical(a, l, n) &&
                n.postDiagnostic(
                  r.semanticInfoChain.diagnosticFromAST(
                    o,
                    e.DiagnosticCode
                      .Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2,
                    [s.getScopedName(), l.toString(i), a.toString(s)]
                  )
                );
            }
          }
        );
      }),
      (i.prototype.typeCheckFunctionOverloads = function (t, n, r, i) {
        if (!r) {
          var o = e.PullHelpers.getSignatureForFuncDecl(
            this.semanticInfoChain.getDeclForAST(t)
          );
          (r = o.signature), (i = o.allSignatures);
        }
        for (
          var s = this.semanticInfoChain.getDeclForAST(t),
            a = s.getSymbol(),
            l = null,
            c = i.length - 1;
          c >= 0;
          c--
        )
          if (i[c].isDefinition()) {
            l = i[c];
            break;
          }
        if (!r.isDefinition())
          for (
            var u = r.getDeclarations()[0].getParentDecl(), c = 0;
            c < i.length && i[c] !== r;
            c++
          ) {
            var p = i[c].getDeclarations()[0].getParentDecl();
            if (
              p === u &&
              this.signaturesAreIdenticalWithNewEnclosingTypes(i[c], r, n, !1)
            ) {
              this.signatureReturnTypesAreIdentical(i[c], r, n)
                ? 137 === t.kind()
                  ? n.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Duplicate_constructor_overload_signature
                      )
                    )
                  : 2097152 === s.kind
                  ? n.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Duplicate_overload_construct_signature
                      )
                    )
                  : 1048576 === s.kind
                  ? n.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Duplicate_overload_call_signature
                      )
                    )
                  : n.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode.Duplicate_overload_signature_for_0,
                        [a.getScopedNameEx().toString()]
                      )
                    )
                : n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Overloads_cannot_differ_only_by_return_type
                    )
                  );
              break;
            }
          }
        var d = r.isStringConstantOverloadSignature();
        if (d)
          if (r.isDefinition())
            n.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                t,
                e.DiagnosticCode
                  .Overload_signature_implementation_cannot_use_specialized_type
              )
            );
          else {
            for (var m = !1, c = 0; c < i.length; c++)
              if (
                !i[c].isDefinition() &&
                i[c] !== r &&
                (i[c].isResolved || this.resolveDeclaredSymbol(i[c], n),
                !i[c].isStringConstantOverloadSignature() &&
                  this.signatureIsAssignableToTarget(r, i[c], null, n))
              ) {
                m = !0;
                break;
              }
            m ||
              n.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature
                )
              );
          }
        else if (l && l !== r) {
          var f = new h();
          l.isResolved || this.resolveDeclaredSymbol(l, n),
            this.signatureIsAssignableToTarget(l, r, t, n, f) ||
              (f.message
                ? n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Overload_signature_is_not_compatible_with_function_definition_NL_0,
                      [f.message]
                    )
                  )
                : n.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Overload_signature_is_not_compatible_with_function_definition
                    )
                  ));
        }
        var g = l;
        if (!l) {
          if (i[0] === r) return;
          g = i[0];
        }
        if (137 !== t.kind() && 2097152 !== s.kind && g && r !== g) {
          var v;
          g.anyDeclHasFlag(2) !== r.anyDeclHasFlag(2)
            ? (v =
                e.DiagnosticCode
                  .Overload_signatures_must_all_be_public_or_private)
            : g.anyDeclHasFlag(1) !== r.anyDeclHasFlag(1)
            ? (v =
                e.DiagnosticCode
                  .Overload_signatures_must_all_be_exported_or_not_exported)
            : g.anyDeclHasFlag(8) !== r.anyDeclHasFlag(8)
            ? (v =
                e.DiagnosticCode
                  .Overload_signatures_must_all_be_ambient_or_non_ambient)
            : g.anyDeclHasFlag(128) !== r.anyDeclHasFlag(128) &&
              (v =
                e.DiagnosticCode
                  .Overload_signatures_must_all_be_optional_or_required),
            v &&
              n.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(t, v));
        }
      }),
      (i.prototype.checkSymbolPrivacy = function (e, t, n) {
        if (t && 2 !== t.kind) {
          if (t.isType()) {
            var r = t,
              i = r.isNamedTypeSymbol();
            if (r.isArrayNamedTypeReference())
              return this.checkSymbolPrivacy(e, r.getElementType(), n), void 0;
            if (!i) {
              var o = r.getTypeOfSymbol();
              if (o) return this.checkSymbolPrivacy(e, o, n), void 0;
            }
            if (r.inSymbolPrivacyCheck) return;
            r.inSymbolPrivacyCheck = !0;
            var s = r.getTypeArgumentsOrTypeParameters();
            if (s)
              for (var a = 0; a < s.length; a++)
                this.checkSymbolPrivacy(e, s[a], n);
            if (i)
              8192 === r.kind &&
                this.checkSymbolPrivacy(e, r.getConstraint(), n);
            else {
              for (var l = r.getMembers(), a = 0; a < l.length; a++)
                this.checkSymbolPrivacy(e, l[a].type, n);
              this.checkTypePrivacyOfSignatures(e, r.getCallSignatures(), n),
                this.checkTypePrivacyOfSignatures(
                  e,
                  r.getConstructSignatures(),
                  n
                ),
                this.checkTypePrivacyOfSignatures(e, r.getIndexSignatures(), n);
            }
            if (((r.inSymbolPrivacyCheck = !1), !i)) return;
          }
          if (e.isExternallyVisible()) {
            var c = t.isExternallyVisible();
            if (c && 8192 !== t.kind) {
              var u = t.pathToRoot(),
                p = e.pathToRoot();
              if (
                32 === u[u.length - 1].kind &&
                32 === p[p.length - 1].kind &&
                p[p.length - 1] !== u[u.length - 1]
              ) {
                c = !1;
                for (var h = p[p.length - 1], a = u.length - 1; a >= 0; a--) {
                  var d = u[a].getExternalAliasedSymbols(h);
                  if (d) {
                    (c = !0), d[0].setTypeUsedExternally();
                    break;
                  }
                }
                t = u[u.length - 1];
              }
            } else if (128 === t.kind) {
              var m = t;
              (c = !0), m.setTypeUsedExternally();
            }
            c || n(t);
          }
        }
      }),
      (i.prototype.checkTypePrivacyOfSignatures = function (e, t, n) {
        for (var r = 0; r < t.length; r++) {
          var i = t[r];
          if (!(t.length > 1 && i.isDefinition())) {
            for (var o = i.getTypeParameters(), s = 0; s < o.length; s++)
              this.checkSymbolPrivacy(e, o[s], n);
            for (var a = i.parameters, s = 0; s < a.length; s++) {
              var l = a[s].type;
              this.checkSymbolPrivacy(e, l, n);
            }
            var c = i.returnType;
            this.checkSymbolPrivacy(e, c, n);
          }
        }
      }),
      (i.prototype.typeParameterOfTypeDeclarationPrivacyErrorReporter = function (
        t,
        n,
        r,
        i,
        o
      ) {
        var s,
          a = this.semanticInfoChain.getDeclForAST(t),
          l = this.getEnclosingDecl(a),
          c = l ? l.getSymbol() : null,
          u = (131 === t.kind() ? t.typeParameterList : t.typeParameterList, i),
          p = u.getScopedName(c);
        u.isContainer() && !u.isEnum()
          ? (e.isQuoted(p) || (p = "'" + p + "'"),
            (s =
              131 === t.kind()
                ? e.DiagnosticCode
                    .TypeParameter_0_of_exported_class_is_using_inaccessible_module_1
                : e.DiagnosticCode
                    .TypeParameter_0_of_exported_interface_is_using_inaccessible_module_1))
          : (s =
              131 === t.kind()
                ? e.DiagnosticCode
                    .TypeParameter_0_of_exported_class_has_or_is_using_private_type_1
                : e.DiagnosticCode
                    .TypeParameter_0_of_exported_interface_has_or_is_using_private_type_1);
        var h = [r.getScopedName(c, !1, !0), p];
        o.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(n, s, h));
      }),
      (i.prototype.baseListPrivacyErrorReporter = function (t, n, r, i, o, s) {
        var a,
          l = this.semanticInfoChain.getDeclForAST(t),
          c = this.getEnclosingDecl(l),
          u = c ? c.getSymbol() : null,
          p = o,
          h = p.getScopedName(u);
        p.isContainer() && !p.isEnum()
          ? (e.isQuoted(h) || (h = "'" + h + "'"),
            (a =
              131 === t.kind()
                ? i
                  ? e.DiagnosticCode
                      .Exported_class_0_extends_class_from_inaccessible_module_1
                  : e.DiagnosticCode
                      .Exported_class_0_implements_interface_from_inaccessible_module_1
                : e.DiagnosticCode
                    .Exported_interface_0_extends_interface_from_inaccessible_module_1))
          : (a =
              131 === t.kind()
                ? i
                  ? e.DiagnosticCode.Exported_class_0_extends_private_class_1
                  : e.DiagnosticCode
                      .Exported_class_0_implements_private_interface_1
                : e.DiagnosticCode
                    .Exported_interface_0_extends_private_interface_1);
        var d = [n.getScopedName(u), h];
        s.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(r, a, d));
      }),
      (i.prototype.variablePrivacyErrorReporter = function (t, n, r, i) {
        var o = r,
          s = this.getEnclosingDecl(n.getDeclarations()[0]),
          a = s ? s.getSymbol() : null,
          l = 4096 === n.kind,
          c = !1,
          u = n.getContainer();
        !u || (8 !== u.kind && 32768 !== u.kind) || (c = !0);
        var p,
          h = o.getScopedName(a);
        o.isContainer() && !o.isEnum()
          ? (e.isQuoted(h) || (h = "'" + h + "'"),
            (p = n.anyDeclHasFlag(16)
              ? e.DiagnosticCode
                  .Public_static_property_0_of_exported_class_is_using_inaccessible_module_1
              : l
              ? c
                ? e.DiagnosticCode
                    .Public_property_0_of_exported_class_is_using_inaccessible_module_1
                : e.DiagnosticCode
                    .Property_0_of_exported_interface_is_using_inaccessible_module_1
              : e.DiagnosticCode
                  .Exported_variable_0_is_using_inaccessible_module_1))
          : (p = n.anyDeclHasFlag(16)
              ? e.DiagnosticCode
                  .Public_static_property_0_of_exported_class_has_or_is_using_private_type_1
              : l
              ? c
                ? e.DiagnosticCode
                    .Public_property_0_of_exported_class_has_or_is_using_private_type_1
                : e.DiagnosticCode
                    .Property_0_of_exported_interface_has_or_is_using_private_type_1
              : e.DiagnosticCode
                  .Exported_variable_0_has_or_is_using_private_type_1);
        var d = [n.getScopedName(a), h];
        i.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(t, p, d));
      }),
      (i.prototype.checkFunctionTypePrivacy = function (e, t, n, r, i, o, s) {
        var a = this;
        if (
          !(
            222 === e.kind() ||
            241 === e.kind() ||
            (139 === e.kind() && 215 === e.parent.parent.kind()) ||
            (140 === e.kind() && 215 === e.parent.parent.kind())
          )
        ) {
          var l,
            c = this.semanticInfoChain.getDeclForAST(e),
            u = c.getSymbol(),
            p = 139 === e.kind(),
            h = 140 === e.kind(),
            d = 4194304 === c.kind;
          if (p || h) {
            var m = u;
            l = (p ? m.getGetter() : m.getSetter()).type.getCallSignatures()[0];
          } else {
            if (u) {
              if (
                65536 === u.kind &&
                !t &&
                !u.getContainer().isNamedTypeSymbol()
              )
                return;
            } else {
              var f = c.getParentDecl();
              if (
                ((u = f.getSymbol()), u && u.isType() && !u.isNamedTypeSymbol())
              )
                return;
            }
            l = c.getSignatureSymbol();
          }
          if (n && !p && !h && !d && 137 !== e.kind())
            for (var g = 0; g < n.typeParameters.nonSeparatorCount(); g++) {
              var v = n.typeParameters.nonSeparatorAt(g),
                y = this.resolveTypeParameterDeclaration(v, s);
              this.checkSymbolPrivacy(u, y, function (n) {
                return a.functionTypeArgumentArgumentTypePrivacyErrorReporter(
                  e,
                  t,
                  v,
                  y,
                  n,
                  s
                );
              });
            }
          if (!p && !d)
            for (var b = l.parameters, g = 0; g < b.length; g++)
              this.checkSymbolPrivacy(u, b[g].type, function (n) {
                return a.functionArgumentTypePrivacyErrorReporter(
                  e,
                  t,
                  r,
                  g,
                  b[g],
                  n,
                  s
                );
              });
          h ||
            this.checkSymbolPrivacy(u, l.returnType, function (n) {
              return a.functionReturnTypePrivacyErrorReporter(
                e,
                t,
                i,
                o,
                l.returnType,
                n,
                s
              );
            });
        }
      }),
      (i.prototype.functionTypeArgumentArgumentTypePrivacyErrorReporter = function (
        t,
        n,
        r,
        i,
        o,
        s
      ) {
        var a = this.semanticInfoChain.getDeclForAST(t),
          l = this.getEnclosingDecl(a),
          c = l ? l.getSymbol() : null,
          u = 65536 === a.kind,
          p = !1,
          h = a.getParentDecl();
        h && (8 === h.kind || n) && (p = !0);
        var d,
          m = o,
          f = m.getScopedName(c);
        if (
          (m.isContainer() && !m.isEnum()
            ? (e.isQuoted(f) || (f = "'" + f + "'"),
              (d =
                2097152 === a.kind
                  ? e.DiagnosticCode
                      .TypeParameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1
                  : 1048576 === a.kind
                  ? e.DiagnosticCode
                      .TypeParameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1
                  : u
                  ? n
                    ? e.DiagnosticCode
                        .TypeParameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1
                    : p
                    ? e.DiagnosticCode
                        .TypeParameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1
                    : e.DiagnosticCode
                        .TypeParameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1
                  : e.DiagnosticCode
                      .TypeParameter_0_of_exported_function_is_using_inaccessible_module_1))
            : (d =
                2097152 === a.kind
                  ? e.DiagnosticCode
                      .TypeParameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1
                  : 1048576 === a.kind
                  ? e.DiagnosticCode
                      .TypeParameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1
                  : u
                  ? n
                    ? e.DiagnosticCode
                        .TypeParameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1
                    : p
                    ? e.DiagnosticCode
                        .TypeParameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1
                    : e.DiagnosticCode
                        .TypeParameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1
                  : e.DiagnosticCode
                      .TypeParameter_0_of_exported_function_has_or_is_using_private_type_1),
          d)
        ) {
          var g = [i.getScopedName(c, !1, !0), f];
          s.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(r, d, g));
        }
      }),
      (i.prototype.functionArgumentTypePrivacyErrorReporter = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = this.semanticInfoChain.getDeclForAST(t),
          c = this.getEnclosingDecl(l),
          u = c ? c.getSymbol() : null,
          p = 139 === t.kind(),
          h = 140 === t.kind(),
          d = 65536 === l.kind,
          m = !1,
          f = l.getParentDecl();
        f && (8 === f.kind || n) && (m = !0);
        var g,
          v = s,
          y = v.getScopedName(u);
        if (
          (v.isContainer() && !v.isEnum()
            ? (e.isQuoted(y) || (y = "'" + y + "'"),
              137 === t.kind()
                ? (g =
                    e.DiagnosticCode
                      .Parameter_0_of_constructor_from_exported_class_is_using_inaccessible_module_1)
                : h
                ? (g = n
                    ? e.DiagnosticCode
                        .Parameter_0_of_public_static_property_setter_from_exported_class_is_using_inaccessible_module_1
                    : e.DiagnosticCode
                        .Parameter_0_of_public_property_setter_from_exported_class_is_using_inaccessible_module_1)
                : 2097152 === l.kind
                ? (g =
                    e.DiagnosticCode
                      .Parameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1)
                : 1048576 === l.kind
                ? (g =
                    e.DiagnosticCode
                      .Parameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1)
                : d
                ? (g = n
                    ? e.DiagnosticCode
                        .Parameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1
                    : m
                    ? e.DiagnosticCode
                        .Parameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1
                    : e.DiagnosticCode
                        .Parameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1)
                : p ||
                  (g =
                    e.DiagnosticCode
                      .Parameter_0_of_exported_function_is_using_inaccessible_module_1))
            : 137 === t.kind()
            ? (g =
                e.DiagnosticCode
                  .Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_type_1)
            : h
            ? (g = n
                ? e.DiagnosticCode
                    .Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_type_1
                : e.DiagnosticCode
                    .Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_type_1)
            : 2097152 === l.kind
            ? (g =
                e.DiagnosticCode
                  .Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1)
            : 1048576 === l.kind
            ? (g =
                e.DiagnosticCode
                  .Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1)
            : d
            ? (g = n
                ? e.DiagnosticCode
                    .Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1
                : m
                ? e.DiagnosticCode
                    .Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1
                : e.DiagnosticCode
                    .Parameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1)
            : p ||
              4194304 === l.kind ||
              (g =
                e.DiagnosticCode
                  .Parameter_0_of_exported_function_has_or_is_using_private_type_1),
          g)
        ) {
          var b = r.astAt(i),
            _ = [o.getScopedName(u), y];
          a.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(b, g, _));
        }
      }),
      (i.prototype.functionReturnTypePrivacyErrorReporter = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        var l = this,
          c = this.semanticInfoChain.getDeclForAST(t),
          u = this.getEnclosingDecl(c),
          p = 139 === t.kind(),
          h = 140 === t.kind(),
          d = 65536 === c.kind,
          m = !1,
          f = c.getParentDecl();
        f && (8 === f.kind || n) && (m = !0);
        var g = null,
          v = s,
          y = v.getScopedName(u ? u.getSymbol() : null);
        if (
          (v.isContainer() && !v.isEnum()
            ? (e.isQuoted(y) || (y = "'" + y + "'"),
              p
                ? (g = n
                    ? e.DiagnosticCode
                        .Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module_0
                    : e.DiagnosticCode
                        .Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module_0)
                : 2097152 === c.kind
                ? (g =
                    e.DiagnosticCode
                      .Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_0)
                : 1048576 === c.kind
                ? (g =
                    e.DiagnosticCode
                      .Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module_0)
                : 4194304 === c.kind
                ? (g =
                    e.DiagnosticCode
                      .Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module_0)
                : d
                ? (g = n
                    ? e.DiagnosticCode
                        .Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module_0
                    : m
                    ? e.DiagnosticCode
                        .Return_type_of_public_method_from_exported_class_is_using_inaccessible_module_0
                    : e.DiagnosticCode
                        .Return_type_of_method_from_exported_interface_is_using_inaccessible_module_0)
                : h ||
                  137 === t.kind() ||
                  (g =
                    e.DiagnosticCode
                      .Return_type_of_exported_function_is_using_inaccessible_module_0))
            : p
            ? (g = n
                ? e.DiagnosticCode
                    .Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type_0
                : e.DiagnosticCode
                    .Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type_0)
            : 2097152 === c.kind
            ? (g =
                e.DiagnosticCode
                  .Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_0)
            : 1048576 === c.kind
            ? (g =
                e.DiagnosticCode
                  .Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type_0)
            : 4194304 === c.kind
            ? (g =
                e.DiagnosticCode
                  .Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type_0)
            : d
            ? (g = n
                ? e.DiagnosticCode
                    .Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type_0
                : m
                ? e.DiagnosticCode
                    .Return_type_of_public_method_from_exported_class_has_or_is_using_private_type_0
                : e.DiagnosticCode
                    .Return_type_of_method_from_exported_interface_has_or_is_using_private_type_0)
            : h ||
              137 === t.kind() ||
              (g =
                e.DiagnosticCode
                  .Return_type_of_exported_function_has_or_is_using_private_type_0),
          g)
        ) {
          var b = [y],
            _ = !1;
          if (r) {
            var w = this.resolveTypeReference(r, a);
            e.PullHelpers.typeSymbolsAreIdentical(w, o) &&
              a.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(r, g, b)
              );
          }
          if (i) {
            var S = function (t, n) {
              var r = !0;
              switch (t.kind()) {
                case 129:
                case 219:
                case 218:
                case 222:
                  r = !1;
                  break;
                case 150:
                  var i = t,
                    s = l.resolveAST(i.expression, !1, a).type;
                  e.PullHelpers.typeSymbolsAreIdentical(s, o)
                    ? a.postDiagnostic(
                        l.semanticInfoChain.diagnosticFromAST(i, g, b)
                      )
                    : (_ = !0),
                    (r = !1);
              }
              return (n.options.goChildren = r), t;
            };
            e.getAstWalkerFactory().walk(i, S);
          }
          _ &&
            a.postDiagnostic(this.semanticInfoChain.diagnosticFromAST(t, g, b));
        }
      }),
      (i.prototype.enclosingClassIsDerived = function (t) {
        e.Debug.assert(8 === t.kind);
        var n = t.getSymbol();
        return n.getExtendedTypes().length > 0;
      }),
      (i.prototype.isSuperInvocationExpression = function (e) {
        if (213 === e.kind()) {
          var t = e;
          if (50 === t.expression.kind()) return !0;
        }
        return !1;
      }),
      (i.prototype.isSuperInvocationExpressionStatement = function (e) {
        if (e && 149 === e.kind()) {
          var t = e;
          if (this.isSuperInvocationExpression(t.expression)) return !0;
        }
        return !1;
      }),
      (i.prototype.getFirstStatementOfBlockOrNull = function (e) {
        return e && e.statements && e.statements.childCount() > 0
          ? e.statements.childAt(0)
          : null;
      }),
      (i.prototype.superCallMustBeFirstStatementInConstructor = function (t) {
        if ((e.Debug.assert(32768 === t.kind), t)) {
          var n = t.getParentDecl(),
            r = n.getSymbol();
          if (0 === r.getExtendedTypes().length) return !1;
          for (var i = r.getMembers(), o = 0, s = i.length; s > o; o++) {
            var a = i[o];
            if (4096 === a.kind)
              for (
                var l = a.getDeclarations(), c = 0, u = l.length;
                u > c;
                c++
              ) {
                var p = l[c],
                  h = this.semanticInfoChain.getASTForDecl(p);
                if (242 === h.kind()) return !0;
                if (136 === h.kind()) {
                  var d = h;
                  if (d.variableDeclarator.equalsValueClause) return !0;
                }
              }
          }
        }
        return !1;
      }),
      (i.prototype.checkForThisCaptureInArrowFunction = function (t) {
        var n = this.getEnclosingDeclForAST(t),
          r = n.getParentPath();
        if (r.length)
          for (var i = !1, o = r.length - 1; o >= 0; o--) {
            var s = r[o],
              a = s.kind,
              l = s.flags;
            if (131072 === a && e.hasFlag(l, 8192)) i = !0;
            else if (i) {
              if (
                16384 === a ||
                65536 === a ||
                32768 === a ||
                262144 === a ||
                524288 === a ||
                131072 === a ||
                8 === a ||
                4 === a ||
                32 === a ||
                1 === a
              ) {
                if ((s.setFlags(262144 | s.flags), 8 === a))
                  for (
                    var c = s.getSymbol().getConstructorMethod(),
                      u = c.getDeclarations(),
                      o = 0;
                    o < u.length;
                    o++
                  )
                    u[o].flags = 262144 | u[o].flags;
                break;
              }
            } else if (16384 === a || 131072 === a) break;
          }
      }),
      (i.prototype.typeCheckMembersAgainstIndexer = function (t, n, r) {
        var i = this.getBothKindsOfIndexSignaturesExcludingAugmentedType(t, r),
          o = i.stringSignature,
          s = i.numericSignature;
        if (o || s)
          for (var a = n.getChildDecls(), l = 0; l < a.length; l++) {
            var c = a[l];
            if (
              (c.name || (4096 === c.kind && "" === c.name)) &&
              32768 !== c.kind &&
              !e.hasFlag(c.flags, 16)
            ) {
              var u = c.getSymbol(),
                p = this.determineRelevantIndexerForMember(u, s, o);
              if (p) {
                var d = new h();
                this.sourceIsAssignableToTarget(
                  u.type,
                  p.returnType,
                  c.ast(),
                  r,
                  d
                ) ||
                  this.reportErrorThatMemberIsNotSubtypeOfIndexer(
                    u,
                    p,
                    c.ast(),
                    r,
                    d
                  );
              }
            }
          }
      }),
      (i.prototype.determineRelevantIndexerForMember = function (t, n, r) {
        return n && e.PullHelpers.isNameNumeric(t.name) ? n : r ? r : null;
      }),
      (i.prototype.reportErrorThatMemberIsNotSubtypeOfIndexer = function (
        t,
        n,
        r,
        i,
        o
      ) {
        var s = this.getEnclosingSymbolForAST(r);
        n.parameters[0].type === this.semanticInfoChain.numberTypeSymbol
          ? o.message
            ? i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  r,
                  e.DiagnosticCode
                    .All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0_NL_1,
                  [n.returnType.toString(s), o.message]
                )
              )
            : i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  r,
                  e.DiagnosticCode
                    .All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0,
                  [n.returnType.toString(s)]
                )
              )
          : o.message
          ? i.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                r,
                e.DiagnosticCode
                  .All_named_properties_must_be_assignable_to_string_indexer_type_0_NL_1,
                [n.returnType.toString(s), o.message]
              )
            )
          : i.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                r,
                e.DiagnosticCode
                  .All_named_properties_must_be_assignable_to_string_indexer_type_0,
                [n.returnType.toString(s)]
              )
            );
      }),
      (i.prototype.typeCheckIfTypeMemberPropertyOkToOverride = function (
        t,
        n,
        r,
        i,
        o,
        s
      ) {
        if (!t.isClass()) return !0;
        var a = r.kind,
          l = i.kind;
        if (a === l) return !0;
        var c;
        4096 === a
          ? (c = r.isAccessor()
              ? e.DiagnosticCode
                  .Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function
              : e.DiagnosticCode
                  .Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function)
          : 65536 === a &&
            (c = i.isAccessor()
              ? e.DiagnosticCode
                  .Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor
              : e.DiagnosticCode
                  .Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property);
        var u = e.getDiagnosticMessage(c, [
          t.toString(),
          r.getScopedNameEx().toString(),
          n.toString(),
        ]);
        return s.addMessage(u), !1;
      }),
      (i.prototype.typeCheckIfTypeExtendsType = function (t, n, r, i, o, s) {
        for (
          var a = r.getMembers(), l = new h(), c = !1, u = !1, p = !1, d = 0;
          d < a.length;
          d++
        ) {
          var m = a[d].name,
            f = i.findMember(m, !0);
          if (
            f &&
            (this.resolveDeclaredSymbol(f, s),
            (u = !this.typeCheckIfTypeMemberPropertyOkToOverride(
              r,
              i,
              a[d],
              f,
              o,
              l
            )),
            u ||
              (p = !this.sourcePropertyIsAssignableToTargetProperty(
                r,
                i,
                a[d],
                f,
                t,
                s,
                l
              )),
            u || p)
          ) {
            c = !0;
            break;
          }
        }
        if (
          (!c &&
            r.hasOwnCallSignatures() &&
            (c = !this.sourceCallSignaturesAreAssignableToTargetCallSignatures(
              r,
              i,
              t,
              s,
              l
            )),
          !c &&
            r.hasOwnConstructSignatures() &&
            (c = !this.sourceConstructSignaturesAreAssignableToTargetConstructSignatures(
              r,
              i,
              t,
              s,
              l
            )),
          !c &&
            r.hasOwnIndexSignatures() &&
            (c = !this.sourceIndexSignaturesAreAssignableToTargetIndexSignatures(
              r,
              i,
              t,
              s,
              l
            )),
          !c && r.isClass())
        ) {
          var g = r.getConstructorMethod().type,
            v = g.getMembers();
          if (v.length)
            for (
              var y = i.getConstructorMethod().type, d = (new h(l), 0);
              d < v.length;
              d++
            ) {
              var m = v[d].name,
                b = y.findMember(m, !0);
              if (
                b &&
                (b.isResolved || this.resolveDeclaredSymbol(b, s),
                !this.sourcePropertyIsAssignableToTargetProperty(
                  g,
                  y,
                  v[d],
                  b,
                  t,
                  s,
                  l
                ))
              ) {
                c = !0;
                break;
              }
            }
        }
        if (c) {
          var _;
          (_ = r.isClass()
            ? e.DiagnosticCode.Class_0_cannot_extend_class_1_NL_2
            : i.isClass()
            ? e.DiagnosticCode.Interface_0_cannot_extend_class_1_NL_2
            : e.DiagnosticCode.Interface_0_cannot_extend_interface_1_NL_2),
            s.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(n, _, [
                r.getScopedName(),
                i.getScopedName(),
                l.message,
              ])
            );
        }
      }),
      (i.prototype.typeCheckIfClassImplementsType = function (t, n, r, i, o) {
        var s = new h(),
          a = !this.sourceMembersAreAssignableToTargetMembers(n, r, t, o, s);
        if (
          (a ||
            ((a = !this.sourceCallSignaturesAreAssignableToTargetCallSignatures(
              n,
              r,
              t,
              o,
              s
            )),
            a ||
              ((a = !this.sourceConstructSignaturesAreAssignableToTargetConstructSignatures(
                n,
                r,
                t,
                o,
                s
              )),
              a ||
                (a = !this.sourceIndexSignaturesAreAssignableToTargetIndexSignatures(
                  n,
                  r,
                  t,
                  o,
                  s
                )))),
          a)
        ) {
          var l = this.getEnclosingSymbolForAST(t);
          o.postDiagnostic(
            this.semanticInfoChain.diagnosticFromAST(
              t.identifier,
              e.DiagnosticCode
                .Class_0_declares_interface_1_but_does_not_implement_it_NL_2,
              [n.getScopedName(l), r.getScopedName(l), s.message]
            )
          );
        }
      }),
      (i.prototype.computeValueSymbolFromAST = function (t, n) {
        var r = n.inTypeCheck;
        n.inTypeCheck = !1;
        var i = this.semanticInfoChain.getAliasSymbolForAST(t);
        if (11 == t.kind()) var o = this.computeNameExpression(t, n);
        else {
          e.Debug.assert(121 == t.kind());
          var s = t,
            a = this.computeValueSymbolFromAST(s.left, n),
            o = this.computeDottedNameExpressionFromLHS(
              a.symbol,
              s.left,
              s.right,
              n,
              !1
            );
        }
        var l = this.semanticInfoChain.getAliasSymbolForAST(t);
        return (
          this.semanticInfoChain.setAliasSymbolForAST(t, i),
          (n.inTypeCheck = r),
          { symbol: o, alias: l }
        );
      }),
      (i.prototype.hasClassTypeSymbolConflictAsValue = function (e, t, n, r) {
        var i = this.semanticInfoChain.getAliasSymbolForAST(e),
          o = 126 == e.kind() ? e.name : e,
          s = this.computeValueSymbolFromAST(o, r),
          a = s.symbol,
          l = s.alias;
        if (i && l) return i !== l;
        if (!a.anyDeclHasFlag(16384)) return !0;
        var c = a.type ? a.type.getAssociatedContainerType() : null;
        return c ? c !== t.getRootSymbol() : !0;
      }),
      (i.prototype.typeCheckBase = function (t, n, r, i, o, s, a) {
        var l = this,
          c =
            (this.semanticInfoChain.getDeclForAST(t),
            this.resolveTypeReference(i, a).type);
        if (c) {
          var u = r.isClass();
          if (!r.isValidBaseKind(c, o))
            return (
              c.isError() ||
                (o
                  ? u
                    ? a.postDiagnostic(
                        this.semanticInfoChain.diagnosticFromAST(
                          i,
                          e.DiagnosticCode.A_class_may_only_extend_another_class
                        )
                      )
                    : a.postDiagnostic(
                        this.semanticInfoChain.diagnosticFromAST(
                          i,
                          e.DiagnosticCode
                            .An_interface_may_only_extend_another_class_or_interface
                        )
                      )
                  : a.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        i,
                        e.DiagnosticCode
                          .A_class_may_only_implement_another_class_or_interface
                      )
                    )),
              void 0
            );
          if (
            (u &&
              o &&
              this.hasClassTypeSymbolConflictAsValue(i, c, s, a) &&
              a.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  i,
                  e.DiagnosticCode
                    .Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_1,
                  [
                    e.ASTHelpers.getNameOfIdenfierOrQualifiedName(
                      126 == i.kind() ? i.name : i
                    ),
                    c.toString(s ? s.getSymbol() : null),
                  ]
                )
              ),
            c.hasBase(r))
          )
            return (
              r.setHasBaseTypeConflict(),
              c.setHasBaseTypeConflict(),
              a.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  n,
                  u
                    ? e.DiagnosticCode
                        .Class_0_is_recursively_referenced_as_a_base_type_of_itself
                    : e.DiagnosticCode
                        .Interface_0_is_recursively_referenced_as_a_base_type_of_itself,
                  [r.getScopedName()]
                )
              ),
              void 0
            );
          o
            ? this.typeCheckCallBacks.push(function (e) {
                return l.typeCheckIfTypeExtendsType(t, n, r, c, s, e);
              })
            : (e.Debug.assert(131 === t.kind()),
              this.typeCheckCallBacks.push(function (e) {
                return l.typeCheckIfClassImplementsType(t, r, c, s, e);
              })),
            this.checkSymbolPrivacy(r, c, function (e) {
              return l.baseListPrivacyErrorReporter(t, r, i, o, e, a);
            });
        }
      }),
      (i.prototype.typeCheckBases = function (t, n, r, i, o, s) {
        var a = this,
          l = e.ASTHelpers.getExtendsHeritageClause(r),
          c = e.ASTHelpers.getImplementsHeritageClause(r);
        if (l || c) {
          if (l)
            for (var u = 0; u < l.typeNames.nonSeparatorCount(); u++)
              this.typeCheckBase(
                t,
                n,
                i,
                l.typeNames.nonSeparatorAt(u),
                !0,
                o,
                s
              );
          if (i.isClass()) {
            if (c)
              for (var u = 0; u < c.typeNames.nonSeparatorCount(); u++)
                this.typeCheckBase(
                  t,
                  n,
                  i,
                  c.typeNames.nonSeparatorAt(u),
                  !1,
                  o,
                  s
                );
          } else if (
            l &&
            !i.hasBaseTypeConflict() &&
            i.getExtendedTypes().length > 1
          ) {
            var p = e.ArrayUtilities.firstOrDefault(
              i.getDeclarations(),
              function (e) {
                return null !== e.ast().heritageClauses;
              }
            ).ast();
            t === p &&
              this.typeCheckCallBacks.push(function (e) {
                a.checkTypeCompatibilityBetweenBases(t.identifier, i, e);
              });
          }
        }
      }),
      (i.prototype.checkTypeCompatibilityBetweenBases = function (t, n, r) {
        var i = (n.getOwnIndexSignatures(), e.createIntrinsicsObject()),
          o = new u(),
          s = !1,
          a = !1;
        if (n.hasOwnIndexSignatures())
          for (var l = n.getOwnIndexSignatures(), c = 0; c < l.length; c++)
            l[c].parameters[0].type === this.semanticInfoChain.numberTypeSymbol
              ? (s = !0)
              : (a = !0);
        for (var p = n.getExtendedTypes(), c = 0; c < p.length; c++)
          if (
            this.checkNamedPropertyIdentityBetweenBases(t, n, p[c], i, r) ||
            this.checkIndexSignatureIdentityBetweenBases(t, n, p[c], o, s, a, r)
          )
            return;
        this.checkThatInheritedNumberSignatureIsSubtypeOfInheritedStringSignature(
          t,
          n,
          o,
          r
        ) ||
          this.checkInheritedMembersAgainstInheritedIndexSignatures(
            t,
            n,
            o,
            i,
            r
          );
      }),
      (i.prototype.checkNamedPropertyIdentityBetweenBases = function (
        t,
        n,
        r,
        i,
        o
      ) {
        for (var s = r.getAllMembers(69632, 0), a = 0; a < s.length; a++) {
          var c = s[a],
            u = c.name;
          if (!n.findMember(u, !1))
            if ((this.resolveDeclaredSymbol(c, o), i[u])) {
              var p = i[u];
              if (
                p.baseOrigin !== r &&
                !this.propertiesAreIdenticalWithNewEnclosingTypes(
                  r,
                  p.baseOrigin,
                  c,
                  p.memberSymbol,
                  o
                )
              ) {
                var h = e.getDiagnosticMessage(
                  e.DiagnosticCode
                    .Named_properties_0_of_types_1_and_2_are_not_identical,
                  [u, p.baseOrigin.getScopedName(), r.getScopedName()]
                );
                return (
                  o.postDiagnostic(
                    this.semanticInfoChain.diagnosticFromAST(
                      t,
                      e.DiagnosticCode
                        .Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3,
                      [
                        n.getDisplayName(),
                        p.baseOrigin.getScopedName(),
                        r.getScopedName(),
                        h,
                      ]
                    )
                  ),
                  !0
                );
              }
            } else i[u] = new l(c, r);
        }
        return !1;
      }),
      (i.prototype.checkIndexSignatureIdentityBetweenBases = function (
        t,
        n,
        r,
        i,
        o,
        s,
        a
      ) {
        if (o && s) return !1;
        for (var l = r.getIndexSignatures(), u = 0; u < l.length; u++) {
          var p = l[u],
            h =
              p.parameters[0].type === this.semanticInfoChain.stringTypeSymbol,
            d =
              p.parameters[0].type === this.semanticInfoChain.numberTypeSymbol;
          if (!((h && s) || (d && o)))
            if (h)
              if (i.stringSignatureWithBaseOrigin) {
                if (
                  i.stringSignatureWithBaseOrigin.baseOrigin !== r &&
                  !this.typesAreIdentical(
                    i.stringSignatureWithBaseOrigin.signature.returnType,
                    p.returnType,
                    a
                  )
                ) {
                  var m = e.getDiagnosticMessage(
                    e.DiagnosticCode
                      .Types_of_string_indexer_of_types_0_and_1_are_not_identical,
                    [
                      i.stringSignatureWithBaseOrigin.baseOrigin.getScopedName(),
                      r.getScopedName(),
                    ]
                  );
                  return (
                    a.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3,
                        [
                          n.getDisplayName(),
                          i.stringSignatureWithBaseOrigin.baseOrigin.getScopedName(),
                          r.getScopedName(),
                          m,
                        ]
                      )
                    ),
                    !0
                  );
                }
              } else i.stringSignatureWithBaseOrigin = new c(p, r);
            else if (d)
              if (i.numberSignatureWithBaseOrigin) {
                if (
                  i.numberSignatureWithBaseOrigin.baseOrigin !== r &&
                  !this.typesAreIdentical(
                    i.numberSignatureWithBaseOrigin.signature.returnType,
                    p.returnType,
                    a
                  )
                ) {
                  var m = e.getDiagnosticMessage(
                    e.DiagnosticCode
                      .Types_of_number_indexer_of_types_0_and_1_are_not_identical,
                    [
                      i.numberSignatureWithBaseOrigin.baseOrigin.getScopedName(),
                      r.getScopedName(),
                    ]
                  );
                  return (
                    a.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3,
                        [
                          n.getDisplayName(),
                          i.numberSignatureWithBaseOrigin.baseOrigin.getScopedName(),
                          r.getScopedName(),
                          m,
                        ]
                      )
                    ),
                    !0
                  );
                }
              } else i.numberSignatureWithBaseOrigin = new c(p, r);
        }
        return !1;
      }),
      (i.prototype.checkInheritedMembersAgainstInheritedIndexSignatures = function (
        t,
        n,
        r,
        i,
        o
      ) {
        if (
          !r.stringSignatureWithBaseOrigin &&
          !r.numberSignatureWithBaseOrigin
        )
          return !1;
        var s = new h(),
          a =
            r.stringSignatureWithBaseOrigin &&
            r.stringSignatureWithBaseOrigin.signature,
          l =
            r.numberSignatureWithBaseOrigin &&
            r.numberSignatureWithBaseOrigin.signature;
        for (var c in i) {
          var u = i[c];
          if (u) {
            var p = this.determineRelevantIndexerForMember(
              u.memberSymbol,
              l,
              a
            );
            if (p) {
              var d =
                  p.parameters[0].type ===
                  this.semanticInfoChain.numberTypeSymbol,
                m = d
                  ? r.numberSignatureWithBaseOrigin.baseOrigin
                  : r.stringSignatureWithBaseOrigin.baseOrigin;
              if (m !== u.baseOrigin) {
                var f = this.sourceIsAssignableToTarget(
                  u.memberSymbol.type,
                  p.returnType,
                  t,
                  o,
                  s
                );
                if (!f) {
                  var g = this.getEnclosingSymbolForAST(t);
                  if (d) {
                    var v = e.getDiagnosticMessage(
                      e.DiagnosticCode
                        .Type_of_property_0_in_type_1_is_not_assignable_to_number_indexer_type_in_type_2_NL_3,
                      [
                        c,
                        u.baseOrigin.getScopedName(g),
                        r.numberSignatureWithBaseOrigin.baseOrigin.getScopedName(
                          g
                        ),
                        s.message,
                      ]
                    );
                    o.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3,
                        [
                          n.getDisplayName(g),
                          u.baseOrigin.getScopedName(g),
                          r.numberSignatureWithBaseOrigin.baseOrigin.getScopedName(
                            g
                          ),
                          v,
                        ]
                      )
                    );
                  } else {
                    var v = e.getDiagnosticMessage(
                      e.DiagnosticCode
                        .Type_of_property_0_in_type_1_is_not_assignable_to_string_indexer_type_in_type_2_NL_3,
                      [
                        c,
                        u.baseOrigin.getScopedName(g),
                        r.stringSignatureWithBaseOrigin.baseOrigin.getScopedName(
                          g
                        ),
                        s.message,
                      ]
                    );
                    o.postDiagnostic(
                      this.semanticInfoChain.diagnosticFromAST(
                        t,
                        e.DiagnosticCode
                          .Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3,
                        [
                          n.getDisplayName(g),
                          u.baseOrigin.getScopedName(g),
                          r.stringSignatureWithBaseOrigin.baseOrigin.getScopedName(
                            g
                          ),
                          v,
                        ]
                      )
                    );
                  }
                  return !0;
                }
              }
            }
          }
        }
        return !1;
      }),
      (i.prototype.checkThatInheritedNumberSignatureIsSubtypeOfInheritedStringSignature = function (
        t,
        n,
        r,
        i
      ) {
        if (
          r.numberSignatureWithBaseOrigin &&
          r.stringSignatureWithBaseOrigin
        ) {
          if (
            r.numberSignatureWithBaseOrigin.baseOrigin ===
            r.stringSignatureWithBaseOrigin.baseOrigin
          )
            return !1;
          var o = new h(),
            s = this.sourceIsAssignableToTarget(
              r.numberSignatureWithBaseOrigin.signature.returnType,
              r.stringSignatureWithBaseOrigin.signature.returnType,
              t,
              i,
              o
            );
          if (!s) {
            var a = this.getEnclosingSymbolForAST(t),
              l = e.getDiagnosticMessage(
                e.DiagnosticCode
                  .Type_of_number_indexer_in_type_0_is_not_assignable_to_string_indexer_type_in_type_1_NL_2,
                [
                  r.numberSignatureWithBaseOrigin.baseOrigin.getScopedName(a),
                  r.stringSignatureWithBaseOrigin.baseOrigin.getScopedName(a),
                  o.message,
                ]
              );
            return (
              i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode
                    .Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3,
                  [
                    n.getDisplayName(a),
                    r.numberSignatureWithBaseOrigin.baseOrigin.getScopedName(),
                    r.stringSignatureWithBaseOrigin.baseOrigin.getScopedName(a),
                    l,
                  ]
                )
              ),
              !0
            );
          }
        }
        return !1;
      }),
      (i.prototype.checkAssignability = function (t, n, r, i) {
        var o = new h(),
          s = this.sourceIsAssignableToTarget(n, r, t, i, o);
        if (!s) {
          var a = this.getEnclosingSymbolForAST(t);
          o.message
            ? i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Cannot_convert_0_to_1_NL_2,
                  [n.toString(a), r.toString(a), o.message]
                )
              )
            : i.postDiagnostic(
                this.semanticInfoChain.diagnosticFromAST(
                  t,
                  e.DiagnosticCode.Cannot_convert_0_to_1,
                  [n.toString(a), r.toString(a)]
                )
              );
        }
      }),
      (i.prototype.isReference = function (e, t) {
        if (217 === e.kind()) return this.isReference(e.expression, t);
        if (11 !== e.kind() && 212 !== e.kind() && 221 !== e.kind()) return !1;
        if (11 === e.kind()) {
          if (512 === t.kind && t.anyDeclHasFlag(4096)) return !1;
          if (512 === t.kind && t.anyDeclHasFlag(102400)) return !1;
          if (32768 === t.kind || 16384 === t.kind) return !1;
        }
        return 212 === e.kind() && 67108864 === t.kind ? !1 : !0;
      }),
      (i.prototype.checkForSuperMemberAccess = function (t, n, r, i) {
        return r && 50 === t.kind() && !r.isError() && 65536 !== r.kind
          ? (i.postDiagnostic(
              this.semanticInfoChain.diagnosticFromAST(
                n,
                e.DiagnosticCode
                  .Only_public_methods_of_the_base_class_are_accessible_via_the_super_keyword
              )
            ),
            !0)
          : !1;
      }),
      (i.prototype.getEnclosingDeclForAST = function (e) {
        return this.semanticInfoChain.getEnclosingDecl(e);
      }),
      (i.prototype.getEnclosingSymbolForAST = function (e) {
        var t = this.getEnclosingDeclForAST(e);
        return t ? t.getSymbol() : null;
      }),
      (i.prototype.checkForPrivateMemberAccess = function (t, n, r, i) {
        if (r && r.anyDeclHasFlag(2)) {
          var o = r.getContainer();
          if (
            (o && 33554432 === o.kind && (o = o.getAssociatedContainerType()),
            o && o.isClass())
          ) {
            var s = o.getDeclarations()[0].ast();
            e.Debug.assert(s);
            var a = this.getEnclosingClassDeclaration(t);
            if (!a || a !== s)
              return (
                i.postDiagnostic(
                  this.semanticInfoChain.diagnosticFromAST(
                    t,
                    e.DiagnosticCode._0_1_is_inaccessible,
                    [o.toString(null, !1), t.text()]
                  )
                ),
                !0
              );
          }
        }
        return !1;
      }),
      (i.prototype.instantiateType = function (t, n) {
        return t.isPrimitive()
          ? t
          : t.isError()
          ? t
          : n[t.pullSymbolID]
          ? n[t.pullSymbolID]
          : (t._resolveDeclaredSymbol(),
            t.isTypeParameter()
              ? this.instantiateTypeParameter(t, n)
              : t.wrapsSomeTypeParameter(n)
              ? e.PullInstantiatedTypeReferenceSymbol.create(this, t, n)
              : t);
      }),
      (i.prototype.instantiateTypeParameter = function (t, n) {
        var r = t.getConstraint();
        if (!r) return t;
        var i = this.instantiateType(r, n);
        if (i == r) return t;
        var o = t.getRootSymbol(),
          s = o.getSpecialization([i]);
        return s ? s : (s = new e.PullInstantiatedTypeParameterSymbol(o, i));
      }),
      (i.prototype.instantiateSignature = function (t, n) {
        if (!t.wrapsSomeTypeParameter(n)) return t;
        var r = t.getRootSymbol(),
          i = new e.PullInstantiationHelpers.MutableTypeArgumentMap(n);
        e.PullInstantiationHelpers.instantiateTypeArgument(this, t, i);
        var o = r.getSpecialization(i.typeParameterArgumentMap);
        if (o) return o;
        e.PullInstantiationHelpers.cleanUpTypeArgumentMap(t, i),
          (n = i.typeParameterArgumentMap),
          (o = new e.PullInstantiatedSignatureSymbol(r, n)),
          (o.returnType = this.instantiateType(
            r.returnType || this.semanticInfoChain.anyTypeSymbol,
            n
          )),
          (o.functionType = this.instantiateType(r.functionType, n));
        var s = r.parameters,
          a = null;
        if (s)
          for (var l = 0; l < s.length; l++)
            (a = new e.PullSymbol(s[l].name, 2048)),
              a.setRootSymbol(s[l]),
              s[l].isOptional && (a.isOptional = !0),
              s[l].isVarArg && ((a.isVarArg = !0), (o.hasVarArgs = !0)),
              o.addParameter(a, a.isOptional),
              (a.type = this.instantiateType(s[l].type, n));
        return o;
      }),
      (i.globalTypeCheckPhase = 0),
      i
    );
  })();
  e.PullTypeResolver = p;
  var h = (function () {
    function t(e, t) {
      (this.onlyCaptureFirstError = !1),
        (this.flags = 0),
        (this.message = ""),
        (this.stringConstantVal = null),
        (this.indent = 1),
        e &&
          ((this.flags = e.flags),
          (this.onlyCaptureFirstError = e.onlyCaptureFirstError),
          (this.stringConstantVal = e.stringConstantVal),
          (this.indent = e.indent),
          t || this.indent++);
    }
    return (
      (t.prototype.indentString = function () {
        for (var e = "", t = 0; t < this.indent; t++) e += "	";
        return e;
      }),
      (t.prototype.addMessage = function (t) {
        this.message =
          !this.onlyCaptureFirstError && this.message
            ? this.message + e.newLine() + this.indentString() + t
            : this.indentString() + t;
      }),
      t
    );
  })();
  (e.TypeComparisonInfo = h),
    (e.getPropertyAssignmentNameTextFromIdentifier = n),
    (e.isTypesOnlyLocation = r);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  (e.declCacheHit = 0),
    (e.declCacheMiss = 0),
    (e.symbolCacheHit = 0),
    (e.symbolCacheMiss = 0);
  var t = (function () {
    function t(t, n) {
      (this.compiler = t),
        (this.logger = n),
        (this.documents = []),
        (this.fileNameToDocument = e.createIntrinsicsObject()),
        (this.anyTypeDecl = null),
        (this.booleanTypeDecl = null),
        (this.numberTypeDecl = null),
        (this.stringTypeDecl = null),
        (this.nullTypeDecl = null),
        (this.undefinedTypeDecl = null),
        (this.voidTypeDecl = null),
        (this.undefinedValueDecl = null),
        (this.anyTypeSymbol = null),
        (this.booleanTypeSymbol = null),
        (this.numberTypeSymbol = null),
        (this.stringTypeSymbol = null),
        (this.nullTypeSymbol = null),
        (this.undefinedTypeSymbol = null),
        (this.voidTypeSymbol = null),
        (this.undefinedValueSymbol = null),
        (this.emptyTypeSymbol = null),
        (this.astSymbolMap = []),
        (this.astAliasSymbolMap = []),
        (this.astCallResolutionDataMap = []),
        (this.declSymbolMap = []),
        (this.declSignatureSymbolMap = []),
        (this.declCache = null),
        (this.symbolCache = null),
        (this.fileNameToDiagnostics = null),
        (this._binder = null),
        (this._resolver = null),
        (this._topLevelDecls = null),
        (this._fileNames = null);
      var r = new e.RootPullDecl("", "", 0, 0, this, !1);
      (this.documents[0] = new e.Document(
        this.compiler,
        this,
        "",
        [],
        null,
        0,
        0,
        !1,
        null,
        r
      )),
        (this.anyTypeDecl = new e.NormalPullDecl("any", "any", 2, 0, r)),
        (this.booleanTypeDecl = new e.NormalPullDecl(
          "boolean",
          "boolean",
          2,
          0,
          r
        )),
        (this.numberTypeDecl = new e.NormalPullDecl(
          "number",
          "number",
          2,
          0,
          r
        )),
        (this.stringTypeDecl = new e.NormalPullDecl(
          "string",
          "string",
          2,
          0,
          r
        )),
        (this.voidTypeDecl = new e.NormalPullDecl("void", "void", 2, 0, r)),
        (this.nullTypeDecl = new e.RootPullDecl("null", "", 2, 0, this, !1)),
        (this.undefinedTypeDecl = new e.RootPullDecl(
          "undefined",
          "",
          2,
          0,
          this,
          !1
        )),
        (this.undefinedValueDecl = new e.NormalPullDecl(
          "undefined",
          "undefined",
          512,
          8,
          r
        )),
        this.invalidate();
    }
    return (
      (t.prototype.getDocument = function (e) {
        var t = this.fileNameToDocument[e];
        return t || null;
      }),
      (t.prototype.lineMap = function (e) {
        return this.getDocument(e).lineMap();
      }),
      (t.prototype.fileNames = function () {
        return (
          null === this._fileNames &&
            (this._fileNames = this.documents.slice(1).map(function (e) {
              return e.fileName;
            })),
          this._fileNames
        );
      }),
      (t.prototype.bindPrimitiveSymbol = function (e, t) {
        return t.addDeclaration(e), e.setSymbol(t), t.setResolved(), t;
      }),
      (t.prototype.addPrimitiveTypeSymbol = function (t) {
        var n = new e.PullPrimitiveTypeSymbol(t.name);
        return this.bindPrimitiveSymbol(t, n);
      }),
      (t.prototype.addPrimitiveValueSymbol = function (t, n) {
        var r = new e.PullSymbol(t.name, 512);
        return (r.type = n), this.bindPrimitiveSymbol(t, r);
      }),
      (t.prototype.resetGlobalSymbols = function () {
        (this.anyTypeSymbol = this.addPrimitiveTypeSymbol(this.anyTypeDecl)),
          (this.booleanTypeSymbol = this.addPrimitiveTypeSymbol(
            this.booleanTypeDecl
          )),
          (this.numberTypeSymbol = this.addPrimitiveTypeSymbol(
            this.numberTypeDecl
          )),
          (this.stringTypeSymbol = this.addPrimitiveTypeSymbol(
            this.stringTypeDecl
          )),
          (this.voidTypeSymbol = this.addPrimitiveTypeSymbol(
            this.voidTypeDecl
          )),
          (this.nullTypeSymbol = this.addPrimitiveTypeSymbol(
            this.nullTypeDecl
          )),
          (this.undefinedTypeSymbol = this.addPrimitiveTypeSymbol(
            this.undefinedTypeDecl
          )),
          (this.undefinedValueSymbol = this.addPrimitiveValueSymbol(
            this.undefinedValueDecl,
            this.undefinedTypeSymbol
          ));
        var t = new e.PullSynthesizedDecl("{}", "{}", 8388608, 0, null, this),
          n = new e.PullTypeSymbol("{}", 8388608);
        t.setSymbol(n),
          n.addDeclaration(t),
          n.setResolved(),
          (this.emptyTypeSymbol = n);
      }),
      (t.prototype.addDocument = function (t) {
        var n = t.fileName,
          r = e.ArrayUtilities.indexOf(this.documents, function (e) {
            return e.fileName === n;
          });
        0 > r ? this.documents.push(t) : (this.documents[r] = t),
          (this.fileNameToDocument[n] = t),
          this.invalidate();
      }),
      (t.prototype.removeDocument = function (t) {
        e.Debug.assert(
          "" !== t,
          "Can't remove the semantic info for the global decl."
        );
        var n = e.ArrayUtilities.indexOf(this.documents, function (e) {
          return e.fileName === t;
        });
        n > 0 &&
          ((this.fileNameToDocument[t] = void 0),
          this.documents.splice(n, 1),
          this.invalidate());
      }),
      (t.prototype.getDeclPathCacheID = function (e, t) {
        for (var n = "", r = 0; r < e.length; r++) n += "#" + e[r];
        return n + "#" + t.toString();
      }),
      (t.prototype.findTopLevelSymbol = function (e, t, n) {
        var r = this.getDeclPathCacheID([e], t),
          i = this.symbolCache[r];
        if (!i) {
          for (var o = 0, s = this.documents.length; s > o; o++) {
            var a = this.documents[o].topLevelDecl(),
              i = this.findTopLevelSymbolInDecl(a, e, t, n);
            if (i) break;
            if (n && a.name === n.fileName()) return null;
          }
          i && (this.symbolCache[r] = i);
        }
        return i;
      }),
      (t.prototype.findTopLevelSymbolInDecl = function (e, t, n, r) {
        for (
          var i = r && r.fileName() === e.fileName() ? r.ast().start() : -1,
            o = e.searchChildDecls(t, n),
            s = 0;
          s < o.length;
          s++
        ) {
          var a = o[s];
          if (-1 !== i && a.ast() && a.ast().start() > i) break;
          var l = o[s].getSymbol();
          if (l) return l;
        }
        return null;
      }),
      (t.prototype.findExternalModule = function (t) {
        t = e.normalizePath(t);
        var n = t + ".ts",
          r = this.getDeclPathCacheID([n], 32);
        if (((s = this.symbolCache[r]), void 0 != s)) return s;
        var i = t + ".d.ts",
          o = this.getDeclPathCacheID([i], 32),
          s = this.symbolCache[o];
        if (s) return s;
        var a = t + ".js",
          l = this.getDeclPathCacheID([a], 32),
          s = this.symbolCache[l];
        if (s) return s;
        for (var c, u, p = 0; p < this.documents.length; p++) {
          var h = this.documents[p],
            d = h.topLevelDecl();
          if (d.isExternalModule()) {
            var m = h.fileName === n;
            if (m || h.fileName === i || h.fileName === a) {
              var f = d.getChildDecls()[0];
              if (((s = f.getSymbol()), m)) return (this.symbolCache[r] = s), s;
              h.fileName === i ? (c = s) : h.fileName === a && (u = s);
            }
          }
        }
        return c
          ? ((this.symbolCache[o] = s), c)
          : u
          ? ((this.symbolCache[l] = s), u)
          : ((this.symbolCache[o] = null),
            (this.symbolCache[r] = null),
            (this.symbolCache[l] = null),
            null);
      }),
      (t.prototype.findAmbientExternalModuleInGlobalContext = function (e) {
        var t = this.getDeclPathCacheID([e], 32),
          n = this.symbolCache[t];
        if (void 0 == n) {
          n = null;
          for (var r = 0; r < this.documents.length; r++) {
            var i = this.documents[r],
              o = i.topLevelDecl();
            if (!o.isExternalModule()) {
              var s = o.searchChildDecls(e, 32);
              if (s.length) {
                n = s[0].getSymbol();
                break;
              }
            }
          }
          this.symbolCache[t] = n;
        }
        return n;
      }),
      (t.prototype.findDecls = function (t, n) {
        var r = this.getDeclPathCacheID(t, n);
        if (t.length) {
          var i = this.declCache[r];
          if (i && i.length) return e.declCacheHit++, i;
        }
        e.declCacheMiss++;
        for (
          var o,
            s = this.topLevelDecls(),
            a = e.sentinelEmptyArray,
            l = e.sentinelEmptyArray,
            c = 0;
          c < t.length;
          c++
        ) {
          (o = t[c]), (a = e.sentinelEmptyArray);
          for (var u = c === t.length - 1 ? n : 164, p = 0; p < s.length; p++) {
            l = s[p].searchChildDecls(o, u);
            for (var h = 0; h < l.length; h++)
              a === e.sentinelEmptyArray && (a = []), (a[a.length] = l[h]);
          }
          if (((s = a), !s)) break;
        }
        return a.length && (this.declCache[r] = a), a;
      }),
      (t.prototype.findDeclsFromPath = function (e, t) {
        for (var n = [], r = 0, i = e.length; i > r; r++)
          1 & e[r].kind || n.push(e[r].name);
        return this.findDecls(n, t);
      }),
      (t.prototype.findSymbol = function (t, n) {
        var r = this.getDeclPathCacheID(t, n);
        if (t.length) {
          var i = this.symbolCache[r];
          if (i) return e.symbolCacheHit++, i;
        }
        e.symbolCacheMiss++;
        var o = this.findDecls(t, n),
          s = null;
        if (o.length) {
          var a = o[0];
          if (e.hasFlag(a.kind, 164)) {
            var l = a.getValueDecl();
            l && l.ensureSymbolIsBound();
          }
          if ((s = a.getSymbol())) {
            for (var c = 1; c < o.length; c++) o[c].ensureSymbolIsBound();
            this.symbolCache[r] = s;
          }
        }
        return s;
      }),
      (t.prototype.cacheGlobalSymbol = function (e, t) {
        var n = this.getDeclPathCacheID([e.name], t),
          r = this.getDeclPathCacheID([e.name], e.kind);
        this.symbolCache[n] || (this.symbolCache[n] = e),
          this.symbolCache[r] || (this.symbolCache[r] = e);
      }),
      (t.prototype.invalidate = function (t, n) {
        "undefined" == typeof t && (t = null),
          "undefined" == typeof n && (n = null),
          e.PullTypeResolver.globalTypeCheckPhase++;
        new Date().getTime();
        if (
          ((this.astSymbolMap.length = 0),
          (this.astAliasSymbolMap.length = 0),
          (this.astCallResolutionDataMap.length = 0),
          (this.declCache = e.createIntrinsicsObject()),
          (this.symbolCache = e.createIntrinsicsObject()),
          (this.fileNameToDiagnostics = e.createIntrinsicsObject()),
          (this._binder = null),
          (this._resolver = null),
          (this._topLevelDecls = null),
          (this._fileNames = null),
          (this.declSymbolMap.length = 0),
          (this.declSignatureSymbolMap.length = 0),
          t && n && this.settingsChangeAffectsSyntax(t, n))
        )
          for (var r = 1, i = this.documents.length; i > r; r++)
            this.documents[r].invalidate();
        (e.pullSymbolID = 0), this.resetGlobalSymbols();
        new Date().getTime();
      }),
      (t.prototype.settingsChangeAffectsSyntax = function (e, t) {
        return (
          e.allowAutomaticSemicolonInsertion() !==
            t.allowAutomaticSemicolonInsertion() ||
          e.codeGenTarget() !== t.codeGenTarget() ||
          e.propagateEnumConstants() !== t.propagateEnumConstants()
        );
      }),
      (t.prototype.setSymbolForAST = function (e, t) {
        this.astSymbolMap[e.syntaxID()] = t;
      }),
      (t.prototype.getSymbolForAST = function (e) {
        return this.astSymbolMap[e.syntaxID()] || null;
      }),
      (t.prototype.setAliasSymbolForAST = function (e, t) {
        this.astAliasSymbolMap[e.syntaxID()] = t;
      }),
      (t.prototype.getAliasSymbolForAST = function (e) {
        return this.astAliasSymbolMap[e.syntaxID()];
      }),
      (t.prototype.getCallResolutionDataForAST = function (e) {
        return this.astCallResolutionDataMap[e.syntaxID()];
      }),
      (t.prototype.setCallResolutionDataForAST = function (e, t) {
        t && (this.astCallResolutionDataMap[e.syntaxID()] = t);
      }),
      (t.prototype.setSymbolForDecl = function (e, t) {
        this.declSymbolMap[e.declID] = t;
      }),
      (t.prototype.getSymbolForDecl = function (e) {
        return this.declSymbolMap[e.declID];
      }),
      (t.prototype.setSignatureSymbolForDecl = function (e, t) {
        this.declSignatureSymbolMap[e.declID] = t;
      }),
      (t.prototype.getSignatureSymbolForDecl = function (e) {
        return this.declSignatureSymbolMap[e.declID];
      }),
      (t.prototype.addDiagnostic = function (e) {
        var t = e.fileName(),
          n = this.fileNameToDiagnostics[t];
        n || ((n = []), (this.fileNameToDiagnostics[t] = n)), n.push(e);
      }),
      (t.prototype.getDiagnostics = function (e) {
        var t = this.fileNameToDiagnostics[e];
        return t || [];
      }),
      (t.prototype.getBinder = function () {
        return (
          this._binder || (this._binder = new e.PullSymbolBinder(this)),
          this._binder
        );
      }),
      (t.prototype.getResolver = function () {
        return (
          this._resolver ||
            (this._resolver = new e.PullTypeResolver(
              this.compiler.compilationSettings(),
              this
            )),
          this._resolver
        );
      }),
      (t.prototype.addSyntheticIndexSignature = function (t, n, r, i, o, s) {
        var a = new e.PullSignatureSymbol(4194304),
          l = new e.PullSymbol(i, 2048);
        (l.type = o),
          a.addParameter(l),
          (a.returnType = s),
          a.setResolved(),
          l.setResolved(),
          n.addIndexSignature(a);
        var c = new e.PullSynthesizedDecl(
            "",
            "",
            4194304,
            2048,
            t,
            t.semanticInfoChain
          ),
          u = new e.PullSynthesizedDecl(i, i, 2048, 0, c, t.semanticInfoChain);
        c.setSignatureSymbol(a),
          u.setSymbol(l),
          a.addDeclaration(c),
          l.addDeclaration(u);
      }),
      (t.prototype.getDeclForAST = function (e) {
        var t = this.getDocument(e.fileName());
        return t ? t._getDeclForAST(e) : null;
      }),
      (t.prototype.getEnclosingDecl = function (e) {
        return this.getDocument(e.fileName()).getEnclosingDecl(e);
      }),
      (t.prototype.setDeclForAST = function (e, t) {
        this.getDocument(t.fileName())._setDeclForAST(e, t);
      }),
      (t.prototype.getASTForDecl = function (e) {
        var t = this.getDocument(e.fileName());
        return t ? t._getASTForDecl(e) : null;
      }),
      (t.prototype.setASTForDecl = function (e, t) {
        this.getDocument(e.fileName())._setASTForDecl(e, t);
      }),
      (t.prototype.topLevelDecl = function (e) {
        var t = this.getDocument(e);
        return t ? t.topLevelDecl() : null;
      }),
      (t.prototype.topLevelDecls = function () {
        return (
          this._topLevelDecls ||
            (this._topLevelDecls = e.ArrayUtilities.select(
              this.documents,
              function (e) {
                return e.topLevelDecl();
              }
            )),
          this._topLevelDecls
        );
      }),
      (t.prototype.addDiagnosticFromAST = function (e, t, n, r) {
        "undefined" == typeof n && (n = null),
          "undefined" == typeof r && (r = null),
          this.addDiagnostic(this.diagnosticFromAST(e, t, n, r));
      }),
      (t.prototype.diagnosticFromAST = function (t, n, r, i) {
        return (
          "undefined" == typeof r && (r = null),
          "undefined" == typeof i && (i = null),
          new e.Diagnostic(
            t.fileName(),
            this.lineMap(t.fileName()),
            t.start(),
            t.width(),
            n,
            r,
            i
          )
        );
      }),
      (t.prototype.locationFromAST = function (t) {
        return new e.Location(
          t.fileName(),
          this.lineMap(t.fileName()),
          t.start(),
          t.width()
        );
      }),
      (t.prototype.duplicateIdentifierDiagnosticFromAST = function (t, n, r) {
        return this.diagnosticFromAST(
          t,
          e.DiagnosticCode.Duplicate_identifier_0,
          [n],
          r ? [this.locationFromAST(r)] : null
        );
      }),
      (t.prototype.addDuplicateIdentifierDiagnosticFromAST = function (
        e,
        t,
        n
      ) {
        this.addDiagnostic(this.duplicateIdentifierDiagnosticFromAST(e, t, n));
      }),
      t
    );
  })();
  e.SemanticInfoChain = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e) {
    for (e = e.parent; e; ) {
      if (130 === e.kind()) {
        var t = e;
        return t.moduleElements.any(function (e) {
          return 134 === e.kind();
        });
      }
      if (120 === e.kind()) {
        var n = e;
        return n.moduleElements.any(function (e) {
          return 134 === e.kind();
        });
      }
      e = e.parent;
    }
    return !1;
  }
  function n(t) {
    for (t = t.parent; t; ) {
      if (130 === t.kind() && e.hasModifier(t.modifiers, 8)) return !0;
      t = t.parent;
    }
    return !1;
  }
  function r(n, r) {
    var i = n,
      o = 0,
      s = r.getParent();
    e.hasModifier(i.modifiers, 1) && !t(n) && (o |= 1);
    var a = new e.NormalPullDecl(
      i.identifier.valueText(),
      i.identifier.text(),
      128,
      o,
      s
    );
    r.semanticInfoChain.setDeclForAST(n, a),
      r.semanticInfoChain.setASTForDecl(a, n);
  }
  function i(t, n) {
    var r = t.fileName(),
      i = n.document.isExternalModule(),
      o = new e.RootPullDecl(r, r, 1, 0, n.semanticInfoChain, i);
    if (
      (n.semanticInfoChain.setDeclForAST(t, o),
      n.semanticInfoChain.setASTForDecl(o, t),
      (n.isDeclareFile = n.document.isDeclareFile()),
      n.pushParent(o),
      i)
    ) {
      var s = 1;
      e.isDTSFile(r) && (s |= 8);
      var a = u(t.moduleElements),
        l = 32,
        p = e.quoteStr(r),
        o = new e.NormalPullDecl(p, r, l, s, n.getParent());
      n.semanticInfoChain.setASTForDecl(o, t),
        n.semanticInfoChain.setDeclForAST(t, o),
        a && c(o, t, n),
        n.pushParent(o);
    }
  }
  function o(r, i) {
    var o = 0,
      s = r.identifier.valueText();
    (!e.hasModifier(r.modifiers, 1) && !n(r, i)) || t(r) || (o |= 1),
      (e.hasModifier(r.modifiers, 8) || n(r, i) || i.isDeclareFile) && (o |= 8),
      (o |= 4096);
    var a = 64,
      l = new e.NormalPullDecl(s, r.identifier.text(), a, o, i.getParent());
    i.semanticInfoChain.setDeclForAST(r, l),
      i.semanticInfoChain.setASTForDecl(l, r);
    var c = new e.NormalPullDecl(
      l.name,
      l.getDisplayName(),
      512,
      l.flags,
      i.getParent()
    );
    l.setValueDecl(c), i.semanticInfoChain.setASTForDecl(c, r), i.pushParent(l);
  }
  function s(t, n) {
    var r = n.getParent(),
      i = new e.PullEnumElementDecl(
        t.propertyName.valueText(),
        t.propertyName.text(),
        r
      );
    n.semanticInfoChain.setDeclForAST(t, i),
      n.semanticInfoChain.setASTForDecl(i, t);
  }
  function a(r, i) {
    var o = 0,
      s = u(r.moduleElements),
      a = null !== r.stringLiteral;
    (!e.hasModifier(r.modifiers, 1) && !n(r, i)) || t(r) || (o |= 1),
      (e.hasModifier(r.modifiers, 8) || n(r, i) || i.isDeclareFile) && (o |= 8);
    var p = a ? 32 : 4;
    if (r.stringLiteral) {
      var h = e.quoteStr(r.stringLiteral.valueText()),
        d = r.stringLiteral.text(),
        m = new e.NormalPullDecl(h, d, p, o, i.getParent());
      i.semanticInfoChain.setDeclForAST(r, m),
        i.semanticInfoChain.setDeclForAST(r.stringLiteral, m),
        i.semanticInfoChain.setASTForDecl(m, r.stringLiteral),
        s && c(m, r.stringLiteral, i),
        i.pushParent(m);
    } else
      for (var f = l(r.name), g = 0, v = f.length; v > g; g++) {
        var y = f[g],
          b = o;
        g > 0 && (b |= 1);
        var m = new e.NormalPullDecl(
          y.valueText(),
          y.text(),
          p,
          b,
          i.getParent()
        );
        i.semanticInfoChain.setDeclForAST(r, m),
          i.semanticInfoChain.setDeclForAST(y, m),
          i.semanticInfoChain.setASTForDecl(m, y),
          s && c(m, y, i),
          i.pushParent(m);
      }
  }
  function l(e, t) {
    return (
      (t = t || []),
      121 === e.kind() ? (l(e.left, t), t.push(e.right)) : t.push(e),
      t
    );
  }
  function c(t, n, r) {
    t.setFlags(t.flags | G(t));
    var i = new e.NormalPullDecl(
      t.name,
      t.getDisplayName(),
      512,
      t.flags,
      r.getParent()
    );
    t.setValueDecl(i), r.semanticInfoChain.setASTForDecl(i, n);
  }
  function u(t) {
    for (var n = 0, r = t.childCount(); r > n; n++) {
      var i = t.childAt(n);
      if (130 === i.kind()) {
        var o = i;
        if (u(o.moduleElements)) return !0;
      } else if (133 === i.kind()) {
        if (e.hasModifier(i.modifiers, 1)) return !0;
      } else if (128 !== i.kind()) return !0;
    }
    return !1;
  }
  function p(r, i) {
    var o = 0;
    (!e.hasModifier(r.modifiers, 1) && !n(r, i)) || t(r) || (o |= 1),
      (e.hasModifier(r.modifiers, 8) || n(r, i) || i.isDeclareFile) && (o |= 8);
    var s = i.getParent(),
      a = new e.NormalPullDecl(
        r.identifier.valueText(),
        r.identifier.text(),
        8,
        o,
        s
      ),
      l = new e.NormalPullDecl(
        r.identifier.valueText(),
        r.identifier.text(),
        512,
        16384 | o,
        s
      );
    a.setValueDecl(l),
      i.semanticInfoChain.setDeclForAST(r, a),
      i.semanticInfoChain.setASTForDecl(a, r),
      i.semanticInfoChain.setASTForDecl(l, r),
      i.pushParent(a);
  }
  function h(t, n) {
    if (128 !== t.parent.kind()) {
      var r = 0,
        i = n.getParent();
      i && (134217728 === i.kind || 2097152 & i.flags) && (r |= 2097152);
      var o = new e.NormalPullDecl("", "", 8388608, r, i);
      n.semanticInfoChain.setDeclForAST(t, o),
        n.semanticInfoChain.setASTForDecl(o, t),
        n.pushParent(o);
    }
  }
  function d(r, i) {
    var o = 0;
    (!e.hasModifier(r.modifiers, 1) && !n(r, i)) || t(r) || (o |= 1);
    var s = i.getParent(),
      a = new e.NormalPullDecl(
        r.identifier.valueText(),
        r.identifier.text(),
        16,
        o,
        s
      );
    i.semanticInfoChain.setDeclForAST(r, a),
      i.semanticInfoChain.setASTForDecl(a, r),
      i.pushParent(a);
  }
  function m(t, n) {
    var r = 0;
    (r |= e.hasModifier(t.modifiers, 2) ? 2 : 4),
      (null !== t.questionToken ||
        null !== t.equalsValueClause ||
        null !== t.dotDotDotToken) &&
        (r |= 128);
    var i = n.getParent();
    i && (134217728 === i.kind || 2097152 & i.flags) && (r |= 2097152);
    var o = new e.NormalPullDecl(
      t.identifier.valueText(),
      t.identifier.text(),
      2048,
      r,
      i
    );
    t.equalsValueClause && (i.flags |= 33554432),
      32768 === i.kind && o.setFlag(67108864);
    var s = e.hasModifier(t.modifiers, 6),
      a = 32768 === i.kind;
    if (s && a) {
      var l = n.parentChain[n.parentChain.length - 2],
        c = -129 & r,
        u = new e.NormalPullDecl(
          t.identifier.valueText(),
          t.identifier.text(),
          4096,
          c,
          l
        );
      u.setValueDecl(o),
        o.setFlag(8388608),
        u.setFlag(8388608),
        32768 === i.kind && u.setFlag(67108864),
        n.semanticInfoChain.setASTForDecl(o, t),
        n.semanticInfoChain.setASTForDecl(u, t),
        n.semanticInfoChain.setDeclForAST(t, u);
    } else
      n.semanticInfoChain.setASTForDecl(o, t),
        n.semanticInfoChain.setDeclForAST(t, o);
    i.addVariableDeclToGroup(o);
  }
  function f(t, n) {
    var r = 0,
      i = n.getParent();
    i && (134217728 === i.kind || 2097152 & i.flags) && (r |= 2097152);
    var o = new e.NormalPullDecl(
      t.identifier.valueText(),
      t.identifier.text(),
      8192,
      r,
      i
    );
    n.semanticInfoChain.setASTForDecl(o, t),
      n.semanticInfoChain.setDeclForAST(t, o);
  }
  function g(t, n) {
    var r = 4,
      i = n.getParent(),
      o = 4096;
    null !== t.questionToken && (r |= 128);
    var s = new e.NormalPullDecl(
      t.propertyName.valueText(),
      t.propertyName.text(),
      o,
      r,
      i
    );
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t);
  }
  function v(t, n) {
    var r = 0,
      i = 4096;
    (r |= e.hasModifier(t.modifiers, 2) ? 2 : 4),
      e.hasModifier(t.modifiers, 16) && (r |= 16);
    var o = n.getParent(),
      s = new e.NormalPullDecl(
        t.variableDeclarator.propertyName.valueText(),
        t.variableDeclarator.propertyName.text(),
        i,
        r,
        o
      );
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setDeclForAST(t.variableDeclarator, s),
      n.semanticInfoChain.setASTForDecl(s, t);
  }
  function y(r, i) {
    var o = 0,
      s = 512,
      a = e.ASTHelpers.getVariableDeclaratorModifiers(r);
    (!e.hasModifier(a, 1) && !n(r, i)) || t(r) || (o |= 1),
      (e.hasModifier(a, 8) || n(r, i) || i.isDeclareFile) && (o |= 8);
    var l = i.getParent();
    l && (134217728 === l.kind || 2097152 & l.flags) && (o |= 2097152);
    var c = new e.NormalPullDecl(
      r.propertyName.valueText(),
      r.propertyName.text(),
      s,
      o,
      l
    );
    i.semanticInfoChain.setDeclForAST(r, c),
      i.semanticInfoChain.setASTForDecl(c, r),
      l && l.addVariableDeclToGroup(c);
  }
  function b(e, t) {
    if (136 !== e.parent.kind()) {
      var n = e;
      y(n, t);
    }
  }
  function _(t, n) {
    var r = 2048,
      i = 16777216,
      o = n.getParent();
    o && (134217728 === o.kind || 2097152 & o.flags) && (r |= 2097152);
    var s = new e.NormalPullDecl("", "", i, r, o);
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function w(t, n) {
    var r = 0,
      i = 33554432,
      o = n.getParent();
    o && (134217728 === o.kind || 2097152 & o.flags) && (r |= 2097152);
    var s = new e.NormalPullDecl("", "", i, r, o);
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function S(r, i) {
    var o = 0,
      s = 16384;
    (!e.hasModifier(r.modifiers, 1) && !n(r, i)) || t(r) || (o |= 1),
      (e.hasModifier(r.modifiers, 8) || n(r, i) || i.isDeclareFile) && (o |= 8),
      r.block || (o |= 2048);
    var a = i.getParent();
    a && (134217728 === a.kind || 2097152 & a.flags) && (o |= 2097152);
    var l = new e.NormalPullDecl(
      r.identifier.valueText(),
      r.identifier.text(),
      s,
      o,
      a
    );
    i.semanticInfoChain.setDeclForAST(r, l),
      i.semanticInfoChain.setASTForDecl(l, r),
      i.pushParent(l);
  }
  function T(t, n, r, i) {
    "undefined" == typeof i && (i = null);
    var o = 0;
    (219 === t.kind() || 218 === t.kind()) && (o |= 8192);
    var s = r.getParent();
    s && (134217728 === s.kind || 2097152 & s.flags) && (o |= 2097152);
    var a = n ? n.text() : "",
      l = i ? i.text() : "",
      c = new e.PullFunctionExpressionDecl(a, o, s, l);
    if (
      (r.semanticInfoChain.setDeclForAST(t, c),
      r.semanticInfoChain.setASTForDecl(c, t),
      r.pushParent(c),
      219 === t.kind())
    ) {
      var u = t,
        o = 4,
        s = r.getParent();
      e.hasFlag(s.flags, 2097152) && (o |= 2097152);
      var c = new e.NormalPullDecl(
        u.identifier.valueText(),
        u.identifier.text(),
        2048,
        o,
        s
      );
      r.semanticInfoChain.setASTForDecl(c, u.identifier),
        r.semanticInfoChain.setDeclForAST(u.identifier, c),
        s.addVariableDeclToGroup(c);
    }
  }
  function k(t, n) {
    var r = 0,
      i = 65536;
    e.hasModifier(t.modifiers, 16) && (r |= 16),
      (r |= e.hasModifier(t.modifiers, 2) ? 2 : 4),
      t.block || (r |= 2048);
    var o = n.getParent(),
      s = new e.NormalPullDecl(
        t.propertyName.valueText(),
        t.propertyName.text(),
        i,
        r,
        o
      );
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function x(t, n) {
    var r = 2048,
      i = 4194304,
      o = n.getParent(),
      s = new e.NormalPullDecl("", "", i, r, o);
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function C(t, n) {
    var r =
      t.parent &&
      t.parent.parent &&
      2 === t.parent.kind() &&
      122 === t.parent.parent.kind();
    if (r) {
      var i = 2048,
        o = 1048576,
        s = n.getParent();
      s && (134217728 === s.kind || 2097152 & s.flags) && (i |= 2097152);
      var a = new e.NormalPullDecl("", "", o, i, s);
      n.semanticInfoChain.setDeclForAST(t, a),
        n.semanticInfoChain.setASTForDecl(a, t),
        n.pushParent(a);
    }
  }
  function E(t, n) {
    var r = 0,
      i = 65536;
    (r |= 4), (r |= 2048), null !== t.questionToken && (r |= 128);
    var o = n.getParent(),
      s = new e.NormalPullDecl(
        t.propertyName.valueText(),
        t.propertyName.text(),
        i,
        r,
        o
      );
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function A(t, n) {
    var r = 2048,
      i = 2097152,
      o = n.getParent();
    o && (134217728 === o.kind || 2097152 & o.flags) && (r |= 2097152);
    var s = new e.NormalPullDecl("", "", i, r, o);
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function L(t, n) {
    var r = 0,
      i = 32768;
    t.block || (r |= 2048);
    var o = n.getParent();
    if (o) {
      var s = o.flags;
      1 & s && (r |= 1);
    }
    var a = new e.NormalPullDecl(o.name, o.getDisplayName(), i, r, o);
    n.semanticInfoChain.setDeclForAST(t, a),
      n.semanticInfoChain.setASTForDecl(a, t),
      n.pushParent(a);
  }
  function I(t, n) {
    var r = 4,
      i = 262144;
    e.hasModifier(t.modifiers, 16) && (r |= 16),
      (r |= e.hasModifier(t.modifiers, 2) ? 2 : 4);
    var o = n.getParent();
    o && (134217728 === o.kind || 2097152 & o.flags) && (r |= 2097152);
    var s = new e.NormalPullDecl(
      t.propertyName.valueText(),
      t.propertyName.text(),
      i,
      r,
      o
    );
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function D(e, t) {
    T(e, e.identifier, t);
  }
  function P(t, n) {
    var r = 4,
      i = 524288;
    e.hasModifier(t.modifiers, 16) && (r |= 16),
      (r |= e.hasModifier(t.modifiers, 2) ? 2 : 4);
    var o = n.getParent();
    o && (134217728 === o.kind || 2097152 & o.flags) && (r |= 2097152);
    var s = new e.NormalPullDecl(
      t.propertyName.valueText(),
      t.propertyName.text(),
      i,
      r,
      o
    );
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function N(t, n) {
    var r = 0,
      i = 268435456,
      o = n.getParent();
    o && (134217728 === o.kind || 2097152 & o.flags) && (r |= 2097152);
    var s = new e.NormalPullDecl("", "", i, r, o);
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
    var r = 0,
      i = 1024,
      o = n.getParent();
    e.hasFlag(o.flags, 2097152) && (r |= 2097152);
    var s = new e.NormalPullDecl(
      t.identifier.valueText(),
      t.identifier.text(),
      i,
      r,
      o
    );
    n.semanticInfoChain.setDeclForAST(t.identifier, s),
      n.semanticInfoChain.setASTForDecl(s, t.identifier),
      o && o.addVariableDeclToGroup(s);
  }
  function M(t, n) {
    var r = 0,
      i = 134217728,
      o = n.getParent(),
      s = new e.NormalPullDecl("", "", i, r, o);
    n.semanticInfoChain.setDeclForAST(t, s),
      n.semanticInfoChain.setASTForDecl(s, t),
      n.pushParent(s);
  }
  function R(t, n) {
    var r = new e.NormalPullDecl("", "", 256, 0, n.getParent());
    n.semanticInfoChain.setDeclForAST(t, r),
      n.semanticInfoChain.setASTForDecl(r, t),
      n.pushParent(r);
  }
  function O(t, n) {
    var r = e.getPropertyAssignmentNameTextFromIdentifier(t.propertyName),
      i =
        (e.TextSpan.fromBounds(t.start(), t.end()),
        new e.NormalPullDecl(
          r.memberName,
          r.actualText,
          4096,
          4,
          n.getParent()
        ));
    n.semanticInfoChain.setDeclForAST(t, i),
      n.semanticInfoChain.setASTForDecl(i, t);
  }
  function F(t, n) {
    var r = e.getPropertyAssignmentNameTextFromIdentifier(t.propertyName),
      i = new e.NormalPullDecl(
        r.memberName,
        r.actualText,
        4096,
        4,
        n.getParent()
      );
    n.semanticInfoChain.setDeclForAST(t, i),
      n.semanticInfoChain.setASTForDecl(i, t),
      T(t, t.propertyName, n, t.propertyName);
  }
  function V(e, t) {
    switch (e.kind()) {
      case 120:
        i(e, t);
        break;
      case 132:
        o(e, t);
        break;
      case 243:
        s(e, t);
        break;
      case 130:
        a(e, t);
        break;
      case 131:
        p(e, t);
        break;
      case 128:
        d(e, t);
        break;
      case 122:
        h(e, t);
        break;
      case 242:
        m(e, t);
        break;
      case 136:
        v(e, t);
        break;
      case 141:
        g(e, t);
        break;
      case 225:
        b(e, t);
        break;
      case 137:
        L(e, t);
        break;
      case 139:
        I(e, t);
        break;
      case 140:
        P(e, t);
        break;
      case 222:
        D(e, t);
        break;
      case 135:
        k(e, t);
        break;
      case 144:
        x(e, t);
        break;
      case 123:
        _(e, t);
        break;
      case 125:
        w(e, t);
        break;
      case 142:
        C(e, t);
        break;
      case 143:
        A(e, t);
        break;
      case 145:
        E(e, t);
        break;
      case 129:
        S(e, t);
        break;
      case 219:
      case 218:
        T(e, null, t);
        break;
      case 133:
        r(e, t);
        break;
      case 238:
        f(e, t);
        break;
      case 236:
        N(e, t);
        break;
      case 163:
        M(e, t);
        break;
      case 215:
        R(e, t);
        break;
      case 240:
        O(e, t);
        break;
      case 241:
        F(e, t);
    }
  }
  function G(e) {
    return 4 & e.kind ? 32768 : 32 & e.kind ? 65536 : 0;
  }
  function B(t, n) {
    var r = n.getParent();
    if (
      (11 !== t.kind() && 14 !== t.kind()) ||
      (4 !== r.kind && 32 !== r.kind)
    ) {
      if (130 === t.kind()) {
        var i = t;
        if (i.stringLiteral)
          e.Debug.assert(r.ast() === i.stringLiteral), n.popParent();
        else
          for (var o = l(i.name), s = o.length - 1; s >= 0; s--) {
            var a = o[s];
            e.Debug.assert(r.ast() === a), n.popParent(), (r = n.getParent());
          }
      }
      for (132 === t.kind() && W(t, r, n); r.getParentDecl() && r.ast() === t; )
        n.popParent(), (r = n.getParent());
    }
  }
  function W(t, n, r) {
    e.Debug.assert(64 === n.kind);
    for (
      var i = e.hasFlag(n.flags, 8),
        o = !i,
        s = 0,
        a = n.getChildDecls(),
        l = 0,
        c = t.enumElements.nonSeparatorCount();
      c > l;
      l++
    ) {
      var u = t.enumElements.nonSeparatorAt(l),
        p = e.ArrayUtilities.first(a, function (e) {
          return r.semanticInfoChain.getASTForDecl(e) === u;
        });
      e.Debug.assert(67108864 === p.kind),
        null === u.equalsValueClause
          ? o && ((p.constantValue = s), s++)
          : ((p.constantValue = z(u.equalsValueClause.value, a, r)),
            null === p.constantValue || i
              ? (o = !1)
              : ((o = !0), (s = p.constantValue + 1))),
        e.Debug.assert(void 0 !== p.constantValue);
    }
  }
  function z(t, n, r) {
    if ((e.Debug.assert(t), e.ASTHelpers.isIntegerLiteralAST(t))) {
      var i;
      switch (t.kind()) {
        case 164:
        case 165:
          i = t.operand;
          break;
        default:
          i = t;
      }
      var o = i.value();
      return o && 165 === t.kind() ? -o : o;
    }
    if (r.propagateEnumConstants) {
      switch (t.kind()) {
        case 11:
          var s = t,
            a = e.ArrayUtilities.firstOrDefault(n, function (e) {
              return e.name === s.valueText();
            });
          return a ? a.constantValue : null;
        case 202:
          var l = t,
            c = z(l.left, n, r),
            u = z(l.right, n, r);
          return null === c || null === u ? null : c << u;
        case 189:
          var l = t,
            c = z(l.left, n, r),
            u = z(l.right, n, r);
          return null === c || null === u ? null : c | u;
      }
      return null;
    }
    return null;
  }
  var H = (function () {
    function e(e, t, n) {
      (this.document = e),
        (this.semanticInfoChain = t),
        (this.propagateEnumConstants = n),
        (this.isDeclareFile = !1),
        (this.parentChain = []);
    }
    return (
      (e.prototype.getParent = function () {
        return this.parentChain
          ? this.parentChain[this.parentChain.length - 1]
          : null;
      }),
      (e.prototype.pushParent = function (e) {
        e && (this.parentChain[this.parentChain.length] = e);
      }),
      (e.prototype.popParent = function () {
        this.parentChain.length--;
      }),
      e
    );
  })();
  (e.getModuleNames = l),
    (function (t) {
      function n(t, n, r) {
        var i = new H(t, n, r.propagateEnumConstants());
        return (
          e.getAstWalkerFactory().simpleWalk(t.sourceUnit(), V, B, i),
          i.getParent()
        );
      }
      t.create = n;
    })(e.DeclarationCreator || (e.DeclarationCreator = {}));
  e.DeclarationCreator;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t(t) {
      (this.semanticInfoChain = t),
        (this.declsBeingBound = []),
        (this.inBindingOtherDeclsWalker = new e.PullHelpers.OtherPullDeclsWalker());
    }
    return (
      (t.prototype.getParent = function (e, t) {
        "undefined" == typeof t && (t = !1);
        var n = e.getParentDecl();
        if (1 === n.kind) return null;
        var r = n.getSymbol();
        if (
          (r || !n || n.hasBeenBound() || this.bindDeclToPullSymbol(n),
          (r = n.getSymbol()))
        ) {
          var i = n.kind;
          262144 === i
            ? (r = r.getGetter())
            : 524288 === i && (r = r.getSetter());
        }
        if (r) {
          if (t && r.isType() && r.isContainer()) {
            var o = r.getInstanceSymbol();
            if (o) return o.type;
          }
          return r.type;
        }
        return null;
      }),
      (t.prototype.findDeclsInContext = function (e, t, n) {
        if (!n) {
          var r = e.getParentDecl();
          return r.searchChildDecls(e.name, t);
        }
        var i = e.getParentPath();
        if (i.length) {
          for (var o = [], s = 0; s < i.length; s++)
            1 & i[s].kind || (o[o.length] = i[s].name);
          return this.semanticInfoChain.findDecls(o, t);
        }
      }),
      (t.prototype.getExistingSymbol = function (e, t, n) {
        var r = 0 !== (68147712 & t),
          i = 0 !== (58728795 & t),
          o = 0 !== (164 & t),
          s = e.name;
        if (!n) {
          var a = e.getParentDecl();
          if (a && 1 === a.kind)
            return this.semanticInfoChain.findTopLevelSymbol(s, t, e);
          var l = a && a.searchChildDecls(s, t);
          return l[0] && l[0].getSymbol();
        }
        var c = 0 !== (1 & e.flags),
          u = null;
        r
          ? (u = n.findContainedNonMember(s))
          : i
          ? (u = n.findContainedNonMemberType(s, t))
          : o && (u = n.findContainedNonMemberContainer(s, t));
        var p = !u;
        if (
          (u ||
            (r
              ? (u = n.findMember(s, !1))
              : i
              ? (u = n.findNestedType(s, t))
              : o && (u = n.findNestedContainer(s, t))),
          c && p)
        )
          return u;
        if (u) {
          var l = u.getDeclarations(),
            h = l[l.length - 1],
            a = e.getParentDecl(),
            d = h && h.getParentDecl();
          return a !== d ? null : u;
        }
        return null;
      }),
      (t.prototype.checkThatExportsMatch = function (t, n, r) {
        "undefined" == typeof r && (r = !0);
        var i = 0 !== (1 & t.flags),
          o = n.getDeclarations(),
          s = 0 !== (1 & o[o.length - 1].flags);
        if (i !== s && !n.isSignature() && 0 === (7340032 & t.kind)) {
          if (r) {
            var a = this.semanticInfoChain.getASTForDecl(t);
            this.semanticInfoChain.addDiagnosticFromAST(
              a,
              e.DiagnosticCode
                .All_declarations_of_merged_declaration_0_must_be_exported_or_not_exported,
              [t.getDisplayName()]
            );
          }
          return !1;
        }
        return !0;
      }),
      (t.prototype.getIndexForInsertingSignatureAtEndOfEnclosingDeclInSignatureList = function (
        t,
        n
      ) {
        var r = t.getDeclarations()[0];
        e.Debug.assert(r);
        var i = r.getParentDecl(),
          o = e.ArrayUtilities.indexOf(n, function (e) {
            return e.getDeclarations()[0].getParentDecl() !== i;
          });
        return 0 > o ? n.length : o;
      }),
      (t.prototype.bindEnumDeclarationToPullSymbol = function (t) {
        var n = t.name,
          r = null,
          i = null,
          o = null,
          s = (t.getValueDecl(), t.kind),
          a = this.getParent(t),
          l = this.getParent(t, !0),
          c = t.getParentDecl(),
          u = this.semanticInfoChain.getASTForDecl(t),
          p = 1 & t.flags,
          h = !1;
        if (
          ((r = this.getExistingSymbol(t, 64, a)),
          r &&
            (r.kind !== s
              ? (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
                  u.identifier,
                  t.getDisplayName(),
                  r.getDeclarations()[0].ast()
                ),
                (r = null))
              : this.checkThatExportsMatch(t, r) || (r = null)),
          r
            ? (i = r.getInstanceSymbol())
            : ((r = new e.PullContainerSymbol(n, s)),
              (h = !0),
              a || this.semanticInfoChain.cacheGlobalSymbol(r, 64)),
          r.addDeclaration(t),
          t.setSymbol(r),
          this.semanticInfoChain.setSymbolForAST(u.identifier, r),
          this.semanticInfoChain.setSymbolForAST(u, r),
          !i)
        ) {
          var d = null;
          if (l) {
            if (
              (p
                ? ((d = l.findMember(n, !1)),
                  d || (d = l.findContainedNonMember(n)))
                : ((d = l.findContainedNonMember(n)),
                  d || (d = l.findMember(n, !1))),
              d)
            ) {
              var m = d.getDeclarations();
              if (m.length) {
                var f = m[0].getParentDecl();
                c !== f && (d = null);
              }
            }
          } else if (!(1 & t.flags)) {
            for (
              var g = c.getChildDecls(), v = null, y = 0;
              y < g.length && g[y] !== t;
              y++
            )
              if (g[y].name === n && 68147712 & g[y].kind) {
                v = g[y];
                break;
              }
            v &&
              ((d = v.getSymbol()),
              d &&
                (d.isContainer()
                  ? (d = d.getInstanceSymbol())
                  : d && d.isType() && (d = d.getConstructorMethod())));
          }
          d ? ((i = d), (o = d.type)) : (i = new e.PullSymbol(n, 512)),
            r.setInstanceSymbol(i),
            o || ((o = new e.PullTypeSymbol("", 8388608)), (i.type = o)),
            o.addDeclaration(t),
            o.getAssociatedContainerType() || o.setAssociatedContainerType(r);
        }
        h &&
          a &&
          (1 & t.flags
            ? a.addEnclosedMemberType(r)
            : a.addEnclosedNonMemberType(r)),
          h && this.bindEnumIndexerDeclsToPullSymbols(r);
        var b = t.getValueDecl();
        b && b.ensureSymbolIsBound();
      }),
      (t.prototype.bindEnumIndexerDeclsToPullSymbols = function (t) {
        var n = t.getInstanceSymbol().type,
          r = new e.PullSymbol("x", 2048);
        (r.type = this.semanticInfoChain.numberTypeSymbol),
          r.setResolved(),
          r.setIsSynthesized();
        var i = new e.PullSignatureSymbol(4194304);
        i.addParameter(r),
          (i.returnType = this.semanticInfoChain.stringTypeSymbol),
          i.setResolved(),
          i.setIsSynthesized(),
          n.addIndexSignature(i);
      }),
      (t.prototype.findExistingVariableSymbolForModuleValueDecl = function (t) {
        var n = e.hasFlag(t.flags, 1),
          r = t.name,
          i = this.getParent(t, !0),
          o = t.getParentDecl(),
          s = null;
        if (i) {
          if (
            (n
              ? ((s = i.findMember(r, !1)),
                s || (s = i.findContainedNonMember(r)))
              : ((s = i.findContainedNonMember(r)),
                s || (s = i.findMember(r, !1))),
            s)
          ) {
            var a = s.getDeclarations();
            if (a.length) {
              var l = a[0].getParentDecl(),
                c = n || o === l,
                u = c && this.checkThatExportsMatch(t, s, !1);
              u || (s = null);
            }
          }
        } else if (!n)
          for (var p = o.getChildDecls(), h = 0; h < p.length; h++) {
            var d = p[h],
              m = e.hasFlag(d.kind, 68147712),
              f = e.hasFlag(d.kind, 1032192) || e.hasFlag(d.flags, 118784),
              g = d !== t && d !== t.getValueDecl() && d.name === r && m && f;
            if (g && d.hasSymbol()) {
              (s = d.getSymbol()),
                s.isContainer()
                  ? (s = s.getInstanceSymbol())
                  : s && s.isType() && (s = s.getConstructorMethod());
              break;
            }
          }
        return s;
      }),
      (t.prototype.bindModuleDeclarationToPullSymbol = function (t) {
        var n = t.name,
          r = null,
          i = t.kind,
          o = this.getParent(t),
          s =
            (this.getParent(t, !0),
            t.getParentDecl(),
            this.semanticInfoChain.getASTForDecl(t)),
          a = e.ASTHelpers.getEnclosingModuleDeclaration(s);
        a ||
          (e.Debug.assert(32 === i), e.Debug.assert(120 === s.kind()), (a = s));
        var l = (e.hasFlag(t.flags, 1), 164),
          c = 0 !== (102400 & t.flags);
        o &&
          32 === i &&
          this.semanticInfoChain.addDiagnosticFromAST(
            s,
            e.DiagnosticCode
              .Ambient_external_module_declaration_must_be_defined_in_global_context,
            null
          );
        var u = !1;
        (r = this.getExistingSymbol(t, l, o)),
          r &&
            (r.kind !== i
              ? (c &&
                  this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
                    s,
                    t.getDisplayName(),
                    r.getDeclarations()[0].ast()
                  ),
                (r = null))
              : 32 === i
              ? this.semanticInfoChain.addDiagnosticFromAST(
                  s,
                  e.DiagnosticCode
                    .Ambient_external_module_declaration_cannot_be_reopened
                )
              : this.checkThatExportsMatch(t, r) || (r = null)),
          r ||
            ((r = new e.PullContainerSymbol(n, i)),
            (u = !0),
            o || this.semanticInfoChain.cacheGlobalSymbol(r, l)),
          r.addDeclaration(t),
          t.setSymbol(r),
          this.semanticInfoChain.setSymbolForAST(s, r),
          this.semanticInfoChain.setSymbolForAST(a, r);
        {
          var p = t.getValueDecl();
          r.getDeclarations();
        }
        if (
          (u &&
            o &&
            (1 & t.flags
              ? o.addEnclosedMemberContainer(r)
              : o.addEnclosedNonMemberContainer(r)),
          p)
        ) {
          p.ensureSymbolIsBound();
          var h = null;
          p.hasSymbol()
            ? (h = p.getSymbol())
            : ((h = new e.PullSymbol(n, 512)),
              p.setSymbol(h),
              h.hasDeclaration(p) || h.addDeclaration(p)),
            h.type || (h.type = new e.PullTypeSymbol("", 8388608)),
            r.setInstanceSymbol(h),
            h.type.getAssociatedContainerType() ||
              h.type.setAssociatedContainerType(r);
        }
      }),
      (t.prototype.bindImportDeclaration = function (t) {
        var n = t.flags,
          r = (t.kind, this.semanticInfoChain.getASTForDecl(t)),
          i = null,
          o = t.name,
          s = !1,
          a = this.getParent(t);
        (i = this.getExistingSymbol(t, 164, a)),
          i && (s = !0),
          i &&
            (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
              r,
              t.getDisplayName(),
              i.getDeclarations()[0].ast()
            ),
            (i = null)),
          i ||
            ((i = new e.PullTypeAliasSymbol(o)),
            a || this.semanticInfoChain.cacheGlobalSymbol(i, 164)),
          i.addDeclaration(t),
          t.setSymbol(i),
          this.semanticInfoChain.setSymbolForAST(r, i),
          a &&
            !s &&
            (1 & n
              ? a.addEnclosedMemberContainer(i)
              : a.addEnclosedNonMemberContainer(i));
      }),
      (t.prototype.ensurePriorDeclarationsAreBound = function (e, t) {
        if (e)
          for (var n = e.getDeclarations(), r = 0; r < n.length; ++r)
            for (
              var i = n[r], o = i.getChildDecls(), s = 0;
              s < o.length;
              ++s
            ) {
              var a = o[s];
              if (a === t) return;
              a.name === t.name && a.ensureSymbolIsBound();
            }
      }),
      (t.prototype.bindClassDeclarationToPullSymbol = function (t) {
        var n = t.name,
          r = null,
          i = null,
          o = null,
          s = this.semanticInfoChain.getASTForDecl(t),
          a = this.getParent(t);
        this.ensurePriorDeclarationsAreBound(a, t);
        {
          var l = t.getParentDecl();
          1 & t.flags;
        }
        (r = this.getExistingSymbol(t, 58728795, a)),
          r &&
            16 === r.kind &&
            (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
              s.identifier,
              t.getDisplayName(),
              r.getDeclarations()[0].ast()
            ),
            (r = null)),
          (r = new e.PullTypeSymbol(n, 8)),
          a || this.semanticInfoChain.cacheGlobalSymbol(r, 8),
          r.addDeclaration(t),
          t.setSymbol(r),
          this.semanticInfoChain.setSymbolForAST(s.identifier, r),
          this.semanticInfoChain.setSymbolForAST(s, r),
          a &&
            (1 & t.flags
              ? a.addEnclosedMemberType(r)
              : a.addEnclosedNonMemberType(r));
        for (var c = t.getTypeParameters(), u = 0; u < c.length; u++) {
          var p = r.findTypeParameter(c[u].name);
          if (p) {
            var h = this.semanticInfoChain.getASTForDecl(
              p.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              h,
              e.DiagnosticCode.Duplicate_identifier_0,
              [p.getName()]
            );
          }
          (p = new e.PullTypeParameterSymbol(c[u].name)),
            r.addTypeParameter(p),
            p.addDeclaration(c[u]),
            c[u].setSymbol(p);
        }
        if (((i = r.getConstructorMethod()), (o = i ? i.type : null), !i)) {
          var d = null;
          l &&
            ((d = l.searchChildDecls(n, 68147712)),
            d && d[0] && d[0].hasSymbol() && (i = d[0].getSymbol())),
            i
              ? (o = i.type)
              : ((i = new e.PullSymbol(n, 32768)),
                (o = new e.PullTypeSymbol("", 33554432)),
                i.setIsSynthesized(),
                (i.type = o)),
            r.setConstructorMethod(i),
            r.setHasDefaultConstructor();
        }
        i.getIsSynthesized()
          ? (i.addDeclaration(t.getValueDecl()), o.addDeclaration(t))
          : r.setHasDefaultConstructor(!1),
          o.setAssociatedContainerType(r);
        var m = t.getValueDecl();
        m && m.ensureSymbolIsBound(),
          this.bindStaticPrototypePropertyOfClass(s, r, o);
      }),
      (t.prototype.bindInterfaceDeclarationToPullSymbol = function (t) {
        var n = t.name,
          r = null,
          i = this.semanticInfoChain.getASTForDecl(t),
          o = !1,
          s = this.getParent(t),
          a = 16;
        (r = this.getExistingSymbol(t, 58728795, s)),
          r &&
            (r.kind & a
              ? this.checkThatExportsMatch(t, r) || (r = null)
              : (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
                  i.identifier,
                  t.getDisplayName(),
                  r.getDeclarations()[0].ast()
                ),
                (r = null))),
          r ||
            ((r = new e.PullTypeSymbol(n, 16)),
            (o = !0),
            s || this.semanticInfoChain.cacheGlobalSymbol(r, a)),
          r.addDeclaration(t),
          t.setSymbol(r),
          o &&
            s &&
            (1 & t.flags
              ? s.addEnclosedMemberType(r)
              : s.addEnclosedNonMemberType(r));
        for (
          var l, c = t.getTypeParameters(), u = null, p = 0;
          p < c.length;
          p++
        ) {
          if ((l = r.findTypeParameter(c[p].name))) {
            u = l.getDeclarations();
            for (var h = 0; h < u.length; h++) {
              var d = u[h].getParentDecl();
              if (d && d === t) {
                var m = this.semanticInfoChain.getASTForDecl(u[0]);
                this.semanticInfoChain.addDiagnosticFromAST(
                  m,
                  e.DiagnosticCode.Duplicate_identifier_0,
                  [l.getName()]
                );
                break;
              }
            }
          } else
            (l = new e.PullTypeParameterSymbol(c[p].name)),
              r.addTypeParameter(l);
          l.addDeclaration(c[p]), c[p].setSymbol(l);
        }
      }),
      (t.prototype.bindObjectTypeDeclarationToPullSymbol = function (t) {
        var n = this.semanticInfoChain.getASTForDecl(t),
          r = new e.PullTypeSymbol("", 8388608);
        r.addDeclaration(t),
          t.setSymbol(r),
          this.semanticInfoChain.setSymbolForAST(n, r);
        for (var i = t.getChildDecls(), o = 0; o < i.length; o++)
          this.bindDeclToPullSymbol(i[o]);
      }),
      (t.prototype.bindConstructorTypeDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags, this.semanticInfoChain.getASTForDecl(t)),
          r = new e.PullTypeSymbol("", 33554432);
        t.setSymbol(r),
          r.addDeclaration(t),
          this.semanticInfoChain.setSymbolForAST(n, r);
        var i = new e.PullSignatureSymbol(2097152),
          o = this.semanticInfoChain.getASTForDecl(t);
        e.lastParameterIsRest(o.parameterList) && (i.hasVarArgs = !0),
          i.addDeclaration(t),
          t.setSignatureSymbol(i),
          this.bindParameterSymbols(
            o,
            e.ASTHelpers.parametersFromParameterList(o.parameterList),
            r,
            i
          );
        for (var s, a = t.getTypeParameters(), l = 0; l < a.length; l++) {
          if ((s = r.findTypeParameter(a[l].name))) {
            var c = this.semanticInfoChain.getASTForDecl(
              s.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              c,
              e.DiagnosticCode.Duplicate_identifier_0,
              [s.name]
            );
          } else
            (s = new e.PullTypeParameterSymbol(a[l].name)),
              i.addTypeParameter(s);
          s.addDeclaration(a[l]), a[l].setSymbol(s);
        }
        r.appendConstructSignature(i);
      }),
      (t.prototype.bindVariableDeclarationToPullSymbol = function (t) {
        var n = t.flags,
          r = t.kind,
          i = this.semanticInfoChain.getASTForDecl(t),
          o =
            131 === i.kind()
              ? i.identifier
              : 225 === i.kind()
              ? i.propertyName
              : 132 === i.kind()
              ? i.identifier
              : i,
          s = null,
          a = t.name,
          l = !1,
          c = this.getParent(t, !0),
          u = t.getParentDecl(),
          p = 0 !== (118784 & n),
          h = 0 !== (32768 & n),
          d = 0 !== (4096 & n),
          m = 0 !== (16384 & n);
        (s = this.getExistingSymbol(t, 68147712, c)),
          !s &&
            h &&
            (s = this.findExistingVariableSymbolForModuleValueDecl(
              t.getContainerDecl()
            )),
          s && !s.isType() && (l = !0);
        var f, g, v, y;
        if (s) {
          var b = s.kind,
            _ = s.anyDeclHasFlag(4096),
            w = s.anyDeclHasFlag(16384),
            S = s.allDeclsHaveFlag(32768),
            T = s.anyDeclHasFlag(118784),
            k = e.ArrayUtilities.any(s.getDeclarations(), function (e) {
              return 16384 === e.kind;
            }),
            x = s.allDeclsHaveFlag(8),
            C = x || 0 !== (8 & t.flags),
            E = s.getDeclarations()[0],
            A = E.getParentDecl(),
            L = u && 1 === u.kind && 1 === A.kind,
            I = L || E.getParentDecl() === t.getParentDecl(),
            D = I && 2048 === b && 512 == r,
            P =
              D ||
              (p &&
                ((!d && !m && k) ||
                  ((h || d) && (S || _)) ||
                  (m && S && C) ||
                  (h && w)));
          P &&
            (w || k) &&
            !C &&
            E.fileName() !== t.fileName() &&
            (this.semanticInfoChain.addDiagnostic(
              e.PullHelpers.diagnosticFromDecl(
                t,
                e.DiagnosticCode
                  .Module_0_cannot_merge_with_previous_declaration_of_1_in_a_different_file_2,
                [a, a, E.fileName()]
              )
            ),
            (s.type = this.semanticInfoChain
              .getResolver()
              .getNewErrorTypeSymbol(a))),
            (!P || D) &&
              ((!D && (p || T || e.hasFlag(b, 1032192))) || !I
                ? (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
                    o,
                    t.getDisplayName(),
                    s.getDeclarations()[0].ast()
                  ),
                  (s.type = this.semanticInfoChain
                    .getResolver()
                    .getNewErrorTypeSymbol(a)))
                : (this.checkThatExportsMatch(t, s), (s = null), (l = !1))),
            !s ||
              (s.type && s.type.isError()) ||
              this.checkThatExportsMatch(t, s, !(h && S)) ||
              (s.type = this.semanticInfoChain
                .getResolver()
                .getNewErrorTypeSymbol(a));
        }
        if (0 === (118784 & n))
          s ||
            ((s = new e.PullSymbol(a, r)),
            c ||
              1 !== u.kind ||
              this.semanticInfoChain.cacheGlobalSymbol(s, r)),
            s.addDeclaration(t),
            t.setSymbol(s),
            this.semanticInfoChain.setSymbolForAST(o, s),
            this.semanticInfoChain.setSymbolForAST(i, s);
        else if (l) s.hasDeclaration(t) || s.addDeclaration(t), t.setSymbol(s);
        else if (m) {
          var N = s;
          if (c) {
            y = c.getMembers();
            for (var M = 0; M < y.length; M++)
              if (y[M].name === a && 8 === y[M].kind) {
                N = y[M];
                break;
              }
          }
          if (!N) {
            var R = t.getContainerDecl();
            (N = R.getSymbol()),
              N ||
                (N = this.semanticInfoChain.findTopLevelSymbol(a, 58728795, t));
          }
          N && 8 !== N.kind && (N = null),
            N && N.isClass()
              ? ((s = N.getConstructorMethod()),
                t.setSymbol(s),
                (g = N.getDeclarations()),
                g.length &&
                  ((f = g[g.length - 1]),
                  (v = this.semanticInfoChain.getASTForDecl(f))))
              : (s || (s = new e.PullSymbol(a, r)),
                s.addDeclaration(t),
                t.setSymbol(s),
                (s.type = this.semanticInfoChain.anyTypeSymbol));
        } else if (102400 & n) {
          var O = null,
            F = this.getParent(t);
          if (F) {
            y = F.getMembers();
            for (var M = 0; M < y.length; M++)
              if (y[M].name === a && y[M].isContainer()) {
                O = y[M];
                break;
              }
          }
          if (!O) {
            var R = t.getContainerDecl();
            (O = R.getSymbol()),
              O ||
                ((O = this.semanticInfoChain.findTopLevelSymbol(a, 164, t)),
                O || (O = this.semanticInfoChain.findTopLevelSymbol(a, 64, t)));
          }
          O && !O.isContainer() && (O = null),
            O
              ? ((s = O.getInstanceSymbol()),
                s ||
                  ((s = new e.PullSymbol(a, r)),
                  (s.type = new e.PullTypeSymbol("", 8388608))),
                s.hasDeclaration(t) || s.addDeclaration(t),
                t.setSymbol(s))
              : e.Debug.assert(
                  !1,
                  "Attempted to bind invalid implicit variable symbol"
                );
        }
        var R = t.getContainerDecl();
        s &&
          s.type &&
          R &&
          !s.type.hasDeclaration(R) &&
          s.type.addDeclaration(R),
          c && !l && (1 & n ? c.addMember(s) : c.addEnclosedNonMember(s));
      }),
      (t.prototype.bindCatchVariableToPullSymbol = function (t) {
        var n = (t.flags, t.kind),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = t.name,
          o = new e.PullSymbol(i, n);
        o.addDeclaration(t),
          t.setSymbol(o),
          (o.type = this.semanticInfoChain.anyTypeSymbol),
          this.semanticInfoChain.setSymbolForAST(r, o);
      }),
      (t.prototype.bindEnumMemberDeclarationToPullSymbol = function (t) {
        var n = (t.flags, t.kind),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = t.name,
          o = !1,
          s = this.getParent(t, !0),
          a = s.findMember(i, !1);
        a &&
          this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
            r.propertyName,
            t.getDisplayName(),
            a.getDeclarations()[0].ast()
          ),
          a && (o = !0),
          o || (a = new e.PullSymbol(i, n)),
          a.addDeclaration(t),
          t.setSymbol(a),
          this.semanticInfoChain.setSymbolForAST(r.propertyName, a),
          this.semanticInfoChain.setSymbolForAST(r, a),
          s && !o && s.addMember(a);
      }),
      (t.prototype.bindPropertyDeclarationToPullSymbol = function (t) {
        var n = t.flags,
          r = t.kind,
          i = this.semanticInfoChain.getASTForDecl(t),
          o =
            136 === i.kind()
              ? i.variableDeclarator.propertyName
              : 141 === i.kind()
              ? i.propertyName
              : 242 === i.kind()
              ? i.identifier
              : i.propertyName,
          s = !1,
          a = !1,
          l = null;
        e.hasFlag(n, 16) && (s = !0), e.hasFlag(n, 128) && (a = !0);
        var c = t.name,
          u = !1,
          p = this.getParent(t, !0);
        p.isClass() && s && (p = p.getConstructorMethod().type),
          (l = p.findMember(c, !1)),
          l &&
            this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
              o,
              t.getDisplayName(),
              l.getDeclarations()[0].ast()
            ),
          l && (u = !0);
        u || (l = new e.PullSymbol(c, r)),
          l.addDeclaration(t),
          t.setSymbol(l),
          this.semanticInfoChain.setSymbolForAST(o, l),
          this.semanticInfoChain.setSymbolForAST(i, l),
          a && (l.isOptional = !0),
          p && !u && p.addMember(l);
      }),
      (t.prototype.bindParameterSymbols = function (t, n, r, i) {
        {
          var o = e.createIntrinsicsObject();
          this.semanticInfoChain.getDeclForAST(t);
        }
        if (n)
          for (var s = 0, a = n.length; a > s; s++) {
            var l = n.astAt(s),
              c = n.identifierAt(s),
              u = this.semanticInfoChain.getDeclForAST(l),
              p = e.hasFlag(u.flags, 8388608),
              h = new e.PullSymbol(c.valueText(), 2048);
            if (
              (s === a - 1 && n.lastParameterIsRest() && (h.isVarArg = !0),
              o[c.valueText()]
                ? this.semanticInfoChain.addDiagnosticFromAST(
                    l,
                    e.DiagnosticCode.Duplicate_identifier_0,
                    [c.text()]
                  )
                : (o[c.valueText()] = !0),
              u)
            ) {
              var d = !1;
              if (p) {
                u.ensureSymbolIsBound();
                var m = u.getValueDecl();
                m &&
                  ((d = e.hasFlag(m.flags, 128)),
                  m.setSymbol(h),
                  h.addDeclaration(m));
              } else
                (d = e.hasFlag(u.flags, 128)),
                  h.addDeclaration(u),
                  u.setSymbol(h);
              h.isOptional = d;
            }
            i.addParameter(h, h.isOptional),
              i.isDefinition() && r.addEnclosedNonMember(h);
          }
      }),
      (t.prototype.bindFunctionDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = 0 !== (1 & n),
          o = t.name,
          s = 0 !== (2048 & n),
          a = this.getParent(t, !0),
          l = (t.getParentDecl(), !1),
          c = null,
          u = null;
        if ((c = this.getExistingSymbol(t, 68147712, a))) {
          var p;
          if (16384 === c.kind) p = s || c.allDeclsHaveFlag(2048);
          else {
            var h = e.hasFlag(t.flags, 8);
            p = e.ArrayUtilities.all(c.getDeclarations(), function (t) {
              var n = e.hasFlag(t.flags, 32768) && (h || e.hasFlag(t.flags, 8)),
                r = e.hasFlag(t.flags, 2048);
              return n || r;
            });
          }
          p ||
            (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
              r.identifier,
              t.getDisplayName(),
              c.getDeclarations()[0].ast()
            ),
            (c.type = this.semanticInfoChain
              .getResolver()
              .getNewErrorTypeSymbol(o)));
        }
        c && ((u = c.type), (l = !0)),
          c || (c = new e.PullSymbol(o, 16384)),
          u ||
            ((u = new e.PullTypeSymbol("", 16777216)),
            (c.type = u),
            u.setFunctionSymbol(c)),
          t.setSymbol(c),
          c.addDeclaration(t),
          u.addDeclaration(t),
          this.semanticInfoChain.setSymbolForAST(r.identifier, c),
          this.semanticInfoChain.setSymbolForAST(r, c),
          a && !l && (i ? a.addMember(c) : a.addEnclosedNonMember(c));
        var d = new e.PullSignatureSymbol(1048576, !s);
        d.addDeclaration(t),
          t.setSignatureSymbol(d),
          e.lastParameterIsRest(r.callSignature.parameterList) &&
            (d.hasVarArgs = !0);
        var m = this.semanticInfoChain.getASTForDecl(t);
        this.bindParameterSymbols(
          m,
          e.ASTHelpers.parametersFromParameterList(
            m.callSignature.parameterList
          ),
          u,
          d
        );
        for (var f, g = t.getTypeParameters(), v = 0; v < g.length; v++) {
          if ((f = d.findTypeParameter(g[v].name))) {
            var y = this.semanticInfoChain.getASTForDecl(
              f.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              y,
              e.DiagnosticCode.Duplicate_identifier_0,
              [f.name]
            );
          } else
            (f = new e.PullTypeParameterSymbol(g[v].name)),
              d.addTypeParameter(f);
          f.addDeclaration(g[v]), g[v].setSymbol(f);
        }
        u.appendCallSignature(d);
      }),
      (t.prototype.bindFunctionExpressionToPullSymbol = function (t) {
        var n = t.kind,
          r = (t.flags, this.semanticInfoChain.getASTForDecl(t)),
          i =
            219 === r.kind()
              ? e.ASTHelpers.parametersFromIdentifier(r.identifier)
              : e.ASTHelpers.parametersFromParameterList(
                  e.ASTHelpers.getParameterList(r)
                ),
          o = r,
          s = 131072 === n ? t.getFunctionExpressionName() : t.name,
          a = new e.PullSymbol(s, n),
          l = new e.PullTypeSymbol("", 16777216);
        l.setFunctionSymbol(a),
          (a.type = l),
          t.setSymbol(a),
          a.addDeclaration(t),
          l.addDeclaration(t);
        var c =
          222 === o.kind()
            ? o.identifier
            : 241 === o.kind()
            ? o.propertyName
            : null;
        c && this.semanticInfoChain.setSymbolForAST(c, a),
          this.semanticInfoChain.setSymbolForAST(o, a);
        var u = new e.PullSignatureSymbol(1048576, !0);
        i.lastParameterIsRest() && (u.hasVarArgs = !0);
        for (var p, h = t.getTypeParameters(), d = 0; d < h.length; d++) {
          if ((p = u.findTypeParameter(h[d].name))) {
            var m = this.semanticInfoChain.getASTForDecl(
              p.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              m,
              e.DiagnosticCode.Duplicate_identifier_0,
              [p.getName()]
            );
          } else
            (p = new e.PullTypeParameterSymbol(h[d].name)),
              u.addTypeParameter(p);
          p.addDeclaration(h[d]), h[d].setSymbol(p);
        }
        u.addDeclaration(t),
          t.setSignatureSymbol(u),
          this.bindParameterSymbols(o, i, l, u),
          l.appendCallSignature(u);
      }),
      (t.prototype.bindFunctionTypeDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = new e.PullTypeSymbol("", 16777216);
        t.setSymbol(i),
          i.addDeclaration(t),
          this.semanticInfoChain.setSymbolForAST(r, i);
        var o = 0 !== (2048 & n),
          s = new e.PullSignatureSymbol(1048576, !o);
        e.lastParameterIsRest(r.parameterList) && (s.hasVarArgs = !0);
        for (var a, l = t.getTypeParameters(), c = 0; c < l.length; c++) {
          if ((a = s.findTypeParameter(l[c].name))) {
            var u = this.semanticInfoChain.getASTForDecl(
              a.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              u,
              e.DiagnosticCode.Duplicate_identifier_0,
              [a.name]
            );
          } else
            (a = new e.PullTypeParameterSymbol(l[c].name)),
              s.addTypeParameter(a);
          a.addDeclaration(l[c]), l[c].setSymbol(a);
        }
        s.addDeclaration(t),
          t.setSignatureSymbol(s),
          this.bindParameterSymbols(
            r,
            e.ASTHelpers.parametersFromParameterList(r.parameterList),
            i,
            s
          ),
          i.appendCallSignature(s);
      }),
      (t.prototype.bindMethodDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = 0 !== (16 & n),
          o = 0 !== (128 & n),
          s = t.name,
          a = 0 !== (2048 & n),
          l = this.getParent(t, !0),
          c = !1,
          u = null,
          p = null;
        l.isClass() && i && (l = l.getConstructorMethod().type),
          (u = l.findMember(s, !1)),
          !u ||
            (65536 === u.kind && (a || u.allDeclsHaveFlag(2048))) ||
            (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
              r,
              t.getDisplayName(),
              u.getDeclarations()[0].ast()
            ),
            (u = null)),
          u && ((p = u.type), (c = !0)),
          u || (u = new e.PullSymbol(s, 65536)),
          p ||
            ((p = new e.PullTypeSymbol("", 16777216)),
            (u.type = p),
            p.setFunctionSymbol(u)),
          t.setSymbol(u),
          u.addDeclaration(t),
          p.addDeclaration(t);
        var h = 135 === r.kind() ? r.propertyName : r.propertyName;
        e.Debug.assert(h),
          this.semanticInfoChain.setSymbolForAST(h, u),
          this.semanticInfoChain.setSymbolForAST(r, u),
          o && (u.isOptional = !0),
          c || l.addMember(u);
        var d = 1048576,
          m = new e.PullSignatureSymbol(d, !a),
          f = e.ASTHelpers.getParameterList(r);
        e.lastParameterIsRest(f) && (m.hasVarArgs = !0);
        for (var g, v, y, b = t.getTypeParameters(), _ = 0; _ < b.length; _++)
          (v = b[_].name),
            (y = this.semanticInfoChain.getASTForDecl(b[_])),
            (g = m.findTypeParameter(v)),
            g
              ? this.semanticInfoChain.addDiagnosticFromAST(
                  y,
                  e.DiagnosticCode.Duplicate_identifier_0,
                  [g.getName()]
                )
              : ((g = new e.PullTypeParameterSymbol(v)), m.addTypeParameter(g)),
            g.addDeclaration(b[_]),
            b[_].setSymbol(g);
        m.addDeclaration(t), t.setSignatureSymbol(m);
        var w = this.semanticInfoChain.getASTForDecl(t);
        this.bindParameterSymbols(
          w,
          e.ASTHelpers.parametersFromParameterList(
            e.ASTHelpers.getParameterList(w)
          ),
          p,
          m
        );
        var S = this.getIndexForInsertingSignatureAtEndOfEnclosingDeclInSignatureList(
          m,
          p.getOwnCallSignatures()
        );
        p.insertCallSignatureAtIndex(m, S);
      }),
      (t.prototype.bindStaticPrototypePropertyOfClass = function (t, n, r) {
        var i = "prototype",
          o = r.findMember(i, !1);
        if (
          (o &&
            !o.getIsSynthesized() &&
            this.semanticInfoChain.addDiagnostic(
              e.PullHelpers.diagnosticFromDecl(
                o.getDeclarations()[0],
                e.DiagnosticCode.Duplicate_identifier_0,
                [o.getDisplayName()]
              )
            ),
          !o || !o.getIsSynthesized())
        ) {
          var s = new e.PullSynthesizedDecl(
            i,
            i,
            4096,
            20,
            r.getDeclarations()[0],
            this.semanticInfoChain
          );
          if (
            ((o = new e.PullSymbol(i, 4096)),
            o.setIsSynthesized(),
            o.addDeclaration(s),
            (o.type = n),
            r.addMember(o),
            o.type && o.type.isGeneric())
          ) {
            var a = this.semanticInfoChain.getResolver();
            o.type = a.instantiateTypeToAny(
              o.type,
              new e.PullTypeResolutionContext(a)
            );
          }
          o.setResolved();
        }
      }),
      (t.prototype.bindConstructorDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = t.name,
          o = 0 !== (2048 & n),
          s = this.getParent(t, !0),
          a = s.getConstructorMethod(),
          l = null;
        if (
          a &&
          (32768 !== a.kind ||
            (!o && a.type && a.type.hasOwnConstructSignatures()))
        ) {
          for (
            var c = !1, u = a.type.getConstructSignatures(), p = 0;
            p < u.length;
            p++
          )
            if (!u[p].anyDeclHasFlag(2048)) {
              c = !0;
              break;
            }
          c &&
            (this.semanticInfoChain.addDiagnosticFromAST(
              r,
              e.DiagnosticCode
                .Multiple_constructor_implementations_are_not_allowed
            ),
            (a = null));
        }
        a
          ? (l = a.type)
          : ((a = new e.PullSymbol(i, 32768)),
            (l = new e.PullTypeSymbol("", 33554432))),
          s.setConstructorMethod(a),
          (a.type = l),
          t.setSymbol(a),
          a.addDeclaration(t),
          l.addDeclaration(t),
          a.setIsSynthesized(!1),
          this.semanticInfoChain.setSymbolForAST(r, a);
        var h = new e.PullSignatureSymbol(2097152, !o);
        (h.returnType = s),
          h.addTypeParametersFromReturnType(),
          h.addDeclaration(t),
          t.setSignatureSymbol(h),
          this.bindParameterSymbols(
            r,
            e.ASTHelpers.parametersFromParameterList(
              r.callSignature.parameterList
            ),
            l,
            h
          ),
          e.lastParameterIsRest(r.callSignature.parameterList) &&
            (h.hasVarArgs = !0),
          l.appendConstructSignature(h);
      }),
      (t.prototype.bindConstructSignatureDeclarationToPullSymbol = function (
        t
      ) {
        var n = this.getParent(t, !0),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = new e.PullSignatureSymbol(2097152);
        e.lastParameterIsRest(r.callSignature.parameterList) &&
          (i.hasVarArgs = !0);
        for (var o, s = t.getTypeParameters(), a = 0; a < s.length; a++) {
          if ((o = i.findTypeParameter(s[a].name))) {
            var l = this.semanticInfoChain.getASTForDecl(
              o.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              l,
              e.DiagnosticCode.Duplicate_identifier_0,
              [o.getName()]
            );
          } else
            (o = new e.PullTypeParameterSymbol(s[a].name)),
              i.addTypeParameter(o);
          o.addDeclaration(s[a]), s[a].setSymbol(o);
        }
        i.addDeclaration(t), t.setSignatureSymbol(i);
        var c = this.semanticInfoChain.getASTForDecl(t);
        this.bindParameterSymbols(
          c,
          e.ASTHelpers.parametersFromParameterList(
            e.ASTHelpers.getParameterList(c)
          ),
          null,
          i
        ),
          this.semanticInfoChain.setSymbolForAST(
            this.semanticInfoChain.getASTForDecl(t),
            i
          );
        var u = this.getIndexForInsertingSignatureAtEndOfEnclosingDeclInSignatureList(
          i,
          n.getOwnConstructSignatures()
        );
        n.insertConstructSignatureAtIndex(i, u);
      }),
      (t.prototype.bindCallSignatureDeclarationToPullSymbol = function (t) {
        var n = this.getParent(t, !0),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = new e.PullSignatureSymbol(1048576);
        e.lastParameterIsRest(r.parameterList) && (i.hasVarArgs = !0);
        for (var o, s = t.getTypeParameters(), a = 0; a < s.length; a++) {
          if ((o = i.findTypeParameter(s[a].name))) {
            var l = this.semanticInfoChain.getASTForDecl(
              o.getDeclarations()[0]
            );
            this.semanticInfoChain.addDiagnosticFromAST(
              l,
              e.DiagnosticCode.Duplicate_identifier_0,
              [o.getName()]
            );
          } else
            (o = new e.PullTypeParameterSymbol(s[a].name)),
              i.addTypeParameter(o);
          o.addDeclaration(s[a]), s[a].setSymbol(o);
        }
        i.addDeclaration(t), t.setSignatureSymbol(i);
        var c = this.semanticInfoChain.getASTForDecl(t);
        this.bindParameterSymbols(
          c,
          e.ASTHelpers.parametersFromParameterList(c.parameterList),
          null,
          i
        ),
          this.semanticInfoChain.setSymbolForAST(
            this.semanticInfoChain.getASTForDecl(t),
            i
          );
        var u = this.getIndexForInsertingSignatureAtEndOfEnclosingDeclInSignatureList(
          i,
          n.getOwnCallSignatures()
        );
        n.insertCallSignatureAtIndex(i, u);
      }),
      (t.prototype.bindIndexSignatureDeclarationToPullSymbol = function (t) {
        var n = new e.PullSignatureSymbol(4194304);
        n.addDeclaration(t), t.setSignatureSymbol(n);
        var r = this.semanticInfoChain.getASTForDecl(t);
        this.bindParameterSymbols(
          r,
          e.ASTHelpers.parametersFromParameter(r.parameter),
          null,
          n
        ),
          this.semanticInfoChain.setSymbolForAST(
            this.semanticInfoChain.getASTForDecl(t),
            n
          );
        var i = this.getParent(t);
        i.addIndexSignature(n), n.setContainer(i);
      }),
      (t.prototype.bindGetAccessorDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = t.name,
          o = 0 !== (2048 & n),
          s = !1;
        e.hasFlag(n, 16) && (s = !0);
        var a = this.getParent(t, !0),
          l = !1,
          c = null,
          u = null,
          p = null;
        s && (a = a.getConstructorMethod().type),
          (c = a.findMember(i, !1)),
          c &&
            (c.isAccessor()
              ? ((u = c.getGetter()),
                u &&
                  (this.semanticInfoChain.addDiagnosticFromAST(
                    r,
                    e.DiagnosticCode.Getter_0_already_declared,
                    [t.getDisplayName()]
                  ),
                  (c = null),
                  (u = null)))
              : (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
                  r.propertyName,
                  t.getDisplayName(),
                  c.getDeclarations()[0].ast()
                ),
                (c = null))),
          c && (l = !0),
          c && u && (p = u.type),
          c || (c = new e.PullAccessorSymbol(i)),
          u ||
            ((u = new e.PullSymbol(i, 16384)),
            (p = new e.PullTypeSymbol("", 16777216)),
            p.setFunctionSymbol(u),
            (u.type = p),
            c.setGetter(u)),
          t.setSymbol(c),
          c.addDeclaration(t),
          u.addDeclaration(t);
        var h = r.propertyName;
        this.semanticInfoChain.setSymbolForAST(h, c),
          this.semanticInfoChain.setSymbolForAST(r, u),
          l || a.addMember(c);
        var d = new e.PullSignatureSymbol(1048576, !o);
        d.addDeclaration(t),
          t.setSignatureSymbol(d),
          this.bindParameterSymbols(
            r,
            e.ASTHelpers.parametersFromParameterList(r.parameterList),
            p,
            d
          ),
          p.appendCallSignature(d);
      }),
      (t.prototype.bindSetAccessorDeclarationToPullSymbol = function (t) {
        var n = (t.kind, t.flags),
          r = this.semanticInfoChain.getASTForDecl(t),
          i = t.name,
          o = 0 !== (2048 & n),
          s = !1;
        e.hasFlag(n, 16) && (s = !0);
        var a = this.getParent(t, !0),
          l = !1,
          c = null,
          u = null,
          p = null;
        s && (a = a.getConstructorMethod().type),
          (c = a.findMember(i, !1)),
          c &&
            (c.isAccessor()
              ? ((u = c.getSetter()),
                u &&
                  (this.semanticInfoChain.addDiagnosticFromAST(
                    r,
                    e.DiagnosticCode.Setter_0_already_declared,
                    [t.getDisplayName()]
                  ),
                  (c = null),
                  (u = null)))
              : (this.semanticInfoChain.addDuplicateIdentifierDiagnosticFromAST(
                  r.propertyName,
                  t.getDisplayName(),
                  c.getDeclarations()[0].ast()
                ),
                (c = null))),
          c && ((l = !0), u && (p = u.type)),
          c || (c = new e.PullAccessorSymbol(i)),
          u ||
            ((u = new e.PullSymbol(i, 16384)),
            (p = new e.PullTypeSymbol("", 16777216)),
            p.setFunctionSymbol(u),
            (u.type = p),
            c.setSetter(u)),
          t.setSymbol(c),
          c.addDeclaration(t),
          u.addDeclaration(t);
        var h = r.propertyName;
        this.semanticInfoChain.setSymbolForAST(h, c),
          this.semanticInfoChain.setSymbolForAST(r, u),
          l || a.addMember(c);
        var d = new e.PullSignatureSymbol(1048576, !o);
        d.addDeclaration(t),
          t.setSignatureSymbol(d),
          this.bindParameterSymbols(
            r,
            e.ASTHelpers.parametersFromParameterList(r.parameterList),
            p,
            d
          ),
          p.appendCallSignature(d);
      }),
      (t.prototype.getDeclsToBind = function (t) {
        var n;
        switch (t.kind) {
          case 64:
          case 32:
          case 4:
          case 16:
            n = this.findDeclsInContext(t, t.kind, !0);
            break;
          case 512:
          case 16384:
          case 65536:
          case 32768:
            n = this.findDeclsInContext(t, t.kind, !1);
            break;
          default:
            n = [t];
        }
        return (
          e.Debug.assert(n && n.length > 0),
          e.Debug.assert(e.ArrayUtilities.contains(n, t)),
          n
        );
      }),
      (t.prototype.shouldBindDeclaration = function (e) {
        return !e.hasBeenBound() && this.declsBeingBound.indexOf(e.declID) < 0;
      }),
      (t.prototype.bindDeclToPullSymbol = function (e) {
        this.shouldBindDeclaration(e) && this.bindAllDeclsToPullSymbol(e);
      }),
      (t.prototype.bindAllDeclsToPullSymbol = function (e) {
        for (var t = this.getDeclsToBind(e), n = 0; n < t.length; n++) {
          var r = t[n];
          this.shouldBindDeclaration(r) && this.bindSingleDeclToPullSymbol(r);
        }
      }),
      (t.prototype.bindSingleDeclToPullSymbol = function (t) {
        switch ((this.declsBeingBound.push(t.declID), t.kind)) {
          case 1:
            for (var n = t.getChildDecls(), r = 0; r < n.length; r++)
              this.bindDeclToPullSymbol(n[r]);
            break;
          case 64:
            this.bindEnumDeclarationToPullSymbol(t);
            break;
          case 32:
          case 4:
            this.bindModuleDeclarationToPullSymbol(t);
            break;
          case 16:
            this.bindInterfaceDeclarationToPullSymbol(t);
            break;
          case 8:
            this.bindClassDeclarationToPullSymbol(t);
            break;
          case 16384:
            this.bindFunctionDeclarationToPullSymbol(t);
            break;
          case 512:
            this.bindVariableDeclarationToPullSymbol(t);
            break;
          case 1024:
            this.bindCatchVariableToPullSymbol(t);
            break;
          case 67108864:
            this.bindEnumMemberDeclarationToPullSymbol(t);
            break;
          case 4096:
            this.bindPropertyDeclarationToPullSymbol(t);
            break;
          case 65536:
            this.bindMethodDeclarationToPullSymbol(t);
            break;
          case 32768:
            this.bindConstructorDeclarationToPullSymbol(t);
            break;
          case 1048576:
            this.bindCallSignatureDeclarationToPullSymbol(t);
            break;
          case 2097152:
            this.bindConstructSignatureDeclarationToPullSymbol(t);
            break;
          case 4194304:
            this.bindIndexSignatureDeclarationToPullSymbol(t);
            break;
          case 262144:
            this.bindGetAccessorDeclarationToPullSymbol(t);
            break;
          case 524288:
            this.bindSetAccessorDeclarationToPullSymbol(t);
            break;
          case 8388608:
            this.bindObjectTypeDeclarationToPullSymbol(t);
            break;
          case 16777216:
            this.bindFunctionTypeDeclarationToPullSymbol(t);
            break;
          case 33554432:
            this.bindConstructorTypeDeclarationToPullSymbol(t);
            break;
          case 131072:
            this.bindFunctionExpressionToPullSymbol(t);
            break;
          case 128:
            this.bindImportDeclaration(t);
            break;
          case 2048:
          case 8192:
            t.getParentDecl().getSymbol();
            break;
          case 268435456:
          case 134217728:
            break;
          default:
            e.CompilerDiagnostics.assert(!1, "Unrecognized type declaration");
        }
        e.Debug.assert(
          e.ArrayUtilities.last(this.declsBeingBound) === t.declID
        ),
          this.declsBeingBound.pop();
      }),
      t
    );
  })();
  e.PullSymbolBinder = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t, n, r) {
      "undefined" == typeof n && (n = null),
        "undefined" == typeof r && (r = null);
      var i = e.ast();
      return e.semanticInfoChain.diagnosticFromAST(i, t, n, r);
    }
    function r(e) {
      e.isSignature()
        ? e.returnType || e._resolveDeclaredSymbol()
        : e.type || e._resolveDeclaredSymbol();
    }
    function i(e) {
      var t = e.ast(),
        n = e.getSymbol();
      n || (n = e.getSignatureSymbol());
      var r = null,
        i = null;
      if (n.isSignature()) {
        r = n;
        var o = e.getParentDecl();
        i = o.getSymbol().type;
      } else (r = e.getSignatureSymbol()), (i = n.type);
      var s;
      return (
        (s =
          137 === t.kind() || 2097152 === e.kind
            ? i.getConstructSignatures()
            : 4194304 === e.kind
            ? i.getIndexSignatures()
            : i.getCallSignatures()),
        { signature: r, allSignatures: s }
      );
    }
    function o(e, t) {
      var n = t.getDeclForAST(e),
        r = n.getSymbol();
      return r;
    }
    function s(e, n) {
      var r = t.getAccessorSymbol(e, n),
        i = { getter: null, setter: null },
        o = r.getGetter();
      if (o) {
        var s = o.getDeclarations()[0];
        i.getter = n.getASTForDecl(s);
      }
      var a = r.getSetter();
      if (a) {
        var l = a.getDeclarations()[0];
        i.setter = n.getASTForDecl(l);
      }
      return i;
    }
    function a(e) {
      return e && 0 !== (67108928 & e.kind);
    }
    function l(e) {
      return e && (4 === e.kind || c(e, 4));
    }
    function c(e, t) {
      for (var n = e.getDeclarations(), r = 0; r < n.length; r++)
        if (n[r].kind === t) return !0;
      return !1;
    }
    function u(e) {
      return isFinite(+e);
    }
    function p(e, t) {
      return (
        e.isTypeReference() &&
          !e.getIsSpecialized() &&
          (e = e.referencedTypeSymbol),
        t.isTypeReference() &&
          !t.getIsSpecialized() &&
          (t = t.referencedTypeSymbol),
        e === t
      );
    }
    function h(e) {
      for (var t = e.getRootSymbol(); ; ) {
        if (e === t) return e;
        (e = t), (t = e.getRootSymbol());
      }
    }
    function d(e) {
      var t = e.getContainer();
      if (t) {
        var n = t.kind;
        if (17809408 & n) return !0;
        if (33554432 === n && !e.anyDeclHasFlag(17)) return !0;
      }
      return !1;
    }
    function m(e) {
      var t = e.getContainer();
      return t && 33554432 === t.kind && l(t) && e.anyDeclHasFlag(1);
    }
    function f(e, t) {
      var n = !0,
        r = e.parameters;
      if (r)
        for (var i = 0; n && i < r.length; i++)
          n = t.signatureParameterWalk(r[i]);
      return n && (n = t.signatureReturnTypeWalk(e.returnType)), n;
    }
    function g(e, t) {
      for (var n = !0, r = e.getMembers(), i = 0; n && i < r.length; i++)
        n = t.memberSymbolWalk(r[i]);
      if (n)
        for (var o = e.getCallSignatures(), i = 0; n && i < o.length; i++)
          (n = t.callSignatureWalk(o[i])), n && (n = f(o[i], t));
      if (n)
        for (var s = e.getConstructSignatures(), i = 0; n && i < s.length; i++)
          (n = t.constructSignatureWalk(s[i])), n && (n = f(s[i], t));
      if (n)
        for (var a = e.getIndexSignatures(), i = 0; n && i < a.length; i++)
          (n = t.indexSignatureWalk(a[i])), n && (n = f(a[i], t));
    }
    (t.diagnosticFromDecl = n),
      (t.resolveDeclaredSymbolToUseType = r),
      (t.getSignatureForFuncDecl = i),
      (t.getAccessorSymbol = o),
      (t.getGetterAndSetterFunction = s),
      (t.symbolIsEnum = a),
      (t.symbolIsModule = l),
      (t.isNameNumeric = u),
      (t.typeSymbolsAreIdentical = p),
      (t.getRootType = h),
      (t.isSymbolLocal = d),
      (t.isExportedSymbolInClodule = m),
      (t.walkPullTypeSymbolStructure = g);
    var v = (function () {
      function t() {
        this.currentlyWalkingOtherDecls = [];
      }
      return (
        (t.prototype.walkOtherPullDecls = function (t, n, r) {
          if (n) {
            var i = e.ArrayUtilities.any(
              this.currentlyWalkingOtherDecls,
              function (t) {
                return e.ArrayUtilities.contains(n, t);
              }
            );
            if (!i) {
              this.currentlyWalkingOtherDecls.push(t);
              for (var o = 0; o < n.length; o++) n[o] !== t && r(n[o]);
              var s = this.currentlyWalkingOtherDecls.pop();
              e.Debug.assert(s == t);
            }
          }
        }),
        t
      );
    })();
    t.OtherPullDeclsWalker = v;
  })(e.PullHelpers || (e.PullHelpers = {}));
  e.PullHelpers;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  var t = (function () {
    function t() {
      this._wrapsTypeParameterCache = e.BitVector.getBitVector(!0);
    }
    return (
      (t.prototype.getWrapsTypeParameter = function (e) {
        var t = !1;
        for (var n in e)
          if (e.hasOwnProperty(n)) {
            var r = this._wrapsTypeParameterCache.valueAt(n);
            if (r) return n;
            t = t || void 0 === r;
          }
        return t ? void 0 : 0;
      }),
      (t.prototype.setWrapsTypeParameter = function (e, t) {
        if (t) this._wrapsTypeParameterCache.setValueAt(t, !0);
        else
          for (var n in e)
            e.hasOwnProperty(n) &&
              this._wrapsTypeParameterCache.setValueAt(n, !1);
      }),
      t
    );
  })();
  (e.WrapsTypeParameterCache = t),
    (function (t) {
      function n(e, t, n) {
        if (t.getIsSpecialized()) {
          for (
            var r = t.getTypeParameterArgumentMap(),
              i = [],
              o = t.getAllowedToReferenceTypeParameters(),
              s = 0;
            s < o.length;
            s++
          ) {
            var a = o[s].pullSymbolID,
              l = r[a];
            l && (i[a] = e.instantiateType(l, n.typeParameterArgumentMap));
          }
          for (var s = 0; s < o.length; s++) {
            var a = o[s].pullSymbolID;
            i[a] &&
              n.typeParameterArgumentMap[a] != i[a] &&
              (n.ensureTypeArgumentCopy(),
              (n.typeParameterArgumentMap[a] = i[a]));
          }
        }
      }
      function r(t, n) {
        var r = t.getAllowedToReferenceTypeParameters();
        for (var i in n.typeParameterArgumentMap)
          n.typeParameterArgumentMap.hasOwnProperty(i) &&
            (e.ArrayUtilities.any(r, function (e) {
              return e.pullSymbolID == i;
            }) ||
              (n.ensureTypeArgumentCopy(),
              delete n.typeParameterArgumentMap[i]));
      }
      function i(t) {
        var n = [],
          r = !1,
          o = !1;
        switch (t.kind) {
          case 65536:
            if (e.hasFlag(t.flags, 16)) {
              r = !0;
              break;
            }
          case 16777216:
          case 33554432:
          case 2097152:
          case 1048576:
          case 131072:
          case 16384:
            (r = !0), (o = !0);
            break;
          case 4096:
            if (e.hasFlag(t.flags, 16)) break;
          case 2048:
          case 262144:
          case 524288:
          case 32768:
          case 4194304:
          case 8388608:
          case 256:
          case 8192:
            o = !0;
            break;
          case 8:
          case 16:
            r = !0;
        }
        if ((o && (n = n.concat(i(t.getParentDecl()))), r))
          for (var s = t.getTypeParameters(), a = 0; a < s.length; a++)
            n.push(s[a].getSymbol());
        return n;
      }
      function o(e, t) {
        return s(e, t, {});
      }
      function s(e, t, n) {
        for (var r = 0; r < e.length; r++)
          n[e[r].getRootSymbol().pullSymbolID] = t[r];
        return n;
      }
      function a(e, t, n) {
        for (var r = 0; r < e.length; r++) {
          var i = e[r].getRootSymbol().pullSymbolID;
          n.typeParameterArgumentMap[i] !== t[r] &&
            (n.ensureTypeArgumentCopy(),
            (n.typeParameterArgumentMap[i] = t[r]));
        }
      }
      function l(t, n) {
        var r = t.isGeneric() && null !== t.getTypeArguments(),
          i = n.isGeneric() && null !== n.getTypeArguments();
        if (r && i) {
          var o = e.PullHelpers.getRootType(t),
            s = e.PullHelpers.getRootType(n);
          return o === s;
        }
        return !1;
      }
      var c = (function () {
        function e(e) {
          (this.typeParameterArgumentMap = e),
            (this.createdDuplicateTypeArgumentMap = !1);
        }
        return (
          (e.prototype.ensureTypeArgumentCopy = function () {
            if (!this.createdDuplicateTypeArgumentMap) {
              var e = this.typeParameterArgumentMap;
              this.typeParameterArgumentMap = [];
              for (var t in e)
                e.hasOwnProperty(t) &&
                  (this.typeParameterArgumentMap[t] = e[t]);
              this.createdDuplicateTypeArgumentMap = !0;
            }
          }),
          e
        );
      })();
      (t.MutableTypeArgumentMap = c),
        (t.instantiateTypeArgument = n),
        (t.cleanUpTypeArgumentMap = r),
        (t.getAllowedToReferenceTypeParametersFromDecl = i),
        (t.createTypeParameterArgumentMap = o),
        (t.updateTypeParameterArgumentMap = s),
        (t.updateMutableTypeParameterArgumentMap = a),
        (t.twoTypesAreInstantiationsOfSameNamedGenericType = l);
    })(e.PullInstantiationHelpers || (e.PullInstantiationHelpers = {}));
  e.PullInstantiationHelpers;
})(TypeScript || (TypeScript = {})),
  Error && (Error.stackTraceLimit = 1e3);
var TypeScript;
!(function (e) {
  function t(e, n) {
    for (var r in e)
      if ("object" == typeof e[r]) {
        if (!t(e[r], n[r])) return !1;
      } else if ("function" != typeof e[r] && e[r] !== n[r]) return !1;
    return !0;
  }
  (e.fileResolutionTime = 0),
    (e.fileResolutionIOTime = 0),
    (e.fileResolutionScanImportsTime = 0),
    (e.fileResolutionImportFileSearchTime = 0),
    (e.fileResolutionGetDefaultLibraryTime = 0),
    (e.sourceCharactersCompiled = 0),
    (e.syntaxTreeParseTime = 0),
    (e.syntaxDiagnosticsTime = 0),
    (e.astTranslationTime = 0),
    (e.typeCheckTime = 0),
    (e.compilerResolvePathTime = 0),
    (e.compilerDirectoryNameTime = 0),
    (e.compilerDirectoryExistsTime = 0),
    (e.compilerFileExistsTime = 0),
    (e.emitTime = 0),
    (e.emitWriteFileTime = 0),
    (e.declarationEmitTime = 0),
    (e.declarationEmitIsExternallyVisibleTime = 0),
    (e.declarationEmitTypeSignatureTime = 0),
    (e.declarationEmitGetBoundDeclTypeTime = 0),
    (e.declarationEmitIsOverloadedCallSignatureTime = 0),
    (e.declarationEmitFunctionDeclarationGetSymbolTime = 0),
    (e.declarationEmitGetBaseTypeTime = 0),
    (e.declarationEmitGetAccessorFunctionTime = 0),
    (e.declarationEmitGetTypeParameterSymbolTime = 0),
    (e.declarationEmitGetImportDeclarationSymbolTime = 0),
    (e.ioHostResolvePathTime = 0),
    (e.ioHostDirectoryNameTime = 0),
    (e.ioHostCreateDirectoryStructureTime = 0),
    (e.ioHostWriteFileTime = 0),
    (function (e) {
      (e[(e.Succeeded = 0)] = "Succeeded"),
        (e[(e.FailedBecauseOfSyntaxErrors = 1)] =
          "FailedBecauseOfSyntaxErrors"),
        (e[(e.FailedBecauseOfCompilerOptionsErrors = 2)] =
          "FailedBecauseOfCompilerOptionsErrors"),
        (e[(e.FailedToGenerateDeclarationsBecauseOfSemanticErrors = 3)] =
          "FailedToGenerateDeclarationsBecauseOfSemanticErrors");
    })(e.EmitOutputResult || (e.EmitOutputResult = {}));
  var n =
    (e.EmitOutputResult,
    (function () {
      function e(e) {
        "undefined" == typeof e && (e = 0),
          (this.outputFiles = []),
          (this.emitOutputResult = e);
      }
      return e;
    })());
  (e.EmitOutput = n),
    (function (e) {
      (e[(e.JavaScript = 0)] = "JavaScript"),
        (e[(e.SourceMap = 1)] = "SourceMap"),
        (e[(e.Declaration = 2)] = "Declaration");
    })(e.OutputFileType || (e.OutputFileType = {}));
  var r =
    (e.OutputFileType,
    (function () {
      function e(e, t, n, r, i) {
        "undefined" == typeof i && (i = []),
          (this.name = e),
          (this.writeByteOrderMark = t),
          (this.text = n),
          (this.fileType = r),
          (this.sourceMapEntries = i);
      }
      return e;
    })());
  e.OutputFile = r;
  var i = (function () {
    function e() {
      (this.diagnostics = []), (this.outputFiles = []);
    }
    return (
      (e.fromDiagnostics = function (t) {
        var n = new e();
        return (n.diagnostics = t), n;
      }),
      (e.fromOutputFiles = function (t) {
        var n = new e();
        return (n.outputFiles = t), n;
      }),
      e
    );
  })();
  e.CompileResult = i;
  var o = (function () {
    function r(t, n) {
      "undefined" == typeof t && (t = new e.NullLogger()),
        "undefined" == typeof n &&
          (n = e.ImmutableCompilationSettings.defaultSettings()),
        (this.logger = t),
        (this._settings = n),
        (this.semanticInfoChain = null),
        (this.semanticInfoChain = new e.SemanticInfoChain(this, t));
    }
    return (
      (r.prototype.compilationSettings = function () {
        return this._settings;
      }),
      (r.prototype.setCompilationSettings = function (e) {
        var n = this._settings;
        (this._settings = e),
          t(n, e) || this.semanticInfoChain.invalidate(n, e);
      }),
      (r.prototype.getDocument = function (t) {
        return (
          (t = e.switchToForwardSlashes(t)),
          this.semanticInfoChain.getDocument(t)
        );
      }),
      (r.prototype.cleanupSemanticCache = function () {
        this.semanticInfoChain.invalidate();
      }),
      (r.prototype.addFile = function (t, n, r, i, o, s) {
        "undefined" == typeof s && (s = []),
          (t = e.switchToForwardSlashes(t)),
          (e.sourceCharactersCompiled += n.getLength());
        var a = e.Document.create(
          this,
          this.semanticInfoChain,
          t,
          n,
          r,
          i,
          o,
          s
        );
        this.semanticInfoChain.addDocument(a);
      }),
      (r.prototype.updateFile = function (t, n, r, i, o) {
        t = e.switchToForwardSlashes(t);
        var s = this.getDocument(t),
          a = s.update(n, r, i, o);
        this.semanticInfoChain.addDocument(a);
      }),
      (r.prototype.removeFile = function (t) {
        (t = e.switchToForwardSlashes(t)),
          this.semanticInfoChain.removeDocument(t);
      }),
      (r.prototype.mapOutputFileName = function (e, t, n) {
        if (e.emitToOwnOutputFile()) {
          var r = e.fileName;
          return (
            "" !== t.outputDirectory() &&
              ((r = e.fileName.replace(t.commonDirectoryPath(), "")),
              (r = t.outputDirectory() + r)),
            n(r, !1)
          );
        }
        return n(t.sharedOutputFile(), !0);
      }),
      (r.prototype.writeByteOrderMarkForDocument = function (t) {
        var n = !1;
        if (t.emitToOwnOutputFile()) {
          var r = 0 !== t.byteOrderMark;
          return (
            n &&
              e.Environment.standardOut.WriteLine(
                "Emitting byte order mark because of: " + t.fileName
              ),
            r
          );
        }
        for (
          var i = this.fileNames(), r = !1, o = 0, s = i.length;
          s > o;
          o++
        ) {
          var t = this.getDocument(i[o]);
          if (!t.isExternalModule() && 0 !== t.byteOrderMark) {
            if (!n) return !0;
            e.Environment.standardOut.WriteLine(
              "Emitting byte order mark because of: " + t.fileName
            ),
              (r = !0);
          }
        }
        return r;
      }),
      (r.mapToDTSFileName = function (t) {
        return e.getDeclareFilePath(t);
      }),
      (r.prototype._shouldEmit = function (e) {
        return !e.isDeclareFile();
      }),
      (r.prototype._shouldEmitDeclarations = function (e) {
        return this.compilationSettings().generateDeclarationFiles()
          ? this._shouldEmit(e)
          : !1;
      }),
      (r.prototype.emitDocumentDeclarationsWorker = function (t, n, i) {
        var o = t.sourceUnit();
        if ((e.Debug.assert(this._shouldEmitDeclarations(t)), i))
          i.document = t;
        else {
          var s = this.mapOutputFileName(t, n, r.mapToDTSFileName);
          i = new e.DeclarationEmitter(s, t, this, n, this.semanticInfoChain);
        }
        return i.emitDeclarations(o), i;
      }),
      (r.prototype._emitDocumentDeclarations = function (e, t, n, r) {
        if (this._shouldEmitDeclarations(e))
          if (e.emitToOwnOutputFile()) {
            var i = this.emitDocumentDeclarationsWorker(e, t);
            i && n(i.getOutputFile());
          } else r = this.emitDocumentDeclarationsWorker(e, t, r);
        return r;
      }),
      (r.prototype.emitAllDeclarations = function (t) {
        var r = new Date().getTime(),
          i = new n(),
          o = new e.EmitOptions(this, t);
        if (o.diagnostic()) return (i.emitOutputResult = 2), i;
        for (
          var s = null, a = this.fileNames(), l = 0, c = a.length;
          c > l;
          l++
        ) {
          var u = (a[l], this.getDocument(a[l]));
          s = this._emitDocumentDeclarations(
            u,
            o,
            function (e) {
              return i.outputFiles.push(e);
            },
            s
          );
        }
        return (
          s && i.outputFiles.push(s.getOutputFile()),
          (e.declarationEmitTime += new Date().getTime() - r),
          i
        );
      }),
      (r.prototype.emitDeclarations = function (t, r) {
        t = e.switchToForwardSlashes(t);
        var i = new n(),
          o = new e.EmitOptions(this, r);
        if (o.diagnostic()) return (i.emitOutputResult = 2), i;
        var s = this.getDocument(t);
        return s.emitToOwnOutputFile()
          ? (this._emitDocumentDeclarations(
              s,
              o,
              function (e) {
                return i.outputFiles.push(e);
              },
              null
            ),
            i)
          : this.emitAllDeclarations(r);
      }),
      (r.prototype.canEmitDeclarations = function (t) {
        t = e.switchToForwardSlashes(t);
        var n = this.getDocument(t);
        return this._shouldEmitDeclarations(n);
      }),
      (r.mapToFileNameExtension = function (e, t, n) {
        if (n) return t;
        var r = t.split(".");
        return r.pop(), r.join(".") + e;
      }),
      (r.mapToJSFileName = function (e, t) {
        return r.mapToFileNameExtension(".js", e, t);
      }),
      (r.prototype.emitDocumentWorker = function (t, n, i) {
        var o = t.sourceUnit();
        e.Debug.assert(this._shouldEmit(t));
        t.fileName;
        if (i)
          this.compilationSettings().mapSourceFiles() &&
            i.setSourceMapperNewSourceFile(t);
        else {
          var s = this.mapOutputFileName(t, n, r.mapToJSFileName),
            a = new e.TextWriter(s, this.writeByteOrderMarkForDocument(t), 0);
          if (
            ((i = new e.Emitter(s, a, n, this.semanticInfoChain)),
            this.compilationSettings().mapSourceFiles())
          ) {
            var l = new e.TextWriter(
              s + e.SourceMapper.MapFileExtension,
              !1,
              1
            );
            i.createSourceMapper(t, s, a, l, n.resolvePath);
          }
        }
        return i.setDocument(t), i.emitJavascript(o, !1), i;
      }),
      (r.prototype._emitDocument = function (e, t, n, r) {
        if (this._shouldEmit(e))
          if (e.emitToOwnOutputFile()) {
            var i = this.emitDocumentWorker(e, t);
            i && n(i.getOutputFiles());
          } else r = this.emitDocumentWorker(e, t, r);
        return r;
      }),
      (r.prototype.emitAll = function (t) {
        var r = new Date().getTime(),
          i = new n(),
          o = new e.EmitOptions(this, t);
        if (o.diagnostic()) return (i.emitOutputResult = 2), i;
        for (
          var s = this.fileNames(), a = null, l = 0, c = s.length;
          c > l;
          l++
        ) {
          var u = s[l],
            p = this.getDocument(u);
          a = this._emitDocument(
            p,
            o,
            function (e) {
              return i.outputFiles.push.apply(i.outputFiles, e);
            },
            a
          );
        }
        return (
          a && i.outputFiles.push.apply(i.outputFiles, a.getOutputFiles()),
          (e.emitTime += new Date().getTime() - r),
          i
        );
      }),
      (r.prototype.emit = function (t, r) {
        t = e.switchToForwardSlashes(t);
        var i = new n(),
          o = new e.EmitOptions(this, r);
        if (o.diagnostic()) return (i.emitOutputResult = 2), i;
        var s = this.getDocument(t);
        return s.emitToOwnOutputFile()
          ? (this._emitDocument(
              s,
              o,
              function (e) {
                return i.outputFiles.push.apply(i.outputFiles, e);
              },
              null
            ),
            i)
          : this.emitAll(r);
      }),
      (r.prototype.compile = function (e, t) {
        return "undefined" == typeof t && (t = !1), new a(this, e, t);
      }),
      (r.prototype.getSyntacticDiagnostics = function (t) {
        return (
          (t = e.switchToForwardSlashes(t)), this.getDocument(t).diagnostics()
        );
      }),
      (r.prototype.getSyntaxTree = function (e) {
        return this.getDocument(e).syntaxTree();
      }),
      (r.prototype.getSourceUnit = function (e) {
        return this.getDocument(e).sourceUnit();
      }),
      (r.prototype.getSemanticDiagnostics = function (t) {
        t = e.switchToForwardSlashes(t);
        var n = this.getDocument(t),
          r = new Date().getTime();
        e.PullTypeResolver.typeCheck(
          this.compilationSettings(),
          this.semanticInfoChain,
          n
        );
        var i = new Date().getTime();
        e.typeCheckTime += i - r;
        var o = this.semanticInfoChain.getDiagnostics(t);
        return (
          (o = e.ArrayUtilities.distinct(o, e.Diagnostic.equals)),
          o.sort(function (t, n) {
            if (t.fileName() < n.fileName()) return -1;
            if (t.fileName() > n.fileName()) return 1;
            if (t.start() < n.start()) return -1;
            if (t.start() > n.start()) return 1;
            var r = e.diagnosticInformationMap[t.diagnosticKey()].code,
              i = e.diagnosticInformationMap[n.diagnosticKey()].code;
            return i > r ? -1 : r > i ? 1 : 0;
          }),
          o
        );
      }),
      (r.prototype.getCompilerOptionsDiagnostics = function () {
        var t = new e.EmitOptions(this, null),
          n = t.diagnostic();
        return n ? [n] : e.sentinelEmptyArray;
      }),
      (r.prototype.resolveAllFiles = function () {
        for (var e = this.fileNames(), t = 0, n = e.length; n > t; t++)
          this.getSemanticDiagnostics(e[t]);
      }),
      (r.prototype.getSymbolOfDeclaration = function (t) {
        if (!t) return null;
        var n = this.semanticInfoChain.getResolver(),
          r = this.semanticInfoChain.getASTForDecl(t);
        if (!r) return null;
        var i = n.getEnclosingDecl(t);
        return 139 === r.kind() || 140 === r.kind()
          ? this.getSymbolOfDeclaration(i)
          : n.resolveAST(r, !1, new e.PullTypeResolutionContext(n));
      }),
      (r.prototype.extractResolutionContextFromAST = function (t, n, r, i) {
        var o = (r.fileName, null),
          s = null,
          a = !1,
          l = !1,
          c = new e.PullTypeResolutionContext(t);
        if (!n) return null;
        for (var u = this.getASTPath(n), p = 0, h = u.length; h > p; p++) {
          var d = u[p];
          switch (d.kind()) {
            case 222:
            case 219:
            case 218:
              i && t.resolveAST(d, !0, c);
              break;
            case 136:
              var m = d;
              (a = null !== m.variableDeclarator.typeAnnotation),
                this.extractResolutionContextForVariable(
                  a,
                  i,
                  t,
                  c,
                  o,
                  m,
                  m.variableDeclarator.equalsValueClause
                );
              break;
            case 225:
              var f = d;
              (a = null !== f.typeAnnotation),
                this.extractResolutionContextForVariable(
                  a,
                  i,
                  t,
                  c,
                  o,
                  f,
                  f.equalsValueClause
                );
              break;
            case 213:
            case 216:
              if (i) {
                var g = 216 === d.kind(),
                  v = d,
                  y = null;
                if (
                  h > p + 2 &&
                  v.argumentList === u[p + 1] &&
                  v.argumentList.arguments === u[p + 2]
                ) {
                  var b = new e.PullAdditionalCallResolutionData();
                  if (
                    (g
                      ? t.resolveObjectCreationExpression(v, c, b)
                      : t.resolveInvocationExpression(v, c, b),
                    b.actualParametersContextTypeSymbols)
                  ) {
                    var _ = u[p + 3];
                    if (_)
                      for (
                        var w = 0,
                          S = v.argumentList.arguments.nonSeparatorCount();
                        S > w;
                        w++
                      )
                        if (v.argumentList.arguments.nonSeparatorAt(w) === _) {
                          var T = b.actualParametersContextTypeSymbols[w];
                          if (T) {
                            y = T;
                            break;
                          }
                        }
                  }
                } else
                  g
                    ? t.resolveObjectCreationExpression(v, c)
                    : t.resolveInvocationExpression(v, c);
                c.pushNewContextualType(y);
              }
              break;
            case 214:
              if (i) {
                var y = null,
                  k = c.getContextualType();
                k && k.isArrayNamedTypeReference() && (y = k.getElementType()),
                  c.pushNewContextualType(y);
              }
              break;
            case 215:
              if (i) {
                var x = d,
                  C = new e.PullAdditionalObjectLiteralResolutionData();
                t.resolveObjectLiteralExpression(x, a, c, C);
                var E = u[p + 1] && 2 === u[p + 1].kind() ? u[p + 2] : u[p + 1];
                if (E) {
                  var y = null,
                    A = x.propertyAssignments;
                  if (A && C.membersContextTypeSymbols)
                    for (var w = 0, S = A.nonSeparatorCount(); S > w; w++)
                      if (A.nonSeparatorAt(w) === E) {
                        var L = C.membersContextTypeSymbols[w];
                        if (L) {
                          y = L;
                          break;
                        }
                      }
                  c.pushNewContextualType(y);
                }
              }
              break;
            case 174:
              if (i) {
                var I = d,
                  y = null;
                if (u[p + 1] && u[p + 1] === I.right) {
                  var D = t.resolveAST(I.left, a, c).type;
                  D && ((a = !0), (y = D));
                }
                c.pushNewContextualType(y);
              }
              break;
            case 220:
              var P = d;
              if (!(h > p + 1 && u[p + 1] === P.type) && i) {
                var y = null,
                  N = t.resolveAST(P, a, c).type;
                N && ((a = !0), (y = N)), c.pushNewContextualType(y);
              }
              break;
            case 150:
              if (i) {
                var y = null;
                if (o && 1032192 & o.kind) {
                  var M = e.ASTHelpers.getType(s);
                  if (M) {
                    var R = t.resolveTypeReference(M, c);
                    R && ((a = !0), (y = R));
                  } else {
                    var k = c.getContextualType();
                    if (k && k.isFunction()) {
                      var O =
                          33554432 == k.kind
                            ? k.getConstructSignatures()
                            : k.getCallSignatures(),
                        F = O[0],
                        V = F.returnType;
                      V && ((a = !0), (y = V));
                    }
                  }
                }
                c.pushNewContextualType(y);
              }
              break;
            case 122:
              i && e.isTypesOnlyLocation(d) && t.resolveAST(d, !1, c);
              break;
            case 163:
              l = !0;
              break;
            case 146:
              a = !1;
          }
          var G = this.semanticInfoChain.getDeclForAST(d);
          G && ((o = G), (s = d));
        }
        return (
          n &&
            n.parent &&
            11 === n.kind() &&
            (212 === n.parent.kind()
              ? n.parent.name === n && (n = n.parent)
              : 121 === n.parent.kind() &&
                n.parent.right === n &&
                (n = n.parent)),
          {
            ast: n,
            enclosingDecl: o,
            resolutionContext: c,
            inContextuallyTypedAssignment: a,
            inWithBlock: l,
          }
        );
      }),
      (r.prototype.extractResolutionContextForVariable = function (
        e,
        t,
        n,
        r,
        i,
        o,
        s
      ) {
        if (e && t) {
          n.resolveAST(o, !1, r);
          var a = this.semanticInfoChain.getSymbolForAST(o),
            l = null;
          a && e && (l = a.type),
            r.pushNewContextualType(l),
            s && n.resolveAST(s, e, r);
        }
      }),
      (r.prototype.getASTPath = function (e) {
        for (var t = []; e; ) t.unshift(e), (e = e.parent);
        return t;
      }),
      (r.prototype.pullGetSymbolInformationFromAST = function (t, n) {
        var r = this.semanticInfoChain.getResolver(),
          i = this.extractResolutionContextFromAST(r, t, n, !0);
        if (!i || i.inWithBlock) return null;
        t = i.ast;
        var o = r.resolveAST(
          t,
          i.inContextuallyTypedAssignment,
          i.resolutionContext
        );
        if (!o)
          return (
            e.Debug.assert(
              120 === t.kind(),
              "No symbol was found for ast and ast was not source unit. Ast Kind: " +
                e.SyntaxKind[t.kind()]
            ),
            null
          );
        o.isTypeReference() && (o = o.getReferencedTypeSymbol());
        var s = this.semanticInfoChain.getAliasSymbolForAST(t);
        return {
          symbol: o,
          aliasSymbol: s,
          ast: t,
          enclosingScopeSymbol: this.getSymbolOfDeclaration(i.enclosingDecl),
        };
      }),
      (r.prototype.pullGetCallInformationFromAST = function (t, n) {
        if (213 !== t.kind() && 216 !== t.kind()) return null;
        var r = 216 === t.kind(),
          i = this.semanticInfoChain.getResolver(),
          o = this.extractResolutionContextFromAST(i, t, n, !0);
        if (!o || o.inWithBlock) return null;
        var s = new e.PullAdditionalCallResolutionData();
        return (
          r
            ? i.resolveObjectCreationExpression(t, o.resolutionContext, s)
            : i.resolveInvocationExpression(t, o.resolutionContext, s),
          {
            targetSymbol: s.targetSymbol,
            resolvedSignatures: s.resolvedSignatures,
            candidateSignature: s.candidateSignature,
            ast: t,
            enclosingScopeSymbol: this.getSymbolOfDeclaration(o.enclosingDecl),
            isConstructorCall: r,
          }
        );
      }),
      (r.prototype.pullGetVisibleMemberSymbolsFromAST = function (e, t) {
        var n = this.semanticInfoChain.getResolver(),
          r = this.extractResolutionContextFromAST(n, e, t, !0);
        if (!r || r.inWithBlock) return null;
        var i = n.getVisibleMembersFromExpression(
          e,
          r.enclosingDecl,
          r.resolutionContext
        );
        return i
          ? {
              symbols: i,
              enclosingScopeSymbol: this.getSymbolOfDeclaration(
                r.enclosingDecl
              ),
            }
          : null;
      }),
      (r.prototype.pullGetVisibleDeclsFromAST = function (e, t) {
        var n = this.semanticInfoChain.getResolver(),
          r = this.extractResolutionContextFromAST(n, e, t, !1);
        return !r || r.inWithBlock ? null : n.getVisibleDecls(r.enclosingDecl);
      }),
      (r.prototype.pullGetContextualMembersFromAST = function (e, t) {
        if (215 !== e.kind()) return null;
        var n = this.semanticInfoChain.getResolver(),
          r = this.extractResolutionContextFromAST(n, e, t, !0);
        if (!r || r.inWithBlock) return null;
        var i = n.getVisibleContextSymbols(
          r.enclosingDecl,
          r.resolutionContext
        );
        return {
          symbols: i,
          enclosingScopeSymbol: this.getSymbolOfDeclaration(r.enclosingDecl),
        };
      }),
      (r.prototype.pullGetDeclInformation = function (e, t, n) {
        var r = this.semanticInfoChain.getResolver(),
          i = this.extractResolutionContextFromAST(r, t, n, !0);
        if (!i || i.inWithBlock) return null;
        var o = e.ast();
        if (!o) return null;
        var s = this.extractResolutionContextFromAST(
          r,
          o,
          this.getDocument(o.fileName()),
          !0
        );
        if (!s) return null;
        var a = e.getSymbol();
        return (
          r.resolveDeclaredSymbol(a, i.resolutionContext),
          a.setUnresolved(),
          {
            symbol: a,
            aliasSymbol: null,
            ast: t,
            enclosingScopeSymbol: this.getSymbolOfDeclaration(i.enclosingDecl),
          }
        );
      }),
      (r.prototype.topLevelDeclaration = function (e) {
        return this.semanticInfoChain.topLevelDecl(e);
      }),
      (r.prototype.getDeclForAST = function (e) {
        return this.semanticInfoChain.getDeclForAST(e);
      }),
      (r.prototype.fileNames = function () {
        return this.semanticInfoChain.fileNames();
      }),
      (r.prototype.topLevelDecl = function (e) {
        return this.semanticInfoChain.topLevelDecl(e);
      }),
      (r.getLocationText = function (e) {
        return (
          e.fileName() + "(" + (e.line() + 1) + "," + (e.character() + 1) + ")"
        );
      }),
      (r.getFullDiagnosticText = function (t) {
        var n = "";
        t.fileName() && (n += this.getLocationText(t) + ": "),
          (n += t.message());
        var r = t.additionalLocations();
        if (r.length > 0) {
          n +=
            " " +
            e.getLocalizedText(e.DiagnosticCode.Additional_locations, null) +
            e.Environment.newLine;
          for (var i = 0, o = r.length; o > i; i++)
            n += "	" + this.getLocationText(r[i]) + e.Environment.newLine;
        } else n += e.Environment.newLine;
        return n;
      }),
      r
    );
  })();
  e.TypeScriptCompiler = o;
  var s;
  !(function (e) {
    (e[(e.Syntax = 0)] = "Syntax"),
      (e[(e.Semantics = 1)] = "Semantics"),
      (e[(e.EmitOptionsValidation = 2)] = "EmitOptionsValidation"),
      (e[(e.Emit = 3)] = "Emit"),
      (e[(e.DeclarationEmit = 4)] = "DeclarationEmit");
  })(s || (s = {}));
  var a = (function () {
    function t(e, t, n, r) {
      "undefined" == typeof r && (r = 0),
        (this.compiler = e),
        (this.resolvePath = t),
        (this.continueOnDiagnostics = n),
        (this.index = -1),
        (this.fileNames = null),
        (this._current = null),
        (this._emitOptions = null),
        (this._sharedEmitter = null),
        (this._sharedDeclarationEmitter = null),
        (this.hadSyntacticDiagnostics = !1),
        (this.hadSemanticDiagnostics = !1),
        (this.hadEmitDiagnostics = !1),
        (this.fileNames = e.fileNames()),
        (this.compilerPhase = r);
    }
    return (
      (t.prototype.current = function () {
        return this._current;
      }),
      (t.prototype.moveNext = function () {
        for (this._current = null; this.moveNextInternal(); )
          if (this._current) return !0;
        return !1;
      }),
      (t.prototype.moveNextInternal = function () {
        for (this.index++; this.shouldMoveToNextPhase(); )
          (this.index = 0), this.compilerPhase++;
        if (this.compilerPhase > 4) return !1;
        switch (this.compilerPhase) {
          case 0:
            return this.moveNextSyntaxPhase();
          case 1:
            return this.moveNextSemanticsPhase();
          case 2:
            return this.moveNextEmitOptionsValidationPhase();
          case 3:
            return this.moveNextEmitPhase();
          case 4:
            return this.moveNextDeclarationEmitPhase();
        }
      }),
      (t.prototype.shouldMoveToNextPhase = function () {
        switch (this.compilerPhase) {
          case 2:
            return 1 === this.index;
          case 0:
          case 1:
            return this.index === this.fileNames.length;
          case 3:
          case 4:
            return this.index === this.fileNames.length + 1;
        }
        return !1;
      }),
      (t.prototype.moveNextSyntaxPhase = function () {
        e.Debug.assert(this.index >= 0 && this.index < this.fileNames.length);
        var t = this.fileNames[this.index],
          n = this.compiler.getSyntacticDiagnostics(t);
        return (
          n.length &&
            (this.continueOnDiagnostics || (this.hadSyntacticDiagnostics = !0),
            (this._current = i.fromDiagnostics(n))),
          !0
        );
      }),
      (t.prototype.moveNextSemanticsPhase = function () {
        if (this.hadSyntacticDiagnostics) return !1;
        e.Debug.assert(this.index >= 0 && this.index < this.fileNames.length);
        var t = this.fileNames[this.index],
          n = this.compiler.getSemanticDiagnostics(t);
        return (
          n.length &&
            (this.continueOnDiagnostics || (this.hadSemanticDiagnostics = !0),
            (this._current = i.fromDiagnostics(n))),
          !0
        );
      }),
      (t.prototype.moveNextEmitOptionsValidationPhase = function () {
        return (
          e.Debug.assert(!this.hadSyntacticDiagnostics),
          this._emitOptions ||
            (this._emitOptions = new e.EmitOptions(
              this.compiler,
              this.resolvePath
            )),
          this._emitOptions.diagnostic() &&
            (this.continueOnDiagnostics || (this.hadEmitDiagnostics = !0),
            (this._current = i.fromDiagnostics([
              this._emitOptions.diagnostic(),
            ]))),
          !0
        );
      }),
      (t.prototype.moveNextEmitPhase = function () {
        var t = this;
        if (
          (e.Debug.assert(!this.hadSyntacticDiagnostics),
          e.Debug.assert(this._emitOptions),
          this.hadEmitDiagnostics)
        )
          return !1;
        if (
          (e.Debug.assert(
            this.index >= 0 && this.index <= this.fileNames.length
          ),
          this.index < this.fileNames.length)
        ) {
          var n = this.fileNames[this.index],
            r = this.compiler.getDocument(n);
          return (
            (this._sharedEmitter = this.compiler._emitDocument(
              r,
              this._emitOptions,
              function (e) {
                t._current = i.fromOutputFiles(e);
              },
              this._sharedEmitter
            )),
            !0
          );
        }
        return (
          this.index === this.fileNames.length &&
            this._sharedEmitter &&
            (this._current = i.fromOutputFiles(
              this._sharedEmitter.getOutputFiles()
            )),
          !0
        );
      }),
      (t.prototype.moveNextDeclarationEmitPhase = function () {
        var t = this;
        if (
          (e.Debug.assert(!this.hadSyntacticDiagnostics),
          e.Debug.assert(!this.hadEmitDiagnostics),
          this.hadSemanticDiagnostics)
        )
          return !1;
        if (!this.compiler.compilationSettings().generateDeclarationFiles())
          return !1;
        if (
          (e.Debug.assert(
            this.index >= 0 && this.index <= this.fileNames.length
          ),
          this.index < this.fileNames.length)
        ) {
          var n = this.fileNames[this.index],
            r = this.compiler.getDocument(n);
          return (
            (this._sharedDeclarationEmitter = this.compiler._emitDocumentDeclarations(
              r,
              this._emitOptions,
              function (e) {
                t._current = i.fromOutputFiles([e]);
              },
              this._sharedDeclarationEmitter
            )),
            !0
          );
        }
        return (
          this.index === this.fileNames.length &&
            this._sharedDeclarationEmitter &&
            (this._current = i.fromOutputFiles([
              this._sharedDeclarationEmitter.getOutputFile(),
            ])),
          !0
        );
      }),
      t
    );
  })();
  e.compareDataObjects = t;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    (e[(e.Unknown = 0)] = "Unknown"),
      (e[(e.Open = 1)] = "Open"),
      (e[(e.Closed = 2)] = "Closed"),
      (e[(e.InfinitelyExpanding = 3)] = "InfinitelyExpanding");
  })(e.GenerativeTypeClassification || (e.GenerativeTypeClassification = {}));
  var t =
    (e.GenerativeTypeClassification,
    (function (t) {
      function n(n) {
        t.call(this, n.name, n.kind),
          (this.referencedTypeSymbol = n),
          (this.isResolved = !0),
          e.Debug.assert(null !== n, "Type root symbol may not be null"),
          this.setRootSymbol(n),
          (this.typeReference = this);
      }
      return (
        __extends(n, t),
        (n.createTypeReference = function (e) {
          if (e.isTypeReference()) return e;
          var t = e.typeReference;
          return t || ((t = new n(e)), (e.typeReference = t)), t;
        }),
        (n.prototype.isTypeReference = function () {
          return !0;
        }),
        (n.prototype.setResolved = function () {}),
        (n.prototype.setUnresolved = function () {}),
        (n.prototype.invalidate = function () {}),
        (n.prototype.ensureReferencedTypeIsResolved = function () {
          this._getResolver().resolveDeclaredSymbol(this.referencedTypeSymbol);
        }),
        (n.prototype.getReferencedTypeSymbol = function () {
          return (
            this.ensureReferencedTypeIsResolved(), this.referencedTypeSymbol
          );
        }),
        (n.prototype._getResolver = function () {
          return this.referencedTypeSymbol._getResolver();
        }),
        (n.prototype.hasMembers = function () {
          return this.referencedTypeSymbol.hasMembers();
        }),
        (n.prototype.setAssociatedContainerType = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": setAssociatedContainerType"
          );
        }),
        (n.prototype.getAssociatedContainerType = function () {
          return this.referencedTypeSymbol.getAssociatedContainerType();
        }),
        (n.prototype.getFunctionSymbol = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getFunctionSymbol()
          );
        }),
        (n.prototype.setFunctionSymbol = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": setFunctionSymbol"
          );
        }),
        (n.prototype.addContainedNonMember = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": addContainedNonMember"
          );
        }),
        (n.prototype.findContainedNonMemberContainer = function (e, t) {
          return (
            "undefined" == typeof t && (t = 0),
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findContainedNonMemberContainer(e, t)
          );
        }),
        (n.prototype.addMember = function () {
          e.Debug.fail("Reference symbol " + this.pullSymbolID + ": addMember");
        }),
        (n.prototype.addEnclosedMemberType = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": addEnclosedMemberType"
          );
        }),
        (n.prototype.addEnclosedMemberContainer = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": addEnclosedMemberContainer"
          );
        }),
        (n.prototype.addEnclosedNonMember = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": addEnclosedNonMember"
          );
        }),
        (n.prototype.addEnclosedNonMemberType = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": addEnclosedNonMemberType"
          );
        }),
        (n.prototype.addEnclosedNonMemberContainer = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": addEnclosedNonMemberContainer"
          );
        }),
        (n.prototype.addTypeParameter = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": addTypeParameter"
          );
        }),
        (n.prototype.addConstructorTypeParameter = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": addConstructorTypeParameter"
          );
        }),
        (n.prototype.findContainedNonMember = function (e) {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findContainedNonMember(e)
          );
        }),
        (n.prototype.findContainedNonMemberType = function (e, t) {
          return (
            "undefined" == typeof t && (t = 0),
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findContainedNonMemberType(e, t)
          );
        }),
        (n.prototype.getMembers = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getMembers()
          );
        }),
        (n.prototype.setHasDefaultConstructor = function (t) {
          "undefined" == typeof t && (t = !0),
            e.Debug.fail(
              "Reference symbol " +
                this.pullSymbolID +
                ":setHasDefaultConstructor"
            );
        }),
        (n.prototype.getHasDefaultConstructor = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getHasDefaultConstructor()
          );
        }),
        (n.prototype.getConstructorMethod = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getConstructorMethod()
          );
        }),
        (n.prototype.setConstructorMethod = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": setConstructorMethod"
          );
        }),
        (n.prototype.getTypeParameters = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getTypeParameters()
          );
        }),
        (n.prototype.isGeneric = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.isGeneric()
          );
        }),
        (n.prototype.addSpecialization = function (e, t) {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.addSpecialization(e, t)
          );
        }),
        (n.prototype.getSpecialization = function (e) {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getSpecialization(e)
          );
        }),
        (n.prototype.getKnownSpecializations = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getKnownSpecializations()
          );
        }),
        (n.prototype.getTypeArguments = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getTypeArguments()
          );
        }),
        (n.prototype.getTypeArgumentsOrTypeParameters = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getTypeArgumentsOrTypeParameters()
          );
        }),
        (n.prototype.appendCallSignature = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": appendCallSignature"
          );
        }),
        (n.prototype.insertCallSignatureAtIndex = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": insertCallSignatureAtIndex"
          );
        }),
        (n.prototype.appendConstructSignature = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": appendConstructSignature"
          );
        }),
        (n.prototype.insertConstructSignatureAtIndex = function () {
          e.Debug.fail(
            "Reference symbol " +
              this.pullSymbolID +
              ": insertConstructSignatureAtIndex"
          );
        }),
        (n.prototype.addIndexSignature = function () {
          e.Debug.fail(
            "Reference symbol " + this.pullSymbolID + ": addIndexSignature"
          );
        }),
        (n.prototype.hasOwnCallSignatures = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.hasOwnCallSignatures()
          );
        }),
        (n.prototype.getCallSignatures = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getCallSignatures()
          );
        }),
        (n.prototype.hasOwnConstructSignatures = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.hasOwnConstructSignatures()
          );
        }),
        (n.prototype.getConstructSignatures = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getConstructSignatures()
          );
        }),
        (n.prototype.hasOwnIndexSignatures = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.hasOwnIndexSignatures()
          );
        }),
        (n.prototype.getIndexSignatures = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getIndexSignatures()
          );
        }),
        (n.prototype.addImplementedType = function (e) {
          this.referencedTypeSymbol.addImplementedType(e);
        }),
        (n.prototype.getImplementedTypes = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getImplementedTypes()
          );
        }),
        (n.prototype.addExtendedType = function (e) {
          this.referencedTypeSymbol.addExtendedType(e);
        }),
        (n.prototype.getExtendedTypes = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getExtendedTypes()
          );
        }),
        (n.prototype.addTypeThatExtendsThisType = function (e) {
          this.referencedTypeSymbol.addTypeThatExtendsThisType(e);
        }),
        (n.prototype.getTypesThatExtendThisType = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getTypesThatExtendThisType()
          );
        }),
        (n.prototype.addTypeThatExplicitlyImplementsThisType = function (e) {
          this.referencedTypeSymbol.addTypeThatExplicitlyImplementsThisType(e);
        }),
        (n.prototype.getTypesThatExplicitlyImplementThisType = function () {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getTypesThatExplicitlyImplementThisType()
          );
        }),
        (n.prototype.isValidBaseKind = function (e, t) {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.isValidBaseKind(e, t)
          );
        }),
        (n.prototype.findMember = function (e, t) {
          return (
            "undefined" == typeof t && (t = !0),
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findMember(e, t)
          );
        }),
        (n.prototype.findNestedType = function (e, t) {
          return (
            "undefined" == typeof t && (t = 0),
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findNestedType(e, t)
          );
        }),
        (n.prototype.findNestedContainer = function (e, t) {
          return (
            "undefined" == typeof t && (t = 0),
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findNestedContainer(e, t)
          );
        }),
        (n.prototype.getAllMembers = function (e, t) {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.getAllMembers(e, t)
          );
        }),
        (n.prototype.findTypeParameter = function (e) {
          return (
            this.ensureReferencedTypeIsResolved(),
            this.referencedTypeSymbol.findTypeParameter(e)
          );
        }),
        (n.prototype.hasOnlyOverloadCallSignatures = function () {
          return this.referencedTypeSymbol.hasOnlyOverloadCallSignatures();
        }),
        n
      );
    })(e.PullTypeSymbol));
  (e.PullTypeReferenceSymbol = t),
    (e.nSpecializationsCreated = 0),
    (e.nSpecializedSignaturesCreated = 0),
    (e.nSpecializedTypeParameterCreated = 0);
  var n = (function (t) {
    function n(n, r, i) {
      t.call(this, n),
        (this.referencedTypeSymbol = n),
        (this._typeParameterArgumentMap = r),
        (this.isInstanceReferenceType = i),
        (this._instantiatedMembers = null),
        (this._allInstantiatedMemberNameCache = null),
        (this._instantiatedMemberNameCache = e.createIntrinsicsObject()),
        (this._instantiatedCallSignatures = null),
        (this._instantiatedConstructSignatures = null),
        (this._instantiatedIndexSignatures = null),
        (this._typeArgumentReferences = void 0),
        (this._instantiatedConstructorMethod = null),
        (this._instantiatedAssociatedContainerType = null),
        (this._isArray = void 0),
        (this._generativeTypeClassification = []),
        e.nSpecializationsCreated++;
    }
    return (
      __extends(n, t),
      (n.prototype.getIsSpecialized = function () {
        return !this.isInstanceReferenceType;
      }),
      (n.prototype.getGenerativeTypeClassification = function (e) {
        if (!this.isNamedTypeSymbol()) return 0;
        var t = this._generativeTypeClassification[e.pullSymbolID] || 0;
        if (0 === t) {
          for (var n = e.getTypeParameters(), r = [], i = 0; i < n.length; i++)
            r[n[i].pullSymbolID] = n[i];
          for (var o = this.getTypeArguments(), i = 0; i < o.length; i++)
            if (o[i].wrapsSomeTypeParameter(r, !0)) {
              t = 1;
              break;
            }
          1 === t
            ? this.wrapsSomeTypeParameterIntoInfinitelyExpandingTypeReference(
                e
              ) && (t = 3)
            : (t = 2),
            (this._generativeTypeClassification[e.pullSymbolID] = t);
        }
        return t;
      }),
      (n.prototype.isArrayNamedTypeReference = function () {
        return (
          void 0 === this._isArray &&
            (this._isArray =
              this.getRootSymbol().isArrayNamedTypeReference() ||
              this.getRootSymbol() === this._getResolver().getArrayNamedType()),
          this._isArray
        );
      }),
      (n.prototype.getElementType = function () {
        if (!this.isArrayNamedTypeReference()) return null;
        var e = this.getTypeArguments();
        return e ? e[0] : null;
      }),
      (n.prototype.getReferencedTypeSymbol = function () {
        return (
          this.ensureReferencedTypeIsResolved(),
          this.getIsSpecialized() ? this : this.referencedTypeSymbol
        );
      }),
      (n.create = function (t, r, i) {
        e.Debug.assert(t);
        var o = new e.PullInstantiationHelpers.MutableTypeArgumentMap(i);
        e.PullInstantiationHelpers.instantiateTypeArgument(t, r, o);
        var s = r.getRootSymbol(),
          a = s.getSpecialization(o.typeParameterArgumentMap);
        if (a) return a;
        e.PullInstantiationHelpers.cleanUpTypeArgumentMap(r, o),
          (i = o.typeParameterArgumentMap);
        var l = 0 != (8216 & r.kind),
          c = i;
        if (l) {
          for (var u = s.getTypeParameters(), p = 0; p < u.length; p++)
            if (
              !e.PullHelpers.typeSymbolsAreIdentical(u[p], i[u[p].pullSymbolID])
            ) {
              l = !1;
              break;
            }
          l && (i = []);
        }
        return (a = new n(s, i, l)), s.addSpecialization(a, c), a;
      }),
      (n.prototype.isGeneric = function () {
        return this.getRootSymbol().isGeneric();
      }),
      (n.prototype.getTypeParameterArgumentMap = function () {
        return this._typeParameterArgumentMap;
      }),
      (n.prototype.getTypeArguments = function () {
        if (this.isInstanceReferenceType) return this.getTypeParameters();
        if (void 0 === this._typeArgumentReferences) {
          var t = this.referencedTypeSymbol.getTypeParameters();
          if (t.length) {
            for (var n = null, r = [], i = 0; i < t.length; i++)
              (n = this._typeParameterArgumentMap[t[i].pullSymbolID]),
                n || e.Debug.fail("type argument count mismatch"),
                n && (r[r.length] = n);
            this._typeArgumentReferences = r;
          } else this._typeArgumentReferences = null;
        }
        return this._typeArgumentReferences;
      }),
      (n.prototype.getTypeArgumentsOrTypeParameters = function () {
        return this.getTypeArguments();
      }),
      (n.prototype.populateInstantiatedMemberFromReferencedMember = function (
        t
      ) {
        var n;
        e.PullHelpers.resolveDeclaredSymbolToUseType(t),
          t.type.wrapsSomeTypeParameter(this._typeParameterArgumentMap)
            ? ((n = new e.PullSymbol(t.name, t.kind)),
              n.setRootSymbol(t),
              (n.type = this._getResolver().instantiateType(
                t.type,
                this._typeParameterArgumentMap
              )),
              (n.isOptional = t.isOptional))
            : (n = t),
          (this._instantiatedMemberNameCache[n.name] = n);
      }),
      (n.prototype.getMembers = function () {
        if (
          (this.ensureReferencedTypeIsResolved(), this.isInstanceReferenceType)
        )
          return this.referencedTypeSymbol.getMembers();
        if (!this._instantiatedMembers) {
          var e = this.referencedTypeSymbol.getMembers(),
            t = null;
          this._instantiatedMembers = [];
          for (var n = 0; n < e.length; n++)
            (t = e[n]),
              this._getResolver().resolveDeclaredSymbol(t),
              this._instantiatedMemberNameCache[t.name] ||
                this.populateInstantiatedMemberFromReferencedMember(t),
              (this._instantiatedMembers[
                this._instantiatedMembers.length
              ] = this._instantiatedMemberNameCache[t.name]);
        }
        return this._instantiatedMembers;
      }),
      (n.prototype.findMember = function (e, t) {
        if (
          ("undefined" == typeof t && (t = !0),
          this.ensureReferencedTypeIsResolved(),
          this.isInstanceReferenceType)
        )
          return this.referencedTypeSymbol.findMember(e, t);
        var n = this._instantiatedMemberNameCache[e];
        if (!n) {
          var r = this.referencedTypeSymbol.findMember(e, t);
          r
            ? (this.populateInstantiatedMemberFromReferencedMember(r),
              (n = this._instantiatedMemberNameCache[e]))
            : (n = null);
        }
        return n;
      }),
      (n.prototype.getAllMembers = function (t, n) {
        if (
          (this.ensureReferencedTypeIsResolved(), this.isInstanceReferenceType)
        )
          return this.referencedTypeSymbol.getAllMembers(t, n);
        var r = [],
          i = this.referencedTypeSymbol.getAllMembers(t, n);
        if (!this._allInstantiatedMemberNameCache) {
          this._allInstantiatedMemberNameCache = e.createIntrinsicsObject();
          for (var o = this.getMembers(), s = 0; s < o.length; s++)
            this._allInstantiatedMemberNameCache[o[s].name] = o[s];
        }
        for (var a = null, l = null, s = 0; s < i.length; s++)
          (a = i[s]),
            this._getResolver().resolveDeclaredSymbol(a),
            this._allInstantiatedMemberNameCache[a.name]
              ? (r[r.length] = this._allInstantiatedMemberNameCache[a.name])
              : a.type.wrapsSomeTypeParameter(this._typeParameterArgumentMap)
              ? ((l = new e.PullSymbol(a.name, a.kind)),
                l.setRootSymbol(a),
                (l.type = this._getResolver().instantiateType(
                  a.type,
                  this._typeParameterArgumentMap
                )),
                (l.isOptional = a.isOptional),
                (this._allInstantiatedMemberNameCache[l.name] = l),
                (r[r.length] = l))
              : ((this._allInstantiatedMemberNameCache[a.name] = a),
                (r[r.length] = a));
        return r;
      }),
      (n.prototype.getConstructorMethod = function () {
        if (this.isInstanceReferenceType)
          return this.referencedTypeSymbol.getConstructorMethod();
        if (!this._instantiatedConstructorMethod) {
          var t = this.referencedTypeSymbol.getConstructorMethod();
          (this._instantiatedConstructorMethod = new e.PullSymbol(
            t.name,
            t.kind
          )),
            this._instantiatedConstructorMethod.setRootSymbol(t),
            this._instantiatedConstructorMethod.setResolved(),
            (this._instantiatedConstructorMethod.type = n.create(
              this._getResolver(),
              t.type,
              this._typeParameterArgumentMap
            ));
        }
        return this._instantiatedConstructorMethod;
      }),
      (n.prototype.getAssociatedContainerType = function () {
        if (!this.isInstanceReferenceType)
          return this.referencedTypeSymbol.getAssociatedContainerType();
        if (!this._instantiatedAssociatedContainerType) {
          var e = this.referencedTypeSymbol.getAssociatedContainerType();
          e &&
            (this._instantiatedAssociatedContainerType = n.create(
              this._getResolver(),
              e,
              this._typeParameterArgumentMap
            ));
        }
        return this._instantiatedAssociatedContainerType;
      }),
      (n.prototype.getCallSignatures = function () {
        if (
          (this.ensureReferencedTypeIsResolved(), this.isInstanceReferenceType)
        )
          return this.referencedTypeSymbol.getCallSignatures();
        if (this._instantiatedCallSignatures)
          return this._instantiatedCallSignatures;
        var e = this.referencedTypeSymbol.getCallSignatures();
        this._instantiatedCallSignatures = [];
        for (var t = 0; t < e.length; t++)
          this._getResolver().resolveDeclaredSymbol(e[t]),
            e[t].wrapsSomeTypeParameter(this._typeParameterArgumentMap)
              ? ((this._instantiatedCallSignatures[
                  this._instantiatedCallSignatures.length
                ] = this._getResolver().instantiateSignature(
                  e[t],
                  this._typeParameterArgumentMap
                )),
                (this._instantiatedCallSignatures[
                  this._instantiatedCallSignatures.length - 1
                ].functionType = this))
              : (this._instantiatedCallSignatures[
                  this._instantiatedCallSignatures.length
                ] = e[t]);
        return this._instantiatedCallSignatures;
      }),
      (n.prototype.getConstructSignatures = function () {
        if (
          (this.ensureReferencedTypeIsResolved(), this.isInstanceReferenceType)
        )
          return this.referencedTypeSymbol.getConstructSignatures();
        if (this._instantiatedConstructSignatures)
          return this._instantiatedConstructSignatures;
        var e = this.referencedTypeSymbol.getConstructSignatures();
        this._instantiatedConstructSignatures = [];
        for (var t = 0; t < e.length; t++)
          this._getResolver().resolveDeclaredSymbol(e[t]),
            e[t].wrapsSomeTypeParameter(this._typeParameterArgumentMap)
              ? ((this._instantiatedConstructSignatures[
                  this._instantiatedConstructSignatures.length
                ] = this._getResolver().instantiateSignature(
                  e[t],
                  this._typeParameterArgumentMap
                )),
                (this._instantiatedConstructSignatures[
                  this._instantiatedConstructSignatures.length - 1
                ].functionType = this))
              : (this._instantiatedConstructSignatures[
                  this._instantiatedConstructSignatures.length
                ] = e[t]);
        return this._instantiatedConstructSignatures;
      }),
      (n.prototype.getIndexSignatures = function () {
        if (
          (this.ensureReferencedTypeIsResolved(), this.isInstanceReferenceType)
        )
          return this.referencedTypeSymbol.getIndexSignatures();
        if (this._instantiatedIndexSignatures)
          return this._instantiatedIndexSignatures;
        var e = this.referencedTypeSymbol.getIndexSignatures();
        this._instantiatedIndexSignatures = [];
        for (var t = 0; t < e.length; t++)
          this._getResolver().resolveDeclaredSymbol(e[t]),
            e[t].wrapsSomeTypeParameter(this._typeParameterArgumentMap)
              ? ((this._instantiatedIndexSignatures[
                  this._instantiatedIndexSignatures.length
                ] = this._getResolver().instantiateSignature(
                  e[t],
                  this._typeParameterArgumentMap
                )),
                (this._instantiatedIndexSignatures[
                  this._instantiatedIndexSignatures.length - 1
                ].functionType = this))
              : (this._instantiatedIndexSignatures[
                  this._instantiatedIndexSignatures.length
                ] = e[t]);
        return this._instantiatedIndexSignatures;
      }),
      n
    );
  })(t);
  e.PullInstantiatedTypeReferenceSymbol = n;
  var r = (function (t) {
    function n(n, r) {
      t.call(this, n.kind, n.isDefinition()),
        (this._typeParameterArgumentMap = r),
        this.setRootSymbol(n),
        e.nSpecializedSignaturesCreated++,
        n.addSpecialization(this, r);
    }
    return (
      __extends(n, t),
      (n.prototype.getTypeParameterArgumentMap = function () {
        return this._typeParameterArgumentMap;
      }),
      (n.prototype.getIsSpecialized = function () {
        return !0;
      }),
      (n.prototype._getResolver = function () {
        return this.getRootSymbol()._getResolver();
      }),
      (n.prototype.getTypeParameters = function () {
        var t = this;
        if (!this._typeParameters) {
          var n = this.getRootSymbol(),
            r = n.getTypeParameters(),
            i = e.ArrayUtilities.all(r, function (e) {
              return void 0 !== t._typeParameterArgumentMap[e.pullSymbolID];
            });
          if (!i && r.length) {
            this._typeParameters = [];
            for (var o = 0; o < r.length; o++)
              this._typeParameters[
                this._typeParameters.length
              ] = this._getResolver().instantiateTypeParameter(
                r[o],
                this._typeParameterArgumentMap
              );
          } else this._typeParameters = e.sentinelEmptyArray;
        }
        return this._typeParameters;
      }),
      (n.prototype.getAllowedToReferenceTypeParameters = function () {
        var e = this.getRootSymbol();
        return e.getAllowedToReferenceTypeParameters();
      }),
      n
    );
  })(e.PullSignatureSymbol);
  e.PullInstantiatedSignatureSymbol = r;
  var i = (function (t) {
    function n(n, r) {
      t.call(this, n.name),
        e.nSpecializedTypeParameterCreated++,
        this.setRootSymbol(n),
        this.setConstraint(r),
        n.addSpecialization(this, [r]);
    }
    return (
      __extends(n, t),
      (n.prototype._getResolver = function () {
        return this.getRootSymbol()._getResolver();
      }),
      n
    );
  })(e.PullTypeParameterSymbol);
  e.PullInstantiatedTypeParameterSymbol = i;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e, t) {
    e && (-1 !== e._start && (e._start += t), -1 !== e._end && (e._end += t));
  }
  function n(e, n) {
    if (e && e.length > 0)
      for (var r = 0; r < e.length; r++) {
        var i = e[r];
        t(i, n);
      }
  }
  var r = (function () {
    function t(e, t, n) {
      (this.fileName = e),
        (this.lineMap = t),
        (this.compilationSettings = n),
        (this.position = 0),
        (this.previousTokenTrailingComments = null);
    }
    return (
      (t.visit = function (e, n, r, o) {
        var s = o ? new i(n, e.lineMap(), r) : new t(n, e.lineMap(), r);
        return e.sourceUnit().accept(s);
      }),
      (t.prototype.movePast = function (e) {
        null !== e && (this.position += e.fullWidth());
      }),
      (t.prototype.moveTo = function (t, n) {
        null !== n && (this.position += e.Syntax.childOffset(t, n));
      }),
      (t.prototype.setCommentsAndSpan = function (e, t, n) {
        var r = n.firstToken(),
          i = n.lastToken();
        this.setSpan(e, t, n, r, i),
          e.setPreComments(this.convertTokenLeadingComments(r, t)),
          e.setPostComments(this.convertNodeTrailingComments(n, i, t));
      }),
      (t.prototype.createTokenSpan = function (t, n) {
        if (null === n) return null;
        if (0 === n.fullWidth()) return new e.ASTSpan(-1, -1);
        var r = n.leadingTriviaWidth(),
          i = n.trailingTriviaWidth(),
          o = t + r,
          s = t + n.fullWidth() - i;
        return new e.ASTSpan(o, s);
      }),
      (t.prototype.setSpan = function (e, t, n, r, i) {
        "undefined" == typeof r && (r = n.firstToken()),
          "undefined" == typeof i && (i = n.lastToken());
        var o = r ? r.leadingTriviaWidth() : 0,
          s = i ? i.trailingTriviaWidth() : 0,
          a = t + o,
          l = t + n.fullWidth() - s;
        this.setSpanExplicit(e, a, l), (e._trailingTriviaWidth = s);
      }),
      (t.prototype.setSpanExplicit = function (e, t, n) {
        (e._start = t), (e._end = n);
      }),
      (t.prototype.visitSyntaxList = function (t) {
        for (
          var n = this.position,
            r = new Array(t.childCount()),
            i = 0,
            o = t.childCount();
          o > i;
          i++
        )
          r[i] = t.childAt(i).accept(this);
        var s = new e.ISyntaxList2(this.fileName, r);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitSeparatedSyntaxList = function (t) {
        for (
          var n = this.position,
            r = new Array(t.nonSeparatorCount()),
            i = 0,
            o = t.childCount();
          o > i;
          i++
        )
          if (i % 2 === 0)
            (r[i / 2] = t.childAt(i).accept(this)),
              (this.previousTokenTrailingComments = null);
          else {
            var s = t.childAt(i);
            (this.previousTokenTrailingComments = this.convertTokenTrailingComments(
              s,
              this.position + s.leadingTriviaWidth() + s.width()
            )),
              this.movePast(s);
          }
        var a = new e.ISeparatedSyntaxList2(
          this.fileName,
          r,
          t.separatorCount()
        );
        return (
          this.setSpan(a, n, t),
          a.setPostComments(this.previousTokenTrailingComments),
          (this.previousTokenTrailingComments = null),
          a
        );
      }),
      (t.prototype.convertComment = function (t, n, r) {
        var i = new e.Comment(t, r, n, n + t.fullWidth());
        return i;
      }),
      (t.prototype.convertComments = function (e, t) {
        for (var n = [], r = 0, i = e.count(); i > r; r++) {
          var o = e.syntaxTriviaAt(r);
          if (o.isComment()) {
            var s = i > r + 1 && e.syntaxTriviaAt(r + 1).isNewLine();
            n.push(this.convertComment(o, t, s));
          }
          t += o.fullWidth();
        }
        return n;
      }),
      (t.prototype.mergeComments = function (e, t) {
        return null === e ? t : null === t ? e : e.concat(t);
      }),
      (t.prototype.convertTokenLeadingComments = function (e, t) {
        if (null === e) return null;
        var n = e.hasLeadingComment()
            ? this.convertComments(e.leadingTrivia(), t)
            : null,
          r = this.previousTokenTrailingComments;
        return (
          (this.previousTokenTrailingComments = null), this.mergeComments(r, n)
        );
      }),
      (t.prototype.convertTokenTrailingComments = function (e, t) {
        return null === e || !e.hasTrailingComment() || e.hasTrailingNewLine()
          ? null
          : this.convertComments(e.trailingTrivia(), t);
      }),
      (t.prototype.convertNodeTrailingComments = function (e, t, n) {
        return null === t || !t.hasTrailingComment() || t.hasTrailingNewLine()
          ? null
          : this.convertComments(
              t.trailingTrivia(),
              n + e.fullWidth() - t.trailingTriviaWidth()
            );
      }),
      (t.prototype.visitIdentifier = function (e) {
        return this.visitToken(e);
      }),
      (t.prototype.visitToken = function (e) {
        var t = this.position,
          n = this.visitTokenWorker(e);
        this.movePast(e);
        var r = t + e.leadingTriviaWidth();
        return this.setSpanExplicit(n, r, r + e.width()), n;
      }),
      (t.prototype.visitTokenWorker = function (t) {
        switch (t.tokenKind) {
          case 60:
            return new e.BuiltInType(60, t.text(), t.valueText());
          case 61:
            return new e.BuiltInType(61, t.text(), t.valueText());
          case 67:
            return new e.BuiltInType(67, t.text(), t.valueText());
          case 69:
            return new e.BuiltInType(69, t.text(), t.valueText());
          case 41:
            return new e.BuiltInType(41, t.text(), t.valueText());
          case 35:
            return new e.ThisExpression(t.text(), t.valueText());
          case 50:
            return new e.SuperExpression(t.text(), t.valueText());
          case 37:
            return new e.LiteralExpression(37, t.text(), t.valueText());
          case 24:
            return new e.LiteralExpression(24, t.text(), t.valueText());
          case 32:
            return new e.LiteralExpression(32, t.text(), t.valueText());
          case 14:
            return new e.StringLiteral(t.text(), t.valueText());
          case 12:
            return new e.RegularExpressionLiteral(t.text(), t.valueText());
          case 13:
            var n = this.position,
              r = this.convertTokenLeadingComments(t, n),
              i = new e.NumericLiteral(t.value(), t.text(), t.valueText());
            return i.setPreComments(r), i;
          case 11:
            return new e.Identifier(t.text());
          default:
            throw e.Errors.invalidOperation();
        }
      }),
      (t.prototype.visitSourceUnit = function (t) {
        var n = this.position;
        e.Debug.assert(0 === n);
        var r = this.visitSyntaxList(t.moduleElements),
          i = this.convertTokenLeadingComments(
            t.endOfFileToken,
            e.Syntax.childOffset(t, t.endOfFileToken)
          ),
          o = new e.SourceUnit(r, i, this.fileName);
        return this.setSpanExplicit(o, n, n + t.fullWidth()), o;
      }),
      (t.prototype.visitExternalModuleReference = function (t) {
        var n = this.position;
        this.moveTo(t, t.stringLiteral);
        var r = t.stringLiteral.accept(this);
        this.movePast(t.closeParenToken);
        var i = new e.ExternalModuleReference(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitModuleNameModuleReference = function (t) {
        var n = this.position,
          r = t.moduleName.accept(this),
          i = new e.ModuleNameModuleReference(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitClassDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.identifier);
        var r = this.visitIdentifier(t.identifier),
          i = this.visitTypeParameterList(t.typeParameterList),
          o = t.heritageClauses
            ? this.visitSyntaxList(t.heritageClauses)
            : null;
        this.movePast(t.openBraceToken);
        var s = this.visitSyntaxList(t.classElements),
          a = this.createTokenSpan(this.position, t.closeBraceToken);
        this.movePast(t.closeBraceToken);
        var l = this.visitModifiers(t.modifiers),
          c = new e.ClassDeclaration(l, r, i, o, s, a);
        return this.setCommentsAndSpan(c, n, t), c;
      }),
      (t.prototype.visitModifiers = function (t) {
        var n = null;
        return (
          e.SyntaxUtilities.containsToken(t, 47) && ((n = n || []), n.push(1)),
          e.SyntaxUtilities.containsToken(t, 63) && ((n = n || []), n.push(8)),
          e.SyntaxUtilities.containsToken(t, 58) && ((n = n || []), n.push(16)),
          e.SyntaxUtilities.containsToken(t, 57) && ((n = n || []), n.push(4)),
          e.SyntaxUtilities.containsToken(t, 55) && ((n = n || []), n.push(2)),
          n || e.sentinelEmptyArray
        );
      }),
      (t.prototype.visitInterfaceDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.identifier);
        var r = this.visitIdentifier(t.identifier),
          i = this.visitTypeParameterList(t.typeParameterList),
          o = t.heritageClauses
            ? this.visitSyntaxList(t.heritageClauses)
            : null,
          s = this.visitObjectType(t.body),
          a = this.visitModifiers(t.modifiers),
          l = new e.InterfaceDeclaration(a, r, i, o, s);
        return this.setCommentsAndSpan(l, n, t), l;
      }),
      (t.prototype.visitHeritageClause = function (t) {
        var n = this.position;
        this.movePast(t.extendsOrImplementsKeyword);
        var r = this.visitSeparatedSyntaxList(t.typeNames),
          i = new e.HeritageClause(
            48 === t.extendsOrImplementsKeyword.tokenKind ? 230 : 231,
            r
          );
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitModuleDeclaration = function (t) {
        var n = this.position,
          r = this.visitModifiers(t.modifiers);
        this.moveTo(t, t.moduleKeyword), this.movePast(t.moduleKeyword);
        var i = t.name ? t.name.accept(this) : null,
          o = t.stringLiteral ? t.stringLiteral.accept(this) : null;
        this.movePast(t.openBraceToken);
        var s = this.visitSyntaxList(t.moduleElements),
          a = this.createTokenSpan(this.position, t.closeBraceToken);
        this.movePast(t.closeBraceToken);
        var l = new e.ModuleDeclaration(r, i, o, s, a);
        return this.setCommentsAndSpan(l, n, t), l;
      }),
      (t.prototype.visitFunctionDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.identifier);
        var r = this.visitIdentifier(t.identifier),
          i = this.visitCallSignature(t.callSignature),
          o = t.block ? this.visitBlock(t.block) : null;
        this.movePast(t.semicolonToken);
        var s = new e.FunctionDeclaration(
          this.visitModifiers(t.modifiers),
          r,
          i,
          o
        );
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitEnumDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.identifier);
        var r = this.visitIdentifier(t.identifier);
        this.movePast(t.openBraceToken);
        var i = this.visitSeparatedSyntaxList(t.enumElements);
        this.movePast(t.closeBraceToken);
        var o = new e.EnumDeclaration(this.visitModifiers(t.modifiers), r, i);
        return this.setCommentsAndSpan(o, n, t), o;
      }),
      (t.prototype.visitEnumElement = function (t) {
        var n = this.position,
          r = this.visitToken(t.propertyName),
          i =
            null !== t.equalsValueClause
              ? this.visitEqualsValueClause(t.equalsValueClause)
              : null,
          o = new e.EnumElement(r, i);
        return this.setCommentsAndSpan(o, n, t), o;
      }),
      (t.prototype.visitImportDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.identifier);
        var r = this.visitIdentifier(t.identifier);
        this.movePast(t.equalsToken);
        var i = t.moduleReference.accept(this);
        this.movePast(t.semicolonToken);
        var o = this.visitModifiers(t.modifiers),
          s = new e.ImportDeclaration(o, r, i);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitExportAssignment = function (t) {
        var n = this.position;
        this.moveTo(t, t.identifier);
        var r = this.visitIdentifier(t.identifier);
        this.movePast(t.semicolonToken);
        var i = new e.ExportAssignment(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitVariableStatement = function (t) {
        var n = this.position;
        this.moveTo(t, t.variableDeclaration);
        var r = t.variableDeclaration.accept(this);
        this.movePast(t.semicolonToken);
        var i = this.visitModifiers(t.modifiers),
          o = new e.VariableStatement(i, r);
        return this.setCommentsAndSpan(o, n, t), o;
      }),
      (t.prototype.visitVariableDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.variableDeclarators);
        var r = this.visitSeparatedSyntaxList(t.variableDeclarators),
          i = new e.VariableDeclaration(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitVariableDeclarator = function (t) {
        var n = this.position,
          r = this.visitToken(t.propertyName),
          i = this.visitTypeAnnotation(t.typeAnnotation),
          o = t.equalsValueClause
            ? this.visitEqualsValueClause(t.equalsValueClause)
            : null,
          s = new e.VariableDeclarator(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitEqualsValueClause = function (t) {
        var n = this.position,
          r = this.convertTokenTrailingComments(
            t.equalsToken,
            this.position +
              t.equalsToken.leadingTriviaWidth() +
              t.equalsToken.width()
          );
        this.movePast(t.equalsToken);
        var i = t.value.accept(this);
        i.setPreComments(this.mergeComments(r, i.preComments()));
        var o = new e.EqualsValueClause(i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitPrefixUnaryExpression = function (t) {
        var n = this.position;
        this.movePast(t.operatorToken);
        var r = t.operand.accept(this),
          i = new e.PrefixUnaryExpression(t.kind(), r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitArrayLiteralExpression = function (t) {
        {
          var n = this.position;
          this.position + t.openBracketToken.leadingTriviaWidth();
        }
        this.movePast(t.openBracketToken);
        {
          var r = this.visitSeparatedSyntaxList(t.expressions);
          this.position + t.closeBracketToken.leadingTriviaWidth();
        }
        this.movePast(t.closeBracketToken);
        var i = new e.ArrayLiteralExpression(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitOmittedExpression = function (t) {
        var n = this.position,
          r = new e.OmittedExpression();
        return this.setSpan(r, n, t), r;
      }),
      (t.prototype.visitParenthesizedExpression = function (t) {
        var n = this.position,
          r = t.openParenToken,
          i = this.convertTokenTrailingComments(
            r,
            n + r.leadingTriviaWidth() + r.width()
          );
        this.movePast(r);
        var o = t.expression.accept(this);
        this.movePast(t.closeParenToken);
        var s = new e.ParenthesizedExpression(i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitSimpleArrowFunctionExpression = function (t) {
        var n = this.position,
          r = t.identifier.accept(this);
        this.movePast(t.equalsGreaterThanToken);
        var i = t.block ? this.visitBlock(t.block) : null,
          o = t.expression ? t.expression.accept(this) : null,
          s = new e.SimpleArrowFunctionExpression(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitParenthesizedArrowFunctionExpression = function (t) {
        var n = this.position,
          r = this.visitCallSignature(t.callSignature);
        this.movePast(t.equalsGreaterThanToken);
        var i = t.block ? this.visitBlock(t.block) : null,
          o = t.expression ? t.expression.accept(this) : null,
          s = new e.ParenthesizedArrowFunctionExpression(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitType = function (e) {
        return e ? e.accept(this) : null;
      }),
      (t.prototype.visitTypeQuery = function (t) {
        var n = this.position;
        this.movePast(t.typeOfKeyword);
        var r = t.name.accept(this),
          i = new e.TypeQuery(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitQualifiedName = function (t) {
        var n = this.position,
          r = this.visitType(t.left);
        this.movePast(t.dotToken);
        var i = this.visitIdentifier(t.right),
          o = new e.QualifiedName(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitTypeArgumentList = function (t) {
        if (null === t) return null;
        var n = this.position;
        this.movePast(t.lessThanToken);
        var r = this.visitSeparatedSyntaxList(t.typeArguments);
        this.movePast(t.greaterThanToken);
        var i = new e.TypeArgumentList(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitConstructorType = function (t) {
        var n = this.position;
        this.movePast(t.newKeyword);
        var r = this.visitTypeParameterList(t.typeParameterList),
          i = this.visitParameterList(t.parameterList);
        this.movePast(t.equalsGreaterThanToken);
        var o = this.visitType(t.type),
          s = new e.ConstructorType(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitFunctionType = function (t) {
        var n = this.position,
          r = this.visitTypeParameterList(t.typeParameterList),
          i = this.visitParameterList(t.parameterList);
        this.movePast(t.equalsGreaterThanToken);
        var o = this.visitType(t.type),
          s = new e.FunctionType(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitObjectType = function (t) {
        var n = this.position;
        this.movePast(t.openBraceToken);
        var r = this.visitSeparatedSyntaxList(t.typeMembers);
        this.movePast(t.closeBraceToken);
        var i = new e.ObjectType(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitArrayType = function (t) {
        var n = this.position,
          r = this.visitType(t.type);
        this.movePast(t.openBracketToken), this.movePast(t.closeBracketToken);
        var i = new e.ArrayType(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitGenericType = function (t) {
        var n = this.position,
          r = this.visitType(t.name),
          i = this.visitTypeArgumentList(t.typeArgumentList),
          o = new e.GenericType(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitTypeAnnotation = function (t) {
        if (!t) return null;
        var n = this.position;
        this.movePast(t.colonToken);
        var r = this.visitType(t.type),
          i = new e.TypeAnnotation(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitBlock = function (t) {
        if (!t) return null;
        var n = this.position;
        this.movePast(t.openBraceToken);
        var r = this.visitSyntaxList(t.statements),
          i =
            (this.position,
            this.convertTokenLeadingComments(t.closeBraceToken, this.position)),
          o = this.createTokenSpan(this.position, t.closeBraceToken);
        this.movePast(t.closeBraceToken);
        var s = new e.Block(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitParameter = function (t) {
        var n = this.position,
          r = this.createTokenSpan(this.position, t.dotDotDotToken);
        this.moveTo(t, t.identifier);
        var i = this.visitIdentifier(t.identifier),
          o = this.createTokenSpan(this.position, t.questionToken);
        this.movePast(t.questionToken);
        var s = this.visitTypeAnnotation(t.typeAnnotation),
          a = t.equalsValueClause ? t.equalsValueClause.accept(this) : null,
          l = this.visitModifiers(t.modifiers),
          c = new e.Parameter(r, l, i, o, s, a);
        return this.setCommentsAndSpan(c, n, t), c;
      }),
      (t.prototype.visitMemberAccessExpression = function (t) {
        var n = this.position,
          r = t.expression.accept(this);
        this.movePast(t.dotToken);
        var i = this.visitIdentifier(t.name),
          o = new e.MemberAccessExpression(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitPostfixUnaryExpression = function (t) {
        var n = this.position,
          r = t.operand.accept(this);
        this.movePast(t.operatorToken);
        var i = new e.PostfixUnaryExpression(210 === t.kind() ? 210 : 211, r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitElementAccessExpression = function (t) {
        var n = this.position,
          r = t.expression.accept(this);
        this.movePast(t.openBracketToken);
        var i = t.argumentExpression.accept(this);
        this.movePast(t.closeBracketToken);
        var o = new e.ElementAccessExpression(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitInvocationExpression = function (t) {
        var n = this.position,
          r = t.expression.accept(this),
          i = this.visitArgumentList(t.argumentList),
          o = new e.InvocationExpression(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitArgumentList = function (t) {
        if (null === t) return null;
        var n = this.position,
          r = this.visitTypeArgumentList(t.typeArgumentList);
        this.movePast(t.openParenToken);
        var i = this.visitSeparatedSyntaxList(t.arguments);
        if (
          0 === t.arguments.fullWidth() &&
          0 === t.closeParenToken.fullWidth()
        ) {
          var o =
            n +
            t.openParenToken.leadingTriviaWidth() +
            t.openParenToken.width();
          this.setSpanExplicit(
            i,
            o,
            o + t.openParenToken.trailingTriviaWidth()
          );
        }
        var s = this.createTokenSpan(this.position, t.closeParenToken);
        this.movePast(t.closeParenToken);
        var a = new e.ArgumentList(r, i, s);
        return this.setSpan(a, n, t), a;
      }),
      (t.prototype.visitBinaryExpression = function (t) {
        var n = this.position,
          r = t.left.accept(this);
        this.movePast(t.operatorToken);
        var i = t.right.accept(this),
          o = new e.BinaryExpression(t.kind(), r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitConditionalExpression = function (t) {
        var n = this.position,
          r = t.condition.accept(this);
        this.movePast(t.questionToken);
        var i = t.whenTrue.accept(this);
        this.movePast(t.colonToken);
        var o = t.whenFalse.accept(this),
          s = new e.ConditionalExpression(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitConstructSignature = function (t) {
        var n = this.position;
        this.movePast(t.newKeyword);
        var r = this.visitCallSignature(t.callSignature),
          i = new e.ConstructSignature(r);
        return this.setCommentsAndSpan(i, n, t), i;
      }),
      (t.prototype.visitMethodSignature = function (t) {
        var n = this.position,
          r = this.visitToken(t.propertyName),
          i = this.createTokenSpan(this.position, t.questionToken);
        this.movePast(t.questionToken);
        var o = this.visitCallSignature(t.callSignature),
          s = new e.MethodSignature(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitIndexSignature = function (t) {
        var n = this.position;
        this.movePast(t.openBracketToken);
        var r = t.parameter.accept(this);
        this.movePast(t.closeBracketToken);
        var i = this.visitTypeAnnotation(t.typeAnnotation),
          o = new e.IndexSignature(r, i);
        return this.setCommentsAndSpan(o, n, t), o;
      }),
      (t.prototype.visitPropertySignature = function (t) {
        var n = this.position,
          r = this.visitToken(t.propertyName),
          i = this.createTokenSpan(this.position, t.questionToken);
        this.movePast(t.questionToken);
        var o = this.visitTypeAnnotation(t.typeAnnotation),
          s = new e.PropertySignature(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitParameterList = function (t) {
        if (!t) return null;
        var n = this.position,
          r = t.openParenToken;
        this.previousTokenTrailingComments = this.convertTokenTrailingComments(
          r,
          n + r.leadingTriviaWidth() + r.width()
        );
        var i = null;
        0 === t.parameters.childCount() &&
          ((i = this.previousTokenTrailingComments),
          (this.previousTokenTrailingComments = null)),
          this.movePast(t.openParenToken);
        var o = this.visitSeparatedSyntaxList(t.parameters);
        this.movePast(t.closeParenToken);
        var s = new e.ParameterList(i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitCallSignature = function (t) {
        var n = this.position,
          r = this.visitTypeParameterList(t.typeParameterList),
          i = this.visitParameterList(t.parameterList),
          o = this.visitTypeAnnotation(t.typeAnnotation),
          s = new e.CallSignature(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitTypeParameterList = function (t) {
        if (!t) return null;
        var n = this.position;
        this.movePast(t.lessThanToken);
        var r = this.visitSeparatedSyntaxList(t.typeParameters);
        this.movePast(t.greaterThanToken);
        var i = new e.TypeParameterList(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitTypeParameter = function (t) {
        var n = this.position,
          r = this.visitIdentifier(t.identifier),
          i = t.constraint ? t.constraint.accept(this) : null,
          o = new e.TypeParameter(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitConstraint = function (t) {
        var n = this.position;
        this.movePast(t.extendsKeyword);
        var r = this.visitType(t.type),
          i = new e.Constraint(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitIfStatement = function (t) {
        var n = this.position;
        this.moveTo(t, t.condition);
        var r = t.condition.accept(this);
        this.movePast(t.closeParenToken);
        var i = t.statement.accept(this),
          o = t.elseClause ? t.elseClause.accept(this) : null,
          s = new e.IfStatement(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitElseClause = function (t) {
        var n = this.position;
        this.movePast(t.elseKeyword);
        var r = t.statement.accept(this),
          i = new e.ElseClause(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitExpressionStatement = function (t) {
        var n = this.position,
          r = this.convertTokenLeadingComments(t.firstToken(), n),
          i = t.expression.accept(this),
          o =
            (this.position,
            this.convertComments(
              t.semicolonToken.trailingTrivia(),
              this.position +
                t.semicolonToken.leadingTriviaWidth() +
                t.semicolonToken.width()
            ));
        this.movePast(t.semicolonToken);
        var s = new e.ExpressionStatement(i);
        return (
          this.setSpan(s, n, t), s.setPreComments(r), s.setPostComments(o), s
        );
      }),
      (t.prototype.visitConstructorDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.callSignature);
        var r = this.visitCallSignature(t.callSignature),
          i = t.block ? t.block.accept(this) : null;
        this.movePast(t.semicolonToken);
        var o = new e.ConstructorDeclaration(r, i);
        return this.setCommentsAndSpan(o, n, t), o;
      }),
      (t.prototype.visitIndexMemberDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.indexSignature);
        var r = t.indexSignature.accept(this);
        this.movePast(t.semicolonToken);
        var i = new e.IndexMemberDeclaration(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitMemberFunctionDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.propertyName);
        var r = this.visitToken(t.propertyName),
          i = this.visitCallSignature(t.callSignature),
          o = t.block ? this.visitBlock(t.block) : null;
        this.movePast(t.semicolonToken);
        var s = new e.MemberFunctionDeclaration(
          this.visitModifiers(t.modifiers),
          r,
          i,
          o
        );
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitGetAccessor = function (t) {
        var n = this.position;
        this.moveTo(t, t.propertyName);
        var r = this.visitToken(t.propertyName),
          i = this.visitParameterList(t.parameterList),
          o = this.visitTypeAnnotation(t.typeAnnotation),
          s = t.block ? t.block.accept(this) : null,
          a = new e.GetAccessor(this.visitModifiers(t.modifiers), r, i, o, s);
        return this.setCommentsAndSpan(a, n, t), a;
      }),
      (t.prototype.visitSetAccessor = function (t) {
        var n = this.position;
        this.moveTo(t, t.propertyName);
        var r = this.visitToken(t.propertyName),
          i = this.visitParameterList(t.parameterList),
          o = t.block ? t.block.accept(this) : null,
          s = new e.SetAccessor(this.visitModifiers(t.modifiers), r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitMemberVariableDeclaration = function (t) {
        var n = this.position;
        this.moveTo(t, t.variableDeclarator);
        var r = t.variableDeclarator.accept(this);
        this.movePast(t.semicolonToken);
        var i = this.visitModifiers(t.modifiers),
          o = new e.MemberVariableDeclaration(i, r);
        return this.setCommentsAndSpan(o, n, t), o;
      }),
      (t.prototype.visitThrowStatement = function (t) {
        var n = this.position;
        this.movePast(t.throwKeyword);
        var r = t.expression.accept(this);
        this.movePast(t.semicolonToken);
        var i = new e.ThrowStatement(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitReturnStatement = function (t) {
        var n = this.position;
        this.movePast(t.returnKeyword);
        var r = t.expression ? t.expression.accept(this) : null;
        this.movePast(t.semicolonToken);
        var i = new e.ReturnStatement(r);
        return this.setCommentsAndSpan(i, n, t), i;
      }),
      (t.prototype.visitObjectCreationExpression = function (t) {
        var n = this.position;
        this.movePast(t.newKeyword);
        var r = t.expression.accept(this),
          i = this.visitArgumentList(t.argumentList),
          o = new e.ObjectCreationExpression(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitSwitchStatement = function (t) {
        var n = this.position;
        this.movePast(t.switchKeyword), this.movePast(t.openParenToken);
        var r = t.expression.accept(this),
          i = this.createTokenSpan(this.position, t.closeParenToken);
        this.movePast(t.closeParenToken), this.movePast(t.openBraceToken);
        var o = this.visitSyntaxList(t.switchClauses);
        this.movePast(t.closeBraceToken);
        var s = new e.SwitchStatement(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitCaseSwitchClause = function (t) {
        var n = this.position;
        this.movePast(t.caseKeyword);
        var r = t.expression.accept(this);
        this.movePast(t.colonToken);
        var i = this.visitSyntaxList(t.statements),
          o = new e.CaseSwitchClause(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitDefaultSwitchClause = function (t) {
        var n = this.position;
        this.movePast(t.defaultKeyword), this.movePast(t.colonToken);
        var r = this.visitSyntaxList(t.statements),
          i = new e.DefaultSwitchClause(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitBreakStatement = function (t) {
        var n = this.position;
        this.movePast(t.breakKeyword);
        var r = t.identifier ? t.identifier.accept(this) : null;
        this.movePast(t.semicolonToken);
        var i = new e.BreakStatement(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitContinueStatement = function (t) {
        var n = this.position;
        this.movePast(t.continueKeyword);
        var r = t.identifier ? t.identifier.accept(this) : null;
        this.movePast(t.semicolonToken);
        var i = new e.ContinueStatement(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitForStatement = function (t) {
        var n = this.position;
        this.movePast(t.forKeyword), this.movePast(t.openParenToken);
        var r = t.variableDeclaration
            ? t.variableDeclaration.accept(this)
            : null,
          i = t.initializer ? t.initializer.accept(this) : null;
        this.movePast(t.firstSemicolonToken);
        var o = t.condition ? t.condition.accept(this) : null;
        this.movePast(t.secondSemicolonToken);
        var s = t.incrementor ? t.incrementor.accept(this) : null;
        this.movePast(t.closeParenToken);
        var a = t.statement.accept(this),
          l = new e.ForStatement(r, i, o, s, a);
        return this.setSpan(l, n, t), l;
      }),
      (t.prototype.visitForInStatement = function (t) {
        var n = this.position;
        this.movePast(t.forKeyword), this.movePast(t.openParenToken);
        var r = t.variableDeclaration
            ? t.variableDeclaration.accept(this)
            : null,
          i = t.left ? t.left.accept(this) : null;
        this.movePast(t.inKeyword);
        var o = t.expression.accept(this);
        this.movePast(t.closeParenToken);
        var s = t.statement.accept(this),
          a = new e.ForInStatement(r, i, o, s);
        return this.setSpan(a, n, t), a;
      }),
      (t.prototype.visitWhileStatement = function (t) {
        var n = this.position;
        this.moveTo(t, t.condition);
        var r = t.condition.accept(this);
        this.movePast(t.closeParenToken);
        var i = t.statement.accept(this),
          o = new e.WhileStatement(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitWithStatement = function (t) {
        var n = this.position;
        this.moveTo(t, t.condition);
        var r = t.condition.accept(this);
        this.movePast(t.closeParenToken);
        var i = t.statement.accept(this),
          o = new e.WithStatement(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitCastExpression = function (t) {
        var n = this.position;
        this.movePast(t.lessThanToken);
        var r = this.visitType(t.type);
        this.movePast(t.greaterThanToken);
        var i = t.expression.accept(this),
          o = new e.CastExpression(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitObjectLiteralExpression = function (t) {
        {
          var n = this.position;
          this.position + t.openBraceToken.leadingTriviaWidth();
        }
        this.movePast(t.openBraceToken);
        {
          var r = this.visitSeparatedSyntaxList(t.propertyAssignments);
          this.position + t.closeBraceToken.leadingTriviaWidth();
        }
        this.movePast(t.closeBraceToken);
        var i = new e.ObjectLiteralExpression(r);
        return this.setCommentsAndSpan(i, n, t), i;
      }),
      (t.prototype.visitSimplePropertyAssignment = function (t) {
        var n = this.position,
          r = this.convertTokenLeadingComments(t.firstToken(), n),
          i = this.convertNodeTrailingComments(t, t.lastToken(), n),
          o = t.propertyName.accept(this),
          s = this.convertTokenTrailingComments(
            t.colonToken,
            this.position +
              t.colonToken.leadingTriviaWidth() +
              t.colonToken.width()
          );
        this.movePast(t.colonToken);
        var a = t.expression.accept(this);
        a.setPreComments(this.mergeComments(s, a.preComments()));
        var l = new e.SimplePropertyAssignment(o, a);
        return (
          this.setSpan(l, n, t), l.setPreComments(r), l.setPostComments(i), l
        );
      }),
      (t.prototype.visitFunctionPropertyAssignment = function (t) {
        var n = this.position,
          r = t.propertyName.accept(this),
          i = this.visitCallSignature(t.callSignature),
          o = this.visitBlock(t.block),
          s = new e.FunctionPropertyAssignment(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitFunctionExpression = function (t) {
        var n = this.position;
        this.movePast(t.functionKeyword);
        var r =
            null === t.identifier ? null : this.visitIdentifier(t.identifier),
          i = this.visitCallSignature(t.callSignature),
          o = t.block ? t.block.accept(this) : null,
          s = new e.FunctionExpression(r, i, o);
        return this.setCommentsAndSpan(s, n, t), s;
      }),
      (t.prototype.visitEmptyStatement = function (t) {
        var n = this.position;
        this.movePast(t.semicolonToken);
        var r = new e.EmptyStatement();
        return this.setSpan(r, n, t), r;
      }),
      (t.prototype.visitTryStatement = function (t) {
        var n = this.position;
        this.movePast(t.tryKeyword);
        var r = t.block.accept(this),
          i = null;
        null !== t.catchClause && (i = t.catchClause.accept(this));
        var o = null;
        null !== t.finallyClause && (o = t.finallyClause.accept(this));
        var s = new e.TryStatement(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitCatchClause = function (t) {
        var n = this.position;
        this.movePast(t.catchKeyword), this.movePast(t.openParenToken);
        var r = this.visitIdentifier(t.identifier),
          i = this.visitTypeAnnotation(t.typeAnnotation);
        this.movePast(t.closeParenToken);
        var o = t.block.accept(this),
          s = new e.CatchClause(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitFinallyClause = function (t) {
        var n = this.position;
        this.movePast(t.finallyKeyword);
        var r = t.block.accept(this),
          i = new e.FinallyClause(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitLabeledStatement = function (t) {
        var n = this.position,
          r = this.visitIdentifier(t.identifier);
        this.movePast(t.colonToken);
        var i = t.statement.accept(this),
          o = new e.LabeledStatement(r, i);
        return this.setSpan(o, n, t), o;
      }),
      (t.prototype.visitDoStatement = function (t) {
        var n = this.position;
        this.movePast(t.doKeyword);
        var r = t.statement.accept(this),
          i = this.createTokenSpan(this.position, t.whileKeyword);
        this.movePast(t.whileKeyword), this.movePast(t.openParenToken);
        var o = t.condition.accept(this);
        this.movePast(t.closeParenToken), this.movePast(t.semicolonToken);
        var s = new e.DoStatement(r, i, o);
        return this.setSpan(s, n, t), s;
      }),
      (t.prototype.visitTypeOfExpression = function (t) {
        var n = this.position;
        this.movePast(t.typeOfKeyword);
        var r = t.expression.accept(this),
          i = new e.TypeOfExpression(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitDeleteExpression = function (t) {
        var n = this.position;
        this.movePast(t.deleteKeyword);
        var r = t.expression.accept(this),
          i = new e.DeleteExpression(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitVoidExpression = function (t) {
        var n = this.position;
        this.movePast(t.voidKeyword);
        var r = t.expression.accept(this),
          i = new e.VoidExpression(r);
        return this.setSpan(i, n, t), i;
      }),
      (t.prototype.visitDebuggerStatement = function (t) {
        var n = this.position;
        this.movePast(t.debuggerKeyword), this.movePast(t.semicolonToken);
        var r = new e.DebuggerStatement();
        return this.setSpan(r, n, t), r;
      }),
      t
    );
  })();
  e.SyntaxTreeToAstVisitor = r;
  var i = (function (r) {
    function i() {
      r.apply(this, arguments);
    }
    return (
      __extends(i, r),
      (i.prototype.applyDelta = function (r, i) {
        if (0 !== i) {
          var o = function (e) {
            switch (
              (t(e, i), n(e.preComments(), i), n(e.postComments(), i), e.kind())
            ) {
              case 146:
                t(e.closeBraceToken, i);
                break;
              case 226:
                t(e.closeParenToken, i);
                break;
              case 130:
                t(e.endingToken, i);
                break;
              case 131:
                t(e.closeBraceToken, i);
                break;
              case 161:
                t(e.whileKeyword, i);
                break;
              case 151:
                t(e.closeParenToken, i);
            }
          };
          e.getAstWalkerFactory().simpleWalk(r, o);
        }
      }),
      (i.prototype.setSpanExplicit = function (e, t, n) {
        if (-1 !== e._start) {
          var i = t - e._start;
          this.applyDelta(e, i), (e._end = n);
        } else r.prototype.setSpanExplicit.call(this, e, t, n);
      }),
      (i.prototype.getAndMovePastAST = function (e) {
        if (null !== this.previousTokenTrailingComments) return null;
        var t = e._ast;
        if (!t) return null;
        var n = this.position;
        return this.movePast(e), this.setSpan(t, n, e), t;
      }),
      (i.prototype.setAST = function (e, t) {
        e._ast = t;
      }),
      (i.prototype.visitSyntaxList = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitSyntaxList.call(this, e)),
            e.childCount() > 0 && this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitSeparatedSyntaxList = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitSeparatedSyntaxList.call(this, e)),
            e.childCount() > 0 && this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitToken = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t || ((t = r.prototype.visitToken.call(this, e)), this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitClassDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitClassDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitInterfaceDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitInterfaceDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitHeritageClause = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitHeritageClause.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitModuleDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitModuleDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitFunctionDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitFunctionDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitImportDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitImportDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitExportAssignment = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitExportAssignment.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitPrefixUnaryExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitPrefixUnaryExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitArrayLiteralExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitArrayLiteralExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitOmittedExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitOmittedExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitParenthesizedExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitParenthesizedExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitSimpleArrowFunctionExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitSimpleArrowFunctionExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitParenthesizedArrowFunctionExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitParenthesizedArrowFunctionExpression.call(
              this,
              e
            )),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitQualifiedName = function (e) {
        var t = this.getAndMovePastAST(e);
        if (!t) {
          var t = r.prototype.visitQualifiedName.call(this, e);
          this.setAST(e, t);
        }
        return t;
      }),
      (i.prototype.visitConstructorType = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitConstructorType.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitFunctionType = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitFunctionType.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitObjectType = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitObjectType.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitArrayType = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitArrayType.call(this, e)), this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitGenericType = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitGenericType.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitBlock = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t || ((t = r.prototype.visitBlock.call(this, e)), this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitParameter = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitParameter.call(this, e)), this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitMemberAccessExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitMemberAccessExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitPostfixUnaryExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitPostfixUnaryExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitElementAccessExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitElementAccessExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitInvocationExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitInvocationExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitBinaryExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitBinaryExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitConditionalExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitConditionalExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitConstructSignature = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitConstructSignature.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitMethodSignature = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitMethodSignature.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitIndexSignature = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitIndexSignature.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitPropertySignature = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitPropertySignature.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitCallSignature = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitCallSignature.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitTypeParameter = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitTypeParameter.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitIfStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitIfStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitExpressionStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitExpressionStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitConstructorDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitConstructorDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitMemberFunctionDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitMemberFunctionDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitGetAccessor = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitGetAccessor.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitSetAccessor = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitSetAccessor.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitMemberVariableDeclaration = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitMemberVariableDeclaration.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitThrowStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitThrowStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitReturnStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitReturnStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitObjectCreationExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitObjectCreationExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitSwitchStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitSwitchStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitCaseSwitchClause = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitCaseSwitchClause.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitDefaultSwitchClause = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitDefaultSwitchClause.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitBreakStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitBreakStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitContinueStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitContinueStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitForStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitForStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitForInStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitForInStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitWhileStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitWhileStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitWithStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitWithStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitCastExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitCastExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitObjectLiteralExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitObjectLiteralExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitSimplePropertyAssignment = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitSimplePropertyAssignment.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitFunctionPropertyAssignment = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitFunctionPropertyAssignment.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitFunctionExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitFunctionExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitEmptyStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitEmptyStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitTryStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitTryStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitCatchClause = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitCatchClause.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitLabeledStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitLabeledStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitDoStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitDoStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitTypeOfExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitTypeOfExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitDeleteExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitDeleteExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitVoidExpression = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitVoidExpression.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      (i.prototype.visitDebuggerStatement = function (e) {
        var t = this.getAndMovePastAST(e);
        return (
          t ||
            ((t = r.prototype.visitDebuggerStatement.call(this, e)),
            this.setAST(e, t)),
          t
        );
      }),
      i
    );
  })(r);
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  function t(e, t) {
    return o(e, t, !1);
  }
  function n(e, t) {
    return o(e, t, !0);
  }
  function r(e, t) {
    return s(e, t, !1);
  }
  function i(e, t) {
    return s(e, t, !0);
  }
  function o(e, t, n) {
    return e === t
      ? !0
      : null !== e &&
          null !== t &&
          e.kind() === t.kind() &&
          e.structuralEquals(t, n);
  }
  function s(e, t, n) {
    return e === t ? !0 : null !== e && null !== t && e.structuralEquals(t, n);
  }
  function a(r, i, o) {
    return e.ArrayUtilities.sequenceEquals(r, i, o ? n : t);
  }
  function l(t, n, o) {
    return e.ArrayUtilities.sequenceEquals(t, n, o ? i : r);
  }
  var c = (function () {
    function e(e, t) {
      (this._start = e), (this._end = t);
    }
    return (
      (e.prototype.start = function () {
        return this._start;
      }),
      (e.prototype.end = function () {
        return this._end;
      }),
      e
    );
  })();
  e.ASTSpan = c;
  var u = 0;
  (e.structuralEqualsNotIncludingPosition = t),
    (e.structuralEqualsIncludingPosition = n);
  var p = (function () {
    function t() {
      (this.parent = null),
        (this._start = -1),
        (this._end = -1),
        (this._trailingTriviaWidth = 0),
        (this._astID = u++),
        (this._preComments = null),
        (this._postComments = null);
    }
    return (
      (t.prototype.syntaxID = function () {
        return this._astID;
      }),
      (t.prototype.start = function () {
        return this._start;
      }),
      (t.prototype.end = function () {
        return this._end;
      }),
      (t.prototype.trailingTriviaWidth = function () {
        return this._trailingTriviaWidth;
      }),
      (t.prototype.fileName = function () {
        return this.parent.fileName();
      }),
      (t.prototype.kind = function () {
        throw e.Errors.abstract();
      }),
      (t.prototype.preComments = function () {
        return this._preComments;
      }),
      (t.prototype.postComments = function () {
        return this._postComments;
      }),
      (t.prototype.setPreComments = function (e) {
        e && e.length
          ? (this._preComments = e)
          : this._preComments && (this._preComments = null);
      }),
      (t.prototype.setPostComments = function (e) {
        e && e.length
          ? (this._postComments = e)
          : this._postComments && (this._postComments = null);
      }),
      (t.prototype.width = function () {
        return this.end() - this.start();
      }),
      (t.prototype.structuralEquals = function (e, t) {
        return !t || (this.start() === e.start() && this.end() === e.end())
          ? l(this.preComments(), e.preComments(), t) &&
              l(this.postComments(), e.postComments(), t)
          : !1;
      }),
      (t.prototype.isExpression = function () {
        return !1;
      }),
      t
    );
  })();
  e.AST = p;
  var h = (function (t) {
    function n(e, n) {
      t.call(this), (this._fileName = e), (this.members = n);
      for (var r = 0, i = n.length; i > r; r++) n[r].parent = this;
    }
    return (
      __extends(n, t),
      (n.prototype.childCount = function () {
        return this.members.length;
      }),
      (n.prototype.childAt = function (e) {
        return this.members[e];
      }),
      (n.prototype.fileName = function () {
        return this._fileName;
      }),
      (n.prototype.kind = function () {
        return 1;
      }),
      (n.prototype.firstOrDefault = function (t) {
        return e.ArrayUtilities.firstOrDefault(this.members, t);
      }),
      (n.prototype.lastOrDefault = function (t) {
        return e.ArrayUtilities.lastOrDefault(this.members, t);
      }),
      (n.prototype.any = function (t) {
        return e.ArrayUtilities.any(this.members, t);
      }),
      (n.prototype.structuralEquals = function (e, n) {
        return (
          t.prototype.structuralEquals.call(this, e, n) &&
          a(this.members, e.members, n)
        );
      }),
      n
    );
  })(p);
  e.ISyntaxList2 = h;
  var d = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this._fileName = t),
        (this.members = n),
        (this._separatorCount = r);
      for (var i = 0, o = n.length; o > i; i++) n[i].parent = this;
    }
    return (
      __extends(t, e),
      (t.prototype.nonSeparatorCount = function () {
        return this.members.length;
      }),
      (t.prototype.separatorCount = function () {
        return this._separatorCount;
      }),
      (t.prototype.nonSeparatorAt = function (e) {
        return this.members[e];
      }),
      (t.prototype.nonSeparatorIndexOf = function (e) {
        for (var t = 0, n = this.nonSeparatorCount(); n > t; t++)
          if (this.nonSeparatorAt(t) === e) return t;
        return -1;
      }),
      (t.prototype.fileName = function () {
        return this._fileName;
      }),
      (t.prototype.kind = function () {
        return 2;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          a(this.members, t.members, n)
        );
      }),
      t
    );
  })(p);
  e.ISeparatedSyntaxList2 = d;
  var m = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.moduleElements = t),
        (this.endOfFileTokenLeadingComments = n),
        (this._fileName = r),
        t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.fileName = function () {
        return this._fileName;
      }),
      (t.prototype.kind = function () {
        return 120;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.moduleElements, t.moduleElements, n)
        );
      }),
      t
    );
  })(p);
  e.SourceUnit = m;
  var f = (function (t) {
    function n(e) {
      t.call(this), (this._text = e), (this._valueText = null);
    }
    return (
      __extends(n, t),
      (n.prototype.text = function () {
        return this._text;
      }),
      (n.prototype.valueText = function () {
        if (!this._valueText) {
          var t = this._text;
          this._valueText =
            "__proto__" === t ? "#__proto__" : e.Syntax.massageEscapes(t);
        }
        return this._valueText;
      }),
      (n.prototype.kind = function () {
        return 11;
      }),
      (n.prototype.structuralEquals = function (e, n) {
        return (
          t.prototype.structuralEquals.call(this, e, n) &&
          this._text === e._text
        );
      }),
      (n.prototype.isExpression = function () {
        return !0;
      }),
      n
    );
  })(p);
  e.Identifier = f;
  var g = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this._nodeType = t),
        (this._text = n),
        (this._valueText = r);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.kind = function () {
        return this._nodeType;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.LiteralExpression = g;
  var v = (function (e) {
    function t(t, n) {
      e.call(this), (this._text = t), (this._valueText = n);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.kind = function () {
        return 35;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ThisExpression = v;
  var y = (function (e) {
    function t(t, n) {
      e.call(this), (this._text = t), (this._valueText = n);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.kind = function () {
        return 50;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.SuperExpression = y;
  var b = (function (e) {
    function t(t, n, r) {
      e.call(this), (this._value = t), (this._text = n), (this._valueText = r);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.value = function () {
        return this._value;
      }),
      (t.prototype.kind = function () {
        return 13;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          (this._value === t._value ||
            (isNaN(this._value) && isNaN(t._value))) &&
          this._text === t._text
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.NumericLiteral = b;
  var _ = (function (e) {
    function t(t, n) {
      e.call(this), (this._text = t), (this._valueText = n);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.kind = function () {
        return 12;
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.RegularExpressionLiteral = _;
  var w = (function (e) {
    function t(t, n) {
      e.call(this),
        (this._text = t),
        (this._valueText = n),
        (this._valueText = "__proto__" === n ? "#__proto__" : n);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.kind = function () {
        return 14;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          this._text === t._text
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.StringLiteral = w;
  var S = (function (e) {
    function t(t) {
      e.call(this), (this.type = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 244;
      }),
      t
    );
  })(p);
  e.TypeAnnotation = S;
  var T = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this._nodeType = t),
        (this._text = n),
        (this._valueText = r);
    }
    return (
      __extends(t, e),
      (t.prototype.text = function () {
        return this._text;
      }),
      (t.prototype.valueText = function () {
        return this._valueText;
      }),
      (t.prototype.kind = function () {
        return this._nodeType;
      }),
      t
    );
  })(p);
  e.BuiltInType = T;
  var k = (function (e) {
    function t(t) {
      e.call(this), (this.stringLiteral = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 245;
      }),
      t
    );
  })(p);
  e.ExternalModuleReference = k;
  var x = (function (e) {
    function t(t) {
      e.call(this), (this.moduleName = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 246;
      }),
      t
    );
  })(p);
  e.ModuleNameModuleReference = x;
  var C = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.modifiers = t),
        (this.identifier = n),
        (this.moduleReference = r),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 133;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.moduleReference, t.moduleReference, n)
        );
      }),
      t
    );
  })(p);
  e.ImportDeclaration = C;
  var E = (function (e) {
    function t(t) {
      e.call(this), (this.identifier = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 134;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n)
        );
      }),
      t
    );
  })(p);
  e.ExportAssignment = E;
  var A = (function (e) {
    function t(t) {
      e.call(this), (this.typeParameters = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 229;
      }),
      t
    );
  })(p);
  e.TypeParameterList = A;
  var L = (function (e) {
    function t(t, n, r, i, o, s) {
      e.call(this),
        (this.modifiers = t),
        (this.identifier = n),
        (this.typeParameterList = r),
        (this.heritageClauses = i),
        (this.classElements = o),
        (this.closeBraceToken = s),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this),
        o && (o.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 131;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.classElements, t.classElements, n) &&
          o(this.typeParameterList, t.typeParameterList, n) &&
          o(this.heritageClauses, t.heritageClauses, n)
        );
      }),
      t
    );
  })(p);
  e.ClassDeclaration = L;
  var I = (function (e) {
    function t(t, n, r, i, o) {
      e.call(this),
        (this.modifiers = t),
        (this.identifier = n),
        (this.typeParameterList = r),
        (this.heritageClauses = i),
        (this.body = o),
        n && (n.parent = this),
        r && (r.parent = this),
        o && (o.parent = this),
        i && (i.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 128;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.body, t.body, n) &&
          o(this.typeParameterList, t.typeParameterList, n) &&
          o(this.heritageClauses, t.heritageClauses, n)
        );
      }),
      t
    );
  })(p);
  e.InterfaceDeclaration = I;
  var D = (function (e) {
    function t(t, n) {
      e.call(this),
        (this._nodeType = t),
        (this.typeNames = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return this._nodeType;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.typeNames, t.typeNames, n)
        );
      }),
      t
    );
  })(p);
  e.HeritageClause = D;
  var P = (function (e) {
    function t(t, n, r, i, o) {
      e.call(this),
        (this.modifiers = t),
        (this.name = n),
        (this.stringLiteral = r),
        (this.moduleElements = i),
        (this.endingToken = o),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 130;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.name, t.name, n) &&
          o(this.moduleElements, t.moduleElements, n)
        );
      }),
      t
    );
  })(p);
  e.ModuleDeclaration = P;
  var N = (function (e) {
    function t(t, n, r, i) {
      e.call(this),
        (this.modifiers = t),
        (this.identifier = n),
        (this.callSignature = r),
        (this.block = i),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 129;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.block, t.block, n) &&
          o(this.callSignature, t.callSignature, n)
        );
      }),
      t
    );
  })(p);
  e.FunctionDeclaration = N;
  var M = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.modifiers = t),
        (this.declaration = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 148;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.declaration, t.declaration, n)
        );
      }),
      t
    );
  })(p);
  e.VariableStatement = M;
  var R = (function (e) {
    function t(t) {
      e.call(this), (this.declarators = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 224;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.declarators, t.declarators, n)
        );
      }),
      t
    );
  })(p);
  e.VariableDeclaration = R;
  var O = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.propertyName = t),
        (this.typeAnnotation = n),
        (this.equalsValueClause = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 225;
      }),
      t
    );
  })(p);
  e.VariableDeclarator = O;
  var F = (function (e) {
    function t(t) {
      e.call(this), (this.value = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 232;
      }),
      t
    );
  })(p);
  e.EqualsValueClause = F;
  var V = (function (e) {
    function t(t, n) {
      e.call(this),
        (this._nodeType = t),
        (this.operand = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return this._nodeType;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.operand, t.operand, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.PrefixUnaryExpression = V;
  var G = (function (e) {
    function t(t) {
      e.call(this), (this.expressions = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 214;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expressions, t.expressions, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ArrayLiteralExpression = G;
  var B = (function (e) {
    function t() {
      e.apply(this, arguments);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 223;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.OmittedExpression = B;
  var W = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.openParenTrailingComments = t),
        (this.expression = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 217;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ParenthesizedExpression = W;
  var z = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.identifier = t),
        (this.block = n),
        (this.expression = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 219;
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.SimpleArrowFunctionExpression = z;
  var H = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.callSignature = t),
        (this.block = n),
        (this.expression = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 218;
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ParenthesizedArrowFunctionExpression = H;
  var $ = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.left = t),
        (this.right = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 121;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.left, t.left, n) &&
          o(this.right, t.right, n)
        );
      }),
      t
    );
  })(p);
  e.QualifiedName = $;
  var U = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.openParenTrailingComments = t),
        (this.parameters = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 227;
      }),
      t
    );
  })(p);
  e.ParameterList = U;
  var q = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.typeParameterList = t),
        (this.parameterList = n),
        (this.type = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 125;
      }),
      t
    );
  })(p);
  e.ConstructorType = q;
  var j = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.typeParameterList = t),
        (this.parameterList = n),
        (this.type = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 123;
      }),
      t
    );
  })(p);
  e.FunctionType = j;
  var K = (function (e) {
    function t(t) {
      e.call(this), (this.typeMembers = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 122;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.typeMembers, t.typeMembers, n)
        );
      }),
      t
    );
  })(p);
  e.ObjectType = K;
  var Y = (function (e) {
    function t(t) {
      e.call(this), (this.type = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 124;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.type, t.type, n)
        );
      }),
      t
    );
  })(p);
  e.ArrayType = Y;
  var X = (function (e) {
    function t(t) {
      e.call(this), (this.typeArguments = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 228;
      }),
      t
    );
  })(p);
  e.TypeArgumentList = X;
  var J = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.name = t),
        (this.typeArgumentList = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 126;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.name, t.name, n) &&
          o(this.typeArgumentList, t.typeArgumentList, n)
        );
      }),
      t
    );
  })(p);
  e.GenericType = J;
  var Q = (function (e) {
    function t(t) {
      e.call(this), (this.name = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 127;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.name, t.name, n)
        );
      }),
      t
    );
  })(p);
  e.TypeQuery = Q;
  var Z = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.statements = t),
        (this.closeBraceLeadingComments = n),
        (this.closeBraceToken = r),
        t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 146;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.statements, t.statements, n)
        );
      }),
      t
    );
  })(p);
  e.Block = Z;
  var et = (function (e) {
    function t(t, n, r, i, o, s) {
      e.call(this),
        (this.dotDotDotToken = t),
        (this.modifiers = n),
        (this.identifier = r),
        (this.questionToken = i),
        (this.typeAnnotation = o),
        (this.equalsValueClause = s),
        r && (r.parent = this),
        o && (o.parent = this),
        s && (s.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 242;
      }),
      t
    );
  })(p);
  e.Parameter = et;
  var tt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.expression = t),
        (this.name = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 212;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n) &&
          o(this.name, t.name, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.MemberAccessExpression = tt;
  var nt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this._nodeType = t),
        (this.operand = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return this._nodeType;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.operand, t.operand, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.PostfixUnaryExpression = nt;
  var rt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.expression = t),
        (this.argumentExpression = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 221;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n) &&
          o(this.argumentExpression, t.argumentExpression, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ElementAccessExpression = rt;
  var it = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.expression = t),
        (this.argumentList = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 213;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n) &&
          o(this.argumentList, t.argumentList, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.InvocationExpression = it;
  var ot = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.typeArgumentList = t),
        (this.closeParenToken = r),
        (this.arguments = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 226;
      }),
      t
    );
  })(p);
  e.ArgumentList = ot;
  var st = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this._nodeType = t),
        (this.left = n),
        (this.right = r),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return this._nodeType;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.left, t.left, n) &&
          o(this.right, t.right, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.BinaryExpression = st;
  var at = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.condition = t),
        (this.whenTrue = n),
        (this.whenFalse = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 186;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.condition, t.condition, n) &&
          o(this.whenTrue, t.whenTrue, n) &&
          o(this.whenFalse, t.whenFalse, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ConditionalExpression = at;
  var lt = (function (e) {
    function t(t) {
      e.call(this), (this.callSignature = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 143;
      }),
      t
    );
  })(p);
  e.ConstructSignature = lt;
  var ct = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.propertyName = t),
        (this.questionToken = n),
        (this.callSignature = r),
        t && (t.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 145;
      }),
      t
    );
  })(p);
  e.MethodSignature = ct;
  var ut = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.parameter = t),
        (this.typeAnnotation = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 144;
      }),
      t
    );
  })(p);
  e.IndexSignature = ut;
  var pt = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.propertyName = t),
        (this.questionToken = n),
        (this.typeAnnotation = r),
        t && (t.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 141;
      }),
      t
    );
  })(p);
  e.PropertySignature = pt;
  var ht = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.typeParameterList = t),
        (this.parameterList = n),
        (this.typeAnnotation = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 142;
      }),
      t
    );
  })(p);
  e.CallSignature = ht;
  var dt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.identifier = t),
        (this.constraint = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 238;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.constraint, t.constraint, n)
        );
      }),
      t
    );
  })(p);
  e.TypeParameter = dt;
  var mt = (function (e) {
    function t(t) {
      e.call(this), (this.type = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 239;
      }),
      t
    );
  })(p);
  e.Constraint = mt;
  var ft = (function (e) {
    function t(t) {
      e.call(this), (this.statement = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 235;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.statement, t.statement, n)
        );
      }),
      t
    );
  })(p);
  e.ElseClause = ft;
  var gt = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.condition = t),
        (this.statement = n),
        (this.elseClause = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 147;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.condition, t.condition, n) &&
          o(this.statement, t.statement, n) &&
          o(this.elseClause, t.elseClause, n)
        );
      }),
      t
    );
  })(p);
  e.IfStatement = gt;
  var vt = (function (e) {
    function t(t) {
      e.call(this), (this.expression = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 149;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      t
    );
  })(p);
  e.ExpressionStatement = vt;
  var yt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.callSignature = t),
        (this.block = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 137;
      }),
      t
    );
  })(p);
  e.ConstructorDeclaration = yt;
  var bt = (function (e) {
    function t(t, n, r, i) {
      e.call(this),
        (this.modifiers = t),
        (this.propertyName = n),
        (this.callSignature = r),
        (this.block = i),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 135;
      }),
      t
    );
  })(p);
  e.MemberFunctionDeclaration = bt;
  var _t = (function (e) {
    function t(t, n, r, i, o) {
      e.call(this),
        (this.modifiers = t),
        (this.propertyName = n),
        (this.parameterList = r),
        (this.typeAnnotation = i),
        (this.block = o),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this),
        o && (o.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 139;
      }),
      t
    );
  })(p);
  e.GetAccessor = _t;
  var wt = (function (e) {
    function t(t, n, r, i) {
      e.call(this),
        (this.modifiers = t),
        (this.propertyName = n),
        (this.parameterList = r),
        (this.block = i),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 140;
      }),
      t
    );
  })(p);
  e.SetAccessor = wt;
  var St = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.modifiers = t),
        (this.variableDeclarator = n),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 136;
      }),
      t
    );
  })(p);
  e.MemberVariableDeclaration = St;
  var Tt = (function (e) {
    function t(t) {
      e.call(this), (this.indexSignature = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 138;
      }),
      t
    );
  })(p);
  e.IndexMemberDeclaration = Tt;
  var kt = (function (e) {
    function t(t) {
      e.call(this), (this.expression = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 157;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      t
    );
  })(p);
  e.ThrowStatement = kt;
  var xt = (function (e) {
    function t(t) {
      e.call(this), (this.expression = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 150;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      t
    );
  })(p);
  e.ReturnStatement = xt;
  var Ct = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.expression = t),
        (this.argumentList = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 216;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n) &&
          o(this.argumentList, t.argumentList, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ObjectCreationExpression = Ct;
  var Et = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.expression = t),
        (this.closeParenToken = n),
        (this.switchClauses = r),
        t && (t.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 151;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.switchClauses, t.switchClauses, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      t
    );
  })(p);
  e.SwitchStatement = Et;
  var At = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.expression = t),
        (this.statements = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 233;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n) &&
          o(this.statements, t.statements, n)
        );
      }),
      t
    );
  })(p);
  e.CaseSwitchClause = At;
  var Lt = (function (e) {
    function t(t) {
      e.call(this), (this.statements = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 234;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.statements, t.statements, n)
        );
      }),
      t
    );
  })(p);
  e.DefaultSwitchClause = Lt;
  var It = (function (e) {
    function t(t) {
      e.call(this), (this.identifier = t);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 152;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      t
    );
  })(p);
  e.BreakStatement = It;
  var Dt = (function (e) {
    function t(t) {
      e.call(this), (this.identifier = t);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 153;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      t
    );
  })(p);
  e.ContinueStatement = Dt;
  var Pt = (function (e) {
    function t(t, n, r, i, o) {
      e.call(this),
        (this.variableDeclaration = t),
        (this.initializer = n),
        (this.condition = r),
        (this.incrementor = i),
        (this.statement = o),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this),
        o && (o.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 154;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.initializer, t.initializer, n) &&
          o(this.condition, t.condition, n) &&
          o(this.incrementor, t.incrementor, n) &&
          o(this.statement, t.statement, n)
        );
      }),
      t
    );
  })(p);
  e.ForStatement = Pt;
  var Nt = (function (e) {
    function t(t, n, r, i) {
      e.call(this),
        (this.variableDeclaration = t),
        (this.left = n),
        (this.expression = r),
        (this.statement = i),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this),
        i && (i.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 155;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.variableDeclaration, t.variableDeclaration, n) &&
          o(this.expression, t.expression, n) &&
          o(this.statement, t.statement, n)
        );
      }),
      t
    );
  })(p);
  e.ForInStatement = Nt;
  var Mt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.condition = t),
        (this.statement = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 158;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.condition, t.condition, n) &&
          o(this.statement, t.statement, n)
        );
      }),
      t
    );
  })(p);
  e.WhileStatement = Mt;
  var Rt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.condition = t),
        (this.statement = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 163;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.condition, t.condition, n) &&
          o(this.statement, t.statement, n)
        );
      }),
      t
    );
  })(p);
  e.WithStatement = Rt;
  var Ot = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.modifiers = t),
        (this.identifier = n),
        (this.enumElements = r),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 132;
      }),
      t
    );
  })(p);
  e.EnumDeclaration = Ot;
  var Ft = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.propertyName = t),
        (this.equalsValueClause = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 243;
      }),
      t
    );
  })(p);
  e.EnumElement = Ft;
  var Vt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.type = t),
        (this.expression = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 220;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.type, t.type, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.CastExpression = Vt;
  var Gt = (function (e) {
    function t(t) {
      e.call(this), (this.propertyAssignments = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 215;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.propertyAssignments, t.propertyAssignments, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.ObjectLiteralExpression = Gt;
  var Bt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.propertyName = t),
        (this.expression = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 240;
      }),
      t
    );
  })(p);
  e.SimplePropertyAssignment = Bt;
  var Wt = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.propertyName = t),
        (this.callSignature = n),
        (this.block = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 241;
      }),
      t
    );
  })(p);
  e.FunctionPropertyAssignment = Wt;
  var zt = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.identifier = t),
        (this.callSignature = n),
        (this.block = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 222;
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.FunctionExpression = zt;
  var Ht = (function (e) {
    function t() {
      e.apply(this, arguments);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 156;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return e.prototype.structuralEquals.call(this, t, n);
      }),
      t
    );
  })(p);
  e.EmptyStatement = Ht;
  var $t = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.block = t),
        (this.catchClause = n),
        (this.finallyClause = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 159;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.block, t.block, n) &&
          o(this.catchClause, t.catchClause, n) &&
          o(this.finallyClause, t.finallyClause, n)
        );
      }),
      t
    );
  })(p);
  e.TryStatement = $t;
  var Ut = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.identifier = t),
        (this.typeAnnotation = n),
        (this.block = r),
        t && (t.parent = this),
        n && (n.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 236;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.typeAnnotation, t.typeAnnotation, n) &&
          o(this.block, t.block, n)
        );
      }),
      t
    );
  })(p);
  e.CatchClause = Ut;
  var qt = (function (e) {
    function t(t) {
      e.call(this), (this.block = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 237;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.block, t.block, n)
        );
      }),
      t
    );
  })(p);
  e.FinallyClause = qt;
  var jt = (function (e) {
    function t(t, n) {
      e.call(this),
        (this.identifier = t),
        (this.statement = n),
        t && (t.parent = this),
        n && (n.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 160;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.identifier, t.identifier, n) &&
          o(this.statement, t.statement, n)
        );
      }),
      t
    );
  })(p);
  e.LabeledStatement = jt;
  var Kt = (function (e) {
    function t(t, n, r) {
      e.call(this),
        (this.statement = t),
        (this.whileKeyword = n),
        (this.condition = r),
        t && (t.parent = this),
        r && (r.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 161;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.statement, t.statement, n) &&
          o(this.condition, t.condition, n)
        );
      }),
      t
    );
  })(p);
  e.DoStatement = Kt;
  var Yt = (function (e) {
    function t(t) {
      e.call(this), (this.expression = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 171;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.TypeOfExpression = Yt;
  var Xt = (function (e) {
    function t(t) {
      e.call(this), (this.expression = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 170;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.DeleteExpression = Xt;
  var Jt = (function (e) {
    function t(t) {
      e.call(this), (this.expression = t), t && (t.parent = this);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 172;
      }),
      (t.prototype.structuralEquals = function (t, n) {
        return (
          e.prototype.structuralEquals.call(this, t, n) &&
          o(this.expression, t.expression, n)
        );
      }),
      (t.prototype.isExpression = function () {
        return !0;
      }),
      t
    );
  })(p);
  e.VoidExpression = Jt;
  var Qt = (function (e) {
    function t() {
      e.apply(this, arguments);
    }
    return (
      __extends(t, e),
      (t.prototype.kind = function () {
        return 162;
      }),
      t
    );
  })(p);
  e.DebuggerStatement = Qt;
  var Zt = (function () {
    function e(e, t, n, r) {
      (this._trivia = e),
        (this.endsLine = t),
        (this._start = n),
        (this._end = r);
    }
    return (
      (e.prototype.start = function () {
        return this._start;
      }),
      (e.prototype.end = function () {
        return this._end;
      }),
      (e.prototype.fullText = function () {
        return this._trivia.fullText();
      }),
      (e.prototype.kind = function () {
        return this._trivia.kind();
      }),
      (e.prototype.structuralEquals = function (e, t) {
        return !t || (this.start() === e.start() && this.end() === e.end())
          ? this._trivia.fullText() === e._trivia.fullText() &&
              this.endsLine === e.endsLine
          : !1;
      }),
      e
    );
  })();
  e.Comment = Zt;
})(TypeScript || (TypeScript = {})),
  String.prototype.trim ||
    (String.prototype.trim = function () {
      return this.replace(/^\s+|\s+$/g, "");
    }),
  Array.prototype.indexOf ||
    (Array.prototype.indexOf = function (e) {
      "use strict";
      if (null == this) throw new TypeError();
      var t = Object(this),
        n = t.length >>> 0;
      if (0 === n) return -1;
      var r = 0;
      if (
        (arguments.length > 0 &&
          ((r = Number(arguments[1])),
          r != r
            ? (r = 0)
            : 0 != r &&
              1 / 0 != r &&
              r != -1 / 0 &&
              (r = (r > 0 || -1) * Math.floor(Math.abs(r)))),
        r >= n)
      )
        return -1;
      for (var i = r >= 0 ? r : Math.max(n - Math.abs(r), 0); n > i; i++)
        if (i in t && t[i] === e) return i;
      return -1;
    }),
  Array.prototype.filter ||
    (Array.prototype.filter = function (e, t) {
      "use strict";
      if (null == this) throw new TypeError();
      var n = Object(this),
        r = n.length >>> 0;
      if ("function" != typeof e) throw new TypeError();
      for (var i = [], o = 0; r > o; o++)
        if (o in n) {
          var s = n[o];
          e.call(t, s, o, n) && i.push(s);
        }
      return i;
    }),
  Array.prototype.map ||
    (Array.prototype.map = function (e, t) {
      var n,
        r,
        i = void 0;
      if (null == this) throw new TypeError(" this is null or not defined");
      var o = Object(this),
        s = o.length >>> 0;
      if ("[object Function]" != {}.toString.call(e))
        throw new TypeError(e + " is not a function");
      for (t && (i = t), n = new Array(s), r = 0; s > r; ) {
        var a, l;
        r in o && ((a = o[r]), (l = e.call(i, a, r, o)), (n[r] = l)), r++;
      }
      return n;
    }),
  Array.prototype.reduce ||
    (Array.prototype.reduce = function (e) {
      if (null === this || void 0 === this)
        throw new TypeError("Object is null or undefined");
      var t,
        n = 0,
        r = this.length >> 0;
      if ("function" != typeof e)
        throw new TypeError("First argument is not callable");
      if (arguments.length < 2) {
        if (0 === r)
          throw new TypeError("Array length is 0 and no second argument");
        (t = this[0]), (n = 1);
      } else t = arguments[1];
      for (; r > n; )
        n in this && (t = e.call(void 0, t, this[n], n, this)), ++n;
      return t;
    }),
  Array.prototype.forEach ||
    (Array.prototype.forEach = function (e, t) {
      var n, r;
      if (null == this) throw new TypeError(" this is null or not defined");
      var i = Object(this),
        o = i.length >>> 0;
      if ("[object Function]" != {}.toString.call(e))
        throw new TypeError(e + " is not a function");
      for (n = t ? t : void 0, r = 0; o > r; ) {
        var s;
        r in i && ((s = i[r]), e.call(n, s, r, i)), r++;
      }
    }),
  Date.now ||
    (Date.now = function () {
      return new Date().getTime();
    }),
  Array.prototype.some ||
    (Array.prototype.some = function (e) {
      "use strict";
      if (null == this) throw new TypeError();
      var t = Object(this),
        n = t.length >>> 0;
      if ("function" != typeof e) throw new TypeError();
      for (var r = arguments[1], i = 0; n > i; i++) {
        var o = i.toString();
        if (o in t && e.call(r, t[i], i, t)) return !0;
      }
      return !1;
    });
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (e) {
      (e[(e.Start = 0)] = "Start"),
        (e[(e.InMultiLineCommentTrivia = 1)] = "InMultiLineCommentTrivia"),
        (e[(e.InSingleQuoteStringLiteral = 2)] = "InSingleQuoteStringLiteral"),
        (e[(e.InDoubleQuoteStringLiteral = 3)] = "InDoubleQuoteStringLiteral");
    })(t.EndOfLineState || (t.EndOfLineState = {}));
    t.EndOfLineState;
    !(function (e) {
      (e[(e.Punctuation = 0)] = "Punctuation"),
        (e[(e.Keyword = 1)] = "Keyword"),
        (e[(e.Operator = 2)] = "Operator"),
        (e[(e.Comment = 3)] = "Comment"),
        (e[(e.Whitespace = 4)] = "Whitespace"),
        (e[(e.Identifier = 5)] = "Identifier"),
        (e[(e.NumberLiteral = 6)] = "NumberLiteral"),
        (e[(e.StringLiteral = 7)] = "StringLiteral"),
        (e[(e.RegExpLiteral = 8)] = "RegExpLiteral");
    })(t.TokenClass || (t.TokenClass = {}));
    var n = (t.TokenClass, []);
    (n[11] = !0),
      (n[14] = !0),
      (n[13] = !0),
      (n[12] = !0),
      (n[35] = !0),
      (n[93] = !0),
      (n[94] = !0),
      (n[73] = !0),
      (n[75] = !0),
      (n[71] = !0),
      (n[37] = !0),
      (n[24] = !0);
    var r = (function () {
      function t(t) {
        (this.host = t),
          (this.characterWindow = e.ArrayUtilities.createArray(2048, 0)),
          (this.diagnostics = []);
      }
      return (
        (t.prototype.getClassificationsForLine = function (t, r) {
          var o = 0;
          0 !== r &&
            (3 === r
              ? (t = '"\\\n' + t)
              : 2 === r
              ? (t = "'\\\n" + t)
              : 1 === r && (t = "/*\n" + t),
            (o = 3));
          var s = new i();
          this.scanner = new e.Scanner(
            "",
            e.SimpleText.fromString(t),
            1,
            this.characterWindow
          );
          for (var a = 0; this.scanner.absoluteIndex() < t.length; ) {
            this.diagnostics.length = 0;
            var l = this.scanner.scan(this.diagnostics, !n[a]);
            (a = l.tokenKind), this.processToken(t, o, l, s);
          }
          return s;
        }),
        (t.prototype.processToken = function (t, n, r, i) {
          if (
            (this.processTriviaList(t, n, r.leadingTrivia(), i),
            this.addResult(t, n, i, r.width(), r.tokenKind),
            this.processTriviaList(t, n, r.trailingTrivia(), i),
            this.scanner.absoluteIndex() >= t.length)
          ) {
            if (
              this.diagnostics.length > 0 &&
              this.diagnostics[this.diagnostics.length - 1].diagnosticKey() ===
                e.DiagnosticCode.AsteriskSlash_expected
            )
              return (i.finalLexState = 1), void 0;
            if (14 === r.tokenKind) {
              var o = r.text();
              if (o.length > 0 && 92 === o.charCodeAt(o.length - 1)) {
                var s = o.charCodeAt(0);
                return (i.finalLexState = 34 === s ? 3 : 2), void 0;
              }
            }
          }
        }),
        (t.prototype.processTriviaList = function (e, t, n, r) {
          for (var i = 0, o = n.count(); o > i; i++) {
            var s = n.syntaxTriviaAt(i);
            this.addResult(e, t, r, s.fullWidth(), s.kind());
          }
        }),
        (t.prototype.addResult = function (e, t, n, r, i) {
          r > 0 &&
            (0 === n.entries.length && (r -= t),
            n.entries.push(new o(r, this.classFromKind(i))));
        }),
        (t.prototype.classFromKind = function (t) {
          if (e.SyntaxFacts.isAnyKeyword(t)) return 1;
          if (
            e.SyntaxFacts.isBinaryExpressionOperatorToken(t) ||
            e.SyntaxFacts.isPrefixUnaryExpressionOperatorToken(t)
          )
            return 2;
          if (e.SyntaxFacts.isAnyPunctuation(t)) return 0;
          switch (t) {
            case 4:
              return 4;
            case 6:
            case 7:
              return 3;
            case 13:
              return 6;
            case 14:
              return 7;
            case 12:
              return 8;
            case 11:
            default:
              return 5;
          }
        }),
        t
      );
    })();
    t.Classifier = r;
    var i = (function () {
      function e() {
        (this.finalLexState = 0), (this.entries = []);
      }
      return e;
    })();
    t.ClassificationResult = i;
    var o = (function () {
      function e(e, t) {
        (this.length = e), (this.classification = t);
      }
      return e;
    })();
    t.ClassificationInfo = o;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    function t(e, t) {
      e.log(
        "*INTERNAL ERROR* - Exception in typescript services: " + t.message
      );
    }
    e.logInternalError = t;
    var n = (function () {
      function e(e, t, n, r) {
        (this.fileName = ""),
          (this.minChar = -1),
          (this.limChar = -1),
          (this.isWriteAccess = !1),
          (this.fileName = e),
          (this.minChar = t),
          (this.limChar = n),
          (this.isWriteAccess = r);
      }
      return e;
    })();
    e.ReferenceEntry = n;
    var r = (function () {
      function e() {
        (this.name = ""),
          (this.kind = ""),
          (this.kindModifiers = ""),
          (this.matchKind = ""),
          (this.fileName = ""),
          (this.minChar = -1),
          (this.limChar = -1),
          (this.containerName = ""),
          (this.containerKind = "");
      }
      return e;
    })();
    e.NavigateToItem = r;
    var i = (function () {
      function e(e, t, n) {
        (this.minChar = e), (this.limChar = t), (this.text = n);
      }
      return (
        (e.createInsert = function (t, n) {
          return new e(t, t, n);
        }),
        (e.createDelete = function (t, n) {
          return new e(t, n, "");
        }),
        (e.createReplace = function (t, n, r) {
          return new e(t, n, r);
        }),
        e
      );
    })();
    e.TextEdit = i;
    var o = (function () {
      function e() {
        (this.IndentSize = 4),
          (this.TabSize = 4),
          (this.NewLineCharacter = "\r\n"),
          (this.ConvertTabsToSpaces = !0);
      }
      return (
        (e.clone = function (t) {
          var n = new e();
          return (
            (n.IndentSize = t.IndentSize),
            (n.TabSize = t.TabSize),
            (n.NewLineCharacter = t.NewLineCharacter),
            (n.ConvertTabsToSpaces = t.ConvertTabsToSpaces),
            n
          );
        }),
        e
      );
    })();
    e.EditorOptions = o;
    var s = (function (e) {
      function t() {
        e.apply(this, arguments),
          (this.InsertSpaceAfterCommaDelimiter = !0),
          (this.InsertSpaceAfterSemicolonInForStatements = !0),
          (this.InsertSpaceBeforeAndAfterBinaryOperators = !0),
          (this.InsertSpaceAfterKeywordsInControlFlowStatements = !0),
          (this.InsertSpaceAfterFunctionKeywordForAnonymousFunctions = !1),
          (this.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis = !1),
          (this.PlaceOpenBraceOnNewLineForFunctions = !1),
          (this.PlaceOpenBraceOnNewLineForControlBlocks = !1);
      }
      return (
        __extends(t, e),
        (t.clone = function (e) {
          var t = o.clone(e);
          return (
            (t.InsertSpaceAfterCommaDelimiter =
              e.InsertSpaceAfterCommaDelimiter),
            (t.InsertSpaceAfterSemicolonInForStatements =
              e.InsertSpaceAfterSemicolonInForStatements),
            (t.InsertSpaceBeforeAndAfterBinaryOperators =
              e.InsertSpaceBeforeAndAfterBinaryOperators),
            (t.InsertSpaceAfterKeywordsInControlFlowStatements =
              e.InsertSpaceAfterKeywordsInControlFlowStatements),
            (t.InsertSpaceAfterFunctionKeywordForAnonymousFunctions =
              e.InsertSpaceAfterFunctionKeywordForAnonymousFunctions),
            (t.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis =
              e.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis),
            (t.PlaceOpenBraceOnNewLineForFunctions =
              e.PlaceOpenBraceOnNewLineForFunctions),
            (t.PlaceOpenBraceOnNewLineForControlBlocks =
              e.PlaceOpenBraceOnNewLineForControlBlocks),
            t
          );
        }),
        t
      );
    })(o);
    e.FormatCodeOptions = s;
    var a = (function () {
      function e(e, t, n, r, i, o, s) {
        (this.fileName = e),
          (this.minChar = t),
          (this.limChar = n),
          (this.kind = r),
          (this.name = i),
          (this.containerKind = o),
          (this.containerName = s);
      }
      return e;
    })();
    e.DefinitionInfo = a;
    var l = (function () {
      function e(e, t, n, r, i, o) {
        (this.memberName = e),
          (this.docComment = t),
          (this.fullSymbolName = n),
          (this.kind = r),
          (this.minChar = i),
          (this.limChar = o);
      }
      return e;
    })();
    e.TypeInfo = l;
    var c = (function () {
      function e(e, t, n) {
        "undefined" == typeof n && (n = null),
          (this.minChar = e),
          (this.limChar = t),
          (this.text = n);
      }
      return e;
    })();
    e.SpanInfo = c;
    var u = (function () {
      function e() {
        this.formal = [];
      }
      return e;
    })();
    e.SignatureInfo = u;
    var p = (function () {
      function e() {
        (this.typeParameters = []), (this.parameters = []);
      }
      return e;
    })();
    e.FormalSignatureItemInfo = p;
    var h = (function () {
      function e() {}
      return e;
    })();
    e.FormalTypeParameterInfo = h;
    var d = (function () {
      function e() {}
      return e;
    })();
    e.FormalParameterInfo = d;
    var m = (function () {
      function e() {}
      return e;
    })();
    e.ActualSignatureInfo = m;
    var f = (function () {
      function e() {
        (this.maybeInaccurate = !1),
          (this.isMemberCompletion = !1),
          (this.entries = []);
      }
      return e;
    })();
    e.CompletionInfo = f;
    var g = (function () {
      function e() {}
      return (
        (e.unknown = ""),
        (e.keyword = "keyword"),
        (e.scriptElement = "script"),
        (e.moduleElement = "module"),
        (e.classElement = "class"),
        (e.interfaceElement = "interface"),
        (e.enumElement = "enum"),
        (e.variableElement = "var"),
        (e.localVariableElement = "local var"),
        (e.functionElement = "function"),
        (e.localFunctionElement = "local function"),
        (e.memberFunctionElement = "method"),
        (e.memberGetAccessorElement = "getter"),
        (e.memberSetAccessorElement = "setter"),
        (e.memberVariableElement = "property"),
        (e.constructorImplementationElement = "constructor"),
        (e.callSignatureElement = "call"),
        (e.indexSignatureElement = "index"),
        (e.constructSignatureElement = "construct"),
        (e.parameterElement = "parameter"),
        (e.typeParameterElement = "type parameter"),
        (e.primitiveType = "primitive type"),
        e
      );
    })();
    e.ScriptElementKind = g;
    var v = (function () {
      function e() {}
      return (
        (e.none = ""),
        (e.publicMemberModifier = "public"),
        (e.privateMemberModifier = "private"),
        (e.exportedModifier = "export"),
        (e.ambientModifier = "declare"),
        (e.staticModifier = "static"),
        e
      );
    })();
    e.ScriptElementKindModifier = v;
    var y = (function () {
      function e() {}
      return (
        (e.none = null),
        (e.exact = "exact"),
        (e.subString = "substring"),
        (e.prefix = "prefix"),
        e
      );
    })();
    e.MatchKind = y;
    var b = (function () {
      function e() {}
      return (
        (e.none = ""),
        (e.error = "error"),
        (e.warning = "warning"),
        (e.message = "message"),
        e
      );
    })();
    e.DiagnosticCategory = b;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(e) {
          (this.snapshot = e), (this.lines = []);
        }
        return (
          (t.prototype.getText = function (e) {
            return this.snapshot.substr(e.start(), e.length(), !1);
          }),
          (t.prototype.getLineNumberFromPosition = function (e) {
            return this.snapshot.lineMap().getLineNumberFromPosition(e);
          }),
          (t.prototype.getLineFromPosition = function (e) {
            var t = this.getLineNumberFromPosition(e);
            return this.getLineFromLineNumber(t);
          }),
          (t.prototype.getLineFromLineNumber = function (e) {
            var t = this.lines[e];
            return (
              void 0 === t &&
                ((t = this.getLineFromLineNumberWorker(e)),
                (this.lines[e] = t)),
              t
            );
          }),
          (t.prototype.getLineFromLineNumberWorker = function (t) {
            var n = this.snapshot.lineMap().lineStarts(),
              r = t;
            if (0 > r || r >= n.length)
              throw new Error(
                e.getDiagnosticMessage(e.DiagnosticCode.Invalid_line_number_0, [
                  r,
                ])
              );
            var i,
              o,
              s = n[r],
              a = "";
            if (r == n.length) i = o = this.snapshot.length();
            else {
              o = r >= n.length - 1 ? this.snapshot.length() : n[r + 1];
              for (var l = o - 1; l >= s; l--) {
                var c = this.snapshot.substr(l, 1, !1);
                if ("\r" != c && "\n" != c) break;
              }
              (i = l + 1), (a = this.snapshot.substr(i, o - i, !1));
            }
            var u = new e.Services.Formatting.TextSnapshotLine(
              this,
              t,
              s,
              i,
              a
            );
            return u;
          }),
          t
        );
      })();
      t.TextSnapshot = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(e, t, n, r, i) {
          (this._snapshot = e),
            (this._lineNumber = t),
            (this._start = n),
            (this._end = r),
            (this._lineBreak = i);
        }
        return (
          (t.prototype.snapshot = function () {
            return this._snapshot;
          }),
          (t.prototype.start = function () {
            return new e.Services.Formatting.SnapshotPoint(
              this._snapshot,
              this._start
            );
          }),
          (t.prototype.startPosition = function () {
            return this._start;
          }),
          (t.prototype.end = function () {
            return new e.Services.Formatting.SnapshotPoint(
              this._snapshot,
              this._end
            );
          }),
          (t.prototype.endPosition = function () {
            return this._end;
          }),
          (t.prototype.endIncludingLineBreak = function () {
            return new e.Services.Formatting.SnapshotPoint(
              this._snapshot,
              this._end + this._lineBreak.length
            );
          }),
          (t.prototype.endIncludingLineBreakPosition = function () {
            return this._end + this._lineBreak.length;
          }),
          (t.prototype.length = function () {
            return this._end - this._start;
          }),
          (t.prototype.lineNumber = function () {
            return this._lineNumber;
          }),
          (t.prototype.getText = function () {
            return this._snapshot.getText(
              e.TextSpan.fromBounds(this._start, this._end)
            );
          }),
          t
        );
      })();
      t.TextSnapshotLine = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      var t = (function () {
        function e(e, t) {
          (this.snapshot = e), (this.position = t);
        }
        return (
          (e.prototype.getContainingLine = function () {
            return this.snapshot.getLineFromPosition(this.position);
          }),
          (e.prototype.add = function (t) {
            return new e(this.snapshot, this.position + t);
          }),
          e
        );
      })();
      e.SnapshotPoint = t;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(t, n) {
          (this.snapshot = t),
            (this.formattingRequestKind = n),
            (this.currentTokenSpan = null),
            (this.nextTokenSpan = null),
            (this.contextNode = null),
            (this.currentTokenParent = null),
            (this.nextTokenParent = null),
            (this.contextNodeAllOnSameLine = null),
            (this.nextNodeAllOnSameLine = null),
            (this.tokensAreOnSameLine = null),
            (this.contextNodeBlockIsOnOneLine = null),
            (this.nextNodeBlockIsOnOneLine = null),
            e.Debug.assert(null != this.snapshot, "snapshot is null");
        }
        return (
          (t.prototype.updateContext = function (t, n, r, i, o) {
            e.Debug.assert(null != t, "currentTokenSpan is null"),
              e.Debug.assert(null != n, "currentTokenParent is null"),
              e.Debug.assert(null != r, "nextTokenSpan is null"),
              e.Debug.assert(null != i, "nextTokenParent is null"),
              e.Debug.assert(null != o, "commonParent is null"),
              (this.currentTokenSpan = t),
              (this.currentTokenParent = n),
              (this.nextTokenSpan = r),
              (this.nextTokenParent = i),
              (this.contextNode = o),
              (this.contextNodeAllOnSameLine = null),
              (this.nextNodeAllOnSameLine = null),
              (this.tokensAreOnSameLine = null),
              (this.contextNodeBlockIsOnOneLine = null),
              (this.nextNodeBlockIsOnOneLine = null);
          }),
          (t.prototype.ContextNodeAllOnSameLine = function () {
            return (
              null === this.contextNodeAllOnSameLine &&
                (this.contextNodeAllOnSameLine = this.NodeIsOnOneLine(
                  this.contextNode
                )),
              this.contextNodeAllOnSameLine
            );
          }),
          (t.prototype.NextNodeAllOnSameLine = function () {
            return (
              null === this.nextNodeAllOnSameLine &&
                (this.nextNodeAllOnSameLine = this.NodeIsOnOneLine(
                  this.nextTokenParent
                )),
              this.nextNodeAllOnSameLine
            );
          }),
          (t.prototype.TokensAreOnSameLine = function () {
            if (null === this.tokensAreOnSameLine) {
              var e = this.snapshot.getLineNumberFromPosition(
                  this.currentTokenSpan.start()
                ),
                t = this.snapshot.getLineNumberFromPosition(
                  this.nextTokenSpan.start()
                );
              this.tokensAreOnSameLine = e == t;
            }
            return this.tokensAreOnSameLine;
          }),
          (t.prototype.ContextNodeBlockIsOnOneLine = function () {
            return (
              null === this.contextNodeBlockIsOnOneLine &&
                (this.contextNodeBlockIsOnOneLine = this.BlockIsOnOneLine(
                  this.contextNode
                )),
              this.contextNodeBlockIsOnOneLine
            );
          }),
          (t.prototype.NextNodeBlockIsOnOneLine = function () {
            return (
              null === this.nextNodeBlockIsOnOneLine &&
                (this.nextNodeBlockIsOnOneLine = this.BlockIsOnOneLine(
                  this.nextTokenParent
                )),
              this.nextNodeBlockIsOnOneLine
            );
          }),
          (t.prototype.NodeIsOnOneLine = function (e) {
            var t = this.snapshot.getLineNumberFromPosition(e.start()),
              n = this.snapshot.getLineNumberFromPosition(e.end());
            return t == n;
          }),
          (t.prototype.BlockIsOnOneLine = function (t) {
            var n = t.fullStart(),
              r = t.node(),
              i = n + e.Syntax.childOffset(r, r.openBraceToken),
              o = n + e.Syntax.childOffset(r, r.closeBraceToken),
              s = this.snapshot.getLineNumberFromPosition(i),
              a = this.snapshot.getLineNumberFromPosition(o);
            return s == a;
          }),
          t
        );
      })();
      t.FormattingContext = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(e, t, n, r) {
          (this.syntaxTree = e),
            (this.snapshot = t),
            (this.rulesProvider = n),
            (this.options = new FormattingOptions(
              !r.ConvertTabsToSpaces,
              r.TabSize,
              r.IndentSize,
              r.NewLineCharacter
            ));
        }
        return (
          (t.prototype.formatSelection = function (t, n) {
            var r = e.TextSpan.fromBounds(t, n);
            return this.formatSpan(r, 1);
          }),
          (t.prototype.formatDocument = function (t, n) {
            var r = e.TextSpan.fromBounds(t, n);
            return this.formatSpan(r, 0);
          }),
          (t.prototype.formatOnPaste = function (t, n) {
            var r = e.TextSpan.fromBounds(t, n);
            return this.formatSpan(r, 5);
          }),
          (t.prototype.formatOnSemicolon = function (t) {
            var n = this.syntaxTree.sourceUnit(),
              r = n.findToken(t - 1);
            if (78 === r.kind()) {
              for (
                var i = r;
                null !== i.parent() &&
                i.parent().end() === r.end() &&
                1 !== i.parent().kind();

              )
                i = i.parent();
              var o = new e.TextSpan(i.fullStart(), i.fullWidth());
              return this.formatSpan(o, 3);
            }
            return [];
          }),
          (t.prototype.formatOnClosingCurlyBrace = function (t) {
            var n = this.syntaxTree.sourceUnit(),
              r = n.findToken(t - 1);
            if (71 === r.kind()) {
              for (
                var i = r;
                null !== i.parent() &&
                i.parent().end() === r.end() &&
                1 !== i.parent().kind();

              )
                i = i.parent();
              var o = new e.TextSpan(i.fullStart(), i.fullWidth());
              return this.formatSpan(o, 4);
            }
            return [];
          }),
          (t.prototype.formatOnEnter = function (t) {
            var n = this.snapshot.getLineNumberFromPosition(t);
            if (n > 0) {
              var r = this.snapshot.getLineFromLineNumber(n - 1),
                i = this.snapshot.getLineFromLineNumber(n),
                o = e.TextSpan.fromBounds(r.startPosition(), i.endPosition());
              return this.formatSpan(o, 2);
            }
            return [];
          }),
          (t.prototype.formatSpan = function (t, n) {
            var r = this.snapshot.getLineFromPosition(t.start());
            t = e.TextSpan.fromBounds(r.startPosition(), t.end());
            var i = [],
              o = e.Services.Formatting.Formatter.getEdits(
                t,
                this.syntaxTree.sourceUnit(),
                this.options,
                !0,
                this.snapshot,
                this.rulesProvider,
                n
              );
            return (
              o.forEach(function (t) {
                var n = new e.Services.TextEdit(
                  t.position,
                  t.position + t.length,
                  t.replaceWith
                );
                i.push(n);
              }),
              i
            );
          }),
          t
        );
      })();
      t.FormattingManager = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      !(function (e) {
        (e[(e.FormatDocument = 0)] = "FormatDocument"),
          (e[(e.FormatSelection = 1)] = "FormatSelection"),
          (e[(e.FormatOnEnter = 2)] = "FormatOnEnter"),
          (e[(e.FormatOnSemicolon = 3)] = "FormatOnSemicolon"),
          (e[(e.FormatOnClosingCurlyBrace = 4)] = "FormatOnClosingCurlyBrace"),
          (e[(e.FormatOnPaste = 5)] = "FormatOnPaste");
      })(e.FormattingRequestKind || (e.FormattingRequestKind = {}));
      e.FormattingRequestKind;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      var t = (function () {
        function e(e, t, n) {
          "undefined" == typeof n && (n = 0),
            (this.Descriptor = e),
            (this.Operation = t),
            (this.Flag = n);
        }
        return (
          (e.prototype.toString = function () {
            return (
              "[desc=" +
              this.Descriptor +
              ",operation=" +
              this.Operation +
              ",flag=" +
              this.Flag +
              "]"
            );
          }),
          e
        );
      })();
      e.Rule = t;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      !(function (e) {
        (e[(e.Ignore = 0)] = "Ignore"),
          (e[(e.Space = 1)] = "Space"),
          (e[(e.NewLine = 2)] = "NewLine"),
          (e[(e.Delete = 3)] = "Delete");
      })(e.RuleAction || (e.RuleAction = {}));
      e.RuleAction;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(e, t) {
          (this.LeftTokenRange = e), (this.RightTokenRange = t);
        }
        return (
          (t.prototype.toString = function () {
            return (
              "[leftRange=" +
              this.LeftTokenRange +
              ",rightRange=" +
              this.RightTokenRange +
              "]"
            );
          }),
          (t.create1 = function (n, r) {
            return t.create4(
              e.Services.Formatting.Shared.TokenRange.FromToken(n),
              e.Services.Formatting.Shared.TokenRange.FromToken(r)
            );
          }),
          (t.create2 = function (n, r) {
            return t.create4(
              n,
              e.Services.Formatting.Shared.TokenRange.FromToken(r)
            );
          }),
          (t.create3 = function (n, r) {
            return t.create4(
              e.Services.Formatting.Shared.TokenRange.FromToken(n),
              r
            );
          }),
          (t.create4 = function (e, n) {
            return new t(e, n);
          }),
          t
        );
      })();
      t.RuleDescriptor = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      !(function (e) {
        (e[(e.None = 0)] = "None"),
          (e[(e.CanDeleteNewLines = 1)] = "CanDeleteNewLines");
      })(e.RuleFlags || (e.RuleFlags = {}));
      e.RuleFlags;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t() {
          (this.Context = null), (this.Action = null);
        }
        return (
          (t.prototype.toString = function () {
            return "[context=" + this.Context + ",action=" + this.Action + "]";
          }),
          (t.create1 = function (n) {
            return t.create2(e.Services.Formatting.RuleOperationContext.Any, n);
          }),
          (t.create2 = function (e, n) {
            var r = new t();
            return (r.Context = e), (r.Action = n), r;
          }),
          t
        );
      })();
      t.RuleOperation = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      var t = (function () {
        function e() {
          for (var e = [], t = 0; t < arguments.length - 0; t++)
            e[t] = arguments[t + 0];
          this.customContextChecks = e;
        }
        return (
          (e.prototype.IsAny = function () {
            return this == e.Any;
          }),
          (e.prototype.InContext = function (e) {
            if (this.IsAny()) return !0;
            for (var t = 0, n = this.customContextChecks.length; n > t; t++)
              if (!this.customContextChecks[t](e)) return !1;
            return !0;
          }),
          (e.Any = new e()),
          e
        );
      })();
      e.RuleOperationContext = t;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t() {
          (this.IgnoreBeforeComment = new e.Services.Formatting.Rule(
            e.Services.Formatting.RuleDescriptor.create4(
              e.Services.Formatting.Shared.TokenRange.Any,
              e.Services.Formatting.Shared.TokenRange.Comments
            ),
            e.Services.Formatting.RuleOperation.create1(0)
          )),
            (this.IgnoreAfterLineComment = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                7,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create1(0)
            )),
            (this.NoSpaceBeforeSemicolon = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                78
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeColon = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                106
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotBinaryOpContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeQMark = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                105
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotBinaryOpContext
                ),
                3
              )
            )),
            (this.SpaceAfterColon = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                106,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterQMark = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                105,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterSemicolon = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                78,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.SpaceAfterCloseBrace = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                71,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsAfterCodeBlockContext
                ),
                1
              )
            )),
            (this.SpaceBetweenCloseBraceAndElse = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(71, 23),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.SpaceBetweenCloseBraceAndWhile = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(71, 42),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterCloseBrace = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                71,
                e.Services.Formatting.Shared.TokenRange.FromTokens([
                  73,
                  75,
                  79,
                  78,
                ])
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeDot = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                76
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterDot = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                76,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeOpenBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                74
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterOpenBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                74,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeCloseBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                75
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterCloseBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                75,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.FunctionOpenBraceLeftTokenRange =
              e.Services.Formatting.Shared.TokenRange.AnyIncludingMultilineComments),
            (this.SpaceBeforeOpenBraceInFunction = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                this.FunctionOpenBraceLeftTokenRange,
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsFunctionDeclContext,
                  t.IsNotFormatOnEnter,
                  t.IsSameLineTokenOrBeforeMultilineBlockContext
                ),
                1
              ),
              1
            )),
            (this.TypeScriptOpenBraceLeftTokenRange = e.Services.Formatting.Shared.TokenRange.FromTokens(
              [11, 6]
            )),
            (this.SpaceBeforeOpenBraceInTypeScriptDeclWithBlock = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                this.TypeScriptOpenBraceLeftTokenRange,
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsTypeScriptDeclWithBlockContext,
                  t.IsNotFormatOnEnter,
                  t.IsSameLineTokenOrBeforeMultilineBlockContext
                ),
                1
              ),
              1
            )),
            (this.ControlOpenBraceLeftTokenRange = e.Services.Formatting.Shared.TokenRange.FromTokens(
              [73, 6, 22, 38, 25, 23]
            )),
            (this.SpaceBeforeOpenBraceInControl = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                this.ControlOpenBraceLeftTokenRange,
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsControlDeclContext,
                  t.IsNotFormatOnEnter,
                  t.IsSameLineTokenOrBeforeMultilineBlockContext
                ),
                1
              ),
              1
            )),
            (this.SpaceAfterOpenBrace = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                70,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSingleLineBlockContext
                ),
                1
              )
            )),
            (this.SpaceBeforeCloseBrace = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                71
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSingleLineBlockContext
                ),
                1
              )
            )),
            (this.NoSpaceBetweenEmptyBraceBrackets = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(70, 71),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsObjectContext
                ),
                3
              )
            )),
            (this.NewLineAfterOpenBraceInBlockContext = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                70,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsMultilineBlockContext
                ),
                2
              )
            )),
            (this.NewLineBeforeCloseBraceInBlockContext = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange
                  .AnyIncludingMultilineComments,
                71
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsMultilineBlockContext
                ),
                2
              )
            )),
            (this.NoSpaceAfterUnaryPrefixOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.UnaryPrefixOperators,
                e.Services.Formatting.Shared.TokenRange.UnaryPrefixExpressions
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotBinaryOpContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterUnaryPreincrementOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                93,
                e.Services.Formatting.Shared.TokenRange
                  .UnaryPreincrementExpressions
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterUnaryPredecrementOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                94,
                e.Services.Formatting.Shared.TokenRange
                  .UnaryPredecrementExpressions
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeUnaryPostincrementOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange
                  .UnaryPostincrementExpressions,
                93
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeUnaryPostdecrementOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange
                  .UnaryPostdecrementExpressions,
                94
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.SpaceAfterPostincrementWhenFollowedByAdd = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(93, 89),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterAddWhenFollowedByUnaryPlus = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(89, 89),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterAddWhenFollowedByPreincrement = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(89, 93),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterPostdecrementWhenFollowedBySubtract = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(94, 90),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterSubtractWhenFollowedByUnaryMinus = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(90, 90),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterSubtractWhenFollowedByPredecrement = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(90, 94),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.NoSpaceBeforeComma = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                79
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.SpaceAfterCertainKeywords = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.FromTokens([
                  40,
                  36,
                  31,
                  21,
                  33,
                  39,
                ]),
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.NoSpaceBeforeOpenParenInFuncCall = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                72
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsFunctionCallOrNewContext
                ),
                3
              )
            )),
            (this.SpaceAfterFunctionInFuncDecl = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                27,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsFunctionDeclContext
                ),
                1
              )
            )),
            (this.NoSpaceBeforeOpenParenInFuncDecl = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                72
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsFunctionDeclContext
                ),
                3
              )
            )),
            (this.SpaceAfterVoidOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                41,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsVoidOpContext
                ),
                1
              )
            )),
            (this.NoSpaceBetweenReturnAndSemicolon = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(33, 78),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.SpaceBetweenStatements = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.FromTokens([
                  73,
                  22,
                  23,
                  16,
                ]),
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotForContext
                ),
                1
              )
            )),
            (this.SpaceAfterTryFinally = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.FromTokens([38, 25]),
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.SpaceAfterGetSetInMember = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.FromTokens([64, 68]),
                11
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsFunctionDeclContext
                ),
                1
              )
            )),
            (this.SpaceBeforeBinaryKeywordOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.Any,
                e.Services.Formatting.Shared.TokenRange.BinaryKeywordOperators
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterBinaryKeywordOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.BinaryKeywordOperators,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterConstructor = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(62, 72),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterModuleImport = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.FromTokens([65, 66]),
                72
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.SpaceAfterCertainTypeScriptKeywords = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.FromTokens([
                  44,
                  63,
                  46,
                  47,
                  48,
                  64,
                  51,
                  49,
                  52,
                  65,
                  55,
                  57,
                  68,
                  58,
                ]),
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.SpaceBeforeCertainTypeScriptKeywords = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.Any,
                e.Services.Formatting.Shared.TokenRange.FromTokens([48, 51])
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.SpaceAfterModuleName = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(14, 70),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsModuleDeclContext
                ),
                1
              )
            )),
            (this.SpaceAfterArrow = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                85,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterEllipsis = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(77, 11),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterOptionalParameters = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                105,
                e.Services.Formatting.Shared.TokenRange.FromTokens([73, 79])
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsNotBinaryOpContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeOpenAngularBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.TypeNames,
                80
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsTypeArgumentOrParameterContext
                ),
                3
              )
            )),
            (this.NoSpaceBetweenCloseParenAndAngularBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(73, 80),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsTypeArgumentOrParameterContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterOpenAngularBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                80,
                e.Services.Formatting.Shared.TokenRange.TypeNames
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsTypeArgumentOrParameterContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeCloseAngularBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                81
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsTypeArgumentOrParameterContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterCloseAngularBracket = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                81,
                e.Services.Formatting.Shared.TokenRange.FromTokens([
                  72,
                  74,
                  81,
                  79,
                ])
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsTypeArgumentOrParameterContext
                ),
                3
              )
            )),
            (this.NoSpaceBetweenEmptyInterfaceBraceBrackets = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(70, 71),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsObjectTypeContext
                ),
                3
              )
            )),
            (this.HighPriorityCommonRules = [
              this.IgnoreBeforeComment,
              this.IgnoreAfterLineComment,
              this.NoSpaceBeforeColon,
              this.SpaceAfterColon,
              this.NoSpaceBeforeQMark,
              this.SpaceAfterQMark,
              this.NoSpaceBeforeDot,
              this.NoSpaceAfterDot,
              this.NoSpaceAfterUnaryPrefixOperator,
              this.NoSpaceAfterUnaryPreincrementOperator,
              this.NoSpaceAfterUnaryPredecrementOperator,
              this.NoSpaceBeforeUnaryPostincrementOperator,
              this.NoSpaceBeforeUnaryPostdecrementOperator,
              this.SpaceAfterPostincrementWhenFollowedByAdd,
              this.SpaceAfterAddWhenFollowedByUnaryPlus,
              this.SpaceAfterAddWhenFollowedByPreincrement,
              this.SpaceAfterPostdecrementWhenFollowedBySubtract,
              this.SpaceAfterSubtractWhenFollowedByUnaryMinus,
              this.SpaceAfterSubtractWhenFollowedByPredecrement,
              this.NoSpaceAfterCloseBrace,
              this.SpaceAfterOpenBrace,
              this.SpaceBeforeCloseBrace,
              this.NewLineBeforeCloseBraceInBlockContext,
              this.SpaceAfterCloseBrace,
              this.SpaceBetweenCloseBraceAndElse,
              this.SpaceBetweenCloseBraceAndWhile,
              this.NoSpaceBetweenEmptyBraceBrackets,
              this.SpaceAfterFunctionInFuncDecl,
              this.NewLineAfterOpenBraceInBlockContext,
              this.SpaceAfterGetSetInMember,
              this.NoSpaceBetweenReturnAndSemicolon,
              this.SpaceAfterCertainKeywords,
              this.NoSpaceBeforeOpenParenInFuncCall,
              this.SpaceBeforeBinaryKeywordOperator,
              this.SpaceAfterBinaryKeywordOperator,
              this.SpaceAfterVoidOperator,
              this.NoSpaceAfterConstructor,
              this.NoSpaceAfterModuleImport,
              this.SpaceAfterCertainTypeScriptKeywords,
              this.SpaceBeforeCertainTypeScriptKeywords,
              this.SpaceAfterModuleName,
              this.SpaceAfterArrow,
              this.NoSpaceAfterEllipsis,
              this.NoSpaceAfterOptionalParameters,
              this.NoSpaceBetweenEmptyInterfaceBraceBrackets,
              this.NoSpaceBeforeOpenAngularBracket,
              this.NoSpaceBetweenCloseParenAndAngularBracket,
              this.NoSpaceAfterOpenAngularBracket,
              this.NoSpaceBeforeCloseAngularBracket,
              this.NoSpaceAfterCloseAngularBracket,
            ]),
            (this.LowPriorityCommonRules = [
              this.NoSpaceBeforeSemicolon,
              this.SpaceBeforeOpenBraceInControl,
              this.SpaceBeforeOpenBraceInFunction,
              this.SpaceBeforeOpenBraceInTypeScriptDeclWithBlock,
              this.NoSpaceBeforeComma,
              this.NoSpaceBeforeOpenBracket,
              this.NoSpaceAfterOpenBracket,
              this.NoSpaceBeforeCloseBracket,
              this.NoSpaceAfterCloseBracket,
              this.SpaceAfterSemicolon,
              this.NoSpaceBeforeOpenParenInFuncDecl,
              this.SpaceBetweenStatements,
              this.SpaceAfterTryFinally,
            ]),
            (this.SpaceAfterComma = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                79,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterComma = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                79,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.SpaceBeforeBinaryOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.Any,
                e.Services.Formatting.Shared.TokenRange.BinaryOperators
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.SpaceAfterBinaryOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.BinaryOperators,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                1
              )
            )),
            (this.NoSpaceBeforeBinaryOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.Any,
                e.Services.Formatting.Shared.TokenRange.BinaryOperators
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterBinaryOperator = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create4(
                e.Services.Formatting.Shared.TokenRange.BinaryOperators,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsBinaryOpContext
                ),
                3
              )
            )),
            (this.SpaceAfterKeywordInControl = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Keywords,
                72
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsControlDeclContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterKeywordInControl = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Keywords,
                72
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsControlDeclContext
                ),
                3
              )
            )),
            (this.NewLineBeforeOpenBraceInFunction = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                this.FunctionOpenBraceLeftTokenRange,
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsFunctionDeclContext,
                  t.IsBeforeMultilineBlockContext
                ),
                2
              ),
              1
            )),
            (this.NewLineBeforeOpenBraceInTypeScriptDeclWithBlock = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                this.TypeScriptOpenBraceLeftTokenRange,
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsTypeScriptDeclWithBlockContext,
                  t.IsBeforeMultilineBlockContext
                ),
                2
              ),
              1
            )),
            (this.NewLineBeforeOpenBraceInControl = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                this.ControlOpenBraceLeftTokenRange,
                70
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsControlDeclContext,
                  t.IsBeforeMultilineBlockContext
                ),
                2
              ),
              1
            )),
            (this.SpaceAfterSemicolonInFor = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                78,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsForContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterSemicolonInFor = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                78,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext,
                  t.IsForContext
                ),
                3
              )
            )),
            (this.SpaceAfterOpenParen = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                72,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.SpaceBeforeCloseParen = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                73
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                1
              )
            )),
            (this.NoSpaceBetweenParens = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(72, 73),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceAfterOpenParen = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create3(
                72,
                e.Services.Formatting.Shared.TokenRange.Any
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.NoSpaceBeforeCloseParen = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create2(
                e.Services.Formatting.Shared.TokenRange.Any,
                73
              ),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsSameLineTokenContext
                ),
                3
              )
            )),
            (this.SpaceAfterAnonymousFunctionKeyword = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(27, 72),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsFunctionDeclContext
                ),
                1
              )
            )),
            (this.NoSpaceAfterAnonymousFunctionKeyword = new e.Services.Formatting.Rule(
              e.Services.Formatting.RuleDescriptor.create1(27, 72),
              e.Services.Formatting.RuleOperation.create2(
                new e.Services.Formatting.RuleOperationContext(
                  t.IsFunctionDeclContext
                ),
                3
              )
            ));
        }
        return (
          (t.prototype.getRuleName = function (t) {
            var n = this;
            for (var r in n) if (n[r] === t) return r;
            throw new Error(
              e.getDiagnosticMessage(e.DiagnosticCode.Unknown_rule, null)
            );
          }),
          (t.IsForContext = function (e) {
            return 154 === e.contextNode.kind();
          }),
          (t.IsNotForContext = function (e) {
            return !t.IsForContext(e);
          }),
          (t.IsBinaryOpContext = function (e) {
            switch (e.contextNode.kind()) {
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
              case 183:
              case 184:
              case 185:
              case 186:
              case 187:
              case 188:
              case 189:
              case 190:
              case 191:
              case 192:
              case 193:
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
              case 201:
              case 202:
              case 203:
              case 204:
              case 205:
              case 206:
              case 207:
              case 208:
              case 209:
                return !0;
              case 133:
              case 225:
              case 232:
                return (
                  107 === e.currentTokenSpan.kind() ||
                  107 === e.nextTokenSpan.kind()
                );
              case 155:
                return (
                  29 === e.currentTokenSpan.kind() ||
                  29 === e.nextTokenSpan.kind()
                );
            }
            return !1;
          }),
          (t.IsNotBinaryOpContext = function (e) {
            return !t.IsBinaryOpContext(e);
          }),
          (t.IsSameLineTokenOrBeforeMultilineBlockContext = function (e) {
            return (
              e.TokensAreOnSameLine() || t.IsBeforeMultilineBlockContext(e)
            );
          }),
          (t.IsBeforeMultilineBlockContext = function (e) {
            return (
              t.IsBeforeBlockContext(e) &&
              !(e.NextNodeAllOnSameLine() || e.NextNodeBlockIsOnOneLine())
            );
          }),
          (t.IsMultilineBlockContext = function (e) {
            return (
              t.IsBlockContext(e) &&
              !(e.ContextNodeAllOnSameLine() || e.ContextNodeBlockIsOnOneLine())
            );
          }),
          (t.IsSingleLineBlockContext = function (e) {
            return (
              t.IsBlockContext(e) &&
              (e.ContextNodeAllOnSameLine() || e.ContextNodeBlockIsOnOneLine())
            );
          }),
          (t.IsBlockContext = function (e) {
            return t.NodeIsBlockContext(e.contextNode);
          }),
          (t.IsBeforeBlockContext = function (e) {
            return t.NodeIsBlockContext(e.nextTokenParent);
          }),
          (t.NodeIsBlockContext = function (e) {
            if (t.NodeIsTypeScriptDeclWithBlockContext(e)) return !0;
            switch (e.kind()) {
              case 146:
              case 151:
              case 215:
                return !0;
            }
            return !1;
          }),
          (t.IsFunctionDeclContext = function (e) {
            switch (e.contextNode.kind()) {
              case 129:
              case 135:
              case 139:
              case 140:
              case 145:
              case 142:
              case 222:
              case 137:
              case 219:
              case 218:
              case 128:
                return !0;
            }
            return !1;
          }),
          (t.IsTypeScriptDeclWithBlockContext = function (e) {
            return t.NodeIsTypeScriptDeclWithBlockContext(e.contextNode);
          }),
          (t.NodeIsTypeScriptDeclWithBlockContext = function (e) {
            switch (e.kind()) {
              case 131:
              case 132:
              case 122:
              case 130:
                return !0;
            }
            return !1;
          }),
          (t.IsAfterCodeBlockContext = function (e) {
            switch (e.currentTokenParent.kind()) {
              case 131:
              case 130:
              case 132:
              case 146:
              case 151:
                return !0;
            }
            return !1;
          }),
          (t.IsControlDeclContext = function (e) {
            switch (e.contextNode.kind()) {
              case 147:
              case 151:
              case 154:
              case 155:
              case 158:
              case 159:
              case 161:
              case 163:
              case 235:
              case 236:
              case 237:
                return !0;
              default:
                return !1;
            }
          }),
          (t.IsObjectContext = function (e) {
            return 215 === e.contextNode.kind();
          }),
          (t.IsFunctionCallContext = function (e) {
            return 213 === e.contextNode.kind();
          }),
          (t.IsNewContext = function (e) {
            return 216 === e.contextNode.kind();
          }),
          (t.IsFunctionCallOrNewContext = function (e) {
            return t.IsFunctionCallContext(e) || t.IsNewContext(e);
          }),
          (t.IsSameLineTokenContext = function (e) {
            return e.TokensAreOnSameLine();
          }),
          (t.IsNotFormatOnEnter = function (e) {
            return 2 != e.formattingRequestKind;
          }),
          (t.IsModuleDeclContext = function (e) {
            return 130 === e.contextNode.kind();
          }),
          (t.IsObjectTypeContext = function (e) {
            return (
              122 === e.contextNode.kind() &&
              128 !== e.contextNode.parent().kind()
            );
          }),
          (t.IsTypeArgumentOrParameter = function (e, t) {
            return !((80 !== e && 81 !== e) || (229 !== t && 228 !== t));
          }),
          (t.IsTypeArgumentOrParameterContext = function (e) {
            return (
              t.IsTypeArgumentOrParameter(
                e.currentTokenSpan.kind(),
                e.currentTokenParent.kind()
              ) ||
              t.IsTypeArgumentOrParameter(
                e.nextTokenSpan.kind(),
                e.nextTokenParent.kind()
              )
            );
          }),
          (t.IsVoidOpContext = function (e) {
            return (
              41 === e.currentTokenSpan.kind() &&
              172 === e.currentTokenParent.kind()
            );
          }),
          t
        );
      })();
      t.Rules = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t() {
          (this.map = []), (this.mapRowLength = 0);
        }
        return (
          (t.create = function (e) {
            var n = new t();
            return n.Initialize(e), n;
          }),
          (t.prototype.Initialize = function (e) {
            (this.mapRowLength = 120),
              (this.map = new Array(this.mapRowLength * this.mapRowLength));
            var t = new Array(this.map.length);
            return this.FillRules(e, t), this.map;
          }),
          (t.prototype.FillRules = function (e, t) {
            var n = this;
            e.forEach(function (e) {
              n.FillRule(e, t);
            });
          }),
          (t.prototype.GetRuleBucketIndex = function (e, t) {
            var n = e * this.mapRowLength + t;
            return n;
          }),
          (t.prototype.FillRule = function (t, n) {
            var r = this,
              i =
                t.Descriptor.LeftTokenRange !=
                  e.Services.Formatting.Shared.TokenRange.Any &&
                t.Descriptor.RightTokenRange !=
                  e.Services.Formatting.Shared.TokenRange.Any;
            t.Descriptor.LeftTokenRange.GetTokens().forEach(function (e) {
              t.Descriptor.RightTokenRange.GetTokens().forEach(function (o) {
                var s = r.GetRuleBucketIndex(e, o),
                  l = r.map[s];
                void 0 == l && (l = r.map[s] = new a()), l.AddRule(t, i, n, s);
              });
            });
          }),
          (t.prototype.GetRule = function (e) {
            var t = this.GetRuleBucketIndex(
                e.currentTokenSpan.kind(),
                e.nextTokenSpan.kind()
              ),
              n = this.map[t];
            if (null != n)
              for (var r = 0, i = n.Rules().length; i > r; r++) {
                var o = n.Rules()[r];
                if (o.Operation.Context.InContext(e)) return o;
              }
            return null;
          }),
          t
        );
      })();
      t.RulesMap = n;
      var r = 5,
        i = 31;
      !(function (e) {
        (e[(e.IgnoreRulesSpecific = 0)] = "IgnoreRulesSpecific"),
          (e[(e.IgnoreRulesAny = 1 * r)] = "IgnoreRulesAny"),
          (e[(e.ContextRulesSpecific = 2 * r)] = "ContextRulesSpecific"),
          (e[(e.ContextRulesAny = 3 * r)] = "ContextRulesAny"),
          (e[(e.NoContextRulesSpecific = 4 * r)] = "NoContextRulesSpecific"),
          (e[(e.NoContextRulesAny = 5 * r)] = "NoContextRulesAny");
      })(t.RulesPosition || (t.RulesPosition = {}));
      var o = t.RulesPosition,
        s = (function () {
          function t() {
            this.rulesInsertionIndexBitmap = 0;
          }
          return (
            (t.prototype.GetInsertionIndex = function (e) {
              for (
                var t = 0, n = 0, o = this.rulesInsertionIndexBitmap;
                e >= n;

              )
                (t += o & i), (o >>= r), (n += r);
              return t;
            }),
            (t.prototype.IncreaseInsertionIndex = function (t) {
              var n = (this.rulesInsertionIndexBitmap >> t) & i;
              n++,
                e.Debug.assert(
                  (n & i) == n,
                  "Adding more rules into the sub-bucket than allowed. Maximum allowed is 32 rules."
                );
              var r = this.rulesInsertionIndexBitmap & ~(i << t);
              (r |= n << t), (this.rulesInsertionIndexBitmap = r);
            }),
            t
          );
        })();
      t.RulesBucketConstructionState = s;
      var a = (function () {
        function e() {
          this.rules = [];
        }
        return (
          (e.prototype.Rules = function () {
            return this.rules;
          }),
          (e.prototype.AddRule = function (e, t, n, r) {
            var i;
            i =
              0 == e.Operation.Action
                ? t
                  ? 0
                  : o.IgnoreRulesAny
                : e.Operation.Context.IsAny()
                ? t
                  ? o.NoContextRulesSpecific
                  : o.NoContextRulesAny
                : t
                ? o.ContextRulesSpecific
                : o.ContextRulesAny;
            var a = n[r];
            void 0 === a && (a = n[r] = new s());
            var l = a.GetInsertionIndex(i);
            this.rules.splice(l, 0, e), a.IncreaseInsertionIndex(i);
          }),
          e
        );
      })();
      t.RulesBucket = a;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(t) {
          (this.logger = t),
            (this.globalRules = new e.Services.Formatting.Rules());
        }
        return (
          (t.prototype.getRuleName = function (e) {
            return this.globalRules.getRuleName(e);
          }),
          (t.prototype.getRuleByName = function (e) {
            return this.globalRules[e];
          }),
          (t.prototype.getRulesMap = function () {
            return this.rulesMap;
          }),
          (t.prototype.ensureUpToDate = function (t) {
            var n = this;
            if (
              null == this.options ||
              !e.compareDataObjects(this.options, t)
            ) {
              var r = e.timeFunction(
                  this.logger,
                  "RulesProvider: createActiveRules()",
                  function () {
                    return n.createActiveRules(t);
                  }
                ),
                i = e.timeFunction(
                  this.logger,
                  "RulesProvider: RulesMap.create()",
                  function () {
                    return e.Services.Formatting.RulesMap.create(r);
                  }
                );
              (this.activeRules = r),
                (this.rulesMap = i),
                (this.options = e.Services.FormatCodeOptions.clone(t));
            }
          }),
          (t.prototype.createActiveRules = function (e) {
            var t = this.globalRules.HighPriorityCommonRules.slice(0);
            return (
              e.InsertSpaceAfterCommaDelimiter
                ? t.push(this.globalRules.SpaceAfterComma)
                : t.push(this.globalRules.NoSpaceAfterComma),
              e.InsertSpaceAfterFunctionKeywordForAnonymousFunctions
                ? t.push(this.globalRules.SpaceAfterAnonymousFunctionKeyword)
                : t.push(this.globalRules.NoSpaceAfterAnonymousFunctionKeyword),
              e.InsertSpaceAfterKeywordsInControlFlowStatements
                ? t.push(this.globalRules.SpaceAfterKeywordInControl)
                : t.push(this.globalRules.NoSpaceAfterKeywordInControl),
              e.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis
                ? (t.push(this.globalRules.SpaceAfterOpenParen),
                  t.push(this.globalRules.SpaceBeforeCloseParen),
                  t.push(this.globalRules.NoSpaceBetweenParens))
                : (t.push(this.globalRules.NoSpaceAfterOpenParen),
                  t.push(this.globalRules.NoSpaceBeforeCloseParen),
                  t.push(this.globalRules.NoSpaceBetweenParens)),
              e.InsertSpaceAfterSemicolonInForStatements
                ? t.push(this.globalRules.SpaceAfterSemicolonInFor)
                : t.push(this.globalRules.NoSpaceAfterSemicolonInFor),
              e.InsertSpaceBeforeAndAfterBinaryOperators
                ? (t.push(this.globalRules.SpaceBeforeBinaryOperator),
                  t.push(this.globalRules.SpaceAfterBinaryOperator))
                : (t.push(this.globalRules.NoSpaceBeforeBinaryOperator),
                  t.push(this.globalRules.NoSpaceAfterBinaryOperator)),
              e.PlaceOpenBraceOnNewLineForControlBlocks &&
                t.push(this.globalRules.NewLineBeforeOpenBraceInControl),
              e.PlaceOpenBraceOnNewLineForFunctions &&
                (t.push(this.globalRules.NewLineBeforeOpenBraceInFunction),
                t.push(
                  this.globalRules
                    .NewLineBeforeOpenBraceInTypeScriptDeclWithBlock
                )),
              (t = t.concat(this.globalRules.LowPriorityCommonRules))
            );
          }),
          t
        );
      })();
      t.RulesProvider = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    !(function (e) {
      var t = (function () {
        function e(e, t, n) {
          (this.position = e), (this.length = t), (this.replaceWith = n);
        }
        return (
          (e.prototype.toString = function () {
            return (
              "[ position: " +
              this.position +
              ", length: " +
              this.length +
              ", replaceWith: '" +
              this.replaceWith +
              "' ]"
            );
          }),
          e
        );
      })();
      e.TextEditInfo = t;
    })(e.Formatting || (e.Formatting = {}));
    e.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      !(function (t) {
        var n = (function () {
          function t(e, t, n) {
            this.tokens = [];
            for (var r = e; t >= r; r++)
              n.indexOf(r) < 0 && this.tokens.push(r);
          }
          return (
            (t.prototype.GetTokens = function () {
              return this.tokens;
            }),
            (t.prototype.Contains = function (e) {
              return this.tokens.indexOf(e) >= 0;
            }),
            (t.prototype.toString = function () {
              return (
                "[tokenRangeStart=" +
                e.SyntaxKind[this.tokens[0]] +
                ",tokenRangeEnd=" +
                e.SyntaxKind[this.tokens[this.tokens.length - 1]] +
                "]"
              );
            }),
            t
          );
        })();
        t.TokenRangeAccess = n;
        var r = (function () {
          function e(e) {
            this.tokens = e && e.length ? e : [];
          }
          return (
            (e.prototype.GetTokens = function () {
              return this.tokens;
            }),
            (e.prototype.Contains = function (e) {
              return this.tokens.indexOf(e) >= 0;
            }),
            e
          );
        })();
        t.TokenValuesAccess = r;
        var i = (function () {
          function t(e) {
            this.token = e;
          }
          return (
            (t.prototype.GetTokens = function () {
              return [this.token];
            }),
            (t.prototype.Contains = function (e) {
              return e == this.token;
            }),
            (t.prototype.toString = function () {
              return "[singleTokenKind=" + e.SyntaxKind[this.token] + "]";
            }),
            t
          );
        })();
        t.TokenSingleValueAccess = i;
        var o = (function () {
          function e() {}
          return (
            (e.prototype.GetTokens = function () {
              for (var e = [], t = 9; 119 >= t; t++) e.push(t);
              return e;
            }),
            (e.prototype.Contains = function () {
              return !0;
            }),
            (e.prototype.toString = function () {
              return "[allTokens]";
            }),
            e
          );
        })();
        t.TokenAllAccess = o;
        var s = (function () {
          function e(e) {
            this.tokenAccess = e;
          }
          return (
            (e.FromToken = function (t) {
              return new e(new i(t));
            }),
            (e.FromTokens = function (t) {
              return new e(new r(t));
            }),
            (e.FromRange = function (t, r, i) {
              return "undefined" == typeof i && (i = []), new e(new n(t, r, i));
            }),
            (e.AllTokens = function () {
              return new e(new o());
            }),
            (e.prototype.GetTokens = function () {
              return this.tokenAccess.GetTokens();
            }),
            (e.prototype.Contains = function (e) {
              return this.tokenAccess.Contains(e);
            }),
            (e.prototype.toString = function () {
              return this.tokenAccess.toString();
            }),
            (e.Any = e.AllTokens()),
            (e.AnyIncludingMultilineComments = e.FromTokens(
              e.Any.GetTokens().concat([6])
            )),
            (e.Keywords = e.FromRange(15, 69)),
            (e.Operators = e.FromRange(78, 119)),
            (e.BinaryOperators = e.FromRange(80, 119)),
            (e.BinaryKeywordOperators = e.FromTokens([29, 30])),
            (e.ReservedKeywords = e.FromRange(51, 59)),
            (e.UnaryPrefixOperators = e.FromTokens([93, 94, 102, 101])),
            (e.UnaryPrefixExpressions = e.FromTokens([
              13,
              11,
              72,
              74,
              70,
              35,
              31,
            ])),
            (e.UnaryPreincrementExpressions = e.FromTokens([11, 72, 35, 31])),
            (e.UnaryPostincrementExpressions = e.FromTokens([11, 73, 75, 31])),
            (e.UnaryPredecrementExpressions = e.FromTokens([11, 72, 35, 31])),
            (e.UnaryPostdecrementExpressions = e.FromTokens([11, 73, 75, 31])),
            (e.Comments = e.FromTokens([7, 6])),
            (e.TypeNames = e.FromTokens([11, 67, 69, 61, 41, 60])),
            e
          );
        })();
        t.TokenRange = s;
      })(t.Shared || (t.Shared = {}));
      t.Shared;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function (e) {
        function t(t, n, r) {
          e.call(this, n, r), (this._kind = t);
        }
        return (
          __extends(t, e),
          (t.prototype.kind = function () {
            return this._kind;
          }),
          t
        );
      })(e.TextSpan);
      t.TokenSpan = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t(e, t, n, r, i) {
          this.update(e, t, n, r, i);
        }
        return (
          (t.prototype.parent = function () {
            return this._parent;
          }),
          (t.prototype.node = function () {
            return this._node;
          }),
          (t.prototype.fullStart = function () {
            return this._fullStart;
          }),
          (t.prototype.fullWidth = function () {
            return this._node.fullWidth();
          }),
          (t.prototype.start = function () {
            return this._fullStart + this._node.leadingTriviaWidth();
          }),
          (t.prototype.end = function () {
            return (
              this._fullStart +
              this._node.leadingTriviaWidth() +
              this._node.width()
            );
          }),
          (t.prototype.indentationAmount = function () {
            return this._indentationAmount;
          }),
          (t.prototype.childIndentationAmountDelta = function () {
            return this._childIndentationAmountDelta;
          }),
          (t.prototype.depth = function () {
            return this._depth;
          }),
          (t.prototype.kind = function () {
            return this._node.kind();
          }),
          (t.prototype.hasSkippedOrMissingTokenChild = function () {
            return (
              null === this._hasSkippedOrMissingTokenChild &&
                (this._hasSkippedOrMissingTokenChild = e.Syntax.nodeHasSkippedOrMissingTokens(
                  this._node
                )),
              this._hasSkippedOrMissingTokenChild
            );
          }),
          (t.prototype.clone = function (e) {
            var t = null;
            return (
              this._parent && (t = this._parent.clone(e)),
              e.getNode(
                t,
                this._node,
                this._fullStart,
                this._indentationAmount,
                this._childIndentationAmountDelta
              )
            );
          }),
          (t.prototype.update = function (e, t, n, r, i) {
            (this._parent = e),
              (this._node = t),
              (this._fullStart = n),
              (this._indentationAmount = r),
              (this._childIndentationAmountDelta = i),
              (this._hasSkippedOrMissingTokenChild = null),
              (this._depth = e ? e.depth() + 1 : 0);
          }),
          t
        );
      })();
      t.IndentationNodeContext = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function () {
        function t() {
          this.nodes = [];
        }
        return (
          (t.prototype.getNode = function (t, n, r, i, o) {
            if (this.nodes.length > 0) {
              var s = this.nodes.pop();
              return s.update(t, n, r, i, o), s;
            }
            return new e.Services.Formatting.IndentationNodeContext(
              t,
              n,
              r,
              i,
              o
            );
          }),
          (t.prototype.releaseNode = function (e, t) {
            if (("undefined" == typeof t && (t = !1), this.nodes.push(e), t)) {
              var n = e.parent();
              n && this.releaseNode(n, t);
            }
          }),
          t
        );
      })();
      t.IndentationNodeContextPool = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function (t) {
        function n(n, r, i, o, s) {
          t.call(this),
            (this.options = s),
            (this._position = 0),
            (this._parent = null),
            (this._indentationNodeContextPool = new e.Services.Formatting.IndentationNodeContextPool()),
            (this._textSpan = n),
            (this._snapshot = i),
            (this._parent = this._indentationNodeContextPool.getNode(
              null,
              r,
              0,
              0,
              0
            )),
            (this._lastTriviaWasNewLine = o);
        }
        return (
          __extends(n, t),
          (n.prototype.position = function () {
            return this._position;
          }),
          (n.prototype.parent = function () {
            return this._parent;
          }),
          (n.prototype.textSpan = function () {
            return this._textSpan;
          }),
          (n.prototype.snapshot = function () {
            return this._snapshot;
          }),
          (n.prototype.indentationNodeContextPool = function () {
            return this._indentationNodeContextPool;
          }),
          (n.prototype.forceIndentNextToken = function (e) {
            (this._lastTriviaWasNewLine = !0),
              this.forceRecomputeIndentationOfParent(e, !0);
          }),
          (n.prototype.forceSkipIndentingNextToken = function (e) {
            (this._lastTriviaWasNewLine = !1),
              this.forceRecomputeIndentationOfParent(e, !1);
          }),
          (n.prototype.indentToken = function () {
            throw e.Errors.abstract();
          }),
          (n.prototype.visitTokenInSpan = function (e) {
            if (this._lastTriviaWasNewLine) {
              var t = this.getTokenIndentationAmount(e),
                n = this.getCommentIndentationAmount(e);
              this.indentToken(e, t, n);
            }
          }),
          (n.prototype.visitToken = function (t) {
            var n = new e.TextSpan(this._position, t.fullWidth());
            if (n.intersectsWithTextSpan(this._textSpan)) {
              this.visitTokenInSpan(t);
              var r = t.trailingTrivia();
              this._lastTriviaWasNewLine =
                t.hasTrailingNewLine() &&
                5 == r.syntaxTriviaAt(r.count() - 1).kind();
            }
            this._position += t.fullWidth();
          }),
          (n.prototype.visitNode = function (t) {
            var n = new e.TextSpan(this._position, t.fullWidth());
            if (n.intersectsWithTextSpan(this._textSpan)) {
              var r = this.getNodeIndentation(t),
                i = this._parent;
              (this._parent = this._indentationNodeContextPool.getNode(
                i,
                t,
                this._position,
                r.indentationAmount,
                r.indentationAmountDelta
              )),
                t.accept(this),
                this._indentationNodeContextPool.releaseNode(this._parent),
                (this._parent = i);
            } else this._position += t.fullWidth();
          }),
          (n.prototype.getTokenIndentationAmount = function (e) {
            return this._parent.node().firstToken() === e ||
              70 === e.kind() ||
              71 === e.kind() ||
              74 === e.kind() ||
              75 === e.kind() ||
              (42 === e.kind() && 161 == this._parent.node().kind())
              ? this._parent.indentationAmount()
              : this._parent.indentationAmount() +
                  this._parent.childIndentationAmountDelta();
          }),
          (n.prototype.getCommentIndentationAmount = function (e) {
            return 71 === e.kind() || 75 === e.kind()
              ? this._parent.indentationAmount() +
                  this._parent.childIndentationAmountDelta()
              : this._parent.indentationAmount();
          }),
          (n.prototype.getNodeIndentation = function (t, n) {
            var r,
              i = this._parent;
            if (this._textSpan.containsPosition(i.start()))
              r = i.indentationAmount();
            else {
              146 !== i.kind() ||
                this.shouldIndentBlockInParent(this._parent.parent()) ||
                (i = this._parent.parent());
              var o = this._snapshot.getLineFromPosition(i.start()).getText(),
                s = e.Indentation.firstNonWhitespacePosition(o);
              r = e.Indentation.columnForPositionInString(o, s, this.options);
            }
            var a,
              l,
              c = i.childIndentationAmountDelta(),
              u = i.node();
            switch (t.kind()) {
              default:
                (a = r + c), (l = 0);
                break;
              case 131:
              case 130:
              case 122:
              case 132:
              case 151:
              case 215:
              case 137:
              case 129:
              case 222:
              case 135:
              case 139:
              case 140:
              case 138:
              case 236:
              case 214:
              case 124:
              case 221:
              case 144:
              case 154:
              case 155:
              case 158:
              case 161:
              case 163:
              case 233:
              case 234:
              case 150:
              case 157:
              case 219:
              case 218:
              case 224:
              case 134:
              case 213:
              case 216:
              case 142:
              case 143:
                (a = r + c), (l = this.options.indentSpaces);
                break;
              case 147:
                (a =
                  235 !== i.kind() ||
                  u.elseKeyword.hasTrailingNewLine() ||
                  t.ifKeyword.hasLeadingNewLine()
                    ? r + c
                    : r),
                  (l = this.options.indentSpaces);
                break;
              case 235:
                (a = r), (l = this.options.indentSpaces);
                break;
              case 146:
                (a = this.shouldIndentBlockInParent(i) ? r + c : r),
                  (l = this.options.indentSpaces);
            }
            if (u && !n) {
              var p = this._snapshot.getLineNumberFromPosition(i.start()),
                h = this._snapshot.getLineNumberFromPosition(
                  this._position + t.leadingTriviaWidth()
                );
              (p === h || n === !1) &&
                ((a = r), (l = Math.min(this.options.indentSpaces, c + l)));
            }
            return { indentationAmount: a, indentationAmountDelta: l };
          }),
          (n.prototype.shouldIndentBlockInParent = function (e) {
            switch (e.kind()) {
              case 120:
              case 130:
              case 146:
              case 233:
              case 234:
                return !0;
              default:
                return !1;
            }
          }),
          (n.prototype.forceRecomputeIndentationOfParent = function (e, t) {
            var n = this._parent;
            if (n.fullStart() === e) {
              this._parent = n.parent();
              var r = this.getNodeIndentation(n.node(), t);
              n.update(
                n.parent(),
                n.node(),
                n.fullStart(),
                r.indentationAmount,
                r.indentationAmountDelta
              ),
                (this._parent = n);
            }
          }),
          n
        );
      })(e.SyntaxWalker);
      t.IndentationTrackingWalker = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function (t) {
        function n(e, n, r, i, o) {
          t.call(this, e, n, r, i, o), (this._edits = []);
        }
        return (
          __extends(n, t),
          (n.prototype.indentToken = function (t, n, r) {
            if (
              0 !== t.fullWidth() &&
              !this.parent().hasSkippedOrMissingTokenChild()
            ) {
              var i = new e.TextSpan(
                this.position() + t.leadingTriviaWidth(),
                t.width()
              );
              if (this.textSpan().containsTextSpan(i)) {
                var o = e.Indentation.indentationString(n, this.options),
                  s = e.Indentation.indentationString(r, this.options);
                this.recordIndentationEditsForToken(t, o, s);
              }
            }
          }),
          (n.prototype.edits = function () {
            return this._edits;
          }),
          (n.prototype.recordEdit = function (t, n, r) {
            this._edits.push(new e.Services.Formatting.TextEditInfo(t, n, r));
          }),
          (n.prototype.recordIndentationEditsForToken = function (t, n, r) {
            var i = this.position(),
              o = !0,
              s = "",
              a = t.leadingTrivia();
            if (a)
              for (var l = 0, c = a.count(); c > l; l++, i += u.fullWidth()) {
                var u = a.syntaxTriviaAt(l);
                if (
                  this.textSpan().containsTextSpan(
                    new e.TextSpan(i, u.fullWidth())
                  )
                )
                  switch (u.kind()) {
                    case 6:
                      this.recordIndentationEditsForMultiLineComment(
                        u,
                        i,
                        r,
                        s,
                        !o
                      ),
                        (o = !1),
                        (s = "");
                      break;
                    case 7:
                    case 8:
                      o &&
                        (this.recordIndentationEditsForSingleLineOrSkippedText(
                          u,
                          i,
                          r
                        ),
                        (o = !1));
                      break;
                    case 4:
                      var p = c > l + 1 && a.syntaxTriviaAt(l + 1),
                        h = p && p.isComment() ? r : n;
                      o &&
                        ((p && p.isNewLine()) ||
                          this.recordIndentationEditsForWhitespace(u, i, h),
                        (o = !1)),
                        (s += u.fullText());
                      break;
                    case 5:
                      (o = !0), (s = "");
                      break;
                    default:
                      throw e.Errors.invalidOperation();
                  }
              }
            10 !== t.kind() && o && n.length > 0 && this.recordEdit(i, 0, n);
          }),
          (n.prototype.recordIndentationEditsForSingleLineOrSkippedText = function (
            e,
            t,
            n
          ) {
            n.length > 0 && this.recordEdit(t, 0, n);
          }),
          (n.prototype.recordIndentationEditsForWhitespace = function (
            e,
            t,
            n
          ) {
            var r = e.fullText();
            n !== r && this.recordEdit(t, r.length, n);
          }),
          (n.prototype.recordIndentationEditsForMultiLineComment = function (
            t,
            n,
            r,
            i,
            o
          ) {
            var s = n,
              a = e.Syntax.splitMultiLineCommentTriviaIntoMultipleLines(t);
            if (a.length <= 1)
              return (
                o ||
                  this.recordIndentationEditsForSingleLineOrSkippedText(
                    t,
                    n,
                    r
                  ),
                void 0
              );
            var l = e.Indentation.columnForPositionInString(
                i,
                i.length,
                this.options
              ),
              c = e.Indentation.columnForPositionInString(
                r,
                r.length,
                this.options
              ),
              u = 0;
            o && ((u = 1), (s += a[0].length));
            for (var p = u; p < a.length; p++) {
              var h = a[p];
              this.recordIndentationEditsForSegment(h, s, c, l),
                (s += h.length);
            }
          }),
          (n.prototype.recordIndentationEditsForSegment = function (
            t,
            n,
            r,
            i
          ) {
            var o = e.Indentation.firstNonWhitespacePosition(t),
              s = e.Indentation.columnForPositionInString(t, o, this.options),
              a = s - i,
              l = r + a;
            0 > l && (l = 0);
            var c = e.Indentation.indentationString(l, this.options);
            (o < t.length &&
              e.CharacterInfo.isLineTerminator(t.charCodeAt(o))) ||
              (c !== t.substring(0, o) && this.recordEdit(n, o, c));
          }),
          n
        );
      })(e.Services.Formatting.IndentationTrackingWalker);
      t.MultipleTokenIndenter = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function (t) {
        function n(n, r, i, o, s) {
          t.call(this, new e.TextSpan(n, 1), r, i, o, s),
            (this.indentationAmount = null),
            (this.indentationPosition = n);
        }
        return (
          __extends(n, t),
          (n.getIndentationAmount = function (e, t, r, i) {
            var o = new n(e, t, r, !0, i);
            return t.accept(o), o.indentationAmount;
          }),
          (n.prototype.indentToken = function (e, t, n) {
            this.indentationAmount =
              0 === e.fullWidth() ||
              this.indentationPosition - this.position() <
                e.leadingTriviaWidth()
                ? n
                : t;
          }),
          n
        );
      })(e.Services.Formatting.IndentationTrackingWalker);
      t.SingleTokenIndenter = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      var n = (function (t) {
        function n(n, r, i, o, s, a, l) {
          t.call(this, n, r, s, i, o),
            (this.previousTokenSpan = null),
            (this.previousTokenParent = null),
            (this.scriptHasErrors = !1),
            (this.previousTokenParent = this.parent().clone(
              this.indentationNodeContextPool()
            )),
            (this.rulesProvider = a),
            (this.formattingRequestKind = l),
            (this.formattingContext = new e.Services.Formatting.FormattingContext(
              this.snapshot(),
              this.formattingRequestKind
            ));
        }
        return (
          __extends(n, t),
          (n.getEdits = function (e, t, r, i, o, s, a) {
            var l = new n(e, t, i, r, o, s, a);
            return t.accept(l), l.edits();
          }),
          (n.prototype.visitTokenInSpan = function (n) {
            if (0 !== n.fullWidth()) {
              var r = new e.TextSpan(
                this.position() + n.leadingTriviaWidth(),
                n.width()
              );
              this.textSpan().containsTextSpan(r) && this.processToken(n);
            }
            t.prototype.visitTokenInSpan.call(this, n);
          }),
          (n.prototype.processToken = function (t) {
            var n = this.position();
            0 !== t.leadingTriviaWidth() &&
              (this.processTrivia(t.leadingTrivia(), n),
              (n += t.leadingTriviaWidth()));
            var r = new e.Services.Formatting.TokenSpan(t.kind(), n, t.width());
            this.parent().hasSkippedOrMissingTokenChild() ||
              (this.previousTokenSpan
                ? this.formatPair(
                    this.previousTokenSpan,
                    this.previousTokenParent,
                    r,
                    this.parent()
                  )
                : this.trimWhitespaceInLineRange(
                    this.getLineNumber(this.textSpan()),
                    this.getLineNumber(r)
                  )),
              (this.previousTokenSpan = r),
              this.previousTokenParent &&
                this.indentationNodeContextPool().releaseNode(
                  this.previousTokenParent,
                  !0
                ),
              (this.previousTokenParent = this.parent().clone(
                this.indentationNodeContextPool()
              )),
              (n += t.width()),
              0 !== t.trailingTriviaWidth() &&
                this.processTrivia(t.trailingTrivia(), n);
          }),
          (n.prototype.processTrivia = function (t, n) {
            for (var r = n, i = 0, o = t.count(); o > i; i++) {
              var s = t.syntaxTriviaAt(i);
              if (s.isComment() || s.isSkippedToken()) {
                var a = new e.Services.Formatting.TokenSpan(
                  s.kind(),
                  r,
                  s.fullWidth()
                );
                if (this.textSpan().containsTextSpan(a)) {
                  if (s.isComment() && this.previousTokenSpan)
                    this.formatPair(
                      this.previousTokenSpan,
                      this.previousTokenParent,
                      a,
                      this.parent()
                    );
                  else {
                    var l = this.getLineNumber(
                      this.previousTokenSpan || this.textSpan()
                    );
                    this.trimWhitespaceInLineRange(l, this.getLineNumber(a));
                  }
                  (this.previousTokenSpan = a),
                    this.previousTokenParent &&
                      this.indentationNodeContextPool().releaseNode(
                        this.previousTokenParent,
                        !0
                      ),
                    (this.previousTokenParent = this.parent().clone(
                      this.indentationNodeContextPool()
                    ));
                }
              }
              r += s.fullWidth();
            }
          }),
          (n.prototype.findCommonParents = function (t, n) {
            var r, i, o, s;
            for (
              t.depth() < n.depth()
                ? ((r = t), (i = t.depth()), (o = n), (s = n.depth()))
                : ((r = n), (i = n.depth()), (o = t), (s = t.depth())),
                e.Debug.assert(i >= 0, "Expected shallowParentDepth >= 0"),
                e.Debug.assert(s >= 0, "Expected deepParentDepth >= 0"),
                e.Debug.assert(
                  s >= i,
                  "Expected deepParentDepth >= shallowParentDepth"
                );
              s > i;

            )
              (o = o.parent()), s--;
            for (
              e.Debug.assert(
                s === i,
                "Expected deepParentDepth === shallowParentDepth"
              );
              o.node() && r.node();

            ) {
              if (o.node() === r.node()) return o;
              (o = o.parent()), (r = r.parent());
            }
            throw e.Errors.invalidOperation();
          }),
          (n.prototype.formatPair = function (e, t, n, r) {
            var i = this.getLineNumber(e),
              o = this.getLineNumber(n),
              s = this.findCommonParents(t, r);
            this.formattingContext.updateContext(e, t, n, r, s);
            var a = this.rulesProvider
              .getRulesMap()
              .GetRule(this.formattingContext);
            null != a &&
              (this.RecordRuleEdits(a, e, n),
              (1 != a.Operation.Action && 3 != a.Operation.Action) ||
                i == o ||
                this.forceSkipIndentingNextToken(n.start()),
              2 == a.Operation.Action &&
                i == o &&
                this.forceIndentNextToken(n.start())),
              i == o ||
                (a && (3 == a.Operation.Action || 1 == a.Flag)) ||
                this.trimWhitespaceInLineRange(i, o, e);
          }),
          (n.prototype.getLineNumber = function (e) {
            return this.snapshot().getLineNumberFromPosition(e.start());
          }),
          (n.prototype.trimWhitespaceInLineRange = function (e, t, n) {
            for (var r = e; t > r; ++r) {
              var i = this.snapshot().getLineFromLineNumber(r);
              this.trimWhitespace(i, n);
            }
          }),
          (n.prototype.trimWhitespace = function (t, n) {
            if (
              !(
                n &&
                (6 == n.kind() || 7 == n.kind()) &&
                n.start() <= t.endPosition() &&
                n.end() >= t.endPosition()
              )
            ) {
              var r = t.getText(),
                i = 0;
              for (
                i = r.length - 1;
                i >= 0 && e.CharacterInfo.isWhitespace(r.charCodeAt(i));
                --i
              );
              ++i,
                i < r.length &&
                  this.recordEdit(t.startPosition() + i, t.length() - i, "");
            }
          }),
          (n.prototype.RecordRuleEdits = function (t, n, r) {
            if (0 != t.Operation.Action) {
              var i;
              switch (t.Operation.Action) {
                case 3:
                  if (
                    ((i = new e.TextSpan(n.end(), r.start() - n.end())),
                    i.length() > 0)
                  )
                    return this.recordEdit(i.start(), i.length(), ""), void 0;
                  break;
                case 2:
                  if (
                    1 != t.Flag &&
                    this.getLineNumber(n) != this.getLineNumber(r)
                  )
                    return;
                  i = new e.TextSpan(n.end(), r.start() - n.end());
                  var o = !1,
                    s = this.snapshot().getText(i),
                    a = s.indexOf(this.options.newLineCharacter);
                  if (
                    (0 > a
                      ? (o = !0)
                      : ((a = s.indexOf(this.options.newLineCharacter, a + 1)),
                        a >= 0 && (o = !0)),
                    o)
                  )
                    return (
                      this.recordEdit(
                        i.start(),
                        i.length(),
                        this.options.newLineCharacter
                      ),
                      void 0
                    );
                  break;
                case 1:
                  if (
                    1 != t.Flag &&
                    this.getLineNumber(n) != this.getLineNumber(r)
                  )
                    return;
                  if (
                    ((i = new e.TextSpan(n.end(), r.start() - n.end())),
                    i.length() > 1 || " " != this.snapshot().getText(i))
                  )
                    return this.recordEdit(i.start(), i.length(), " "), void 0;
              }
            }
          }),
          n
        );
      })(e.Services.Formatting.MultipleTokenIndenter);
      t.Formatter = n;
    })(t.Formatting || (t.Formatting = {}));
    t.Formatting;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var debugObjectHost = this,
  TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t(e) {
        this.host = e;
      }
      return (
        (t.prototype.getPreProcessedFileInfo = function (t, n) {
          return e.preProcessFile(t, n);
        }),
        (t.prototype.getDefaultCompilationSettings = function () {
          var t = new e.CompilationSettings();
          return (t.codeGenTarget = 1), t;
        }),
        (t.prototype.dumpMemory = function () {
          if (
            !debugObjectHost ||
            !debugObjectHost.Debug ||
            !debugObjectHost.Debug.dumpHeap
          )
            throw new Error(
              e.getDiagnosticMessage(
                e.DiagnosticCode
                  .This_version_of_the_Javascript_runtime_does_not_support_the_0_function,
                ["Debug.dumpHeap()"]
              )
            );
          for (
            var t = debugObjectHost.Debug.dumpHeap(2), n = 0, r = 0;
            r < t.length;
            r++
          )
            n += t[r].size;
          return (
            "There are " +
            t.length +
            " object(s) accessible from 'global', for a total of " +
            n +
            " byte(s)."
          );
        }),
        (t.prototype.getMemoryInfo = function () {
          if (
            !debugObjectHost ||
            !debugObjectHost.Debug ||
            !debugObjectHost.Debug.getMemoryInfo
          )
            throw new Error(
              e.getDiagnosticMessage(
                e.DiagnosticCode
                  .This_version_of_the_Javascript_runtime_does_not_support_the_0_function,
                ["Debug.getMemoryInfo()"]
              )
            );
          return debugObjectHost.Debug.getMemoryInfo();
        }),
        (t.prototype.collectGarbage = function () {
          if (!debugObjectHost || !debugObjectHost.CollectGarbage)
            throw new Error(
              e.getDiagnosticMessage(
                e.DiagnosticCode
                  .This_version_of_the_Javascript_runtime_does_not_support_the_0_function,
                ["collectGarbage()"]
              )
            );
          debugObjectHost.CollectGarbage();
        }),
        t
      );
    })();
    t.CoreServices = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
        function e(e, t, n, r, i) {
          (this.fileName = e),
            (this.host = t),
            (this.version = n),
            (this.isOpen = r),
            (this.byteOrderMark = i),
            (this._sourceText = null);
        }
        return (
          (e.prototype.getScriptSnapshot = function () {
            return (
              null === this._sourceText &&
                (this._sourceText = this.host.getScriptSnapshot(this.fileName)),
              this._sourceText
            );
          }),
          e
        );
      })(),
      r = (function () {
        function t(t) {
          this._fileNameToEntry = new e.StringHashTable();
          for (
            var r = t.getScriptFileNames(), i = 0, o = r.length;
            o > i;
            i++
          ) {
            var s = r[i];
            this._fileNameToEntry.add(
              e.switchToForwardSlashes(s),
              new n(
                s,
                t,
                t.getScriptVersion(s),
                t.getScriptIsOpen(s),
                t.getScriptByteOrderMark(s)
              )
            );
          }
          var a = t.getCompilationSettings();
          a || ((a = new e.CompilationSettings()), (a.codeGenTarget = 1)),
            (this._compilationSettings = e.ImmutableCompilationSettings.fromCompilationSettings(
              a
            ));
        }
        return (
          (t.prototype.compilationSettings = function () {
            return this._compilationSettings;
          }),
          (t.prototype.contains = function (t) {
            return (
              null !== this._fileNameToEntry.lookup(e.switchToForwardSlashes(t))
            );
          }),
          (t.prototype.getHostFileName = function (t) {
            var n = this._fileNameToEntry.lookup(e.switchToForwardSlashes(t));
            return n ? n.fileName : t;
          }),
          (t.prototype.getFileNames = function () {
            return this._fileNameToEntry.getAllKeys();
          }),
          (t.prototype.getVersion = function (t) {
            return this._fileNameToEntry.lookup(e.switchToForwardSlashes(t))
              .version;
          }),
          (t.prototype.isOpen = function (t) {
            return this._fileNameToEntry.lookup(e.switchToForwardSlashes(t))
              .isOpen;
          }),
          (t.prototype.getByteOrderMark = function (t) {
            return this._fileNameToEntry.lookup(e.switchToForwardSlashes(t))
              .byteOrderMark;
          }),
          (t.prototype.getScriptSnapshot = function (t) {
            return this._fileNameToEntry
              .lookup(e.switchToForwardSlashes(t))
              .getScriptSnapshot();
          }),
          (t.prototype.getScriptTextChangeRangeSinceVersion = function (t, n) {
            var r = this.getVersion(t);
            if (n === r) return e.TextChangeRange.unchanged;
            var i = this.getScriptSnapshot(t);
            return i.getTextChangeRangeSinceVersion(n);
          }),
          t
        );
      })(),
      i = (function () {
        function t(e) {
          (this._host = e),
            (this._currentFileName = ""),
            (this._currentFileVersion = -1),
            (this._currentFileSyntaxTree = null),
            (this._currentFileScriptSnapshot = null),
            (this._hostCache = new r(e));
        }
        return (
          (t.prototype.getCurrentFileSyntaxTree = function (e) {
            this._hostCache = new r(this._host);
            var t = this._hostCache.getVersion(e),
              n = null;
            if (
              null === this._currentFileSyntaxTree ||
              this._currentFileName !== e
            ) {
              var i = this._hostCache.getScriptSnapshot(e);
              n = this.createSyntaxTree(e, i);
            } else if (this._currentFileVersion !== t) {
              var i = this._hostCache.getScriptSnapshot(e);
              n = this.updateSyntaxTree(
                e,
                i,
                this._currentFileSyntaxTree,
                this._currentFileVersion
              );
            }
            return (
              null !== n &&
                ((this._currentFileScriptSnapshot = i),
                (this._currentFileVersion = t),
                (this._currentFileName = e),
                (this._currentFileSyntaxTree = n)),
              this._currentFileSyntaxTree
            );
          }),
          (t.prototype.createSyntaxTree = function (t, n) {
            var r = e.SimpleText.fromScriptSnapshot(n),
              i = e.Parser.parse(
                t,
                r,
                e.isDTSFile(t),
                e.getParseOptions(
                  e.ImmutableCompilationSettings.defaultSettings()
                )
              );
            return i;
          }),
          (t.prototype.updateSyntaxTree = function (t, n, r, i) {
            var o = this._hostCache.getScriptTextChangeRangeSinceVersion(t, i);
            if (null === o) return this.createSyntaxTree(t, n);
            var s = e.Parser.incrementalParse(
              r,
              o,
              e.SimpleText.fromScriptSnapshot(n)
            );
            return (
              this.ensureInvariants(
                t,
                o,
                s,
                this._currentFileScriptSnapshot,
                n
              ),
              s
            );
          }),
          (t.prototype.ensureInvariants = function (t, n, r, i, o) {
            function s() {
              function e(e) {
                return (
                  '"' + e.replace(/\r/g, "\\r").replace(/\n/g, "\\n") + '"'
                );
              }
              var t = [
                  "expected length:",
                  a,
                  "and actual length:",
                  l,
                  "are not equal\r\n",
                ],
                r = n.span();
              t.push(
                "Edit range (old text) (start: " +
                  r.start() +
                  ", end: " +
                  r.end() +
                  ") \r\n"
              ),
                t.push(
                  "Old text edit range contents: " +
                    e(i.getText(r.start(), r.end()))
                );
              var s = n.newSpan();
              return (
                t.push(
                  "Edit range (new text) (start: " +
                    s.start() +
                    ", end: " +
                    s.end() +
                    ") \r\n"
                ),
                t.push(
                  "New text edit range contents: " +
                    e(o.getText(s.start(), s.end()))
                ),
                t.join(" ")
              );
            }
            var a = i.getLength() - n.span().length() + n.newLength(),
              l = o.getLength();
            if (
              (e.Debug.assert(
                a === l,
                "Expected length is different from actual!",
                s
              ),
              e.Debug.shouldAssert(3))
            ) {
              var c = i.getText(0, n.span().start()),
                u = o.getText(0, n.span().start());
              e.Debug.assert(c === u, "Expected equal prefix texts!");
              var p = i.getText(n.span().end(), i.getLength()),
                h = o.getText(n.newSpan().end(), o.getLength());
              e.Debug.assert(p === h, "Expected equal suffix texts!");
              var d = this.createSyntaxTree(t, o);
              e.Debug.assert(
                d.structuralEquals(r),
                "Expected equal incremental and normal trees"
              );
              var m = r.sourceUnit().fullText(),
                f = o.getText(0, o.getLength());
              e.Debug.assert(m === f, "Expected full texts to be equal");
            }
          }),
          t
        );
      })();
    t.SyntaxTreeCache = i;
    var o = (function () {
      function t(e) {
        (this.host = e),
          (this.compiler = null),
          (this.hostCache = null),
          (this.logger = this.host);
      }
      return (
        (t.prototype.synchronizeHostData = function () {
          var t = this;
          e.timeFunction(this.logger, "synchronizeHostData()", function () {
            t.synchronizeHostDataWorker();
          });
        }),
        (t.prototype.synchronizeHostDataWorker = function () {
          this.hostCache = new r(this.host);
          var t = this.hostCache.compilationSettings();
          null === this.compiler &&
            (this.compiler = new e.TypeScriptCompiler(this.logger, t)),
            this.compiler.setCompilationSettings(t);
          for (
            var n = this.compiler.fileNames(), i = 0, o = n.length;
            o > i;
            i++
          ) {
            var s = n[i];
            this.hostCache.contains(s) || this.compiler.removeFile(s);
          }
          for (
            var a = this.hostCache, l = a.getFileNames(), i = 0, o = l.length;
            o > i;
            i++
          ) {
            var s = l[i];
            this.compiler.getDocument(s)
              ? this.tryUpdateFile(this.compiler, s)
              : this.compiler.addFile(
                  s,
                  a.getScriptSnapshot(s),
                  a.getByteOrderMark(s),
                  a.getVersion(s),
                  a.isOpen(s)
                );
          }
        }),
        (t.prototype.tryUpdateFile = function (e, t) {
          var n = this.compiler.getDocument(t),
            r = this.hostCache.getVersion(t),
            i = this.hostCache.isOpen(t);
          if (n.version !== r || n.isOpen !== i) {
            var o = null;
            n.isOpen &&
              i &&
              (o = this.hostCache.getScriptTextChangeRangeSinceVersion(
                t,
                n.version
              )),
              e.updateFile(t, this.hostCache.getScriptSnapshot(t), r, i, o);
          }
        }),
        (t.prototype.getScriptSnapshot = function (e) {
          return (
            this.synchronizeHostData(), this.hostCache.getScriptSnapshot(e)
          );
        }),
        (t.prototype.getCachedHostFileName = function (e) {
          return (
            this.hostCache || this.synchronizeHostData(),
            this.hostCache.getHostFileName(e)
          );
        }),
        (t.prototype.getCachedTopLevelDeclaration = function (e) {
          return (
            this.hostCache || this.synchronizeHostData(),
            this.compiler.topLevelDeclaration(e)
          );
        }),
        (t.prototype.compilationSettings = function () {
          return (
            this.synchronizeHostData(), this.compiler.compilationSettings()
          );
        }),
        (t.prototype.fileNames = function () {
          return this.synchronizeHostData(), this.compiler.fileNames();
        }),
        (t.prototype.cleanupSemanticCache = function () {
          this.compiler.cleanupSemanticCache();
        }),
        (t.prototype.getDocument = function (e) {
          return this.synchronizeHostData(), this.compiler.getDocument(e);
        }),
        (t.prototype.getSyntacticDiagnostics = function (e) {
          return (
            this.synchronizeHostData(), this.compiler.getSyntacticDiagnostics(e)
          );
        }),
        (t.prototype.getSemanticDiagnostics = function (e) {
          return (
            this.synchronizeHostData(), this.compiler.getSemanticDiagnostics(e)
          );
        }),
        (t.prototype.getCompilerOptionsDiagnostics = function () {
          return (
            this.synchronizeHostData(),
            this.compiler.getCompilerOptionsDiagnostics()
          );
        }),
        (t.prototype.getSymbolInformationFromAST = function (e, t) {
          return (
            this.synchronizeHostData(),
            this.compiler.pullGetSymbolInformationFromAST(e, t)
          );
        }),
        (t.prototype.getCallInformationFromAST = function (e, t) {
          return (
            this.synchronizeHostData(),
            this.compiler.pullGetCallInformationFromAST(e, t)
          );
        }),
        (t.prototype.getVisibleMemberSymbolsFromAST = function (e, t) {
          return (
            this.synchronizeHostData(),
            this.compiler.pullGetVisibleMemberSymbolsFromAST(e, t)
          );
        }),
        (t.prototype.getVisibleDeclsFromAST = function (e, t) {
          return (
            this.synchronizeHostData(),
            this.compiler.pullGetVisibleDeclsFromAST(e, t)
          );
        }),
        (t.prototype.getContextualMembersFromAST = function (e, t) {
          return (
            this.synchronizeHostData(),
            this.compiler.pullGetContextualMembersFromAST(e, t)
          );
        }),
        (t.prototype.pullGetDeclInformation = function (e, t, n) {
          return (
            this.synchronizeHostData(),
            this.compiler.pullGetDeclInformation(e, t, n)
          );
        }),
        (t.prototype.topLevelDeclaration = function (e) {
          return (
            this.synchronizeHostData(), this.compiler.topLevelDeclaration(e)
          );
        }),
        (t.prototype.getDeclForAST = function (e) {
          return this.synchronizeHostData(), this.compiler.getDeclForAST(e);
        }),
        (t.prototype.emit = function (e, t) {
          return this.synchronizeHostData(), this.compiler.emit(e, t);
        }),
        (t.prototype.emitDeclarations = function (e, t) {
          return (
            this.synchronizeHostData(), this.compiler.emitDeclarations(e, t)
          );
        }),
        (t.prototype.canEmitDeclarations = function (e) {
          return (
            this.synchronizeHostData(), this.compiler.canEmitDeclarations(e)
          );
        }),
        t
      );
    })();
    t.LanguageServiceCompiler = o;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t() {}
      return (
        (t.getSpan = function (t) {
          return new e.TextSpan(t.start(), t.width());
        }),
        (t.symbolDeclarationIntersectsPosition = function (e, t, n) {
          var r = e.getDeclarations()[0];
          return r.fileName() === t &&
            this.getSpan(r.ast()).intersectsWithPosition(n)
            ? !0
            : !1;
        }),
        (t.filterContextualMembersList = function (t, n, r, i) {
          if (!n || !n.symbols || 0 === n.symbols.length) return t;
          for (
            var o = n.symbols,
              s = e.createIntrinsicsObject(),
              a = 0,
              l = o.length;
            l > a;
            a++
          )
            this.symbolDeclarationIntersectsPosition(o[a], r, i) ||
              (s[e.stripStartAndEndQuotes(o[a].getDisplayName())] = !0);
          for (var c = [], u = 0, p = t.length; p > u; u++) {
            var h = t[u];
            if (!s[e.stripStartAndEndQuotes(h.getDisplayName())]) {
              if (this.symbolDeclarationIntersectsPosition(h, r, i)) continue;
              c.push(h);
            }
          }
          return c;
        }),
        (t.isCompletionListBlocker = function (n, r) {
          return 0 > r || r > n.fullWidth()
            ? !0
            : e.Syntax.isEntirelyInsideComment(n, r) ||
                e.Syntax.isEntirelyInStringOrRegularExpressionLiteral(n, r) ||
                t.isIdentifierDefinitionLocation(n, r) ||
                t.isRightOfIllegalDot(n, r);
        }),
        (t.getContainingObjectLiteralApplicableForCompletion = function (e, n) {
          var r = t.getNonIdentifierCompleteTokenOnLeft(e, n);
          if (r) {
            var i = r.parent();
            switch (r.kind()) {
              case 70:
              case 79:
                if (
                  (i && 2 === i.kind() && (i = i.parent()),
                  i && 215 === i.kind())
                )
                  return i;
            }
          }
          return null;
        }),
        (t.isIdentifierDefinitionLocation = function (e, n) {
          var r = t.getNonIdentifierCompleteTokenOnLeft(e, n);
          if (r) {
            var i = r.containingNode() && r.containingNode().kind();
            switch (r.kind()) {
              case 79:
                return 227 === i || 224 === i || 132 === i;
              case 72:
                return 227 === i || 236 === i;
              case 70:
                return 132 === i;
              case 57:
              case 55:
              case 58:
              case 77:
                return 242 === i;
              case 44:
              case 65:
              case 46:
              case 52:
              case 27:
              case 40:
              case 64:
              case 68:
                return !0;
            }
            switch (r.token().text()) {
              case "class":
              case "interface":
              case "enum":
              case "module":
                return !0;
            }
          }
          return !1;
        }),
        (t.getNonIdentifierCompleteTokenOnLeft = function (e, t) {
          var n = e.findCompleteTokenOnLeft(t, !0);
          return (
            n && t === n.end() && 10 == n.kind() && (n = n.previousToken(!0)),
            n && t === n.end() && 11 === n.kind() && (n = n.previousToken(!0)),
            n
          );
        }),
        (t.isRightOfIllegalDot = function (e, n) {
          var r = t.getNonIdentifierCompleteTokenOnLeft(e, n);
          if (r)
            switch (r.kind()) {
              case 76:
                var i = r.previousToken(!0);
                return i && 13 === i.kind();
              case 13:
                var o = r.token().text();
                return "." === o.charAt(o.length - 1);
            }
          return !1;
        }),
        (t.getValidCompletionEntryDisplayName = function (t) {
          if (t && t.length > 0) {
            var n = t.charCodeAt(0);
            if (
              ((39 === n || 34 === n) && (t = e.stripStartAndEndQuotes(t)),
              e.Scanner.isValidIdentifier(e.SimpleText.fromString(t), 1))
            )
              return t;
          }
          return null;
        }),
        t
      );
    })();
    t.CompletionHelpers = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t() {}
      return (
        (t.getKeywordCompltions = function () {
          if (null === t.keywordCompletions) {
            for (var n = [], r = 0, i = t.keywords.length; i > r; r++) {
              var o = t.keywords[r],
                s = new e.Services.ResolvedCompletionEntry(
                  o,
                  e.Services.ScriptElementKind.keyword,
                  e.Services.ScriptElementKindModifier.none,
                  null,
                  o,
                  null
                );
              n.push(s);
            }
            t.keywordCompletions = n;
          }
          return t.keywordCompletions;
        }),
        (t.keywords = [
          "break",
          "case",
          "catch",
          "class",
          "constructor",
          "continue",
          "debugger",
          "declare",
          "default",
          "delete",
          "do",
          "else",
          "enum",
          "export",
          "extends",
          "false",
          "finally",
          "for",
          "function",
          "get",
          "if",
          "implements",
          "import",
          "in",
          "instanceof",
          "interface",
          "module",
          "new",
          "null",
          "private",
          "public",
          "require",
          "return",
          "set",
          "static",
          "super",
          "switch",
          "this",
          "throw",
          "true",
          "try",
          "typeof",
          "var",
          "while",
          "with",
        ]),
        (t.keywordCompletions = null),
        t
      );
    })();
    t.KeywordCompletions = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t() {}
      return (
        (t.isInPartiallyWrittenTypeArgumentList = function (n, r) {
          var i = n.sourceUnit().findTokenOnLeft(r, !0);
          if (i && e.Syntax.hasAncestorOfKind(i, 229)) return null;
          var o = 0,
            s = 0;
          e: for (; i; ) {
            switch (i.kind()) {
              case 80:
                if (0 === o) {
                  var a = i;
                  if (((i = i.previousToken(!0)), !i || 11 !== i.kind()))
                    break e;
                  return {
                    genericIdentifer: i,
                    lessThanToken: a,
                    argumentIndex: s,
                  };
                }
                if (0 > o) break e;
                o--;
                break;
              case 97:
                o++;
              case 81:
                o++;
                break;
              case 79:
                0 == o && s++;
                break;
              case 71:
                if (((i = t.moveBackUpTillMatchingTokenKind(i, 71, 70)), !i))
                  break e;
                break;
              case 85:
                if (((i = i.previousToken(!0)), !i || 73 !== i.kind())) break e;
                if (
                  ((i = t.moveBackUpTillMatchingTokenKind(i, 73, 72)),
                  i &&
                    81 === i.kind() &&
                    (i = t.moveBackUpTillMatchingTokenKind(i, 81, 80)),
                  i && 31 === i.kind() && (i = i.previousToken(!0)),
                  !i)
                )
                  break e;
                break;
              case 11:
              case 60:
              case 67:
              case 69:
              case 41:
              case 61:
              case 76:
              case 74:
              case 75:
                break;
              default:
                break e;
            }
            i = i.previousToken(!0);
          }
          return null;
        }),
        (t.getSignatureInfoFromSignatureSymbol = function (t, n, r) {
          for (var i = [], o = n.length > 1, s = 0, a = n.length; a > s; s++) {
            var l = n[s];
            if (!o || !l.isDefinition()) {
              var c = new e.Services.FormalSignatureItemInfo(),
                u = [],
                p = l.getScopedNameEx(r).toString();
              p ||
                (t.isType() && !t.isNamedTypeSymbol()) ||
                (p = t.getScopedNameEx(r).toString());
              var h = l.getSignatureTypeNameEx(p, !1, !1, r, !0, !0);
              (c.signatureInfo = e.MemberName.memberNameToString(h, u)),
                (c.docComment = l.docComments());
              var d = 0;
              if (l.isGeneric())
                for (
                  var m = l.getTypeParameters(), f = 0, g = m.length;
                  g > f;
                  f++
                ) {
                  var v = m[f],
                    y = new e.Services.FormalTypeParameterInfo();
                  (y.name = v.getDisplayName()),
                    (y.docComment = v.docComments()),
                    (y.minChar = u[2 * d]),
                    (y.limChar = u[2 * d + 1]),
                    d++,
                    c.typeParameters.push(y);
                }
              for (var b = l.parameters, f = 0, g = b.length; g > f; f++) {
                var _ = b[f],
                  w = new e.Services.FormalParameterInfo();
                (w.isVariable = l.hasVarArgs && f === b.length - 1),
                  (w.name = _.getDisplayName()),
                  (w.docComment = _.docComments()),
                  (w.minChar = u[2 * d]),
                  (w.limChar = u[2 * d + 1]),
                  d++,
                  c.parameters.push(w);
              }
              i.push(c);
            }
          }
          return i;
        }),
        (t.getSignatureInfoFromGenericSymbol = function (t, n) {
          var r = new e.Services.FormalSignatureItemInfo(),
            i = [],
            o = t.getScopedNameEx(n, !1, !0, !1, !0);
          (r.signatureInfo = e.MemberName.memberNameToString(o, i)),
            (r.docComment = t.docComments());
          for (
            var s = t.type, a = s.getTypeParameters(), l = 0, c = a.length;
            c > l;
            l++
          ) {
            var u = a[l],
              p = new e.Services.FormalTypeParameterInfo();
            (p.name = u.getDisplayName()),
              (p.docComment = u.docComments()),
              (p.minChar = i[2 * l]),
              (p.limChar = i[2 * l + 1]),
              r.typeParameters.push(p);
          }
          return [r];
        }),
        (t.getActualSignatureInfoFromCallExpression = function (t, n, r) {
          if (!t) return null;
          var i = new e.Services.ActualSignatureInfo(),
            o = n,
            s = n;
          if (
            (t.argumentList.typeArgumentList &&
              ((o = Math.min(t.argumentList.typeArgumentList.start())),
              (s = Math.max(
                Math.max(
                  t.argumentList.typeArgumentList.start(),
                  t.argumentList.typeArgumentList.end() +
                    t.argumentList.typeArgumentList.trailingTriviaWidth()
                )
              ))),
            t.argumentList.arguments &&
              ((o = Math.min(o, t.argumentList.arguments.start())),
              (s = Math.max(
                s,
                Math.max(
                  t.argumentList.arguments.start(),
                  t.argumentList.arguments.end() +
                    t.argumentList.arguments.trailingTriviaWidth()
                )
              ))),
            (i.parameterMinChar = o),
            (i.parameterLimChar = s),
            (i.currentParameterIsTypeParameter = !1),
            (i.currentParameter = -1),
            r)
          )
            (i.currentParameterIsTypeParameter = !0),
              (i.currentParameter = r.argumentIndex);
          else if (
            t.argumentList.arguments &&
            t.argumentList.arguments.nonSeparatorCount() > 0
          ) {
            i.currentParameter = 0;
            for (
              var a = 0;
              a < t.argumentList.arguments.nonSeparatorCount();
              a++
            )
              n >
                t.argumentList.arguments.nonSeparatorAt(a).end() +
                  t.argumentList.arguments
                    .nonSeparatorAt(a)
                    .trailingTriviaWidth() && i.currentParameter++;
          }
          return i;
        }),
        (t.getActualSignatureInfoFromPartiallyWritenGenericExpression = function (
          t,
          n
        ) {
          var r = new e.Services.ActualSignatureInfo();
          return (
            (r.parameterMinChar = n.lessThanToken.start()),
            (r.parameterLimChar = Math.max(n.lessThanToken.fullEnd(), t)),
            (r.currentParameterIsTypeParameter = !0),
            (r.currentParameter = n.argumentIndex),
            r
          );
        }),
        (t.isSignatureHelpBlocker = function (t, n) {
          return 0 > n || n > t.fullWidth()
            ? !0
            : e.Syntax.isEntirelyInsideComment(t, n);
        }),
        (t.isTargetOfObjectCreationExpression = function (t) {
          var n = e.Syntax.getAncestorOfKind(t, 216);
          if (n) {
            var r = n.element(),
              i = r.newKeyword.fullWidth(),
              o = t.fullStart() - n.fullStart();
            return o >= i && o <= i + r.expression.fullWidth();
          }
          return !1;
        }),
        (t.moveBackUpTillMatchingTokenKind = function (t, n, r) {
          if (!t || t.kind() !== n) throw e.Errors.invalidOperation();
          t = t.previousToken(!0);
          for (var i = 0; t; ) {
            if (t.kind() === r) {
              if (0 === i) return t;
              if (0 > i) break;
              i--;
            } else t.kind() === n && i++;
            t = t.previousToken(!0);
          }
          return null;
        }),
        t
      );
    })();
    t.SignatureInfoHelpers = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    var t = (function () {
      function e(e, t, n, r, i, o) {
        (this.name = e),
          (this.kind = t),
          (this.kindModifiers = n),
          (this.type = r),
          (this.fullSymbolName = i),
          (this.docComment = o);
      }
      return (
        (e.prototype.isResolved = function () {
          return !0;
        }),
        e
      );
    })();
    e.ResolvedCompletionEntry = t;
    var n = (function () {
      function e(e, t, n, r) {
        (this.name = e),
          (this.kind = t),
          (this.kindModifiers = n),
          (this.decl = r),
          (this.type = null),
          (this.fullSymbolName = null),
          (this.docComment = null),
          (this.hasBeenResolved = !1);
      }
      return (
        (e.prototype.isResolved = function () {
          return this.hasBeenResolved;
        }),
        (e.prototype.resolve = function (e, t, n) {
          (this.type = e),
            (this.fullSymbolName = t),
            (this.docComment = n),
            (this.hasBeenResolved = !0);
        }),
        e
      );
    })();
    e.DeclReferenceCompletionEntry = n;
    var r = (function () {
      function e(e, t, n) {
        (this.fileName = e), (this.position = t), (this.entries = n);
      }
      return e;
    })();
    e.CompletionSession = r;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e) {
      if (e)
        switch (e.kind()) {
          case 131:
          case 128:
          case 130:
          case 137:
          case 129:
          case 225:
          case 218:
          case 219:
            return !0;
        }
      return !1;
    }
    var r = (function () {
      function t(t) {
        (this.host = t),
          (this.activeCompletionSession = null),
          (this.logger = this.host),
          (this.compiler = new e.Services.LanguageServiceCompiler(this.host)),
          (this._syntaxTreeCache = new e.Services.SyntaxTreeCache(this.host)),
          e.LocalizedDiagnosticMessages ||
            (e.LocalizedDiagnosticMessages = this.host.getLocalizedDiagnosticMessages());
      }
      return (
        (t.prototype.cleanupSemanticCache = function () {
          this.compiler.cleanupSemanticCache();
        }),
        (t.prototype.refresh = function () {}),
        (t.prototype.getSymbolInfoAtPosition = function (t, n, r) {
          var i = this.compiler.getDocument(t),
            o = i.sourceUnit(),
            s = e.ASTHelpers.getAstAtPosition(o, n);
          if (null === s || (r && 11 !== s.kind()))
            return this.logger.log("No name found at the given position"), null;
          var a = this.compiler.getSymbolInformationFromAST(s, i);
          if (null === a || (null === a.symbol && a.aliasSymbol))
            return (
              this.logger.log("No symbol found at the given position"),
              { symbol: null, containingASTOpt: null }
            );
          var l = a.aliasSymbol || a.symbol,
            c = l.getName();
          if (r) {
            var u = s.valueText();
            if ((l.isError() || l.isAny()) && u !== c)
              return (
                this.logger.log("Unknown symbol found at the given position"),
                { symbol: null, containingASTOpt: null }
              );
          }
          var p = this.getSymbolScopeAST(l, s);
          return { symbol: l, containingASTOpt: p };
        }),
        (t.prototype.getReferencesAtPosition = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getSymbolInfoAtPosition(t, n, !0);
          if (null === r) return [];
          if (null === r.symbol)
            return this.getSingleNodeReferenceAtPosition(t, n);
          for (
            var i = [],
              o = r.symbol,
              s = o.getName(),
              a = r.containingASTOpt,
              l = this.compiler.fileNames(),
              c = 0,
              u = l.length;
            u > c;
            c++
          ) {
            var p = l[c];
            if (!a || t == p) {
              var h = this.compiler.getDocument(p),
                d = h.bloomFilter();
              d.probablyContains(s) &&
                (i = i.concat(this.getReferencesInFile(p, o, a)));
            }
          }
          return i;
        }),
        (t.prototype.getSymbolScopeAST = function (e, t) {
          if (
            8192 === e.kind &&
            e.getDeclarations().length > 0 &&
            e.getDeclarations()[0].getParentDecl() &&
            65536 === e.getDeclarations()[0].getParentDecl().kind
          )
            for (; t; ) {
              if (129 === t.kind() || 135 === t.kind()) return t;
              t = t.parent;
            }
          return null;
        }),
        (t.prototype.getOccurrencesAtPosition = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getSymbolInfoAtPosition(t, n, !0);
          if (null === r) return [];
          if (null === r.symbol)
            return this.getSingleNodeReferenceAtPosition(t, n);
          var i = r.symbol,
            o = r.containingASTOpt;
          return this.getReferencesInFile(t, i, o);
        }),
        (t.prototype.getSingleNodeReferenceAtPosition = function (t, n) {
          var r = this.compiler.getDocument(t),
            i = r.sourceUnit(),
            o = e.ASTHelpers.getAstAtPosition(i, n);
          if (null === o || 11 !== o.kind()) return [];
          var s = this.isWriteAccess(o);
          return [
            new e.Services.ReferenceEntry(
              this._getHostFileName(t),
              o.start(),
              o.end(),
              s
            ),
          ];
        }),
        (t.prototype.getImplementorsAtPosition = function (t, n) {
          var r = this;
          t = e.switchToForwardSlashes(t);
          var i = [],
            o = this.compiler.getDocument(t),
            s = o.sourceUnit(),
            a = e.ASTHelpers.getAstAtPosition(s, n);
          if (null === a || 11 !== a.kind())
            return (
              this.logger.log("No identifier at the specified location."), i
            );
          var l = a.valueText(),
            c = this.compiler.getSymbolInformationFromAST(a, o),
            u = c.symbol;
          if (null === u)
            return (
              this.logger.log("No symbol annotation on the identifier AST."), i
            );
          var p = u.getName();
          if ((u.isError() || u.isAny()) && l !== p)
            return (
              this.logger.log("Unknown symbol found at the given position"), i
            );
          var h,
            d = u.type;
          if (d.isClass() || d.isInterface())
            h = d.getTypesThatExtendThisType();
          else if (
            4096 == u.kind ||
            16384 == u.kind ||
            d.isMethod() ||
            d.isProperty()
          ) {
            var m = u.getDeclarations()[0],
              f = m.getParentDecl().getSymbol().type;
            h = [];
            var g = f.getTypesThatExtendThisType(),
              v = f.getExtendedTypes();
            g.forEach(function (e) {
              var t = r.getOverrides(e, u);
              t.forEach(function (e) {
                h.push(e);
              });
            }),
              v.forEach(function (e) {
                var t = r.getOverrides(e, u);
                t.forEach(function (e) {
                  h.push(e);
                });
              });
          }
          if (h)
            for (
              var y = this.compiler.fileNames(), b = 0, _ = y.length;
              _ > b;
              b++
            ) {
              var w = y[b],
                S = this.compiler.getDocument(w),
                T = S.bloomFilter();
              h.forEach(function (e) {
                var t = e.getName();
                T.probablyContains(t) &&
                  (i = i.concat(r.getImplementorsInFile(w, e)));
              });
            }
          return i;
        }),
        (t.prototype.getOverrides = function (e, t) {
          var n,
            r = [];
          return (
            e.isClass()
              ? (n = e.getMembers())
              : e.isInterface() && (n = e.getMembers()),
            null == n
              ? null
              : (n.forEach(function (e) {
                  var n = e;
                  n.getName() === t.getName() && r.push(n);
                }),
                r)
          );
        }),
        (t.prototype.getImplementorsInFile = function (t, n) {
          var r = this,
            i = [],
            o = n.getDisplayName(),
            s = this.getPossibleSymbolReferencePositions(t, o);
          if (s && s.length > 0) {
            var a = this.compiler.getDocument(t),
              l = a.sourceUnit();
            s.forEach(function (o) {
              var s = e.ASTHelpers.getAstAtPosition(l, o);
              if (null !== s && 11 === s.kind()) {
                var c = r.compiler.getSymbolInformationFromAST(s, a);
                if (null !== c) {
                  var u;
                  if (8 === n.kind || 16 === n.kind) u = c.symbol.type;
                  else {
                    var p = c.symbol.getDeclarations()[0];
                    u = p.getSymbol();
                  }
                  if (u === n) {
                    var h = r.isWriteAccess(s);
                    i.push(
                      new e.Services.ReferenceEntry(
                        r._getHostFileName(t),
                        s.start(),
                        s.end(),
                        h
                      )
                    );
                  }
                }
              }
            });
          }
          return i;
        }),
        (t.prototype.getReferencesInFile = function (t, n, r) {
          var i = this,
            o = [],
            s = n.getDisplayName(),
            a = this.getPossibleSymbolReferencePositions(t, s);
          if (a && a.length > 0) {
            var l = this.compiler.getDocument(t),
              c = l.sourceUnit();
            a.forEach(function (a) {
              if (!r || !(a < r.start() || a > r.end())) {
                var u = e.ASTHelpers.getAstAtPosition(c, a, !1);
                if (
                  null !== u &&
                  11 === u.kind() &&
                  u.end() - u.start() === s.length
                ) {
                  var p = i.compiler.getSymbolInformationFromAST(u, l);
                  if (null !== p) {
                    var h = p.aliasSymbol || p.symbol;
                    if (
                      e.Services.FindReferenceHelpers.compareSymbolsForLexicalIdentity(
                        h,
                        n
                      )
                    ) {
                      var d = i.isWriteAccess(u);
                      o.push(
                        new e.Services.ReferenceEntry(
                          i._getHostFileName(t),
                          u.start(),
                          u.end(),
                          d
                        )
                      );
                    }
                  }
                }
              }
            });
          }
          return o;
        }),
        (t.prototype.isWriteAccess = function (e) {
          var t = e.parent;
          if (null !== t) {
            var n = t.kind();
            switch (n) {
              case 131:
                return t.identifier === e;
              case 128:
                return t.identifier === e;
              case 130:
                return t.name === e || t.stringLiteral === e;
              case 129:
                return t.identifier === e;
              case 133:
                return t.identifier === e;
              case 225:
                var r = t;
                return !(!r.equalsValueClause || r.propertyName !== e);
              case 242:
                return !0;
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 182:
              case 180:
              case 181:
              case 183:
              case 185:
              case 184:
                return t.left === e;
              case 168:
              case 210:
                return !0;
              case 169:
              case 211:
                return !0;
            }
          }
          return !1;
        }),
        (t.prototype.isLetterOrDigit = function (t) {
          return (
            (t >= 97 && 122 >= t) ||
            (t >= 65 && 90 >= t) ||
            (t >= 48 && 57 >= t) ||
            95 === t ||
            36 === t ||
            (t > 127 && e.Unicode.isIdentifierPart(t, 1))
          );
        }),
        (t.prototype.getPossibleSymbolReferencePositions = function (e, t) {
          var n = [];
          if (!t || !t.length) return n;
          for (
            var r = this.compiler.getScriptSnapshot(e),
              i = r.getLength(),
              o = r.getText(0, i),
              s = t.length,
              a = o.indexOf(t);
            a >= 0;

          ) {
            var l = a + s;
            (0 >= a || !this.isLetterOrDigit(o.charCodeAt(a - 1))) &&
              (l >= i || !this.isLetterOrDigit(o.charCodeAt(l))) &&
              n.push(a),
              (a = o.indexOf(t, a + s + 1));
          }
          return n;
        }),
        (t.prototype.getSignatureAtPosition = function (t, r) {
          t = e.switchToForwardSlashes(t);
          var i = this.compiler.getDocument(t);
          if (
            e.Services.SignatureInfoHelpers.isSignatureHelpBlocker(
              i.syntaxTree().sourceUnit(),
              r
            )
          )
            return (
              this.logger.log(
                "position is not a valid singature help location"
              ),
              null
            );
          var o = e.Services.SignatureInfoHelpers.isInPartiallyWrittenTypeArgumentList(
            i.syntaxTree(),
            r
          );
          if (o)
            return this.getTypeParameterSignatureFromPartiallyWrittenExpression(
              i,
              r,
              o
            );
          var s = i.sourceUnit(),
            a = e.ASTHelpers.getAstAtPosition(s, r);
          if (!a) return null;
          for (
            ;
            a &&
            !(213 === a.kind() || 216 === a.kind() || (n(a) && r > a.start()));

          )
            a = a.parent;
          if (!a) return null;
          if (213 !== a.kind() && 216 !== a.kind())
            return (
              this.logger.log(
                "No call expression or generic arguments found for the given position"
              ),
              null
            );
          var l = a,
            c = 216 === l.kind();
          if (c && null === l.argumentList)
            return (
              this.logger.log(
                "No signature help for a object creation expression without arguments"
              ),
              null
            );
          e.Debug.assert(
            null !== l.argumentList.arguments,
            "Expected call expression to have arguments, but it did not"
          );
          var u = l.expression.end() + l.expression.trailingTriviaWidth(),
            p =
              l.argumentList.arguments.end() +
              l.argumentList.arguments.trailingTriviaWidth();
          if (u >= r || r > p)
            return this.logger.log("Outside argument list"), null;
          var h = this.compiler.getCallInformationFromAST(a, i);
          if (!h || !h.targetSymbol || !h.resolvedSignatures)
            return (
              this.logger.log("Could not find symbol for call expression"), null
            );
          var d = new e.Services.SignatureInfo();
          return (
            (d.formal = e.Services.SignatureInfoHelpers.getSignatureInfoFromSignatureSymbol(
              h.targetSymbol,
              h.resolvedSignatures,
              h.enclosingScopeSymbol,
              this.compiler
            )),
            (d.actual = e.Services.SignatureInfoHelpers.getActualSignatureInfoFromCallExpression(
              l,
              r,
              o
            )),
            (d.activeFormal =
              h.resolvedSignatures && h.candidateSignature
                ? h.resolvedSignatures.indexOf(h.candidateSignature)
                : -1),
            null === d.actual || null === d.formal || null === d.activeFormal
              ? (this.logger.log(
                  "Can't compute actual and/or formal signature of the call expression"
                ),
                null)
              : d
          );
        }),
        (t.prototype.getTypeParameterSignatureFromPartiallyWrittenExpression = function (
          t,
          n,
          r
        ) {
          var i = t.sourceUnit(),
            o = e.ASTHelpers.getAstAtPosition(i, r.genericIdentifer.start());
          if (null === o || 11 !== o.kind())
            return (
              this.logger.log(
                [
                  "getTypeParameterSignatureAtPosition: Unexpected ast found at position:",
                  n,
                  null === o
                    ? "ast was null"
                    : "ast kind: " + e.SyntaxKind[o.kind()],
                ].join(" ")
              ),
              null
            );
          var s = this.compiler.getSymbolInformationFromAST(o, t);
          if (!s.symbol) return null;
          var a = e.Services.SignatureInfoHelpers.isTargetOfObjectCreationExpression(
              r.genericIdentifer
            ),
            l = s.symbol.type;
          if (16777216 === l.kind || (a && 33554432 === l.kind)) {
            var c = a ? l.getConstructSignatures() : l.getCallSignatures(),
              u = new e.Services.SignatureInfo();
            return (
              (u.formal = e.Services.SignatureInfoHelpers.getSignatureInfoFromSignatureSymbol(
                s.symbol,
                c,
                s.enclosingScopeSymbol,
                this.compiler
              )),
              (u.actual = e.Services.SignatureInfoHelpers.getActualSignatureInfoFromPartiallyWritenGenericExpression(
                n,
                r
              )),
              (u.activeFormal = 0),
              u
            );
          }
          if (l.isGeneric()) {
            33554432 === l.kind && (l = l.getAssociatedContainerType());
            var u = new e.Services.SignatureInfo();
            return (
              (u.formal = e.Services.SignatureInfoHelpers.getSignatureInfoFromGenericSymbol(
                l,
                s.enclosingScopeSymbol,
                this.compiler
              )),
              (u.actual = e.Services.SignatureInfoHelpers.getActualSignatureInfoFromPartiallyWritenGenericExpression(
                n,
                r
              )),
              (u.activeFormal = 0),
              u
            );
          }
          return null;
        }),
        (t.prototype.getDefinitionAtPosition = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getSymbolInfoAtPosition(t, n, !1);
          if (null === r || null === r.symbol) return null;
          var i = r.symbol;
          if (
            (e.Debug.assert(
              0 !== i.kind && 0 !== i.kind && 1 !== i.kind,
              "getDefinitionAtPosition - Invalid symbol kind"
            ),
            2 === i.kind)
          )
            return null;
          var o = i.getDeclarations(),
            s = i.getDisplayName(),
            a = this.mapPullElementKind(i.kind, i),
            l = i.getContainer(),
            c = l ? l.fullName() : "",
            u = l ? this.mapPullElementKind(l.kind, l) : "",
            p = [];
          return (
            this.tryAddDefinition(a, s, u, c, o, p) ||
              this.tryAddSignatures(a, s, u, c, o, p) ||
              this.tryAddConstructor(a, s, u, c, o, p) ||
              this.addDeclarations(a, s, u, c, o, p),
            p
          );
        }),
        (t.prototype.addDeclarations = function (e, t, n, r, i, o) {
          for (var s = 0, a = i.length; a > s; s++)
            this.addDeclaration(e, t, n, r, i[s], o);
        }),
        (t.prototype.addDeclaration = function (t, n, r, i, o, s) {
          var a = o.ast();
          s.push(
            new e.Services.DefinitionInfo(
              this._getHostFileName(o.fileName()),
              a.start(),
              a.end(),
              t,
              n,
              r,
              i
            )
          );
        }),
        (t.prototype.tryAddDefinition = function (t, n, r, i, o, s) {
          var a = e.ArrayUtilities.firstOrDefault(o, function (e) {
            var t = e.getSignatureSymbol();
            return t && t.isDefinition();
          });
          return a ? (this.addDeclaration(t, n, r, i, a, s), !0) : !1;
        }),
        (t.prototype.tryAddSignatures = function (t, n, r, i, o, s) {
          var a = e.ArrayUtilities.where(o, function (e) {
            var t = e.getSignatureSymbol();
            return t && !t.isDefinition();
          });
          return 0 === a.length
            ? !1
            : (this.addDeclaration(t, n, r, i, e.ArrayUtilities.last(a), s),
              !0);
        }),
        (t.prototype.tryAddConstructor = function (t, n, r, i, o, s) {
          var a = e.ArrayUtilities.where(o, function (e) {
            return 32768 === e.kind;
          });
          return 0 === a.length
            ? !1
            : (this.addDeclaration(t, n, r, i, e.ArrayUtilities.last(a), s),
              !0);
        }),
        (t.prototype.getNavigateToItems = function (t) {
          e.Debug.assert(
            null !== t && void 0 !== t,
            "The searchValue argument was not supplied or null"
          );
          for (
            var n = t.split(" "), r = new Array(n.length), i = 0;
            i < n.length;
            i++
          )
            (n[i] = n[i].trim().toLocaleLowerCase()),
              (r[i] = new RegExp(n[i], "i"));
          for (
            var o = [], s = this.compiler.fileNames(), i = 0, a = s.length;
            a > i;
            i++
          ) {
            var l = s[i],
              c = this.compiler.getCachedTopLevelDeclaration(l);
            this.findSearchValueInPullDecl(l, [c], o, n, r);
          }
          return o;
        }),
        (t.prototype.findSearchValueInPullDecl = function (
          t,
          n,
          r,
          i,
          o,
          s,
          a
        ) {
          for (var l, c, u, p, h, d, m, f, g, v = 0, y = n.length; y > v; ++v) {
            (c = n[v]),
              (h = c.getDisplayName()),
              (d = this.mapPullElementKind(c.kind)),
              (m = null);
            for (var b = 0, _ = i.length; _ > b; ++b)
              if (((u = i[b]), (p = o[b]), (g = p.exec(h)))) {
                if (h.length === u.length && 0 === g.index) {
                  m = e.Services.MatchKind.exact;
                  break;
                }
                if (h.length > u.length && 0 === g.index) {
                  m = e.Services.MatchKind.prefix;
                  break;
                }
                if (h.length > u.length && g.index > 0) {
                  m = e.Services.MatchKind.subString;
                  break;
                }
              }
            if (this.shouldIncludeDeclarationInNavigationItems(c)) {
              f = s ? s + "." + h : h;
              var w = c.ast();
              m &&
                ((l = new e.Services.NavigateToItem()),
                (l.name = h),
                (l.matchKind = m),
                (l.kind = this.mapPullElementKind(c.kind)),
                (l.kindModifiers = this.getScriptElementKindModifiersFromDecl(
                  c
                )),
                (l.fileName = this._getHostFileName(t)),
                (l.minChar = w.start()),
                (l.limChar = w.end()),
                (l.containerName = s || ""),
                (l.containerKind = a || ""),
                r.push(l));
            }
            this.isContainerDeclaration(c) &&
              this.findSearchValueInPullDecl(
                t,
                c.getChildDecls(),
                r,
                i,
                o,
                f,
                d
              );
          }
        }),
        (t.prototype.getScriptElementKindModifiersFromDecl = function (t) {
          var n = [],
            r = t.flags;
          return (
            1 & r &&
              n.push(e.Services.ScriptElementKindModifier.exportedModifier),
            8 & r &&
              n.push(e.Services.ScriptElementKindModifier.ambientModifier),
            4 & r &&
              n.push(e.Services.ScriptElementKindModifier.publicMemberModifier),
            2 & r &&
              n.push(
                e.Services.ScriptElementKindModifier.privateMemberModifier
              ),
            16 & r &&
              n.push(e.Services.ScriptElementKindModifier.staticModifier),
            n.length > 0
              ? n.join(",")
              : e.Services.ScriptElementKindModifier.none
          );
        }),
        (t.prototype.isContainerDeclaration = function (e) {
          switch (e.kind) {
            case 1:
            case 4:
            case 8:
            case 16:
            case 32:
            case 64:
              return !0;
          }
          return !1;
        }),
        (t.prototype.shouldIncludeDeclarationInNavigationItems = function (e) {
          switch (e.kind) {
            case 1:
              return !1;
            case 512:
            case 4096:
              return 0 === (118784 & e.flags);
            case 67108864:
              return !0;
            case 131072:
            case 16384:
              return "" !== e.name;
            case 32768:
              return !1;
          }
          return this.isContainerDeclaration(e) ? !0 : !0;
        }),
        (t.prototype.getSyntacticDiagnostics = function (t) {
          return (
            (t = e.switchToForwardSlashes(t)),
            this.compiler.getSyntacticDiagnostics(t)
          );
        }),
        (t.prototype.getSemanticDiagnostics = function (t) {
          return (
            (t = e.switchToForwardSlashes(t)),
            this.compiler.getSemanticDiagnostics(t)
          );
        }),
        (t.prototype._getHostSpecificDiagnosticWithFileName = function (t) {
          return new e.Diagnostic(
            this._getHostFileName(t.fileName()),
            t.lineMap(),
            t.start(),
            t.length(),
            t.diagnosticKey(),
            t.arguments(),
            t.additionalLocations()
          );
        }),
        (t.prototype.getCompilerOptionsDiagnostics = function () {
          var e = this,
            t = this.compiler.getCompilerOptionsDiagnostics();
          return t.map(function (t) {
            return e._getHostSpecificDiagnosticWithFileName(t);
          });
        }),
        (t.prototype._getHostFileName = function (e) {
          return e ? this.compiler.getCachedHostFileName(e) : e;
        }),
        (t.prototype.getEmitOutput = function (t) {
          var n = this;
          t = e.switchToForwardSlashes(t);
          var r = function (e) {
              return n.host.resolveRelativePath(e, null);
            },
            i = this.compiler.getDocument(t),
            o = i.emitToOwnOutputFile(),
            s = o
              ? this.getSyntacticDiagnostics(t)
              : this.getAllSyntacticDiagnostics();
          if (this.containErrors(s)) return new e.EmitOutput(1);
          var a = o
              ? this.getSemanticDiagnostics(t)
              : this.getAllSemanticDiagnostics(),
            l = this.compiler.emit(t, r);
          if (0 == l.emitOutputResult)
            if (this.containErrors(a))
              this.compiler.canEmitDeclarations(t) && (l.emitOutputResult = 3);
            else {
              var c = this.compiler.emitDeclarations(t, r);
              l.outputFiles.push.apply(l.outputFiles, c.outputFiles),
                e.Debug.assert(0 == c.emitOutputResult);
            }
          return l;
        }),
        (t.prototype.getAllSyntacticDiagnostics = function () {
          var e = this,
            t = [];
          return (
            this.compiler.fileNames().forEach(function (n) {
              return t.push.apply(t, e.compiler.getSyntacticDiagnostics(n));
            }),
            t
          );
        }),
        (t.prototype.getAllSemanticDiagnostics = function () {
          var e = this,
            t = [];
          return (
            this.compiler.fileNames().map(function (n) {
              return t.push.apply(t, e.compiler.getSemanticDiagnostics(n));
            }),
            t
          );
        }),
        (t.prototype.containErrors = function (e) {
          if (e && e.length > 0)
            for (var t = 0; t < e.length; t++) {
              var n = e[t].info();
              if (1 === n.category) return !0;
            }
          return !1;
        }),
        (t.prototype.getFullNameOfSymbol = function (t, n) {
          t.getContainer();
          if (e.PullHelpers.isSymbolLocal(t) || 2048 == t.kind)
            return t.getScopedName(n, !1, !0);
          var r = t.kind;
          return 2 == t.kind
            ? ""
            : (33554432 == r && (t = t.getAssociatedContainerType()),
              4096 == r ||
              67108864 == r ||
              65536 == r ||
              8192 == r ||
              t.anyDeclHasFlag(1)
                ? t.fullName(n)
                : t.getScopedName(n, !1, !0));
        }),
        (t.prototype.getTypeInfoEligiblePath = function (t, n, r) {
          var i = this.compiler.getDocument(t),
            o = i.sourceUnit(),
            s = e.ASTHelpers.getAstAtPosition(o, n, !1, !0);
          if (null === s) return null;
          switch (
            (227 === s.kind() &&
              142 === s.parent.kind() &&
              137 === s.parent.parent.kind() &&
              (s = s.parent.parent),
            s.kind())
          ) {
            default:
              return null;
            case 137:
              var a = s;
              return r &&
                n >= a.start() &&
                n <= a.start() + "constructor".length
                ? s
                : null;
            case 129:
              return null;
            case 212:
            case 121:
            case 50:
            case 14:
            case 35:
            case 11:
              return s;
          }
        }),
        (t.prototype.getTypeAtPosition = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getTypeInfoEligiblePath(t, n, !0);
          if (!r) return null;
          var i,
            o,
            s,
            a,
            l,
            c,
            u,
            p = this.compiler.getDocument(t),
            h = !1;
          if (e.ASTHelpers.isDeclarationASTOrDeclarationNameAST(r)) {
            var d = this.compiler.getSymbolInformationFromAST(r, p);
            if (!d) return null;
            if (
              ((i = d.ast),
              (o = d.symbol),
              (a = d.enclosingScopeSymbol),
              137 === r.kind() ||
                129 === r.kind() ||
                218 === r.kind() ||
                219 === r.kind() ||
                135 === r.kind() ||
                e.ASTHelpers.isNameOfFunction(r) ||
                e.ASTHelpers.isNameOfMemberFunction(r))
            ) {
              var m = 11 === r.kind() ? r.parent : r;
              if (o && 4096 != o.kind) {
                var f = e.PullHelpers.getSignatureForFuncDecl(
                  this.compiler.getDeclForAST(m)
                );
                (h = !0), (c = f.signature), (l = f.allSignatures);
              }
            }
          } else if (
            e.ASTHelpers.isCallExpression(r) ||
            e.ASTHelpers.isCallExpressionTarget(r)
          ) {
            for (; !e.ASTHelpers.isCallExpression(r); ) r = r.parent;
            var g = this.compiler.getCallInformationFromAST(r, p);
            if (!g || !g.targetSymbol) return null;
            (i = g.ast), (o = g.targetSymbol), (a = g.enclosingScopeSymbol);
            var v = 4096 == o.kind || 512 == o.kind;
            (s = o.type),
              v &&
                ("" != s.getName() && (o = s),
                (v = (16 != s.kind && 8388608 != s.kind) || "" == s.getName())),
              v ||
                ((h = !0),
                (l = g.resolvedSignatures),
                (c = g.candidateSignature),
                (u = g.isConstructorCall));
          } else {
            var y = this.compiler.getSymbolInformationFromAST(r, p);
            if (!y || !y.symbol) return null;
            (i = y.ast),
              (o = y.symbol),
              (a = y.enclosingScopeSymbol),
              (65536 === o.kind || 16384 == o.kind) &&
                ((s = o.type), s && ((h = !0), (l = s.getCallSignatures())));
          }
          if (l && (!c || c.isDefinition()))
            for (var b = 0, _ = l.length; _ > b; b++)
              if (!(_ > 1 && l[b].isDefinition())) {
                c = l[b];
                break;
              }
          var w = h
              ? e.PullSignatureSymbol.getSignatureTypeMemberName(c, l, a)
              : o.getTypeNameEx(a, !0),
            S = this.mapPullElementKind(o.kind, o, !h, h, u),
            T = c || o,
            k = T.docComments(!h),
            x = this.getFullNameOfSymbol(o, a),
            C = i ? i.start() : -1,
            E = i ? i.end() : -1;
          return new e.Services.TypeInfo(w, k, x, S, C, E);
        }),
        (t.prototype.getCompletionsAtPosition = function (t, n, r) {
          t = e.switchToForwardSlashes(t);
          var i = this.compiler.getDocument(t),
            o = i.sourceUnit();
          if (
            e.Services.CompletionHelpers.isCompletionListBlocker(
              i.syntaxTree().sourceUnit(),
              n
            )
          )
            return (
              this.logger.log(
                "Returning an empty list because completion was blocked."
              ),
              null
            );
          var s = e.ASTHelpers.getAstAtPosition(o, n, !0, !0);
          s && 11 === s.kind() && s.start() === s.end() && (s = s.parent);
          var a = !1;
          s && 212 === s.kind() && s.expression.end() < n
            ? ((a = !0), (s = s.expression))
            : s && 121 === s.kind() && s.left.end() < n
            ? ((a = !0), (s = s.left))
            : s &&
              s.parent &&
              11 === s.kind() &&
              212 === s.parent.kind() &&
              s.parent.name === s
            ? ((a = !0), (s = s.parent.expression))
            : s &&
              s.parent &&
              11 === s.kind() &&
              121 === s.parent.kind() &&
              s.parent.right === s &&
              ((a = !0), (s = s.parent.left));
          var l = new e.IdentiferNameHashTable();
          if (a) {
            var c = this.compiler.getVisibleMemberSymbolsFromAST(s, i);
            if (!c) return null;
            (r = !0), this.getCompletionEntriesFromSymbols(c, l);
          } else {
            var u = e.Services.CompletionHelpers.getContainingObjectLiteralApplicableForCompletion(
              i.syntaxTree().sourceUnit(),
              n
            );
            if (u) {
              var p = Math.min(n, u.end());
              for (e.ASTHelpers.getAstAtPosition(o, p); s && 215 !== s.kind(); )
                s = s.parent;
              if (!s || 215 !== s.kind()) return null;
              r = !0;
              var h = this.compiler.getContextualMembersFromAST(s, i);
              if (h && h.symbols && h.symbols.length > 0) {
                var d = this.compiler.getVisibleMemberSymbolsFromAST(s, i);
                this.getCompletionEntriesFromSymbols(
                  {
                    symbols: e.Services.CompletionHelpers.filterContextualMembersList(
                      h.symbols,
                      d,
                      t,
                      n
                    ),
                    enclosingScopeSymbol: h.enclosingScopeSymbol,
                  },
                  l
                );
              }
            } else {
              r = !1;
              var m = this.compiler.getVisibleDeclsFromAST(s, i);
              this.getCompletionEntriesFromDecls(m, l);
            }
          }
          r ||
            this.getCompletionEntriesForKeywords(
              e.Services.KeywordCompletions.getKeywordCompltions(),
              l
            );
          var f = new e.Services.CompletionInfo();
          return (
            (f.isMemberCompletion = r),
            (f.entries = []),
            l.map(function (e, t) {
              f.entries.push({
                name: t.name,
                kind: t.kind,
                kindModifiers: t.kindModifiers,
              });
            }, null),
            (this.activeCompletionSession = new e.Services.CompletionSession(
              t,
              n,
              l
            )),
            f
          );
        }),
        (t.prototype.getCompletionEntriesFromSymbols = function (t, n) {
          for (var r = 0, i = t.symbols.length; i > r; r++) {
            var o = t.symbols[r],
              s = e.Services.CompletionHelpers.getValidCompletionEntryDisplayName(
                o.getDisplayName()
              );
            if (s) {
              var a = o.kind,
                l = n.lookup(s);
              if (!(l && 68147712 & a)) {
                var c,
                  u = this.mapPullElementKind(a, o, !0),
                  p = this.getScriptElementKindModifiers(o);
                if (o.isResolved) {
                  var h = this.getResolvedCompletionEntryDetailsFromSymbol(
                    o,
                    t.enclosingScopeSymbol
                  );
                  c = new e.Services.ResolvedCompletionEntry(
                    s,
                    u,
                    p,
                    h.typeName,
                    h.fullSymbolName,
                    h.docComments
                  );
                } else
                  c = new e.Services.DeclReferenceCompletionEntry(
                    s,
                    u,
                    p,
                    o.getDeclarations()[0]
                  );
                n.addOrUpdate(s, c);
              }
            }
          }
        }),
        (t.prototype.getCompletionEntriesFromDecls = function (t, n) {
          for (var r = 0, i = t ? t.length : 0; i > r; r++) {
            var o = t[r],
              s = e.Services.CompletionHelpers.getValidCompletionEntryDisplayName(
                o.getDisplayName()
              );
            if (s) {
              var a = o.kind,
                l = n.lookup(s);
              if (!(l && 68147712 & a)) {
                var c = this.mapPullElementKind(a, null, !0),
                  u = this.getScriptElementKindModifiersFromFlags(o.flags),
                  p = null,
                  h = o.hasSymbol() && o.getSymbol(),
                  d = o.getEnclosingDecl(),
                  m = d && d.hasSymbol() ? d.getSymbol() : null;
                if (h && h.isResolved && m && m.isResolved) {
                  var f = this.getResolvedCompletionEntryDetailsFromSymbol(
                    h,
                    m
                  );
                  p = new e.Services.ResolvedCompletionEntry(
                    s,
                    c,
                    u,
                    f.typeName,
                    f.fullSymbolName,
                    f.docComments
                  );
                } else
                  p = new e.Services.DeclReferenceCompletionEntry(s, c, u, o);
                n.addOrUpdate(s, p);
              }
            }
          }
        }),
        (t.prototype.getResolvedCompletionEntryDetailsFromSymbol = function (
          e,
          t
        ) {
          var n = e.getTypeName(t, !0),
            r = this.getFullNameOfSymbol(e, t),
            i = e.type,
            o = e;
          i &&
            i.hasOnlyOverloadCallSignatures() &&
            (o = i.getCallSignatures()[0]);
          var s = o.docComments(!0);
          return { typeName: n, fullSymbolName: r, docComments: s };
        }),
        (t.prototype.getCompletionEntriesForKeywords = function (e, t) {
          for (var n = 0, r = e.length; r > n; n++) {
            var i = e[n];
            t.addOrUpdate(i.name, i);
          }
        }),
        (t.prototype.getCompletionEntryDetails = function (t, n, r) {
          if (
            ((t = e.switchToForwardSlashes(t)),
            !this.activeCompletionSession ||
              this.activeCompletionSession.fileName !== t ||
              this.activeCompletionSession.position !== n)
          )
            return null;
          var i = this.activeCompletionSession.entries.lookup(r);
          if (!i) return null;
          if (!i.isResolved()) {
            var o = i.decl,
              s = this.compiler.getDocument(t);
            if (
              o.fileName() === e.switchToForwardSlashes(t) &&
              (o = this.tryFindDeclFromPreviousCompilerVersion(o))
            ) {
              var a = e.Services.CompletionHelpers.getValidCompletionEntryDisplayName(
                  o.getDisplayName()
                ),
                l = o.kind,
                c = this.mapPullElementKind(l, null, !0),
                u = this.getScriptElementKindModifiersFromFlags(o.flags);
              (i = new e.Services.DeclReferenceCompletionEntry(a, c, u, o)),
                this.activeCompletionSession.entries.addOrUpdate(r, i);
            }
            if (o) {
              var p = e.ASTHelpers.getAstAtPosition(s.sourceUnit(), n),
                h = this.compiler.pullGetDeclInformation(o, p, s);
              if (!h) return null;
              var d = h.symbol,
                m = this.getResolvedCompletionEntryDetailsFromSymbol(
                  d,
                  h.enclosingScopeSymbol
                );
              i.resolve(m.typeName, m.fullSymbolName, m.docComments);
            }
          }
          return {
            name: i.name,
            kind: i.kind,
            kindModifiers: i.kindModifiers,
            type: i.type,
            fullSymbolName: i.fullSymbolName,
            docComment: i.docComment,
          };
        }),
        (t.prototype.tryFindDeclFromPreviousCompilerVersion = function (e) {
          for (var t = e.fileName(), n = [], r = e; r; )
            1 !== r.kind && n.unshift(r), (r = r.getParentDecl());
          var i = this.compiler.topLevelDeclaration(t);
          if (!i) return null;
          for (
            var o = [i],
              s = [],
              a = 4 & e.kind || 16 & e.kind || 8 & e.kind || 64 & e.kind,
              l = 0;
            l < n.length;
            l++
          ) {
            for (
              var c = n[l], u = [], p = 0;
              p < o.length &&
              ((s = o[p].searchChildDecls(c.name, c.kind)),
              u.push.apply(u, s),
              !s.length || a);
              p++
            );
            if (((o = u), 0 == o.length)) break;
          }
          return 0 === o.length ? null : o[0];
        }),
        (t.prototype.getModuleOrEnumKind = function (t) {
          if (t)
            for (var n = t.getDeclarations(), r = 0; r < n.length; r++) {
              var i = n[r].kind;
              if (4 == i) return e.Services.ScriptElementKind.moduleElement;
              if (64 == i) return e.Services.ScriptElementKind.enumElement;
              if (512 == i) {
                var o = n[r].flags;
                if (32768 & o)
                  return e.Services.ScriptElementKind.moduleElement;
                if (4096 & o) return e.Services.ScriptElementKind.enumElement;
              }
            }
          return e.Services.ScriptElementKind.unknown;
        }),
        (t.prototype.mapPullElementKind = function (t, n, r, i, o) {
          if (o)
            return e.Services.ScriptElementKind
              .constructorImplementationElement;
          if (i)
            switch (t) {
              case 4:
              case 32:
              case 128:
              case 16:
              case 8:
              case 2048:
                return e.Services.ScriptElementKind.functionElement;
              case 512:
                return n && e.PullHelpers.isSymbolLocal(n)
                  ? e.Services.ScriptElementKind.localFunctionElement
                  : e.Services.ScriptElementKind.functionElement;
              case 4096:
                return e.Services.ScriptElementKind.memberFunctionElement;
              case 16384:
                return n && e.PullHelpers.isSymbolLocal(n)
                  ? e.Services.ScriptElementKind.localFunctionElement
                  : e.Services.ScriptElementKind.functionElement;
              case 32768:
                return e.Services.ScriptElementKind
                  .constructorImplementationElement;
              case 65536:
                return e.Services.ScriptElementKind.memberFunctionElement;
              case 131072:
                return e.Services.ScriptElementKind.localFunctionElement;
              case 262144:
                return e.Services.ScriptElementKind.memberGetAccessorElement;
              case 524288:
                return e.Services.ScriptElementKind.memberSetAccessorElement;
              case 1048576:
                return e.Services.ScriptElementKind.callSignatureElement;
              case 2097152:
                return e.Services.ScriptElementKind.constructSignatureElement;
              case 4194304:
                return e.Services.ScriptElementKind.indexSignatureElement;
              case 8192:
                return e.Services.ScriptElementKind.typeParameterElement;
              case 2:
                return e.Services.ScriptElementKind.primitiveType;
            }
          else
            switch (t) {
              case 1:
                return e.Services.ScriptElementKind.scriptElement;
              case 4:
              case 32:
              case 128:
                return e.Services.ScriptElementKind.moduleElement;
              case 16:
                return e.Services.ScriptElementKind.interfaceElement;
              case 8:
                return e.Services.ScriptElementKind.classElement;
              case 64:
                return e.Services.ScriptElementKind.enumElement;
              case 512:
                var s = this.getModuleOrEnumKind(n);
                return s != e.Services.ScriptElementKind.unknown
                  ? s
                  : n && e.PullHelpers.isSymbolLocal(n)
                  ? e.Services.ScriptElementKind.localVariableElement
                  : e.Services.ScriptElementKind.variableElement;
              case 2048:
                return e.Services.ScriptElementKind.parameterElement;
              case 4096:
                return e.Services.ScriptElementKind.memberVariableElement;
              case 16384:
                return n && e.PullHelpers.isSymbolLocal(n)
                  ? e.Services.ScriptElementKind.localFunctionElement
                  : e.Services.ScriptElementKind.functionElement;
              case 32768:
                return r
                  ? e.Services.ScriptElementKind.classElement
                  : e.Services.ScriptElementKind
                      .constructorImplementationElement;
              case 65536:
                return e.Services.ScriptElementKind.memberFunctionElement;
              case 131072:
                return e.Services.ScriptElementKind.localFunctionElement;
              case 262144:
                return e.Services.ScriptElementKind.memberGetAccessorElement;
              case 524288:
                return e.Services.ScriptElementKind.memberSetAccessorElement;
              case 1048576:
                return e.Services.ScriptElementKind.callSignatureElement;
              case 2097152:
                return e.Services.ScriptElementKind.constructSignatureElement;
              case 4194304:
                return e.Services.ScriptElementKind.indexSignatureElement;
              case 67108864:
                return e.Services.ScriptElementKind.memberVariableElement;
              case 8192:
                return e.Services.ScriptElementKind.typeParameterElement;
              case 2:
                return e.Services.ScriptElementKind.primitiveType;
            }
          return e.Services.ScriptElementKind.unknown;
        }),
        (t.prototype.getScriptElementKindModifiers = function (t) {
          var n = [];
          return (
            t.anyDeclHasFlag(1) &&
              n.push(e.Services.ScriptElementKindModifier.exportedModifier),
            t.anyDeclHasFlag(8) &&
              n.push(e.Services.ScriptElementKindModifier.ambientModifier),
            t.anyDeclHasFlag(4) &&
              n.push(e.Services.ScriptElementKindModifier.publicMemberModifier),
            t.anyDeclHasFlag(2) &&
              n.push(
                e.Services.ScriptElementKindModifier.privateMemberModifier
              ),
            t.anyDeclHasFlag(16) &&
              n.push(e.Services.ScriptElementKindModifier.staticModifier),
            n.length > 0
              ? n.join(",")
              : e.Services.ScriptElementKindModifier.none
          );
        }),
        (t.prototype.getScriptElementKindModifiersFromFlags = function (t) {
          var n = [];
          return (
            1 & t &&
              n.push(e.Services.ScriptElementKindModifier.exportedModifier),
            8 & t &&
              n.push(e.Services.ScriptElementKindModifier.ambientModifier),
            4 & t &&
              n.push(e.Services.ScriptElementKindModifier.publicMemberModifier),
            2 & t &&
              n.push(
                e.Services.ScriptElementKindModifier.privateMemberModifier
              ),
            16 & t &&
              n.push(e.Services.ScriptElementKindModifier.staticModifier),
            n.length > 0
              ? n.join(",")
              : e.Services.ScriptElementKindModifier.none
          );
        }),
        (t.prototype.getNameOrDottedNameSpan = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getTypeInfoEligiblePath(t, n, !1);
          if (!r) return null;
          for (
            ;
            r &&
            (e.ASTHelpers.isNameOfMemberAccessExpression(r) ||
              e.ASTHelpers.isRightSideOfQualifiedName(r));

          )
            r = r.parent;
          var i = new e.Services.SpanInfo(r.start(), r.end());
          return i;
        }),
        (t.prototype.getBreakpointStatementAtPosition = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getSyntaxTree(t);
          return e.Services.Breakpoints.getBreakpointLocation(r, n);
        }),
        (t.prototype.getFormattingEditsForRange = function (t, n, r, i) {
          t = e.switchToForwardSlashes(t);
          var o = this.getFormattingManager(t, i);
          return o.formatSelection(n, r);
        }),
        (t.prototype.getFormattingEditsForDocument = function (t, n, r, i) {
          t = e.switchToForwardSlashes(t);
          var o = this.getFormattingManager(t, i);
          return o.formatDocument(n, r);
        }),
        (t.prototype.getFormattingEditsOnPaste = function (t, n, r, i) {
          t = e.switchToForwardSlashes(t);
          var o = this.getFormattingManager(t, i);
          return o.formatOnPaste(n, r);
        }),
        (t.prototype.getFormattingEditsAfterKeystroke = function (t, n, r, i) {
          t = e.switchToForwardSlashes(t);
          var o = this.getFormattingManager(t, i);
          return "}" === r
            ? o.formatOnClosingCurlyBrace(n)
            : ";" === r
            ? o.formatOnSemicolon(n)
            : "\n" === r
            ? o.formatOnEnter(n)
            : [];
        }),
        (t.prototype.getFormattingManager = function (t, n) {
          null == this.formattingRulesProvider &&
            (this.formattingRulesProvider = new e.Services.Formatting.RulesProvider(
              this.logger
            )),
            this.formattingRulesProvider.ensureUpToDate(n);
          var r = this.getSyntaxTree(t),
            i = this.compiler.getScriptSnapshot(t),
            o = e.SimpleText.fromScriptSnapshot(i),
            s = new e.Services.Formatting.TextSnapshot(o),
            a = new e.Services.Formatting.FormattingManager(
              r,
              s,
              this.formattingRulesProvider,
              n
            );
          return a;
        }),
        (t.prototype.getOutliningRegions = function (t) {
          t = e.switchToForwardSlashes(t);
          var n = this.getSyntaxTree(t);
          return e.Services.OutliningElementsCollector.collectElements(
            n.sourceUnit()
          );
        }),
        (t.prototype.getIndentationAtPosition = function (t, n, r) {
          t = e.switchToForwardSlashes(t);
          var i = this.getSyntaxTree(t),
            o = this.compiler.getScriptSnapshot(t),
            s = e.SimpleText.fromScriptSnapshot(o),
            a = new e.Services.Formatting.TextSnapshot(s),
            l = new FormattingOptions(
              !r.ConvertTabsToSpaces,
              r.TabSize,
              r.IndentSize,
              r.NewLineCharacter
            );
          return e.Services.Formatting.SingleTokenIndenter.getIndentationAmount(
            n,
            i.sourceUnit(),
            a,
            l
          );
        }),
        (t.prototype.getBraceMatchingAtPosition = function (t, n) {
          t = e.switchToForwardSlashes(t);
          var r = this.getSyntaxTree(t);
          return e.Services.BraceMatcher.getMatchSpans(r, n);
        }),
        (t.prototype.getScriptLexicalStructure = function (t) {
          t = e.switchToForwardSlashes(t);
          var n = this.getSyntaxTree(t),
            r = [];
          return (
            e.Services.GetScriptLexicalStructureWalker.getListsOfAllScriptLexicalStructure(
              r,
              t,
              n.sourceUnit()
            ),
            r
          );
        }),
        (t.prototype.getSyntaxTree = function (t) {
          return (
            (t = e.switchToForwardSlashes(t)),
            this._syntaxTreeCache.getCurrentFileSyntaxTree(t)
          );
        }),
        t
      );
    })();
    t.LanguageService = r;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (e) {
    var t = (function () {
      function e() {}
      return (
        (e.compareSymbolsForLexicalIdentity = function (e, t) {
          if (!e.isAlias() && e.isContainer()) {
            var n = e;
            n.getInstanceSymbol() && (e = n.getInstanceSymbol());
          }
          if (!t.isAlias() && t.isContainer()) {
            var r = t;
            r.getInstanceSymbol() && (t = r.getInstanceSymbol());
          }
          if (e.kind === t.kind) {
            if (e === t) return !0;
            if (
              512 === e.kind &&
              e.name === t.name &&
              e.getDeclarations() &&
              e.getDeclarations().length >= 1 &&
              t.getDeclarations() &&
              t.getDeclarations().length >= 1
            ) {
              var i = e.getDeclarations()[0],
                o = t.getDeclarations()[0];
              return i.getParentDecl() === o.getParentDecl();
            }
            if (
              4096 === e.kind &&
              e.name === t.name &&
              e.getDeclarations() &&
              e.getDeclarations().length >= 1 &&
              t.getDeclarations() &&
              t.getDeclarations().length >= 1
            ) {
              var i = e.getDeclarations()[0],
                o = t.getDeclarations()[0],
                s = i.getParentDecl(),
                a = o.getParentDecl();
              if (256 === s.kind && 256 === a.kind) return s.ast() === a.ast();
            }
            return !1;
          }
          switch (e.kind) {
            case 8:
              return this.checkSymbolsForDeclarationEquality(e, t);
            case 4096:
              if (e.isAccessor()) {
                var l = e.getGetter(),
                  c = e.getSetter();
                if (l && l === t) return !0;
                if (c && c === t) return !0;
              }
              return !1;
            case 16384:
              if (t.isAccessor()) {
                var l = t.getGetter(),
                  c = t.getSetter();
                if (l && l === e) return !0;
                if (c && c === e) return !0;
              }
              return !1;
            case 32768:
              return this.checkSymbolsForDeclarationEquality(e, t);
          }
          return e === t;
        }),
        (e.checkSymbolsForDeclarationEquality = function (e, t) {
          for (
            var n = e.getDeclarations(),
              r = t.getDeclarations(),
              i = 0,
              o = n.length;
            o > i;
            i++
          )
            for (var s = 0, a = r.length; a > s; s++)
              if (this.declarationsAreSameOrParents(n[i], r[s])) return !0;
          return !1;
        }),
        (e.declarationsAreSameOrParents = function (e, t) {
          var n = e.getParentDecl(),
            r = t.getParentDecl();
          return e === t || e === r || n === t || n === r ? !0 : !1;
        }),
        e
      );
    })();
    e.FindReferenceHelpers = t;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t, n) {
      e.log(t);
      var r = Date.now(),
        i = n(),
        o = Date.now();
      if (
        (e.log(t + " completed in " + (o - r) + " msec"), "string" == typeof i)
      ) {
        var s = i;
        s.length > 128 && (s = s.substring(0, 128) + "..."),
          e.log(
            "  result.length=" +
              s.length +
              ", result='" +
              JSON.stringify(s) +
              "'"
          );
      }
      return i;
    }
    function r(t, r, i) {
      try {
        var o = n(t, r, i);
        return JSON.stringify({ result: o });
      } catch (s) {
        return (
          e.Services.logInternalError(t, s),
          (s.description = r),
          JSON.stringify({ error: s })
        );
      }
    }
    var i = (function () {
      function e(e) {
        (this.factory = e), e.registerShim(this);
      }
      return (
        (e.prototype.dispose = function () {
          this.factory.unregisterShim(this);
        }),
        e
      );
    })();
    t.ShimBase = i;
    var o = (function () {
        function t(e) {
          (this.scriptSnapshotShim = e), (this.lineStartPositions = null);
        }
        return (
          (t.prototype.getText = function (e, t) {
            return this.scriptSnapshotShim.getText(e, t);
          }),
          (t.prototype.getLength = function () {
            return this.scriptSnapshotShim.getLength();
          }),
          (t.prototype.getLineStartPositions = function () {
            return (
              null == this.lineStartPositions &&
                (this.lineStartPositions = JSON.parse(
                  this.scriptSnapshotShim.getLineStartPositions()
                )),
              this.lineStartPositions
            );
          }),
          (t.prototype.getTextChangeRangeSinceVersion = function (t) {
            var n = this.scriptSnapshotShim.getTextChangeRangeSinceVersion(t);
            if (null == n) return null;
            var r = JSON.parse(n);
            return new e.TextChangeRange(
              new e.TextSpan(r.span.start, r.span.length),
              r.newLength
            );
          }),
          t
        );
      })(),
      s = (function () {
        function e(e) {
          this.shimHost = e;
        }
        return (
          (e.prototype.information = function () {
            return this.shimHost.information();
          }),
          (e.prototype.debug = function () {
            return this.shimHost.debug();
          }),
          (e.prototype.warning = function () {
            return this.shimHost.warning();
          }),
          (e.prototype.error = function () {
            return this.shimHost.error();
          }),
          (e.prototype.fatal = function () {
            return this.shimHost.fatal();
          }),
          (e.prototype.log = function (e) {
            this.shimHost.log(e);
          }),
          (e.prototype.getCompilationSettings = function () {
            var e = this.shimHost.getCompilationSettings();
            if (null == e || "" == e) return null;
            var t = JSON.parse(e);
            return t;
          }),
          (e.prototype.getScriptFileNames = function () {
            var e = this.shimHost.getScriptFileNames();
            return JSON.parse(e);
          }),
          (e.prototype.getScriptSnapshot = function (e) {
            return new o(this.shimHost.getScriptSnapshot(e));
          }),
          (e.prototype.getScriptVersion = function (e) {
            return this.shimHost.getScriptVersion(e);
          }),
          (e.prototype.getScriptIsOpen = function (e) {
            return this.shimHost.getScriptIsOpen(e);
          }),
          (e.prototype.getScriptByteOrderMark = function (e) {
            return this.shimHost.getScriptByteOrderMark(e);
          }),
          (e.prototype.getDiagnosticsObject = function () {
            return this.shimHost.getDiagnosticsObject();
          }),
          (e.prototype.getLocalizedDiagnosticMessages = function () {
            var e = this.shimHost.getLocalizedDiagnosticMessages();
            if (null == e || "" == e) return null;
            try {
              return JSON.parse(e);
            } catch (t) {
              return (
                this.log(
                  t.description ||
                    "diagnosticMessages.generated.json has invalid JSON format"
                ),
                null
              );
            }
          }),
          (e.prototype.resolveRelativePath = function (e, t) {
            return this.shimHost.resolveRelativePath(e, t);
          }),
          (e.prototype.fileExists = function (e) {
            return this.shimHost.fileExists(e);
          }),
          (e.prototype.directoryExists = function (e) {
            return this.shimHost.directoryExists(e);
          }),
          (e.prototype.getParentDirectory = function (e) {
            return this.shimHost.getParentDirectory(e);
          }),
          e
        );
      })();
    (t.LanguageServiceShimHostAdapter = s),
      (t.simpleForwardCall = n),
      (t.forwardJSONCall = r);
    var a = (function (t) {
      function n(e, n, r) {
        t.call(this, e),
          (this.host = n),
          (this.languageService = r),
          (this.logger = this.host);
      }
      return (
        __extends(n, t),
        (n.prototype.forwardJSONCall = function (t, n) {
          return e.Services.forwardJSONCall(this.logger, t, n);
        }),
        (n.prototype.dispose = function (e) {
          this.logger.log("dispose()"),
            (this.languageService = null),
            debugObjectHost &&
              debugObjectHost.CollectGarbage &&
              (debugObjectHost.CollectGarbage(),
              this.logger.log("CollectGarbage()")),
            (this.logger = null),
            t.prototype.dispose.call(this, e);
        }),
        (n.prototype.refresh = function (e) {
          var t = this;
          this.forwardJSONCall("refresh(" + e + ")", function () {
            return t.languageService.refresh(), null;
          });
        }),
        (n.prototype.cleanupSemanticCache = function () {
          var e = this;
          this.forwardJSONCall("cleanupSemanticCache()", function () {
            return e.languageService.cleanupSemanticCache(), null;
          });
        }),
        (n.realizeDiagnosticCategory = function (t) {
          switch (t) {
            case 1:
              return e.Services.DiagnosticCategory.error;
            case 0:
              return e.Services.DiagnosticCategory.warning;
            case 2:
              return e.Services.DiagnosticCategory.message;
            default:
              return e.Services.DiagnosticCategory.none;
          }
        }),
        (n.realizeDiagnostic = function (e) {
          return {
            message: e.text(),
            start: e.start(),
            length: e.length(),
            category: n.realizeDiagnosticCategory(e.info().category),
          };
        }),
        (n.prototype.realizeDiagnosticWithFileName = function (e) {
          return {
            fileName: e.fileName(),
            message: e.text(),
            start: e.start(),
            length: e.length(),
            category: n.realizeDiagnosticCategory(e.info().category),
          };
        }),
        (n.prototype.getSyntacticDiagnostics = function (e) {
          var t = this;
          return this.forwardJSONCall(
            'getSyntacticDiagnostics("' + e + '")',
            function () {
              var r = t.languageService.getSyntacticDiagnostics(e);
              return r.map(n.realizeDiagnostic);
            }
          );
        }),
        (n.prototype.getSemanticDiagnostics = function (e) {
          var t = this;
          return this.forwardJSONCall(
            'getSemanticDiagnostics("' + e + '")',
            function () {
              var r = t.languageService.getSemanticDiagnostics(e);
              return r.map(n.realizeDiagnostic);
            }
          );
        }),
        (n.prototype.getCompilerOptionsDiagnostics = function () {
          var e = this;
          return this.forwardJSONCall(
            "getCompilerOptionsDiagnostics()",
            function () {
              var t = e.languageService.getCompilerOptionsDiagnostics();
              return t.map(function (t) {
                return e.realizeDiagnosticWithFileName(t);
              });
            }
          );
        }),
        (n.prototype.getTypeAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getTypeAtPosition("' + e + '", ' + t + ")",
            function () {
              var r = n.languageService.getTypeAtPosition(e, t);
              return r;
            }
          );
        }),
        (n.prototype.getNameOrDottedNameSpan = function (e, t, n) {
          var r = this;
          return this.forwardJSONCall(
            'getNameOrDottedNameSpan("' + e + '", ' + t + ", " + n + ")",
            function () {
              var i = r.languageService.getNameOrDottedNameSpan(e, t, n);
              return i;
            }
          );
        }),
        (n.prototype.getBreakpointStatementAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getBreakpointStatementAtPosition("' + e + '", ' + t + ")",
            function () {
              var r = n.languageService.getBreakpointStatementAtPosition(e, t);
              return r;
            }
          );
        }),
        (n.prototype.getSignatureAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getSignatureAtPosition("' + e + '", ' + t + ")",
            function () {
              var r = n.languageService.getSignatureAtPosition(e, t);
              return r;
            }
          );
        }),
        (n.prototype.getDefinitionAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getDefinitionAtPosition("' + e + '", ' + t + ")",
            function () {
              return n.languageService.getDefinitionAtPosition(e, t);
            }
          );
        }),
        (n.prototype.getBraceMatchingAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getBraceMatchingAtPosition("' + e + '", ' + t + ")",
            function () {
              var r = n.languageService.getBraceMatchingAtPosition(e, t);
              return r;
            }
          );
        }),
        (n.prototype.getIndentationAtPosition = function (e, t, n) {
          var r = this;
          return this.forwardJSONCall(
            'getIndentationAtPosition("' + e + '", ' + t + ")",
            function () {
              var i = JSON.parse(n),
                o = r.languageService.getIndentationAtPosition(e, t, i);
              return { value: o };
            }
          );
        }),
        (n.prototype.getReferencesAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getReferencesAtPosition("' + e + '", ' + t + ")",
            function () {
              return n.languageService.getReferencesAtPosition(e, t);
            }
          );
        }),
        (n.prototype.getOccurrencesAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getOccurrencesAtPosition("' + e + '", ' + t + ")",
            function () {
              return n.languageService.getOccurrencesAtPosition(e, t);
            }
          );
        }),
        (n.prototype.getImplementorsAtPosition = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getImplementorsAtPosition("' + e + '", ' + t + ")",
            function () {
              return n.languageService.getImplementorsAtPosition(e, t);
            }
          );
        }),
        (n.prototype.getCompletionsAtPosition = function (e, t, n) {
          var r = this;
          return this.forwardJSONCall(
            'getCompletionsAtPosition("' + e + '", ' + t + ", " + n + ")",
            function () {
              var i = r.languageService.getCompletionsAtPosition(e, t, n);
              return i;
            }
          );
        }),
        (n.prototype.getCompletionEntryDetails = function (e, t, n) {
          var r = this;
          return this.forwardJSONCall(
            'getCompletionEntryDetails("' + e + '", ' + t + ", " + n + ")",
            function () {
              var i = r.languageService.getCompletionEntryDetails(e, t, n);
              return i;
            }
          );
        }),
        (n.prototype.getFormattingEditsForRange = function (e, t, n, r) {
          var i = this;
          return this.forwardJSONCall(
            'getFormattingEditsForRange("' + e + '", ' + t + ", " + n + ")",
            function () {
              var o = JSON.parse(r),
                s = i.languageService.getFormattingEditsForRange(e, t, n, o);
              return s;
            }
          );
        }),
        (n.prototype.getFormattingEditsForDocument = function (e, t, n, r) {
          var i = this;
          return this.forwardJSONCall(
            'getFormattingEditsForDocument("' + e + '", ' + t + ", " + n + ")",
            function () {
              var o = JSON.parse(r),
                s = i.languageService.getFormattingEditsForDocument(e, t, n, o);
              return s;
            }
          );
        }),
        (n.prototype.getFormattingEditsOnPaste = function (e, t, n, r) {
          var i = this;
          return this.forwardJSONCall(
            'getFormattingEditsOnPaste("' + e + '", ' + t + ", " + n + ")",
            function () {
              var o = JSON.parse(r),
                s = i.languageService.getFormattingEditsOnPaste(e, t, n, o);
              return s;
            }
          );
        }),
        (n.prototype.getFormattingEditsAfterKeystroke = function (e, t, n, r) {
          var i = this;
          return this.forwardJSONCall(
            'getFormattingEditsAfterKeystroke("' +
              e +
              '", ' +
              t +
              ', "' +
              n +
              '")',
            function () {
              var o = JSON.parse(r),
                s = i.languageService.getFormattingEditsAfterKeystroke(
                  e,
                  t,
                  n,
                  o
                );
              return s;
            }
          );
        }),
        (n.prototype.getNavigateToItems = function (e) {
          var t = this;
          return this.forwardJSONCall(
            'getNavigateToItems("' + e + '")',
            function () {
              var n = t.languageService.getNavigateToItems(e),
                r = t._navigateToItemsToString(n);
              return r;
            }
          );
        }),
        (n.prototype.getScriptLexicalStructure = function (e) {
          var t = this;
          return this.forwardJSONCall(
            'getScriptLexicalStructure("' + e + '")',
            function () {
              var n = t.languageService.getScriptLexicalStructure(e),
                r = t._navigateToItemsToString(n);
              return r;
            }
          );
        }),
        (n.prototype.getOutliningRegions = function (e) {
          var t = this;
          return this.forwardJSONCall(
            'getOutliningRegions("' + e + '")',
            function () {
              var n = t.languageService.getOutliningRegions(e);
              return n;
            }
          );
        }),
        (n.prototype.getEmitOutput = function (e) {
          var t = this;
          return this.forwardJSONCall(
            'getEmitOutput("' + e + '")',
            function () {
              var n = t.languageService.getEmitOutput(e);
              return n;
            }
          );
        }),
        (n.prototype._navigateToItemsToString = function (e) {
          for (var t = [], n = 0; n < e.length; n++) {
            var r = e[n];
            t.push({
              name: r.name,
              kind: r.kind,
              kindModifiers: r.kindModifiers,
              containerName: r.containerName,
              containerKind: r.containerKind,
              matchKind: r.matchKind,
              fileName: r.fileName,
              minChar: r.minChar,
              limChar: r.limChar,
            });
          }
          return t;
        }),
        n
      );
    })(i);
    t.LanguageServiceShim = a;
    var l = (function (t) {
      function n(n, r) {
        t.call(this, n),
          (this.host = r),
          (this.classifier = new e.Services.Classifier(this.host));
      }
      return (
        __extends(n, t),
        (n.prototype.getClassificationsForLine = function (e, t) {
          for (
            var n = this.classifier.getClassificationsForLine(e, t),
              r = n.entries,
              i = "",
              o = 0;
            o < r.length;
            o++
          )
            (i += r[o].length + "\n"), (i += r[o].classification + "\n");
          return (i += n.finalLexState);
        }),
        n
      );
    })(i);
    t.ClassifierShim = l;
    var c = (function (t) {
      function n(n, r) {
        t.call(this, n),
          (this.host = r),
          (this.logger = this.host.logger),
          (this.services = new e.Services.CoreServices(this.host));
      }
      return (
        __extends(n, t),
        (n.prototype.forwardJSONCall = function (t, n) {
          return e.Services.forwardJSONCall(this.logger, t, n);
        }),
        (n.prototype.getPreProcessedFileInfo = function (e, t) {
          var n = this;
          return this.forwardJSONCall(
            'getPreProcessedFileInfo("' + e + '")',
            function () {
              var r = n.services.getPreProcessedFileInfo(e, t);
              return r;
            }
          );
        }),
        (n.prototype.getDefaultCompilationSettings = function () {
          var e = this;
          return this.forwardJSONCall(
            "getDefaultCompilationSettings()",
            function () {
              var t = e.services.getDefaultCompilationSettings();
              return t;
            }
          );
        }),
        (n.prototype.dumpMemory = function () {
          var e = this;
          return this.forwardJSONCall("dumpMemory()", function () {
            return e.services.dumpMemory();
          });
        }),
        (n.prototype.getMemoryInfo = function () {
          var e = this;
          return this.forwardJSONCall("getMemoryInfo()", function () {
            var t = e.services.getMemoryInfo();
            return t;
          });
        }),
        n
      );
    })(i);
    t.CoreServicesShim = c;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function (t) {
      function n() {
        t.call(this, n.MaximumDepth),
          (this.inObjectLiteralExpression = !1),
          (this.elements = []);
      }
      return (
        __extends(n, t),
        (n.prototype.visitClassDeclaration = function (e) {
          this.addOutlineRange(e, e.openBraceToken, e.closeBraceToken),
            t.prototype.visitClassDeclaration.call(this, e);
        }),
        (n.prototype.visitInterfaceDeclaration = function (e) {
          this.addOutlineRange(e, e.body, e.body),
            t.prototype.visitInterfaceDeclaration.call(this, e);
        }),
        (n.prototype.visitModuleDeclaration = function (e) {
          this.addOutlineRange(e, e.openBraceToken, e.closeBraceToken),
            t.prototype.visitModuleDeclaration.call(this, e);
        }),
        (n.prototype.visitEnumDeclaration = function (e) {
          this.addOutlineRange(e, e.openBraceToken, e.closeBraceToken),
            t.prototype.visitEnumDeclaration.call(this, e);
        }),
        (n.prototype.visitFunctionDeclaration = function (e) {
          this.addOutlineRange(e, e.block, e.block),
            t.prototype.visitFunctionDeclaration.call(this, e);
        }),
        (n.prototype.visitFunctionExpression = function (e) {
          this.addOutlineRange(e, e.block, e.block),
            t.prototype.visitFunctionExpression.call(this, e);
        }),
        (n.prototype.visitConstructorDeclaration = function (e) {
          this.addOutlineRange(e, e.block, e.block),
            t.prototype.visitConstructorDeclaration.call(this, e);
        }),
        (n.prototype.visitMemberFunctionDeclaration = function (e) {
          this.addOutlineRange(e, e.block, e.block),
            t.prototype.visitMemberFunctionDeclaration.call(this, e);
        }),
        (n.prototype.visitGetAccessor = function (e) {
          this.inObjectLiteralExpression ||
            this.addOutlineRange(e, e.block, e.block),
            t.prototype.visitGetAccessor.call(this, e);
        }),
        (n.prototype.visitSetAccessor = function (e) {
          this.inObjectLiteralExpression ||
            this.addOutlineRange(e, e.block, e.block),
            t.prototype.visitSetAccessor.call(this, e);
        }),
        (n.prototype.visitObjectLiteralExpression = function (e) {
          var n = this.inObjectLiteralExpression;
          (this.inObjectLiteralExpression = !0),
            t.prototype.visitObjectLiteralExpression.call(this, e),
            (this.inObjectLiteralExpression = n);
        }),
        (n.prototype.addOutlineRange = function (t, n, r) {
          if (n && r) {
            var i = this.position() + e.Syntax.childOffset(t, n),
              o =
                this.position() +
                e.Syntax.childOffset(t, r) +
                r.leadingTriviaWidth() +
                r.width();
            this.elements.push(e.TextSpan.fromBounds(i, o));
          }
        }),
        (n.collectElements = function (e) {
          var t = new n();
          return e.accept(t), t.elements;
        }),
        (n.MaximumDepth = 10),
        n
      );
    })(e.DepthLimitedWalker);
    t.OutliningElementsCollector = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t() {}
      return (
        (t.getIndentation = function (e, n, r, i) {
          var o = 0,
            s = e.findToken(r),
            a = s;
          if (
            (10 === s.token().kind()
              ? (a = s.previousToken())
              : t.belongsToBracket(n, s, r) && (a = s.parent()),
            null === a)
          )
            return o;
          if (14 === a.kind() || 12 === a.kind()) return o;
          for (var l = a.element(), c = a.parent(); null !== c; ) {
            if (c.fullStart() !== a.fullStart())
              if (t.isInContainerNode(c.element(), l)) o += i.IndentSize;
              else {
                var u = t.getCustomListIndentation(c.element(), l);
                if (-1 !== u) return o + u;
              }
            (a = c), (l = c.element()), (c = c.parent());
          }
          return o;
        }),
        (t.belongsToBracket = function (t, n, r) {
          switch (n.token().kind()) {
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
              if (r < n.start())
                for (var i = t.getText(r, n.start()), o = 0; o < i.length; o++)
                  if (e.CharacterInfo.isLineTerminator(i.charCodeAt(o)))
                    return !1;
              return !0;
          }
          return !1;
        }),
        (t.isInContainerNode = function (e, t) {
          switch (e.kind()) {
            case 131:
            case 130:
            case 132:
            case 133:
            case 146:
            case 151:
            case 233:
            case 234:
              return !0;
            case 122:
              return !0;
            case 128:
              return 122 !== t.kind();
            case 129:
            case 135:
            case 139:
            case 140:
            case 222:
            case 236:
            case 237:
            case 129:
            case 137:
            case 154:
            case 155:
            case 158:
            case 161:
            case 163:
            case 147:
            case 235:
              return 146 !== t.kind();
            case 159:
              return !1;
            default:
              return e.isNode() && e.isStatement();
          }
        }),
        (t.getCustomListIndentation = function (e, n) {
          switch (e.kind()) {
            case 2:
              for (var r = 0, i = e.childCount(); i > r; r++) {
                var o = e.childAt(r);
                if (null !== o && o === n)
                  return t.getListItemIndentation(e, r - 1);
              }
              break;
            case 226:
              var s = e,
                a = s.arguments;
              if (null !== a && s.closeParenToken === n)
                return t.getListItemIndentation(a, a.childCount() - 1);
              break;
            case 227:
              var l = e,
                c = l.parameters;
              if (null !== c && l.closeParenToken === n)
                return t.getListItemIndentation(c, c.childCount() - 1);
              break;
            case 228:
              var u = e,
                p = u.typeArguments;
              if (null !== p && u.greaterThanToken === n)
                return t.getListItemIndentation(p, p.childCount() - 1);
              break;
            case 229:
              var h = e,
                d = h.typeParameters;
              if (null !== d && h.greaterThanToken === n)
                return t.getListItemIndentation(d, d.childCount() - 1);
          }
          return -1;
        }),
        (t.getListItemIndentation = function (e, t) {
          for (var n = t; n > 0; n--) {
            var r = e.childAt(n),
              i = e.childAt(n - 1);
            if (
              (null !== r && r.leadingTrivia().hasNewLine()) ||
              (null !== i && i.trailingTrivia().hasNewLine())
            )
              return r.leadingTriviaWidth();
          }
          return -1;
        }),
        t
      );
    })();
    t.Indenter = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    !(function (t) {
      function n(t) {
        for (var n = [], r = 0; r < arguments.length - 1; r++)
          n[r] = arguments[r + 1];
        if (!t) return null;
        if (0 == n.length) return new e.Services.SpanInfo(t.start(), t.end());
        for (var i, o, s = 0; s < n.length; s++) {
          var a = n[s];
          a && (void 0 == i && (i = t.childStart(a)), (o = t.childEnd(a)));
        }
        return new e.Services.SpanInfo(i, o);
      }
      function r(t, n) {
        return new e.Services.SpanInfo(t.start(), n);
      }
      function i(t, n) {
        if (e.isDTSFile(t.fileName())) return null;
        var r = t.sourceUnit(),
          i = r.findToken(n),
          s = t.lineMap(),
          a = s.getLineNumberFromPosition(n),
          l = s.getLineNumberFromPosition(i.start());
        if (l > a) return null;
        var c = new o(a, s);
        return c.breakpointSpanOf(i);
      }
      var o = (function () {
        function t(e, t) {
          (this.posLine = e), (this.lineMap = t);
        }
        return (
          (t.prototype.breakpointSpanOfToken = function (e) {
            switch (e.token().tokenKind) {
              case 70:
                return this.breakpointSpanOfOpenBrace(e);
              case 71:
                return this.breakpointSpanOfCloseBrace(e);
              case 79:
                return this.breakpointSpanOfComma(e);
              case 78:
              case 10:
                return this.breakpointSpanIfStartsOnSameLine(e.previousToken());
              case 73:
                return this.breakpointSpanOfCloseParen(e);
              case 22:
                var t = e.parent();
                if (t && 161 == t.kind())
                  return this.breakpointSpanIfStartsOnSameLine(e.nextToken());
            }
            return this.breakpointSpanOfContainingNode(e);
          }),
          (t.prototype.breakpointSpanOfOpenBrace = function (e) {
            var t = e.containingNode();
            if (t) {
              var n = t;
              switch (
                (t &&
                  146 == t.kind() &&
                  ((t = t.containingNode()), t || (t = n)),
                t.kind())
              ) {
                case 146:
                  return this.canHaveBreakpointInBlock(t)
                    ? this.breakpointSpanOfFirstStatementInBlock(t)
                    : null;
                case 130:
                case 131:
                case 129:
                case 137:
                case 135:
                case 139:
                case 140:
                case 222:
                case 218:
                case 219:
                  return this.canHaveBreakpointInDeclaration(t)
                    ? this.posLine !=
                      this.lineMap.getLineNumberFromPosition(t.start())
                      ? this.breakpointSpanOfFirstChildOfSyntaxList(
                          this.getSyntaxListOfDeclarationWithElements(t)
                        )
                      : this.breakpointSpanOf(t)
                    : null;
                case 132:
                  return this.canHaveBreakpointInDeclaration(t)
                    ? this.posLine !=
                      this.lineMap.getLineNumberFromPosition(t.start())
                      ? this.breakpointSpanOfFirstEnumElement(t)
                      : this.breakpointSpanOf(t)
                    : null;
                case 147:
                case 155:
                case 158:
                case 236:
                  return this.posLine !=
                    this.lineMap.getLineNumberFromPosition(t.start())
                    ? this.breakpointSpanOfFirstStatementInBlock(n)
                    : this.breakpointSpanOf(t);
                case 161:
                  return this.breakpointSpanOfFirstStatementInBlock(n);
                case 154:
                  return this.posLine !=
                    this.lineMap.getLineNumberFromPosition(t.start())
                    ? this.breakpointSpanOfFirstStatementInBlock(n)
                    : this.breakpointSpanOf(e.previousToken());
                case 235:
                case 233:
                case 234:
                case 163:
                case 159:
                case 237:
                  return this.breakpointSpanOfFirstStatementInBlock(n);
                case 151:
                  return this.posLine !=
                    this.lineMap.getLineNumberFromPosition(t.start())
                    ? this.breakpointSpanOfFirstStatementOfFirstCaseClause(t)
                    : this.breakpointSpanOf(t);
              }
            }
            return null;
          }),
          (t.prototype.breakpointSpanOfCloseBrace = function (e) {
            var t = e.containingNode();
            if (t) {
              var r = t;
              switch (
                (146 == t.kind() && ((t = t.containingNode()), t || (t = r)),
                t.kind())
              ) {
                case 146:
                  return this.canHaveBreakpointInBlock(t)
                    ? this.breakpointSpanOfLastStatementInBlock(t)
                    : null;
                case 130:
                  if (!this.canHaveBreakpointInDeclaration(t)) return null;
                  var i = t.node();
                  return i.moduleElements && i.moduleElements.childCount() > 0
                    ? n(e)
                    : null;
                case 131:
                case 129:
                case 137:
                case 135:
                case 139:
                case 140:
                case 222:
                  return this.canHaveBreakpointInDeclaration(t) ? n(e) : null;
                case 132:
                  return this.canHaveBreakpointInDeclaration(t) ? n(e) : null;
                case 147:
                case 235:
                case 155:
                case 154:
                case 158:
                case 161:
                case 233:
                case 234:
                case 163:
                case 159:
                case 236:
                case 237:
                case 218:
                case 219:
                  return this.breakpointSpanOfLastStatementInBlock(r);
                case 151:
                  return this.breakpointSpanOfLastStatementOfLastCaseClause(t);
              }
            }
            return null;
          }),
          (t.prototype.breakpointSpanOfComma = function (e) {
            var t = e.parent();
            if (t && t.element().isSeparatedList()) {
              var n = t.parent();
              if (n)
                switch (n.kind()) {
                  case 224:
                  case 132:
                  case 227:
                    var r = t.childIndex(e.token());
                    if (r > 0) {
                      var i = t.childAt(r - 1);
                      return this.breakpointSpanOf(i);
                    }
                    if (132 == n.kind()) return null;
                }
            }
            return this.breakpointSpanOfContainingNode(e);
          }),
          (t.prototype.breakpointSpanOfCloseParen = function (e) {
            var t = e.parent();
            if (t)
              switch (t.kind()) {
                case 154:
                case 227:
                  return this.breakpointSpanOf(e.previousToken());
              }
            return this.breakpointSpanOfContainingNode(e);
          }),
          (t.prototype.canHaveBreakpointInBlock = function (t) {
            if (!t || e.SyntaxUtilities.isAmbientDeclarationSyntax(t))
              return !1;
            var n = t.node();
            return n.statements && 0 != n.statements.childCount();
          }),
          (t.prototype.breakpointSpanOfFirstStatementInBlock = function (e) {
            if (!e) return null;
            var t = e.node(),
              n = e.getPositionedChild(t.statements);
            if (!n || 0 == n.childCount()) return null;
            var r = n.childAt(0);
            return r && 146 == r.kind()
              ? this.canHaveBreakpointInBlock(r)
                ? this.breakpointSpanOfFirstStatementInBlock(r)
                : null
              : this.breakpointSpanOf(r);
          }),
          (t.prototype.breakpointSpanOfLastStatementInBlock = function (e) {
            if (!e) return null;
            var t = e.node(),
              n = e.getPositionedChild(t.statements);
            if (!n || 0 == n.childCount()) return null;
            var r = n.childAt(n.childCount() - 1);
            return r && 146 == r.kind()
              ? this.canHaveBreakpointInBlock(r)
                ? this.breakpointSpanOfLastStatementInBlock(r)
                : null
              : this.breakpointSpanOf(r);
          }),
          (t.prototype.breakpointSpanOfFirstChildOfSyntaxList = function (e) {
            if (!e) return null;
            var t = e.list();
            if (0 == t.childCount()) return null;
            var n = e.childAt(0);
            return n && 146 == n.kind()
              ? this.canHaveBreakpointInBlock(n)
                ? this.breakpointSpanOfFirstStatementInBlock(n)
                : null
              : this.breakpointSpanOf(n);
          }),
          (t.prototype.breakpointSpanOfLastChildOfSyntaxList = function (e) {
            if (!e) return null;
            var t = e.list();
            if (0 == t.childCount()) return null;
            var n = e.childAt(0);
            return n && 146 == n.kind()
              ? this.canHaveBreakpointInBlock(n)
                ? this.breakpointSpanOfLastStatementInBlock(n)
                : null
              : this.breakpointSpanOf(n);
          }),
          (t.prototype.breakpointSpanOfNode = function (e) {
            var t = e.node();
            switch (t.kind()) {
              case 130:
              case 131:
              case 129:
              case 137:
              case 135:
              case 139:
              case 140:
              case 222:
                return this.breakpointSpanOfDeclarationWithElements(e);
              case 225:
                return this.breakpointSpanOfVariableDeclarator(e);
              case 224:
                return this.breakpointSpanOfVariableDeclaration(e);
              case 148:
                return this.breakpointSpanOfVariableStatement(e);
              case 242:
                return this.breakpointSpanOfParameter(e);
              case 136:
                return this.breakpointSpanOfMemberVariableDeclaration(e);
              case 133:
                return this.breakpointSpanOfImportDeclaration(e);
              case 132:
                return this.breakpointSpanOfEnumDeclaration(e);
              case 243:
                return this.breakpointSpanOfEnumElement(e);
              case 147:
                return this.breakpointSpanOfIfStatement(e);
              case 235:
                return this.breakpointSpanOfElseClause(e);
              case 155:
                return this.breakpointSpanOfForInStatement(e);
              case 154:
                return this.breakpointSpanOfForStatement(e);
              case 158:
                return this.breakpointSpanOfWhileStatement(e);
              case 161:
                return this.breakpointSpanOfDoStatement(e);
              case 151:
                return this.breakpointSpanOfSwitchStatement(e);
              case 233:
                return this.breakpointSpanOfCaseSwitchClause(e);
              case 234:
                return this.breakpointSpanOfDefaultSwitchClause(e);
              case 163:
                return this.breakpointSpanOfWithStatement(e);
              case 159:
                return this.breakpointSpanOfTryStatement(e);
              case 236:
                return this.breakpointSpanOfCatchClause(e);
              case 237:
                return this.breakpointSpanOfFinallyClause(e);
              case 218:
                return this.breakpointSpanOfParenthesizedArrowFunctionExpression(
                  e
                );
              case 219:
                return this.breakpointSpanOfSimpleArrowFunctionExpression(e);
              default:
                return t.isStatement()
                  ? this.breakpointSpanOfStatement(e)
                  : this.breakpointOfExpression(e);
            }
          }),
          (t.prototype.isExpressionOfArrowExpressions = function (e) {
            if (!e) return !1;
            var t = e.parent();
            if (t) {
              if (218 == t.kind()) {
                var n = e.element(),
                  r = t.element(),
                  i = t.getPositionedChild(r.expression);
                return i && i.element() == n;
              }
              if (219 == t.kind()) {
                var n = e.element(),
                  o = t.element(),
                  s = t.getPositionedChild(o.expression);
                return s && s.element() == n;
              }
              if (173 == t.kind())
                return this.isExpressionOfArrowExpressions(t);
            }
            return !1;
          }),
          (t.prototype.isInitializerOfForStatement = function (e) {
            if (!e) return !1;
            var t = e.parent();
            if (t && 154 == t.kind()) {
              var n = e.element(),
                r = t.element(),
                i = t.getPositionedChild(r.initializer);
              return i && i.element() == n;
            }
            return t && 173 == t.kind()
              ? this.isInitializerOfForStatement(t)
              : !1;
          }),
          (t.prototype.isConditionOfForStatement = function (e) {
            if (!e) return !1;
            var t = e.parent();
            if (t && 154 == t.kind()) {
              var n = e.element(),
                r = t.element(),
                i = t.getPositionedChild(r.condition);
              return i && i.element() == n;
            }
            return t && 173 == t.kind()
              ? this.isConditionOfForStatement(t)
              : !1;
          }),
          (t.prototype.isIncrememtorOfForStatement = function (e) {
            if (!e) return !1;
            var t = e.parent();
            if (t && 154 == t.kind()) {
              var n = e.element(),
                r = t.element(),
                i = t.getPositionedChild(r.incrementor);
              return i && i.element() == n;
            }
            return t && 173 == t.kind()
              ? this.isIncrememtorOfForStatement(t)
              : !1;
          }),
          (t.prototype.breakpointOfLeftOfCommaExpression = function (e) {
            var t = e.node();
            return this.breakpointSpanOf(e.getPositionedChild(t.left));
          }),
          (t.prototype.breakpointOfExpression = function (e) {
            if (
              this.isInitializerOfForStatement(e) ||
              this.isConditionOfForStatement(e) ||
              this.isIncrememtorOfForStatement(e)
            )
              return 173 == e.kind()
                ? this.breakpointOfLeftOfCommaExpression(e)
                : n(e);
            if (this.isExpressionOfArrowExpressions(e))
              return 173 == e.kind()
                ? this.breakpointOfLeftOfCommaExpression(e)
                : n(e);
            if (134 == e.kind()) {
              var t = e.node();
              return n(e, t.exportKeyword, t.equalsToken, t.identifier);
            }
            return this.breakpointSpanOfContainingNode(e);
          }),
          (t.prototype.breakpointSpanOfStatement = function (e) {
            var t = e.node();
            if (156 == t.kind()) return null;
            var r = e.containingNode();
            if (r && r.node().isStatement()) {
              var i = !1;
              switch (r.kind()) {
                case 130:
                case 131:
                case 129:
                case 137:
                case 135:
                case 139:
                case 140:
                case 146:
                case 147:
                case 235:
                case 155:
                case 154:
                case 158:
                case 161:
                case 151:
                case 233:
                case 234:
                case 163:
                case 159:
                case 236:
                case 237:
                case 146:
                  i = !0;
              }
              if (!i) return this.breakpointSpanOfContainingNode(e);
            }
            switch (t.kind()) {
              case 149:
                var o = t;
                return n(e.getPositionedChild(o.expression));
              case 150:
                var s = t;
                return n(e, s.returnKeyword, s.expression);
              case 157:
                var a = t;
                return n(e, a.throwKeyword, a.expression);
              case 152:
                var l = t;
                return n(e, l.breakKeyword, l.identifier);
              case 153:
                var c = t;
                return n(e, c.continueKeyword, c.identifier);
              case 162:
                var u = t;
                return n(e.getPositionedChild(u.debuggerKeyword));
              case 160:
                var p = t;
                return this.breakpointSpanOf(e.getPositionedChild(p.statement));
            }
            return null;
          }),
          (t.prototype.getSyntaxListOfDeclarationWithElements = function (t) {
            var n,
              r,
              i = t.node();
            switch (i.kind()) {
              case 130:
                n = i.moduleElements;
                break;
              case 131:
                n = i.classElements;
                break;
              case 129:
                r = i.block;
                break;
              case 137:
                r = i.block;
                break;
              case 135:
                r = i.block;
                break;
              case 139:
                r = i.block;
                break;
              case 140:
                r = i.block;
                break;
              case 222:
                r = i.block;
                break;
              case 218:
                r = i.block;
                break;
              case 219:
                r = i.block;
                break;
              default:
                throw e.Errors.argument(
                  "positionNode",
                  "unknown node kind in getSyntaxListOfDeclarationWithElements"
                );
            }
            var o = t;
            return (
              r && ((o = t.getPositionedChild(r)), (n = r.statements)),
              o.getPositionedChild(n)
            );
          }),
          (t.prototype.canHaveBreakpointInDeclaration = function (t) {
            return t && !e.SyntaxUtilities.isAmbientDeclarationSyntax(t);
          }),
          (t.prototype.breakpointSpanOfDeclarationWithElements = function (e) {
            if (!this.canHaveBreakpointInDeclaration(e)) return null;
            var t = e.node(),
              r = e.node();
            return (t.isModuleElement() && 120 != e.containingNode().kind()) ||
              t.isClassElement() ||
              (130 == r.kind() && r.name && 121 == r.name.kind())
              ? n(e)
              : this.breakpointSpanOfFirstChildOfSyntaxList(
                  this.getSyntaxListOfDeclarationWithElements(e)
                );
          }),
          (t.prototype.canHaveBreakpointInVariableDeclarator = function (t) {
            if (!t || e.SyntaxUtilities.isAmbientDeclarationSyntax(t))
              return !1;
            var n = t.node();
            return !!n.equalsValueClause;
          }),
          (t.prototype.breakpointSpanOfVariableDeclarator = function (e) {
            if (!this.canHaveBreakpointInVariableDeclarator(e)) return null;
            var t = e.containingNode();
            if (t && 224 == t.kind()) {
              var r = e.parent();
              return r && r.list().childAt(0) == e.node()
                ? this.breakpointSpanOfVariableDeclaration(t)
                : this.canHaveBreakpointInVariableDeclarator(e)
                ? n(e)
                : null;
            }
            return t ? this.breakpointSpanOfMemberVariableDeclaration(t) : null;
          }),
          (t.prototype.canHaveBreakpointInVariableDeclaration = function (t) {
            if (!t || e.SyntaxUtilities.isAmbientDeclarationSyntax(t))
              return !1;
            var n = t.node(),
              r = t.getPositionedChild(n.variableDeclarators);
            if (!r || 0 == r.childCount()) return !1;
            var i = r.childAt(0);
            return i && i.element().isNode()
              ? this.canHaveBreakpointInVariableDeclarator(r.childAt(0))
              : !1;
          }),
          (t.prototype.breakpointSpanOfVariableDeclaration = function (e) {
            if (!this.canHaveBreakpointInDeclaration(e)) return null;
            {
              var t = e.containingNode(),
                n = e.node(),
                i = e.getPositionedChild(n.variableDeclarators);
              i.childCount();
            }
            return t && 148 == t.kind()
              ? this.breakpointSpanOfVariableStatement(t)
              : this.canHaveBreakpointInVariableDeclaration(e)
              ? r(e, i.childEndAt(0))
              : null;
          }),
          (t.prototype.canHaveBreakpointInVariableStatement = function (t) {
            if (!t || e.SyntaxUtilities.isAmbientDeclarationSyntax(t))
              return !1;
            var n = t.node();
            return this.canHaveBreakpointInVariableDeclaration(
              t.getPositionedChild(n.variableDeclaration)
            );
          }),
          (t.prototype.breakpointSpanOfVariableStatement = function (e) {
            if (!this.canHaveBreakpointInVariableStatement(e)) return null;
            var t = e.node(),
              n = e.getPositionedChild(t.variableDeclaration),
              i = n.node(),
              o = n.getPositionedChild(i.variableDeclarators);
            return r(e, o.childEndAt(0));
          }),
          (t.prototype.breakpointSpanOfParameter = function (t) {
            if (e.SyntaxUtilities.isAmbientDeclarationSyntax(t)) return null;
            var r = t.node();
            return r.dotDotDotToken ||
              r.equalsValueClause ||
              r.modifiers.childCount() > 0
              ? n(t)
              : null;
          }),
          (t.prototype.breakpointSpanOfMemberVariableDeclaration = function (
            t
          ) {
            if (e.SyntaxUtilities.isAmbientDeclarationSyntax(t)) return null;
            var r = t.node();
            return this.canHaveBreakpointInVariableDeclarator(
              t.getPositionedChild(r.variableDeclarator)
            )
              ? n(t, r.modifiers, r.variableDeclarator)
              : null;
          }),
          (t.prototype.breakpointSpanOfImportDeclaration = function (t) {
            if (e.SyntaxUtilities.isAmbientDeclarationSyntax(t)) return null;
            var r = t.node();
            return n(
              t,
              r.modifiers,
              r.importKeyword,
              r.identifier,
              r.equalsToken,
              r.moduleReference
            );
          }),
          (t.prototype.breakpointSpanOfEnumDeclaration = function (e) {
            return this.canHaveBreakpointInDeclaration(e) ? n(e) : null;
          }),
          (t.prototype.breakpointSpanOfFirstEnumElement = function (e) {
            var t = e.node(),
              n = e.getPositionedChild(t.enumElements);
            return n && n.childCount()
              ? this.breakpointSpanOf(n.childAt(0))
              : null;
          }),
          (t.prototype.breakpointSpanOfEnumElement = function (t) {
            return e.SyntaxUtilities.isAmbientDeclarationSyntax(t)
              ? null
              : n(t);
          }),
          (t.prototype.breakpointSpanOfIfStatement = function (e) {
            var t = e.node();
            return n(
              e,
              t.ifKeyword,
              t.openParenToken,
              t.condition,
              t.closeParenToken
            );
          }),
          (t.prototype.breakpointSpanOfElseClause = function (e) {
            var t = e.node();
            return this.breakpointSpanOf(e.getPositionedChild(t.statement));
          }),
          (t.prototype.breakpointSpanOfForInStatement = function (e) {
            var t = e.node();
            return n(
              e,
              t.forKeyword,
              t.openParenToken,
              t.variableDeclaration,
              t.left,
              t.inKeyword,
              t.expression,
              t.closeParenToken
            );
          }),
          (t.prototype.breakpointSpanOfForStatement = function (e) {
            var t = e.node();
            return this.breakpointSpanOf(
              e.getPositionedChild(
                t.variableDeclaration ? t.variableDeclaration : t.initializer
              )
            );
          }),
          (t.prototype.breakpointSpanOfWhileStatement = function (e) {
            var t = e.node();
            return n(
              e,
              t.whileKeyword,
              t.openParenToken,
              t.condition,
              t.closeParenToken
            );
          }),
          (t.prototype.breakpointSpanOfDoStatement = function (e) {
            var t = e.node();
            return n(
              e,
              t.whileKeyword,
              t.openParenToken,
              t.condition,
              t.closeParenToken
            );
          }),
          (t.prototype.breakpointSpanOfSwitchStatement = function (e) {
            var t = e.node();
            return n(
              e,
              t.switchKeyword,
              t.openParenToken,
              t.expression,
              t.closeParenToken
            );
          }),
          (t.prototype.breakpointSpanOfFirstStatementOfFirstCaseClause = function (
            e
          ) {
            var t = e.node();
            if (t.switchClauses && 0 == t.switchClauses.childCount())
              return null;
            var n = e.getPositionedChild(t.switchClauses);
            if (0 == n.childCount()) return null;
            var r = n.childAt(0),
              i = null;
            if (r && 233 == r.kind()) {
              var o = r.node();
              i = o.statements;
            } else {
              if (!r || 234 != r.kind()) return null;
              var s = r.node();
              i = s.statements;
            }
            return this.breakpointSpanOfFirstChildOfSyntaxList(
              r.getPositionedChild(i)
            );
          }),
          (t.prototype.breakpointSpanOfLastStatementOfLastCaseClause = function (
            e
          ) {
            var t = e.node();
            if (t.switchClauses && 0 == t.switchClauses.childCount())
              return null;
            var n = e.getPositionedChild(t.switchClauses);
            if (0 == n.childCount()) return null;
            var r = n.childAt(n.childCount() - 1),
              i = null;
            if (r && 233 == r.kind()) {
              var o = r.node();
              i = o.statements;
            } else {
              if (!r || 234 != r.kind()) return null;
              var s = r.node();
              i = s.statements;
            }
            return this.breakpointSpanOfLastChildOfSyntaxList(
              r.getPositionedChild(i)
            );
          }),
          (t.prototype.breakpointSpanOfCaseSwitchClause = function (e) {
            var t = e.node();
            return this.breakpointSpanOfFirstChildOfSyntaxList(
              e.getPositionedChild(t.statements)
            );
          }),
          (t.prototype.breakpointSpanOfDefaultSwitchClause = function (e) {
            var t = e.node();
            return this.breakpointSpanOfFirstChildOfSyntaxList(
              e.getPositionedChild(t.statements)
            );
          }),
          (t.prototype.breakpointSpanOfWithStatement = function (e) {
            var t = e.node();
            return this.breakpointSpanOf(e.getPositionedChild(t.statement));
          }),
          (t.prototype.breakpointSpanOfTryStatement = function (e) {
            var t = e.node();
            return this.breakpointSpanOfFirstStatementInBlock(
              e.getPositionedChild(t.block)
            );
          }),
          (t.prototype.breakpointSpanOfCatchClause = function (e) {
            var t = e.node();
            return n(
              e,
              t.catchKeyword,
              t.openParenToken,
              t.identifier,
              t.typeAnnotation,
              t.closeParenToken
            );
          }),
          (t.prototype.breakpointSpanOfFinallyClause = function (e) {
            var t = e.node();
            return this.breakpointSpanOfFirstStatementInBlock(
              e.getPositionedChild(t.block)
            );
          }),
          (t.prototype.breakpointSpanOfParenthesizedArrowFunctionExpression = function (
            e
          ) {
            var t = e.node();
            return t.block
              ? this.breakpointSpanOfFirstStatementInBlock(
                  e.getPositionedChild(t.block)
                )
              : this.breakpointSpanOf(e.getPositionedChild(t.expression));
          }),
          (t.prototype.breakpointSpanOfSimpleArrowFunctionExpression = function (
            e
          ) {
            var t = e.node();
            return t.block
              ? this.breakpointSpanOfFirstStatementInBlock(
                  e.getPositionedChild(t.block)
                )
              : this.breakpointSpanOf(e.getPositionedChild(t.expression));
          }),
          (t.prototype.breakpointSpanOfContainingNode = function (e) {
            return this.breakpointSpanOf(e.containingNode());
          }),
          (t.prototype.breakpointSpanIfStartsOnSameLine = function (e) {
            return e &&
              this.posLine == this.lineMap.getLineNumberFromPosition(e.start())
              ? this.breakpointSpanOf(e)
              : null;
          }),
          (t.prototype.breakpointSpanOf = function (e) {
            if (!e) return null;
            for (var t = e.containingNode(); null != t; t = t.containingNode())
              if (244 == t.kind())
                return this.breakpointSpanIfStartsOnSameLine(t);
            var n = e.element();
            return n.isNode()
              ? this.breakpointSpanOfNode(e)
              : n.isToken()
              ? this.breakpointSpanOfToken(e)
              : this.breakpointSpanOfContainingNode(e);
          }),
          t
        );
      })();
      t.getBreakpointLocation = i;
    })(t.Breakpoints || (t.Breakpoints = {}));
    t.Breakpoints;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function (t) {
      function n(e, n) {
        t.call(this),
          (this.items = e),
          (this.fileName = n),
          (this.nameStack = []),
          (this.kindStack = []),
          (this.currentMemberVariableDeclaration = null),
          (this.currentVariableStatement = null),
          (this.currentInterfaceDeclaration = null);
      }
      return (
        __extends(n, t),
        (n.getListsOfAllScriptLexicalStructure = function (e, t, r) {
          var i = new n(e, t);
          r.accept(i);
        }),
        (n.prototype.createItem = function (t, n, r, i) {
          var o = new e.Services.NavigateToItem();
          (o.name = i),
            (o.kind = r),
            (o.matchKind = e.Services.MatchKind.exact),
            (o.fileName = this.fileName),
            (o.kindModifiers = this.getKindModifiers(n)),
            (o.minChar = this.position() + t.leadingTriviaWidth()),
            (o.limChar = o.minChar + t.width()),
            (o.containerName = this.nameStack.join(".")),
            (o.containerKind =
              0 === this.kindStack.length
                ? ""
                : e.ArrayUtilities.last(this.kindStack)),
            this.items.push(o);
        }),
        (n.prototype.getKindModifiers = function (t) {
          var n = [];
          return (
            e.SyntaxUtilities.containsToken(t, 47) &&
              n.push(e.Services.ScriptElementKindModifier.exportedModifier),
            e.SyntaxUtilities.containsToken(t, 63) &&
              n.push(e.Services.ScriptElementKindModifier.ambientModifier),
            e.SyntaxUtilities.containsToken(t, 57) &&
              n.push(e.Services.ScriptElementKindModifier.publicMemberModifier),
            e.SyntaxUtilities.containsToken(t, 55) &&
              n.push(
                e.Services.ScriptElementKindModifier.privateMemberModifier
              ),
            e.SyntaxUtilities.containsToken(t, 58) &&
              n.push(e.Services.ScriptElementKindModifier.staticModifier),
            n.length > 0
              ? n.join(",")
              : e.Services.ScriptElementKindModifier.none
          );
        }),
        (n.prototype.visitModuleDeclaration = function (e) {
          var t = this.getModuleNames(e);
          this.visitModuleDeclarationWorker(e, t, 0);
        }),
        (n.prototype.visitModuleDeclarationWorker = function (n, r, i) {
          if (i === r.length) t.prototype.visitModuleDeclaration.call(this, n);
          else {
            var o =
                (0 === i ? n.modifiers : e.Syntax.list([e.Syntax.token(47)]),
                r[i]),
              s = e.Services.ScriptElementKind.moduleElement;
            this.createItem(n, n.modifiers, s, o),
              this.nameStack.push(o),
              this.kindStack.push(s),
              this.visitModuleDeclarationWorker(n, r, i + 1),
              this.nameStack.pop(),
              this.kindStack.pop();
          }
        }),
        (n.prototype.getModuleNames = function (e) {
          var t = [];
          return (
            e.stringLiteral
              ? t.push(e.stringLiteral.text())
              : this.getModuleNamesHelper(e.name, t),
            t
          );
        }),
        (n.prototype.getModuleNamesHelper = function (e, t) {
          if (121 === e.kind()) {
            var n = e;
            this.getModuleNamesHelper(n.left, t), t.push(n.right.text());
          } else t.push(e.text());
        }),
        (n.prototype.visitClassDeclaration = function (n) {
          var r = n.identifier.text(),
            i = e.Services.ScriptElementKind.classElement;
          this.createItem(n, n.modifiers, i, r),
            this.nameStack.push(r),
            this.kindStack.push(i),
            t.prototype.visitClassDeclaration.call(this, n),
            this.nameStack.pop(),
            this.kindStack.pop();
        }),
        (n.prototype.visitInterfaceDeclaration = function (n) {
          var r = n.identifier.text(),
            i = e.Services.ScriptElementKind.interfaceElement;
          this.createItem(n, n.modifiers, i, r),
            this.nameStack.push(r),
            this.kindStack.push(i),
            (this.currentInterfaceDeclaration = n),
            t.prototype.visitInterfaceDeclaration.call(this, n),
            (this.currentInterfaceDeclaration = null),
            this.nameStack.pop(),
            this.kindStack.pop();
        }),
        (n.prototype.visitObjectType = function (e) {
          null === this.currentInterfaceDeclaration
            ? this.skip(e)
            : t.prototype.visitObjectType.call(this, e);
        }),
        (n.prototype.visitEnumDeclaration = function (n) {
          var r = n.identifier.text(),
            i = e.Services.ScriptElementKind.enumElement;
          this.createItem(n, n.modifiers, i, r),
            this.nameStack.push(r),
            this.kindStack.push(i),
            t.prototype.visitEnumDeclaration.call(this, n),
            this.nameStack.pop(),
            this.kindStack.pop();
        }),
        (n.prototype.visitConstructorDeclaration = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.constructorImplementationElement,
            "constructor"
          );
          var n = t.callSignature.parameterList.parameters;
          if (n)
            for (var r = 0, i = n.nonSeparatorCount(); i > r; r++) {
              var o = n.nonSeparatorAt(r);
              e.Debug.assert(242 === o.kind()),
                (e.SyntaxUtilities.containsToken(o.modifiers, 57) ||
                  e.SyntaxUtilities.containsToken(o.modifiers, 55)) &&
                  this.createItem(
                    t,
                    o.modifiers,
                    e.Services.ScriptElementKind.memberVariableElement,
                    o.identifier.text()
                  );
            }
          this.skip(t);
        }),
        (n.prototype.visitMemberFunctionDeclaration = function (t) {
          this.createItem(
            t,
            t.modifiers,
            e.Services.ScriptElementKind.memberFunctionElement,
            t.propertyName.text()
          ),
            this.skip(t);
        }),
        (n.prototype.visitGetAccessor = function (t) {
          this.createItem(
            t,
            t.modifiers,
            e.Services.ScriptElementKind.memberGetAccessorElement,
            t.propertyName.text()
          ),
            this.skip(t);
        }),
        (n.prototype.visitSetAccessor = function (t) {
          this.createItem(
            t,
            t.modifiers,
            e.Services.ScriptElementKind.memberSetAccessorElement,
            t.propertyName.text()
          ),
            this.skip(t);
        }),
        (n.prototype.visitMemberVariableDeclaration = function (e) {
          (this.currentMemberVariableDeclaration = e),
            t.prototype.visitMemberVariableDeclaration.call(this, e),
            (this.currentMemberVariableDeclaration = null);
        }),
        (n.prototype.visitVariableStatement = function (e) {
          (this.currentVariableStatement = e),
            t.prototype.visitVariableStatement.call(this, e),
            (this.currentVariableStatement = null);
        }),
        (n.prototype.visitVariableDeclarator = function (t) {
          var n = this.currentMemberVariableDeclaration
              ? this.currentMemberVariableDeclaration.modifiers
              : e.Syntax.emptyList,
            r = this.currentMemberVariableDeclaration
              ? e.Services.ScriptElementKind.memberVariableElement
              : e.Services.ScriptElementKind.variableElement;
          this.createItem(t, n, r, t.propertyName.text()), this.skip(t);
        }),
        (n.prototype.visitIndexSignature = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.indexSignatureElement,
            "[]"
          ),
            this.skip(t);
        }),
        (n.prototype.visitEnumElement = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.memberVariableElement,
            t.propertyName.text()
          ),
            this.skip(t);
        }),
        (n.prototype.visitCallSignature = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.callSignatureElement,
            "()"
          ),
            this.skip(t);
        }),
        (n.prototype.visitConstructSignature = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.constructSignatureElement,
            "new()"
          ),
            this.skip(t);
        }),
        (n.prototype.visitMethodSignature = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.memberFunctionElement,
            t.propertyName.text()
          ),
            this.skip(t);
        }),
        (n.prototype.visitPropertySignature = function (t) {
          this.createItem(
            t,
            e.Syntax.emptyList,
            e.Services.ScriptElementKind.memberVariableElement,
            t.propertyName.text()
          ),
            this.skip(t);
        }),
        (n.prototype.visitFunctionDeclaration = function (t) {
          t.identifier.width() > 0 &&
            this.createItem(
              t,
              t.modifiers,
              e.Services.ScriptElementKind.functionElement,
              t.identifier.text()
            ),
            this.skip(t);
        }),
        (n.prototype.visitBlock = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitIfStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitExpressionStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitThrowStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitReturnStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitSwitchStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitWithStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitTryStatement = function (e) {
          this.skip(e);
        }),
        (n.prototype.visitLabeledStatement = function (e) {
          this.skip(e);
        }),
        n
      );
    })(e.PositionTrackingWalker);
    t.GetScriptLexicalStructureWalker = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    function n(e, t) {
      for (var r in e)
        "object" == typeof e[r]
          ? n(e[r], t[r])
          : "function" != typeof e[r] && (e[r] = t[r]);
      return e;
    }
    t.copyDataObject = n;
    var r = (function () {
      function t() {
        this._shims = [];
      }
      return (
        (t.prototype.createPullLanguageService = function (t) {
          try {
            return new e.Services.LanguageService(t);
          } catch (n) {
            throw (e.Services.logInternalError(t, n), n);
          }
        }),
        (t.prototype.createLanguageServiceShim = function (t) {
          try {
            var n = new e.Services.LanguageServiceShimHostAdapter(t),
              r = this.createPullLanguageService(n);
            return new e.Services.LanguageServiceShim(this, t, r);
          } catch (i) {
            throw (e.Services.logInternalError(t, i), i);
          }
        }),
        (t.prototype.createClassifier = function (t) {
          try {
            return new e.Services.Classifier(t);
          } catch (n) {
            throw (e.Services.logInternalError(t, n), n);
          }
        }),
        (t.prototype.createClassifierShim = function (t) {
          try {
            return new e.Services.ClassifierShim(this, t);
          } catch (n) {
            throw (e.Services.logInternalError(t, n), n);
          }
        }),
        (t.prototype.createCoreServices = function (t) {
          try {
            return new e.Services.CoreServices(t);
          } catch (n) {
            throw (e.Services.logInternalError(t.logger, n), n);
          }
        }),
        (t.prototype.createCoreServicesShim = function (t) {
          try {
            return new e.Services.CoreServicesShim(this, t);
          } catch (n) {
            throw (e.Services.logInternalError(t.logger, n), n);
          }
        }),
        (t.prototype.close = function () {
          this._shims = [];
        }),
        (t.prototype.registerShim = function (e) {
          this._shims.push(e);
        }),
        (t.prototype.unregisterShim = function (t) {
          for (var n = 0, r = this._shims.length; r > n; n++)
            if (this._shims[n] === t) return delete this._shims[n], void 0;
          throw e.Errors.invalidOperation();
        }),
        t
      );
    })();
    t.TypeScriptServicesFactory = r;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {}));
var TypeScript;
!(function (e) {
  !(function (t) {
    var n = (function () {
      function t() {}
      return (
        (t.getMatchSpans = function (e, n) {
          var r = [],
            i = e.sourceUnit().findToken(n);
          return (
            t.getMatchingCloseBrace(i, n, r), t.getMatchingOpenBrace(i, n, r), r
          );
        }),
        (t.getMatchingCloseBrace = function (n, r, i) {
          if (n.start() === r) {
            var o = t.getMatchingCloseBraceTokenKind(n);
            if (null !== o)
              for (
                var s = n.parentElement(),
                  a = n.parent().fullStart(),
                  l = 0,
                  c = s.childCount();
                c > l;
                l++
              ) {
                var u = s.childAt(l);
                if (null !== u && u.fullWidth() > 0) {
                  if (u.kind() === o) {
                    var p = new e.TextSpan(r, n.token().width()),
                      h = new e.TextSpan(a + u.leadingTriviaWidth(), u.width());
                    i.push(p, h);
                    break;
                  }
                  a += u.fullWidth();
                }
              }
          }
        }),
        (t.getMatchingOpenBrace = function (n, r, i) {
          if (
            (n.fullStart() === r && (n = n.previousToken()),
            null !== n && n.start() === r - 1)
          ) {
            var o = t.getMatchingOpenBraceTokenKind(n);
            if (null !== o)
              for (
                var s = n.parentElement(),
                  a = n.parent().fullStart() + s.fullWidth(),
                  l = s.childCount() - 1;
                l >= 0;
                l--
              ) {
                var c = s.childAt(l);
                if (null !== c && c.fullWidth() > 0) {
                  if (c.kind() === o) {
                    var u = new e.TextSpan(r - 1, n.token().width()),
                      p = new e.TextSpan(
                        a - c.trailingTriviaWidth() - c.width(),
                        c.width()
                      );
                    i.push(u, p);
                    break;
                  }
                  a -= c.fullWidth();
                }
              }
          }
        }),
        (t.getMatchingCloseBraceTokenKind = function (t) {
          var n = null !== t && t.element();
          switch (n.kind()) {
            case 70:
              return 71;
            case 72:
              return 73;
            case 74:
              return 75;
            case 80:
              return e.SyntaxUtilities.isAngleBracket(t) ? 81 : null;
          }
          return null;
        }),
        (t.getMatchingOpenBraceTokenKind = function (t) {
          var n = null !== t && t.element();
          switch (n.kind()) {
            case 71:
              return 70;
            case 73:
              return 72;
            case 75:
              return 74;
            case 81:
              return e.SyntaxUtilities.isAngleBracket(t) ? 80 : null;
          }
          return null;
        }),
        t
      );
    })();
    t.BraceMatcher = n;
  })(e.Services || (e.Services = {}));
  e.Services;
})(TypeScript || (TypeScript = {})),
  define("vs/languages/typescript/lib/raw.typescriptServices", [], {}),
  define("vs/text!vs/languages/typescript/lib/lib.d.ts", function () {
    return '/* *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved. \r\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \r\n \r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABLITY OR NON-INFRINGEMENT. \r\n \r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n/// <reference no-default-lib="true"/>\r\n\r\n/////////////////////////////\r\n/// ECMAScript APIs\r\n/////////////////////////////\r\n\r\ndeclare var NaN: number;\r\ndeclare var Infinity: number;\r\n\r\n/**\r\n  * Evaluates JavaScript code and executes it. \r\n  * @param x A String value that contains valid JavaScript code.\r\n  */\r\ndeclare function eval(x: string): any;\r\n\r\n/**\r\n  * Converts A string to an integer.\r\n  * @param s A string to convert into a number.\r\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString. \r\n  * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\r\n  * All other strings are considered decimal.\r\n  */\r\ndeclare function parseInt(s: string, radix?: number): number;\r\n\r\n/**\r\n  * Converts a string to a floating-point number. \r\n  * @param string A string that contains a floating-point number. \r\n  */\r\ndeclare function parseFloat(string: string): number;\r\n\r\n/**\r\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number). \r\n  * @param number A numeric value.\r\n  */\r\ndeclare function isNaN(number: number): boolean;\r\n\r\n/** \r\n  * Determines whether a supplied number is finite.\r\n  * @param number Any numeric value.\r\n  */\r\ndeclare function isFinite(number: number): boolean;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\r\n  * @param encodedURI A value representing an encoded URI.\r\n  */\r\ndeclare function decodeURI(encodedURI: string): string;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n  * @param encodedURIComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\r\n\r\n/** \r\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n  * @param uri A value representing an encoded URI.\r\n  */ \r\ndeclare function encodeURI(uri: string): string;\r\n\r\n/**\r\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\r\n  * @param uriComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function encodeURIComponent(uriComponent: string): string;\r\n\r\ninterface PropertyDescriptor {\r\n    configurable?: boolean;\r\n    enumerable?: boolean;\r\n    value?: any;\r\n    writable?: boolean;\r\n    get? (): any;\r\n    set? (v: any): void;\r\n}\r\n\r\ninterface PropertyDescriptorMap {\r\n    [s: string]: PropertyDescriptor;\r\n}\r\n\r\ninterface Object {\r\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\r\n    constructor: Function; \r\n\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n    \r\n    /** Returns a date converted to a string using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n\r\n    /**\r\n      * Determines whether an object has a property with the specified name. \r\n      * @param v A property name.\r\n      */\r\n    hasOwnProperty(v: string): boolean;\r\n\r\n    /**\r\n      * Determines whether an object exists in another object\'s prototype chain. \r\n      * @param v Another object whose prototype chain is to be checked.\r\n      */\r\n    isPrototypeOf(v: Object): boolean;\r\n\r\n    /** \r\n      * Determines whether a specified property is enumerable.\r\n      * @param v A property name.\r\n      */\r\n    propertyIsEnumerable(v: string): boolean;\r\n}\r\n\r\n/**\r\n  * Provides functionality common to all JavaScript objects.\r\n  */\r\ndeclare var Object: {\r\n    new (value?: any): Object;\r\n    (): any;\r\n    (value: any): any;\r\n\r\n    /** A reference to the prototype for a class of objects. */\r\n    prototype: Object;\r\n\r\n    /** \r\n      * Returns the prototype of an object. \r\n      * @param o The object that references the prototype.\r\n      */\r\n    getPrototypeOf(o: any): any;\r\n\r\n    /**\r\n      * Gets the own property descriptor of the specified object. \r\n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype. \r\n      * @param o Object that contains the property.\r\n      * @param p Name of the property.\r\n    */\r\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\r\n\r\n    /** \r\n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly \r\n      * on that object, and are not inherited from the object\'s prototype. The properties of an object include both fields (objects) and functions.\r\n      * @param o Object that contains the own properties.\r\n      */\r\n    getOwnPropertyNames(o: any): string[];\r\n\r\n    /** \r\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n      * @param o Object to use as a prototype. May be null\r\n      * @param properties JavaScript object that contains one or more property descriptors. \r\n      */\r\n    create(o: any, properties?: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Adds a property to an object, or modifies attributes of an existing property. \r\n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\r\n      * @param p The property name.\r\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\r\n      */\r\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\r\n\r\n    /**\r\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties. \r\n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\r\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\r\n      */\r\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes. \r\n      */\r\n    seal(o: any): any;\r\n\r\n    /**\r\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes.\r\n      */\r\n    freeze(o: any): any;\r\n\r\n    /**\r\n      * Prevents the addition of new properties to an object.\r\n      * @param o Object to make non-extensible. \r\n      */\r\n    preventExtensions(o: any): any;\r\n\r\n    /**\r\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\r\n      * @param o Object to test. \r\n      */\r\n    isSealed(o: any): boolean;\r\n\r\n    /**\r\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\r\n      * @param o Object to test.  \r\n      */\r\n    isFrozen(o: any): boolean;\r\n\r\n    /**\r\n      * Returns a value that indicates whether new properties can be added to an object.\r\n      * @param o Object to test. \r\n      */\r\n    isExtensible(o: any): boolean;\r\n\r\n    /**\r\n      * Returns the names of the enumerable properties and methods of an object.\r\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n      */\r\n    keys(o: any): string[];\r\n}\r\n\r\n/**\r\n  * Creates a new function.\r\n  */\r\ninterface Function {\r\n    /**\r\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\r\n      * @param thisArg The object to be used as the this object.\r\n      * @param argArray A set of arguments to be passed to the function.\r\n      */\r\n    apply(thisArg: any, argArray?: any): any;\r\n\r\n    /**\r\n      * Calls a method of an object, substituting another object for the current object.\r\n      * @param thisArg The object to be used as the current object.\r\n      * @param argArray A list of arguments to be passed to the method.\r\n      */\r\n    call(thisArg: any, ...argArray: any[]): any;\r\n\r\n    /**\r\n      * For a given function, creates a bound function that has the same body as the original function. \r\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n      * @param thisArg An object to which the this keyword can refer inside the new function.\r\n      * @param argArray A list of arguments to be passed to the new function.\r\n      */\r\n    bind(thisArg: any, ...argArray: any[]): any;\r\n\r\n    prototype: any;\r\n    length: number;\r\n\r\n    // Non-standard extensions\r\n    arguments: any;\r\n    caller: Function;\r\n}\r\n\r\ndeclare var Function: {\r\n    /** \r\n      * Creates a new function.\r\n      * @param args A list of arguments the function accepts.\r\n      */\r\n    new (...args: string[]): Function;\r\n    (...args: string[]): Function;\r\n    prototype: Function;\r\n}\r\n\r\ninterface IArguments {\r\n    [index: number]: any;\r\n    length: number;\r\n    callee: Function;\r\n}\r\n\r\ninterface String {\r\n    /** Returns a string representation of a string. */\r\n    toString(): string;\r\n\r\n    /**\r\n      * Returns the character at the specified index.\r\n      * @param pos The zero-based index of the desired character.\r\n      */\r\n    charAt(pos: number): string;\r\n\r\n    /** \r\n      * Returns the Unicode value of the character at the specified location.\r\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n      */\r\n    charCodeAt(index: number): number;\r\n\r\n    /**\r\n      * Returns a string that contains the concatenation of two or more strings.\r\n      * @param strings The strings to append to the end of the string.  \r\n      */\r\n    concat(...strings: string[]): string;\r\n\r\n    /**\r\n      * Returns the position of the first occurrence of a substring. \r\n      * @param searchString The substring to search for in the string\r\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n      */\r\n    indexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Returns the last occurrence of a substring in the string.\r\n      * @param searchString The substring to search for.\r\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n      */\r\n    lastIndexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      */\r\n    localeCompare(that: string): number;\r\n\r\n    /** \r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n      */\r\n    match(regexp: string): string[];\r\n\r\n    /** \r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags. \r\n      */\r\n    match(regexp: RegExp): string[];\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A String object or string literal that represents the regular expression\r\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\r\n      */\r\n    replace(searchValue: string, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A String object or string literal that represents the regular expression\r\n      * @param replaceValue A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replaceValue A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags. \r\n      */\r\n    search(regexp: string): number;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags. \r\n      */\r\n    search(regexp: RegExp): number;\r\n\r\n    /**\r\n      * Returns a section of a string.\r\n      * @param start The index to the beginning of the specified portion of stringObj. \r\n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. \r\n      * If this value is not specified, the substring continues to the end of stringObj.\r\n      */\r\n    slice(start?: number, end?: number): string;\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: string, limit?: number): string[];\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: RegExp, limit?: number): string[];\r\n\r\n    /**\r\n      * Returns the substring at the specified location within a String object. \r\n      * @param start The zero-based index number indicating the beginning of the substring.\r\n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n      * If end is omitted, the characters from start through the end of the original string are returned.\r\n      */\r\n    substring(start: number, end?: number): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to lowercase. */\r\n    toLowerCase(): string;\r\n\r\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */\r\n    toLocaleLowerCase(): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to uppercase. */\r\n    toUpperCase(): string;\r\n\r\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */\r\n    toLocaleUpperCase(): string;\r\n\r\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\r\n    trim(): string;\r\n\r\n    /** Returns the length of a String object. */\r\n    length: number;\r\n\r\n    // IE extensions\r\n    /**\r\n      * Gets a substring beginning at the specified location and having the specified length.\r\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\r\n      * @param length The number of characters to include in the returned substring.\r\n      */\r\n    substr(from: number, length?: number): string;\r\n\r\n    [index: number]: string;\r\n}\r\n\r\n/** \r\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings. \r\n  */\r\ndeclare var String: {\r\n    new (value?: any): String;\r\n    (value?: any): string;\r\n    prototype: String;\r\n    fromCharCode(...codes: number[]): string;\r\n}\r\n\r\ninterface Boolean {\r\n}\r\ndeclare var Boolean: {\r\n    new (value?: any): Boolean;\r\n    (value?: any): boolean;\r\n    prototype: Boolean;\r\n}\r\n\r\ninterface Number {\r\n    /**\r\n      * Returns a string representation of an object.\r\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n      */\r\n    toString(radix?: number): string;\r\n\r\n    /** \r\n      * Returns a string representing a number in fixed-point notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toFixed(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented in exponential notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toExponential(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n      */ \r\n    toPrecision(precision?: number): string;\r\n}\r\n\r\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\r\ndeclare var Number: {\r\n    new (value?: any): Number;\r\n    (value?: any): number;\r\n    prototype: Number;\r\n\r\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\r\n    MAX_VALUE: number;\r\n\r\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\r\n    MIN_VALUE: number;\r\n\r\n    /** \r\n      * A value that is not a number.\r\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\r\n      */\r\n    NaN: number;\r\n\r\n    /** \r\n      * A value that is less than the largest negative number that can be represented in JavaScript.\r\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity. \r\n      */\r\n    NEGATIVE_INFINITY: number;\r\n\r\n    /**\r\n      * A value greater than the largest number that can be represented in JavaScript. \r\n      * JavaScript displays POSITIVE_INFINITY values as infinity. \r\n      */\r\n    POSITIVE_INFINITY: number;\r\n}\r\n\r\ninterface Math {\r\n    /** The mathematical constant e. This is Euler\'s number, the base of natural logarithms. */\r\n    E: number;\r\n    /** The natural logarithm of 10. */\r\n    LN10: number;\r\n    /** The natural logarithm of 2. */\r\n    LN2: number;\r\n    /** The base-2 logarithm of e. */\r\n    LOG2E: number;\r\n    /** The base-10 logarithm of e. */\r\n    LOG10E: number;\r\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\r\n    PI: number;\r\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\r\n    SQRT1_2: number;\r\n    /** The square root of 2. */\r\n    SQRT2: number;\r\n    /**\r\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative). \r\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\r\n      * @param x A numeric expression for which the absolute value is needed.\r\n      */\r\n    abs(x: number): number;\r\n    /**\r\n      * Returns the arc cosine (or inverse cosine) of a number. \r\n      * @param x A numeric expression.\r\n      */ \r\n    acos(x: number): number;\r\n    /** \r\n      * Returns the arcsine of a number. \r\n      * @param x A numeric expression.\r\n      */\r\n    asin(x: number): number;\r\n    /**\r\n      * Returns the arctangent of a number. \r\n      * @param x A numeric expression for which the arctangent is needed.\r\n      */\r\n    atan(x: number): number;\r\n    /**\r\n      * Returns the angle (in radians) from the X axis to a point (y,x).\r\n      * @param y A numeric expression representing the cartesian y-coordinate.\r\n      * @param x A numeric expression representing the cartesian x-coordinate.\r\n      */\r\n    atan2(y: number, x: number): number;\r\n    /**\r\n      * Returns the smallest number greater than or equal to its numeric argument. \r\n      * @param x A numeric expression.\r\n      */\r\n    ceil(x: number): number;\r\n    /**\r\n      * Returns the cosine of a number. \r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */ \r\n    cos(x: number): number;\r\n    /**\r\n      * Returns e (the base of natural logarithms) raised to a power. \r\n      * @param x A numeric expression representing the power of e.\r\n      */\r\n    exp(x: number): number;\r\n    /**\r\n      * Returns the greatest number less than or equal to its numeric argument. \r\n      * @param x A numeric expression.\r\n      */\r\n    floor(x: number): number;\r\n    /**\r\n      * Returns the natural logarithm (base e) of a number. \r\n      * @param x A numeric expression.\r\n      */\r\n    log(x: number): number;\r\n    /**\r\n      * Returns the larger of a set of supplied numeric expressions. \r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    max(...values: number[]): number;\r\n    /**\r\n      * Returns the smaller of a set of supplied numeric expressions. \r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    min(...values: number[]): number;\r\n    /**\r\n      * Returns the value of a base expression taken to a specified power. \r\n      * @param x The base value of the expression.\r\n      * @param y The exponent value of the expression.\r\n      */\r\n    pow(x: number, y: number): number;\r\n    /** Returns a pseudorandom number between 0 and 1. */ \r\n    random(): number;\r\n    /** \r\n      * Returns a supplied numeric expression rounded to the nearest number.\r\n      * @param x The value to be rounded to the nearest number.\r\n      */\r\n    round(x: number): number;\r\n    /**\r\n      * Returns the sine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    sin(x: number): number;\r\n    /**\r\n      * Returns the square root of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    sqrt(x: number): number;\r\n    /**\r\n      * Returns the tangent of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    tan(x: number): number;\r\n}\r\n/** An intrinsic object that provides basic mathematics functionality and constants. */\r\ndeclare var Math: Math;\r\n\r\n/** Enables basic storage and retrieval of dates and times. */\r\ninterface Date {\r\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\r\n    toString(): string;\r\n    /** Returns a date as a string value. */\r\n    toDateString(): string;\r\n    /** Returns a time as a string value. */\r\n    toTimeString(): string;\r\n    /** Returns a value as a string value appropriate to the host environment\'s current locale. */\r\n    toLocaleString(): string;\r\n    /** Returns a date as a string value appropriate to the host environment\'s current locale. */\r\n    toLocaleDateString(): string;\r\n    /** Returns a time as a string value appropriate to the host environment\'s current locale. */\r\n    toLocaleTimeString(): string;\r\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\r\n    valueOf(): number;\r\n    /** Gets the time value in milliseconds. */\r\n    getTime(): number;\r\n    /** Gets the year, using local time. */\r\n    getFullYear(): number;\r\n    /** Gets the year using Universal Coordinated Time (UTC). */\r\n    getUTCFullYear(): number;\r\n    /** Gets the month, using local time. */\r\n    getMonth(): number;\r\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMonth(): number;\r\n    /** Gets the day-of-the-month, using local time. */\r\n    getDate(): number;\r\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\r\n    getUTCDate(): number;\r\n    /** Gets the day of the week, using local time. */\r\n    getDay(): number;\r\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\r\n    getUTCDay(): number;\r\n    /** Gets the hours in a date, using local time. */\r\n    getHours(): number;\r\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCHours(): number;\r\n    /** Gets the minutes of a Date object, using local time. */\r\n    getMinutes(): number;\r\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMinutes(): number;\r\n    /** Gets the seconds of a Date object, using local time. */\r\n    getSeconds(): number;\r\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCSeconds(): number;\r\n    /** Gets the milliseconds of a Date, using local time. */\r\n    getMilliseconds(): number;\r\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMilliseconds(): number;\r\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\r\n    getTimezoneOffset(): number;\r\n    /** \r\n      * Sets the date and time value in the Date object.\r\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT. \r\n      */\r\n    setTime(time: number): number;\r\n    /**\r\n      * Sets the milliseconds value in the Date object using local time. \r\n      * @param ms A numeric value equal to the millisecond value.\r\n      */\r\n    setMilliseconds(ms: number): number;\r\n    /** \r\n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param ms A numeric value equal to the millisecond value. \r\n      */\r\n    setUTCMilliseconds(ms: number): number;\r\n\r\n    /**\r\n      * Sets the seconds value in the Date object using local time. \r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using local time. \r\n      * @param min A numeric value equal to the minutes value. \r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param min A numeric value equal to the minutes value. \r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hour value in the Date object using local time.\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value. \r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the numeric day-of-the-month value of the Date object using local time. \r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setDate(date: number): number;\r\n    /** \r\n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\r\n      * @param date A numeric value equal to the day of the month. \r\n      */\r\n    setUTCDate(date: number): number;\r\n    /** \r\n      * Sets the month value in the Date object using local time. \r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. \r\n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\r\n      */\r\n    setMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\r\n      */\r\n    setUTCMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the year of the Date object using local time.\r\n      * @param year A numeric value for the year.\r\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\r\n      * @param date A numeric value equal for the day of the month.\r\n      */\r\n    setFullYear(year: number, month?: number, date?: number): number;\r\n    /**\r\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param year A numeric value equal to the year.\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setUTCFullYear(year: number, month?: number, date?: number): number;\r\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\r\n    toUTCString(): string;\r\n    /** Returns a date as a string value in ISO format. */\r\n    toISOString(): string;\r\n    /** Used by the JSON.stringify method to enable the transformation of an object\'s data for JavaScript Object Notation (JSON) serialization. */\r\n    toJSON(key?: any): string;\r\n}\r\n\r\ndeclare var Date: {\r\n    new (): Date;\r\n    new (value: number): Date;\r\n    new (value: string): Date;\r\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\r\n    (): string;\r\n    prototype: Date;\r\n    /**\r\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\r\n      * @param s A date string\r\n      */\r\n    parse(s: string): number;\r\n    /**\r\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date. \r\n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\r\n      * @param month The month as an number between 0 and 11 (January to December).\r\n      * @param date The date as an number between 1 and 31.\r\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\r\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\r\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\r\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\r\n      */\r\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\r\n    now(): number;\r\n}\r\n\r\ninterface RegExpExecArray {\r\n    [index: number]: string;\r\n    length: number;\r\n\r\n    index: number;\r\n    input: string;\r\n\r\n    toString(): string;\r\n    toLocaleString(): string;\r\n    concat(...items: string[][]): string[];\r\n    join(separator?: string): string;\r\n    pop(): string;\r\n    push(...items: string[]): number;\r\n    reverse(): string[];\r\n    shift(): string;\r\n    slice(start?: number, end?: number): string[];\r\n    sort(compareFn?: (a: string, b: string) => number): string[];\r\n    splice(start: number): string[];\r\n    splice(start: number, deleteCount: number, ...items: string[]): string[];\r\n    unshift(...items: string[]): number;\r\n\r\n    indexOf(searchElement: string, fromIndex?: number): number;\r\n    lastIndexOf(searchElement: string, fromIndex?: number): number;\r\n    every(callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any): boolean;\r\n    some(callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any): boolean;\r\n    forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void;\r\n    map(callbackfn: (value: string, index: number, array: string[]) => any, thisArg?: any): any[];\r\n    filter(callbackfn: (value: string, index: number, array: string[]) => boolean, thisArg?: any): string[];\r\n    reduce(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: string[]) => any, initialValue?: any): any;\r\n    reduceRight(callbackfn: (previousValue: any, currentValue: any, currentIndex: number, array: string[]) => any, initialValue?: any): any;\r\n}\r\n\r\n\r\ninterface RegExp {\r\n    /** \r\n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\r\n      * @param string The String object or string literal on which to perform the search.\r\n      */\r\n    exec(string: string): RegExpExecArray;\r\n    \r\n    /** \r\n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\r\n      * @param string String on which to perform the search.\r\n      */\r\n    test(string: string): boolean;\r\n\r\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The rgExp argument is a Regular expression object. It can be a variable name or a literal. */\r\n    source: string;\r\n    \r\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\r\n    global: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\r\n    ignoreCase: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\r\n    multiline: boolean;\r\n\r\n    lastIndex: number;\r\n\r\n    // Non-standard extensions\r\n    compile(): RegExp;\r\n}\r\ndeclare var RegExp: {\r\n    new (pattern: string, flags?: string): RegExp;\r\n    (pattern: string, flags?: string): RegExp;\r\n\r\n    // Non-standard extensions\r\n    $1: string;\r\n    $2: string;\r\n    $3: string;\r\n    $4: string;\r\n    $5: string;\r\n    $6: string;\r\n    $7: string;\r\n    $8: string;\r\n    $9: string;\r\n    lastMatch: string;\r\n}\r\n\r\ninterface Error {\r\n    name: string;\r\n    message: string;\r\n}\r\ndeclare var Error: {\r\n    new (message?: string): Error;\r\n    (message?: string): Error;\r\n    prototype: Error;\r\n}\r\n\r\ninterface EvalError extends Error {\r\n}\r\ndeclare var EvalError: {\r\n    new (message?: string): EvalError;\r\n    (message?: string): EvalError;\r\n    prototype: EvalError;\r\n}\r\n\r\ninterface RangeError extends Error {\r\n}\r\ndeclare var RangeError: {\r\n    new (message?: string): RangeError;\r\n    (message?: string): RangeError;\r\n    prototype: RangeError;\r\n}\r\n\r\ninterface ReferenceError extends Error {\r\n}\r\ndeclare var ReferenceError: {\r\n    new (message?: string): ReferenceError;\r\n    (message?: string): ReferenceError;\r\n    prototype: ReferenceError;\r\n}\r\n\r\ninterface SyntaxError extends Error {\r\n}\r\ndeclare var SyntaxError: {\r\n    new (message?: string): SyntaxError;\r\n    (message?: string): SyntaxError;\r\n    prototype: SyntaxError;\r\n}\r\n\r\ninterface TypeError extends Error {\r\n}\r\ndeclare var TypeError: {\r\n    new (message?: string): TypeError;\r\n    (message?: string): TypeError;\r\n    prototype: TypeError;\r\n}\r\n\r\ninterface URIError extends Error {\r\n}\r\ndeclare var URIError: {\r\n    new (message?: string): URIError;\r\n    (message?: string): URIError;\r\n    prototype: URIError;\r\n}\r\n\r\ninterface JSON {\r\n    /**\r\n      * Converts a JavaScript Object Notation (JSON) string into an object.\r\n      * @param text A valid JSON string.\r\n      * @param reviver A function that transforms the results. This function is called for each member of the object. \r\n      * If a member contains nested objects, the nested objects are transformed before the parent object is. \r\n      */\r\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      */\r\n    stringify(value: any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      */\r\n    stringify(value: any, replacer: (key: string, value: any) => any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer Array that transforms the results.\r\n      */\r\n    stringify(value: any, replacer: any[]): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer: (key: string, value: any) => any, space: any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer Array that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer: any[], space: any): string;\r\n}\r\n/**\r\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\r\n  */\r\ndeclare var JSON: JSON;\r\n\r\n\r\n/////////////////////////////\r\n/// ECMAScript Array API (specially handled by compiler)\r\n/////////////////////////////\r\n\r\ninterface Array<T> {\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n    toLocaleString(): string;\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat<U extends T[]>(...items: U[]): T[];\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat(...items: T[]): T[];\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n    /**\r\n      * Removes the last element from an array and returns it.\r\n      */\r\n    pop(): T;\r\n    /**\r\n      * Appends new elements to an array, and returns the new length of the array.\r\n      * @param items New elements of the Array.\r\n      */\r\n    push(...items: T[]): number;\r\n    /**\r\n      * Reverses the elements in an Array. \r\n      */\r\n    reverse(): T[];\r\n    /**\r\n      * Removes the first element from an array and returns it.\r\n      */\r\n    shift(): T;\r\n    /** \r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): T[];\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: T, b: T) => number): T[];\r\n\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      */\r\n    splice(start: number): T[];\r\n\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      * @param deleteCount The number of elements to remove.\r\n      * @param items Elements to insert into the array in place of the deleted elements.\r\n      */\r\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n\r\n    /**\r\n      * Inserts new elements at the start of an array.\r\n      * @param items  Elements to insert at the start of the Array.\r\n      */\r\n    unshift(...items: T[]): number;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n      */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a specified value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n      */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function. \r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /** \r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n      */\r\n    length: number;\r\n\r\n    [n: number]: T;\r\n}\r\ndeclare var Array: {\r\n    new(arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: T[]): T[];\r\n    (arrayLength?: number): any[];\r\n    <T>(arrayLength: number): T[];\r\n    <T>(...items: T[]): T[];\r\n    isArray(arg: any): boolean;\r\n    prototype: Array<any>;\r\n}\r\n\r\n\r\n/////////////////////////////\r\n/// IE10 ECMAScript Extensions\r\n/////////////////////////////\r\n\r\n/**\r\n  * Represents a raw buffer of binary data, which is used to store data for the \r\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly, \r\n  * but can be passed to a typed array or DataView Object to interpret the raw \r\n  * buffer as needed. \r\n  */\r\ninterface ArrayBuffer {\r\n    /**\r\n      * Read-only. The length of the ArrayBuffer (in bytes).\r\n      */\r\n    byteLength: number;\r\n}\r\n\r\ndeclare var ArrayBuffer: {\r\n    prototype: ArrayBuffer;\r\n    new (byteLength: number): ArrayBuffer;\r\n}\r\n\r\ninterface ArrayBufferView {\r\n    buffer: ArrayBuffer;\r\n    byteOffset: number;\r\n    byteLength: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int8Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Int8Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements at begin, inclusive, up to end, exclusive. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int8Array;\r\n}\r\ndeclare var Int8Array: {\r\n    prototype: Int8Array;\r\n    new (length: number): Int8Array;\r\n    new (array: Int8Array): Int8Array;\r\n    new (array: number[]): Int8Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint8Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Uint8Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint8Array;\r\n}\r\ndeclare var Uint8Array: {\r\n    prototype: Uint8Array;\r\n    new (length: number): Uint8Array;\r\n    new (array: Uint8Array): Uint8Array;\r\n    new (array: number[]): Uint8Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 16-bit integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int16Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Int16Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Int16Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int16Array;\r\n}\r\ndeclare var Int16Array: {\r\n    prototype: Int16Array;\r\n    new (length: number): Int16Array;\r\n    new (array: Int16Array): Int16Array;\r\n    new (array: number[]): Int16Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint16Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint16Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Uint16Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint16Array;\r\n}\r\ndeclare var Uint16Array: {\r\n    prototype: Uint16Array;\r\n    new (length: number): Uint16Array;\r\n    new (array: Uint16Array): Uint16Array;\r\n    new (array: number[]): Uint16Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int32Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Int32Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Int32Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int32Array;\r\n}\r\ndeclare var Int32Array: {\r\n    prototype: Int32Array;\r\n    new (length: number): Int32Array;\r\n    new (array: Int32Array): Int32Array;\r\n    new (array: number[]): Int32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint32Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint32Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Int8Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint32Array;\r\n}\r\ndeclare var Uint32Array: {\r\n    prototype: Uint32Array;\r\n    new (length: number): Uint32Array;\r\n    new (array: Uint32Array): Uint32Array;\r\n    new (array: number[]): Uint32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float32Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Float32Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Float32Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Float32Array;\r\n}\r\ndeclare var Float32Array: {\r\n    prototype: Float32Array;\r\n    new (length: number): Float32Array;\r\n    new (array: Float32Array): Float32Array;\r\n    new (array: number[]): Float32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float64Array extends ArrayBufferView {\r\n    /**\r\n      * The size in bytes of each element in the array. \r\n      */\r\n    BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    length: number;\r\n    [index: number]: number;\r\n\r\n    /**\r\n      * Gets the element at the specified index.\r\n      * @param index The index at which to get the element of the array.\r\n      */\r\n    get(index: number): number;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Float64Array, offset?: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: number[], offset?: number): void;\r\n\r\n    /**\r\n      * Gets a new Float64Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray. \r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Float64Array;\r\n}\r\ndeclare var Float64Array: {\r\n    prototype: Float64Array;\r\n    new (length: number): Float64Array;\r\n    new (array: Float64Array): Float64Array;\r\n    new (array: number[]): Float64Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array;\r\n    BYTES_PER_ELEMENT: number;\r\n}\r\n\r\n/**\r\n  * You can use a DataView object to read and write the different kinds of binary data to any location in the ArrayBuffer. \r\n  */\r\ninterface DataView extends ArrayBufferView {\r\n    /**\r\n      * Gets the Int8 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt8(byteOffset: number): number;\r\n\r\n    /**\r\n      * Gets the Uint8 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint8(byteOffset: number): number;\r\n\r\n    /**\r\n      * Gets the Int16 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Uint16 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Int32 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Uint32 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Float32 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Float64 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset. \r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Stores an Int8 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      */\r\n    setInt8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n      * Stores an Uint8 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      */\r\n    setUint8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n      * Stores an Int16 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.\r\n      */\r\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Uint16 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.\r\n      */\r\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Int32 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.\r\n      */\r\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Uint32 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.\r\n      */\r\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Float32 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.\r\n      */\r\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Float64 value at the specified byte offset from the start of the view. \r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.\r\n      */\r\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n}\r\ndeclare var DataView: {\r\n    prototype: DataView;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): DataView;\r\n}\r\n\r\n/////////////////////////////\r\n/// IE11 ECMAScript Extensions\r\n/////////////////////////////\r\n\r\ninterface Map<K, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;\r\n    get(key: K): V;\r\n    has(key: K): boolean;\r\n    set(key: K, value: V): Map<K, V>;\r\n    size: number;\r\n}\r\ndeclare var Map: {\r\n    new <K, V>(): Map<K, V>;\r\n}\r\n\r\ninterface WeakMap<K, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    get(key: K): V;\r\n    has(key: K): boolean;\r\n    set(key: K, value: V): WeakMap<K, V>;\r\n}\r\ndeclare var WeakMap: {\r\n    new <K, V>(): WeakMap<K, V>;\r\n}\r\n\r\ninterface Set<T> {\r\n    add(value: T): Set<T>;\r\n    clear(): void;\r\n    delete(value: T): boolean;\r\n    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;\r\n    has(value: T): boolean;\r\n    size: number;\r\n}\r\ndeclare var Set: {\r\n    new <T>(): Set<T>;\r\n}\r\n\r\ndeclare module Intl {\r\n\r\n    interface CollatorOptions {\r\n        usage?: string;\r\n        localeMatcher?: string;\r\n        numeric?: boolean;\r\n        caseFirst?: string;\r\n        sensitivity?: string;\r\n        ignorePunctuation?: boolean;\r\n    }\r\n\r\n    interface ResolvedCollatorOptions {\r\n        locale: string;\r\n        usage: string;\r\n        sensitivity: string;\r\n        ignorePunctuation: boolean;\r\n        collation: string;\r\n        caseFirst: string;\r\n        numeric: boolean;\r\n    }\r\n\r\n    interface Collator {\r\n        compare(x: string, y: string): number;\r\n        resolvedOptions(): ResolvedCollatorOptions;\r\n    }\r\n    var Collator: {\r\n        new (locales?: string[], options?: CollatorOptions): Collator;\r\n        new (locale?: string, options?: CollatorOptions): Collator;\r\n        (locales?: string[], options?: CollatorOptions): Collator;\r\n        (locale?: string, options?: CollatorOptions): Collator;\r\n        supportedLocalesOf(locales: string[], options?: CollatorOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: CollatorOptions): string[];\r\n    }\r\n\r\n    interface NumberFormatOptions {\r\n        localeMatcher?: string;\r\n        style?: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        useGrouping?: boolean;\r\n    }\r\n\r\n    interface ResolvedNumberFormatOptions {\r\n        locale: string;\r\n        numberingSystem: string;\r\n        style: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        minimumintegerDigits: number;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n        useGrouping: boolean;\r\n    }\r\n\r\n    interface NumberFormat {\r\n        format(value: number): string;\r\n        resolvedOptions(): ResolvedNumberFormatOptions;\r\n    }\r\n    var NumberFormat: {\r\n        new (locales?: string[], options?: NumberFormatOptions): Collator;\r\n        new (locale?: string, options?: NumberFormatOptions): Collator;\r\n        (locales?: string[], options?: NumberFormatOptions): Collator;\r\n        (locale?: string, options?: NumberFormatOptions): Collator;\r\n        supportedLocalesOf(locales: string[], options?: NumberFormatOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: NumberFormatOptions): string[];\r\n    }\r\n\r\n    interface DateTimeFormatOptions {\r\n        localeMatcher?: string;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n        formatMatcher?: string;\r\n        hour12: boolean;\r\n    }\r\n\r\n    interface ResolvedDateTimeFormatOptions {\r\n        locale: string;\r\n        calendar: string;\r\n        numberingSystem: string;\r\n        timeZone: string;\r\n        hour12?: boolean;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n    }\r\n\r\n    interface DateTimeFormat {\r\n        format(date: number): string;\r\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\r\n    }\r\n    var DateTimeFormat: {\r\n        new (locales?: string[], options?: DateTimeFormatOptions): Collator;\r\n        new (locale?: string, options?: DateTimeFormatOptions): Collator;\r\n        (locales?: string[], options?: DateTimeFormatOptions): Collator;\r\n        (locale?: string, options?: DateTimeFormatOptions): Collator;\r\n        supportedLocalesOf(locales: string[], options?: DateTimeFormatOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: DateTimeFormatOptions): string[];\r\n    }\r\n}\r\n\r\ninterface String {\r\n    localeCompare(that: string, locales: string[], options?: Intl.CollatorOptions): number;\r\n    localeCompare(that: string, locale: string, options?: Intl.CollatorOptions): number;\r\n}\r\n\r\ninterface Number {\r\n    toLocaleString(locales?: string[], options?: Intl.NumberFormatOptions): string;\r\n    toLocaleString(locale?: string, options?: Intl.NumberFormatOptions): string;\r\n}\r\n\r\ninterface Date {\r\n    toLocaleString(locales?: string[], options?: Intl.DateTimeFormatOptions): string;\r\n    toLocaleString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\r\n}\r\n\r\n\r\n/////////////////////////////\r\n/// IE9 DOM APIs \r\n/////////////////////////////\r\n\r\ninterface PositionOptions {\r\n    enableHighAccuracy?: boolean;\r\n    timeout?: number;\r\n    maximumAge?: number;\r\n}\r\n\r\ninterface NavigatorID {\r\n    appVersion: string;\r\n    appName: string;\r\n    userAgent: string;\r\n    platform: string;\r\n}\r\n\r\ninterface HTMLTableElement extends HTMLElement, MSDataBindingTableExtensions, MSDataBindingExtensions, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorLight: any;\r\n    /**\r\n      * Sets or retrieves the amount of space between cells in a table.\r\n      */\r\n    cellSpacing: string;\r\n    /**\r\n      * Retrieves the tFoot object of the table.\r\n      */\r\n    tFoot: HTMLTableSectionElement;\r\n    /**\r\n      * Sets or retrieves the way the border frame around the table is displayed.\r\n      */\r\n    frame: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object. \r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves which dividing lines (inner borders) are displayed.\r\n      */\r\n    rules: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the table.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves a description and/or structure of the object.\r\n      */\r\n    summary: string;\r\n    /**\r\n      * Retrieves the caption object of a table.\r\n      */\r\n    caption: HTMLTableCaptionElement;\r\n    /**\r\n      * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\r\n      */\r\n    tBodies: HTMLCollection;\r\n    /**\r\n      * Retrieves the tHead object of the table.\r\n      */\r\n    tHead: HTMLTableSectionElement;\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a collection of all cells in the table row or in the entire table.\r\n      */\r\n    cells: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\r\n      */\r\n    cellPadding: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorDark: any;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Creates an empty tBody element in the table.\r\n      */\r\n    createTBody(): HTMLElement;\r\n    /**\r\n      * Deletes the caption element and its contents from the table.\r\n      */\r\n    deleteCaption(): void;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLElement;\r\n    /**\r\n      * Deletes the tFoot element and its contents from the table.\r\n      */\r\n    deleteTFoot(): void;\r\n    /**\r\n      * Returns the tHead element object if successful, or null otherwise.\r\n      */\r\n    createTHead(): HTMLElement;\r\n    /**\r\n      * Deletes the tHead element and its contents from the table.\r\n      */\r\n    deleteTHead(): void;\r\n    /**\r\n      * Creates an empty caption element in the table.\r\n      */\r\n    createCaption(): HTMLElement;\r\n    /**\r\n      * Moves a table row to a new position.\r\n      * @param indexFrom Number that specifies the index in the rows collection of the table row that is moved.\r\n      * @param indexTo Number that specifies where the row is moved within the rows collection.\r\n      */\r\n    moveRow(indexFrom?: number, indexTo?: number): Object;\r\n    /**\r\n      * Creates an empty tFoot element in the table.\r\n      */\r\n    createTFoot(): HTMLElement;\r\n}\r\ndeclare var HTMLTableElement: {\r\n    prototype: HTMLTableElement;\r\n    new (): HTMLTableElement;\r\n}\r\n\r\ninterface TreeWalker {\r\n    whatToShow: number;\r\n    filter: NodeFilter;\r\n    root: Node;\r\n    currentNode: Node;\r\n    expandEntityReferences: boolean;\r\n    previousSibling(): Node;\r\n    lastChild(): Node;\r\n    nextSibling(): Node;\r\n    nextNode(): Node;\r\n    parentNode(): Node;\r\n    firstChild(): Node;\r\n    previousNode(): Node;\r\n}\r\ndeclare var TreeWalker: {\r\n    prototype: TreeWalker;\r\n    new (): TreeWalker;\r\n}\r\n\r\ninterface GetSVGDocument {\r\n    getSVGDocument(): Document;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x: number;\r\n    x1: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticRel;\r\n    new (): SVGPathSegCurvetoQuadraticRel;\r\n}\r\n\r\ninterface Performance {\r\n    navigation: PerformanceNavigation;\r\n    timing: PerformanceTiming;\r\n    getEntriesByType(entryType: string): any;\r\n    toJSON(): any;\r\n    getMeasures(measureName?: string): any;\r\n    clearMarks(markName?: string): void;\r\n    getMarks(markName?: string): any;\r\n    clearResourceTimings(): void;\r\n    mark(markName: string): void;\r\n    measure(measureName: string, startMarkName?: string, endMarkName?: string): void;\r\n    getEntriesByName(name: string, entryType?: string): any;\r\n    getEntries(): any;\r\n    clearMeasures(measureName?: string): void;\r\n    setResourceTimingBufferSize(maxSize: number): void;\r\n}\r\ndeclare var Performance: {\r\n    prototype: Performance;\r\n    new (): Performance;\r\n}\r\n\r\ninterface MSDataBindingTableExtensions {\r\n    dataPageSize: number;\r\n    nextPage(): void;\r\n    firstPage(): void;\r\n    refresh(): void;\r\n    previousPage(): void;\r\n    lastPage(): void;\r\n}\r\n\r\ninterface CompositionEvent extends UIEvent {\r\n    data: string;\r\n    locale: string;\r\n    initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;\r\n}\r\ndeclare var CompositionEvent: {\r\n    prototype: CompositionEvent;\r\n    new (): CompositionEvent;\r\n}\r\n\r\ninterface WindowTimers {\r\n    clearTimeout(handle: number): void;\r\n    setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\n    clearInterval(handle: number): void;\r\n    setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\n}\r\n\r\ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n    orientType: SVGAnimatedEnumeration;\r\n    markerUnits: SVGAnimatedEnumeration;\r\n    markerWidth: SVGAnimatedLength;\r\n    markerHeight: SVGAnimatedLength;\r\n    orientAngle: SVGAnimatedAngle;\r\n    refY: SVGAnimatedLength;\r\n    refX: SVGAnimatedLength;\r\n    setOrientToAngle(angle: SVGAngle): void;\r\n    setOrientToAuto(): void;\r\n    SVG_MARKER_ORIENT_UNKNOWN: number;\r\n    SVG_MARKER_ORIENT_ANGLE: number;\r\n    SVG_MARKERUNITS_UNKNOWN: number;\r\n    SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    SVG_MARKER_ORIENT_AUTO: number;\r\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n}\r\ndeclare var SVGMarkerElement: {\r\n    prototype: SVGMarkerElement;\r\n    new (): SVGMarkerElement;\r\n    SVG_MARKER_ORIENT_UNKNOWN: number;\r\n    SVG_MARKER_ORIENT_ANGLE: number;\r\n    SVG_MARKERUNITS_UNKNOWN: number;\r\n    SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    SVG_MARKER_ORIENT_AUTO: number;\r\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n}\r\n\r\ninterface CSSStyleDeclaration {\r\n    backgroundAttachment: string;\r\n    visibility: string;\r\n    textAlignLast: string;\r\n    borderRightStyle: string;\r\n    counterIncrement: string;\r\n    orphans: string;\r\n    cssText: string;\r\n    borderStyle: string;\r\n    pointerEvents: string;\r\n    borderTopColor: string;\r\n    markerEnd: string;\r\n    textIndent: string;\r\n    listStyleImage: string;\r\n    cursor: string;\r\n    listStylePosition: string;\r\n    wordWrap: string;\r\n    borderTopStyle: string;\r\n    alignmentBaseline: string;\r\n    opacity: string;\r\n    direction: string;\r\n    strokeMiterlimit: string;\r\n    maxWidth: string;\r\n    color: string;\r\n    clip: string;\r\n    borderRightWidth: string;\r\n    verticalAlign: string;\r\n    overflow: string;\r\n    mask: string;\r\n    borderLeftStyle: string;\r\n    emptyCells: string;\r\n    stopOpacity: string;\r\n    paddingRight: string;\r\n    parentRule: CSSRule;\r\n    background: string;\r\n    boxSizing: string;\r\n    textJustify: string;\r\n    height: string;\r\n    paddingTop: string;\r\n    length: number;\r\n    right: string;\r\n    baselineShift: string;\r\n    borderLeft: string;\r\n    widows: string;\r\n    lineHeight: string;\r\n    left: string;\r\n    textUnderlinePosition: string;\r\n    glyphOrientationHorizontal: string;\r\n    display: string;\r\n    textAnchor: string;\r\n    cssFloat: string;\r\n    strokeDasharray: string;\r\n    rubyAlign: string;\r\n    fontSizeAdjust: string;\r\n    borderLeftColor: string;\r\n    backgroundImage: string;\r\n    listStyleType: string;\r\n    strokeWidth: string;\r\n    textOverflow: string;\r\n    fillRule: string;\r\n    borderBottomColor: string;\r\n    zIndex: string;\r\n    position: string;\r\n    listStyle: string;\r\n    msTransformOrigin: string;\r\n    dominantBaseline: string;\r\n    overflowY: string;\r\n    fill: string;\r\n    captionSide: string;\r\n    borderCollapse: string;\r\n    boxShadow: string;\r\n    quotes: string;\r\n    tableLayout: string;\r\n    unicodeBidi: string;\r\n    borderBottomWidth: string;\r\n    backgroundSize: string;\r\n    textDecoration: string;\r\n    strokeDashoffset: string;\r\n    fontSize: string;\r\n    border: string;\r\n    pageBreakBefore: string;\r\n    borderTopRightRadius: string;\r\n    msTransform: string;\r\n    borderBottomLeftRadius: string;\r\n    textTransform: string;\r\n    rubyPosition: string;\r\n    strokeLinejoin: string;\r\n    clipPath: string;\r\n    borderRightColor: string;\r\n    fontFamily: string;\r\n    clear: string;\r\n    content: string;\r\n    backgroundClip: string;\r\n    marginBottom: string;\r\n    counterReset: string;\r\n    outlineWidth: string;\r\n    marginRight: string;\r\n    paddingLeft: string;\r\n    borderBottom: string;\r\n    wordBreak: string;\r\n    marginTop: string;\r\n    top: string;\r\n    fontWeight: string;\r\n    borderRight: string;\r\n    width: string;\r\n    kerning: string;\r\n    pageBreakAfter: string;\r\n    borderBottomStyle: string;\r\n    fontStretch: string;\r\n    padding: string;\r\n    strokeOpacity: string;\r\n    markerStart: string;\r\n    bottom: string;\r\n    borderLeftWidth: string;\r\n    clipRule: string;\r\n    backgroundPosition: string;\r\n    backgroundColor: string;\r\n    pageBreakInside: string;\r\n    backgroundOrigin: string;\r\n    strokeLinecap: string;\r\n    borderTopWidth: string;\r\n    outlineStyle: string;\r\n    borderTop: string;\r\n    outlineColor: string;\r\n    paddingBottom: string;\r\n    marginLeft: string;\r\n    font: string;\r\n    outline: string;\r\n    wordSpacing: string;\r\n    maxHeight: string;\r\n    fillOpacity: string;\r\n    letterSpacing: string;\r\n    borderSpacing: string;\r\n    backgroundRepeat: string;\r\n    borderRadius: string;\r\n    borderWidth: string;\r\n    borderBottomRightRadius: string;\r\n    whiteSpace: string;\r\n    fontStyle: string;\r\n    minWidth: string;\r\n    stopColor: string;\r\n    borderTopLeftRadius: string;\r\n    borderColor: string;\r\n    marker: string;\r\n    glyphOrientationVertical: string;\r\n    markerMid: string;\r\n    fontVariant: string;\r\n    minHeight: string;\r\n    stroke: string;\r\n    rubyOverhang: string;\r\n    overflowX: string;\r\n    textAlign: string;\r\n    margin: string;\r\n    getPropertyPriority(propertyName: string): string;\r\n    getPropertyValue(propertyName: string): string;\r\n    removeProperty(propertyName: string): string;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n    setProperty(propertyName: string, value: string, priority?: string): void;\r\n}\r\ndeclare var CSSStyleDeclaration: {\r\n    prototype: CSSStyleDeclaration;\r\n    new (): CSSStyleDeclaration;\r\n}\r\n\r\ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGGElement: {\r\n    prototype: SVGGElement;\r\n    new (): SVGGElement;\r\n}\r\n\r\ninterface MSStyleCSSProperties extends MSCSSProperties {\r\n    pixelWidth: number;\r\n    posHeight: number;\r\n    posLeft: number;\r\n    pixelTop: number;\r\n    pixelBottom: number;\r\n    textDecorationNone: boolean;\r\n    pixelLeft: number;\r\n    posTop: number;\r\n    posBottom: number;\r\n    textDecorationOverline: boolean;\r\n    posWidth: number;\r\n    textDecorationLineThrough: boolean;\r\n    pixelHeight: number;\r\n    textDecorationBlink: boolean;\r\n    posRight: number;\r\n    pixelRight: number;\r\n    textDecorationUnderline: boolean;\r\n}\r\ndeclare var MSStyleCSSProperties: {\r\n    prototype: MSStyleCSSProperties;\r\n    new (): MSStyleCSSProperties;\r\n}\r\n\r\ninterface Navigator extends NavigatorID, NavigatorOnLine, NavigatorContentUtils, MSNavigatorExtensions, NavigatorGeolocation, MSNavigatorDoNotTrack, NavigatorStorageUtils {\r\n}\r\ndeclare var Navigator: {\r\n    prototype: Navigator;\r\n    new (): Navigator;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {\r\n    y: number;\r\n    x2: number;\r\n    x: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothAbs;\r\n    new (): SVGPathSegCurvetoCubicSmoothAbs;\r\n}\r\n\r\ninterface SVGZoomEvent extends UIEvent {\r\n    zoomRectScreen: SVGRect;\r\n    previousScale: number;\r\n    newScale: number;\r\n    previousTranslate: SVGPoint;\r\n    newTranslate: SVGPoint;\r\n}\r\ndeclare var SVGZoomEvent: {\r\n    prototype: SVGZoomEvent;\r\n    new (): SVGZoomEvent;\r\n}\r\n\r\ninterface NodeSelector {\r\n    querySelectorAll(selectors: string): NodeList;\r\n    querySelector(selectors: string): Element;\r\n}\r\n\r\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\r\n}\r\ndeclare var HTMLTableDataCellElement: {\r\n    prototype: HTMLTableDataCellElement;\r\n    new (): HTMLTableDataCellElement;\r\n}\r\n\r\ninterface HTMLBaseElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Gets or sets the baseline URL on which relative links are based.\r\n      */\r\n    href: string;\r\n}\r\ndeclare var HTMLBaseElement: {\r\n    prototype: HTMLBaseElement;\r\n    new (): HTMLBaseElement;\r\n}\r\n\r\ninterface ClientRect {\r\n    left: number;\r\n    width: number;\r\n    right: number;\r\n    top: number;\r\n    bottom: number;\r\n    height: number;\r\n}\r\ndeclare var ClientRect: {\r\n    prototype: ClientRect;\r\n    new (): ClientRect;\r\n}\r\n\r\ninterface PositionErrorCallback {\r\n    (error: PositionError): void;\r\n}\r\n\r\ninterface DOMImplementation {\r\n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\r\n    createDocument(namespaceURI: string, qualifiedName: string, doctype: DocumentType): Document;\r\n    hasFeature(feature: string, version?: string): boolean;\r\n    createHTMLDocument(title: string): Document;\r\n}\r\ndeclare var DOMImplementation: {\r\n    prototype: DOMImplementation;\r\n    new (): DOMImplementation;\r\n}\r\n\r\ninterface SVGUnitTypes {\r\n    SVG_UNIT_TYPE_UNKNOWN: number;\r\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\r\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\r\n}\r\ndeclare var SVGUnitTypes: {\r\n    prototype: SVGUnitTypes;\r\n    new (): SVGUnitTypes;\r\n    SVG_UNIT_TYPE_UNKNOWN: number;\r\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\r\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\r\n}\r\n\r\ninterface Element extends Node, NodeSelector, ElementTraversal {\r\n    scrollTop: number;\r\n    clientLeft: number;\r\n    scrollLeft: number;\r\n    tagName: string;\r\n    clientWidth: number;\r\n    scrollWidth: number;\r\n    clientHeight: number;\r\n    clientTop: number;\r\n    scrollHeight: number;\r\n    getAttribute(name?: string): string;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\r\n    hasAttributeNS(namespaceURI: string, localName: string): boolean;\r\n    getBoundingClientRect(): ClientRect;\r\n    getAttributeNS(namespaceURI: string, localName: string): string;\r\n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr;\r\n    setAttributeNodeNS(newAttr: Attr): Attr;\r\n    msMatchesSelector(selectors: string): boolean;\r\n    hasAttribute(name: string): boolean;\r\n    removeAttribute(name?: string): void;\r\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\r\n    getAttributeNode(name: string): Attr;\r\n    fireEvent(eventName: string, eventObj?: any): boolean;\r\n    getElementsByTagName(name: "a"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(name: "abbr"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "address"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "area"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(name: "article"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "aside"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "audio"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(name: "b"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "base"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(name: "bdi"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "bdo"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "blockquote"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: "body"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(name: "br"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(name: "button"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(name: "canvas"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(name: "caption"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(name: "cite"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "code"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "col"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: "colgroup"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: "datalist"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(name: "dd"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "del"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: "dfn"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "div"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(name: "dl"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(name: "dt"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "em"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "embed"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(name: "fieldset"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(name: "figcaption"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "figure"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "footer"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "form"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(name: "h1"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: "h2"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: "h3"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: "h4"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: "h5"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: "h6"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: "head"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(name: "header"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "hgroup"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "hr"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(name: "html"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(name: "i"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "iframe"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(name: "img"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(name: "input"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(name: "ins"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: "kbd"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "label"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(name: "legend"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(name: "li"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(name: "link"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(name: "main"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "map"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(name: "mark"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "menu"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(name: "meta"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(name: "nav"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "noscript"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "object"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(name: "ol"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(name: "optgroup"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(name: "option"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(name: "p"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(name: "param"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(name: "pre"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: "progress"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(name: "q"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: "rp"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "rt"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "ruby"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "s"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "samp"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "script"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(name: "section"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "select"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(name: "small"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "source"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(name: "span"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(name: "strong"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "style"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(name: "sub"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "summary"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "sup"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "table"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(name: "tbody"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: "td"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(name: "textarea"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(name: "tfoot"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: "th"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(name: "thead"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: "title"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(name: "tr"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(name: "track"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(name: "u"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "ul"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(name: "var"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: "video"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(name: "wbr"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: string): NodeList;\r\n    getClientRects(): ClientRectList;\r\n    setAttributeNode(newAttr: Attr): Attr;\r\n    removeAttributeNode(oldAttr: Attr): Attr;\r\n    setAttribute(name?: string, value?: string): void;\r\n    removeAttributeNS(namespaceURI: string, localName: string): void;\r\n}\r\ndeclare var Element: {\r\n    prototype: Element;\r\n    new (): Element;\r\n}\r\n\r\ninterface HTMLNextIdElement extends HTMLElement {\r\n    n: string;\r\n}\r\ndeclare var HTMLNextIdElement: {\r\n    prototype: HTMLNextIdElement;\r\n    new (): HTMLNextIdElement;\r\n}\r\n\r\ninterface SVGPathSegMovetoRel extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegMovetoRel: {\r\n    prototype: SVGPathSegMovetoRel;\r\n    new (): SVGPathSegMovetoRel;\r\n}\r\n\r\ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    y1: SVGAnimatedLength;\r\n    x2: SVGAnimatedLength;\r\n    x1: SVGAnimatedLength;\r\n    y2: SVGAnimatedLength;\r\n}\r\ndeclare var SVGLineElement: {\r\n    prototype: SVGLineElement;\r\n    new (): SVGLineElement;\r\n}\r\n\r\ninterface HTMLParagraphElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n}\r\ndeclare var HTMLParagraphElement: {\r\n    prototype: HTMLParagraphElement;\r\n    new (): HTMLParagraphElement;\r\n}\r\n\r\ninterface HTMLAreasCollection extends HTMLCollection {\r\n    /**\r\n      * Removes an element from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      */\r\n    add(element: HTMLElement, before?: any): void;\r\n}\r\ndeclare var HTMLAreasCollection: {\r\n    prototype: HTMLAreasCollection;\r\n    new (): HTMLAreasCollection;\r\n}\r\n\r\ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n}\r\ndeclare var SVGDescElement: {\r\n    prototype: SVGDescElement;\r\n    new (): SVGDescElement;\r\n}\r\n\r\ninterface Node extends EventTarget {\r\n    nodeType: number;\r\n    previousSibling: Node;\r\n    localName: string;\r\n    namespaceURI: string;\r\n    textContent: string;\r\n    parentNode: Node;\r\n    nextSibling: Node;\r\n    nodeValue: string;\r\n    lastChild: Node;\r\n    childNodes: NodeList;\r\n    nodeName: string;\r\n    ownerDocument: Document;\r\n    attributes: NamedNodeMap;\r\n    firstChild: Node;\r\n    prefix: string;\r\n    removeChild(oldChild: Node): Node;\r\n    appendChild(newChild: Node): Node;\r\n    isSupported(feature: string, version: string): boolean;\r\n    isEqualNode(arg: Node): boolean;\r\n    lookupPrefix(namespaceURI: string): string;\r\n    isDefaultNamespace(namespaceURI: string): boolean;\r\n    compareDocumentPosition(other: Node): number;\r\n    normalize(): void;\r\n    isSameNode(other: Node): boolean;\r\n    hasAttributes(): boolean;\r\n    lookupNamespaceURI(prefix: string): string;\r\n    cloneNode(deep?: boolean): Node;\r\n    hasChildNodes(): boolean;\r\n    replaceChild(newChild: Node, oldChild: Node): Node;\r\n    insertBefore(newChild: Node, refChild?: Node): Node;\r\n    ENTITY_REFERENCE_NODE: number;\r\n    ATTRIBUTE_NODE: number;\r\n    DOCUMENT_FRAGMENT_NODE: number;\r\n    TEXT_NODE: number;\r\n    ELEMENT_NODE: number;\r\n    COMMENT_NODE: number;\r\n    DOCUMENT_POSITION_DISCONNECTED: number;\r\n    DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    DOCUMENT_POSITION_CONTAINS: number;\r\n    DOCUMENT_TYPE_NODE: number;\r\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    DOCUMENT_NODE: number;\r\n    ENTITY_NODE: number;\r\n    PROCESSING_INSTRUCTION_NODE: number;\r\n    CDATA_SECTION_NODE: number;\r\n    NOTATION_NODE: number;\r\n    DOCUMENT_POSITION_FOLLOWING: number;\r\n    DOCUMENT_POSITION_PRECEDING: number;\r\n}\r\ndeclare var Node: {\r\n    prototype: Node;\r\n    new (): Node;\r\n    ENTITY_REFERENCE_NODE: number;\r\n    ATTRIBUTE_NODE: number;\r\n    DOCUMENT_FRAGMENT_NODE: number;\r\n    TEXT_NODE: number;\r\n    ELEMENT_NODE: number;\r\n    COMMENT_NODE: number;\r\n    DOCUMENT_POSITION_DISCONNECTED: number;\r\n    DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    DOCUMENT_POSITION_CONTAINS: number;\r\n    DOCUMENT_TYPE_NODE: number;\r\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    DOCUMENT_NODE: number;\r\n    ENTITY_NODE: number;\r\n    PROCESSING_INSTRUCTION_NODE: number;\r\n    CDATA_SECTION_NODE: number;\r\n    NOTATION_NODE: number;\r\n    DOCUMENT_POSITION_FOLLOWING: number;\r\n    DOCUMENT_POSITION_PRECEDING: number;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothRel;\r\n    new (): SVGPathSegCurvetoQuadraticSmoothRel;\r\n}\r\n\r\ninterface DOML2DeprecatedListSpaceReduction {\r\n    compact: boolean;\r\n}\r\n\r\ninterface MSScriptHost {\r\n}\r\ndeclare var MSScriptHost: {\r\n    prototype: MSScriptHost;\r\n    new (): MSScriptHost;\r\n}\r\n\r\ninterface SVGClipPathElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    clipPathUnits: SVGAnimatedEnumeration;\r\n}\r\ndeclare var SVGClipPathElement: {\r\n    prototype: SVGClipPathElement;\r\n    new (): SVGClipPathElement;\r\n}\r\n\r\ninterface MouseEvent extends UIEvent {\r\n    toElement: Element;\r\n    layerY: number;\r\n    fromElement: Element;\r\n    which: number;\r\n    pageX: number;\r\n    offsetY: number;\r\n    x: number;\r\n    y: number;\r\n    metaKey: boolean;\r\n    altKey: boolean;\r\n    ctrlKey: boolean;\r\n    offsetX: number;\r\n    screenX: number;\r\n    clientY: number;\r\n    shiftKey: boolean;\r\n    layerX: number;\r\n    screenY: number;\r\n    relatedTarget: EventTarget;\r\n    button: number;\r\n    pageY: number;\r\n    buttons: number;\r\n    clientX: number;\r\n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void;\r\n    getModifierState(keyArg: string): boolean;\r\n}\r\ndeclare var MouseEvent: {\r\n    prototype: MouseEvent;\r\n    new (): MouseEvent;\r\n}\r\n\r\ninterface RangeException {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    BAD_BOUNDARYPOINTS_ERR: number;\r\n}\r\ndeclare var RangeException: {\r\n    prototype: RangeException;\r\n    new (): RangeException;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    BAD_BOUNDARYPOINTS_ERR: number;\r\n}\r\n\r\ninterface SVGTextPositioningElement extends SVGTextContentElement {\r\n    y: SVGAnimatedLengthList;\r\n    rotate: SVGAnimatedNumberList;\r\n    dy: SVGAnimatedLengthList;\r\n    x: SVGAnimatedLengthList;\r\n    dx: SVGAnimatedLengthList;\r\n}\r\ndeclare var SVGTextPositioningElement: {\r\n    prototype: SVGTextPositioningElement;\r\n    new (): SVGTextPositioningElement;\r\n}\r\n\r\ninterface HTMLAppletElement extends HTMLElement, DOML2DeprecatedMarginStyle, DOML2DeprecatedBorderStyle, DOML2DeprecatedAlignmentStyle, MSDataBindingExtensions, MSDataBindingRecordSetExtensions {\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    object: string;\r\n    form: HTMLFormElement;\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Sets or retrieves the class identifier for the object.\r\n      */\r\n    classid: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own declare functionality for the object.\r\n      */\r\n    declare: boolean;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    BaseHref: string;\r\n}\r\ndeclare var HTMLAppletElement: {\r\n    prototype: HTMLAppletElement;\r\n    new (): HTMLAppletElement;\r\n}\r\n\r\ninterface TextMetrics {\r\n    width: number;\r\n}\r\ndeclare var TextMetrics: {\r\n    prototype: TextMetrics;\r\n    new (): TextMetrics;\r\n}\r\n\r\ninterface DocumentEvent {\r\n    createEvent(eventInterface: string): Event;\r\n}\r\n\r\ninterface HTMLOListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle {\r\n    /**\r\n      * The starting number.\r\n      */\r\n    start: number;\r\n}\r\ndeclare var HTMLOListElement: {\r\n    prototype: HTMLOListElement;\r\n    new (): HTMLOListElement;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg {\r\n    y: number;\r\n}\r\ndeclare var SVGPathSegLinetoVerticalRel: {\r\n    prototype: SVGPathSegLinetoVerticalRel;\r\n    new (): SVGPathSegLinetoVerticalRel;\r\n}\r\n\r\ninterface SVGAnimatedString {\r\n    animVal: string;\r\n    baseVal: string;\r\n}\r\ndeclare var SVGAnimatedString: {\r\n    prototype: SVGAnimatedString;\r\n    new (): SVGAnimatedString;\r\n}\r\n\r\ninterface CDATASection extends Text {\r\n}\r\ndeclare var CDATASection: {\r\n    prototype: CDATASection;\r\n    new (): CDATASection;\r\n}\r\n\r\ninterface StyleMedia {\r\n    type: string;\r\n    matchMedium(mediaquery: string): boolean;\r\n}\r\ndeclare var StyleMedia: {\r\n    prototype: StyleMedia;\r\n    new (): StyleMedia;\r\n}\r\n\r\ninterface HTMLSelectElement extends HTMLElement, MSHTMLCollectionExtensions, MSDataBindingExtensions {\r\n    options: HTMLSelectElement;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the number of rows in the list box. \r\n      */\r\n    size: number;\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves the index of the selected option in a select object.\r\n      */\r\n    selectedIndex: number;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Retrieves the type of select control based on the value of the MULTIPLE attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Removes an element from the collection.\r\n      * @param index Number that specifies the zero-based index of the element to remove from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\r\n      * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection. \r\n      */\r\n    add(element: HTMLElement, before?: any): void;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\r\n      */\r\n    namedItem(name: string): any;\r\n    [name: string]: any;\r\n}\r\ndeclare var HTMLSelectElement: {\r\n    prototype: HTMLSelectElement;\r\n    new (): HTMLSelectElement;\r\n}\r\n\r\ninterface TextRange {\r\n    boundingLeft: number;\r\n    htmlText: string;\r\n    offsetLeft: number;\r\n    boundingWidth: number;\r\n    boundingHeight: number;\r\n    boundingTop: number;\r\n    text: string;\r\n    offsetTop: number;\r\n    moveToPoint(x: number, y: number): void;\r\n    queryCommandValue(cmdID: string): any;\r\n    getBookmark(): string;\r\n    move(unit: string, count?: number): number;\r\n    queryCommandIndeterm(cmdID: string): boolean;\r\n    scrollIntoView(fStart?: boolean): void;\r\n    findText(string: string, count?: number, flags?: number): boolean;\r\n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\r\n    getBoundingClientRect(): ClientRect;\r\n    moveToBookmark(bookmark: string): boolean;\r\n    isEqual(range: TextRange): boolean;\r\n    duplicate(): TextRange;\r\n    collapse(start?: boolean): void;\r\n    queryCommandText(cmdID: string): string;\r\n    select(): void;\r\n    pasteHTML(html: string): void;\r\n    inRange(range: TextRange): boolean;\r\n    moveEnd(unit: string, count?: number): number;\r\n    getClientRects(): ClientRectList;\r\n    moveStart(unit: string, count?: number): number;\r\n    parentElement(): Element;\r\n    queryCommandState(cmdID: string): boolean;\r\n    compareEndPoints(how: string, sourceRange: TextRange): number;\r\n    execCommandShowHelp(cmdID: string): boolean;\r\n    moveToElementText(element: Element): void;\r\n    expand(Unit: string): boolean;\r\n    queryCommandSupported(cmdID: string): boolean;\r\n    setEndPoint(how: string, SourceRange: TextRange): void;\r\n    queryCommandEnabled(cmdID: string): boolean;\r\n}\r\ndeclare var TextRange: {\r\n    prototype: TextRange;\r\n    new (): TextRange;\r\n}\r\n\r\ninterface SVGTests {\r\n    requiredFeatures: SVGStringList;\r\n    requiredExtensions: SVGStringList;\r\n    systemLanguage: SVGStringList;\r\n    hasExtension(extension: string): boolean;\r\n}\r\n\r\ninterface HTMLBlockElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLBlockElement: {\r\n    prototype: HTMLBlockElement;\r\n    new (): HTMLBlockElement;\r\n}\r\n\r\ninterface CSSStyleSheet extends StyleSheet {\r\n    owningElement: Element;\r\n    imports: StyleSheetList;\r\n    isAlternate: boolean;\r\n    rules: MSCSSRuleList;\r\n    isPrefAlternate: boolean;\r\n    readOnly: boolean;\r\n    cssText: string;\r\n    ownerRule: CSSRule;\r\n    href: string;\r\n    cssRules: CSSRuleList;\r\n    id: string;\r\n    pages: StyleSheetPageList;\r\n    addImport(bstrURL: string, lIndex?: number): number;\r\n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\r\n    insertRule(rule: string, index?: number): number;\r\n    removeRule(lIndex: number): void;\r\n    deleteRule(index?: number): void;\r\n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\r\n    removeImport(lIndex: number): void;\r\n}\r\ndeclare var CSSStyleSheet: {\r\n    prototype: CSSStyleSheet;\r\n    new (): CSSStyleSheet;\r\n}\r\n\r\ninterface MSSelection {\r\n    type: string;\r\n    typeDetail: string;\r\n    createRange(): TextRange;\r\n    clear(): void;\r\n    createRangeCollection(): TextRangeCollection;\r\n    empty(): void;\r\n}\r\ndeclare var MSSelection: {\r\n    prototype: MSSelection;\r\n    new (): MSSelection;\r\n}\r\n\r\ninterface HTMLMetaElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\r\n      */\r\n    httpEquiv: string;\r\n    /**\r\n      * Sets or retrieves the value specified in the content attribute of the meta object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets meta-information to associate with httpEquiv or name.\r\n      */\r\n    content: string;\r\n    /**\r\n      * Sets or retrieves the URL property that will be loaded after the specified time has elapsed. \r\n      */\r\n    url: string;\r\n    /**\r\n      * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\r\n      */\r\n    scheme: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n}\r\ndeclare var HTMLMetaElement: {\r\n    prototype: HTMLMetaElement;\r\n    new (): HTMLMetaElement;\r\n}\r\n\r\ninterface SVGPatternElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGTests, SVGFitToViewBox, SVGExternalResourcesRequired, SVGURIReference {\r\n    patternUnits: SVGAnimatedEnumeration;\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    patternContentUnits: SVGAnimatedEnumeration;\r\n    patternTransform: SVGAnimatedTransformList;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGPatternElement: {\r\n    prototype: SVGPatternElement;\r\n    new (): SVGPatternElement;\r\n}\r\n\r\ninterface SVGAnimatedAngle {\r\n    animVal: SVGAngle;\r\n    baseVal: SVGAngle;\r\n}\r\ndeclare var SVGAnimatedAngle: {\r\n    prototype: SVGAnimatedAngle;\r\n    new (): SVGAnimatedAngle;\r\n}\r\n\r\ninterface Selection {\r\n    isCollapsed: boolean;\r\n    anchorNode: Node;\r\n    focusNode: Node;\r\n    anchorOffset: number;\r\n    focusOffset: number;\r\n    rangeCount: number;\r\n    addRange(range: Range): void;\r\n    collapseToEnd(): void;\r\n    toString(): string;\r\n    selectAllChildren(parentNode: Node): void;\r\n    getRangeAt(index: number): Range;\r\n    collapse(parentNode: Node, offset: number): void;\r\n    removeAllRanges(): void;\r\n    collapseToStart(): void;\r\n    deleteFromDocument(): void;\r\n    removeRange(range: Range): void;\r\n}\r\ndeclare var Selection: {\r\n    prototype: Selection;\r\n    new (): Selection;\r\n}\r\n\r\ninterface SVGScriptElement extends SVGElement, SVGExternalResourcesRequired, SVGURIReference {\r\n    type: string;\r\n}\r\ndeclare var SVGScriptElement: {\r\n    prototype: SVGScriptElement;\r\n    new (): SVGScriptElement;\r\n}\r\n\r\ninterface HTMLDDElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\ndeclare var HTMLDDElement: {\r\n    prototype: HTMLDDElement;\r\n    new (): HTMLDDElement;\r\n}\r\n\r\ninterface MSDataBindingRecordSetReadonlyExtensions {\r\n    recordset: Object;\r\n    namedRecordset(dataMember: string, hierarchy?: any): Object;\r\n}\r\n\r\ninterface CSSStyleRule extends CSSRule {\r\n    selectorText: string;\r\n    style: MSStyleCSSProperties;\r\n    readOnly: boolean;\r\n}\r\ndeclare var CSSStyleRule: {\r\n    prototype: CSSStyleRule;\r\n    new (): CSSStyleRule;\r\n}\r\n\r\ninterface NodeIterator {\r\n    whatToShow: number;\r\n    filter: NodeFilter;\r\n    root: Node;\r\n    expandEntityReferences: boolean;\r\n    nextNode(): Node;\r\n    detach(): void;\r\n    previousNode(): Node;\r\n}\r\ndeclare var NodeIterator: {\r\n    prototype: NodeIterator;\r\n    new (): NodeIterator;\r\n}\r\n\r\ninterface SVGViewElement extends SVGElement, SVGZoomAndPan, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n    viewTarget: SVGStringList;\r\n}\r\ndeclare var SVGViewElement: {\r\n    prototype: SVGViewElement;\r\n    new (): SVGViewElement;\r\n}\r\n\r\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n}\r\ndeclare var HTMLLinkElement: {\r\n    prototype: HTMLLinkElement;\r\n    new (): HTMLLinkElement;\r\n}\r\n\r\ninterface SVGLocatable {\r\n    farthestViewportElement: SVGElement;\r\n    nearestViewportElement: SVGElement;\r\n    getBBox(): SVGRect;\r\n    getTransformToElement(element: SVGElement): SVGMatrix;\r\n    getCTM(): SVGMatrix;\r\n    getScreenCTM(): SVGMatrix;\r\n}\r\n\r\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n}\r\ndeclare var HTMLFontElement: {\r\n    prototype: HTMLFontElement;\r\n    new (): HTMLFontElement;\r\n}\r\n\r\ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n}\r\ndeclare var SVGTitleElement: {\r\n    prototype: SVGTitleElement;\r\n    new (): SVGTitleElement;\r\n}\r\n\r\ninterface ControlRangeCollection {\r\n    length: number;\r\n    queryCommandValue(cmdID: string): any;\r\n    remove(index: number): void;\r\n    add(item: Element): void;\r\n    queryCommandIndeterm(cmdID: string): boolean;\r\n    scrollIntoView(varargStart?: any): void;\r\n    item(index: number): Element;\r\n    [index: number]: Element;\r\n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\r\n    addElement(item: Element): void;\r\n    queryCommandState(cmdID: string): boolean;\r\n    queryCommandSupported(cmdID: string): boolean;\r\n    queryCommandEnabled(cmdID: string): boolean;\r\n    queryCommandText(cmdID: string): string;\r\n    select(): void;\r\n}\r\ndeclare var ControlRangeCollection: {\r\n    prototype: ControlRangeCollection;\r\n    new (): ControlRangeCollection;\r\n}\r\n\r\ninterface MSNamespaceInfo extends MSEventAttachmentTarget {\r\n    urn: string;\r\n    onreadystatechange: (ev: Event) => any;\r\n    addEventListener(type: "readystatechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    name: string;\r\n    readyState: string;\r\n    doImport(implementationUrl: string): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var MSNamespaceInfo: {\r\n    prototype: MSNamespaceInfo;\r\n    new (): MSNamespaceInfo;\r\n}\r\n\r\ninterface WindowSessionStorage {\r\n    sessionStorage: Storage;\r\n}\r\n\r\ninterface SVGAnimatedTransformList {\r\n    animVal: SVGTransformList;\r\n    baseVal: SVGTransformList;\r\n}\r\ndeclare var SVGAnimatedTransformList: {\r\n    prototype: SVGAnimatedTransformList;\r\n    new (): SVGAnimatedTransformList;\r\n}\r\n\r\ninterface HTMLTableCaptionElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the alignment of the caption or legend.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the caption appears at the top or bottom of the table.\r\n      */\r\n    vAlign: string;\r\n}\r\ndeclare var HTMLTableCaptionElement: {\r\n    prototype: HTMLTableCaptionElement;\r\n    new (): HTMLTableCaptionElement;\r\n}\r\n\r\ninterface HTMLOptionElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    index: number;\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n    create(): HTMLOptionElement;\r\n}\r\ndeclare var HTMLOptionElement: {\r\n    prototype: HTMLOptionElement;\r\n    new (): HTMLOptionElement;\r\n}\r\n\r\ninterface HTMLMapElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves a collection of the area objects defined for the given map object.\r\n      */\r\n    areas: HTMLAreasCollection;\r\n}\r\ndeclare var HTMLMapElement: {\r\n    prototype: HTMLMapElement;\r\n    new (): HTMLMapElement;\r\n}\r\n\r\ninterface HTMLMenuElement extends HTMLElement, DOML2DeprecatedListSpaceReduction {\r\n    type: string;\r\n}\r\ndeclare var HTMLMenuElement: {\r\n    prototype: HTMLMenuElement;\r\n    new (): HTMLMenuElement;\r\n}\r\n\r\ninterface MouseWheelEvent extends MouseEvent {\r\n    wheelDelta: number;\r\n    initMouseWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number): void;\r\n}\r\ndeclare var MouseWheelEvent: {\r\n    prototype: MouseWheelEvent;\r\n    new (): MouseWheelEvent;\r\n}\r\n\r\ninterface SVGFitToViewBox {\r\n    viewBox: SVGAnimatedRect;\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n}\r\n\r\ninterface SVGPointList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGPoint, index: number): SVGPoint;\r\n    getItem(index: number): SVGPoint;\r\n    clear(): void;\r\n    appendItem(newItem: SVGPoint): SVGPoint;\r\n    initialize(newItem: SVGPoint): SVGPoint;\r\n    removeItem(index: number): SVGPoint;\r\n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;\r\n}\r\ndeclare var SVGPointList: {\r\n    prototype: SVGPointList;\r\n    new (): SVGPointList;\r\n}\r\n\r\ninterface SVGAnimatedLengthList {\r\n    animVal: SVGLengthList;\r\n    baseVal: SVGLengthList;\r\n}\r\ndeclare var SVGAnimatedLengthList: {\r\n    prototype: SVGAnimatedLengthList;\r\n    new (): SVGAnimatedLengthList;\r\n}\r\n\r\ninterface Window extends EventTarget, MSEventAttachmentTarget, WindowLocalStorage, MSWindowExtensions, WindowSessionStorage, WindowTimers {\r\n    ondragend: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    ondragover: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    onreset: (ev: Event) => any;\r\n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    ondrag: (ev: DragEvent) => any;\r\n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    screenX: number;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    history: History;\r\n    pageXOffset: number;\r\n    name: string;\r\n    onafterprint: (ev: Event) => any;\r\n    addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onpause: (ev: Event) => any;\r\n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onbeforeprint: (ev: Event) => any;\r\n    addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    top: Window;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onseeked: (ev: Event) => any;\r\n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    opener: Window;\r\n    onclick: (ev: MouseEvent) => any;\r\n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    innerHeight: number;\r\n    onwaiting: (ev: Event) => any;\r\n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    ononline: (ev: Event) => any;\r\n    addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    ondurationchange: (ev: Event) => any;\r\n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    frames: Window;\r\n    onblur: (ev: FocusEvent) => any;\r\n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onemptied: (ev: Event) => any;\r\n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onseeking: (ev: Event) => any;\r\n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    oncanplay: (ev: Event) => any;\r\n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    outerWidth: number;\r\n    onstalled: (ev: Event) => any;\r\n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    innerWidth: number;\r\n    onoffline: (ev: Event) => any;\r\n    addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    length: number;\r\n    screen: Screen;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    onratechange: (ev: Event) => any;\r\n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    onloadstart: (ev: Event) => any;\r\n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onsubmit: (ev: Event) => any;\r\n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    self: Window;\r\n    document: Document;\r\n    onprogress: (ev: any) => any;\r\n    addEventListener(type: "progress", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    pageYOffset: number;\r\n    oncontextmenu: (ev: MouseEvent) => any;\r\n    addEventListener(type: "contextmenu", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onchange: (ev: Event) => any;\r\n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onplay: (ev: Event) => any;\r\n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onerror: ErrorEventHandler;\r\n    onplaying: (ev: Event) => any;\r\n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    parent: Window;\r\n    location: Location;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onabort: (ev: UIEvent) => any;\r\n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    onreadystatechange: (ev: Event) => any;\r\n    addEventListener(type: "readystatechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    outerHeight: number;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    frameElement: Element;\r\n    onloadeddata: (ev: Event) => any;\r\n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onsuspend: (ev: Event) => any;\r\n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    window: Window;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    ontimeupdate: (ev: Event) => any;\r\n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onresize: (ev: UIEvent) => any;\r\n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    onselect: (ev: UIEvent) => any;\r\n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    navigator: Navigator;\r\n    styleMedia: StyleMedia;\r\n    ondrop: (ev: DragEvent) => any;\r\n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onended: (ev: Event) => any;\r\n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onhashchange: (ev: Event) => any;\r\n    addEventListener(type: "hashchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onunload: (ev: Event) => any;\r\n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onscroll: (ev: UIEvent) => any;\r\n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    screenY: number;\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onvolumechange: (ev: Event) => any;\r\n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    oninput: (ev: Event) => any;\r\n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    performance: Performance;\r\n    alert(message?: any): void;\r\n    scroll(x?: number, y?: number): void;\r\n    focus(): void;\r\n    scrollTo(x?: number, y?: number): void;\r\n    print(): void;\r\n    prompt(message?: string, defaul?: string): string;\r\n    toString(): string;\r\n    open(url?: string, target?: string, features?: string, replace?: boolean): Window;\r\n    scrollBy(x?: number, y?: number): void;\r\n    confirm(message?: string): boolean;\r\n    close(): void;\r\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\r\n    showModalDialog(url?: string, argument?: any, options?: any): any;\r\n    blur(): void;\r\n    getSelection(): Selection;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Window: {\r\n    prototype: Window;\r\n    new (): Window;\r\n}\r\n\r\ninterface SVGAnimatedPreserveAspectRatio {\r\n    animVal: SVGPreserveAspectRatio;\r\n    baseVal: SVGPreserveAspectRatio;\r\n}\r\ndeclare var SVGAnimatedPreserveAspectRatio: {\r\n    prototype: SVGAnimatedPreserveAspectRatio;\r\n    new (): SVGAnimatedPreserveAspectRatio;\r\n}\r\n\r\ninterface MSSiteModeEvent extends Event {\r\n    buttonID: number;\r\n    actionURL: string;\r\n}\r\ndeclare var MSSiteModeEvent: {\r\n    prototype: MSSiteModeEvent;\r\n    new (): MSSiteModeEvent;\r\n}\r\n\r\ninterface DOML2DeprecatedTextFlowControl {\r\n    clear: string;\r\n}\r\n\r\ninterface StyleSheetPageList {\r\n    length: number;\r\n    item(index: number): CSSPageRule;\r\n    [index: number]: CSSPageRule;\r\n}\r\ndeclare var StyleSheetPageList: {\r\n    prototype: StyleSheetPageList;\r\n    new (): StyleSheetPageList;\r\n}\r\n\r\ninterface MSCSSProperties extends CSSStyleDeclaration {\r\n    scrollbarShadowColor: string;\r\n    scrollbarHighlightColor: string;\r\n    layoutGridChar: string;\r\n    layoutGridType: string;\r\n    textAutospace: string;\r\n    textKashidaSpace: string;\r\n    writingMode: string;\r\n    scrollbarFaceColor: string;\r\n    backgroundPositionY: string;\r\n    lineBreak: string;\r\n    imeMode: string;\r\n    msBlockProgression: string;\r\n    layoutGridLine: string;\r\n    scrollbarBaseColor: string;\r\n    layoutGrid: string;\r\n    layoutFlow: string;\r\n    textKashida: string;\r\n    filter: string;\r\n    zoom: string;\r\n    scrollbarArrowColor: string;\r\n    behavior: string;\r\n    backgroundPositionX: string;\r\n    accelerator: string;\r\n    layoutGridMode: string;\r\n    textJustifyTrim: string;\r\n    scrollbar3dLightColor: string;\r\n    msInterpolationMode: string;\r\n    scrollbarTrackColor: string;\r\n    scrollbarDarkShadowColor: string;\r\n    styleFloat: string;\r\n    getAttribute(attributeName: string, flags?: number): any;\r\n    setAttribute(attributeName: string, AttributeValue: any, flags?: number): void;\r\n    removeAttribute(attributeName: string, flags?: number): boolean;\r\n}\r\ndeclare var MSCSSProperties: {\r\n    prototype: MSCSSProperties;\r\n    new (): MSCSSProperties;\r\n}\r\n\r\ninterface HTMLCollection extends MSHTMLCollectionExtensions {\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Retrieves an object from various collections.\r\n      */\r\n    item(nameOrIndex?: any, optionalIndex?: any): Element;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      */\r\n    namedItem(name: string): Element;\r\n    [name: number]: Element;\r\n}\r\ndeclare var HTMLCollection: {\r\n    prototype: HTMLCollection;\r\n    new (): HTMLCollection;\r\n}\r\n\r\ninterface SVGExternalResourcesRequired {\r\n    externalResourcesRequired: SVGAnimatedBoolean;\r\n}\r\n\r\ninterface HTMLImageElement extends HTMLElement, MSImageResourceExtensions, MSDataBindingExtensions, MSResourceMetadata {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * The original height of the image resource before sizing.\r\n      */\r\n    naturalHeight: number;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * The original width of the image resource before sizing.\r\n      */\r\n    naturalWidth: number;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Contains the hypertext reference (HREF) of the URL.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves whether the image is a server-side image map.\r\n      */\r\n    isMap: boolean;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    complete: boolean;\r\n    create(): HTMLImageElement;\r\n}\r\ndeclare var HTMLImageElement: {\r\n    prototype: HTMLImageElement;\r\n    new (): HTMLImageElement;\r\n}\r\n\r\ninterface HTMLAreaElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the protocol portion of a URL.\r\n      */\r\n    protocol: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    /**\r\n      * Sets or retrieves the host name part of the location or URL. \r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Sets or retrieves the file name or path specified by the object.\r\n      */\r\n    pathname: string;\r\n    /**\r\n      * Sets or retrieves the hostname and port number of the location or URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Sets or retrieves the subsection of the href property that follows the number sign (#).\r\n      */\r\n    hash: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or gets whether clicks in this region cause action.\r\n      */\r\n    noHref: boolean;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\ndeclare var HTMLAreaElement: {\r\n    prototype: HTMLAreaElement;\r\n    new (): HTMLAreaElement;\r\n}\r\n\r\ninterface EventTarget {\r\n    removeEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    dispatchEvent(evt: Event): boolean;\r\n}\r\n\r\ninterface SVGAngle {\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    value: number;\r\n    unitType: number;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    SVG_ANGLETYPE_RAD: number;\r\n    SVG_ANGLETYPE_UNKNOWN: number;\r\n    SVG_ANGLETYPE_UNSPECIFIED: number;\r\n    SVG_ANGLETYPE_DEG: number;\r\n    SVG_ANGLETYPE_GRAD: number;\r\n}\r\ndeclare var SVGAngle: {\r\n    prototype: SVGAngle;\r\n    new (): SVGAngle;\r\n    SVG_ANGLETYPE_RAD: number;\r\n    SVG_ANGLETYPE_UNKNOWN: number;\r\n    SVG_ANGLETYPE_UNSPECIFIED: number;\r\n    SVG_ANGLETYPE_DEG: number;\r\n    SVG_ANGLETYPE_GRAD: number;\r\n}\r\n\r\ninterface HTMLButtonElement extends HTMLElement, MSDataBindingExtensions {\r\n    /** \r\n      * Sets or retrieves the default or selected value of the control.\r\n      */\r\n    value: string;\r\n    status: any;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /** \r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets the classification and default behavior of the button.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n}\r\ndeclare var HTMLButtonElement: {\r\n    prototype: HTMLButtonElement;\r\n    new (): HTMLButtonElement;\r\n}\r\n\r\ninterface HTMLSourceElement extends HTMLElement {\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Gets or sets the intended media type of the media source.\r\n     */\r\n    media: string;\r\n    /**\r\n     * Gets or sets the MIME type of a media resource.\r\n     */\r\n    type: string;\r\n}\r\ndeclare var HTMLSourceElement: {\r\n    prototype: HTMLSourceElement;\r\n    new (): HTMLSourceElement;\r\n}\r\n\r\ninterface CanvasGradient {\r\n    addColorStop(offset: number, color: string): void;\r\n}\r\ndeclare var CanvasGradient: {\r\n    prototype: CanvasGradient;\r\n    new (): CanvasGradient;\r\n}\r\n\r\ninterface KeyboardEvent extends UIEvent {\r\n    location: number;\r\n    keyCode: number;\r\n    shiftKey: boolean;\r\n    which: number;\r\n    locale: string;\r\n    key: string;\r\n    altKey: boolean;\r\n    metaKey: boolean;\r\n    char: string;\r\n    ctrlKey: boolean;\r\n    repeat: boolean;\r\n    charCode: number;\r\n    getModifierState(keyArg: string): boolean;\r\n    initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;\r\n    DOM_KEY_LOCATION_RIGHT: number;\r\n    DOM_KEY_LOCATION_STANDARD: number;\r\n    DOM_KEY_LOCATION_LEFT: number;\r\n    DOM_KEY_LOCATION_NUMPAD: number;\r\n    DOM_KEY_LOCATION_JOYSTICK: number;\r\n    DOM_KEY_LOCATION_MOBILE: number;\r\n}\r\ndeclare var KeyboardEvent: {\r\n    prototype: KeyboardEvent;\r\n    new (): KeyboardEvent;\r\n    DOM_KEY_LOCATION_RIGHT: number;\r\n    DOM_KEY_LOCATION_STANDARD: number;\r\n    DOM_KEY_LOCATION_LEFT: number;\r\n    DOM_KEY_LOCATION_NUMPAD: number;\r\n    DOM_KEY_LOCATION_JOYSTICK: number;\r\n    DOM_KEY_LOCATION_MOBILE: number;\r\n}\r\n\r\ninterface Document extends Node, NodeSelector, MSEventAttachmentTarget, DocumentEvent, MSResourceMetadata, MSNodeExtensions {\r\n    /**\r\n      * Retrieves the collection of user agents and versions declared in the X-UA-Compatible\r\n      */\r\n    compatible: MSCompatibleInfoCollection;\r\n    /**\r\n      * Fires when the user presses a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Fires when the user releases a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets the implementation object of the current document. \r\n      */\r\n    implementation: DOMImplementation;\r\n    /**\r\n      * Fires when the user resets a form. \r\n      * @param ev The event.\r\n      */\r\n    onreset: (ev: Event) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Retrieves a collection of all script objects in the document.\r\n      */\r\n    scripts: HTMLCollection;\r\n\r\n    /**\r\n      * Fires when the user presses the F1 key while the browser is the active window. \r\n      * @param ev The event.\r\n      */\r\n    onhelp: (ev: Event) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "help", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /** \r\n      * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragleave: (ev: DragEvent) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets or sets the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n\r\n    /**\r\n      * Fires for an element just prior to setting focus on that element.\r\n      * @param ev The focus event\r\n      */\r\n    onfocusin: (ev: FocusEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n\r\n    /** \r\n      * Sets or gets the color of the links that the user has visited.\r\n      */\r\n    vlinkColor: string;\r\n\r\n    /**\r\n      * Occurs when the seek operation ends. \r\n      * @param ev The event.\r\n      */\r\n    onseeked: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    security: string;\r\n\r\n    /**\r\n      * Contains the title of the document.\r\n      */\r\n    title: string;\r\n\r\n    /**\r\n      * Retrieves a collection of namespace objects.\r\n      */\r\n    namespaces: MSNamespaceInfoCollection;\r\n\r\n    /**\r\n      * Gets the default character set from the current regional language settings.\r\n      */\r\n    defaultCharset: string;\r\n\r\n    /**\r\n      * Retrieves a collection of all embed objects in the document.\r\n      */\r\n    embeds: HTMLCollection;\r\n\r\n    /**\r\n      * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\r\n      */\r\n    styleSheets: StyleSheetList;\r\n\r\n    /**\r\n      * Retrieves a collection of all window objects defined by the given document or defined by the document associated with the given window.\r\n      */\r\n    frames: Window;\r\n\r\n    /**\r\n      * Occurs when the duration attribute is updated. \r\n      * @param ev The event.\r\n      */\r\n    ondurationchange: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Returns a reference to the collection of elements contained by the object.\r\n      */\r\n    all: HTMLCollection;\r\n\r\n    /**\r\n      * Retrieves a collection, in source order, of all form objects in the document.\r\n      */\r\n    forms: HTMLCollection;\r\n\r\n    /** \r\n      * Fires when the object loses the input focus. \r\n      * @param ev The focus event.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Sets or retrieves a value that indicates the reading order of the object. \r\n      */\r\n    dir: string;\r\n\r\n    /**\r\n      * Occurs when the media element is reset to its initial state. \r\n      * @param ev The event.\r\n      */\r\n    onemptied: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Sets or gets a value that indicates whether the document can be edited.\r\n      */\r\n    designMode: string;\r\n\r\n    /**\r\n      * Occurs when the current playback position is moved. \r\n      * @param ev The event.\r\n      */\r\n    onseeking: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The UI Event\r\n      */\r\n    ondeactivate: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when playback is possible, but would require further buffering. \r\n      * @param ev The event.\r\n      */\r\n    oncanplay: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the data set exposed by a data source object changes. \r\n      * @param ev The event.\r\n      */\r\n    ondatasetchanged: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "datasetchanged", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when rows are about to be deleted from the recordset.\r\n      * @param ev The event \r\n      */\r\n    onrowsdelete: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "rowsdelete", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    Script: MSScriptHost;\r\n\r\n    /**\r\n      * Occurs when Internet Explorer begins looking for media data. \r\n      * @param ev The event.\r\n      */\r\n    onloadstart: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets the URL for the document, stripped of any character encoding.\r\n      */\r\n    URLUnencoded: string;\r\n\r\n    defaultView: Window;\r\n\r\n    /**\r\n      * Fires when the user is about to make a control selection of the object.\r\n      * @param ev The event.\r\n      */\r\n    oncontrolselect: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "controlselect", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /** \r\n      * Fires on the target element when the user drags the object to a valid drop target.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragenter: (ev: DragEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onsubmit: (ev: Event) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Returns the character encoding used to create the webpage that is loaded into the document object.\r\n      */\r\n    inputEncoding: string;\r\n\r\n    /**\r\n      * Gets the object that has the focus when the parent document has focus.\r\n      */\r\n    activeElement: Element;\r\n\r\n    /**\r\n      * Fires when the contents of the object or selection have changed. \r\n      * @param ev The event.\r\n      */\r\n    onchange: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\r\n      */\r\n    links: HTMLCollection;\r\n\r\n    /**\r\n      * Retrieves an autogenerated, unique identifier for the object. \r\n      */\r\n    uniqueID: string;\r\n\r\n    /**\r\n      * Sets or gets the URL for the current document. \r\n      */\r\n    URL: string;\r\n\r\n    /**\r\n      * Fires immediately before the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    head: HTMLHeadElement;\r\n    cookie: string;\r\n    xmlEncoding: string;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /** \r\n      * Retrieves the document compatibility mode of the document.\r\n      */\r\n    documentMode: number;\r\n\r\n    characterSet: string;\r\n\r\n    /**\r\n      * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\r\n      */\r\n    anchors: HTMLCollection;\r\n\r\n    onbeforeupdate: (ev: MSEventObj) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "beforeupdate", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /** \r\n      * Fires to indicate that all data is available from the data source object. \r\n      * @param ev The event.\r\n      */\r\n    ondatasetcomplete: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "datasetcomplete", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    plugins: HTMLCollection;\r\n\r\n    /**\r\n      * Occurs if the load operation has been intentionally halted. \r\n      * @param ev The event.\r\n      */\r\n    onsuspend: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets the root svg element in the document hierarchy.\r\n      */\r\n    rootElement: SVGSVGElement;\r\n\r\n    /**\r\n      * Retrieves a value that indicates the current state of the object.\r\n      */\r\n    readyState: string;\r\n\r\n    /**\r\n      * Gets the URL of the location that referred the user to the current page.\r\n      */\r\n    referrer: string;\r\n\r\n    /**\r\n      * Sets or gets the color of all active links in the document.\r\n      */\r\n    alinkColor: string;\r\n\r\n    /**\r\n      * Fires on a databound object when an error occurs while updating the associated data in the data source object. \r\n      * @param ev The event.\r\n      */\r\n    onerrorupdate: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "errorupdate", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets a reference to the container object of the window.\r\n      */\r\n    parentWindow: Window;\r\n\r\n    /**\r\n      * Fires when the user moves the mouse pointer outside the boundaries of the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseout: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.\r\n      * @param ev The event.\r\n      */\r\n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "msthumbnailclick", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the wheel button is rotated. \r\n      * @param ev The mouse event\r\n      */\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when the volume is changed, or playback is muted or unmuted.\r\n      * @param ev The event.\r\n      */\r\n    onvolumechange: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /** \r\n      * Fires when data changes in the data provider.\r\n      * @param ev The event.\r\n      */\r\n    oncellchange: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "cellchange", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires just before the data source control changes the current row in the object. \r\n      * @param ev The event.\r\n      */\r\n    onrowexit: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "rowexit", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires just after new rows are inserted in the current recordset.\r\n      * @param ev The event.\r\n      */\r\n    onrowsinserted: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "rowsinserted", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets or sets the version attribute specified in the declaration of an XML document.\r\n      */\r\n    xmlVersion: string;\r\n\r\n    msCapsLockWarningOff: boolean;\r\n\r\n    /**\r\n      * Fires when a property changes on the object.\r\n      * @param ev The event.\r\n      */\r\n    onpropertychange: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "propertychange", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires on the source object when the user releases the mouse at the close of a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondragend: (ev: DragEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets an object representing the document type declaration associated with the current document. \r\n      */\r\n    doctype: DocumentType;\r\n\r\n    /**\r\n      * Fires on the target element continuously while the user drags the object over a valid drop target.\r\n      * @param ev The event.\r\n      */\r\n    ondragover: (ev: DragEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Deprecated. Sets or retrieves a value that indicates the background color behind the object. \r\n      */\r\n    bgColor: string;\r\n\r\n    /**\r\n      * Fires on the source object when the user starts to drag a text selection or selected object. \r\n      * @param ev The event.\r\n      */\r\n    ondragstart: (ev: DragEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user releases a mouse button while the mouse is over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseup: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires on the source object continuously during a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondrag: (ev: DragEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user moves the mouse pointer into the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseover: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Sets or gets the color of the document links. \r\n      */\r\n    linkColor: string;\r\n\r\n    /**\r\n      * Occurs when playback is paused.\r\n      * @param ev The event.\r\n      */\r\n    onpause: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user clicks the object with either mouse button. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousedown: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user clicks the left mouse button on the object\r\n      * @param ev The mouse event.\r\n      */\r\n    onclick: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when playback stops because the next frame of a video resource is not available. \r\n      * @param ev The event.\r\n      */\r\n    onwaiting: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user clicks the Stop button or leaves the Web page.\r\n      * @param ev The event.\r\n      */\r\n    onstop: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)[rolls\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "stop", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when an item is removed from a Jump List of a webpage running in Site Mode. \r\n      * @param ev The event.\r\n      */\r\n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mssitemodejumplistitemremoved", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Retrieves a collection of all applet objects in the document.\r\n      */\r\n    applets: HTMLCollection;\r\n\r\n    /**\r\n      * Specifies the beginning and end of the document body.\r\n      */\r\n    body: HTMLElement;\r\n\r\n    /**\r\n      * Sets or gets the security domain of the document. \r\n      */\r\n    domain: string;\r\n\r\n    xmlStandalone: boolean;\r\n\r\n    /**\r\n      * Represents the active selection, which is a highlighted block of text or other elements in the document that a user or a script can carry out some action on.\r\n      */\r\n    selection: MSSelection;\r\n\r\n    /**\r\n      * Occurs when the download has stopped. \r\n      * @param ev The event.\r\n      */\r\n    onstalled: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user moves the mouse over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousemove: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets a reference to the root node of the document. \r\n      */\r\n    documentElement: HTMLElement;\r\n\r\n    /**\r\n      * Fires before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.\r\n      * @param ev The event.\r\n      */\r\n    onbeforeeditfocus: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "beforeeditfocus", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when the playback rate is increased or decreased. \r\n      * @param ev The event.\r\n      */\r\n    onratechange: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs to indicate progress while downloading media data. \r\n      * @param ev The event.\r\n      */\r\n    onprogress: (ev: any) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "progress", listener: (ev: any) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user double-clicks the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    ondblclick: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the user clicks the right mouse button in the client area, opening the context menu. \r\n      * @param ev The mouse event.\r\n      */\r\n    oncontextmenu: (ev: MouseEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "contextmenu", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when the duration and dimensions of the media have been determined.\r\n      * @param ev The event.\r\n      */\r\n    onloadedmetadata: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    media: string;\r\n\r\n    /**\r\n      * Fires when an error occurs during object loading.\r\n      * @param ev The event.\r\n      */\r\n    onerror: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "error", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when the play method is requested. \r\n      * @param ev The event.\r\n      */\r\n    onplay: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onafterupdate: (ev: MSEventObj) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "afterupdate", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when the audio or video has started playing. \r\n      * @param ev The event.\r\n      */\r\n    onplaying: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Retrieves a collection, in source order, of img objects in the document.\r\n      */\r\n    images: HTMLCollection;\r\n\r\n    /**\r\n      * Contains information about the current URL. \r\n      */\r\n    location: Location;\r\n\r\n    /**\r\n      * Fires when the user aborts the download.\r\n      * @param ev The event.\r\n      */\r\n    onabort: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires for the current element with focus immediately after moving focus to another element. \r\n      * @param ev The event.\r\n      */\r\n    onfocusout: (ev: FocusEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the selection state of a document changes.\r\n      * @param ev The event.\r\n      */\r\n    onselectionchange: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "selectionchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when a local DOM Storage area is written to disk.\r\n      * @param ev The event.\r\n      */\r\n    onstoragecommit: (ev: StorageEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "storagecommit", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires periodically as data arrives from data source objects that asynchronously transmit their data. \r\n      * @param ev The event.\r\n      */\r\n    ondataavailable: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "dataavailable", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the state of the object has changed.\r\n      * @param ev The event\r\n      */\r\n    onreadystatechange: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "readystatechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets the date that the page was last modified, if the page supplies one. \r\n      */\r\n    lastModified: string;\r\n\r\n    /**\r\n      * Fires when the user presses an alphanumeric key.\r\n      * @param ev The event.\r\n      */\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when media data is loaded at the current playback position. \r\n      * @param ev The event.\r\n      */\r\n    onloadeddata: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires immediately before the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The event.\r\n      */\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onactivate: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n\r\n    onselectstart: (ev: Event) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the object receives focus. \r\n      * @param ev The event.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Sets or gets the foreground (text) color of the document.\r\n      */\r\n    fgColor: string;\r\n\r\n    /**\r\n      * Occurs to indicate the current playback position.\r\n      * @param ev The event.\r\n      */\r\n    ontimeupdate: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires when the current selection changes.\r\n      * @param ev The event.\r\n      */\r\n    onselect: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    ondrop: (ev: DragEvent) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Occurs when the end of playback is reached. \r\n      * @param ev The event\r\n      */\r\n    onended: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Gets a value that indicates whether standards-compliant mode is switched on for the object.\r\n      */\r\n    compatMode: string;\r\n\r\n    /**\r\n      * Fires when the user repositions the scroll box in the scroll bar on the object. \r\n      * @param ev The event.\r\n      */\r\n    onscroll: (ev: UIEvent) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires to indicate that the current row has changed in the data source and new data values are available on the object. \r\n      * @param ev The event.\r\n      */\r\n    onrowenter: (ev: MSEventObj) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "rowenter", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Fires immediately after the browser loads the object. \r\n      * @param ev The event.\r\n      */\r\n    onload: (ev: Event) => any;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    oninput: (ev: Event) => any;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event to register\r\n      * @param listener The event handler function to associate with the event. \r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for: \r\n      * true (true)\r\n      *   Register the event handler for the capturing phase. \r\n      * false (false)\r\n      *   Register the event handler for the bubbling phase.\r\n      */\r\n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n\r\n    /**\r\n      * Returns the current value of the document, range, or current selection for the given command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandValue(commandId: string): string;\r\n\r\n    adoptNode(source: Node): Node;\r\n\r\n    /**\r\n      * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandIndeterm(commandId: string): boolean;\r\n\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\r\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\r\n\r\n    /**\r\n      * Executes a command on the current document, current selection, or the given range.\r\n      * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\r\n      * @param showUI Display the user interface, defaults to false.\r\n      * @param value Value to assign.\r\n      */\r\n    execCommand(commandId: string, showUI?: boolean, value?: any): boolean;\r\n\r\n    /**\r\n      * Returns the element for the specified x coordinate and the specified y coordinate. \r\n      * @param x The x-offset\r\n      * @param y The y-offset\r\n      */\r\n    elementFromPoint(x: number, y: number): Element;\r\n    createCDATASection(data: string): CDATASection;\r\n\r\n    /**\r\n      * Retrieves the string associated with a command.\r\n      * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers. \r\n      */\r\n    queryCommandText(commandId: string): string;\r\n\r\n    /**\r\n      * Writes one or more HTML expressions to a document in the specified window. \r\n      * @param content Specifies the text and HTML tags to write.\r\n      */\r\n    write(...content: string[]): void;\r\n\r\n    /**\r\n      * Allows updating the print settings for the page.\r\n      */\r\n    updateSettings(): void;\r\n\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "a"): HTMLAnchorElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "abbr"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "address"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "area"): HTMLAreaElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "article"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "aside"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "audio"): HTMLAudioElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "b"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "base"): HTMLBaseElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "bdi"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "bdo"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "blockquote"): HTMLQuoteElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "body"): HTMLBodyElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "br"): HTMLBRElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "button"): HTMLButtonElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "canvas"): HTMLCanvasElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "caption"): HTMLTableCaptionElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "cite"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "code"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "col"): HTMLTableColElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "colgroup"): HTMLTableColElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "datalist"): HTMLDataListElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "dd"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "del"): HTMLModElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "dfn"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "div"): HTMLDivElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "dl"): HTMLDListElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "dt"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "em"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "embed"): HTMLEmbedElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "fieldset"): HTMLFieldSetElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "figcaption"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "figure"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "footer"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "form"): HTMLFormElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "h1"): HTMLHeadingElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "h2"): HTMLHeadingElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "h3"): HTMLHeadingElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "h4"): HTMLHeadingElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "h5"): HTMLHeadingElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "h6"): HTMLHeadingElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "head"): HTMLHeadElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "header"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "hgroup"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "hr"): HTMLHRElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "html"): HTMLHtmlElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "i"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "iframe"): HTMLIFrameElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "img"): HTMLImageElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "input"): HTMLInputElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "ins"): HTMLModElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "kbd"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "label"): HTMLLabelElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "legend"): HTMLLegendElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "li"): HTMLLIElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "link"): HTMLLinkElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "main"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "map"): HTMLMapElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "mark"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "menu"): HTMLMenuElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "meta"): HTMLMetaElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "nav"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "noscript"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "object"): HTMLObjectElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "ol"): HTMLOListElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "optgroup"): HTMLOptGroupElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "option"): HTMLOptionElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "p"): HTMLParagraphElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "param"): HTMLParamElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "pre"): HTMLPreElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "progress"): HTMLProgressElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "q"): HTMLQuoteElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "rp"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "rt"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "ruby"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "s"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "samp"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "script"): HTMLScriptElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "section"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "select"): HTMLSelectElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "small"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "source"): HTMLSourceElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "span"): HTMLSpanElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "strong"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "style"): HTMLStyleElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "sub"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "summary"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "sup"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "table"): HTMLTableElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "tbody"): HTMLTableSectionElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "td"): HTMLTableDataCellElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "textarea"): HTMLTextAreaElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "tfoot"): HTMLTableSectionElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "th"): HTMLTableHeaderCellElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "thead"): HTMLTableSectionElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "title"): HTMLTitleElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "tr"): HTMLTableRowElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "track"): HTMLTrackElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "u"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "ul"): HTMLUListElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "var"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "video"): HTMLVideoElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: "wbr"): HTMLElement;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: string): HTMLElement;\r\n    \r\n    /**\r\n      * Removes mouse capture from the object in the current document.\r\n      */\r\n    releaseCapture(): void;\r\n\r\n    /**\r\n      * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window. \r\n      * @param content The text and HTML tags to write.\r\n      */\r\n    writeln(...content: string[]): void;\r\n    createElementNS(namespaceURI: string, qualifiedName: string): Element;\r\n\r\n    /**\r\n      * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\r\n      * @param url Specifies a MIME type for the document.\r\n      * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\r\n      * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.\r\n      * @param replace Specifies whether the existing entry for the document is replaced in the history list.\r\n      */\r\n    open(url?: string, name?: string, features?: string, replace?: boolean): any;\r\n\r\n    /**\r\n      * Returns a Boolean value that indicates whether the current command is supported on the current range.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandSupported(commandId: string): boolean;\r\n\r\n    /**\r\n      * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\r\n      * @param filter A custom NodeFilter function to use.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createTreeWalker(root: Node, whatToShow: number, filter: NodeFilter, entityReferenceExpansion: boolean): TreeWalker;\r\n    createAttributeNS(namespaceURI: string, qualifiedName: string): Attr;\r\n\r\n    /** \r\n      * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandEnabled(commandId: string): boolean;\r\n\r\n    /**\r\n      * Causes the element to receive the focus and executes the code specified by the onfocus event.\r\n      */\r\n    focus(): void;\r\n\r\n    /**\r\n      * Closes an output stream and forces the sent data to display.\r\n      */\r\n    close(): void;\r\n\r\n    getElementsByClassName(classNames: string): NodeList;\r\n    importNode(importedNode: Node, deep: boolean): Node;\r\n\r\n    /**\r\n      *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document. \r\n      */\r\n    createRange(): Range;\r\n\r\n    /**\r\n      * Fires a specified event on the object.\r\n      * @param eventName Specifies the name of the event to fire.\r\n      * @param eventObj Object that specifies the event object from which to obtain event object properties.\r\n      */\r\n    fireEvent(eventName: string, eventObj?: any): boolean;\r\n\r\n    /**\r\n      * Creates a comment object with the specified data.\r\n      * @param data Sets the comment object\'s data.\r\n      */\r\n    createComment(data: string): Comment;\r\n\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "a"): NodeListOf<HTMLAnchorElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "abbr"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "address"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "area"): NodeListOf<HTMLAreaElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "article"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "aside"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "audio"): NodeListOf<HTMLAudioElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "b"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "base"): NodeListOf<HTMLBaseElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "bdi"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "bdo"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "blockquote"): NodeListOf<HTMLQuoteElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "body"): NodeListOf<HTMLBodyElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "br"): NodeListOf<HTMLBRElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "button"): NodeListOf<HTMLButtonElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "canvas"): NodeListOf<HTMLCanvasElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "caption"): NodeListOf<HTMLTableCaptionElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "cite"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "code"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "col"): NodeListOf<HTMLTableColElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "colgroup"): NodeListOf<HTMLTableColElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "datalist"): NodeListOf<HTMLDataListElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "dd"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "del"): NodeListOf<HTMLModElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "dfn"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "div"): NodeListOf<HTMLDivElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "dl"): NodeListOf<HTMLDListElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "dt"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "em"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "embed"): NodeListOf<HTMLEmbedElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "fieldset"): NodeListOf<HTMLFieldSetElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "figcaption"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "figure"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "footer"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "form"): NodeListOf<HTMLFormElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "h1"): NodeListOf<HTMLHeadingElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "h2"): NodeListOf<HTMLHeadingElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "h3"): NodeListOf<HTMLHeadingElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "h4"): NodeListOf<HTMLHeadingElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "h5"): NodeListOf<HTMLHeadingElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "h6"): NodeListOf<HTMLHeadingElement>;\r\n    /**\r\n     * Retrieves a collection of objects based on the specified element name.\r\n     * @param name Specifies the name of an element.\r\n     */\r\n    getElementsByTagName(name: "head"): NodeListOf<HTMLHeadElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "header"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "hgroup"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "hr"): NodeListOf<HTMLHRElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "html"): NodeListOf<HTMLHtmlElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "i"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "iframe"): NodeListOf<HTMLIFrameElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "img"): NodeListOf<HTMLImageElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "input"): NodeListOf<HTMLInputElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "ins"): NodeListOf<HTMLModElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "kbd"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "label"): NodeListOf<HTMLLabelElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "legend"): NodeListOf<HTMLLegendElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "li"): NodeListOf<HTMLLIElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "link"): NodeListOf<HTMLLinkElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "main"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "map"): NodeListOf<HTMLMapElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "mark"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "menu"): NodeListOf<HTMLMenuElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "meta"): NodeListOf<HTMLMetaElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "nav"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "noscript"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "object"): NodeListOf<HTMLObjectElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "ol"): NodeListOf<HTMLOListElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "optgroup"): NodeListOf<HTMLOptGroupElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "option"): NodeListOf<HTMLOptionElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "p"): NodeListOf<HTMLParagraphElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "param"): NodeListOf<HTMLParamElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "pre"): NodeListOf<HTMLPreElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "progress"): NodeListOf<HTMLProgressElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "q"): NodeListOf<HTMLQuoteElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "rp"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "rt"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "ruby"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "s"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "samp"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "script"): NodeListOf<HTMLScriptElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "section"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "select"): NodeListOf<HTMLSelectElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "small"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "source"): NodeListOf<HTMLSourceElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "span"): NodeListOf<HTMLSpanElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "strong"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "style"): NodeListOf<HTMLStyleElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "sub"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "summary"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "sup"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "table"): NodeListOf<HTMLTableElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "tbody"): NodeListOf<HTMLTableSectionElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "td"): NodeListOf<HTMLTableDataCellElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "textarea"): NodeListOf<HTMLTextAreaElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "tfoot"): NodeListOf<HTMLTableSectionElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "th"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "thead"): NodeListOf<HTMLTableSectionElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "title"): NodeListOf<HTMLTitleElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "tr"): NodeListOf<HTMLTableRowElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "track"): NodeListOf<HTMLTrackElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "u"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "ul"): NodeListOf<HTMLUListElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "var"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "video"): NodeListOf<HTMLVideoElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: "wbr"): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: string): NodeList;\r\n    \r\n    /**\r\n      * Creates a new document.\r\n      */\r\n    createDocumentFragment(): DocumentFragment;\r\n\r\n    /**\r\n      * Creates a style sheet for the document. \r\n      * @param href Specifies how to add the style sheet to the document. If a file name is specified for the URL, the style information is added as a link object. If the URL contains style information, it is added to the style object.\r\n      * @param index Specifies the index that indicates where the new style sheet is inserted in the styleSheets collection. The default is to insert the new style sheet at the end of the collection.\r\n      */\r\n    createStyleSheet(href?: string, index?: number): CSSStyleSheet;\r\n\r\n    /**\r\n      * Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      */\r\n    getElementsByName(elementName: string): NodeList;\r\n\r\n    /**\r\n      * Returns a Boolean value that indicates the current state of the command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandState(commandId: string): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the object currently has focus.\r\n      */\r\n    hasFocus(): boolean;\r\n\r\n    /**\r\n      * Displays help information for the given command identifier.\r\n      * @param commandId Displays help information for the given command identifier.\r\n      */\r\n    execCommandShowHelp(commandId: string): boolean;\r\n\r\n    /**\r\n      * Creates an attribute object with a specified name.\r\n      * @param name String that sets the attribute object\'s name.\r\n      */\r\n    createAttribute(name: string): Attr;\r\n\r\n    /**\r\n      * Creates a text string from the specified value. \r\n      * @param data String that specifies the nodeValue property of the text node.\r\n      */\r\n    createTextNode(data: string): Text;\r\n\r\n    /**\r\n      * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document. \r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list\r\n      * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createNodeIterator(root: Node, whatToShow: number, filter: NodeFilter, entityReferenceExpansion: boolean): NodeIterator;\r\n\r\n    /**\r\n      * Generates an event object to pass event context information when you use the fireEvent method.\r\n      * @param eventObj An object that specifies an existing event object on which to base the new object.\r\n      */\r\n    createEventObject(eventObj?: any): MSEventObj;\r\n\r\n    /**\r\n      * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\r\n      */\r\n    getSelection(): Selection;\r\n\r\n    /**\r\n      * Returns a reference to the first object with the specified value of the ID or NAME attribute.\r\n      * @param elementId String that specifies the ID value. Case-insensitive.\r\n      */\r\n    getElementById(elementId: string): HTMLElement;\r\n\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event type to register. \r\n      * @param listener The event handler function to associate with the event.\r\n      * @param useCapture Boolean value that specifies the event phase to add the event handler for: \r\n      *        true (true)\r\n      *           Register the event handler for the capturing phase. \r\n      *        false (false)\r\n      *           Register the event handler for the bubbling phase. \r\n      */\r\n    addEventListener(type: "DOMContentLoaded", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Registers an event handler for the specified event type. \r\n      * @param type The type of event type to register. \r\n      * @param listener The event handler function to associate with the event.\r\n      * @param useCapture Boolean value that specifies the event phase to add the event handler for: \r\n      *        true (true)\r\n      *           Register the event handler for the capturing phase. \r\n      *        false (false)\r\n      *           Register the event handler for the bubbling phase. \r\n      */\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Document: {\r\n    prototype: Document;\r\n    new (): Document;\r\n}\r\n\r\ninterface MessageEvent extends Event {\r\n    source: Window;\r\n    origin: string;\r\n    data: any;\r\n    initMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\r\n}\r\ndeclare var MessageEvent: {\r\n    prototype: MessageEvent;\r\n    new (): MessageEvent;\r\n}\r\n\r\ninterface SVGElement extends Element {\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    viewportElement: SVGElement;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    xmlbase: string;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onclick: (ev: MouseEvent) => any;\r\n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    ownerSVGElement: SVGSVGElement;\r\n    id: string;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var SVGElement: {\r\n    prototype: SVGElement;\r\n    new (): SVGElement;\r\n}\r\n\r\ninterface HTMLScriptElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the status of the script.\r\n      */\r\n    defer: boolean;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    /**\r\n      * Retrieves the URL to an external file that contains the source code or data.\r\n      */\r\n    src: string;\r\n    /** \r\n      * Sets or retrieves the object that is bound to the event script.\r\n      */\r\n    htmlFor: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the MIME type for the associated scripting engine.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the event for which the script is written. \r\n      */\r\n    event: string;\r\n}\r\ndeclare var HTMLScriptElement: {\r\n    prototype: HTMLScriptElement;\r\n    new (): HTMLScriptElement;\r\n}\r\n\r\ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Retrieves the position of the object in the rows collection for the table.\r\n      */\r\n    rowIndex: number;\r\n    /**\r\n      * Retrieves a collection of all cells in the table row.\r\n      */\r\n    cells: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorLight: any;\r\n    /**\r\n      * Retrieves the position of the object in the collection.\r\n      */\r\n    sectionRowIndex: number;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorDark: any;\r\n    /**\r\n      * Removes the specified cell from the table row, as well as from the cells collection.\r\n      * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\r\n      */\r\n    deleteCell(index?: number): void;\r\n    /**\r\n      * Creates a new cell in the table row, and adds the cell to the cells collection.\r\n      * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\r\n      */\r\n    insertCell(index?: number): HTMLElement;\r\n}\r\ndeclare var HTMLTableRowElement: {\r\n    prototype: HTMLTableRowElement;\r\n    new (): HTMLTableRowElement;\r\n}\r\n\r\ninterface CanvasRenderingContext2D {\r\n    miterLimit: number;\r\n    font: string;\r\n    globalCompositeOperation: string;\r\n    msFillRule: string;\r\n    lineCap: string;\r\n    msImageSmoothingEnabled: boolean;\r\n    lineDashOffset: number;\r\n    shadowColor: string;\r\n    lineJoin: string;\r\n    shadowOffsetX: number;\r\n    lineWidth: number;\r\n    canvas: HTMLCanvasElement;\r\n    strokeStyle: any;\r\n    globalAlpha: number;\r\n    shadowOffsetY: number;\r\n    fillStyle: any;\r\n    shadowBlur: number;\r\n    textAlign: string;\r\n    textBaseline: string;\r\n    restore(): void;\r\n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    save(): void;\r\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\r\n    measureText(text: string): TextMetrics;\r\n    isPointInPath(x: number, y: number, fillRule?: string): boolean;\r\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\r\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\r\n    rotate(angle: number): void;\r\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    translate(x: number, y: number): void;\r\n    scale(x: number, y: number): void;\r\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\r\n    lineTo(x: number, y: number): void;\r\n    getLineDash(): Array<number>;\r\n    fill(fillRule?: string): void;\r\n    createImageData(imageDataOrSw: any, sh?: number): ImageData;\r\n    createPattern(image: HTMLElement, repetition: string): CanvasPattern;\r\n    closePath(): void;\r\n    rect(x: number, y: number, w: number, h: number): void;\r\n    clip(fillRule?: string): void;\r\n    clearRect(x: number, y: number, w: number, h: number): void;\r\n    moveTo(x: number, y: number): void;\r\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\r\n    fillRect(x: number, y: number, w: number, h: number): void;\r\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\r\n    drawImage(image: HTMLElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\r\n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    stroke(): void;\r\n    strokeRect(x: number, y: number, w: number, h: number): void;\r\n    setLineDash(segments: Array<number>): void;\r\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    beginPath(): void;\r\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\r\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\r\n}\r\ndeclare var CanvasRenderingContext2D: {\r\n    prototype: CanvasRenderingContext2D;\r\n    new (): CanvasRenderingContext2D;\r\n}\r\n\r\ninterface MSCSSRuleList {\r\n    length: number;\r\n    item(index?: number): CSSStyleRule;\r\n    [index: number]: CSSStyleRule;\r\n}\r\ndeclare var MSCSSRuleList: {\r\n    prototype: MSCSSRuleList;\r\n    new (): MSCSSRuleList;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoHorizontalAbs: {\r\n    prototype: SVGPathSegLinetoHorizontalAbs;\r\n    new (): SVGPathSegLinetoHorizontalAbs;\r\n}\r\n\r\ninterface SVGPathSegArcAbs extends SVGPathSeg {\r\n    y: number;\r\n    sweepFlag: boolean;\r\n    r2: number;\r\n    x: number;\r\n    angle: number;\r\n    r1: number;\r\n    largeArcFlag: boolean;\r\n}\r\ndeclare var SVGPathSegArcAbs: {\r\n    prototype: SVGPathSegArcAbs;\r\n    new (): SVGPathSegArcAbs;\r\n}\r\n\r\ninterface SVGTransformList {\r\n    numberOfItems: number;\r\n    getItem(index: number): SVGTransform;\r\n    consolidate(): SVGTransform;\r\n    clear(): void;\r\n    appendItem(newItem: SVGTransform): SVGTransform;\r\n    initialize(newItem: SVGTransform): SVGTransform;\r\n    removeItem(index: number): SVGTransform;\r\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\r\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n}\r\ndeclare var SVGTransformList: {\r\n    prototype: SVGTransformList;\r\n    new (): SVGTransformList;\r\n}\r\n\r\ninterface HTMLHtmlElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the DTD version that governs the current document.\r\n      */\r\n    version: string;\r\n}\r\ndeclare var HTMLHtmlElement: {\r\n    prototype: HTMLHtmlElement;\r\n    new (): HTMLHtmlElement;\r\n}\r\n\r\ninterface SVGPathSegClosePath extends SVGPathSeg {\r\n}\r\ndeclare var SVGPathSegClosePath: {\r\n    prototype: SVGPathSegClosePath;\r\n    new (): SVGPathSegClosePath;\r\n}\r\n\r\ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: any;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\r\n      */\r\n    security: any;\r\n    /**\r\n      * Registers an event handler for the specified event type.\r\n      * @param type The type of event type to register.\r\n      * @param listener The event handler function to associate with the event.\r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for. If true, register the event handler for the capturing phase. If false, Register the event handler for the bubbling phase. \r\n      */\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLFrameElement: {\r\n    prototype: HTMLFrameElement;\r\n    new (): HTMLFrameElement;\r\n}\r\n\r\ninterface SVGAnimatedLength {\r\n    animVal: SVGLength;\r\n    baseVal: SVGLength;\r\n}\r\ndeclare var SVGAnimatedLength: {\r\n    prototype: SVGAnimatedLength;\r\n    new (): SVGAnimatedLength;\r\n}\r\n\r\ninterface SVGAnimatedPoints {\r\n    points: SVGPointList;\r\n    animatedPoints: SVGPointList;\r\n}\r\n\r\ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGDefsElement: {\r\n    prototype: SVGDefsElement;\r\n    new (): SVGDefsElement;\r\n}\r\n\r\ninterface HTMLQuoteElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLQuoteElement: {\r\n    prototype: HTMLQuoteElement;\r\n    new (): HTMLQuoteElement;\r\n}\r\n\r\ninterface CSSMediaRule extends CSSRule {\r\n    media: MediaList;\r\n    cssRules: CSSRuleList;\r\n    insertRule(rule: string, index?: number): number;\r\n    deleteRule(index?: number): void;\r\n}\r\ndeclare var CSSMediaRule: {\r\n    prototype: CSSMediaRule;\r\n    new (): CSSMediaRule;\r\n}\r\n\r\ninterface WindowModal {\r\n    dialogArguments: any;\r\n    returnValue: any;\r\n}\r\n\r\ninterface XMLHttpRequest extends EventTarget {\r\n    responseBody: any;\r\n    status: number;\r\n    readyState: number;\r\n    responseText: string;\r\n    responseXML: Document;\r\n    ontimeout: (ev: Event) => any;\r\n    addEventListener(type: "timeout", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    statusText: string;\r\n    onreadystatechange: (ev: Event) => any;\r\n    addEventListener(type: "readystatechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    timeout: number;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    open(method: string, url: string, async?: boolean, user?: string, password?: string): void;\r\n    create(): XMLHttpRequest;\r\n    send(data?: any): void;\r\n    abort(): void;\r\n    getAllResponseHeaders(): string;\r\n    setRequestHeader(header: string, value: string): void;\r\n    getResponseHeader(header: string): string;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    LOADING: number;\r\n    DONE: number;\r\n    UNSENT: number;\r\n    OPENED: number;\r\n    HEADERS_RECEIVED: number;\r\n}\r\ndeclare var XMLHttpRequest: {\r\n    prototype: XMLHttpRequest;\r\n    new (): XMLHttpRequest;\r\n    LOADING: number;\r\n    DONE: number;\r\n    UNSENT: number;\r\n    OPENED: number;\r\n    HEADERS_RECEIVED: number;\r\n}\r\n\r\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object\'s information applies.\r\n      */\r\n    scope: string;\r\n}\r\ndeclare var HTMLTableHeaderCellElement: {\r\n    prototype: HTMLTableHeaderCellElement;\r\n    new (): HTMLTableHeaderCellElement;\r\n}\r\n\r\ninterface HTMLDListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction {\r\n}\r\ndeclare var HTMLDListElement: {\r\n    prototype: HTMLDListElement;\r\n    new (): HTMLDListElement;\r\n}\r\n\r\ninterface MSDataBindingExtensions {\r\n    dataSrc: string;\r\n    dataFormatAs: string;\r\n    dataFld: string;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoHorizontalRel: {\r\n    prototype: SVGPathSegLinetoHorizontalRel;\r\n    new (): SVGPathSegLinetoHorizontalRel;\r\n}\r\n\r\ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    ry: SVGAnimatedLength;\r\n    cx: SVGAnimatedLength;\r\n    rx: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n}\r\ndeclare var SVGEllipseElement: {\r\n    prototype: SVGEllipseElement;\r\n    new (): SVGEllipseElement;\r\n}\r\n\r\ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired, SVGURIReference {\r\n    target: SVGAnimatedString;\r\n}\r\ndeclare var SVGAElement: {\r\n    prototype: SVGAElement;\r\n    new (): SVGAElement;\r\n}\r\n\r\ninterface SVGStylable {\r\n    className: SVGAnimatedString;\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ninterface SVGTransformable extends SVGLocatable {\r\n    transform: SVGAnimatedTransformList;\r\n}\r\n\r\ninterface HTMLFrameSetElement extends HTMLElement {\r\n    ononline: (ev: Event) => any;\r\n    addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the frame heights of the object.\r\n      */\r\n    rows: string;\r\n    /**\r\n      * Sets or retrieves the frame widths of the object.\r\n      */\r\n    cols: string;\r\n    /**\r\n      * Fires when the object loses the input focus.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Fires when the object receives focus.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: "error", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    onresize: (ev: UIEvent) => any;\r\n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    name: string;\r\n    onafterprint: (ev: Event) => any;\r\n    addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onbeforeprint: (ev: Event) => any;\r\n    addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onoffline: (ev: Event) => any;\r\n    addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    border: string;\r\n    onunload: (ev: Event) => any;\r\n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onhashchange: (ev: Event) => any;\r\n    addEventListener(type: "hashchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLFrameSetElement: {\r\n    prototype: HTMLFrameSetElement;\r\n    new (): HTMLFrameSetElement;\r\n}\r\n\r\ninterface Screen {\r\n    width: number;\r\n    deviceXDPI: number;\r\n    fontSmoothingEnabled: boolean;\r\n    bufferDepth: number;\r\n    logicalXDPI: number;\r\n    systemXDPI: number;\r\n    availHeight: number;\r\n    height: number;\r\n    logicalYDPI: number;\r\n    systemYDPI: number;\r\n    updateInterval: number;\r\n    colorDepth: number;\r\n    availWidth: number;\r\n    deviceYDPI: number;\r\n    pixelDepth: number;\r\n}\r\ndeclare var Screen: {\r\n    prototype: Screen;\r\n    new (): Screen;\r\n}\r\n\r\ninterface Coordinates {\r\n    altitudeAccuracy: number;\r\n    longitude: number;\r\n    latitude: number;\r\n    speed: number;\r\n    heading: number;\r\n    altitude: number;\r\n    accuracy: number;\r\n}\r\ndeclare var Coordinates: {\r\n    prototype: Coordinates;\r\n    new (): Coordinates;\r\n}\r\n\r\ninterface NavigatorGeolocation {\r\n    geolocation: Geolocation;\r\n}\r\n\r\ninterface NavigatorContentUtils {\r\n}\r\n\r\ninterface EventListener {\r\n    (evt: Event): void;\r\n}\r\n\r\ninterface SVGLangSpace {\r\n    xmllang: string;\r\n    xmlspace: string;\r\n}\r\n\r\ninterface DataTransfer {\r\n    effectAllowed: string;\r\n    dropEffect: string;\r\n    clearData(format?: string): boolean;\r\n    setData(format: string, data: string): boolean;\r\n    getData(format: string): string;\r\n}\r\ndeclare var DataTransfer: {\r\n    prototype: DataTransfer;\r\n    new (): DataTransfer;\r\n}\r\n\r\ninterface FocusEvent extends UIEvent {\r\n    relatedTarget: EventTarget;\r\n    initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;\r\n}\r\ndeclare var FocusEvent: {\r\n    prototype: FocusEvent;\r\n    new (): FocusEvent;\r\n}\r\n\r\ninterface Range {\r\n    startOffset: number;\r\n    collapsed: boolean;\r\n    endOffset: number;\r\n    startContainer: Node;\r\n    endContainer: Node;\r\n    commonAncestorContainer: Node;\r\n    setStart(refNode: Node, offset: number): void;\r\n    setEndBefore(refNode: Node): void;\r\n    setStartBefore(refNode: Node): void;\r\n    selectNode(refNode: Node): void;\r\n    detach(): void;\r\n    getBoundingClientRect(): ClientRect;\r\n    toString(): string;\r\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\r\n    insertNode(newNode: Node): void;\r\n    collapse(toStart: boolean): void;\r\n    selectNodeContents(refNode: Node): void;\r\n    cloneContents(): DocumentFragment;\r\n    setEnd(refNode: Node, offset: number): void;\r\n    cloneRange(): Range;\r\n    getClientRects(): ClientRectList;\r\n    surroundContents(newParent: Node): void;\r\n    deleteContents(): void;\r\n    setStartAfter(refNode: Node): void;\r\n    extractContents(): DocumentFragment;\r\n    setEndAfter(refNode: Node): void;\r\n    END_TO_END: number;\r\n    START_TO_START: number;\r\n    START_TO_END: number;\r\n    END_TO_START: number;\r\n}\r\ndeclare var Range: {\r\n    prototype: Range;\r\n    new (): Range;\r\n    END_TO_END: number;\r\n    START_TO_START: number;\r\n    START_TO_END: number;\r\n    END_TO_START: number;\r\n}\r\n\r\ninterface SVGPoint {\r\n    y: number;\r\n    x: number;\r\n    matrixTransform(matrix: SVGMatrix): SVGPoint;\r\n}\r\ndeclare var SVGPoint: {\r\n    prototype: SVGPoint;\r\n    new (): SVGPoint;\r\n}\r\n\r\ninterface MSPluginsCollection {\r\n    length: number;\r\n    refresh(reload?: boolean): void;\r\n}\r\ndeclare var MSPluginsCollection: {\r\n    prototype: MSPluginsCollection;\r\n    new (): MSPluginsCollection;\r\n}\r\n\r\ninterface SVGAnimatedNumberList {\r\n    animVal: SVGNumberList;\r\n    baseVal: SVGNumberList;\r\n}\r\ndeclare var SVGAnimatedNumberList: {\r\n    prototype: SVGAnimatedNumberList;\r\n    new (): SVGAnimatedNumberList;\r\n}\r\n\r\ninterface SVGSVGElement extends SVGElement, SVGStylable, SVGZoomAndPan, DocumentEvent, SVGLangSpace, SVGLocatable, SVGTests, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    contentStyleType: string;\r\n    onzoom: (ev: any) => any;\r\n    addEventListener(type: "zoom", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    y: SVGAnimatedLength;\r\n    viewport: SVGRect;\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: "error", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    pixelUnitToMillimeterY: number;\r\n    onresize: (ev: UIEvent) => any;\r\n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    screenPixelToMillimeterY: number;\r\n    height: SVGAnimatedLength;\r\n    onabort: (ev: UIEvent) => any;\r\n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    contentScriptType: string;\r\n    pixelUnitToMillimeterX: number;\r\n    currentTranslate: SVGPoint;\r\n    onunload: (ev: Event) => any;\r\n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    currentScale: number;\r\n    onscroll: (ev: UIEvent) => any;\r\n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    screenPixelToMillimeterX: number;\r\n    setCurrentTime(seconds: number): void;\r\n    createSVGLength(): SVGLength;\r\n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList;\r\n    unpauseAnimations(): void;\r\n    createSVGRect(): SVGRect;\r\n    checkIntersection(element: SVGElement, rect: SVGRect): boolean;\r\n    unsuspendRedrawAll(): void;\r\n    pauseAnimations(): void;\r\n    suspendRedraw(maxWaitMilliseconds: number): number;\r\n    deselectAll(): void;\r\n    createSVGAngle(): SVGAngle;\r\n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList;\r\n    createSVGTransform(): SVGTransform;\r\n    unsuspendRedraw(suspendHandleID: number): void;\r\n    forceRedraw(): void;\r\n    getCurrentTime(): number;\r\n    checkEnclosure(element: SVGElement, rect: SVGRect): boolean;\r\n    createSVGMatrix(): SVGMatrix;\r\n    createSVGPoint(): SVGPoint;\r\n    createSVGNumber(): SVGNumber;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    getElementById(elementId: string): Element;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var SVGSVGElement: {\r\n    prototype: SVGSVGElement;\r\n    new (): SVGSVGElement;\r\n}\r\n\r\ninterface HTMLLabelElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the object to which the given label object is assigned.\r\n      */\r\n    htmlFor: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLLabelElement: {\r\n    prototype: HTMLLabelElement;\r\n    new (): HTMLLabelElement;\r\n}\r\n\r\ninterface MSResourceMetadata {\r\n    protocol: string;\r\n    fileSize: string;\r\n    fileUpdatedDate: string;\r\n    nameProp: string;\r\n    fileCreatedDate: string;\r\n    fileModifiedDate: string;\r\n    mimeType: string;\r\n}\r\n\r\ninterface HTMLLegendElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLLegendElement: {\r\n    prototype: HTMLLegendElement;\r\n    new (): HTMLLegendElement;\r\n}\r\n\r\ninterface HTMLDirectoryElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle {\r\n}\r\ndeclare var HTMLDirectoryElement: {\r\n    prototype: HTMLDirectoryElement;\r\n    new (): HTMLDirectoryElement;\r\n}\r\n\r\ninterface SVGAnimatedInteger {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\ndeclare var SVGAnimatedInteger: {\r\n    prototype: SVGAnimatedInteger;\r\n    new (): SVGAnimatedInteger;\r\n}\r\n\r\ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable {\r\n}\r\ndeclare var SVGTextElement: {\r\n    prototype: SVGTextElement;\r\n    new (): SVGTextElement;\r\n}\r\n\r\ninterface SVGTSpanElement extends SVGTextPositioningElement {\r\n}\r\ndeclare var SVGTSpanElement: {\r\n    prototype: SVGTSpanElement;\r\n    new (): SVGTSpanElement;\r\n}\r\n\r\ninterface HTMLLIElement extends HTMLElement, DOML2DeprecatedListNumberingAndBulletStyle {\r\n    /**\r\n      * Sets or retrieves the value of a list item.\r\n      */\r\n    value: number;\r\n}\r\ndeclare var HTMLLIElement: {\r\n    prototype: HTMLLIElement;\r\n    new (): HTMLLIElement;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {\r\n    y: number;\r\n}\r\ndeclare var SVGPathSegLinetoVerticalAbs: {\r\n    prototype: SVGPathSegLinetoVerticalAbs;\r\n    new (): SVGPathSegLinetoVerticalAbs;\r\n}\r\n\r\ninterface MSStorageExtensions {\r\n    remainingSpace: number;\r\n}\r\n\r\ninterface SVGStyleElement extends SVGElement, SVGLangSpace {\r\n    media: string;\r\n    type: string;\r\n    title: string;\r\n}\r\ndeclare var SVGStyleElement: {\r\n    prototype: SVGStyleElement;\r\n    new (): SVGStyleElement;\r\n}\r\n\r\ninterface MSCurrentStyleCSSProperties extends MSCSSProperties {\r\n    blockDirection: string;\r\n    clipBottom: string;\r\n    clipLeft: string;\r\n    clipRight: string;\r\n    clipTop: string;\r\n    hasLayout: string;\r\n}\r\ndeclare var MSCurrentStyleCSSProperties: {\r\n    prototype: MSCurrentStyleCSSProperties;\r\n    new (): MSCurrentStyleCSSProperties;\r\n}\r\n\r\ninterface MSHTMLCollectionExtensions {\r\n    urns(urn: any): Object;\r\n    tags(tagName: any): Object;\r\n}\r\n\r\ninterface Storage extends MSStorageExtensions {\r\n    length: number;\r\n    getItem(key: string): any;\r\n    [key: string]: any;\r\n    setItem(key: string, data: string): void;\r\n    clear(): void;\r\n    removeItem(key: string): void;\r\n    key(index: number): string;\r\n    [index: number]: any;\r\n}\r\ndeclare var Storage: {\r\n    prototype: Storage;\r\n    new (): Storage;\r\n}\r\n\r\ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the horizontal margin for the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\r\n      */\r\n    security: any;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Registers an event handler for the specified event type.\r\n      * @param type The type of event type to register.\r\n      * @param listener The event handler function to associate with the event.\r\n      * @param useCapture A Boolean value that specifies the event phase to add the event handler for. If true, register the event handler for the capturing phase. If false, Register the event handler for the bubbling phase. \r\n      */\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLIFrameElement: {\r\n    prototype: HTMLIFrameElement;\r\n    new (): HTMLIFrameElement;\r\n}\r\n\r\ninterface TextRangeCollection {\r\n    length: number;\r\n    item(index: number): TextRange;\r\n    [index: number]: TextRange;\r\n}\r\ndeclare var TextRangeCollection: {\r\n    prototype: TextRangeCollection;\r\n    new (): TextRangeCollection;\r\n}\r\n\r\ninterface HTMLBodyElement extends HTMLElement, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\r\n    scroll: string;\r\n    ononline: (ev: Event) => any;\r\n    addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onblur: (ev: FocusEvent) => any;\r\n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    noWrap: boolean;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    text: any;\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: "error", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    bgProperties: string;\r\n    onresize: (ev: UIEvent) => any;\r\n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    link: any;\r\n    aLink: any;\r\n    bottomMargin: any;\r\n    topMargin: any;\r\n    onafterprint: (ev: Event) => any;\r\n    addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    vLink: any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onoffline: (ev: Event) => any;\r\n    addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onunload: (ev: Event) => any;\r\n    addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onhashchange: (ev: Event) => any;\r\n    addEventListener(type: "hashchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    rightMargin: any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    leftMargin: any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    createTextRange(): TextRange;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLBodyElement: {\r\n    prototype: HTMLBodyElement;\r\n    new (): HTMLBodyElement;\r\n}\r\n\r\ninterface DocumentType extends Node {\r\n    name: string;\r\n    notations: NamedNodeMap;\r\n    systemId: string;\r\n    internalSubset: string;\r\n    entities: NamedNodeMap;\r\n    publicId: string;\r\n}\r\ndeclare var DocumentType: {\r\n    prototype: DocumentType;\r\n    new (): DocumentType;\r\n}\r\n\r\ninterface SVGRadialGradientElement extends SVGGradientElement {\r\n    cx: SVGAnimatedLength;\r\n    r: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n    fx: SVGAnimatedLength;\r\n    fy: SVGAnimatedLength;\r\n}\r\ndeclare var SVGRadialGradientElement: {\r\n    prototype: SVGRadialGradientElement;\r\n    new (): SVGRadialGradientElement;\r\n}\r\n\r\ninterface MutationEvent extends Event {\r\n    newValue: string;\r\n    attrChange: number;\r\n    attrName: string;\r\n    prevValue: string;\r\n    relatedNode: Node;\r\n    initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\r\n    MODIFICATION: number;\r\n    REMOVAL: number;\r\n    ADDITION: number;\r\n}\r\ndeclare var MutationEvent: {\r\n    prototype: MutationEvent;\r\n    new (): MutationEvent;\r\n    MODIFICATION: number;\r\n    REMOVAL: number;\r\n    ADDITION: number;\r\n}\r\n\r\ninterface DragEvent extends MouseEvent {\r\n    dataTransfer: DataTransfer;\r\n    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\r\n}\r\ndeclare var DragEvent: {\r\n    prototype: DragEvent;\r\n    new (): DragEvent;\r\n}\r\n\r\ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollection;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Moves a table row to a new position.\r\n      * @param indexFrom Number that specifies the index in the rows collection of the table row that is moved.\r\n      * @param indexTo Number that specifies where the row is moved within the rows collection.\r\n      */\r\n    moveRow(indexFrom?: number, indexTo?: number): Object;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLElement;\r\n}\r\ndeclare var HTMLTableSectionElement: {\r\n    prototype: HTMLTableSectionElement;\r\n    new (): HTMLTableSectionElement;\r\n}\r\n\r\ninterface DOML2DeprecatedListNumberingAndBulletStyle {\r\n    type: string;\r\n}\r\n\r\ninterface HTMLInputElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    status: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    indeterminate: boolean;\r\n    readOnly: boolean;\r\n    size: number;\r\n    loop: number;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Sets or retrieves the URL of the virtual reality modeling language (VRML) world to be displayed in the window.\r\n      */\r\n    vrml: string;\r\n    /**\r\n      * Sets or retrieves a lower resolution image to display.\r\n      */\r\n    lowsrc: string;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves a comma-separated list of content types.\r\n      */\r\n    accept: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    defaultChecked: boolean;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Returns the value of the data at the cursor\'s current position.\r\n      */\r\n    value: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    dynsrc: string;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    checked: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    complete: boolean;\r\n    start: string;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n    /**\r\n      * Makes the selection equal to the current object.\r\n      */\r\n    select(): void;\r\n}\r\ndeclare var HTMLInputElement: {\r\n    prototype: HTMLInputElement;\r\n    new (): HTMLInputElement;\r\n}\r\n\r\ninterface HTMLAnchorElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Contains the protocol of the URL.\r\n      */\r\n    protocol: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    /**\r\n      * Contains the hostname of a URL.\r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Contains the pathname of the URL.\r\n      */\r\n    pathname: string;\r\n    Methods: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    protocolLong: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Contains the hostname and port values of the URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Contains the anchor portion of the URL including the hash sign (#).\r\n      */\r\n    hash: string;\r\n    nameProp: string;\r\n    urn: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    type: string;\r\n    mimeType: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\ndeclare var HTMLAnchorElement: {\r\n    prototype: HTMLAnchorElement;\r\n    new (): HTMLAnchorElement;\r\n}\r\n\r\ninterface HTMLParamElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the value of an input parameter for an element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the name of an input parameter for an element.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the content type of the resource designated by the value attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the data type of the value attribute.\r\n      */\r\n    valueType: string;\r\n}\r\ndeclare var HTMLParamElement: {\r\n    prototype: HTMLParamElement;\r\n    new (): HTMLParamElement;\r\n}\r\n\r\ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired, SVGURIReference {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGImageElement: {\r\n    prototype: SVGImageElement;\r\n    new (): SVGImageElement;\r\n}\r\n\r\ninterface SVGAnimatedNumber {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\ndeclare var SVGAnimatedNumber: {\r\n    prototype: SVGAnimatedNumber;\r\n    new (): SVGAnimatedNumber;\r\n}\r\n\r\ninterface PerformanceTiming {\r\n    redirectStart: number;\r\n    domainLookupEnd: number;\r\n    responseStart: number;\r\n    domComplete: number;\r\n    domainLookupStart: number;\r\n    loadEventStart: number;\r\n    msFirstPaint: number;\r\n    unloadEventEnd: number;\r\n    fetchStart: number;\r\n    requestStart: number;\r\n    domInteractive: number;\r\n    navigationStart: number;\r\n    connectEnd: number;\r\n    loadEventEnd: number;\r\n    connectStart: number;\r\n    responseEnd: number;\r\n    domLoading: number;\r\n    redirectEnd: number;\r\n    unloadEventStart: number;\r\n    domContentLoadedEventStart: number;\r\n    domContentLoadedEventEnd: number;\r\n    toJSON(): any;\r\n}\r\ndeclare var PerformanceTiming: {\r\n    prototype: PerformanceTiming;\r\n    new (): PerformanceTiming;\r\n}\r\n\r\ninterface HTMLPreElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or gets a value that you can use to implement your own width functionality for the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Indicates a citation by rendering text in italic type.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLPreElement: {\r\n    prototype: HTMLPreElement;\r\n    new (): HTMLPreElement;\r\n}\r\n\r\ninterface EventException {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    DISPATCH_REQUEST_ERR: number;\r\n    UNSPECIFIED_EVENT_TYPE_ERR: number;\r\n}\r\ndeclare var EventException: {\r\n    prototype: EventException;\r\n    new (): EventException;\r\n    DISPATCH_REQUEST_ERR: number;\r\n    UNSPECIFIED_EVENT_TYPE_ERR: number;\r\n}\r\n\r\ninterface MSNavigatorDoNotTrack {\r\n    msDoNotTrack: string;\r\n}\r\n\r\ninterface NavigatorOnLine {\r\n    onLine: boolean;\r\n}\r\n\r\ninterface WindowLocalStorage {\r\n    localStorage: Storage;\r\n}\r\n\r\ninterface SVGMetadataElement extends SVGElement {\r\n}\r\ndeclare var SVGMetadataElement: {\r\n    prototype: SVGMetadataElement;\r\n    new (): SVGMetadataElement;\r\n}\r\n\r\ninterface SVGPathSegArcRel extends SVGPathSeg {\r\n    y: number;\r\n    sweepFlag: boolean;\r\n    r2: number;\r\n    x: number;\r\n    angle: number;\r\n    r1: number;\r\n    largeArcFlag: boolean;\r\n}\r\ndeclare var SVGPathSegArcRel: {\r\n    prototype: SVGPathSegArcRel;\r\n    new (): SVGPathSegArcRel;\r\n}\r\n\r\ninterface SVGPathSegMovetoAbs extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegMovetoAbs: {\r\n    prototype: SVGPathSegMovetoAbs;\r\n    new (): SVGPathSegMovetoAbs;\r\n}\r\n\r\ninterface SVGStringList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: string, index: number): string;\r\n    getItem(index: number): string;\r\n    clear(): void;\r\n    appendItem(newItem: string): string;\r\n    initialize(newItem: string): string;\r\n    removeItem(index: number): string;\r\n    insertItemBefore(newItem: string, index: number): string;\r\n}\r\ndeclare var SVGStringList: {\r\n    prototype: SVGStringList;\r\n    new (): SVGStringList;\r\n}\r\n\r\ninterface XDomainRequest {\r\n    timeout: number;\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: "error", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onprogress: (ev: any) => any;\r\n    addEventListener(type: "progress", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    ontimeout: (ev: Event) => any;\r\n    addEventListener(type: "timeout", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    responseText: string;\r\n    contentType: string;\r\n    open(method: string, url: string): void;\r\n    create(): XDomainRequest;\r\n    abort(): void;\r\n    send(data?: any): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var XDomainRequest: {\r\n    prototype: XDomainRequest;\r\n    new (): XDomainRequest;\r\n}\r\n\r\ninterface DOML2DeprecatedBackgroundColorStyle {\r\n    bgColor: any;\r\n}\r\n\r\ninterface ElementTraversal {\r\n    childElementCount: number;\r\n    previousElementSibling: Element;\r\n    lastElementChild: Element;\r\n    nextElementSibling: Element;\r\n    firstElementChild: Element;\r\n}\r\n\r\ninterface SVGLength {\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    value: number;\r\n    unitType: number;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    SVG_LENGTHTYPE_NUMBER: number;\r\n    SVG_LENGTHTYPE_CM: number;\r\n    SVG_LENGTHTYPE_PC: number;\r\n    SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    SVG_LENGTHTYPE_MM: number;\r\n    SVG_LENGTHTYPE_PT: number;\r\n    SVG_LENGTHTYPE_IN: number;\r\n    SVG_LENGTHTYPE_EMS: number;\r\n    SVG_LENGTHTYPE_PX: number;\r\n    SVG_LENGTHTYPE_UNKNOWN: number;\r\n    SVG_LENGTHTYPE_EXS: number;\r\n}\r\ndeclare var SVGLength: {\r\n    prototype: SVGLength;\r\n    new (): SVGLength;\r\n    SVG_LENGTHTYPE_NUMBER: number;\r\n    SVG_LENGTHTYPE_CM: number;\r\n    SVG_LENGTHTYPE_PC: number;\r\n    SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    SVG_LENGTHTYPE_MM: number;\r\n    SVG_LENGTHTYPE_PT: number;\r\n    SVG_LENGTHTYPE_IN: number;\r\n    SVG_LENGTHTYPE_EMS: number;\r\n    SVG_LENGTHTYPE_PX: number;\r\n    SVG_LENGTHTYPE_UNKNOWN: number;\r\n    SVG_LENGTHTYPE_EXS: number;\r\n}\r\n\r\ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGAnimatedPoints, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGPolygonElement: {\r\n    prototype: SVGPolygonElement;\r\n    new (): SVGPolygonElement;\r\n}\r\n\r\ninterface HTMLPhraseElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLPhraseElement: {\r\n    prototype: HTMLPhraseElement;\r\n    new (): HTMLPhraseElement;\r\n}\r\n\r\ninterface NavigatorStorageUtils {\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x2: number;\r\n    x: number;\r\n    x1: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicRel: {\r\n    prototype: SVGPathSegCurvetoCubicRel;\r\n    new (): SVGPathSegCurvetoCubicRel;\r\n}\r\n\r\ninterface MSEventObj extends Event {\r\n    nextPage: string;\r\n    keyCode: number;\r\n    toElement: Element;\r\n    returnValue: any;\r\n    dataFld: string;\r\n    y: number;\r\n    dataTransfer: DataTransfer;\r\n    propertyName: string;\r\n    url: string;\r\n    offsetX: number;\r\n    recordset: Object;\r\n    screenX: number;\r\n    buttonID: number;\r\n    wheelDelta: number;\r\n    reason: number;\r\n    origin: string;\r\n    data: string;\r\n    srcFilter: Object;\r\n    boundElements: HTMLCollection;\r\n    cancelBubble: boolean;\r\n    altLeft: boolean;\r\n    behaviorCookie: number;\r\n    bookmarks: BookmarkCollection;\r\n    type: string;\r\n    repeat: boolean;\r\n    srcElement: Element;\r\n    source: Window;\r\n    fromElement: Element;\r\n    offsetY: number;\r\n    x: number;\r\n    behaviorPart: number;\r\n    qualifier: string;\r\n    altKey: boolean;\r\n    ctrlKey: boolean;\r\n    clientY: number;\r\n    shiftKey: boolean;\r\n    shiftLeft: boolean;\r\n    contentOverflow: boolean;\r\n    screenY: number;\r\n    ctrlLeft: boolean;\r\n    button: number;\r\n    srcUrn: string;\r\n    clientX: number;\r\n    actionURL: string;\r\n    getAttribute(strAttributeName: string, lFlags?: number): any;\r\n    setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;\r\n    removeAttribute(strAttributeName: string, lFlags?: number): boolean;\r\n}\r\ndeclare var MSEventObj: {\r\n    prototype: MSEventObj;\r\n    new (): MSEventObj;\r\n}\r\n\r\ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    textLength: SVGAnimatedLength;\r\n    lengthAdjust: SVGAnimatedEnumeration;\r\n    getCharNumAtPosition(point: SVGPoint): number;\r\n    getStartPositionOfChar(charnum: number): SVGPoint;\r\n    getExtentOfChar(charnum: number): SVGRect;\r\n    getComputedTextLength(): number;\r\n    getSubStringLength(charnum: number, nchars: number): number;\r\n    selectSubString(charnum: number, nchars: number): void;\r\n    getNumberOfChars(): number;\r\n    getRotationOfChar(charnum: number): number;\r\n    getEndPositionOfChar(charnum: number): SVGPoint;\r\n    LENGTHADJUST_SPACING: number;\r\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    LENGTHADJUST_UNKNOWN: number;\r\n}\r\ndeclare var SVGTextContentElement: {\r\n    prototype: SVGTextContentElement;\r\n    new (): SVGTextContentElement;\r\n    LENGTHADJUST_SPACING: number;\r\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    LENGTHADJUST_UNKNOWN: number;\r\n}\r\n\r\ninterface DOML2DeprecatedColorProperty {\r\n    color: string;\r\n}\r\n\r\ninterface HTMLCanvasElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the width of a canvas element on a document.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Gets or sets the height of a canvas element on a document.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\r\n      * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\r\n      */\r\n    toDataURL(type?: string, ...args: any[]): string;\r\n    /**\r\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\r\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");\r\n      */\r\n    getContext(contextId: "2d"): CanvasRenderingContext2D;\r\n    getContext(contextId: string, ...args: any[]): any;\r\n}\r\ndeclare var HTMLCanvasElement: {\r\n    prototype: HTMLCanvasElement;\r\n    new (): HTMLCanvasElement;\r\n}\r\n\r\ninterface Location {\r\n    hash: string;\r\n    protocol: string;\r\n    search: string;\r\n    href: string;\r\n    hostname: string;\r\n    port: string;\r\n    pathname: string;\r\n    host: string;\r\n    reload(flag?: boolean): void;\r\n    replace(url: string): void;\r\n    assign(url: string): void;\r\n    toString(): string;\r\n}\r\ndeclare var Location: {\r\n    prototype: Location;\r\n    new (): Location;\r\n}\r\n\r\ninterface HTMLTitleElement extends HTMLElement {\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n}\r\ndeclare var HTMLTitleElement: {\r\n    prototype: HTMLTitleElement;\r\n    new (): HTMLTitleElement;\r\n}\r\n\r\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Retrieves the CSS language in which the style sheet is written.\r\n      */\r\n    type: string;\r\n}\r\ndeclare var HTMLStyleElement: {\r\n    prototype: HTMLStyleElement;\r\n    new (): HTMLStyleElement;\r\n}\r\n\r\ninterface PerformanceEntry {\r\n    name: string;\r\n    startTime: number;\r\n    duration: number;\r\n    entryType: string;\r\n}\r\ndeclare var PerformanceEntry: {\r\n    prototype: PerformanceEntry;\r\n    new (): PerformanceEntry;\r\n}\r\n\r\ninterface SVGTransform {\r\n    type: number;\r\n    angle: number;\r\n    matrix: SVGMatrix;\r\n    setTranslate(tx: number, ty: number): void;\r\n    setScale(sx: number, sy: number): void;\r\n    setMatrix(matrix: SVGMatrix): void;\r\n    setSkewY(angle: number): void;\r\n    setRotate(angle: number, cx: number, cy: number): void;\r\n    setSkewX(angle: number): void;\r\n    SVG_TRANSFORM_SKEWX: number;\r\n    SVG_TRANSFORM_UNKNOWN: number;\r\n    SVG_TRANSFORM_SCALE: number;\r\n    SVG_TRANSFORM_TRANSLATE: number;\r\n    SVG_TRANSFORM_MATRIX: number;\r\n    SVG_TRANSFORM_ROTATE: number;\r\n    SVG_TRANSFORM_SKEWY: number;\r\n}\r\ndeclare var SVGTransform: {\r\n    prototype: SVGTransform;\r\n    new (): SVGTransform;\r\n    SVG_TRANSFORM_SKEWX: number;\r\n    SVG_TRANSFORM_UNKNOWN: number;\r\n    SVG_TRANSFORM_SCALE: number;\r\n    SVG_TRANSFORM_TRANSLATE: number;\r\n    SVG_TRANSFORM_MATRIX: number;\r\n    SVG_TRANSFORM_ROTATE: number;\r\n    SVG_TRANSFORM_SKEWY: number;\r\n}\r\n\r\ninterface UIEvent extends Event {\r\n    detail: number;\r\n    view: Window;\r\n    initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;\r\n}\r\ndeclare var UIEvent: {\r\n    prototype: UIEvent;\r\n    new (): UIEvent;\r\n}\r\n\r\ninterface SVGURIReference {\r\n    href: SVGAnimatedString;\r\n}\r\n\r\ninterface SVGPathSeg {\r\n    pathSegType: number;\r\n    pathSegTypeAsLetter: string;\r\n    PATHSEG_MOVETO_REL: number;\r\n    PATHSEG_LINETO_VERTICAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    PATHSEG_LINETO_ABS: number;\r\n    PATHSEG_CLOSEPATH: number;\r\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    PATHSEG_LINETO_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    PATHSEG_ARC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_REL: number;\r\n    PATHSEG_UNKNOWN: number;\r\n    PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    PATHSEG_ARC_ABS: number;\r\n    PATHSEG_MOVETO_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n}\r\ndeclare var SVGPathSeg: {\r\n    prototype: SVGPathSeg;\r\n    new (): SVGPathSeg;\r\n    PATHSEG_MOVETO_REL: number;\r\n    PATHSEG_LINETO_VERTICAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    PATHSEG_LINETO_ABS: number;\r\n    PATHSEG_CLOSEPATH: number;\r\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    PATHSEG_LINETO_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    PATHSEG_ARC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_REL: number;\r\n    PATHSEG_UNKNOWN: number;\r\n    PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    PATHSEG_ARC_ABS: number;\r\n    PATHSEG_MOVETO_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n}\r\n\r\ninterface WheelEvent extends MouseEvent {\r\n    deltaZ: number;\r\n    deltaX: number;\r\n    deltaMode: number;\r\n    deltaY: number;\r\n    initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\r\n    DOM_DELTA_PIXEL: number;\r\n    DOM_DELTA_LINE: number;\r\n    DOM_DELTA_PAGE: number;\r\n}\r\ndeclare var WheelEvent: {\r\n    prototype: WheelEvent;\r\n    new (): WheelEvent;\r\n    DOM_DELTA_PIXEL: number;\r\n    DOM_DELTA_LINE: number;\r\n    DOM_DELTA_PAGE: number;\r\n}\r\n\r\ninterface MSEventAttachmentTarget {\r\n    attachEvent(event: string, listener: EventListener): boolean;\r\n    detachEvent(event: string, listener: EventListener): void;\r\n}\r\n\r\ninterface SVGNumber {\r\n    value: number;\r\n}\r\ndeclare var SVGNumber: {\r\n    prototype: SVGNumber;\r\n    new (): SVGNumber;\r\n}\r\n\r\ninterface SVGPathElement extends SVGElement, SVGStylable, SVGAnimatedPathData, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    getPathSegAtLength(distance: number): number;\r\n    getPointAtLength(distance: number): SVGPoint;\r\n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;\r\n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;\r\n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;\r\n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;\r\n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;\r\n    createSVGPathSegClosePath(): SVGPathSegClosePath;\r\n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;\r\n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;\r\n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;\r\n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;\r\n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;\r\n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;\r\n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel;\r\n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;\r\n    getTotalLength(): number;\r\n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;\r\n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;\r\n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;\r\n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs;\r\n}\r\ndeclare var SVGPathElement: {\r\n    prototype: SVGPathElement;\r\n    new (): SVGPathElement;\r\n}\r\n\r\ninterface MSCompatibleInfo {\r\n    version: string;\r\n    userAgent: string;\r\n}\r\ndeclare var MSCompatibleInfo: {\r\n    prototype: MSCompatibleInfo;\r\n    new (): MSCompatibleInfo;\r\n}\r\n\r\ninterface Text extends CharacterData, MSNodeExtensions {\r\n    wholeText: string;\r\n    splitText(offset: number): Text;\r\n    replaceWholeText(content: string): Text;\r\n}\r\ndeclare var Text: {\r\n    prototype: Text;\r\n    new (): Text;\r\n}\r\n\r\ninterface SVGAnimatedRect {\r\n    animVal: SVGRect;\r\n    baseVal: SVGRect;\r\n}\r\ndeclare var SVGAnimatedRect: {\r\n    prototype: SVGAnimatedRect;\r\n    new (): SVGAnimatedRect;\r\n}\r\n\r\ninterface CSSNamespaceRule extends CSSRule {\r\n    namespaceURI: string;\r\n    prefix: string;\r\n}\r\ndeclare var CSSNamespaceRule: {\r\n    prototype: CSSNamespaceRule;\r\n    new (): CSSNamespaceRule;\r\n}\r\n\r\ninterface SVGPathSegList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n    getItem(index: number): SVGPathSeg;\r\n    clear(): void;\r\n    appendItem(newItem: SVGPathSeg): SVGPathSeg;\r\n    initialize(newItem: SVGPathSeg): SVGPathSeg;\r\n    removeItem(index: number): SVGPathSeg;\r\n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n}\r\ndeclare var SVGPathSegList: {\r\n    prototype: SVGPathSegList;\r\n    new (): SVGPathSegList;\r\n}\r\n\r\ninterface HTMLUnknownElement extends HTMLElement, MSDataBindingRecordSetReadonlyExtensions {\r\n}\r\ndeclare var HTMLUnknownElement: {\r\n    prototype: HTMLUnknownElement;\r\n    new (): HTMLUnknownElement;\r\n}\r\n\r\ninterface HTMLAudioElement extends HTMLMediaElement {\r\n}\r\ndeclare var HTMLAudioElement: {\r\n    prototype: HTMLAudioElement;\r\n    new (): HTMLAudioElement;\r\n}\r\n\r\ninterface MSImageResourceExtensions {\r\n    dynsrc: string;\r\n    vrml: string;\r\n    lowsrc: string;\r\n    start: string;\r\n    loop: number;\r\n}\r\n\r\ninterface PositionError {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    POSITION_UNAVAILABLE: number;\r\n    PERMISSION_DENIED: number;\r\n    TIMEOUT: number;\r\n}\r\ndeclare var PositionError: {\r\n    prototype: PositionError;\r\n    new (): PositionError;\r\n    POSITION_UNAVAILABLE: number;\r\n    PERMISSION_DENIED: number;\r\n    TIMEOUT: number;\r\n}\r\n\r\ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves a list of header cells that provide information for the object.\r\n      */\r\n    headers: string;\r\n    /**\r\n      * Retrieves the position of the object in the cells collection of a row.\r\n      */\r\n    cellIndex: number;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorLight: any;\r\n    /**\r\n      * Sets or retrieves the number columns in the table that the object should span.\r\n      */\r\n    colSpan: number;\r\n    /**\r\n      * Sets or retrieves the border color of the object. \r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\r\n      */\r\n    axis: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n    /**\r\n      * Sets or retrieves abbreviated text for the object.\r\n      */\r\n    abbr: string;\r\n    /**\r\n      * Sets or retrieves how many rows in a table the cell should span.\r\n      */\r\n    rowSpan: number;\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object\'s information applies.\r\n      */\r\n    scope: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorDark: any;\r\n}\r\ndeclare var HTMLTableCellElement: {\r\n    prototype: HTMLTableCellElement;\r\n    new (): HTMLTableCellElement;\r\n}\r\n\r\ninterface SVGElementInstance extends EventTarget {\r\n    previousSibling: SVGElementInstance;\r\n    parentNode: SVGElementInstance;\r\n    lastChild: SVGElementInstance;\r\n    nextSibling: SVGElementInstance;\r\n    childNodes: SVGElementInstanceList;\r\n    correspondingUseElement: SVGUseElement;\r\n    correspondingElement: SVGElement;\r\n    firstChild: SVGElementInstance;\r\n}\r\ndeclare var SVGElementInstance: {\r\n    prototype: SVGElementInstance;\r\n    new (): SVGElementInstance;\r\n}\r\n\r\ninterface MSNamespaceInfoCollection {\r\n    length: number;\r\n    add(namespace?: string, urn?: string, implementationUrl?: any): Object;\r\n    item(index: any): Object;\r\n    [index: string]: Object;\r\n}\r\ndeclare var MSNamespaceInfoCollection: {\r\n    prototype: MSNamespaceInfoCollection;\r\n    new (): MSNamespaceInfoCollection;\r\n}\r\n\r\ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    cx: SVGAnimatedLength;\r\n    r: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n}\r\ndeclare var SVGCircleElement: {\r\n    prototype: SVGCircleElement;\r\n    new (): SVGCircleElement;\r\n}\r\n\r\ninterface StyleSheetList {\r\n    length: number;\r\n    item(index?: number): StyleSheet;\r\n    [index: number]: StyleSheet;\r\n}\r\ndeclare var StyleSheetList: {\r\n    prototype: StyleSheetList;\r\n    new (): StyleSheetList;\r\n}\r\n\r\ninterface CSSImportRule extends CSSRule {\r\n    styleSheet: CSSStyleSheet;\r\n    href: string;\r\n    media: MediaList;\r\n}\r\ndeclare var CSSImportRule: {\r\n    prototype: CSSImportRule;\r\n    new (): CSSImportRule;\r\n}\r\n\r\ninterface CustomEvent extends Event {\r\n    detail: any;\r\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void;\r\n}\r\ndeclare var CustomEvent: {\r\n    prototype: CustomEvent;\r\n    new (): CustomEvent;\r\n}\r\n\r\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n    /**\r\n      * Sets or retrieves the font size of the object.\r\n      */\r\n    size: number;\r\n}\r\ndeclare var HTMLBaseFontElement: {\r\n    prototype: HTMLBaseFontElement;\r\n    new (): HTMLBaseFontElement;\r\n}\r\n\r\ninterface HTMLTextAreaElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Retrieves or sets the text in the entry field of the textArea element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the value indicating whether the control is selected.\r\n      */\r\n    status: any;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves the value indicated whether the content of the object is read-only.\r\n      */\r\n    readOnly: boolean;\r\n    /**\r\n      * Sets or retrieves how to handle wordwrapping in the object.\r\n      */\r\n    wrap: string;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Retrieves the type of control.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n    /**\r\n      * Highlights the input area of a form element.\r\n      */\r\n    select(): void;\r\n}\r\ndeclare var HTMLTextAreaElement: {\r\n    prototype: HTMLTextAreaElement;\r\n    new (): HTMLTextAreaElement;\r\n}\r\n\r\ninterface Geolocation {\r\n    clearWatch(watchId: number): void;\r\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\r\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\r\n}\r\ndeclare var Geolocation: {\r\n    prototype: Geolocation;\r\n    new (): Geolocation;\r\n}\r\n\r\ninterface DOML2DeprecatedMarginStyle {\r\n    vspace: number;\r\n    hspace: number;\r\n}\r\n\r\ninterface MSWindowModeless {\r\n    dialogTop: any;\r\n    dialogLeft: any;\r\n    dialogWidth: any;\r\n    dialogHeight: any;\r\n    menuArguments: any;\r\n}\r\n\r\ninterface DOML2DeprecatedAlignmentStyle {\r\n    align: string;\r\n}\r\n\r\ninterface HTMLMarqueeElement extends HTMLElement, MSDataBindingExtensions, DOML2DeprecatedBackgroundColorStyle {\r\n    width: string;\r\n    onbounce: (ev: Event) => any;\r\n    addEventListener(type: "bounce", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    vspace: number;\r\n    trueSpeed: boolean;\r\n    scrollAmount: number;\r\n    scrollDelay: number;\r\n    behavior: string;\r\n    height: string;\r\n    loop: number;\r\n    direction: string;\r\n    hspace: number;\r\n    onstart: (ev: Event) => any;\r\n    addEventListener(type: "start", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onfinish: (ev: Event) => any;\r\n    addEventListener(type: "finish", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    stop(): void;\r\n    start(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLMarqueeElement: {\r\n    prototype: HTMLMarqueeElement;\r\n    new (): HTMLMarqueeElement;\r\n}\r\n\r\ninterface SVGRect {\r\n    y: number;\r\n    width: number;\r\n    x: number;\r\n    height: number;\r\n}\r\ndeclare var SVGRect: {\r\n    prototype: SVGRect;\r\n    new (): SVGRect;\r\n}\r\n\r\ninterface MSNodeExtensions {\r\n    swapNode(otherNode: Node): Node;\r\n    removeNode(deep?: boolean): Node;\r\n    replaceNode(replacement: Node): Node;\r\n}\r\n\r\ninterface History {\r\n    length: number;\r\n    back(distance?: any): void;\r\n    forward(distance?: any): void;\r\n    go(delta?: any): void;\r\n}\r\ndeclare var History: {\r\n    prototype: History;\r\n    new (): History;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x2: number;\r\n    x: number;\r\n    x1: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicAbs: {\r\n    prototype: SVGPathSegCurvetoCubicAbs;\r\n    new (): SVGPathSegCurvetoCubicAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x: number;\r\n    x1: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticAbs;\r\n    new (): SVGPathSegCurvetoQuadraticAbs;\r\n}\r\n\r\ninterface TimeRanges {\r\n    length: number;\r\n    start(index: number): number;\r\n    end(index: number): number;\r\n}\r\ndeclare var TimeRanges: {\r\n    prototype: TimeRanges;\r\n    new (): TimeRanges;\r\n}\r\n\r\ninterface CSSRule {\r\n    cssText: string;\r\n    parentStyleSheet: CSSStyleSheet;\r\n    parentRule: CSSRule;\r\n    type: number;\r\n    IMPORT_RULE: number;\r\n    MEDIA_RULE: number;\r\n    STYLE_RULE: number;\r\n    NAMESPACE_RULE: number;\r\n    PAGE_RULE: number;\r\n    UNKNOWN_RULE: number;\r\n    FONT_FACE_RULE: number;\r\n    CHARSET_RULE: number;\r\n}\r\ndeclare var CSSRule: {\r\n    prototype: CSSRule;\r\n    new (): CSSRule;\r\n    IMPORT_RULE: number;\r\n    MEDIA_RULE: number;\r\n    STYLE_RULE: number;\r\n    NAMESPACE_RULE: number;\r\n    PAGE_RULE: number;\r\n    UNKNOWN_RULE: number;\r\n    FONT_FACE_RULE: number;\r\n    CHARSET_RULE: number;\r\n}\r\n\r\ninterface SVGPathSegLinetoAbs extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoAbs: {\r\n    prototype: SVGPathSegLinetoAbs;\r\n    new (): SVGPathSegLinetoAbs;\r\n}\r\n\r\ninterface HTMLModElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLModElement: {\r\n    prototype: HTMLModElement;\r\n    new (): HTMLModElement;\r\n}\r\n\r\ninterface SVGMatrix {\r\n    e: number;\r\n    c: number;\r\n    a: number;\r\n    b: number;\r\n    d: number;\r\n    f: number;\r\n    multiply(secondMatrix: SVGMatrix): SVGMatrix;\r\n    flipY(): SVGMatrix;\r\n    skewY(angle: number): SVGMatrix;\r\n    inverse(): SVGMatrix;\r\n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;\r\n    rotate(angle: number): SVGMatrix;\r\n    flipX(): SVGMatrix;\r\n    translate(x: number, y: number): SVGMatrix;\r\n    scale(scaleFactor: number): SVGMatrix;\r\n    rotateFromVector(x: number, y: number): SVGMatrix;\r\n    skewX(angle: number): SVGMatrix;\r\n}\r\ndeclare var SVGMatrix: {\r\n    prototype: SVGMatrix;\r\n    new (): SVGMatrix;\r\n}\r\n\r\ninterface MSPopupWindow {\r\n    document: Document;\r\n    isOpen: boolean;\r\n    show(x: number, y: number, w: number, h: number, element?: any): void;\r\n    hide(): void;\r\n}\r\ndeclare var MSPopupWindow: {\r\n    prototype: MSPopupWindow;\r\n    new (): MSPopupWindow;\r\n}\r\n\r\ninterface BeforeUnloadEvent extends Event {\r\n    returnValue: string;\r\n}\r\ndeclare var BeforeUnloadEvent: {\r\n    prototype: BeforeUnloadEvent;\r\n    new (): BeforeUnloadEvent;\r\n}\r\n\r\ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired, SVGURIReference {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    animatedInstanceRoot: SVGElementInstance;\r\n    instanceRoot: SVGElementInstance;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGUseElement: {\r\n    prototype: SVGUseElement;\r\n    new (): SVGUseElement;\r\n}\r\n\r\ninterface Event {\r\n    timeStamp: number;\r\n    defaultPrevented: boolean;\r\n    isTrusted: boolean;\r\n    currentTarget: EventTarget;\r\n    cancelBubble: boolean;\r\n    target: EventTarget;\r\n    eventPhase: number;\r\n    cancelable: boolean;\r\n    type: string;\r\n    srcElement: Element;\r\n    bubbles: boolean;\r\n    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void;\r\n    stopPropagation(): void;\r\n    stopImmediatePropagation(): void;\r\n    preventDefault(): void;\r\n    CAPTURING_PHASE: number;\r\n    AT_TARGET: number;\r\n    BUBBLING_PHASE: number;\r\n}\r\ndeclare var Event: {\r\n    prototype: Event;\r\n    new (): Event;\r\n    CAPTURING_PHASE: number;\r\n    AT_TARGET: number;\r\n    BUBBLING_PHASE: number;\r\n}\r\n\r\ninterface ImageData {\r\n    width: number;\r\n    data: Uint8Array;\r\n    height: number;\r\n}\r\ndeclare var ImageData: {\r\n    prototype: ImageData;\r\n    new (): ImageData;\r\n}\r\n\r\ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: any;\r\n    /**\r\n      * Sets or retrieves the alignment of the object relative to the display or table.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the group.\r\n      */\r\n    span: number;\r\n}\r\ndeclare var HTMLTableColElement: {\r\n    prototype: HTMLTableColElement;\r\n    new (): HTMLTableColElement;\r\n}\r\n\r\ninterface SVGException {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    SVG_MATRIX_NOT_INVERTABLE: number;\r\n    SVG_WRONG_TYPE_ERR: number;\r\n    SVG_INVALID_VALUE_ERR: number;\r\n}\r\ndeclare var SVGException: {\r\n    prototype: SVGException;\r\n    new (): SVGException;\r\n    SVG_MATRIX_NOT_INVERTABLE: number;\r\n    SVG_WRONG_TYPE_ERR: number;\r\n    SVG_INVALID_VALUE_ERR: number;\r\n}\r\n\r\ninterface SVGLinearGradientElement extends SVGGradientElement {\r\n    y1: SVGAnimatedLength;\r\n    x2: SVGAnimatedLength;\r\n    x1: SVGAnimatedLength;\r\n    y2: SVGAnimatedLength;\r\n}\r\ndeclare var SVGLinearGradientElement: {\r\n    prototype: SVGLinearGradientElement;\r\n    new (): SVGLinearGradientElement;\r\n}\r\n\r\ninterface HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own ch functionality for the object.\r\n      */\r\n    ch: string;\r\n    /**\r\n      * Sets or retrieves how text and other content are vertically aligned within the object that contains them.\r\n      */\r\n    vAlign: string;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own chOff functionality for the object.\r\n      */\r\n    chOff: string;\r\n}\r\n\r\ninterface SVGAnimatedEnumeration {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\ndeclare var SVGAnimatedEnumeration: {\r\n    prototype: SVGAnimatedEnumeration;\r\n    new (): SVGAnimatedEnumeration;\r\n}\r\n\r\ninterface DOML2DeprecatedSizeProperty {\r\n    size: number;\r\n}\r\n\r\ninterface HTMLUListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle {\r\n}\r\ndeclare var HTMLUListElement: {\r\n    prototype: HTMLUListElement;\r\n    new (): HTMLUListElement;\r\n}\r\n\r\ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    ry: SVGAnimatedLength;\r\n    rx: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGRectElement: {\r\n    prototype: SVGRectElement;\r\n    new (): SVGRectElement;\r\n}\r\n\r\ninterface ErrorEventHandler {\r\n    (event: Event, source: string, fileno: number, columnNumber: number): void;\r\n    (message: any, uri: string, lineNumber: number, columnNumber?: number): void;\r\n}\r\n\r\ninterface HTMLDivElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\ndeclare var HTMLDivElement: {\r\n    prototype: HTMLDivElement;\r\n    new (): HTMLDivElement;\r\n}\r\n\r\ninterface DOML2DeprecatedBorderStyle {\r\n    border: string;\r\n}\r\n\r\ninterface NamedNodeMap {\r\n    length: number;\r\n    removeNamedItemNS(namespaceURI: string, localName: string): Attr;\r\n    item(index: number): Attr;\r\n    [index: number]: Attr;\r\n    removeNamedItem(name: string): Attr;\r\n    getNamedItem(name: string): Attr;\r\n    setNamedItem(arg: Attr): Attr;\r\n    getNamedItemNS(namespaceURI: string, localName: string): Attr;\r\n    setNamedItemNS(arg: Attr): Attr;\r\n}\r\ndeclare var NamedNodeMap: {\r\n    prototype: NamedNodeMap;\r\n    new (): NamedNodeMap;\r\n}\r\n\r\ninterface MediaList {\r\n    length: number;\r\n    mediaText: string;\r\n    deleteMedium(oldMedium: string): void;\r\n    appendMedium(newMedium: string): void;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n    toString(): string;\r\n}\r\ndeclare var MediaList: {\r\n    prototype: MediaList;\r\n    new (): MediaList;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    new (): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {\r\n    y: number;\r\n    x2: number;\r\n    x: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicSmoothRel: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothRel;\r\n    new (): SVGPathSegCurvetoCubicSmoothRel;\r\n}\r\n\r\ninterface SVGLengthList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\r\n    getItem(index: number): SVGLength;\r\n    clear(): void;\r\n    appendItem(newItem: SVGLength): SVGLength;\r\n    initialize(newItem: SVGLength): SVGLength;\r\n    removeItem(index: number): SVGLength;\r\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\r\n}\r\ndeclare var SVGLengthList: {\r\n    prototype: SVGLengthList;\r\n    new (): SVGLengthList;\r\n}\r\n\r\ninterface ProcessingInstruction extends Node {\r\n    target: string;\r\n    data: string;\r\n}\r\ndeclare var ProcessingInstruction: {\r\n    prototype: ProcessingInstruction;\r\n    new (): ProcessingInstruction;\r\n}\r\n\r\ninterface MSWindowExtensions {\r\n    status: string;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    screenLeft: number;\r\n    offscreenBuffering: any;\r\n    maxConnectionsPerServer: number;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    clipboardData: DataTransfer;\r\n    defaultStatus: string;\r\n    clientInformation: Navigator;\r\n    closed: boolean;\r\n    onhelp: (ev: Event) => any;\r\n    addEventListener(type: "help", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    external: External;\r\n    event: MSEventObj;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    screenTop: number;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    showModelessDialog(url?: string, argument?: any, options?: any): Window;\r\n    navigate(url: string): void;\r\n    resizeBy(x?: number, y?: number): void;\r\n    item(index: any): any;\r\n    resizeTo(x?: number, y?: number): void;\r\n    createPopup(arguments?: any): MSPopupWindow;\r\n    toStaticHTML(html: string): string;\r\n    execScript(code: string, language?: string): any;\r\n    msWriteProfilerMark(profilerMarkName: string): void;\r\n    moveTo(x?: number, y?: number): void;\r\n    moveBy(x?: number, y?: number): void;\r\n    showHelp(url: string, helpArg?: any, features?: string): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MSBehaviorUrnsCollection {\r\n    length: number;\r\n    item(index: number): string;\r\n}\r\ndeclare var MSBehaviorUrnsCollection: {\r\n    prototype: MSBehaviorUrnsCollection;\r\n    new (): MSBehaviorUrnsCollection;\r\n}\r\n\r\ninterface CSSFontFaceRule extends CSSRule {\r\n    style: CSSStyleDeclaration;\r\n}\r\ndeclare var CSSFontFaceRule: {\r\n    prototype: CSSFontFaceRule;\r\n    new (): CSSFontFaceRule;\r\n}\r\n\r\ninterface DOML2DeprecatedBackgroundStyle {\r\n    background: string;\r\n}\r\n\r\ninterface TextEvent extends UIEvent {\r\n    inputMethod: number;\r\n    data: string;\r\n    locale: string;\r\n    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;\r\n    DOM_INPUT_METHOD_KEYBOARD: number;\r\n    DOM_INPUT_METHOD_DROP: number;\r\n    DOM_INPUT_METHOD_IME: number;\r\n    DOM_INPUT_METHOD_SCRIPT: number;\r\n    DOM_INPUT_METHOD_VOICE: number;\r\n    DOM_INPUT_METHOD_UNKNOWN: number;\r\n    DOM_INPUT_METHOD_PASTE: number;\r\n    DOM_INPUT_METHOD_HANDWRITING: number;\r\n    DOM_INPUT_METHOD_OPTION: number;\r\n    DOM_INPUT_METHOD_MULTIMODAL: number;\r\n}\r\ndeclare var TextEvent: {\r\n    prototype: TextEvent;\r\n    new (): TextEvent;\r\n    DOM_INPUT_METHOD_KEYBOARD: number;\r\n    DOM_INPUT_METHOD_DROP: number;\r\n    DOM_INPUT_METHOD_IME: number;\r\n    DOM_INPUT_METHOD_SCRIPT: number;\r\n    DOM_INPUT_METHOD_VOICE: number;\r\n    DOM_INPUT_METHOD_UNKNOWN: number;\r\n    DOM_INPUT_METHOD_PASTE: number;\r\n    DOM_INPUT_METHOD_HANDWRITING: number;\r\n    DOM_INPUT_METHOD_OPTION: number;\r\n    DOM_INPUT_METHOD_MULTIMODAL: number;\r\n}\r\n\r\ninterface DocumentFragment extends Node, NodeSelector, MSEventAttachmentTarget, MSNodeExtensions {\r\n}\r\ndeclare var DocumentFragment: {\r\n    prototype: DocumentFragment;\r\n    new (): DocumentFragment;\r\n}\r\n\r\ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGAnimatedPoints, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGPolylineElement: {\r\n    prototype: SVGPolylineElement;\r\n    new (): SVGPolylineElement;\r\n}\r\n\r\ninterface SVGAnimatedPathData {\r\n    pathSegList: SVGPathSegList;\r\n}\r\n\r\ninterface Position {\r\n    timestamp: number;\r\n    coords: Coordinates;\r\n}\r\ndeclare var Position: {\r\n    prototype: Position;\r\n    new (): Position;\r\n}\r\n\r\ninterface BookmarkCollection {\r\n    length: number;\r\n    item(index: number): any;\r\n    [index: number]: any;\r\n}\r\ndeclare var BookmarkCollection: {\r\n    prototype: BookmarkCollection;\r\n    new (): BookmarkCollection;\r\n}\r\n\r\ninterface PerformanceMark extends PerformanceEntry {\r\n}\r\ndeclare var PerformanceMark: {\r\n    prototype: PerformanceMark;\r\n    new (): PerformanceMark;\r\n}\r\n\r\ninterface CSSPageRule extends CSSRule {\r\n    pseudoClass: string;\r\n    selectorText: string;\r\n    selector: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\ndeclare var CSSPageRule: {\r\n    prototype: CSSPageRule;\r\n    new (): CSSPageRule;\r\n}\r\n\r\ninterface HTMLBRElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\r\n      */\r\n    clear: string;\r\n}\r\ndeclare var HTMLBRElement: {\r\n    prototype: HTMLBRElement;\r\n    new (): HTMLBRElement;\r\n}\r\n\r\ninterface MSNavigatorExtensions {\r\n    userLanguage: string;\r\n    plugins: MSPluginsCollection;\r\n    cookieEnabled: boolean;\r\n    appCodeName: string;\r\n    cpuClass: string;\r\n    appMinorVersion: string;\r\n    connectionSpeed: number;\r\n    browserLanguage: string;\r\n    mimeTypes: MSMimeTypesCollection;\r\n    systemLanguage: string;\r\n    javaEnabled(): boolean;\r\n    taintEnabled(): boolean;\r\n}\r\n\r\ninterface HTMLSpanElement extends HTMLElement, MSDataBindingExtensions {\r\n}\r\ndeclare var HTMLSpanElement: {\r\n    prototype: HTMLSpanElement;\r\n    new (): HTMLSpanElement;\r\n}\r\n\r\ninterface HTMLHeadElement extends HTMLElement {\r\n    profile: string;\r\n}\r\ndeclare var HTMLHeadElement: {\r\n    prototype: HTMLHeadElement;\r\n    new (): HTMLHeadElement;\r\n}\r\n\r\ninterface HTMLHeadingElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n}\r\ndeclare var HTMLHeadingElement: {\r\n    prototype: HTMLHeadingElement;\r\n    new (): HTMLHeadingElement;\r\n}\r\n\r\ninterface HTMLFormElement extends HTMLElement, MSHTMLCollectionExtensions {\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\r\n      */\r\n    acceptCharset: string;\r\n    /**\r\n      * Sets or retrieves the encoding type for the form.\r\n      */\r\n    enctype: string;\r\n    /**\r\n      * Retrieves a collection, in source order, of all controls in a given form.\r\n      */\r\n    elements: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves how to send the form data to the server.\r\n      */\r\n    method: string;\r\n    /**\r\n      * Sets or retrieves the MIME encoding for the form.\r\n      */\r\n    encoding: string;\r\n    /**\r\n      * Fires when the user resets a form.\r\n      */\r\n    reset(): void;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Fires when a FORM is about to be submitted.\r\n      */\r\n    submit(): void;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      */\r\n    namedItem(name: string): any;\r\n    [name: string]: any;\r\n}\r\ndeclare var HTMLFormElement: {\r\n    prototype: HTMLFormElement;\r\n    new (): HTMLFormElement;\r\n}\r\n\r\ninterface SVGZoomAndPan {\r\n    zoomAndPan: number;\r\n    SVG_ZOOMANDPAN_MAGNIFY: number;\r\n    SVG_ZOOMANDPAN_UNKNOWN: number;\r\n    SVG_ZOOMANDPAN_DISABLE: number;\r\n}\r\ndeclare var SVGZoomAndPan: {\r\n    prototype: SVGZoomAndPan;\r\n    new (): SVGZoomAndPan;\r\n    SVG_ZOOMANDPAN_MAGNIFY: number;\r\n    SVG_ZOOMANDPAN_UNKNOWN: number;\r\n    SVG_ZOOMANDPAN_DISABLE: number;\r\n}\r\n\r\ninterface HTMLMediaElement extends HTMLElement {\r\n    /**\r\n      * Gets the earliest possible position, in seconds, that the playback can begin.\r\n      */\r\n    initialTime: number;\r\n    /**\r\n      * Gets TimeRanges for the current media resource that has been played.\r\n      */\r\n    played: TimeRanges;\r\n    /**\r\n      * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\r\n      */\r\n    currentSrc: string;\r\n    readyState: any;\r\n    /**\r\n      * The autobuffer element is not supported by Internet Explorer 9. Use the preload element instead.\r\n      */\r\n    autobuffer: boolean;\r\n    /**\r\n      * Gets or sets a flag to specify whether playback should restart after it completes.\r\n      */\r\n    loop: boolean;\r\n    /**\r\n      * Gets information about whether the playback has ended or not.\r\n      */\r\n    ended: boolean;\r\n    /**\r\n      * Gets a collection of buffered time ranges.\r\n      */\r\n    buffered: TimeRanges;\r\n    /**\r\n      * Returns an object representing the current error state of the audio or video element.\r\n      */\r\n    error: MediaError;\r\n    /**\r\n      * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\r\n      */\r\n    seekable: TimeRanges;\r\n    /**\r\n      * Gets or sets a value that indicates whether to start playing the media automatically.\r\n      */\r\n    autoplay: boolean;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\r\n      */\r\n    controls: boolean;\r\n    /**\r\n      * Gets or sets the volume level for audio portions of the media element.\r\n      */\r\n    volume: number;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\r\n      */\r\n    playbackRate: number;\r\n    /**\r\n      * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\r\n      */\r\n    duration: number;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\r\n      */\r\n    muted: boolean;\r\n    /**\r\n      * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\r\n      */\r\n    defaultPlaybackRate: number;\r\n    /**\r\n      * Gets a flag that specifies whether playback is paused.\r\n      */\r\n    paused: boolean;\r\n    /**\r\n      * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.\r\n      */\r\n    seeking: boolean;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    currentTime: number;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    preload: string;\r\n    /**\r\n      * Gets the current network activity for the element.\r\n      */\r\n    networkState: number;\r\n    /**\r\n      * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\r\n      */\r\n    pause(): void;\r\n    /**\r\n      * Loads and starts playback of a media resource.\r\n      */\r\n    play(): void;\r\n    /**\r\n      * Fires immediately after the client loads the object.\r\n      */\r\n    load(): void;\r\n    /**\r\n      * Returns a string that specifies whether the client can play a given media resource type.\r\n      */\r\n    canPlayType(type: string): string;\r\n    HAVE_METADATA: number;\r\n    HAVE_CURRENT_DATA: number;\r\n    HAVE_NOTHING: number;\r\n    NETWORK_NO_SOURCE: number;\r\n    HAVE_ENOUGH_DATA: number;\r\n    NETWORK_EMPTY: number;\r\n    NETWORK_LOADING: number;\r\n    NETWORK_IDLE: number;\r\n    HAVE_FUTURE_DATA: number;\r\n}\r\ndeclare var HTMLMediaElement: {\r\n    prototype: HTMLMediaElement;\r\n    new (): HTMLMediaElement;\r\n    HAVE_METADATA: number;\r\n    HAVE_CURRENT_DATA: number;\r\n    HAVE_NOTHING: number;\r\n    NETWORK_NO_SOURCE: number;\r\n    HAVE_ENOUGH_DATA: number;\r\n    NETWORK_EMPTY: number;\r\n    NETWORK_LOADING: number;\r\n    NETWORK_IDLE: number;\r\n    HAVE_FUTURE_DATA: number;\r\n}\r\n\r\ninterface ElementCSSInlineStyle {\r\n    runtimeStyle: MSStyleCSSProperties;\r\n    currentStyle: MSCurrentStyleCSSProperties;\r\n    doScroll(component?: any): void;\r\n    componentFromPoint(x: number, y: number): string;\r\n}\r\n\r\ninterface DOMParser {\r\n    parseFromString(source: string, mimeType: string): Document;\r\n}\r\ndeclare var DOMParser: {\r\n    prototype: DOMParser;\r\n    new (): DOMParser;\r\n}\r\n\r\ninterface MSMimeTypesCollection {\r\n    length: number;\r\n}\r\ndeclare var MSMimeTypesCollection: {\r\n    prototype: MSMimeTypesCollection;\r\n    new (): MSMimeTypesCollection;\r\n}\r\n\r\ninterface StyleSheet {\r\n    disabled: boolean;\r\n    ownerNode: Node;\r\n    parentStyleSheet: StyleSheet;\r\n    href: string;\r\n    media: MediaList;\r\n    type: string;\r\n    title: string;\r\n}\r\ndeclare var StyleSheet: {\r\n    prototype: StyleSheet;\r\n    new (): StyleSheet;\r\n}\r\n\r\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\r\n    startOffset: SVGAnimatedLength;\r\n    method: SVGAnimatedEnumeration;\r\n    spacing: SVGAnimatedEnumeration;\r\n    TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    TEXTPATH_METHODTYPE_STRETCH: number;\r\n    TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_ALIGN: number;\r\n}\r\ndeclare var SVGTextPathElement: {\r\n    prototype: SVGTextPathElement;\r\n    new (): SVGTextPathElement;\r\n    TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    TEXTPATH_METHODTYPE_STRETCH: number;\r\n    TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_ALIGN: number;\r\n}\r\n\r\ninterface HTMLDTElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\ndeclare var HTMLDTElement: {\r\n    prototype: HTMLDTElement;\r\n    new (): HTMLDTElement;\r\n}\r\n\r\ninterface NodeList {\r\n    length: number;\r\n    item(index: number): Node;\r\n    [index: number]: Node;\r\n}\r\ndeclare var NodeList: {\r\n    prototype: NodeList;\r\n    new (): NodeList;\r\n}\r\n\r\ninterface NodeListOf<TNode extends Node> extends NodeList {\r\n    length: number;\r\n    item(index: number): TNode;\r\n    [index: number]: TNode;\r\n}\r\n\r\ninterface XMLSerializer {\r\n    serializeToString(target: Node): string;\r\n}\r\ndeclare var XMLSerializer: {\r\n    prototype: XMLSerializer;\r\n    new (): XMLSerializer;\r\n}\r\n\r\ninterface PerformanceMeasure extends PerformanceEntry {\r\n}\r\ndeclare var PerformanceMeasure: {\r\n    prototype: PerformanceMeasure;\r\n    new (): PerformanceMeasure;\r\n}\r\n\r\ninterface SVGGradientElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGExternalResourcesRequired, SVGURIReference {\r\n    spreadMethod: SVGAnimatedEnumeration;\r\n    gradientTransform: SVGAnimatedTransformList;\r\n    gradientUnits: SVGAnimatedEnumeration;\r\n    SVG_SPREADMETHOD_REFLECT: number;\r\n    SVG_SPREADMETHOD_PAD: number;\r\n    SVG_SPREADMETHOD_UNKNOWN: number;\r\n    SVG_SPREADMETHOD_REPEAT: number;\r\n}\r\ndeclare var SVGGradientElement: {\r\n    prototype: SVGGradientElement;\r\n    new (): SVGGradientElement;\r\n    SVG_SPREADMETHOD_REFLECT: number;\r\n    SVG_SPREADMETHOD_PAD: number;\r\n    SVG_SPREADMETHOD_UNKNOWN: number;\r\n    SVG_SPREADMETHOD_REPEAT: number;\r\n}\r\n\r\ninterface NodeFilter {\r\n    acceptNode(n: Node): number;\r\n    SHOW_ENTITY_REFERENCE: number;\r\n    SHOW_NOTATION: number;\r\n    SHOW_ENTITY: number;\r\n    SHOW_DOCUMENT: number;\r\n    SHOW_PROCESSING_INSTRUCTION: number;\r\n    FILTER_REJECT: number;\r\n    SHOW_CDATA_SECTION: number;\r\n    FILTER_ACCEPT: number;\r\n    SHOW_ALL: number;\r\n    SHOW_DOCUMENT_TYPE: number;\r\n    SHOW_TEXT: number;\r\n    SHOW_ELEMENT: number;\r\n    SHOW_COMMENT: number;\r\n    FILTER_SKIP: number;\r\n    SHOW_ATTRIBUTE: number;\r\n    SHOW_DOCUMENT_FRAGMENT: number;\r\n}\r\ndeclare var NodeFilter: {\r\n    prototype: NodeFilter;\r\n    new (): NodeFilter;\r\n    SHOW_ENTITY_REFERENCE: number;\r\n    SHOW_NOTATION: number;\r\n    SHOW_ENTITY: number;\r\n    SHOW_DOCUMENT: number;\r\n    SHOW_PROCESSING_INSTRUCTION: number;\r\n    FILTER_REJECT: number;\r\n    SHOW_CDATA_SECTION: number;\r\n    FILTER_ACCEPT: number;\r\n    SHOW_ALL: number;\r\n    SHOW_DOCUMENT_TYPE: number;\r\n    SHOW_TEXT: number;\r\n    SHOW_ELEMENT: number;\r\n    SHOW_COMMENT: number;\r\n    FILTER_SKIP: number;\r\n    SHOW_ATTRIBUTE: number;\r\n    SHOW_DOCUMENT_FRAGMENT: number;\r\n}\r\n\r\ninterface SVGNumberList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\r\n    getItem(index: number): SVGNumber;\r\n    clear(): void;\r\n    appendItem(newItem: SVGNumber): SVGNumber;\r\n    initialize(newItem: SVGNumber): SVGNumber;\r\n    removeItem(index: number): SVGNumber;\r\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\r\n}\r\ndeclare var SVGNumberList: {\r\n    prototype: SVGNumberList;\r\n    new (): SVGNumberList;\r\n}\r\n\r\ninterface MediaError {\r\n    code: number;\r\n    MEDIA_ERR_ABORTED: number;\r\n    MEDIA_ERR_NETWORK: number;\r\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    MEDIA_ERR_DECODE: number;\r\n}\r\ndeclare var MediaError: {\r\n    prototype: MediaError;\r\n    new (): MediaError;\r\n    MEDIA_ERR_ABORTED: number;\r\n    MEDIA_ERR_NETWORK: number;\r\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    MEDIA_ERR_DECODE: number;\r\n}\r\n\r\ninterface HTMLFieldSetElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLFieldSetElement: {\r\n    prototype: HTMLFieldSetElement;\r\n    new (): HTMLFieldSetElement;\r\n}\r\n\r\ninterface HTMLBGSoundElement extends HTMLElement {\r\n    /**\r\n      * Sets or gets the value indicating how the volume of the background sound is divided between the left speaker and the right speaker.\r\n      */\r\n    balance: any;\r\n    /**\r\n      * Sets or gets the volume setting for the sound. \r\n      */\r\n    volume: any;\r\n    /**\r\n      * Sets or gets the URL of a sound to play.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the number of times a sound or video clip will loop when activated.\r\n      */\r\n    loop: number;\r\n}\r\ndeclare var HTMLBGSoundElement: {\r\n    prototype: HTMLBGSoundElement;\r\n    new (): HTMLBGSoundElement;\r\n}\r\n\r\ninterface HTMLElement extends Element, ElementCSSInlineStyle, MSEventAttachmentTarget, MSNodeExtensions {\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onbeforecut: (ev: DragEvent) => any;\r\n    addEventListener(type: "beforecut", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    onmove: (ev: MSEventObj) => any;\r\n    addEventListener(type: "move", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    onreset: (ev: Event) => any;\r\n    addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onhelp: (ev: Event) => any;\r\n    addEventListener(type: "help", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    className: string;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onseeked: (ev: Event) => any;\r\n    addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    recordNumber: any;\r\n    title: string;\r\n    parentTextEdit: Element;\r\n    outerHTML: string;\r\n    ondurationchange: (ev: Event) => any;\r\n    addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    offsetHeight: number;\r\n    all: HTMLCollection;\r\n    onblur: (ev: FocusEvent) => any;\r\n    addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    dir: string;\r\n    onemptied: (ev: Event) => any;\r\n    addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onseeking: (ev: Event) => any;\r\n    addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    oncanplay: (ev: Event) => any;\r\n    addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    addEventListener(type: "deactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    ondatasetchanged: (ev: MSEventObj) => any;\r\n    addEventListener(type: "datasetchanged", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onrowsdelete: (ev: MSEventObj) => any;\r\n    addEventListener(type: "rowsdelete", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    sourceIndex: number;\r\n    onloadstart: (ev: Event) => any;\r\n    addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onlosecapture: (ev: MSEventObj) => any;\r\n    addEventListener(type: "losecapture", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    oncontrolselect: (ev: MSEventObj) => any;\r\n    addEventListener(type: "controlselect", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onsubmit: (ev: Event) => any;\r\n    addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    behaviorUrns: MSBehaviorUrnsCollection;\r\n    scopeName: string;\r\n    onchange: (ev: Event) => any;\r\n    addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    id: string;\r\n    onlayoutcomplete: (ev: MSEventObj) => any;\r\n    addEventListener(type: "layoutcomplete", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    uniqueID: string;\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    addEventListener(type: "beforeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onbeforeupdate: (ev: MSEventObj) => any;\r\n    addEventListener(type: "beforeupdate", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onfilterchange: (ev: MSEventObj) => any;\r\n    addEventListener(type: "filterchange", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    offsetParent: Element;\r\n    ondatasetcomplete: (ev: MSEventObj) => any;\r\n    addEventListener(type: "datasetcomplete", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onsuspend: (ev: Event) => any;\r\n    addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    readyState: any;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    innerText: string;\r\n    onerrorupdate: (ev: MSEventObj) => any;\r\n    addEventListener(type: "errorupdate", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    parentElement: HTMLElement;\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    onvolumechange: (ev: Event) => any;\r\n    addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    oncellchange: (ev: MSEventObj) => any;\r\n    addEventListener(type: "cellchange", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onrowexit: (ev: MSEventObj) => any;\r\n    addEventListener(type: "rowexit", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onrowsinserted: (ev: MSEventObj) => any;\r\n    addEventListener(type: "rowsinserted", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onpropertychange: (ev: MSEventObj) => any;\r\n    addEventListener(type: "propertychange", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    filters: Object;\r\n    children: HTMLCollection;\r\n    ondragend: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onbeforepaste: (ev: DragEvent) => any;\r\n    addEventListener(type: "beforepaste", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    ondragover: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    offsetTop: number;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onbeforecopy: (ev: DragEvent) => any;\r\n    addEventListener(type: "beforecopy", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    ondrag: (ev: DragEvent) => any;\r\n    addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    innerHTML: string;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    lang: string;\r\n    uniqueNumber: number;\r\n    onpause: (ev: Event) => any;\r\n    addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    tagUrn: string;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onclick: (ev: MouseEvent) => any;\r\n    addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onwaiting: (ev: Event) => any;\r\n    addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onresizestart: (ev: MSEventObj) => any;\r\n    addEventListener(type: "resizestart", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    offsetLeft: number;\r\n    isTextEdit: boolean;\r\n    isDisabled: boolean;\r\n    onpaste: (ev: DragEvent) => any;\r\n    addEventListener(type: "paste", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    canHaveHTML: boolean;\r\n    onmoveend: (ev: MSEventObj) => any;\r\n    addEventListener(type: "moveend", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    language: string;\r\n    onstalled: (ev: Event) => any;\r\n    addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    style: MSStyleCSSProperties;\r\n    isContentEditable: boolean;\r\n    onbeforeeditfocus: (ev: MSEventObj) => any;\r\n    addEventListener(type: "beforeeditfocus", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onratechange: (ev: Event) => any;\r\n    addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    contentEditable: string;\r\n    tabIndex: number;\r\n    document: Document;\r\n    onprogress: (ev: any) => any;\r\n    addEventListener(type: "progress", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    oncontextmenu: (ev: MouseEvent) => any;\r\n    addEventListener(type: "contextmenu", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onafterupdate: (ev: MSEventObj) => any;\r\n    addEventListener(type: "afterupdate", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: "error", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onplay: (ev: Event) => any;\r\n    addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onresizeend: (ev: MSEventObj) => any;\r\n    addEventListener(type: "resizeend", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onplaying: (ev: Event) => any;\r\n    addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    isMultiLine: boolean;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    onabort: (ev: UIEvent) => any;\r\n    addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    ondataavailable: (ev: MSEventObj) => any;\r\n    addEventListener(type: "dataavailable", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    hideFocus: boolean;\r\n    onreadystatechange: (ev: Event) => any;\r\n    addEventListener(type: "readystatechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    onloadeddata: (ev: Event) => any;\r\n    addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    addEventListener(type: "beforedeactivate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    outerText: string;\r\n    disabled: boolean;\r\n    onactivate: (ev: UIEvent) => any;\r\n    addEventListener(type: "activate", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    accessKey: string;\r\n    onmovestart: (ev: MSEventObj) => any;\r\n    addEventListener(type: "movestart", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onselectstart: (ev: Event) => any;\r\n    addEventListener(type: "selectstart", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    ontimeupdate: (ev: Event) => any;\r\n    addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onresize: (ev: UIEvent) => any;\r\n    addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    oncut: (ev: DragEvent) => any;\r\n    addEventListener(type: "cut", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onselect: (ev: UIEvent) => any;\r\n    addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    ondrop: (ev: DragEvent) => any;\r\n    addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    offsetWidth: number;\r\n    oncopy: (ev: DragEvent) => any;\r\n    addEventListener(type: "copy", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    onended: (ev: Event) => any;\r\n    addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onscroll: (ev: UIEvent) => any;\r\n    addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    onrowenter: (ev: MSEventObj) => any;\r\n    addEventListener(type: "rowenter", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    onload: (ev: Event) => any;\r\n    addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    canHaveChildren: boolean;\r\n    oninput: (ev: Event) => any;\r\n    addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    dragDrop(): boolean;\r\n    scrollIntoView(top?: boolean): void;\r\n    addFilter(filter: Object): void;\r\n    setCapture(containerCapture?: boolean): void;\r\n    focus(): void;\r\n    getAdjacentText(where: string): string;\r\n    insertAdjacentText(where: string, text: string): void;\r\n    getElementsByClassName(classNames: string): NodeList;\r\n    setActive(): void;\r\n    removeFilter(filter: Object): void;\r\n    blur(): void;\r\n    clearAttributes(): void;\r\n    releaseCapture(): void;\r\n    createControlRange(): ControlRangeCollection;\r\n    removeBehavior(cookie: number): boolean;\r\n    contains(child: HTMLElement): boolean;\r\n    click(): void;\r\n    insertAdjacentElement(position: string, insertedElement: Element): Element;\r\n    mergeAttributes(source: HTMLElement, preserveIdentity?: boolean): void;\r\n    replaceAdjacentText(where: string, newText: string): string;\r\n    applyElement(apply: Element, where?: string): Element;\r\n    addBehavior(bstrUrl: string, factory?: any): number;\r\n    insertAdjacentHTML(where: string, html: string): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLElement: {\r\n    prototype: HTMLElement;\r\n    new (): HTMLElement;\r\n}\r\n\r\ninterface Comment extends CharacterData {\r\n    text: string;\r\n}\r\ndeclare var Comment: {\r\n    prototype: Comment;\r\n    new (): Comment;\r\n}\r\n\r\ninterface PerformanceResourceTiming extends PerformanceEntry {\r\n    redirectStart: number;\r\n    redirectEnd: number;\r\n    domainLookupEnd: number;\r\n    responseStart: number;\r\n    domainLookupStart: number;\r\n    fetchStart: number;\r\n    requestStart: number;\r\n    connectEnd: number;\r\n    connectStart: number;\r\n    initiatorType: string;\r\n    responseEnd: number;\r\n}\r\ndeclare var PerformanceResourceTiming: {\r\n    prototype: PerformanceResourceTiming;\r\n    new (): PerformanceResourceTiming;\r\n}\r\n\r\ninterface CanvasPattern {\r\n}\r\ndeclare var CanvasPattern: {\r\n    prototype: CanvasPattern;\r\n    new (): CanvasPattern;\r\n}\r\n\r\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\r\n      */\r\n    noShade: boolean;\r\n}\r\ndeclare var HTMLHRElement: {\r\n    prototype: HTMLHRElement;\r\n    new (): HTMLHRElement;\r\n}\r\n\r\ninterface HTMLObjectElement extends HTMLElement, GetSVGDocument, DOML2DeprecatedMarginStyle, DOML2DeprecatedBorderStyle, DOML2DeprecatedAlignmentStyle, MSDataBindingExtensions, MSDataBindingRecordSetExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    /**\r\n      * Retrieves the contained object.\r\n      */\r\n    object: Object;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the URL of the file containing the compiled Java class.\r\n      */\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the class identifier for the object.\r\n      */\r\n    classid: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    declare: boolean;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    BaseHref: string;\r\n}\r\ndeclare var HTMLObjectElement: {\r\n    prototype: HTMLObjectElement;\r\n    new (): HTMLObjectElement;\r\n}\r\n\r\ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Retrieves the palette used for the embedded document.\r\n      */\r\n    palette: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves the URL of the plug-in used to view an embedded document.\r\n      */\r\n    pluginspage: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the height and width units of the embed object.\r\n      */\r\n    units: string;\r\n}\r\ndeclare var HTMLEmbedElement: {\r\n    prototype: HTMLEmbedElement;\r\n    new (): HTMLEmbedElement;\r\n}\r\n\r\ninterface StorageEvent extends Event {\r\n    oldValue: any;\r\n    newValue: any;\r\n    url: string;\r\n    storageArea: Storage;\r\n    key: string;\r\n    initStorageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, keyArg: string, oldValueArg: any, newValueArg: any, urlArg: string, storageAreaArg: Storage): void;\r\n}\r\ndeclare var StorageEvent: {\r\n    prototype: StorageEvent;\r\n    new (): StorageEvent;\r\n}\r\n\r\ninterface CharacterData extends Node {\r\n    length: number;\r\n    data: string;\r\n    deleteData(offset: number, count: number): void;\r\n    replaceData(offset: number, count: number, arg: string): void;\r\n    appendData(arg: string): void;\r\n    insertData(offset: number, arg: string): void;\r\n    substringData(offset: number, count: number): string;\r\n}\r\ndeclare var CharacterData: {\r\n    prototype: CharacterData;\r\n    new (): CharacterData;\r\n}\r\n\r\ninterface HTMLOptGroupElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    index: number;\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n}\r\ndeclare var HTMLOptGroupElement: {\r\n    prototype: HTMLOptGroupElement;\r\n    new (): HTMLOptGroupElement;\r\n}\r\n\r\ninterface HTMLIsIndexElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    prompt: string;\r\n}\r\ndeclare var HTMLIsIndexElement: {\r\n    prototype: HTMLIsIndexElement;\r\n    new (): HTMLIsIndexElement;\r\n}\r\n\r\ninterface SVGPathSegLinetoRel extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoRel: {\r\n    prototype: SVGPathSegLinetoRel;\r\n    new (): SVGPathSegLinetoRel;\r\n}\r\n\r\ninterface DOMException {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    HIERARCHY_REQUEST_ERR: number;\r\n    NO_MODIFICATION_ALLOWED_ERR: number;\r\n    INVALID_MODIFICATION_ERR: number;\r\n    NAMESPACE_ERR: number;\r\n    INVALID_CHARACTER_ERR: number;\r\n    TYPE_MISMATCH_ERR: number;\r\n    ABORT_ERR: number;\r\n    INVALID_STATE_ERR: number;\r\n    SECURITY_ERR: number;\r\n    NETWORK_ERR: number;\r\n    WRONG_DOCUMENT_ERR: number;\r\n    QUOTA_EXCEEDED_ERR: number;\r\n    INDEX_SIZE_ERR: number;\r\n    DOMSTRING_SIZE_ERR: number;\r\n    SYNTAX_ERR: number;\r\n    SERIALIZE_ERR: number;\r\n    VALIDATION_ERR: number;\r\n    NOT_FOUND_ERR: number;\r\n    URL_MISMATCH_ERR: number;\r\n    PARSE_ERR: number;\r\n    NO_DATA_ALLOWED_ERR: number;\r\n    NOT_SUPPORTED_ERR: number;\r\n    INVALID_ACCESS_ERR: number;\r\n    INUSE_ATTRIBUTE_ERR: number;\r\n}\r\ndeclare var DOMException: {\r\n    prototype: DOMException;\r\n    new (): DOMException;\r\n    HIERARCHY_REQUEST_ERR: number;\r\n    NO_MODIFICATION_ALLOWED_ERR: number;\r\n    INVALID_MODIFICATION_ERR: number;\r\n    NAMESPACE_ERR: number;\r\n    INVALID_CHARACTER_ERR: number;\r\n    TYPE_MISMATCH_ERR: number;\r\n    ABORT_ERR: number;\r\n    INVALID_STATE_ERR: number;\r\n    SECURITY_ERR: number;\r\n    NETWORK_ERR: number;\r\n    WRONG_DOCUMENT_ERR: number;\r\n    QUOTA_EXCEEDED_ERR: number;\r\n    INDEX_SIZE_ERR: number;\r\n    DOMSTRING_SIZE_ERR: number;\r\n    SYNTAX_ERR: number;\r\n    SERIALIZE_ERR: number;\r\n    VALIDATION_ERR: number;\r\n    NOT_FOUND_ERR: number;\r\n    URL_MISMATCH_ERR: number;\r\n    PARSE_ERR: number;\r\n    NO_DATA_ALLOWED_ERR: number;\r\n    NOT_SUPPORTED_ERR: number;\r\n    INVALID_ACCESS_ERR: number;\r\n    INUSE_ATTRIBUTE_ERR: number;\r\n}\r\n\r\ninterface SVGAnimatedBoolean {\r\n    animVal: boolean;\r\n    baseVal: boolean;\r\n}\r\ndeclare var SVGAnimatedBoolean: {\r\n    prototype: SVGAnimatedBoolean;\r\n    new (): SVGAnimatedBoolean;\r\n}\r\n\r\ninterface MSCompatibleInfoCollection {\r\n    length: number;\r\n    item(index: number): MSCompatibleInfo;\r\n}\r\ndeclare var MSCompatibleInfoCollection: {\r\n    prototype: MSCompatibleInfoCollection;\r\n    new (): MSCompatibleInfoCollection;\r\n}\r\n\r\ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGSwitchElement: {\r\n    prototype: SVGSwitchElement;\r\n    new (): SVGSwitchElement;\r\n}\r\n\r\ninterface SVGPreserveAspectRatio {\r\n    align: number;\r\n    meetOrSlice: number;\r\n    SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    SVG_MEETORSLICE_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n    SVG_MEETORSLICE_MEET: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    SVG_MEETORSLICE_SLICE: number;\r\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n}\r\ndeclare var SVGPreserveAspectRatio: {\r\n    prototype: SVGPreserveAspectRatio;\r\n    new (): SVGPreserveAspectRatio;\r\n    SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    SVG_MEETORSLICE_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n    SVG_MEETORSLICE_MEET: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    SVG_MEETORSLICE_SLICE: number;\r\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n}\r\n\r\ninterface Attr extends Node {\r\n    expando: boolean;\r\n    specified: boolean;\r\n    ownerElement: Element;\r\n    value: string;\r\n    name: string;\r\n}\r\ndeclare var Attr: {\r\n    prototype: Attr;\r\n    new (): Attr;\r\n}\r\n\r\ninterface PerformanceNavigation {\r\n    redirectCount: number;\r\n    type: number;\r\n    toJSON(): any;\r\n    TYPE_RELOAD: number;\r\n    TYPE_RESERVED: number;\r\n    TYPE_BACK_FORWARD: number;\r\n    TYPE_NAVIGATE: number;\r\n}\r\ndeclare var PerformanceNavigation: {\r\n    prototype: PerformanceNavigation;\r\n    new (): PerformanceNavigation;\r\n    TYPE_RELOAD: number;\r\n    TYPE_RESERVED: number;\r\n    TYPE_BACK_FORWARD: number;\r\n    TYPE_NAVIGATE: number;\r\n}\r\n\r\ninterface SVGStopElement extends SVGElement, SVGStylable {\r\n    offset: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGStopElement: {\r\n    prototype: SVGStopElement;\r\n    new (): SVGStopElement;\r\n}\r\n\r\ninterface PositionCallback {\r\n    (position: Position): void;\r\n}\r\n\r\ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGSymbolElement: {\r\n    prototype: SVGSymbolElement;\r\n    new (): SVGSymbolElement;\r\n}\r\n\r\ninterface SVGElementInstanceList {\r\n    length: number;\r\n    item(index: number): SVGElementInstance;\r\n}\r\ndeclare var SVGElementInstanceList: {\r\n    prototype: SVGElementInstanceList;\r\n    new (): SVGElementInstanceList;\r\n}\r\n\r\ninterface CSSRuleList {\r\n    length: number;\r\n    item(index: number): CSSRule;\r\n    [index: number]: CSSRule;\r\n}\r\ndeclare var CSSRuleList: {\r\n    prototype: CSSRuleList;\r\n    new (): CSSRuleList;\r\n}\r\n\r\ninterface MSDataBindingRecordSetExtensions {\r\n    recordset: Object;\r\n    namedRecordset(dataMember: string, hierarchy?: any): Object;\r\n}\r\n\r\ninterface LinkStyle {\r\n    styleSheet: StyleSheet;\r\n    sheet: StyleSheet;\r\n}\r\n\r\ninterface HTMLVideoElement extends HTMLMediaElement {\r\n    /**\r\n      * Gets or sets the width of the video element.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    videoWidth: number;\r\n    /**\r\n      * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    videoHeight: number;\r\n    /**\r\n      * Gets or sets the height of the video element.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\r\n      */\r\n    poster: string;\r\n}\r\ndeclare var HTMLVideoElement: {\r\n    prototype: HTMLVideoElement;\r\n    new (): HTMLVideoElement;\r\n}\r\n\r\ninterface ClientRectList {\r\n    length: number;\r\n    item(index: number): ClientRect;\r\n    [index: number]: ClientRect;\r\n}\r\ndeclare var ClientRectList: {\r\n    prototype: ClientRectList;\r\n    new (): ClientRectList;\r\n}\r\n\r\ninterface SVGMaskElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    maskUnits: SVGAnimatedEnumeration;\r\n    maskContentUnits: SVGAnimatedEnumeration;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGMaskElement: {\r\n    prototype: SVGMaskElement;\r\n    new (): SVGMaskElement;\r\n}\r\n\r\ninterface External {\r\n}\r\ndeclare var External: {\r\n    prototype: External;\r\n    new (): External;\r\n}\r\n\r\ndeclare var Audio: { new (src?: string): HTMLAudioElement; };\r\ndeclare var Option: { new (text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement; };\r\ndeclare var Image: { new (width?: number, height?: number): HTMLImageElement; };\r\n\r\ndeclare var ondragend: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "dragend", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var onkeydown: (ev: KeyboardEvent) => any;\r\ndeclare function addEventListener(type: "keydown", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare var ondragover: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "dragover", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var onkeyup: (ev: KeyboardEvent) => any;\r\ndeclare function addEventListener(type: "keyup", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare var onreset: (ev: Event) => any;\r\ndeclare function addEventListener(type: "reset", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onmouseup: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mouseup", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var ondragstart: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "dragstart", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var ondrag: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "drag", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var screenX: number;\r\ndeclare var onmouseover: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mouseover", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var ondragleave: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "dragleave", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var history: History;\r\ndeclare var pageXOffset: number;\r\ndeclare var name: string;\r\ndeclare var onafterprint: (ev: Event) => any;\r\ndeclare function addEventListener(type: "afterprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onpause: (ev: Event) => any;\r\ndeclare function addEventListener(type: "pause", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onbeforeprint: (ev: Event) => any;\r\ndeclare function addEventListener(type: "beforeprint", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var top: Window;\r\ndeclare var onmousedown: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mousedown", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var onseeked: (ev: Event) => any;\r\ndeclare function addEventListener(type: "seeked", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var opener: Window;\r\ndeclare var onclick: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "click", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var innerHeight: number;\r\ndeclare var onwaiting: (ev: Event) => any;\r\ndeclare function addEventListener(type: "waiting", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var ononline: (ev: Event) => any;\r\ndeclare function addEventListener(type: "online", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var ondurationchange: (ev: Event) => any;\r\ndeclare function addEventListener(type: "durationchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var frames: Window;\r\ndeclare var onblur: (ev: FocusEvent) => any;\r\ndeclare function addEventListener(type: "blur", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare var onemptied: (ev: Event) => any;\r\ndeclare function addEventListener(type: "emptied", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onseeking: (ev: Event) => any;\r\ndeclare function addEventListener(type: "seeking", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var oncanplay: (ev: Event) => any;\r\ndeclare function addEventListener(type: "canplay", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var outerWidth: number;\r\ndeclare var onstalled: (ev: Event) => any;\r\ndeclare function addEventListener(type: "stalled", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onmousemove: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mousemove", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var innerWidth: number;\r\ndeclare var onoffline: (ev: Event) => any;\r\ndeclare function addEventListener(type: "offline", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var length: number;\r\ndeclare var screen: Screen;\r\ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\ndeclare function addEventListener(type: "beforeunload", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\ndeclare var onratechange: (ev: Event) => any;\r\ndeclare function addEventListener(type: "ratechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onstorage: (ev: StorageEvent) => any;\r\ndeclare function addEventListener(type: "storage", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\ndeclare var onloadstart: (ev: Event) => any;\r\ndeclare function addEventListener(type: "loadstart", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var ondragenter: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "dragenter", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var onsubmit: (ev: Event) => any;\r\ndeclare function addEventListener(type: "submit", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var self: Window;\r\ndeclare var document: Document;\r\ndeclare var onprogress: (ev: any) => any;\r\ndeclare function addEventListener(type: "progress", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var ondblclick: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "dblclick", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var pageYOffset: number;\r\ndeclare var oncontextmenu: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "contextmenu", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var onchange: (ev: Event) => any;\r\ndeclare function addEventListener(type: "change", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onloadedmetadata: (ev: Event) => any;\r\ndeclare function addEventListener(type: "loadedmetadata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onplay: (ev: Event) => any;\r\ndeclare function addEventListener(type: "play", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onerror: ErrorEventHandler;\r\ndeclare var onplaying: (ev: Event) => any;\r\ndeclare function addEventListener(type: "playing", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var parent: Window;\r\ndeclare var location: Location;\r\ndeclare var oncanplaythrough: (ev: Event) => any;\r\ndeclare function addEventListener(type: "canplaythrough", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onabort: (ev: UIEvent) => any;\r\ndeclare function addEventListener(type: "abort", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare var onreadystatechange: (ev: Event) => any;\r\ndeclare function addEventListener(type: "readystatechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var outerHeight: number;\r\ndeclare var onkeypress: (ev: KeyboardEvent) => any;\r\ndeclare function addEventListener(type: "keypress", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare var frameElement: Element;\r\ndeclare var onloadeddata: (ev: Event) => any;\r\ndeclare function addEventListener(type: "loadeddata", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onsuspend: (ev: Event) => any;\r\ndeclare function addEventListener(type: "suspend", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var window: Window;\r\ndeclare var onfocus: (ev: FocusEvent) => any;\r\ndeclare function addEventListener(type: "focus", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare var onmessage: (ev: MessageEvent) => any;\r\ndeclare function addEventListener(type: "message", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\ndeclare var ontimeupdate: (ev: Event) => any;\r\ndeclare function addEventListener(type: "timeupdate", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onresize: (ev: UIEvent) => any;\r\ndeclare function addEventListener(type: "resize", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare var onselect: (ev: UIEvent) => any;\r\ndeclare function addEventListener(type: "select", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare var navigator: Navigator;\r\ndeclare var styleMedia: StyleMedia;\r\ndeclare var ondrop: (ev: DragEvent) => any;\r\ndeclare function addEventListener(type: "drop", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare var onmouseout: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mouseout", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var onended: (ev: Event) => any;\r\ndeclare function addEventListener(type: "ended", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onhashchange: (ev: Event) => any;\r\ndeclare function addEventListener(type: "hashchange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onunload: (ev: Event) => any;\r\ndeclare function addEventListener(type: "unload", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onscroll: (ev: UIEvent) => any;\r\ndeclare function addEventListener(type: "scroll", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare var screenY: number;\r\ndeclare var onmousewheel: (ev: MouseWheelEvent) => any;\r\ndeclare function addEventListener(type: "mousewheel", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\ndeclare var onload: (ev: Event) => any;\r\ndeclare function addEventListener(type: "load", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var onvolumechange: (ev: Event) => any;\r\ndeclare function addEventListener(type: "volumechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var oninput: (ev: Event) => any;\r\ndeclare function addEventListener(type: "input", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var performance: Performance;\r\ndeclare function alert(message?: any): void;\r\ndeclare function scroll(x?: number, y?: number): void;\r\ndeclare function focus(): void;\r\ndeclare function scrollTo(x?: number, y?: number): void;\r\ndeclare function print(): void;\r\ndeclare function prompt(message?: string, defaul?: string): string;\r\ndeclare function toString(): string;\r\ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): Window;\r\ndeclare function scrollBy(x?: number, y?: number): void;\r\ndeclare function confirm(message?: string): boolean;\r\ndeclare function close(): void;\r\ndeclare function postMessage(message: any, targetOrigin: string, ports?: any): void;\r\ndeclare function showModalDialog(url?: string, argument?: any, options?: any): any;\r\ndeclare function blur(): void;\r\ndeclare function getSelection(): Selection;\r\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\ndeclare function addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\ndeclare function removeEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\ndeclare function dispatchEvent(evt: Event): boolean;\r\ndeclare function attachEvent(event: string, listener: EventListener): boolean;\r\ndeclare function detachEvent(event: string, listener: EventListener): void;\r\ndeclare var localStorage: Storage;\r\ndeclare var status: string;\r\ndeclare var onmouseleave: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mouseleave", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var screenLeft: number;\r\ndeclare var offscreenBuffering: any;\r\ndeclare var maxConnectionsPerServer: number;\r\ndeclare var onmouseenter: (ev: MouseEvent) => any;\r\ndeclare function addEventListener(type: "mouseenter", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare var clipboardData: DataTransfer;\r\ndeclare var defaultStatus: string;\r\ndeclare var clientInformation: Navigator;\r\ndeclare var closed: boolean;\r\ndeclare var onhelp: (ev: Event) => any;\r\ndeclare function addEventListener(type: "help", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare var external: External;\r\ndeclare var event: MSEventObj;\r\ndeclare var onfocusout: (ev: FocusEvent) => any;\r\ndeclare function addEventListener(type: "focusout", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare var screenTop: number;\r\ndeclare var onfocusin: (ev: FocusEvent) => any;\r\ndeclare function addEventListener(type: "focusin", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function showModelessDialog(url?: string, argument?: any, options?: any): Window;\r\ndeclare function navigate(url: string): void;\r\ndeclare function resizeBy(x?: number, y?: number): void;\r\ndeclare function item(index: any): any;\r\ndeclare function resizeTo(x?: number, y?: number): void;\r\ndeclare function createPopup(arguments?: any): MSPopupWindow;\r\ndeclare function toStaticHTML(html: string): string;\r\ndeclare function execScript(code: string, language?: string): any;\r\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\r\ndeclare function moveTo(x?: number, y?: number): void;\r\ndeclare function moveBy(x?: number, y?: number): void;\r\ndeclare function showHelp(url: string, helpArg?: any, features?: string): void;\r\ndeclare var sessionStorage: Storage;\r\ndeclare function clearTimeout(handle: number): void;\r\ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function clearInterval(handle: number): void;\r\ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\n\r\n\r\n/////////////////////////////\r\n/// IE10 DOM APIs \r\n/////////////////////////////\r\n\r\n\r\n\r\ninterface ObjectURLOptions {\r\n    oneTimeOnly?: boolean;\r\n}\r\n\r\ninterface HTMLBodyElement {\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    addEventListener(type: "popstate", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MSGestureEvent extends UIEvent {\r\n    offsetY: number;\r\n    translationY: number;\r\n    velocityExpansion: number;\r\n    velocityY: number;\r\n    velocityAngular: number;\r\n    translationX: number;\r\n    velocityX: number;\r\n    hwTimestamp: number;\r\n    offsetX: number;\r\n    screenX: number;\r\n    rotation: number;\r\n    expansion: number;\r\n    clientY: number;\r\n    screenY: number;\r\n    scale: number;\r\n    gestureObject: any;\r\n    clientX: number;\r\n    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;\r\n    MSGESTURE_FLAG_BEGIN: number;\r\n    MSGESTURE_FLAG_END: number;\r\n    MSGESTURE_FLAG_CANCEL: number;\r\n    MSGESTURE_FLAG_INERTIA: number;\r\n    MSGESTURE_FLAG_NONE: number;\r\n}\r\ndeclare var MSGestureEvent: {\r\n    prototype: MSGestureEvent;\r\n    new (): MSGestureEvent;\r\n    MSGESTURE_FLAG_BEGIN: number;\r\n    MSGESTURE_FLAG_END: number;\r\n    MSGESTURE_FLAG_CANCEL: number;\r\n    MSGESTURE_FLAG_INERTIA: number;\r\n    MSGESTURE_FLAG_NONE: number;\r\n}\r\n\r\ninterface HTMLAnchorElement {\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n}\r\n\r\ninterface HTMLInputElement {\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a FileList object on a file type input object.\r\n      */\r\n    files: FileList;\r\n    /**\r\n      * Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\r\n      */\r\n    max: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\r\n      */\r\n    step: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * When present, marks an element that can\'t be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Returns the input field value as a number.\r\n      */\r\n    valueAsNumber: number;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Specifies the ID of a pre-defined datalist of options for an input element.\r\n      */\r\n    list: HTMLElement;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\r\n      */\r\n    min: string;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Gets or sets a string containing a regular expression that the user\'s input must match.\r\n      */\r\n    pattern: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Decrements a range input control\'s value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control\'s step value multiplied by the parameter\'s value.\r\n      * @param n Value to decrement the value by.\r\n      */\r\n    stepDown(n?: number): void;\r\n    /**\r\n      * Increments a range input control\'s value by the value given by the Step attribute. If the optional parameter is used, will increment the input control\'s value by that value.\r\n      * @param n Value to increment the value by.\r\n      */\r\n    stepUp(n?: number): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ninterface ErrorEvent extends Event {\r\n    colno: number;\r\n    filename: string;\r\n    lineno: number;\r\n    message: string;\r\n    initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;\r\n}\r\ndeclare var ErrorEvent: {\r\n    prototype: ErrorEvent;\r\n    new (): ErrorEvent;\r\n}\r\n\r\ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    filterResX: SVGAnimatedInteger;\r\n    filterUnits: SVGAnimatedEnumeration;\r\n    primitiveUnits: SVGAnimatedEnumeration;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n    filterResY: SVGAnimatedInteger;\r\n    setFilterRes(filterResX: number, filterResY: number): void;\r\n}\r\ndeclare var SVGFilterElement: {\r\n    prototype: SVGFilterElement;\r\n    new (): SVGFilterElement;\r\n}\r\n\r\ninterface TrackEvent extends Event {\r\n    track: any;\r\n}\r\ndeclare var TrackEvent: {\r\n    prototype: TrackEvent;\r\n    new (): TrackEvent;\r\n}\r\n\r\ninterface SVGFEMergeNodeElement extends SVGElement {\r\n    in1: SVGAnimatedString;\r\n}\r\ndeclare var SVGFEMergeNodeElement: {\r\n    prototype: SVGFEMergeNodeElement;\r\n    new (): SVGFEMergeNodeElement;\r\n}\r\n\r\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n}\r\ndeclare var SVGFEFloodElement: {\r\n    prototype: SVGFEFloodElement;\r\n    new (): SVGFEFloodElement;\r\n}\r\n\r\ninterface MSGesture {\r\n    target: Element;\r\n    addPointer(pointerId: number): void;\r\n    stop(): void;\r\n}\r\ndeclare var MSGesture: {\r\n    prototype: MSGesture;\r\n    new (): MSGesture;\r\n}\r\n\r\ninterface TextTrackCue extends EventTarget {\r\n    onenter: (ev: Event) => any;\r\n    addEventListener(type: "enter", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    track: TextTrack;\r\n    endTime: number;\r\n    text: string;\r\n    pauseOnExit: boolean;\r\n    id: string;\r\n    startTime: number;\r\n    onexit: (ev: Event) => any;\r\n    addEventListener(type: "exit", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    getCueAsHTML(): DocumentFragment;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var TextTrackCue: {\r\n    prototype: TextTrackCue;\r\n    new (): TextTrackCue;\r\n}\r\n\r\ninterface MSStreamReader extends MSBaseReader {\r\n    error: DOMError;\r\n    readAsArrayBuffer(stream: MSStream, size?: number): void;\r\n    readAsBlob(stream: MSStream, size?: number): void;\r\n    readAsDataURL(stream: MSStream, size?: number): void;\r\n    readAsText(stream: MSStream, encoding?: string, size?: number): void;\r\n}\r\ndeclare var MSStreamReader: {\r\n    prototype: MSStreamReader;\r\n    new (): MSStreamReader;\r\n}\r\n\r\ninterface DOMTokenList {\r\n    length: number;\r\n    contains(token: string): boolean;\r\n    remove(token: string): void;\r\n    toggle(token: string): boolean;\r\n    add(token: string): void;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n    toString(): string;\r\n}\r\ndeclare var DOMTokenList: {\r\n    prototype: DOMTokenList;\r\n    new (): DOMTokenList;\r\n}\r\n\r\ninterface EventException {\r\n    name: string;\r\n}\r\n\r\ninterface Performance {\r\n    now(): number;\r\n}\r\n\r\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncAElement: {\r\n    prototype: SVGFEFuncAElement;\r\n    new (): SVGFEFuncAElement;\r\n}\r\n\r\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n}\r\ndeclare var SVGFETileElement: {\r\n    prototype: SVGFETileElement;\r\n    new (): SVGFETileElement;\r\n}\r\n\r\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in2: SVGAnimatedString;\r\n    mode: SVGAnimatedEnumeration;\r\n    in1: SVGAnimatedString;\r\n    SVG_FEBLEND_MODE_DARKEN: number;\r\n    SVG_FEBLEND_MODE_UNKNOWN: number;\r\n    SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    SVG_FEBLEND_MODE_NORMAL: number;\r\n    SVG_FEBLEND_MODE_SCREEN: number;\r\n    SVG_FEBLEND_MODE_LIGHTEN: number;\r\n}\r\ndeclare var SVGFEBlendElement: {\r\n    prototype: SVGFEBlendElement;\r\n    new (): SVGFEBlendElement;\r\n    SVG_FEBLEND_MODE_DARKEN: number;\r\n    SVG_FEBLEND_MODE_UNKNOWN: number;\r\n    SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    SVG_FEBLEND_MODE_NORMAL: number;\r\n    SVG_FEBLEND_MODE_SCREEN: number;\r\n    SVG_FEBLEND_MODE_LIGHTEN: number;\r\n}\r\n\r\ninterface WindowTimers extends WindowTimersExtension {\r\n}\r\ndeclare var WindowTimers: {\r\n    prototype: WindowTimers;\r\n    new (): WindowTimers;\r\n}\r\n\r\ninterface CSSStyleDeclaration {\r\n    animationFillMode: string;\r\n    floodColor: string;\r\n    animationIterationCount: string;\r\n    textShadow: string;\r\n    backfaceVisibility: string;\r\n    msAnimationIterationCount: string;\r\n    animationDelay: string;\r\n    animationTimingFunction: string;\r\n    columnWidth: any;\r\n    msScrollSnapX: string;\r\n    columnRuleColor: any;\r\n    columnRuleWidth: any;\r\n    transitionDelay: string;\r\n    transition: string;\r\n    msFlowFrom: string;\r\n    msScrollSnapType: string;\r\n    msContentZoomSnapType: string;\r\n    msGridColumns: string;\r\n    msAnimationName: string;\r\n    msGridRowAlign: string;\r\n    msContentZoomChaining: string;\r\n    msGridColumn: any;\r\n    msHyphenateLimitZone: any;\r\n    msScrollRails: string;\r\n    msAnimationDelay: string;\r\n    enableBackground: string;\r\n    msWrapThrough: string;\r\n    columnRuleStyle: string;\r\n    msAnimation: string;\r\n    msFlexFlow: string;\r\n    msScrollSnapY: string;\r\n    msHyphenateLimitLines: any;\r\n    msTouchAction: string;\r\n    msScrollLimit: string;\r\n    animation: string;\r\n    transform: string;\r\n    filter: string;\r\n    colorInterpolationFilters: string;\r\n    transitionTimingFunction: string;\r\n    msBackfaceVisibility: string;\r\n    animationPlayState: string;\r\n    transformOrigin: string;\r\n    msScrollLimitYMin: any;\r\n    msFontFeatureSettings: string;\r\n    msContentZoomLimitMin: any;\r\n    columnGap: any;\r\n    transitionProperty: string;\r\n    msAnimationDuration: string;\r\n    msAnimationFillMode: string;\r\n    msFlexDirection: string;\r\n    msTransitionDuration: string;\r\n    fontFeatureSettings: string;\r\n    breakBefore: string;\r\n    msFlexWrap: string;\r\n    perspective: string;\r\n    msFlowInto: string;\r\n    msTransformStyle: string;\r\n    msScrollTranslation: string;\r\n    msTransitionProperty: string;\r\n    msUserSelect: string;\r\n    msOverflowStyle: string;\r\n    msScrollSnapPointsY: string;\r\n    animationDirection: string;\r\n    animationDuration: string;\r\n    msFlex: string;\r\n    msTransitionTimingFunction: string;\r\n    animationName: string;\r\n    columnRule: string;\r\n    msGridColumnSpan: any;\r\n    msFlexNegative: string;\r\n    columnFill: string;\r\n    msGridRow: any;\r\n    msFlexOrder: string;\r\n    msFlexItemAlign: string;\r\n    msFlexPositive: string;\r\n    msContentZoomLimitMax: any;\r\n    msScrollLimitYMax: any;\r\n    msGridColumnAlign: string;\r\n    perspectiveOrigin: string;\r\n    lightingColor: string;\r\n    columns: string;\r\n    msScrollChaining: string;\r\n    msHyphenateLimitChars: string;\r\n    msTouchSelect: string;\r\n    floodOpacity: string;\r\n    msAnimationDirection: string;\r\n    msAnimationPlayState: string;\r\n    columnSpan: string;\r\n    msContentZooming: string;\r\n    msPerspective: string;\r\n    msFlexPack: string;\r\n    msScrollSnapPointsX: string;\r\n    msContentZoomSnapPoints: string;\r\n    msGridRowSpan: any;\r\n    msContentZoomSnap: string;\r\n    msScrollLimitXMin: any;\r\n    breakInside: string;\r\n    msHighContrastAdjust: string;\r\n    msFlexLinePack: string;\r\n    msGridRows: string;\r\n    transitionDuration: string;\r\n    msHyphens: string;\r\n    breakAfter: string;\r\n    msTransition: string;\r\n    msPerspectiveOrigin: string;\r\n    msContentZoomLimit: string;\r\n    msScrollLimitXMax: any;\r\n    msFlexAlign: string;\r\n    msWrapMargin: any;\r\n    columnCount: any;\r\n    msAnimationTimingFunction: string;\r\n    msTransitionDelay: string;\r\n    transformStyle: string;\r\n    msWrapFlow: string;\r\n    msFlexPreferredSize: string;\r\n}\r\n\r\ninterface MessageChannel {\r\n    port2: MessagePort;\r\n    port1: MessagePort;\r\n}\r\ndeclare var MessageChannel: {\r\n    prototype: MessageChannel;\r\n    new (): MessageChannel;\r\n}\r\n\r\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n}\r\ndeclare var SVGFEMergeElement: {\r\n    prototype: SVGFEMergeElement;\r\n    new (): SVGFEMergeElement;\r\n}\r\n\r\ninterface Navigator extends MSFileSaver {\r\n    msMaxTouchPoints: number;\r\n    msPointerEnabled: boolean;\r\n    msManipulationViewsEnabled: boolean;\r\n    msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void;\r\n}\r\n\r\ninterface TransitionEvent extends Event {\r\n    propertyName: string;\r\n    elapsedTime: number;\r\n    initTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void;\r\n}\r\ndeclare var TransitionEvent: {\r\n    prototype: TransitionEvent;\r\n    new (): TransitionEvent;\r\n}\r\n\r\ninterface MediaQueryList {\r\n    matches: boolean;\r\n    media: string;\r\n    addListener(listener: MediaQueryListListener): void;\r\n    removeListener(listener: MediaQueryListListener): void;\r\n}\r\ndeclare var MediaQueryList: {\r\n    prototype: MediaQueryList;\r\n    new (): MediaQueryList;\r\n}\r\n\r\ninterface DOMError {\r\n    name: string;\r\n    toString(): string;\r\n}\r\ndeclare var DOMError: {\r\n    prototype: DOMError;\r\n    new (): DOMError;\r\n}\r\n\r\ninterface CloseEvent extends Event {\r\n    wasClean: boolean;\r\n    reason: string;\r\n    code: number;\r\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\r\n}\r\ndeclare var CloseEvent: {\r\n    prototype: CloseEvent;\r\n    new (): CloseEvent;\r\n}\r\n\r\ninterface WebSocket extends EventTarget {\r\n    protocol: string;\r\n    readyState: number;\r\n    bufferedAmount: number;\r\n    onopen: (ev: Event) => any;\r\n    addEventListener(type: "open", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    extensions: string;\r\n    onmessage: (ev: any) => any;\r\n    addEventListener(type: "message", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onclose: (ev: CloseEvent) => any;\r\n    addEventListener(type: "close", listener: (ev: CloseEvent) => any, useCapture?: boolean): void;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    binaryType: string;\r\n    url: string;\r\n    close(code?: number, reason?: string): void;\r\n    send(data: any): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    OPEN: number;\r\n    CLOSING: number;\r\n    CONNECTING: number;\r\n    CLOSED: number;\r\n}\r\ndeclare var WebSocket: {\r\n    prototype: WebSocket;\r\n    new (url: string): WebSocket;\r\n    new (url: string, prototcol: string): WebSocket;\r\n    new (url: string, prototcol: string[]): WebSocket;\r\n    OPEN: number;\r\n    CLOSING: number;\r\n    CONNECTING: number;\r\n    CLOSED: number;\r\n}\r\n\r\ninterface SVGFEPointLightElement extends SVGElement {\r\n    y: SVGAnimatedNumber;\r\n    x: SVGAnimatedNumber;\r\n    z: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEPointLightElement: {\r\n    prototype: SVGFEPointLightElement;\r\n    new (): SVGFEPointLightElement;\r\n}\r\n\r\ninterface ProgressEvent extends Event {\r\n    loaded: number;\r\n    lengthComputable: boolean;\r\n    total: number;\r\n    initProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;\r\n}\r\ndeclare var ProgressEvent: {\r\n    prototype: ProgressEvent;\r\n    new (): ProgressEvent;\r\n}\r\n\r\ninterface IDBObjectStore {\r\n    indexNames: DOMStringList;\r\n    name: string;\r\n    transaction: IDBTransaction;\r\n    keyPath: string;\r\n    count(key?: any): IDBRequest;\r\n    add(value: any, key?: any): IDBRequest;\r\n    clear(): IDBRequest;\r\n    createIndex(name: string, keyPath: string, optionalParameters?: any): IDBIndex;\r\n    put(value: any, key?: any): IDBRequest;\r\n    openCursor(range?: any, direction?: string): IDBRequest;\r\n    deleteIndex(indexName: string): void;\r\n    index(name: string): IDBIndex;\r\n    get(key: any): IDBRequest;\r\n    delete(key: any): IDBRequest;\r\n}\r\ndeclare var IDBObjectStore: {\r\n    prototype: IDBObjectStore;\r\n    new (): IDBObjectStore;\r\n}\r\n\r\ninterface HTMLCanvasElement {\r\n    /**\r\n      * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.\r\n      */\r\n    msToBlob(): Blob;\r\n}\r\n\r\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    stdDeviationX: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    stdDeviationY: SVGAnimatedNumber;\r\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\r\n}\r\ndeclare var SVGFEGaussianBlurElement: {\r\n    prototype: SVGFEGaussianBlurElement;\r\n    new (): SVGFEGaussianBlurElement;\r\n}\r\n\r\ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n    result: SVGAnimatedString;\r\n}\r\n\r\ninterface Element {\r\n    msRegionOverflow: string;\r\n    onmspointerdown: (ev: any) => any;\r\n    addEventListener(type: "mspointerdown", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgotpointercapture: (ev: any) => any;\r\n    addEventListener(type: "msgotpointercapture", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturedoubletap: (ev: any) => any;\r\n    addEventListener(type: "msgesturedoubletap", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerhover: (ev: any) => any;\r\n    addEventListener(type: "mspointerhover", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturehold: (ev: any) => any;\r\n    addEventListener(type: "msgesturehold", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointermove: (ev: any) => any;\r\n    addEventListener(type: "mspointermove", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturechange: (ev: any) => any;\r\n    addEventListener(type: "msgesturechange", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturestart: (ev: any) => any;\r\n    addEventListener(type: "msgesturestart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointercancel: (ev: any) => any;\r\n    addEventListener(type: "mspointercancel", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgestureend: (ev: any) => any;\r\n    addEventListener(type: "msgestureend", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturetap: (ev: any) => any;\r\n    addEventListener(type: "msgesturetap", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerout: (ev: any) => any;\r\n    addEventListener(type: "mspointerout", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsinertiastart: (ev: any) => any;\r\n    addEventListener(type: "msinertiastart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmslostpointercapture: (ev: any) => any;\r\n    addEventListener(type: "mslostpointercapture", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerover: (ev: any) => any;\r\n    addEventListener(type: "mspointerover", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msContentZoomFactor: number;\r\n    onmspointerup: (ev: any) => any;\r\n    addEventListener(type: "mspointerup", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msGetRegionContent(): MSRangeCollection;\r\n    msReleasePointerCapture(pointerId: number): void;\r\n    msSetPointerCapture(pointerId: number): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface IDBVersionChangeEvent extends Event {\r\n    newVersion: number;\r\n    oldVersion: number;\r\n}\r\ndeclare var IDBVersionChangeEvent: {\r\n    prototype: IDBVersionChangeEvent;\r\n    new (): IDBVersionChangeEvent;\r\n}\r\n\r\ninterface IDBIndex {\r\n    unique: boolean;\r\n    name: string;\r\n    keyPath: string;\r\n    objectStore: IDBObjectStore;\r\n    count(key?: any): IDBRequest;\r\n    getKey(key: any): IDBRequest;\r\n    openKeyCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\r\n    get(key: any): IDBRequest;\r\n    openCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\r\n}\r\ndeclare var IDBIndex: {\r\n    prototype: IDBIndex;\r\n    new (): IDBIndex;\r\n}\r\n\r\ninterface WheelEvent {\r\n    getCurrentPoint(element: Element): void;\r\n}\r\n\r\ninterface FileList {\r\n    length: number;\r\n    item(index: number): File;\r\n    [index: number]: File;\r\n}\r\ndeclare var FileList: {\r\n    prototype: FileList;\r\n    new (): FileList;\r\n}\r\n\r\ninterface IDBCursor {\r\n    source: any;\r\n    direction: string;\r\n    key: any;\r\n    primaryKey: any;\r\n    advance(count: number): void;\r\n    delete(): IDBRequest;\r\n    continue(key?: any): void;\r\n    update(value: any): IDBRequest;\r\n    PREV: string;\r\n    PREV_NO_DUPLICATE: string;\r\n    NEXT: string;\r\n    NEXT_NO_DUPLICATE: string;\r\n}\r\ndeclare var IDBCursor: {\r\n    prototype: IDBCursor;\r\n    new (): IDBCursor;\r\n    PREV: string;\r\n    PREV_NO_DUPLICATE: string;\r\n    NEXT: string;\r\n    NEXT_NO_DUPLICATE: string;\r\n}\r\n\r\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    surfaceScale: SVGAnimatedNumber;\r\n    specularExponent: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    specularConstant: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFESpecularLightingElement: {\r\n    prototype: SVGFESpecularLightingElement;\r\n    new (): SVGFESpecularLightingElement;\r\n}\r\n\r\ninterface File extends Blob {\r\n    lastModifiedDate: any;\r\n    name: string;\r\n}\r\ndeclare var File: {\r\n    prototype: File;\r\n    new (): File;\r\n}\r\n\r\ninterface URL {\r\n    revokeObjectURL(url: string): void;\r\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\r\n}\r\ndeclare var URL: URL;\r\n\r\ninterface RangeException {\r\n    name: string;\r\n}\r\n\r\ninterface IDBCursorWithValue extends IDBCursor {\r\n    value: any;\r\n}\r\ndeclare var IDBCursorWithValue: {\r\n    prototype: IDBCursorWithValue;\r\n    new (): IDBCursorWithValue;\r\n}\r\n\r\ninterface HTMLTextAreaElement {\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * When present, marks an element that can\'t be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ninterface XMLHttpRequestEventTarget extends EventTarget {\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    onload: (ev: any) => any;\r\n    addEventListener(type: "load", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    ontimeout: (ev: any) => any;\r\n    addEventListener(type: "timeout", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onabort: (ev: any) => any;\r\n    addEventListener(type: "abort", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onloadstart: (ev: any) => any;\r\n    addEventListener(type: "loadstart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var XMLHttpRequestEventTarget: {\r\n    prototype: XMLHttpRequestEventTarget;\r\n    new (): XMLHttpRequestEventTarget;\r\n}\r\n\r\ninterface IDBEnvironment {\r\n    msIndexedDB: IDBFactory;\r\n    indexedDB: IDBFactory;\r\n}\r\n\r\ninterface AudioTrackList extends EventTarget {\r\n    length: number;\r\n    onchange: (ev: any) => any;\r\n    addEventListener(type: "change", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    addEventListener(type: "addtrack", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    getTrackById(id: string): AudioTrack;\r\n    item(index: number): AudioTrack;\r\n    [index: number]: AudioTrack;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var AudioTrackList: {\r\n    prototype: AudioTrackList;\r\n    new (): AudioTrackList;\r\n}\r\n\r\ninterface MSBaseReader extends EventTarget {\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    readyState: number;\r\n    onabort: (ev: any) => any;\r\n    addEventListener(type: "abort", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    onload: (ev: any) => any;\r\n    addEventListener(type: "load", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onloadstart: (ev: any) => any;\r\n    addEventListener(type: "loadstart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    result: any;\r\n    abort(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    LOADING: number;\r\n    EMPTY: number;\r\n    DONE: number;\r\n}\r\n\r\ninterface History {\r\n    state: any;\r\n    replaceState(statedata: any, title: string, url?: string): void;\r\n    pushState(statedata: any, title: string, url?: string): void;\r\n}\r\n\r\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    operator: SVGAnimatedEnumeration;\r\n    radiusX: SVGAnimatedNumber;\r\n    radiusY: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n}\r\ndeclare var SVGFEMorphologyElement: {\r\n    prototype: SVGFEMorphologyElement;\r\n    new (): SVGFEMorphologyElement;\r\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n}\r\n\r\ninterface HTMLSelectElement {\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * When present, marks an element that can\'t be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ninterface CSSRule {\r\n    KEYFRAMES_RULE: number;\r\n    KEYFRAME_RULE: number;\r\n    VIEWPORT_RULE: number;\r\n}\r\n//declare var CSSRule: {\r\n//    prototype: CSSRule;\r\n//    KEYFRAMES_RULE: number;\r\n//    KEYFRAME_RULE: number;\r\n//    VIEWPORT_RULE: number;\r\n//}\r\n\r\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncRElement: {\r\n    prototype: SVGFEFuncRElement;\r\n    new (): SVGFEFuncRElement;\r\n}\r\n\r\ninterface WindowTimersExtension {\r\n    msSetImmediate(expression: any, ...args: any[]): number;\r\n    clearImmediate(handle: number): void;\r\n    msClearImmediate(handle: number): void;\r\n    setImmediate(expression: any, ...args: any[]): number;\r\n}\r\n\r\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in2: SVGAnimatedString;\r\n    xChannelSelector: SVGAnimatedEnumeration;\r\n    yChannelSelector: SVGAnimatedEnumeration;\r\n    scale: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    SVG_CHANNEL_B: number;\r\n    SVG_CHANNEL_R: number;\r\n    SVG_CHANNEL_G: number;\r\n    SVG_CHANNEL_UNKNOWN: number;\r\n    SVG_CHANNEL_A: number;\r\n}\r\ndeclare var SVGFEDisplacementMapElement: {\r\n    prototype: SVGFEDisplacementMapElement;\r\n    new (): SVGFEDisplacementMapElement;\r\n    SVG_CHANNEL_B: number;\r\n    SVG_CHANNEL_R: number;\r\n    SVG_CHANNEL_G: number;\r\n    SVG_CHANNEL_UNKNOWN: number;\r\n    SVG_CHANNEL_A: number;\r\n}\r\n\r\ninterface AnimationEvent extends Event {\r\n    animationName: string;\r\n    elapsedTime: number;\r\n    initAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void;\r\n}\r\ndeclare var AnimationEvent: {\r\n    prototype: AnimationEvent;\r\n    new (): AnimationEvent;\r\n}\r\n\r\ninterface SVGComponentTransferFunctionElement extends SVGElement {\r\n    tableValues: SVGAnimatedNumberList;\r\n    slope: SVGAnimatedNumber;\r\n    type: SVGAnimatedEnumeration;\r\n    exponent: SVGAnimatedNumber;\r\n    amplitude: SVGAnimatedNumber;\r\n    intercept: SVGAnimatedNumber;\r\n    offset: SVGAnimatedNumber;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n}\r\ndeclare var SVGComponentTransferFunctionElement: {\r\n    prototype: SVGComponentTransferFunctionElement;\r\n    new (): SVGComponentTransferFunctionElement;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n}\r\n\r\ninterface MSRangeCollection {\r\n    length: number;\r\n    item(index: number): Range;\r\n    [index: number]: Range;\r\n}\r\ndeclare var MSRangeCollection: {\r\n    prototype: MSRangeCollection;\r\n    new (): MSRangeCollection;\r\n}\r\n\r\ninterface SVGFEDistantLightElement extends SVGElement {\r\n    azimuth: SVGAnimatedNumber;\r\n    elevation: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEDistantLightElement: {\r\n    prototype: SVGFEDistantLightElement;\r\n    new (): SVGFEDistantLightElement;\r\n}\r\n\r\ninterface SVGException {\r\n    name: string;\r\n}\r\n\r\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncBElement: {\r\n    prototype: SVGFEFuncBElement;\r\n    new (): SVGFEFuncBElement;\r\n}\r\n\r\ninterface IDBKeyRange {\r\n    upper: any;\r\n    upperOpen: boolean;\r\n    lower: any;\r\n    lowerOpen: boolean;\r\n\r\n}\r\ndeclare var IDBKeyRange: {\r\n    prototype: IDBKeyRange;\r\n    new (): IDBKeyRange;\r\n    only(value: any): IDBKeyRange;\r\n    lowerBound(bound: any, open?: boolean): IDBKeyRange;\r\n    upperBound(bound: any, open?: boolean): IDBKeyRange;\r\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\r\n}\r\n\r\ninterface WindowConsole {\r\n    console: Console;\r\n}\r\n\r\ninterface IDBTransaction extends EventTarget {\r\n    oncomplete: (ev: Event) => any;\r\n    addEventListener(type: "complete", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    db: IDBDatabase;\r\n    mode: string;\r\n    error: DOMError;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    onabort: (ev: any) => any;\r\n    addEventListener(type: "abort", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    abort(): void;\r\n    objectStore(name: string): IDBObjectStore;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    READ_ONLY: string;\r\n    VERSION_CHANGE: string;\r\n    READ_WRITE: string;\r\n}\r\ndeclare var IDBTransaction: {\r\n    prototype: IDBTransaction;\r\n    new (): IDBTransaction;\r\n    READ_ONLY: string;\r\n    VERSION_CHANGE: string;\r\n    READ_WRITE: string;\r\n}\r\n\r\ninterface AudioTrack {\r\n    kind: string;\r\n    language: string;\r\n    id: string;\r\n    label: string;\r\n    enabled: boolean;\r\n}\r\ndeclare var AudioTrack: {\r\n    prototype: AudioTrack;\r\n    new (): AudioTrack;\r\n}\r\n\r\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    orderY: SVGAnimatedInteger;\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    orderX: SVGAnimatedInteger;\r\n    preserveAlpha: SVGAnimatedBoolean;\r\n    kernelMatrix: SVGAnimatedNumberList;\r\n    edgeMode: SVGAnimatedEnumeration;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    bias: SVGAnimatedNumber;\r\n    targetX: SVGAnimatedInteger;\r\n    targetY: SVGAnimatedInteger;\r\n    divisor: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    SVG_EDGEMODE_WRAP: number;\r\n    SVG_EDGEMODE_DUPLICATE: number;\r\n    SVG_EDGEMODE_UNKNOWN: number;\r\n    SVG_EDGEMODE_NONE: number;\r\n}\r\ndeclare var SVGFEConvolveMatrixElement: {\r\n    prototype: SVGFEConvolveMatrixElement;\r\n    new (): SVGFEConvolveMatrixElement;\r\n    SVG_EDGEMODE_WRAP: number;\r\n    SVG_EDGEMODE_DUPLICATE: number;\r\n    SVG_EDGEMODE_UNKNOWN: number;\r\n    SVG_EDGEMODE_NONE: number;\r\n}\r\n\r\ninterface TextTrackCueList {\r\n    length: number;\r\n    item(index: number): TextTrackCue;\r\n    [index: number]: TextTrackCue;\r\n    getCueById(id: string): TextTrackCue;\r\n}\r\ndeclare var TextTrackCueList: {\r\n    prototype: TextTrackCueList;\r\n    new (): TextTrackCueList;\r\n}\r\n\r\ninterface CSSKeyframesRule extends CSSRule {\r\n    name: string;\r\n    cssRules: CSSRuleList;\r\n    findRule(rule: string): CSSKeyframeRule;\r\n    deleteRule(rule: string): void;\r\n    appendRule(rule: string): void;\r\n}\r\ndeclare var CSSKeyframesRule: {\r\n    prototype: CSSKeyframesRule;\r\n    new (): CSSKeyframesRule;\r\n}\r\n\r\ninterface Window extends WindowBase64, IDBEnvironment, WindowConsole {\r\n    onmspointerdown: (ev: any) => any;\r\n    addEventListener(type: "mspointerdown", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    animationStartTime: number;\r\n    onmsgesturedoubletap: (ev: any) => any;\r\n    addEventListener(type: "msgesturedoubletap", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerhover: (ev: any) => any;\r\n    addEventListener(type: "mspointerhover", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturehold: (ev: any) => any;\r\n    addEventListener(type: "msgesturehold", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointermove: (ev: any) => any;\r\n    addEventListener(type: "mspointermove", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturechange: (ev: any) => any;\r\n    addEventListener(type: "msgesturechange", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturestart: (ev: any) => any;\r\n    addEventListener(type: "msgesturestart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointercancel: (ev: any) => any;\r\n    addEventListener(type: "mspointercancel", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgestureend: (ev: any) => any;\r\n    addEventListener(type: "msgestureend", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturetap: (ev: any) => any;\r\n    addEventListener(type: "msgesturetap", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerout: (ev: any) => any;\r\n    addEventListener(type: "mspointerout", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msAnimationStartTime: number;\r\n    applicationCache: ApplicationCache;\r\n    onmsinertiastart: (ev: any) => any;\r\n    addEventListener(type: "msinertiastart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerover: (ev: any) => any;\r\n    addEventListener(type: "mspointerover", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    addEventListener(type: "popstate", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    onmspointerup: (ev: any) => any;\r\n    addEventListener(type: "mspointerup", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msCancelRequestAnimationFrame(handle: number): void;\r\n    matchMedia(mediaQuery: string): MediaQueryList;\r\n    cancelAnimationFrame(handle: number): void;\r\n    msIsStaticHTML(html: string): boolean;\r\n    msMatchMedia(mediaQuery: string): MediaQueryList;\r\n    requestAnimationFrame(callback: FrameRequestCallback): number;\r\n    msRequestAnimationFrame(callback: FrameRequestCallback): number;\r\n}\r\n\r\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    baseFrequencyX: SVGAnimatedNumber;\r\n    numOctaves: SVGAnimatedInteger;\r\n    type: SVGAnimatedEnumeration;\r\n    baseFrequencyY: SVGAnimatedNumber;\r\n    stitchTiles: SVGAnimatedEnumeration;\r\n    seed: SVGAnimatedNumber;\r\n    SVG_STITCHTYPE_UNKNOWN: number;\r\n    SVG_STITCHTYPE_NOSTITCH: number;\r\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    SVG_STITCHTYPE_STITCH: number;\r\n}\r\ndeclare var SVGFETurbulenceElement: {\r\n    prototype: SVGFETurbulenceElement;\r\n    new (): SVGFETurbulenceElement;\r\n    SVG_STITCHTYPE_UNKNOWN: number;\r\n    SVG_STITCHTYPE_NOSTITCH: number;\r\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    SVG_STITCHTYPE_STITCH: number;\r\n}\r\n\r\ninterface TextTrackList {\r\n    length: number;\r\n    item(index: number): TextTrack;\r\n    [index: number]: TextTrack;\r\n}\r\ndeclare var TextTrackList: {\r\n    prototype: TextTrackList;\r\n    new (): TextTrackList;\r\n}\r\n\r\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncGElement: {\r\n    prototype: SVGFEFuncGElement;\r\n    new (): SVGFEFuncGElement;\r\n}\r\n\r\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    type: SVGAnimatedEnumeration;\r\n    values: SVGAnimatedNumberList;\r\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n}\r\ndeclare var SVGFEColorMatrixElement: {\r\n    prototype: SVGFEColorMatrixElement;\r\n    new (): SVGFEColorMatrixElement;\r\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n}\r\n\r\ninterface Console {\r\n    info(message?: any, ...optionalParams: any[]): void;\r\n    profile(reportName?: string): void;\r\n    assert(test?: boolean, message?: string, ...optionalParams: any[]): void;\r\n    msIsIndependentlyComposed(element: Element): boolean;\r\n    clear(): void;\r\n    dir(value?: any, ...optionalParams: any[]): void;\r\n    warn(message?: any, ...optionalParams: any[]): void;\r\n    error(message?: any, ...optionalParams: any[]): void;\r\n    log(message?: any, ...optionalParams: any[]): void;\r\n    profileEnd(): void;\r\n}\r\ndeclare var Console: {\r\n    prototype: Console;\r\n    new (): Console;\r\n}\r\n\r\ninterface SVGFESpotLightElement extends SVGElement {\r\n    pointsAtY: SVGAnimatedNumber;\r\n    y: SVGAnimatedNumber;\r\n    limitingConeAngle: SVGAnimatedNumber;\r\n    specularExponent: SVGAnimatedNumber;\r\n    x: SVGAnimatedNumber;\r\n    pointsAtZ: SVGAnimatedNumber;\r\n    z: SVGAnimatedNumber;\r\n    pointsAtX: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFESpotLightElement: {\r\n    prototype: SVGFESpotLightElement;\r\n    new (): SVGFESpotLightElement;\r\n}\r\n\r\ninterface HTMLImageElement {\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n}\r\n\r\ninterface WindowBase64 {\r\n    btoa(rawString: string): string;\r\n    atob(encodedString: string): string;\r\n}\r\n\r\ninterface IDBDatabase extends EventTarget {\r\n    version: string;\r\n    name: string;\r\n    objectStoreNames: DOMStringList;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    onabort: (ev: any) => any;\r\n    addEventListener(type: "abort", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    createObjectStore(name: string, optionalParameters?: any): IDBObjectStore;\r\n    close(): void;\r\n    transaction(storeNames: any, mode?: string): IDBTransaction;\r\n    deleteObjectStore(name: string): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBDatabase: {\r\n    prototype: IDBDatabase;\r\n    new (): IDBDatabase;\r\n}\r\n\r\ninterface DOMStringList {\r\n    length: number;\r\n    contains(str: string): boolean;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n}\r\ndeclare var DOMStringList: {\r\n    prototype: DOMStringList;\r\n    new (): DOMStringList;\r\n}\r\n\r\ninterface HTMLButtonElement {\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ninterface IDBOpenDBRequest extends IDBRequest {\r\n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any;\r\n    addEventListener(type: "upgradeneeded", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\r\n    onblocked: (ev: Event) => any;\r\n    addEventListener(type: "blocked", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBOpenDBRequest: {\r\n    prototype: IDBOpenDBRequest;\r\n    new (): IDBOpenDBRequest;\r\n}\r\n\r\ninterface HTMLProgressElement extends HTMLElement {\r\n    /**\r\n      * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\r\n      */\r\n    value: number;\r\n    /**\r\n      * Defines the maximum, or "done" value for a progress element.\r\n      */\r\n    max: number;\r\n    /**\r\n      * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\r\n      */\r\n    position: number;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLProgressElement: {\r\n    prototype: HTMLProgressElement;\r\n    new (): HTMLProgressElement;\r\n}\r\n\r\ninterface MSLaunchUriCallback {\r\n    (): void;\r\n}\r\n\r\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    dy: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    dx: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEOffsetElement: {\r\n    prototype: SVGFEOffsetElement;\r\n    new (): SVGFEOffsetElement;\r\n}\r\n\r\ninterface HTMLFormElement {\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Designates a form that is not validated when submitted.\r\n      */\r\n    noValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n}\r\n\r\ninterface MSUnsafeFunctionCallback {\r\n    (): any;\r\n}\r\n\r\ninterface Document {\r\n    onmspointerdown: (ev: any) => any;\r\n    addEventListener(type: "mspointerdown", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msHidden: boolean;\r\n    msVisibilityState: string;\r\n    onmsgesturedoubletap: (ev: any) => any;\r\n    addEventListener(type: "msgesturedoubletap", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    visibilityState: string;\r\n    onmsmanipulationstatechanged: (ev: any) => any;\r\n    addEventListener(type: "msmanipulationstatechanged", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerhover: (ev: any) => any;\r\n    addEventListener(type: "mspointerhover", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmscontentzoom: (ev: any) => any;\r\n    addEventListener(type: "mscontentzoom", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointermove: (ev: any) => any;\r\n    addEventListener(type: "mspointermove", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturehold: (ev: any) => any;\r\n    addEventListener(type: "msgesturehold", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturechange: (ev: any) => any;\r\n    addEventListener(type: "msgesturechange", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturestart: (ev: any) => any;\r\n    addEventListener(type: "msgesturestart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointercancel: (ev: any) => any;\r\n    addEventListener(type: "mspointercancel", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgestureend: (ev: any) => any;\r\n    addEventListener(type: "msgestureend", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsgesturetap: (ev: any) => any;\r\n    addEventListener(type: "msgesturetap", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerout: (ev: any) => any;\r\n    addEventListener(type: "mspointerout", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmsinertiastart: (ev: any) => any;\r\n    addEventListener(type: "msinertiastart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msCSSOMElementFloatMetrics: boolean;\r\n    onmspointerover: (ev: any) => any;\r\n    addEventListener(type: "mspointerover", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    hidden: boolean;\r\n    onmspointerup: (ev: any) => any;\r\n    addEventListener(type: "mspointerup", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msElementsFromPoint(x: number, y: number): NodeList;\r\n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeList;\r\n    clear(): void;\r\n}\r\n\r\ninterface MessageEvent extends Event {\r\n    ports: any;\r\n}\r\n\r\ninterface HTMLScriptElement {\r\n    async: boolean;\r\n}\r\n\r\ninterface HTMLMediaElement {\r\n    /**\r\n      * Specifies the purpose of the audio or video media, such as background audio or alerts.\r\n      */\r\n    msAudioCategory: string;\r\n    /**\r\n      * Specifies whether or not to enable low-latency playback on the media element.\r\n      */\r\n    msRealTime: boolean;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    textTracks: TextTrackList;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Returns an AudioTrackList object with the audio tracks for a given video element.\r\n      */\r\n    audioTracks: AudioTrackList;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Specifies the output device id that the audio will be sent to.\r\n      */\r\n    msAudioDeviceType: string;\r\n    /**\r\n      * Clears all effects from the media pipeline.\r\n      */\r\n    msClearEffects(): void;\r\n    /**\r\n      * Specifies the media protection manager for a given media pipeline.\r\n      */\r\n    msSetMediaProtectionManager(mediaProtectionManager?: any): void;\r\n    /**\r\n      * Inserts the specified audio effect into media pipeline.\r\n      */\r\n    msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n}\r\n\r\ninterface TextTrack extends EventTarget {\r\n    language: string;\r\n    mode: any;\r\n    readyState: number;\r\n    activeCues: TextTrackCueList;\r\n    cues: TextTrackCueList;\r\n    oncuechange: (ev: Event) => any;\r\n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    kind: string;\r\n    onload: (ev: any) => any;\r\n    addEventListener(type: "load", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    label: string;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    ERROR: number;\r\n    SHOWING: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n    HIDDEN: number;\r\n    DISABLED: number;\r\n}\r\ndeclare var TextTrack: {\r\n    prototype: TextTrack;\r\n    new (): TextTrack;\r\n    ERROR: number;\r\n    SHOWING: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n    HIDDEN: number;\r\n    DISABLED: number;\r\n}\r\n\r\ninterface MediaQueryListListener {\r\n    (mql: MediaQueryList): void;\r\n}\r\n\r\ninterface IDBRequest extends EventTarget {\r\n    source: any;\r\n    onsuccess: (ev: Event) => any;\r\n    addEventListener(type: "success", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    error: DOMError;\r\n    transaction: IDBTransaction;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    readyState: string;\r\n    result: any;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBRequest: {\r\n    prototype: IDBRequest;\r\n    new (): IDBRequest;\r\n}\r\n\r\ninterface MessagePort extends EventTarget {\r\n    onmessage: (ev: any) => any;\r\n    addEventListener(type: "message", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    close(): void;\r\n    postMessage(message: any, ports?: any): void;\r\n    start(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var MessagePort: {\r\n    prototype: MessagePort;\r\n    new (): MessagePort;\r\n}\r\n\r\ninterface FileReader extends MSBaseReader {\r\n    error: DOMError;\r\n    readAsArrayBuffer(blob: Blob): void;\r\n    readAsDataURL(blob: Blob): void;\r\n    readAsText(blob: Blob, encoding?: string): void;\r\n}\r\ndeclare var FileReader: {\r\n    prototype: FileReader;\r\n    new (): FileReader;\r\n}\r\n\r\ninterface BlobPropertyBag {\r\n    type?: string;\r\n    endings?: string;\r\n}\r\n\r\ninterface Blob {\r\n    type: string;\r\n    size: number;\r\n    msDetachStream(): any;\r\n    slice(start?: number, end?: number, contentType?: string): Blob;\r\n    close(): void;\r\n    msClose(): void;\r\n}\r\ndeclare var Blob: {\r\n    prototype: Blob;\r\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\r\n}\r\n\r\ninterface ApplicationCache extends EventTarget {\r\n    status: number;\r\n    ondownloading: (ev: Event) => any;\r\n    addEventListener(type: "downloading", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    onupdateready: (ev: Event) => any;\r\n    addEventListener(type: "updateready", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    oncached: (ev: Event) => any;\r\n    addEventListener(type: "cached", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onobsolete: (ev: Event) => any;\r\n    addEventListener(type: "obsolete", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    onchecking: (ev: Event) => any;\r\n    addEventListener(type: "checking", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    onnoupdate: (ev: Event) => any;\r\n    addEventListener(type: "noupdate", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    swapCache(): void;\r\n    abort(): void;\r\n    update(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    CHECKING: number;\r\n    UNCACHED: number;\r\n    UPDATEREADY: number;\r\n    DOWNLOADING: number;\r\n    IDLE: number;\r\n    OBSOLETE: number;\r\n}\r\ndeclare var ApplicationCache: {\r\n    prototype: ApplicationCache;\r\n    new (): ApplicationCache;\r\n    CHECKING: number;\r\n    UNCACHED: number;\r\n    UPDATEREADY: number;\r\n    DOWNLOADING: number;\r\n    IDLE: number;\r\n    OBSOLETE: number;\r\n}\r\n\r\ninterface FrameRequestCallback {\r\n    (time: number): void;\r\n}\r\n\r\ninterface XMLHttpRequest {\r\n    response: any;\r\n    withCredentials: boolean;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "progress", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    onabort: (ev: any) => any;\r\n    addEventListener(type: "abort", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    responseType: string;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    addEventListener(type: "loadend", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    upload: XMLHttpRequestEventTarget;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    onloadstart: (ev: any) => any;\r\n    addEventListener(type: "loadstart", listener: (ev: any) => any, useCapture?: boolean): void;\r\n}\r\n\r\ninterface PopStateEvent extends Event {\r\n    state: any;\r\n    initPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void;\r\n}\r\ndeclare var PopStateEvent: {\r\n    prototype: PopStateEvent;\r\n    new (): PopStateEvent;\r\n}\r\n\r\ninterface CSSKeyframeRule extends CSSRule {\r\n    keyText: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\ndeclare var CSSKeyframeRule: {\r\n    prototype: CSSKeyframeRule;\r\n    new (): CSSKeyframeRule;\r\n}\r\n\r\ninterface MSFileSaver {\r\n    msSaveBlob(blob: any, defaultName?: string): boolean;\r\n    msSaveOrOpenBlob(blob: any, defaultName?: string): boolean;\r\n}\r\n\r\ninterface MSStream {\r\n    type: string;\r\n    msDetachStream(): any;\r\n    msClose(): void;\r\n}\r\ndeclare var MSStream: {\r\n    prototype: MSStream;\r\n    new (): MSStream;\r\n}\r\n\r\ninterface MediaError {\r\n    msExtendedCode: number;\r\n}\r\n\r\ninterface HTMLFieldSetElement {\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ninterface MSBlobBuilder {\r\n    append(data: any, endings?: string): void;\r\n    getBlob(contentType?: string): Blob;\r\n}\r\ndeclare var MSBlobBuilder: {\r\n    prototype: MSBlobBuilder;\r\n    new (): MSBlobBuilder;\r\n}\r\n\r\ninterface HTMLElement {\r\n    onmscontentzoom: (ev: any) => any;\r\n    addEventListener(type: "mscontentzoom", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    oncuechange: (ev: Event) => any;\r\n    addEventListener(type: "cuechange", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    spellcheck: boolean;\r\n    classList: DOMTokenList;\r\n    onmsmanipulationstatechanged: (ev: any) => any;\r\n    addEventListener(type: "msmanipulationstatechanged", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    draggable: boolean;\r\n}\r\n\r\ninterface DataTransfer {\r\n    types: DOMStringList;\r\n    files: FileList;\r\n}\r\n\r\ninterface DOMSettableTokenList extends DOMTokenList {\r\n    value: string;\r\n}\r\ndeclare var DOMSettableTokenList: {\r\n    prototype: DOMSettableTokenList;\r\n    new (): DOMSettableTokenList;\r\n}\r\n\r\ninterface IDBFactory {\r\n    open(name: string, version?: number): IDBOpenDBRequest;\r\n    cmp(first: any, second: any): number;\r\n    deleteDatabase(name: string): IDBOpenDBRequest;\r\n}\r\ndeclare var IDBFactory: {\r\n    prototype: IDBFactory;\r\n    new (): IDBFactory;\r\n}\r\n\r\ninterface Range {\r\n    createContextualFragment(fragment: string): DocumentFragment;\r\n}\r\n\r\ninterface HTMLObjectElement {\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ninterface MSPointerEvent extends MouseEvent {\r\n    width: number;\r\n    rotation: number;\r\n    pressure: number;\r\n    pointerType: any;\r\n    isPrimary: boolean;\r\n    tiltY: number;\r\n    height: number;\r\n    intermediatePoints: any;\r\n    currentPoint: any;\r\n    tiltX: number;\r\n    hwTimestamp: number;\r\n    pointerId: number;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n    MSPOINTER_TYPE_PEN: number;\r\n    MSPOINTER_TYPE_MOUSE: number;\r\n    MSPOINTER_TYPE_TOUCH: number;\r\n}\r\ndeclare var MSPointerEvent: {\r\n    prototype: MSPointerEvent;\r\n    new (): MSPointerEvent;\r\n    MSPOINTER_TYPE_PEN: number;\r\n    MSPOINTER_TYPE_MOUSE: number;\r\n    MSPOINTER_TYPE_TOUCH: number;\r\n}\r\n\r\ninterface DOMException {\r\n    name: string;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    DATA_CLONE_ERR: number;\r\n    TIMEOUT_ERR: number;\r\n}\r\n//declare var DOMException: {\r\n//    prototype: DOMException;\r\n//    INVALID_NODE_TYPE_ERR: number;\r\n//    DATA_CLONE_ERR: number;\r\n//    TIMEOUT_ERR: number;\r\n//}\r\n\r\ninterface MSManipulationEvent extends UIEvent {\r\n    lastState: number;\r\n    currentState: number;\r\n    initMSManipulationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, lastState: number, currentState: number): void;\r\n    MS_MANIPULATION_STATE_STOPPED: number;\r\n    MS_MANIPULATION_STATE_ACTIVE: number;\r\n    MS_MANIPULATION_STATE_INERTIA: number;\r\n}\r\ndeclare var MSManipulationEvent: {\r\n    prototype: MSManipulationEvent;\r\n    new (): MSManipulationEvent;\r\n    MS_MANIPULATION_STATE_STOPPED: number;\r\n    MS_MANIPULATION_STATE_ACTIVE: number;\r\n    MS_MANIPULATION_STATE_INERTIA: number;\r\n}\r\n\r\ninterface FormData {\r\n    append(name: any, value: any, blobName?: string): void;\r\n}\r\ndeclare var FormData: {\r\n    prototype: FormData;\r\n    new (form?: HTMLFormElement): FormData;\r\n}\r\n\r\ninterface HTMLDataListElement extends HTMLElement {\r\n    options: HTMLCollection;\r\n}\r\ndeclare var HTMLDataListElement: {\r\n    prototype: HTMLDataListElement;\r\n    new (): HTMLDataListElement;\r\n}\r\n\r\ninterface SVGFEImageElement extends SVGElement, SVGLangSpace, SVGFilterPrimitiveStandardAttributes, SVGURIReference, SVGExternalResourcesRequired {\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n}\r\ndeclare var SVGFEImageElement: {\r\n    prototype: SVGFEImageElement;\r\n    new (): SVGFEImageElement;\r\n}\r\n\r\ninterface AbstractWorker extends EventTarget {\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: "error", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    operator: SVGAnimatedEnumeration;\r\n    in2: SVGAnimatedString;\r\n    k2: SVGAnimatedNumber;\r\n    k1: SVGAnimatedNumber;\r\n    k3: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    k4: SVGAnimatedNumber;\r\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n}\r\ndeclare var SVGFECompositeElement: {\r\n    prototype: SVGFECompositeElement;\r\n    new (): SVGFECompositeElement;\r\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n}\r\n\r\ninterface ValidityState {\r\n    customError: boolean;\r\n    valueMissing: boolean;\r\n    stepMismatch: boolean;\r\n    rangeUnderflow: boolean;\r\n    rangeOverflow: boolean;\r\n    typeMismatch: boolean;\r\n    patternMismatch: boolean;\r\n    tooLong: boolean;\r\n    valid: boolean;\r\n}\r\ndeclare var ValidityState: {\r\n    prototype: ValidityState;\r\n    new (): ValidityState;\r\n}\r\n\r\ninterface HTMLTrackElement extends HTMLElement {\r\n    kind: string;\r\n    src: string;\r\n    srclang: string;\r\n    track: TextTrack;\r\n    label: string;\r\n    default: boolean;\r\n}\r\ndeclare var HTMLTrackElement: {\r\n    prototype: HTMLTrackElement;\r\n    new (): HTMLTrackElement;\r\n}\r\n\r\ninterface MSApp {\r\n    createFileFromStorageFile(storageFile: any): File;\r\n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob;\r\n    createStreamFromInputStream(type: string, inputStream: any): MSStream;\r\n    terminateApp(exceptionObject: any): void;\r\n    createDataPackage(object: any): any;\r\n    execUnsafeLocalFunction(unsafeFunction: MSUnsafeFunctionCallback): any;\r\n    getHtmlPrintDocumentSource(htmlDoc: any): any;\r\n    addPublicLocalApplicationUri(uri: string): void;\r\n    createDataPackageFromSelection(): any;\r\n}\r\ndeclare var MSApp: MSApp;\r\n\r\ninterface HTMLVideoElement {\r\n    msIsStereo3D: boolean;\r\n    msStereo3DPackingMode: string;\r\n    onMSVideoOptimalLayoutChanged: (ev: any) => any;\r\n    addEventListener(type: "MSVideoOptimalLayoutChanged", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onMSVideoFrameStepCompleted: (ev: any) => any;\r\n    addEventListener(type: "MSVideoFrameStepCompleted", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msStereo3DRenderMode: string;\r\n    msIsLayoutOptimalForPlayback: boolean;\r\n    msHorizontalMirror: boolean;\r\n    onMSVideoFormatChanged: (ev: any) => any;\r\n    addEventListener(type: "MSVideoFormatChanged", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msZoom: boolean;\r\n    msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\r\n    msFrameStep(forward: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n}\r\ndeclare var SVGFEComponentTransferElement: {\r\n    prototype: SVGFEComponentTransferElement;\r\n    new (): SVGFEComponentTransferElement;\r\n}\r\n\r\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    surfaceScale: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    diffuseConstant: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEDiffuseLightingElement: {\r\n    prototype: SVGFEDiffuseLightingElement;\r\n    new (): SVGFEDiffuseLightingElement;\r\n}\r\n\r\ninterface MSCSSMatrix {\r\n    m24: number;\r\n    m34: number;\r\n    a: number;\r\n    d: number;\r\n    m32: number;\r\n    m41: number;\r\n    m11: number;\r\n    f: number;\r\n    e: number;\r\n    m23: number;\r\n    m14: number;\r\n    m33: number;\r\n    m22: number;\r\n    m21: number;\r\n    c: number;\r\n    m12: number;\r\n    b: number;\r\n    m42: number;\r\n    m31: number;\r\n    m43: number;\r\n    m13: number;\r\n    m44: number;\r\n    multiply(secondMatrix: MSCSSMatrix): MSCSSMatrix;\r\n    skewY(angle: number): MSCSSMatrix;\r\n    setMatrixValue(value: string): void;\r\n    inverse(): MSCSSMatrix;\r\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): MSCSSMatrix;\r\n    toString(): string;\r\n    rotate(angleX: number, angleY?: number, angleZ?: number): MSCSSMatrix;\r\n    translate(x: number, y: number, z?: number): MSCSSMatrix;\r\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): MSCSSMatrix;\r\n    skewX(angle: number): MSCSSMatrix;\r\n}\r\ndeclare var MSCSSMatrix: {\r\n    prototype: MSCSSMatrix;\r\n    new (text?: string): MSCSSMatrix;\r\n}\r\n\r\ninterface Worker extends AbstractWorker {\r\n    onmessage: (ev: any) => any;\r\n    addEventListener(type: "message", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    postMessage(message: any, ports?: any): void;\r\n    terminate(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Worker: {\r\n    prototype: Worker;\r\n    new (stringUrl: string): Worker;\r\n}\r\n\r\ninterface HTMLIFrameElement {\r\n    sandbox: DOMSettableTokenList;\r\n}\r\n\r\ndeclare var onmspointerdown: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerdown", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var animationStartTime: number;\r\ndeclare var onmsgesturedoubletap: (ev: any) => any;\r\ndeclare function addEventListener(type: "msgesturedoubletap", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmspointerhover: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerhover", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmsgesturehold: (ev: any) => any;\r\ndeclare function addEventListener(type: "msgesturehold", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmspointermove: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointermove", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmsgesturechange: (ev: any) => any;\r\ndeclare function addEventListener(type: "msgesturechange", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmsgesturestart: (ev: any) => any;\r\ndeclare function addEventListener(type: "msgesturestart", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmspointercancel: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointercancel", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmsgestureend: (ev: any) => any;\r\ndeclare function addEventListener(type: "msgestureend", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmsgesturetap: (ev: any) => any;\r\ndeclare function addEventListener(type: "msgesturetap", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmspointerout: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerout", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var msAnimationStartTime: number;\r\ndeclare var applicationCache: ApplicationCache;\r\ndeclare var onmsinertiastart: (ev: any) => any;\r\ndeclare function addEventListener(type: "msinertiastart", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onmspointerover: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerover", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onpopstate: (ev: PopStateEvent) => any;\r\ndeclare function addEventListener(type: "popstate", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\ndeclare var onmspointerup: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerup", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function msCancelRequestAnimationFrame(handle: number): void;\r\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function cancelAnimationFrame(handle: number): void;\r\ndeclare function msIsStaticHTML(html: string): boolean;\r\ndeclare function msMatchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function msRequestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function btoa(rawString: string): string;\r\ndeclare function atob(encodedString: string): string;\r\ndeclare var msIndexedDB: IDBFactory;\r\ndeclare var indexedDB: IDBFactory;\r\ndeclare var console: Console;\r\n\r\n/////////////////////////////\r\n/// IE11 DOM APIs \r\n/////////////////////////////\r\n\r\n\r\ninterface StoreExceptionsInformation extends ExceptionInformation {\r\n    siteName?: string;\r\n    explanationString?: string;\r\n    detailURI?: string;\r\n}\r\n\r\ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {\r\n    arrayOfDomainStrings?: Array<string>;\r\n}\r\n\r\ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {\r\n    arrayOfDomainStrings?: Array<string>;\r\n}\r\n\r\ninterface AlgorithmParameters {\r\n}\r\n\r\ninterface MutationObserverInit {\r\n    childList?: boolean;\r\n    attributes?: boolean;\r\n    characterData?: boolean;\r\n    subtree?: boolean;\r\n    attributeOldValue?: boolean;\r\n    characterDataOldValue?: boolean;\r\n    attributeFilter?: Array<string>;\r\n}\r\n\r\ninterface ExceptionInformation {\r\n    domain?: string;\r\n}\r\n\r\ninterface MsZoomToOptions {\r\n    contentX?: number;\r\n    contentY?: number;\r\n    viewportX?: string;\r\n    viewportY?: string;\r\n    scaleFactor?: number;\r\n    animate?: string;\r\n}\r\n\r\ninterface DeviceAccelerationDict {\r\n    x?: number;\r\n    y?: number;\r\n    z?: number;\r\n}\r\n\r\ninterface DeviceRotationRateDict {\r\n    alpha?: number;\r\n    beta?: number;\r\n    gamma?: number;\r\n}\r\n\r\ninterface Algorithm {\r\n    name?: string;\r\n    params?: AlgorithmParameters;\r\n}\r\n\r\ninterface NavigatorID {\r\n    product: string;\r\n    vendor: string;\r\n}\r\n\r\ninterface HTMLBodyElement {\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MSExecAtPriorityFunctionCallback {\r\n    (...args: any[]): any;\r\n}\r\n\r\ninterface MSWindowExtensions {\r\n    captureEvents(): void;\r\n    releaseEvents(): void;\r\n}\r\n\r\ninterface MSGraphicsTrust {\r\n    status: string;\r\n    constrictionActive: boolean;\r\n}\r\n\r\ninterface AudioTrack {\r\n    sourceBuffer: SourceBuffer;\r\n}\r\n\r\ninterface DragEvent {\r\n    msConvertURL(file: File, targetType: string, targetURL?: string): void;\r\n}\r\n\r\ninterface SubtleCrypto {\r\n    unwrapKey(wrappedKey: ArrayBufferView, keyAlgorithm: any, keyEncryptionKey: Key, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    encrypt(algorithm: any, key: Key, buffer?: ArrayBufferView): CryptoOperation;\r\n    importKey(format: string, keyData: ArrayBufferView, algorithm: any, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    wrapKey(key: Key, keyEncryptionKey: Key, keyWrappingAlgorithm: any): KeyOperation;\r\n    verify(algorithm: any, key: Key, signature: ArrayBufferView, buffer?: ArrayBufferView): CryptoOperation;\r\n    deriveKey(algorithm: any, baseKey: Key, derivedKeyType: any, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    digest(algorithm: any, buffer?: ArrayBufferView): CryptoOperation;\r\n    exportKey(format: string, key: Key): KeyOperation;\r\n    generateKey(algorithm: any, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    sign(algorithm: any, key: Key, buffer?: ArrayBufferView): CryptoOperation;\r\n    decrypt(algorithm: any, key: Key, buffer?: ArrayBufferView): CryptoOperation;\r\n}\r\n\r\ninterface Crypto extends RandomSource {\r\n    subtle: SubtleCrypto;\r\n}\r\n\r\ninterface VideoPlaybackQuality {\r\n    totalFrameDelay: number;\r\n    creationTime: number;\r\n    totalVideoFrames: number;\r\n    droppedVideoFrames: number;\r\n}\r\n\r\ninterface GlobalEventHandlers {\r\n    onpointerenter: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointerout: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointerdown: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointerup: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointercancel: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointerover: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointermove: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onpointerleave: (ev: PointerEvent) => any;\r\n    addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface Window extends GlobalEventHandlers {\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    ondevicemotion: (ev: DeviceMotionEvent) => any;\r\n    addEventListener(type: "devicemotion", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\n    devicePixelRatio: number;\r\n    msCrypto: Crypto;\r\n    ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\n    addEventListener(type: "deviceorientation", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\n    oncompassneedscalibration: (ev: any) => any;\r\n    addEventListener(type: "compassneedscalibration", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    doNotTrack: string;\r\n    onmspointerenter: (ev: any) => any;\r\n    addEventListener(type: "mspointerenter", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    onmspointerleave: (ev: any) => any;\r\n    addEventListener(type: "mspointerleave", listener: (ev: any) => any, useCapture?: boolean): void;\r\n}\r\n\r\ninterface Key {\r\n    algorithm: Algorithm;\r\n    type: string;\r\n    extractable: boolean;\r\n    keyUsage: string[];\r\n}\r\n\r\ninterface TextTrackList extends EventTarget {\r\n    onaddtrack: (ev: any) => any;\r\n    addEventListener(type: "addtrack", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface DeviceAcceleration {\r\n    y: number;\r\n    x: number;\r\n    z: number;\r\n}\r\n\r\ninterface Console {\r\n    count(countTitle?: string): void;\r\n    groupEnd(): void;\r\n    time(timerName?: string): void;\r\n    timeEnd(timerName?: string): void;\r\n    trace(): void;\r\n    group(groupTitle?: string): void;\r\n    dirxml(value: any): void;\r\n    debug(message?: string, ...optionalParams: any[]): void;\r\n    groupCollapsed(groupTitle?: string): void;\r\n    select(element: Element): void;\r\n}\r\n\r\ninterface MSNavigatorDoNotTrack {\r\n    removeSiteSpecificTrackingException(args: ExceptionInformation): void;\r\n    removeWebWideTrackingException(args: ExceptionInformation): void;\r\n    storeWebWideTrackingException(args: StoreExceptionsInformation): void;\r\n    storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void;\r\n    confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean;\r\n    confirmWebWideTrackingException(args: ExceptionInformation): boolean;\r\n}\r\n\r\ninterface HTMLImageElement {\r\n    crossOrigin: string;\r\n    msPlayToPreferredSourceUri: string;\r\n}\r\n\r\ninterface HTMLAllCollection extends HTMLCollection {\r\n    namedItem(name: string): Element;\r\n    //[name: string]: Element;\r\n}\r\n\r\ninterface MSNavigatorExtensions {\r\n    language: string;\r\n}\r\n\r\ninterface AesGcmEncryptResult {\r\n    ciphertext: ArrayBuffer;\r\n    tag: ArrayBuffer;\r\n}\r\n\r\ninterface HTMLSourceElement {\r\n    msKeySystem: string;\r\n}\r\n\r\ninterface CSSStyleDeclaration {\r\n    alignItems: string;\r\n    borderImageSource: string;\r\n    flexBasis: string;\r\n    borderImageWidth: string;\r\n    borderImageRepeat: string;\r\n    order: string;\r\n    flex: string;\r\n    alignContent: string;\r\n    msImeAlign: string;\r\n    flexShrink: string;\r\n    flexGrow: string;\r\n    borderImageSlice: string;\r\n    flexWrap: string;\r\n    borderImageOutset: string;\r\n    flexDirection: string;\r\n    touchAction: string;\r\n    flexFlow: string;\r\n    borderImage: string;\r\n    justifyContent: string;\r\n    alignSelf: string;\r\n    msTextCombineHorizontal: string;\r\n}\r\n\r\ninterface NavigationCompletedEvent extends NavigationEvent {\r\n    webErrorStatus: number;\r\n    isSuccess: boolean;\r\n}\r\n\r\ninterface MutationRecord {\r\n    oldValue: string;\r\n    previousSibling: Node;\r\n    addedNodes: NodeList;\r\n    attributeName: string;\r\n    removedNodes: NodeList;\r\n    target: Node;\r\n    nextSibling: Node;\r\n    attributeNamespace: string;\r\n    type: string;\r\n}\r\n\r\ninterface Navigator {\r\n    pointerEnabled: boolean;\r\n    maxTouchPoints: number;\r\n}\r\n\r\ninterface Document extends MSDocumentExtensions, GlobalEventHandlers {\r\n    msFullscreenEnabled: boolean;\r\n    onmsfullscreenerror: (ev: any) => any;\r\n    addEventListener(type: "msfullscreenerror", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerenter: (ev: any) => any;\r\n    addEventListener(type: "mspointerenter", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msFullscreenElement: Element;\r\n    onmsfullscreenchange: (ev: any) => any;\r\n    addEventListener(type: "msfullscreenchange", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onmspointerleave: (ev: any) => any;\r\n    addEventListener(type: "mspointerleave", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msExitFullscreen(): void;\r\n}\r\n\r\ninterface MimeTypeArray {\r\n    length: number;\r\n    item(index: number): Plugin;\r\n    [index: number]: Plugin;\r\n    namedItem(type: string): Plugin;\r\n    //[type: string]: Plugin;\r\n}\r\n\r\ninterface HTMLMediaElement {\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    onmsneedkey: (ev: MSMediaKeyNeededEvent) => any;\r\n    addEventListener(type: "msneedkey", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    /**\r\n      * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\r\n      */\r\n    msKeys: MSMediaKeys;\r\n    msGraphicsTrustStatus: MSGraphicsTrust;\r\n    msSetMediaKeys(mediaKeys: MSMediaKeys): void;\r\n    addTextTrack(kind: string, label?: string, language?: string): TextTrack;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface TextTrack {\r\n    addCue(cue: TextTrackCue): void;\r\n    removeCue(cue: TextTrackCue): void;\r\n}\r\n\r\ninterface KeyOperation extends EventTarget {\r\n    oncomplete: (ev: any) => any;\r\n    addEventListener(type: "complete", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onerror: (ev: any) => any;\r\n    addEventListener(type: "error", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    result: any;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface DOMStringMap {\r\n}\r\n\r\ninterface DeviceOrientationEvent extends Event {\r\n    gamma: number;\r\n    alpha: number;\r\n    absolute: boolean;\r\n    beta: number;\r\n    initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number, beta: number, gamma: number, absolute: boolean): void;\r\n}\r\n\r\ninterface MSMediaKeys {\r\n    keySystem: string;\r\n    createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array): MSMediaKeySession;\r\n    isTypeSupported(keySystem: string, type?: string): boolean;\r\n}\r\ndeclare var MSMediaKeys: {\r\n    prototype: MSMediaKeys;\r\n    new (): MSMediaKeys;\r\n}\r\n\r\ninterface MSMediaKeyMessageEvent extends Event {\r\n    destinationURL: string;\r\n    message: Uint8Array;\r\n}\r\n\r\ninterface MSHTMLWebViewElement extends HTMLElement {\r\n    documentTitle: string;\r\n    width: number;\r\n    src: string;\r\n    canGoForward: boolean;\r\n    height: number;\r\n    canGoBack: boolean;\r\n    navigateWithHttpRequestMessage(requestMessage: any): void;\r\n    goBack(): void;\r\n    navigate(uri: string): void;\r\n    stop(): void;\r\n    navigateToString(contents: string): void;\r\n    captureSelectedContentToDataPackageAsync(): MSWebViewAsyncOperation;\r\n    capturePreviewToBlobAsync(): MSWebViewAsyncOperation;\r\n    refresh(): void;\r\n    goForward(): void;\r\n    navigateToLocalStreamUri(source: string, streamResolver: any): void;\r\n    invokeScriptAsync(scriptName: string, ...args: any[]): MSWebViewAsyncOperation;\r\n    buildLocalStreamUri(contentIdentifier: string, relativePath: string): string;\r\n}\r\n\r\ninterface NavigationEvent extends Event {\r\n    uri: string;\r\n}\r\n\r\ninterface Element extends GlobalEventHandlers {\r\n    onlostpointercapture: (ev: PointerEvent) => any;\r\n    addEventListener(type: "lostpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onmspointerenter: (ev: any) => any;\r\n    addEventListener(type: "mspointerenter", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    ongotpointercapture: (ev: PointerEvent) => any;\r\n    addEventListener(type: "gotpointercapture", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    onmspointerleave: (ev: any) => any;\r\n    addEventListener(type: "mspointerleave", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msZoomTo(args: MsZoomToOptions): void;\r\n    setPointerCapture(pointerId: number): void;\r\n    msGetUntransformedBounds(): ClientRect;\r\n    releasePointerCapture(pointerId: number): void;\r\n    msRequestFullscreen(): void;\r\n}\r\n\r\ninterface RandomSource {\r\n    getRandomValues(array: ArrayBufferView): ArrayBufferView;\r\n}\r\n\r\ninterface XMLHttpRequest {\r\n    msCaching: string;\r\n    msCachingEnabled(): boolean;\r\n    overrideMimeType(mime: string): void;\r\n}\r\n\r\ninterface SourceBuffer extends EventTarget {\r\n    updating: boolean;\r\n    appendWindowStart: number;\r\n    appendWindowEnd: number;\r\n    buffered: TimeRanges;\r\n    timestampOffset: number;\r\n    audioTracks: AudioTrackList;\r\n    appendBuffer(data: ArrayBuffer): void;\r\n    remove(start: number, end: number): void;\r\n    abort(): void;\r\n    appendStream(stream: MSStream, maxSize?: number): void;\r\n}\r\n\r\ninterface MSInputMethodContext extends EventTarget {\r\n    oncandidatewindowshow: (ev: any) => any;\r\n    addEventListener(type: "candidatewindowshow", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    target: HTMLElement;\r\n    compositionStartOffset: number;\r\n    oncandidatewindowhide: (ev: any) => any;\r\n    addEventListener(type: "candidatewindowhide", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    oncandidatewindowupdate: (ev: any) => any;\r\n    addEventListener(type: "candidatewindowupdate", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    compositionEndOffset: number;\r\n    getCompositionAlternatives(): string[];\r\n    getCandidateWindowClientRect(): ClientRect;\r\n    hasComposition(): boolean;\r\n    isCandidateWindowVisible(): boolean;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface DeviceRotationRate {\r\n    gamma: number;\r\n    alpha: number;\r\n    beta: number;\r\n}\r\n\r\ninterface PluginArray {\r\n    length: number;\r\n    refresh(reload?: boolean): void;\r\n    item(index: number): Plugin;\r\n    [index: number]: Plugin;\r\n    namedItem(name: string): Plugin;\r\n    //[name: string]: Plugin;\r\n}\r\n\r\ninterface MSMediaKeyError {\r\n    systemCode: number;\r\n    code: number;\r\n    MS_MEDIA_KEYERR_SERVICE: number;\r\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    MS_MEDIA_KEYERR_OUTPUT: number;\r\n    MS_MEDIA_KEYERR_DOMAIN: number;\r\n    MS_MEDIA_KEYERR_UNKNOWN: number;\r\n    MS_MEDIA_KEYERR_CLIENT: number;\r\n}\r\ndeclare var MSMediaKeyError: {\r\n    MS_MEDIA_KEYERR_SERVICE: number;\r\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    MS_MEDIA_KEYERR_OUTPUT: number;\r\n    MS_MEDIA_KEYERR_DOMAIN: number;\r\n    MS_MEDIA_KEYERR_UNKNOWN: number;\r\n    MS_MEDIA_KEYERR_CLIENT: number;\r\n}\r\n\r\ninterface Plugin {\r\n    length: number;\r\n    filename: string;\r\n    version: string;\r\n    name: string;\r\n    description: string;\r\n    item(index: number): MimeType;\r\n    [index: number]: MimeType;\r\n    namedItem(type: string): MimeType;\r\n    //[type: string]: MimeType;\r\n}\r\n\r\ninterface HTMLFrameSetElement {\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n}\r\n\r\ninterface Screen extends EventTarget {\r\n    msOrientation: string;\r\n    onmsorientationchange: (ev: any) => any;\r\n    addEventListener(type: "msorientationchange", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    msLockOrientation(orientations: string[]): boolean;\r\n    msUnlockOrientation(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MediaSource extends EventTarget {\r\n    sourceBuffers: SourceBufferList;\r\n    duration: number;\r\n    readyState: string;\r\n    activeSourceBuffers: SourceBufferList;\r\n    addSourceBuffer(type: string): SourceBuffer;\r\n    endOfStream(error?: string): void;\r\n    isTypeSupported(type: string): boolean;\r\n    removeSourceBuffer(sourceBuffer: SourceBuffer): void;\r\n}\r\ndeclare var MediaSource: {\r\n    prototype: MediaSource;\r\n    new (): MediaSource;\r\n}\r\n\r\ninterface MediaError {\r\n    MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\n//declare var MediaError: {\r\n//    MS_MEDIA_ERR_ENCRYPTED: number;\r\n//}\r\n\r\ninterface SourceBufferList extends EventTarget {\r\n    length: number;\r\n    item(index: number): SourceBuffer;\r\n    [index: number]: SourceBuffer;\r\n}\r\n\r\ninterface XMLDocument extends Document {\r\n}\r\n\r\ninterface DeviceMotionEvent extends Event {\r\n    rotationRate: DeviceRotationRate;\r\n    acceleration: DeviceAcceleration;\r\n    interval: number;\r\n    accelerationIncludingGravity: DeviceAcceleration;\r\n    initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict, accelerationIncludingGravity: DeviceAccelerationDict, rotationRate: DeviceRotationRateDict, interval: number): void;\r\n}\r\n\r\ninterface MimeType {\r\n    enabledPlugin: Plugin;\r\n    suffixes: string;\r\n    type: string;\r\n    description: string;\r\n}\r\n\r\ninterface PointerEvent extends MouseEvent {\r\n    width: number;\r\n    rotation: number;\r\n    pressure: number;\r\n    pointerType: any;\r\n    isPrimary: boolean;\r\n    tiltY: number;\r\n    height: number;\r\n    intermediatePoints: any;\r\n    currentPoint: any;\r\n    tiltX: number;\r\n    hwTimestamp: number;\r\n    pointerId: number;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n}\r\n\r\ninterface MSDocumentExtensions {\r\n    captureEvents(): void;\r\n    releaseEvents(): void;\r\n}\r\n\r\ninterface HTMLElement {\r\n    dataset: DOMStringMap;\r\n    hidden: boolean;\r\n    msGetInputContext(): MSInputMethodContext;\r\n}\r\n\r\ninterface MutationObserver {\r\n    observe(target: Node, options: MutationObserverInit): void;\r\n    takeRecords(): MutationRecord[];\r\n    disconnect(): void;\r\n}\r\ndeclare var MutationObserver: {\r\n    prototype: MutationObserver;\r\n    new (): MutationObserver;\r\n}\r\n\r\ninterface AudioTrackList {\r\n    onremovetrack: (ev: PluginArray) => any;\r\n    //addEventListener(type: "removetrack", listener: (ev: PluginArray) => any, useCapture?: boolean): void;\r\n}\r\n\r\ninterface HTMLObjectElement {\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    readyState: number;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n}\r\n\r\ninterface HTMLEmbedElement {\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    readyState: string;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n}\r\n\r\ninterface MSWebViewAsyncOperation extends EventTarget {\r\n    target: MSHTMLWebViewElement;\r\n    oncomplete: (ev: any) => any;\r\n    addEventListener(type: "complete", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    error: DOMError;\r\n    onerror: (ev: any) => any;\r\n    addEventListener(type: "error", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    readyState: number;\r\n    type: number;\r\n    result: any;\r\n    start(): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    ERROR: number;\r\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    TYPE_INVOKE_SCRIPT: number;\r\n    COMPLETED: number;\r\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    STARTED: number;\r\n}\r\ndeclare var MSWebViewAsyncOperation: {\r\n    ERROR: number;\r\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    TYPE_INVOKE_SCRIPT: number;\r\n    COMPLETED: number;\r\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    STARTED: number;\r\n}\r\n\r\ninterface ScriptNotifyEvent extends Event {\r\n    value: string;\r\n    callingUri: string;\r\n}\r\n\r\ninterface PerformanceNavigationTiming extends PerformanceEntry {\r\n    redirectStart: number;\r\n    domainLookupEnd: number;\r\n    responseStart: number;\r\n    domComplete: number;\r\n    domainLookupStart: number;\r\n    loadEventStart: number;\r\n    unloadEventEnd: number;\r\n    fetchStart: number;\r\n    requestStart: number;\r\n    domInteractive: number;\r\n    navigationStart: number;\r\n    connectEnd: number;\r\n    loadEventEnd: number;\r\n    connectStart: number;\r\n    responseEnd: number;\r\n    domLoading: number;\r\n    redirectEnd: number;\r\n    redirectCount: number;\r\n    unloadEventStart: number;\r\n    domContentLoadedEventStart: number;\r\n    domContentLoadedEventEnd: number;\r\n    type: string;\r\n}\r\n\r\ninterface MSMediaKeyNeededEvent extends Event {\r\n    initData: Uint8Array;\r\n}\r\n\r\ninterface MSManipulationEvent {\r\n    MS_MANIPULATION_STATE_SELECTING: number;\r\n    MS_MANIPULATION_STATE_COMMITTED: number;\r\n    MS_MANIPULATION_STATE_PRESELECT: number;\r\n    MS_MANIPULATION_STATE_DRAGGING: number;\r\n    MS_MANIPULATION_STATE_CANCELLED: number;\r\n}\r\n//declare var MSManipulationEvent: {\r\n//    MS_MANIPULATION_STATE_SELECTING: number;\r\n//    MS_MANIPULATION_STATE_COMMITTED: number;\r\n//    MS_MANIPULATION_STATE_PRESELECT: number;\r\n//    MS_MANIPULATION_STATE_DRAGGING: number;\r\n//    MS_MANIPULATION_STATE_CANCELLED: number;\r\n//}\r\n\r\ninterface LongRunningScriptDetectedEvent extends Event {\r\n    stopPageScriptExecution: boolean;\r\n    executionTime: number;\r\n}\r\n\r\ninterface MSAppView {\r\n    viewId: number;\r\n    close(): void;\r\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\r\n}\r\n\r\ninterface PerfWidgetExternal {\r\n    maxCpuSpeed: number;\r\n    independentRenderingEnabled: boolean;\r\n    irDisablingContentString: string;\r\n    irStatusAvailable: boolean;\r\n    performanceCounter: number;\r\n    averagePaintTime: number;\r\n    activeNetworkRequestCount: number;\r\n    paintRequestsPerSecond: number;\r\n    extraInformationEnabled: boolean;\r\n    performanceCounterFrequency: number;\r\n    averageFrameTime: number;\r\n    repositionWindow(x: number, y: number): void;\r\n    getRecentMemoryUsage(last: number): any;\r\n    getMemoryUsage(): number;\r\n    resizeWindow(width: number, height: number): void;\r\n    getProcessCpuUsage(): number;\r\n    removeEventListener(eventType: string, callback: (ev: any) => any): void;\r\n    getRecentCpuUsage(last: number): any;\r\n    addEventListener(eventType: string, callback: (ev: any) => any): void;\r\n    getRecentFrames(last: number): any;\r\n    getRecentPaintRequests(last: number): any;\r\n}\r\n\r\n\r\ninterface PageTransitionEvent extends Event {\r\n    persisted: boolean;\r\n}\r\n\r\ninterface MutationCallback {\r\n    (mutations: MutationRecord[], observer: MutationObserver): void;\r\n}\r\n\r\ninterface HTMLDocument extends Document {\r\n}\r\n\r\ninterface KeyPair {\r\n    privateKey: Key;\r\n    publicKey: Key;\r\n}\r\n\r\ninterface MSApp {\r\n    getViewOpener(): MSAppView;\r\n    suppressSubdownloadCredentialPrompts(suppress: boolean): void;\r\n    execAsyncAtPriority(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): void;\r\n    isTaskScheduledAtPriorityOrHigher(priority: string): boolean;\r\n    execAtPriority(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): any;\r\n    createNewView(uri: string): MSAppView;\r\n    getCurrentPriority(): string;\r\n    NORMAL: string;\r\n    HIGH: string;\r\n    IDLE: string;\r\n    CURRENT: string;\r\n}\r\n//declare var MSApp: {\r\n//    NORMAL: string;\r\n//    HIGH: string;\r\n//    IDLE: string;\r\n//    CURRENT: string;\r\n//}\r\n\r\ninterface MSMediaKeySession extends EventTarget {\r\n    sessionId: string;\r\n    error: MSMediaKeyError;\r\n    keySystem: string;\r\n    close(): void;\r\n    update(key: Uint8Array): void;\r\n}\r\n\r\ninterface HTMLTrackElement {\r\n    readyState: number;\r\n    ERROR: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n}\r\n//declare var HTMLTrackElement: {\r\n//    ERROR: number;\r\n//    LOADING: number;\r\n//    LOADED: number;\r\n//    NONE: number;\r\n//}\r\n\r\ninterface HTMLVideoElement {\r\n    getVideoPlaybackQuality(): VideoPlaybackQuality;\r\n}\r\n\r\ninterface UnviewableContentIdentifiedEvent extends NavigationEvent {\r\n    referrer: string;\r\n}\r\n\r\ninterface CryptoOperation extends EventTarget {\r\n    algorithm: Algorithm;\r\n    oncomplete: (ev: any) => any;\r\n    addEventListener(type: "complete", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onerror: (ev: any) => any;\r\n    addEventListener(type: "error", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onprogress: (ev: any) => any;\r\n    addEventListener(type: "progress", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    onabort: (ev: any) => any;\r\n    addEventListener(type: "abort", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    key: Key;\r\n    result: any;\r\n    abort(): void;\r\n    finish(): void;\r\n    process(buffer: ArrayBufferView): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var onpageshow: (ev: PageTransitionEvent) => any;\r\ndeclare function addEventListener(type: "pageshow", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare var ondevicemotion: (ev: DeviceMotionEvent) => any;\r\ndeclare function addEventListener(type: "devicemotion", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\ndeclare var devicePixelRatio: number;\r\ndeclare var msCrypto: Crypto;\r\ndeclare var ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\ndeclare function addEventListener(type: "deviceorientation", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\ndeclare var oncompassneedscalibration: (ev: any) => any;\r\ndeclare function addEventListener(type: "compassneedscalibration", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var doNotTrack: string;\r\ndeclare var onmspointerenter: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerenter", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onpagehide: (ev: PageTransitionEvent) => any;\r\ndeclare function addEventListener(type: "pagehide", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare var onmspointerleave: (ev: any) => any;\r\ndeclare function addEventListener(type: "mspointerleave", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare var onpointerenter: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointerenter", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointerout: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointerout", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointerdown: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointerdown", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointerup: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointerup", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointercancel: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointercancel", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointerover: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointerover", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointermove: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointermove", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare var onpointerleave: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: "pointerleave", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n\r\n\r\n/////////////////////////////\r\n/// WorkerGlobalScope APIs \r\n/////////////////////////////\r\n// TODO: These are only available in a Web Worker - should be in a separate lib file\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n\r\n/////////////////////////////\r\n/// Windows Script Host APIS\r\n/////////////////////////////\r\ndeclare var ActiveXObject: { new (s: string): any; };\r\n\r\ninterface ITextWriter {\r\n    Write(s: string): void;\r\n    WriteLine(s: string): void;\r\n    Close(): void;\r\n}\r\n\r\ndeclare var WScript: {\r\n    Echo(s: any): void;\r\n    StdErr: ITextWriter;\r\n    StdOut: ITextWriter;\r\n    Arguments: { length: number; Item(n: number): string; };\r\n    ScriptFullName: string;\r\n    Quit(exitCode?: number): number;\r\n}\r\n';
  }),
  require.config({
    shim: { "vs/languages/typescript/lib/raw.typescriptServices": {} },
  }),
  define("vs/languages/typescript/lib/typescriptServices", [
    "./raw.typescriptServices",
    "vs/text!./lib.d.ts",
  ], function () {
    "use strict";
    return TypeScript;
  });
/*
page: http://www.buildwinjs.com/
url: http://www.buildwinjs.com/lib/monaco/vs/languages/typescript/lib/typescriptServices.js
*/
